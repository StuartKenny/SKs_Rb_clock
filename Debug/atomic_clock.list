
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001b78  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b2b8  08001e10  08001e10  00021e10  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  00050330  2**0
                  CONTENTS
  4 .rodata       00003a38  0801d0c8  0801d0c8  0003d0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08020b00  08020b00  00040b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  08020b08  08020b08  00040b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020b0c  08020b0c  00040b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  08020b10  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007124  20000330  08020e40  00050330  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007454  08020e40  00057454  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00060000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00050330  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0005035e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ae53  00000000  00000000  000503a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007805  00000000  00000000  0008b1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a20  00000000  00000000  00092a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000219a  00000000  00000000  00095420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000126e7  00000000  00000000  000975ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004184f  00000000  00000000  000a9ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a9909  00000000  00000000  000eb4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c1e0  00000000  00000000  00294dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  002a0fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <init_ldc_comms>:
}


/* Initialise Ethernet comms with LDC501 */
void init_ldc_comms(void)
{
       0:	b580      	push	{r7, lr}
       2:	af00      	add	r7, sp, #0
	ldc_tx("\r\n"); //return character
       4:	4810      	ldr	r0, [pc, #64]	; (48 <init_ldc_comms+0x48>)
       6:	f000 f831 	bl	6c <ldc_tx>
	ldc_tx("uloc1\r\n"); //unlock comms
       a:	4810      	ldr	r0, [pc, #64]	; (4c <init_ldc_comms+0x4c>)
       c:	f000 f82e 	bl	6c <ldc_tx>
//	ldc_tx("*idn?\r\n"); //request ID
	ldc_tx("TEON1\r\n"); //Turn TEC on
      10:	480f      	ldr	r0, [pc, #60]	; (50 <init_ldc_comms+0x50>)
      12:	f000 f82b 	bl	6c <ldc_tx>
	ldc_tx("SILD159.90\r\n"); //Set laser current to 159.9mA
      16:	480f      	ldr	r0, [pc, #60]	; (54 <init_ldc_comms+0x54>)
      18:	f000 f828 	bl	6c <ldc_tx>
	if(ldc_query("*idn?\r\n")){; //request ID
      1c:	480e      	ldr	r0, [pc, #56]	; (58 <init_ldc_comms+0x58>)
      1e:	f000 f857 	bl	d0 <ldc_query>
      22:	4603      	mov	r3, r0
      24:	2b00      	cmp	r3, #0
      26:	d00d      	beq.n	44 <init_ldc_comms+0x44>
		printf("Successful command response\r\n");
      28:	480c      	ldr	r0, [pc, #48]	; (5c <init_ldc_comms+0x5c>)
      2a:	f001 fd9d 	bl	1b68 <__puts_veneer>
		if(strncmp(ldc_comms_message, CONTROLLER_ID, strlen(CONTROLLER_ID)) == 0) {
      2e:	2232      	movs	r2, #50	; 0x32
      30:	490b      	ldr	r1, [pc, #44]	; (60 <init_ldc_comms+0x60>)
      32:	480c      	ldr	r0, [pc, #48]	; (64 <init_ldc_comms+0x64>)
      34:	f001 fd7c 	bl	1b30 <__strncmp_veneer>
      38:	4603      	mov	r3, r0
      3a:	2b00      	cmp	r3, #0
      3c:	d102      	bne.n	44 <init_ldc_comms+0x44>
		    	printf("Expected controller ID received");
      3e:	480a      	ldr	r0, [pc, #40]	; (68 <init_ldc_comms+0x68>)
      40:	f001 fd1e 	bl	1a80 <__printf_veneer>
		}
	}
}
      44:	bf00      	nop
      46:	bd80      	pop	{r7, pc}
      48:	0801d0c8 	.word	0x0801d0c8
      4c:	0801d0cc 	.word	0x0801d0cc
      50:	0801d0d4 	.word	0x0801d0d4
      54:	0801d0dc 	.word	0x0801d0dc
      58:	0801d0ec 	.word	0x0801d0ec
      5c:	0801d0f4 	.word	0x0801d0f4
      60:	0801d114 	.word	0x0801d114
      64:	20000000 	.word	0x20000000
      68:	0801d148 	.word	0x0801d148

0000006c <ldc_tx>:

/* Send a string to the LDC501 over telnet */
//void ldc_tx(const char *str, size_t lengthofstring)
void ldc_tx(const char str[])
{
      6c:	b590      	push	{r4, r7, lr}
      6e:	b085      	sub	sp, #20
      70:	af00      	add	r7, sp, #0
      72:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(str);
      74:	6878      	ldr	r0, [r7, #4]
      76:	f001 fd2b 	bl	1ad0 <__strlen_veneer>
      7a:	4603      	mov	r3, r0
      7c:	81fb      	strh	r3, [r7, #14]
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
      7e:	4b11      	ldr	r3, [pc, #68]	; (c4 <ldc_tx+0x58>)
      80:	681c      	ldr	r4, [r3, #0]
      82:	89fb      	ldrh	r3, [r7, #14]
      84:	f44f 72c1 	mov.w	r2, #386	; 0x182
      88:	4619      	mov	r1, r3
      8a:	2036      	movs	r0, #54	; 0x36
      8c:	f001 fd04 	bl	1a98 <__pbuf_alloc_veneer>
      90:	4603      	mov	r3, r0
      92:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)str, len); // copy data to pbuf
      94:	4b0b      	ldr	r3, [pc, #44]	; (c4 <ldc_tx+0x58>)
      96:	681b      	ldr	r3, [r3, #0]
      98:	689b      	ldr	r3, [r3, #8]
      9a:	89fa      	ldrh	r2, [r7, #14]
      9c:	6879      	ldr	r1, [r7, #4]
      9e:	4618      	mov	r0, r3
      a0:	f001 fd5a 	bl	1b58 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
      a4:	4b08      	ldr	r3, [pc, #32]	; (c8 <ldc_tx+0x5c>)
      a6:	681b      	ldr	r3, [r3, #0]
      a8:	4a06      	ldr	r2, [pc, #24]	; (c4 <ldc_tx+0x58>)
      aa:	6812      	ldr	r2, [r2, #0]
      ac:	4611      	mov	r1, r2
      ae:	4618      	mov	r0, r3
      b0:	f000 f973 	bl	39a <telnet_client_send>
	#ifdef LDC_DEBUG
//		printf("[LDC] Sent over Ethernet: %s\r\n", str);
		printf("[LDC] Sent over Ethernet: %s", str);
      b4:	6879      	ldr	r1, [r7, #4]
      b6:	4805      	ldr	r0, [pc, #20]	; (cc <ldc_tx+0x60>)
      b8:	f001 fce2 	bl	1a80 <__printf_veneer>
	#endif
	/*disabled as the pbuf is already null.
	 * This causes assertion errors but worried as this could overflow
	 */
	//pbuf_free(tcTx->p); //free up the pbuf
}
      bc:	bf00      	nop
      be:	3714      	adds	r7, #20
      c0:	46bd      	mov	sp, r7
      c2:	bd90      	pop	{r4, r7, pc}
      c4:	2000034c 	.word	0x2000034c
      c8:	20000350 	.word	0x20000350
      cc:	0801d168 	.word	0x0801d168

000000d0 <ldc_query>:

/* Send a command to the LDC501 over telnet and await response */
bool ldc_query(const char str[])
{
      d0:	b580      	push	{r7, lr}
      d2:	b082      	sub	sp, #8
      d4:	af00      	add	r7, sp, #0
      d6:	6078      	str	r0, [r7, #4]
	ldc_comms_retries = 0;
      d8:	4b29      	ldr	r3, [pc, #164]	; (180 <ldc_query+0xb0>)
      da:	2200      	movs	r2, #0
      dc:	701a      	strb	r2, [r3, #0]
	while (ldc_comms_retries < TELNET_RETRIES) {
      de:	e03e      	b.n	15e <ldc_query+0x8e>
		printf ("Entered command while loop\r\n");
      e0:	4828      	ldr	r0, [pc, #160]	; (184 <ldc_query+0xb4>)
      e2:	f001 fd41 	bl	1b68 <__puts_veneer>
		start_timer(ETHERNET_TIMER);
      e6:	4b28      	ldr	r3, [pc, #160]	; (188 <ldc_query+0xb8>)
      e8:	681b      	ldr	r3, [r3, #0]
      ea:	4618      	mov	r0, r3
      ec:	f001 fba2 	bl	1834 <start_timer>
		printf ("Started Ethernet timer\r\n");
      f0:	4826      	ldr	r0, [pc, #152]	; (18c <ldc_query+0xbc>)
      f2:	f001 fd39 	bl	1b68 <__puts_veneer>
		ldc_tx(str); //Send string
      f6:	6878      	ldr	r0, [r7, #4]
      f8:	f7ff ffb8 	bl	6c <ldc_tx>
		ldc_comms_state = LDC_AWAITING_RESPONSE; //set state to flag that a response is needed before sending anything further
      fc:	4b24      	ldr	r3, [pc, #144]	; (190 <ldc_query+0xc0>)
      fe:	2202      	movs	r2, #2
     100:	701a      	strb	r2, [r3, #0]
		while ((ldc_comms_state == LDC_AWAITING_RESPONSE) && (check_timer(ETHERNET_TIMER) < TELNET_TIMEOUT)) {//loop here until timeout or response is received
     102:	e004      	b.n	10e <ldc_query+0x3e>
//			printf ("Spinning round loop waiting for a response");
			/* Ethernet handling */
			ethernetif_input(&gnetif);
     104:	4823      	ldr	r0, [pc, #140]	; (194 <ldc_query+0xc4>)
     106:	f001 fceb 	bl	1ae0 <__ethernetif_input_veneer>
			sys_check_timeouts();
     10a:	f001 fd0d 	bl	1b28 <__sys_check_timeouts_veneer>
		while ((ldc_comms_state == LDC_AWAITING_RESPONSE) && (check_timer(ETHERNET_TIMER) < TELNET_TIMEOUT)) {//loop here until timeout or response is received
     10e:	4b20      	ldr	r3, [pc, #128]	; (190 <ldc_query+0xc0>)
     110:	781b      	ldrb	r3, [r3, #0]
     112:	2b02      	cmp	r3, #2
     114:	d108      	bne.n	128 <ldc_query+0x58>
     116:	4b1c      	ldr	r3, [pc, #112]	; (188 <ldc_query+0xb8>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	4618      	mov	r0, r3
     11c:	f001 fbba 	bl	1894 <check_timer>
     120:	4603      	mov	r3, r0
     122:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     126:	d3ed      	bcc.n	104 <ldc_query+0x34>
		}
		stop_timer(ETHERNET_TIMER);
     128:	4b17      	ldr	r3, [pc, #92]	; (188 <ldc_query+0xb8>)
     12a:	681b      	ldr	r3, [r3, #0]
     12c:	4618      	mov	r0, r3
     12e:	f001 fb9f 	bl	1870 <stop_timer>
		if (ldc_comms_state == LDC_RESPONSE_RECEIVED) {
     132:	4b17      	ldr	r3, [pc, #92]	; (190 <ldc_query+0xc0>)
     134:	781b      	ldrb	r3, [r3, #0]
     136:	2b03      	cmp	r3, #3
     138:	d104      	bne.n	144 <ldc_query+0x74>
			printf ("Response received\r\n");
     13a:	4817      	ldr	r0, [pc, #92]	; (198 <ldc_query+0xc8>)
     13c:	f001 fd14 	bl	1b68 <__puts_veneer>
			return (true); //success
     140:	2301      	movs	r3, #1
     142:	e018      	b.n	176 <ldc_query+0xa6>
		}
		ldc_comms_retries++; //increase retry count
     144:	4b0e      	ldr	r3, [pc, #56]	; (180 <ldc_query+0xb0>)
     146:	781b      	ldrb	r3, [r3, #0]
     148:	3301      	adds	r3, #1
     14a:	b2da      	uxtb	r2, r3
     14c:	4b0c      	ldr	r3, [pc, #48]	; (180 <ldc_query+0xb0>)
     14e:	701a      	strb	r2, [r3, #0]
		printf ("Issued command %s but no response. Retry %u\r\n", str, ldc_comms_retries);
     150:	4b0b      	ldr	r3, [pc, #44]	; (180 <ldc_query+0xb0>)
     152:	781b      	ldrb	r3, [r3, #0]
     154:	461a      	mov	r2, r3
     156:	6879      	ldr	r1, [r7, #4]
     158:	4810      	ldr	r0, [pc, #64]	; (19c <ldc_query+0xcc>)
     15a:	f001 fc91 	bl	1a80 <__printf_veneer>
	while (ldc_comms_retries < TELNET_RETRIES) {
     15e:	4b08      	ldr	r3, [pc, #32]	; (180 <ldc_query+0xb0>)
     160:	781b      	ldrb	r3, [r3, #0]
     162:	2b02      	cmp	r3, #2
     164:	d9bc      	bls.n	e0 <ldc_query+0x10>
	}
	printf ("Command %s failed after %u attempts\r\n", str, ldc_comms_retries);
     166:	4b06      	ldr	r3, [pc, #24]	; (180 <ldc_query+0xb0>)
     168:	781b      	ldrb	r3, [r3, #0]
     16a:	461a      	mov	r2, r3
     16c:	6879      	ldr	r1, [r7, #4]
     16e:	480c      	ldr	r0, [pc, #48]	; (1a0 <ldc_query+0xd0>)
     170:	f001 fc86 	bl	1a80 <__printf_veneer>
	return (false); //failure after timeout
     174:	2300      	movs	r3, #0
}
     176:	4618      	mov	r0, r3
     178:	3708      	adds	r7, #8
     17a:	46bd      	mov	sp, r7
     17c:	bd80      	pop	{r7, pc}
     17e:	bf00      	nop
     180:	20000355 	.word	0x20000355
     184:	0801d188 	.word	0x0801d188
     188:	20000124 	.word	0x20000124
     18c:	0801d1a4 	.word	0x0801d1a4
     190:	20000354 	.word	0x20000354
     194:	20000764 	.word	0x20000764
     198:	0801d1bc 	.word	0x0801d1bc
     19c:	0801d1d0 	.word	0x0801d1d0
     1a0:	0801d200 	.word	0x0801d200

000001a4 <telnet_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t telnet_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	b086      	sub	sp, #24
     1a8:	af00      	add	r7, sp, #0
     1aa:	60f8      	str	r0, [r7, #12]
     1ac:	60b9      	str	r1, [r7, #8]
     1ae:	4613      	mov	r3, r2
     1b0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure tc to maintain tcp connection information */
  tc = (struct telnet_client_struct *)mem_malloc(sizeof(struct telnet_client_struct));
     1b2:	200c      	movs	r0, #12
     1b4:	f001 fcb4 	bl	1b20 <__mem_malloc_veneer>
     1b8:	6138      	str	r0, [r7, #16]
  if (tc != NULL)
     1ba:	693b      	ldr	r3, [r7, #16]
     1bc:	2b00      	cmp	r3, #0
     1be:	d01f      	beq.n	200 <_Min_Heap_Size>
  {
    tc->state = TC_CONNECTED;
     1c0:	693b      	ldr	r3, [r7, #16]
     1c2:	2201      	movs	r2, #1
     1c4:	701a      	strb	r2, [r3, #0]
    tc->pcb = newpcb;
     1c6:	693b      	ldr	r3, [r7, #16]
     1c8:	68ba      	ldr	r2, [r7, #8]
     1ca:	605a      	str	r2, [r3, #4]
    tc->retries = 0;
     1cc:	693b      	ldr	r3, [r7, #16]
     1ce:	2200      	movs	r2, #0
     1d0:	705a      	strb	r2, [r3, #1]
    tc->p = NULL;
     1d2:	693b      	ldr	r3, [r7, #16]
     1d4:	2200      	movs	r2, #0
     1d6:	609a      	str	r2, [r3, #8]

    /* pass newly allocated tc structure as argument to newpcb */
    tcp_arg(newpcb, tc);
     1d8:	6939      	ldr	r1, [r7, #16]
     1da:	68b8      	ldr	r0, [r7, #8]
     1dc:	f001 fc4c 	bl	1a78 <__tcp_arg_veneer>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, telnet_client_recv);
     1e0:	490d      	ldr	r1, [pc, #52]	; (218 <_Min_Heap_Size+0x18>)
     1e2:	68b8      	ldr	r0, [r7, #8]
     1e4:	f001 fc68 	bl	1ab8 <__tcp_recv_veneer>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, telnet_client_poll, 0);
     1e8:	2200      	movs	r2, #0
     1ea:	490c      	ldr	r1, [pc, #48]	; (21c <_Min_Heap_Size+0x1c>)
     1ec:	68b8      	ldr	r0, [r7, #8]
     1ee:	f001 fcaf 	bl	1b50 <__tcp_poll_veneer>

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, telnet_client_sent);
     1f2:	490b      	ldr	r1, [pc, #44]	; (220 <_Min_Heap_Size+0x20>)
     1f4:	68b8      	ldr	r0, [r7, #8]
     1f6:	f001 fcbb 	bl	1b70 <__tcp_sent_veneer>
    #ifdef TELNET_DEBUG
		printf("[Telnet Client] Successful connection.\n\r");
	#endif

//	telnet_initialised = 1;
    ret_err = ERR_OK;
     1fa:	2300      	movs	r3, #0
     1fc:	75fb      	strb	r3, [r7, #23]
     1fe:	e005      	b.n	20c <_Min_Heap_Size+0xc>
  }
  else
  {
    /*  close tcp connection */
    telnet_client_connection_close(newpcb, tc);
     200:	6939      	ldr	r1, [r7, #16]
     202:	68b8      	ldr	r0, [r7, #8]
     204:	f000 f917 	bl	436 <telnet_client_connection_close>
	#ifdef TELNET_DEBUG
		printf("[Telnet Client] Connection closed due to memory error.\n\r");
	#endif
    /* return memory error */
    ret_err = ERR_MEM;
     208:	23ff      	movs	r3, #255	; 0xff
     20a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
     20c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     210:	4618      	mov	r0, r3
     212:	3718      	adds	r7, #24
     214:	46bd      	mov	sp, r7
     216:	bd80      	pop	{r7, pc}
     218:	00000225 	.word	0x00000225
     21c:	00000319 	.word	0x00000319
     220:	00000361 	.word	0x00000361

00000224 <telnet_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t telnet_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
     224:	b580      	push	{r7, lr}
     226:	b086      	sub	sp, #24
     228:	af00      	add	r7, sp, #0
     22a:	60f8      	str	r0, [r7, #12]
     22c:	60b9      	str	r1, [r7, #8]
     22e:	607a      	str	r2, [r7, #4]
     230:	70fb      	strb	r3, [r7, #3]
    printf("[Telnet Client] Received data from server.\n\r");
  #endif
  struct telnet_client_struct *tc;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
     232:	68fb      	ldr	r3, [r7, #12]
     234:	2b00      	cmp	r3, #0
     236:	d106      	bne.n	246 <telnet_client_recv+0x22>
     238:	4b34      	ldr	r3, [pc, #208]	; (30c <telnet_client_recv+0xe8>)
     23a:	f240 129d 	movw	r2, #413	; 0x19d
     23e:	4934      	ldr	r1, [pc, #208]	; (310 <telnet_client_recv+0xec>)
     240:	4834      	ldr	r0, [pc, #208]	; (314 <telnet_client_recv+0xf0>)
     242:	f001 fc1d 	bl	1a80 <__printf_veneer>

  tc = (struct telnet_client_struct *)arg;
     246:	68fb      	ldr	r3, [r7, #12]
     248:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2b00      	cmp	r3, #0
     24e:	d10d      	bne.n	26c <telnet_client_recv+0x48>
  {
    /* remote host closed connection */
    tc->state = TC_CLOSING;
     250:	693b      	ldr	r3, [r7, #16]
     252:	2203      	movs	r2, #3
     254:	701a      	strb	r2, [r3, #0]
    if(tc->p == NULL)
     256:	693b      	ldr	r3, [r7, #16]
     258:	689b      	ldr	r3, [r3, #8]
     25a:	2b00      	cmp	r3, #0
     25c:	d103      	bne.n	266 <telnet_client_recv+0x42>
    {
       /* we're done sending, close connection */
       telnet_client_connection_close(tpcb, tc);
     25e:	6939      	ldr	r1, [r7, #16]
     260:	68b8      	ldr	r0, [r7, #8]
     262:	f000 f8e8 	bl	436 <telnet_client_connection_close>
//      tcp_sent(tpcb, telnet_client_sent);

      /* send remaining data*/
//      telnet_client_send(tpcb, tc);
    }
    ret_err = ERR_OK;
     266:	2300      	movs	r3, #0
     268:	75fb      	strb	r3, [r7, #23]
     26a:	e048      	b.n	2fe <telnet_client_recv+0xda>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
     26c:	f997 3003 	ldrsb.w	r3, [r7, #3]
     270:	2b00      	cmp	r3, #0
     272:	d00b      	beq.n	28c <telnet_client_recv+0x68>
  {
    /* free received pbuf*/
    if (p != NULL)
     274:	687b      	ldr	r3, [r7, #4]
     276:	2b00      	cmp	r3, #0
     278:	d005      	beq.n	286 <telnet_client_recv+0x62>
    {
      tc->p = NULL;
     27a:	693b      	ldr	r3, [r7, #16]
     27c:	2200      	movs	r2, #0
     27e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
     280:	6878      	ldr	r0, [r7, #4]
     282:	f001 fc15 	bl	1ab0 <__pbuf_free_veneer>
    }
    ret_err = err;
     286:	78fb      	ldrb	r3, [r7, #3]
     288:	75fb      	strb	r3, [r7, #23]
     28a:	e038      	b.n	2fe <telnet_client_recv+0xda>
  }
  else if(tc->state == TC_CONNECTED)
     28c:	693b      	ldr	r3, [r7, #16]
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	2b01      	cmp	r3, #1
     292:	d113      	bne.n	2bc <telnet_client_recv+0x98>
  {
   /* store reference to incoming pbuf (chain) */
    tc->p = p;
     294:	693b      	ldr	r3, [r7, #16]
     296:	687a      	ldr	r2, [r7, #4]
     298:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, telnet_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	891b      	ldrh	r3, [r3, #8]
     29e:	4619      	mov	r1, r3
     2a0:	68b8      	ldr	r0, [r7, #8]
     2a2:	f001 fbf5 	bl	1a90 <__tcp_recved_veneer>
      printf("[Telnet Client] Acknowledging received data.\n\r");
    #endif

    /* handle the received data */
//    example_client_handle(tpcb, tc);
    telnet_client_handle(tpcb, tc, p);
     2a6:	687a      	ldr	r2, [r7, #4]
     2a8:	6939      	ldr	r1, [r7, #16]
     2aa:	68b8      	ldr	r0, [r7, #8]
     2ac:	f000 f8ea 	bl	484 <telnet_client_handle>

    pbuf_free(p);
     2b0:	6878      	ldr	r0, [r7, #4]
     2b2:	f001 fbfd 	bl	1ab0 <__pbuf_free_veneer>

    ret_err = ERR_OK;
     2b6:	2300      	movs	r3, #0
     2b8:	75fb      	strb	r3, [r7, #23]
     2ba:	e020      	b.n	2fe <telnet_client_recv+0xda>
  }
  else if(tc->state == TC_CLOSING)
     2bc:	693b      	ldr	r3, [r7, #16]
     2be:	781b      	ldrb	r3, [r3, #0]
     2c0:	2b03      	cmp	r3, #3
     2c2:	d10e      	bne.n	2e2 <telnet_client_recv+0xbe>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	891b      	ldrh	r3, [r3, #8]
     2c8:	4619      	mov	r1, r3
     2ca:	68b8      	ldr	r0, [r7, #8]
     2cc:	f001 fbe0 	bl	1a90 <__tcp_recved_veneer>
    tc->p = NULL;
     2d0:	693b      	ldr	r3, [r7, #16]
     2d2:	2200      	movs	r2, #0
     2d4:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     2d6:	6878      	ldr	r0, [r7, #4]
     2d8:	f001 fbea 	bl	1ab0 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     2dc:	2300      	movs	r3, #0
     2de:	75fb      	strb	r3, [r7, #23]
     2e0:	e00d      	b.n	2fe <telnet_client_recv+0xda>
  }
  else
  {
    /* unknown tc->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	891b      	ldrh	r3, [r3, #8]
     2e6:	4619      	mov	r1, r3
     2e8:	68b8      	ldr	r0, [r7, #8]
     2ea:	f001 fbd1 	bl	1a90 <__tcp_recved_veneer>
    tc->p = NULL;
     2ee:	693b      	ldr	r3, [r7, #16]
     2f0:	2200      	movs	r2, #0
     2f2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     2f4:	6878      	ldr	r0, [r7, #4]
     2f6:	f001 fbdb 	bl	1ab0 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     2fa:	2300      	movs	r3, #0
     2fc:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
     2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     302:	4618      	mov	r0, r3
     304:	3718      	adds	r7, #24
     306:	46bd      	mov	sp, r7
     308:	bd80      	pop	{r7, pc}
     30a:	bf00      	nop
     30c:	0801d228 	.word	0x0801d228
     310:	0801d240 	.word	0x0801d240
     314:	0801d24c 	.word	0x0801d24c

00000318 <telnet_client_poll>:


static err_t telnet_client_poll(void *arg, struct tcp_pcb *tpcb)
{
     318:	b580      	push	{r7, lr}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
     320:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct telnet_client_struct *tc;

  tc = (struct telnet_client_struct *)arg;
     322:	687b      	ldr	r3, [r7, #4]
     324:	60bb      	str	r3, [r7, #8]
  if (tc != NULL)
     326:	68bb      	ldr	r3, [r7, #8]
     328:	2b00      	cmp	r3, #0
     32a:	d00e      	beq.n	34a <telnet_client_poll+0x32>
  {
    if (tc->p != NULL)
     32c:	68bb      	ldr	r3, [r7, #8]
     32e:	689b      	ldr	r3, [r3, #8]
     330:	2b00      	cmp	r3, #0
     332:	d107      	bne.n	344 <telnet_client_poll+0x2c>
//      telnet_client_send(tpcb, tc);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(tc->state == TC_CLOSING)
     334:	68bb      	ldr	r3, [r7, #8]
     336:	781b      	ldrb	r3, [r3, #0]
     338:	2b03      	cmp	r3, #3
     33a:	d103      	bne.n	344 <telnet_client_poll+0x2c>
      {
        /*  close tcp connection */
        telnet_client_connection_close(tpcb, tc);
     33c:	68b9      	ldr	r1, [r7, #8]
     33e:	6838      	ldr	r0, [r7, #0]
     340:	f000 f879 	bl	436 <telnet_client_connection_close>
      }
    }
    ret_err = ERR_OK;
     344:	2300      	movs	r3, #0
     346:	73fb      	strb	r3, [r7, #15]
     348:	e004      	b.n	354 <telnet_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
     34a:	6838      	ldr	r0, [r7, #0]
     34c:	f001 fbd0 	bl	1af0 <__tcp_abort_veneer>
    ret_err = ERR_ABRT;
     350:	23f3      	movs	r3, #243	; 0xf3
     352:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
     354:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
     358:	4618      	mov	r0, r3
     35a:	3710      	adds	r7, #16
     35c:	46bd      	mov	sp, r7
     35e:	bd80      	pop	{r7, pc}

00000360 <telnet_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t telnet_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
     360:	b580      	push	{r7, lr}
     362:	b086      	sub	sp, #24
     364:	af00      	add	r7, sp, #0
     366:	60f8      	str	r0, [r7, #12]
     368:	60b9      	str	r1, [r7, #8]
     36a:	4613      	mov	r3, r2
     36c:	80fb      	strh	r3, [r7, #6]
#endif
  struct telnet_client_struct *tc;

  LWIP_UNUSED_ARG(len);

  tc = (struct telnet_client_struct *)arg;
     36e:	68fb      	ldr	r3, [r7, #12]
     370:	617b      	str	r3, [r7, #20]
  tc->retries = 0;
     372:	697b      	ldr	r3, [r7, #20]
     374:	2200      	movs	r2, #0
     376:	705a      	strb	r2, [r3, #1]

  if(tc->p != NULL)
     378:	697b      	ldr	r3, [r7, #20]
     37a:	689b      	ldr	r3, [r3, #8]
     37c:	2b00      	cmp	r3, #0
     37e:	d107      	bne.n	390 <telnet_client_sent+0x30>
//    telnet_client_send(tpcb, tc);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(tc->state == TC_CLOSING)
     380:	697b      	ldr	r3, [r7, #20]
     382:	781b      	ldrb	r3, [r3, #0]
     384:	2b03      	cmp	r3, #3
     386:	d103      	bne.n	390 <telnet_client_sent+0x30>
      telnet_client_connection_close(tpcb, tc);
     388:	6979      	ldr	r1, [r7, #20]
     38a:	68b8      	ldr	r0, [r7, #8]
     38c:	f000 f853 	bl	436 <telnet_client_connection_close>
  }
  return ERR_OK;
     390:	2300      	movs	r3, #0
}
     392:	4618      	mov	r0, r3
     394:	3718      	adds	r7, #24
     396:	46bd      	mov	sp, r7
     398:	bd80      	pop	{r7, pc}

0000039a <telnet_client_send>:


/** A function to send the data to the server
  */
static void telnet_client_send(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     39a:	b580      	push	{r7, lr}
     39c:	b086      	sub	sp, #24
     39e:	af00      	add	r7, sp, #0
     3a0:	6078      	str	r0, [r7, #4]
     3a2:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Sending data to server.\n\r");
  #endif
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
     3a4:	2300      	movs	r3, #0
     3a6:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
     3a8:	e031      	b.n	40e <_Min_Stack_Size+0xe>
         (tc->p != NULL) &&
         (tc->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from tc structure */
    ptr = tc->p;
     3aa:	683b      	ldr	r3, [r7, #0]
     3ac:	689b      	ldr	r3, [r3, #8]
     3ae:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
     3b0:	693b      	ldr	r3, [r7, #16]
     3b2:	6859      	ldr	r1, [r3, #4]
     3b4:	693b      	ldr	r3, [r7, #16]
     3b6:	895a      	ldrh	r2, [r3, #10]
     3b8:	2301      	movs	r3, #1
     3ba:	6878      	ldr	r0, [r7, #4]
     3bc:	f001 fb8c 	bl	1ad8 <__tcp_write_veneer>
     3c0:	4603      	mov	r3, r0
     3c2:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
     3c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
     3c8:	2b00      	cmp	r3, #0
     3ca:	d118      	bne.n	3fe <telnet_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
     3cc:	693b      	ldr	r3, [r7, #16]
     3ce:	895b      	ldrh	r3, [r3, #10]
     3d0:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      tc->p = ptr->next;
     3d2:	693b      	ldr	r3, [r7, #16]
     3d4:	681a      	ldr	r2, [r3, #0]
     3d6:	683b      	ldr	r3, [r7, #0]
     3d8:	609a      	str	r2, [r3, #8]

      if(tc->p != NULL)
     3da:	683b      	ldr	r3, [r7, #0]
     3dc:	689b      	ldr	r3, [r3, #8]
     3de:	2b00      	cmp	r3, #0
     3e0:	d004      	beq.n	3ec <telnet_client_send+0x52>
      {
        /* increment reference count for tc->p */
        pbuf_ref(tc->p);
     3e2:	683b      	ldr	r3, [r7, #0]
     3e4:	689b      	ldr	r3, [r3, #8]
     3e6:	4618      	mov	r0, r3
     3e8:	f001 fb92 	bl	1b10 <__pbuf_ref_veneer>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
     3ec:	6938      	ldr	r0, [r7, #16]
     3ee:	f001 fb5f 	bl	1ab0 <__pbuf_free_veneer>
     3f2:	4603      	mov	r3, r0
     3f4:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
     3f6:	7b7b      	ldrb	r3, [r7, #13]
     3f8:	2b00      	cmp	r3, #0
     3fa:	d0f7      	beq.n	3ec <telnet_client_send+0x52>
     3fc:	e007      	b.n	40e <_Min_Stack_Size+0xe>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
     3fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
     402:	f1b3 3fff 	cmp.w	r3, #4294967295
     406:	d102      	bne.n	40e <_Min_Stack_Size+0xe>
   {
      /* we are low on memory, try later / harder, defer to poll */
     tc->p = ptr;
     408:	683b      	ldr	r3, [r7, #0]
     40a:	693a      	ldr	r2, [r7, #16]
     40c:	609a      	str	r2, [r3, #8]
         (tc->p != NULL) &&
     40e:	f997 3017 	ldrsb.w	r3, [r7, #23]
     412:	2b00      	cmp	r3, #0
     414:	d10b      	bne.n	42e <_Min_Stack_Size+0x2e>
     416:	683b      	ldr	r3, [r7, #0]
     418:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
     41a:	2b00      	cmp	r3, #0
     41c:	d007      	beq.n	42e <_Min_Stack_Size+0x2e>
         (tc->p->len <= tcp_sndbuf(tpcb)))
     41e:	683b      	ldr	r3, [r7, #0]
     420:	689b      	ldr	r3, [r3, #8]
     422:	895a      	ldrh	r2, [r3, #10]
     424:	687b      	ldr	r3, [r7, #4]
     426:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (tc->p != NULL) &&
     42a:	429a      	cmp	r2, r3
     42c:	d9bd      	bls.n	3aa <telnet_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
     42e:	bf00      	nop
     430:	3718      	adds	r7, #24
     432:	46bd      	mov	sp, r7
     434:	bd80      	pop	{r7, pc}

00000436 <telnet_client_connection_close>:


static void telnet_client_connection_close(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     436:	b580      	push	{r7, lr}
     438:	b082      	sub	sp, #8
     43a:	af00      	add	r7, sp, #0
     43c:	6078      	str	r0, [r7, #4]
     43e:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Closing connection.\n\r");
  #endif
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
     440:	2100      	movs	r1, #0
     442:	6878      	ldr	r0, [r7, #4]
     444:	f001 fb18 	bl	1a78 <__tcp_arg_veneer>
  tcp_sent(tpcb, NULL);
     448:	2100      	movs	r1, #0
     44a:	6878      	ldr	r0, [r7, #4]
     44c:	f001 fb90 	bl	1b70 <__tcp_sent_veneer>
  tcp_recv(tpcb, NULL);
     450:	2100      	movs	r1, #0
     452:	6878      	ldr	r0, [r7, #4]
     454:	f001 fb30 	bl	1ab8 <__tcp_recv_veneer>
  tcp_err(tpcb, NULL);
     458:	2100      	movs	r1, #0
     45a:	6878      	ldr	r0, [r7, #4]
     45c:	f001 fb80 	bl	1b60 <__tcp_err_veneer>
  tcp_poll(tpcb, NULL, 0);
     460:	2200      	movs	r2, #0
     462:	2100      	movs	r1, #0
     464:	6878      	ldr	r0, [r7, #4]
     466:	f001 fb73 	bl	1b50 <__tcp_poll_veneer>

  /* delete tc structure */
  if (tc != NULL)
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	2b00      	cmp	r3, #0
     46e:	d002      	beq.n	476 <telnet_client_connection_close+0x40>
  {
    mem_free(tc);
     470:	6838      	ldr	r0, [r7, #0]
     472:	f001 fb25 	bl	1ac0 <__mem_free_veneer>
  }

  /* close tcp connection */
  tcp_close(tpcb);
     476:	6878      	ldr	r0, [r7, #4]
     478:	f001 fb3e 	bl	1af8 <__tcp_close_veneer>

//  telnet_initialised = 0;
}
     47c:	bf00      	nop
     47e:	3708      	adds	r7, #8
     480:	46bd      	mov	sp, r7
     482:	bd80      	pop	{r7, pc}

00000484 <telnet_client_handle>:
//}

/* Stuart's function to handle the incoming TCP Data */

static void telnet_client_handle (struct tcp_pcb *tpcb, struct telnet_client_struct *tc, struct pbuf *p)
{
     484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     488:	b08b      	sub	sp, #44	; 0x2c
     48a:	af00      	add	r7, sp, #0
     48c:	60f8      	str	r0, [r7, #12]
     48e:	60b9      	str	r1, [r7, #8]
     490:	607a      	str	r2, [r7, #4]
     492:	466b      	mov	r3, sp
     494:	461e      	mov	r6, r3
	//function has been called as telnet_client_handle(tpcb, tc, p);
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Handling incoming data.\n\r");
  #endif
    /* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
     496:	68fb      	ldr	r3, [r7, #12]
     498:	685b      	ldr	r3, [r3, #4]
     49a:	613b      	str	r3, [r7, #16]
	uint16_t inPort = tpcb->remote_port;
     49c:	68fb      	ldr	r3, [r7, #12]
     49e:	8b1b      	ldrh	r3, [r3, #24]
     4a0:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
     4a2:	f107 0310 	add.w	r3, r7, #16
     4a6:	4618      	mov	r0, r3
     4a8:	f001 fb4a 	bl	1b40 <__ip4addr_ntoa_veneer>
     4ac:	6238      	str	r0, [r7, #32]

//	tcTx->state = tc->state;
//	tcTx->pcb = tc->pcb;
//	tcTx->p = tc->p;

	tcTx = tc;
     4ae:	4a29      	ldr	r2, [pc, #164]	; (554 <telnet_client_handle+0xd0>)
     4b0:	68bb      	ldr	r3, [r7, #8]
     4b2:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
     4b4:	4a28      	ldr	r2, [pc, #160]	; (558 <telnet_client_handle+0xd4>)
     4b6:	68fb      	ldr	r3, [r7, #12]
     4b8:	6013      	str	r3, [r2, #0]

	if (p -> len != p -> tot_len) {//spans more that one buffer and I haven't allowed for this yet
     4ba:	687b      	ldr	r3, [r7, #4]
     4bc:	895a      	ldrh	r2, [r3, #10]
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	891b      	ldrh	r3, [r3, #8]
     4c2:	429a      	cmp	r2, r3
     4c4:	d002      	beq.n	4cc <telnet_client_handle+0x48>
		printf("[Telnet Client] ERROR - Received data spans more than one pbuf.\n\r");
     4c6:	4825      	ldr	r0, [pc, #148]	; (55c <telnet_client_handle+0xd8>)
     4c8:	f001 fada 	bl	1a80 <__printf_veneer>
	}

	/* Copy payload into a string */
	uint16_t len = p -> len; //length of the payload
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	895b      	ldrh	r3, [r3, #10]
     4d0:	83fb      	strh	r3, [r7, #30]
	char str[len+1]; //holds the payload, with capacity for terminating character
     4d2:	8bfb      	ldrh	r3, [r7, #30]
     4d4:	1c59      	adds	r1, r3, #1
     4d6:	1e4b      	subs	r3, r1, #1
     4d8:	61bb      	str	r3, [r7, #24]
     4da:	460a      	mov	r2, r1
     4dc:	2300      	movs	r3, #0
     4de:	4690      	mov	r8, r2
     4e0:	4699      	mov	r9, r3
     4e2:	f04f 0200 	mov.w	r2, #0
     4e6:	f04f 0300 	mov.w	r3, #0
     4ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
     4ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
     4f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
     4f6:	460a      	mov	r2, r1
     4f8:	2300      	movs	r3, #0
     4fa:	4614      	mov	r4, r2
     4fc:	461d      	mov	r5, r3
     4fe:	f04f 0200 	mov.w	r2, #0
     502:	f04f 0300 	mov.w	r3, #0
     506:	00eb      	lsls	r3, r5, #3
     508:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     50c:	00e2      	lsls	r2, r4, #3
     50e:	460b      	mov	r3, r1
     510:	3307      	adds	r3, #7
     512:	08db      	lsrs	r3, r3, #3
     514:	00db      	lsls	r3, r3, #3
     516:	ebad 0d03 	sub.w	sp, sp, r3
     51a:	466b      	mov	r3, sp
     51c:	3300      	adds	r3, #0
     51e:	617b      	str	r3, [r7, #20]
	memcpy(str, p -> payload, p -> len); //copy the payload across
     520:	687b      	ldr	r3, [r7, #4]
     522:	6859      	ldr	r1, [r3, #4]
     524:	687b      	ldr	r3, [r7, #4]
     526:	895b      	ldrh	r3, [r3, #10]
     528:	461a      	mov	r2, r3
     52a:	6978      	ldr	r0, [r7, #20]
     52c:	f001 faac 	bl	1a88 <__memcpy_veneer>
	str[len] = '\0'; //assigns null character to terminate string
     530:	8bfb      	ldrh	r3, [r7, #30]
     532:	697a      	ldr	r2, [r7, #20]
     534:	2100      	movs	r1, #0
     536:	54d1      	strb	r1, [r2, r3]
	ldc_comms_state = LDC_RESPONSE_RECEIVED;
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <telnet_client_handle+0xdc>)
     53a:	2203      	movs	r2, #3
     53c:	701a      	strb	r2, [r3, #0]
	#ifdef LDC_DEBUG
//		printf("[LDC] Message: %s\n\r",str);
		printf("[LDC] Message: %s",str);
     53e:	6979      	ldr	r1, [r7, #20]
     540:	4808      	ldr	r0, [pc, #32]	; (564 <telnet_client_handle+0xe0>)
     542:	f001 fa9d 	bl	1a80 <__printf_veneer>
     546:	46b5      	mov	sp, r6
//    	printf("String length: %u\n\r",sizeof(str));
//    	printf("p -> len: %u\n\r",p -> len);
//    	printf("p -> tot_len: %u\n\r",p -> tot_len);
	#endif
}
     548:	bf00      	nop
     54a:	372c      	adds	r7, #44	; 0x2c
     54c:	46bd      	mov	sp, r7
     54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     552:	bf00      	nop
     554:	2000034c 	.word	0x2000034c
     558:	20000350 	.word	0x20000350
     55c:	0801d274 	.word	0x0801d274
     560:	20000354 	.word	0x20000354
     564:	0801d2b8 	.word	0x0801d2b8

00000568 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
     568:	b580      	push	{r7, lr}
     56a:	b08a      	sub	sp, #40	; 0x28
     56c:	af00      	add	r7, sp, #0
     56e:	60f8      	str	r0, [r7, #12]
     570:	60b9      	str	r1, [r7, #8]
     572:	607a      	str	r2, [r7, #4]
     574:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
     576:	2300      	movs	r3, #0
     578:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
     57a:	68fb      	ldr	r3, [r7, #12]
     57c:	021a      	lsls	r2, r3, #8
     57e:	68bb      	ldr	r3, [r7, #8]
     580:	00db      	lsls	r3, r3, #3
     582:	4313      	orrs	r3, r2
     584:	687a      	ldr	r2, [r7, #4]
     586:	4313      	orrs	r3, r2
     588:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     58a:	2200      	movs	r2, #0
     58c:	f44f 7180 	mov.w	r1, #256	; 0x100
     590:	4830      	ldr	r0, [pc, #192]	; (654 <synth_writereg+0xec>)
     592:	f001 fa89 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
     596:	2200      	movs	r2, #0
     598:	f44f 6100 	mov.w	r1, #2048	; 0x800
     59c:	482d      	ldr	r0, [pc, #180]	; (654 <synth_writereg+0xec>)
     59e:	f001 fa83 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     5a2:	2300      	movs	r3, #0
     5a4:	623b      	str	r3, [r7, #32]
     5a6:	e036      	b.n	616 <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
     5a8:	2220      	movs	r2, #32
     5aa:	6a3b      	ldr	r3, [r7, #32]
     5ac:	1ad3      	subs	r3, r2, r3
     5ae:	3b01      	subs	r3, #1
     5b0:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
     5b2:	2201      	movs	r2, #1
     5b4:	697b      	ldr	r3, [r7, #20]
     5b6:	fa02 f303 	lsl.w	r3, r2, r3
     5ba:	461a      	mov	r2, r3
     5bc:	69fb      	ldr	r3, [r7, #28]
     5be:	4013      	ands	r3, r2
     5c0:	2b00      	cmp	r3, #0
     5c2:	bf14      	ite	ne
     5c4:	2301      	movne	r3, #1
     5c6:	2300      	moveq	r3, #0
     5c8:	b2db      	uxtb	r3, r3
     5ca:	461a      	mov	r2, r3
     5cc:	f44f 7100 	mov.w	r1, #512	; 0x200
     5d0:	4820      	ldr	r0, [pc, #128]	; (654 <synth_writereg+0xec>)
     5d2:	f001 fa69 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
     5d6:	2201      	movs	r2, #1
     5d8:	f44f 7180 	mov.w	r1, #256	; 0x100
     5dc:	481d      	ldr	r0, [pc, #116]	; (654 <synth_writereg+0xec>)
     5de:	f001 fa63 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     5e2:	2200      	movs	r2, #0
     5e4:	f44f 7180 	mov.w	r1, #256	; 0x100
     5e8:	481a      	ldr	r0, [pc, #104]	; (654 <synth_writereg+0xec>)
     5ea:	f001 fa5d 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
     5ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
     5f2:	4818      	ldr	r0, [pc, #96]	; (654 <synth_writereg+0xec>)
     5f4:	f001 fa54 	bl	1aa0 <__HAL_GPIO_ReadPin_veneer>
     5f8:	4603      	mov	r3, r0
     5fa:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
     5fc:	2220      	movs	r2, #32
     5fe:	6a3b      	ldr	r3, [r7, #32]
     600:	1ad3      	subs	r3, r2, r3
     602:	3b01      	subs	r3, #1
     604:	fa01 f303 	lsl.w	r3, r1, r3
     608:	461a      	mov	r2, r3
		read_data = read_data
     60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     60c:	4313      	orrs	r3, r2
     60e:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     610:	6a3b      	ldr	r3, [r7, #32]
     612:	3301      	adds	r3, #1
     614:	623b      	str	r3, [r7, #32]
     616:	2220      	movs	r2, #32
     618:	6a3b      	ldr	r3, [r7, #32]
     61a:	4293      	cmp	r3, r2
     61c:	d3c4      	bcc.n	5a8 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
     61e:	2201      	movs	r2, #1
     620:	f44f 6100 	mov.w	r1, #2048	; 0x800
     624:	480b      	ldr	r0, [pc, #44]	; (654 <synth_writereg+0xec>)
     626:	f001 fa3f 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
     62a:	78fb      	ldrb	r3, [r7, #3]
     62c:	2b00      	cmp	r3, #0
     62e:	d00c      	beq.n	64a <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
     630:	68b8      	ldr	r0, [r7, #8]
     632:	f000 f813 	bl	65c <synth_readreg>
     636:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
     638:	69ba      	ldr	r2, [r7, #24]
     63a:	68fb      	ldr	r3, [r7, #12]
     63c:	429a      	cmp	r2, r3
     63e:	d004      	beq.n	64a <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
     640:	4805      	ldr	r0, [pc, #20]	; (658 <synth_writereg+0xf0>)
     642:	f001 fa91 	bl	1b68 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
     646:	f001 fa5f 	bl	1b08 <__Error_Handler_veneer>
		}
	}

	return read_data;
     64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     64c:	4618      	mov	r0, r3
     64e:	3728      	adds	r7, #40	; 0x28
     650:	46bd      	mov	sp, r7
     652:	bd80      	pop	{r7, pc}
     654:	58020800 	.word	0x58020800
     658:	0801d518 	.word	0x0801d518

0000065c <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
     65c:	b580      	push	{r7, lr}
     65e:	b084      	sub	sp, #16
     660:	af00      	add	r7, sp, #0
     662:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
     664:	2300      	movs	r3, #0
     666:	2200      	movs	r2, #0
     668:	2100      	movs	r1, #0
     66a:	6878      	ldr	r0, [r7, #4]
     66c:	f7ff ff7c 	bl	568 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     670:	2300      	movs	r3, #0
     672:	2200      	movs	r2, #0
     674:	2100      	movs	r1, #0
     676:	6878      	ldr	r0, [r7, #4]
     678:	f7ff ff76 	bl	568 <synth_writereg>
     67c:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     67e:	68fb      	ldr	r3, [r7, #12]
     680:	0a1b      	lsrs	r3, r3, #8

}
     682:	4618      	mov	r0, r3
     684:	3710      	adds	r7, #16
     686:	46bd      	mov	sp, r7
     688:	bd80      	pop	{r7, pc}

0000068a <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     68a:	b580      	push	{r7, lr}
     68c:	b084      	sub	sp, #16
     68e:	af00      	add	r7, sp, #0
     690:	4603      	mov	r3, r0
     692:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     694:	79fb      	ldrb	r3, [r7, #7]
     696:	2b03      	cmp	r3, #3
     698:	d904      	bls.n	6a4 <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     69a:	4811      	ldr	r0, [pc, #68]	; (6e0 <set_MW_power+0x56>)
     69c:	f001 fa64 	bl	1b68 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     6a0:	f001 fa32 	bl	1b08 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     6a4:	2016      	movs	r0, #22
     6a6:	f7ff ffd9 	bl	65c <synth_readreg>
     6aa:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     6ac:	68fb      	ldr	r3, [r7, #12]
     6ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     6b2:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     6b4:	79fb      	ldrb	r3, [r7, #7]
     6b6:	021b      	lsls	r3, r3, #8
     6b8:	461a      	mov	r2, r3
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	4313      	orrs	r3, r2
     6be:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     6c0:	2301      	movs	r3, #1
     6c2:	2200      	movs	r2, #0
     6c4:	2116      	movs	r1, #22
     6c6:	68f8      	ldr	r0, [r7, #12]
     6c8:	f7ff ff4e 	bl	568 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     6cc:	79fb      	ldrb	r3, [r7, #7]
     6ce:	4619      	mov	r1, r3
     6d0:	4804      	ldr	r0, [pc, #16]	; (6e4 <set_MW_power+0x5a>)
     6d2:	f001 f9d5 	bl	1a80 <__printf_veneer>
	return SUCCESS;
     6d6:	2300      	movs	r3, #0
}
     6d8:	4618      	mov	r0, r3
     6da:	3710      	adds	r7, #16
     6dc:	46bd      	mov	sp, r7
     6de:	bd80      	pop	{r7, pc}
     6e0:	0801d530 	.word	0x0801d530
     6e4:	0801d564 	.word	0x0801d564

000006e8 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     6e8:	b580      	push	{r7, lr}
     6ea:	b084      	sub	sp, #16
     6ec:	af00      	add	r7, sp, #0
     6ee:	4603      	mov	r3, r0
     6f0:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     6f2:	2200      	movs	r2, #0
     6f4:	2102      	movs	r1, #2
     6f6:	4856      	ldr	r0, [pc, #344]	; (850 <init_synthesiser+0x168>)
     6f8:	f001 f9d6 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     6fc:	2201      	movs	r2, #1
     6fe:	2101      	movs	r1, #1
     700:	4854      	ldr	r0, [pc, #336]	; (854 <init_synthesiser+0x16c>)
     702:	f001 f9d1 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     706:	2200      	movs	r2, #0
     708:	f44f 7180 	mov.w	r1, #256	; 0x100
     70c:	4852      	ldr	r0, [pc, #328]	; (858 <init_synthesiser+0x170>)
     70e:	f001 f9cb 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     712:	2201      	movs	r2, #1
     714:	f44f 6100 	mov.w	r1, #2048	; 0x800
     718:	484f      	ldr	r0, [pc, #316]	; (858 <init_synthesiser+0x170>)
     71a:	f001 f9c5 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     71e:	2201      	movs	r2, #1
     720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     724:	484c      	ldr	r0, [pc, #304]	; (858 <init_synthesiser+0x170>)
     726:	f001 f9bf 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     72a:	2064      	movs	r0, #100	; 0x64
     72c:	f001 f9cc 	bl	1ac8 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     730:	2300      	movs	r3, #0
     732:	2200      	movs	r2, #0
     734:	2100      	movs	r1, #0
     736:	2020      	movs	r0, #32
     738:	f7ff ff16 	bl	568 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     73c:	2301      	movs	r3, #1
     73e:	2200      	movs	r2, #0
     740:	2108      	movs	r1, #8
     742:	4846      	ldr	r0, [pc, #280]	; (85c <init_synthesiser+0x174>)
     744:	f7ff ff10 	bl	568 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     748:	2000      	movs	r0, #0
     74a:	f7ff ff87 	bl	65c <synth_readreg>
     74e:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     750:	4a43      	ldr	r2, [pc, #268]	; (860 <init_synthesiser+0x178>)
     752:	68fb      	ldr	r3, [r7, #12]
     754:	4293      	cmp	r3, r2
     756:	d00a      	beq.n	76e <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     758:	2200      	movs	r2, #0
     75a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     75e:	483e      	ldr	r0, [pc, #248]	; (858 <init_synthesiser+0x170>)
     760:	f001 f9a2 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     764:	483f      	ldr	r0, [pc, #252]	; (864 <init_synthesiser+0x17c>)
     766:	f001 f9ff 	bl	1b68 <__puts_veneer>
		return ERROR;
     76a:	2301      	movs	r3, #1
     76c:	e06b      	b.n	846 <init_synthesiser+0x15e>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     76e:	483e      	ldr	r0, [pc, #248]	; (868 <init_synthesiser+0x180>)
     770:	f001 f9fa 	bl	1b68 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     774:	2017      	movs	r0, #23
     776:	f7ff ff71 	bl	65c <synth_readreg>
     77a:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     77c:	68fb      	ldr	r3, [r7, #12]
     77e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     782:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     784:	2301      	movs	r3, #1
     786:	f083 0301 	eor.w	r3, r3, #1
     78a:	b2db      	uxtb	r3, r3
     78c:	01db      	lsls	r3, r3, #7
     78e:	43db      	mvns	r3, r3
     790:	461a      	mov	r2, r3
     792:	68fb      	ldr	r3, [r7, #12]
     794:	4013      	ands	r3, r2
     796:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     798:	2301      	movs	r3, #1
     79a:	2200      	movs	r2, #0
     79c:	2117      	movs	r1, #23
     79e:	68f8      	ldr	r0, [r7, #12]
     7a0:	f7ff fee2 	bl	568 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     7a4:	2301      	movs	r3, #1
     7a6:	2200      	movs	r2, #0
     7a8:	2102      	movs	r1, #2
     7aa:	2001      	movs	r0, #1
     7ac:	f7ff fedc 	bl	568 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     7b0:	2007      	movs	r0, #7
     7b2:	f7ff ff53 	bl	65c <synth_readreg>
     7b6:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     7b8:	68fb      	ldr	r3, [r7, #12]
     7ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     7be:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     7c0:	68fb      	ldr	r3, [r7, #12]
     7c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     7c6:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     7c8:	68fb      	ldr	r3, [r7, #12]
     7ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     7ce:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     7d0:	2301      	movs	r3, #1
     7d2:	2200      	movs	r2, #0
     7d4:	2107      	movs	r1, #7
     7d6:	68f8      	ldr	r0, [r7, #12]
     7d8:	f7ff fec6 	bl	568 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     7dc:	200a      	movs	r0, #10
     7de:	f001 f973 	bl	1ac8 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     7e2:	79fb      	ldrb	r3, [r7, #7]
     7e4:	2b03      	cmp	r3, #3
     7e6:	d904      	bls.n	7f2 <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     7e8:	4820      	ldr	r0, [pc, #128]	; (86c <init_synthesiser+0x184>)
     7ea:	f001 f9bd 	bl	1b68 <__puts_veneer>
		Error_Handler();
     7ee:	f001 f98b 	bl	1b08 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     7f2:	2016      	movs	r0, #22
     7f4:	f7ff ff32 	bl	65c <synth_readreg>
     7f8:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     7fa:	68fb      	ldr	r3, [r7, #12]
     7fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     800:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     802:	79fb      	ldrb	r3, [r7, #7]
     804:	021b      	lsls	r3, r3, #8
     806:	461a      	mov	r2, r3
     808:	68fb      	ldr	r3, [r7, #12]
     80a:	4313      	orrs	r3, r2
     80c:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     80e:	2301      	movs	r3, #1
     810:	2200      	movs	r2, #0
     812:	2116      	movs	r1, #22
     814:	68f8      	ldr	r0, [r7, #12]
     816:	f7ff fea7 	bl	568 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     81a:	4b15      	ldr	r3, [pc, #84]	; (870 <init_synthesiser+0x188>)
     81c:	ed93 7b00 	vldr	d7, [r3]
     820:	eeb0 0b47 	vmov.f64	d0, d7
     824:	f000 f83f 	bl	8a6 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     828:	4b11      	ldr	r3, [pc, #68]	; (870 <init_synthesiser+0x188>)
     82a:	e9d3 2300 	ldrd	r2, r3, [r3]
     82e:	4811      	ldr	r0, [pc, #68]	; (874 <init_synthesiser+0x18c>)
     830:	f001 f926 	bl	1a80 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     834:	4b10      	ldr	r3, [pc, #64]	; (878 <init_synthesiser+0x190>)
     836:	2201      	movs	r2, #1
     838:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     83a:	2200      	movs	r2, #0
     83c:	2102      	movs	r1, #2
     83e:	480f      	ldr	r0, [pc, #60]	; (87c <init_synthesiser+0x194>)
     840:	f001 f932 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     844:	2300      	movs	r3, #0
}
     846:	4618      	mov	r0, r3
     848:	3710      	adds	r7, #16
     84a:	46bd      	mov	sp, r7
     84c:	bd80      	pop	{r7, pc}
     84e:	bf00      	nop
     850:	58021000 	.word	0x58021000
     854:	58021800 	.word	0x58021800
     858:	58020800 	.word	0x58020800
     85c:	0041bfff 	.word	0x0041bfff
     860:	00c7701a 	.word	0x00c7701a
     864:	0801d57c 	.word	0x0801d57c
     868:	0801d598 	.word	0x0801d598
     86c:	0801d530 	.word	0x0801d530
     870:	080205f0 	.word	0x080205f0
     874:	0801d5ac 	.word	0x0801d5ac
     878:	20000708 	.word	0x20000708
     87c:	58020400 	.word	0x58020400

00000880 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     880:	b580      	push	{r7, lr}
     882:	b082      	sub	sp, #8
     884:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     886:	2012      	movs	r0, #18
     888:	f7ff fee8 	bl	65c <synth_readreg>
     88c:	4603      	mov	r3, r0
     88e:	f003 0302 	and.w	r3, r3, #2
     892:	2b00      	cmp	r3, #0
     894:	bf14      	ite	ne
     896:	2301      	movne	r3, #1
     898:	2300      	moveq	r3, #0
     89a:	71fb      	strb	r3, [r7, #7]
	return locked;
     89c:	79fb      	ldrb	r3, [r7, #7]

}
     89e:	4618      	mov	r0, r3
     8a0:	3708      	adds	r7, #8
     8a2:	46bd      	mov	sp, r7
     8a4:	bd80      	pop	{r7, pc}

000008a6 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     8a6:	b580      	push	{r7, lr}
     8a8:	b088      	sub	sp, #32
     8aa:	af00      	add	r7, sp, #0
     8ac:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     8b0:	2301      	movs	r3, #1
     8b2:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     8b4:	69fb      	ldr	r3, [r7, #28]
     8b6:	ee07 3a90 	vmov	s15, r3
     8ba:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     8be:	ed97 7b00 	vldr	d7, [r7]
     8c2:	ee26 6b07 	vmul.f64	d6, d6, d7
     8c6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 970 <set_frequency_hz+0xca>
     8ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
     8ce:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     8d2:	ed97 7b04 	vldr	d7, [r7, #16]
     8d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     8da:	ee17 3a90 	vmov	r3, s15
     8de:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     8e0:	68fb      	ldr	r3, [r7, #12]
     8e2:	ee07 3a90 	vmov	s15, r3
     8e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     8ea:	ed97 6b04 	vldr	d6, [r7, #16]
     8ee:	ee36 7b47 	vsub.f64	d7, d6, d7
     8f2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 978 <set_frequency_hz+0xd2>
     8f6:	ee27 7b06 	vmul.f64	d7, d7, d6
     8fa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     8fe:	ee37 7b06 	vadd.f64	d7, d7, d6
     902:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     906:	ee17 3a90 	vmov	r3, s15
     90a:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     90c:	2201      	movs	r2, #1
     90e:	2102      	movs	r1, #2
     910:	481b      	ldr	r0, [pc, #108]	; (980 <set_frequency_hz+0xda>)
     912:	f001 f8c9 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     916:	69fa      	ldr	r2, [r7, #28]
     918:	68b9      	ldr	r1, [r7, #8]
     91a:	68f8      	ldr	r0, [r7, #12]
     91c:	f000 f838 	bl	990 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     920:	4b18      	ldr	r3, [pc, #96]	; (984 <set_frequency_hz+0xde>)
     922:	681b      	ldr	r3, [r3, #0]
     924:	f241 3288 	movw	r2, #5000	; 0x1388
     928:	4611      	mov	r1, r2
     92a:	4618      	mov	r0, r3
     92c:	f000 ffbe 	bl	18ac <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     930:	f7ff ffa6 	bl	880 <lock_status>
     934:	4603      	mov	r3, r0
     936:	f083 0301 	eor.w	r3, r3, #1
     93a:	b2db      	uxtb	r3, r3
     93c:	2b00      	cmp	r3, #0
     93e:	d011      	beq.n	964 <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     940:	2200      	movs	r2, #0
     942:	2102      	movs	r1, #2
     944:	4810      	ldr	r0, [pc, #64]	; (988 <set_frequency_hz+0xe2>)
     946:	f001 f8af 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     94a:	f241 3388 	movw	r3, #5000	; 0x1388
     94e:	4619      	mov	r1, r3
     950:	480e      	ldr	r0, [pc, #56]	; (98c <set_frequency_hz+0xe6>)
     952:	f001 f895 	bl	1a80 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     956:	f001 f8d7 	bl	1b08 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     95a:	2200      	movs	r2, #0
     95c:	2102      	movs	r1, #2
     95e:	4808      	ldr	r0, [pc, #32]	; (980 <set_frequency_hz+0xda>)
     960:	f001 f8a2 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	}

}
     964:	bf00      	nop
     966:	3720      	adds	r7, #32
     968:	46bd      	mov	sp, r7
     96a:	bd80      	pop	{r7, pc}
     96c:	f3af 8000 	nop.w
     970:	00000000 	.word	0x00000000
     974:	4187d784 	.word	0x4187d784
     978:	00000000 	.word	0x00000000
     97c:	41700000 	.word	0x41700000
     980:	58020400 	.word	0x58020400
     984:	2000011c 	.word	0x2000011c
     988:	58021000 	.word	0x58021000
     98c:	0801d5d4 	.word	0x0801d5d4

00000990 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     990:	b580      	push	{r7, lr}
     992:	b086      	sub	sp, #24
     994:	af00      	add	r7, sp, #0
     996:	60f8      	str	r0, [r7, #12]
     998:	60b9      	str	r1, [r7, #8]
     99a:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     99c:	2300      	movs	r3, #0
     99e:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     9a0:	4b24      	ldr	r3, [pc, #144]	; (a34 <set_freq_regs+0xa4>)
     9a2:	681b      	ldr	r3, [r3, #0]
     9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
     9a8:	d004      	beq.n	9b4 <set_freq_regs+0x24>
     9aa:	4b22      	ldr	r3, [pc, #136]	; (a34 <set_freq_regs+0xa4>)
     9ac:	681b      	ldr	r3, [r3, #0]
     9ae:	687a      	ldr	r2, [r7, #4]
     9b0:	429a      	cmp	r2, r3
     9b2:	d014      	beq.n	9de <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     9b4:	2016      	movs	r0, #22
     9b6:	f7ff fe51 	bl	65c <synth_readreg>
     9ba:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     9bc:	697b      	ldr	r3, [r7, #20]
     9be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     9c2:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     9c4:	697a      	ldr	r2, [r7, #20]
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	4313      	orrs	r3, r2
     9ca:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     9cc:	2301      	movs	r3, #1
     9ce:	2200      	movs	r2, #0
     9d0:	2116      	movs	r1, #22
     9d2:	6978      	ldr	r0, [r7, #20]
     9d4:	f7ff fdc8 	bl	568 <synth_writereg>
		last_vcodiv = vco_divider;
     9d8:	4a16      	ldr	r2, [pc, #88]	; (a34 <set_freq_regs+0xa4>)
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     9de:	4b16      	ldr	r3, [pc, #88]	; (a38 <set_freq_regs+0xa8>)
     9e0:	681b      	ldr	r3, [r3, #0]
     9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
     9e6:	d004      	beq.n	9f2 <set_freq_regs+0x62>
     9e8:	4b13      	ldr	r3, [pc, #76]	; (a38 <set_freq_regs+0xa8>)
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	429a      	cmp	r2, r3
     9f0:	d008      	beq.n	a04 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     9f2:	2301      	movs	r3, #1
     9f4:	2200      	movs	r2, #0
     9f6:	2103      	movs	r1, #3
     9f8:	68f8      	ldr	r0, [r7, #12]
     9fa:	f7ff fdb5 	bl	568 <synth_writereg>
		last_integer = integer;
     9fe:	4a0e      	ldr	r2, [pc, #56]	; (a38 <set_freq_regs+0xa8>)
     a00:	68fb      	ldr	r3, [r7, #12]
     a02:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     a04:	4b0d      	ldr	r3, [pc, #52]	; (a3c <set_freq_regs+0xac>)
     a06:	681b      	ldr	r3, [r3, #0]
     a08:	f1b3 3fff 	cmp.w	r3, #4294967295
     a0c:	d004      	beq.n	a18 <set_freq_regs+0x88>
     a0e:	4b0b      	ldr	r3, [pc, #44]	; (a3c <set_freq_regs+0xac>)
     a10:	681b      	ldr	r3, [r3, #0]
     a12:	68ba      	ldr	r2, [r7, #8]
     a14:	429a      	cmp	r2, r3
     a16:	d008      	beq.n	a2a <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     a18:	2301      	movs	r3, #1
     a1a:	2200      	movs	r2, #0
     a1c:	2104      	movs	r1, #4
     a1e:	68b8      	ldr	r0, [r7, #8]
     a20:	f7ff fda2 	bl	568 <synth_writereg>
		last_fraction = fraction;
     a24:	4a05      	ldr	r2, [pc, #20]	; (a3c <set_freq_regs+0xac>)
     a26:	68bb      	ldr	r3, [r7, #8]
     a28:	6013      	str	r3, [r2, #0]
}
     a2a:	bf00      	nop
     a2c:	3718      	adds	r7, #24
     a2e:	46bd      	mov	sp, r7
     a30:	bd80      	pop	{r7, pc}
     a32:	bf00      	nop
     a34:	20000104 	.word	0x20000104
     a38:	20000108 	.word	0x20000108
     a3c:	2000010c 	.word	0x2000010c

00000a40 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     a40:	b580      	push	{r7, lr}
     a42:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     a44:	4b34      	ldr	r3, [pc, #208]	; (b18 <print_mw_sweep_settings+0xd8>)
     a46:	781b      	ldrb	r3, [r3, #0]
     a48:	4619      	mov	r1, r3
     a4a:	4834      	ldr	r0, [pc, #208]	; (b1c <print_mw_sweep_settings+0xdc>)
     a4c:	f001 f818 	bl	1a80 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     a50:	4b31      	ldr	r3, [pc, #196]	; (b18 <print_mw_sweep_settings+0xd8>)
     a52:	785b      	ldrb	r3, [r3, #1]
     a54:	4619      	mov	r1, r3
     a56:	4832      	ldr	r0, [pc, #200]	; (b20 <print_mw_sweep_settings+0xe0>)
     a58:	f001 f812 	bl	1a80 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     a5c:	4b2e      	ldr	r3, [pc, #184]	; (b18 <print_mw_sweep_settings+0xd8>)
     a5e:	685b      	ldr	r3, [r3, #4]
     a60:	4619      	mov	r1, r3
     a62:	4830      	ldr	r0, [pc, #192]	; (b24 <print_mw_sweep_settings+0xe4>)
     a64:	f001 f80c 	bl	1a80 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     a68:	4b2b      	ldr	r3, [pc, #172]	; (b18 <print_mw_sweep_settings+0xd8>)
     a6a:	689b      	ldr	r3, [r3, #8]
     a6c:	4619      	mov	r1, r3
     a6e:	482e      	ldr	r0, [pc, #184]	; (b28 <print_mw_sweep_settings+0xe8>)
     a70:	f001 f806 	bl	1a80 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     a74:	4b28      	ldr	r3, [pc, #160]	; (b18 <print_mw_sweep_settings+0xd8>)
     a76:	68db      	ldr	r3, [r3, #12]
     a78:	4619      	mov	r1, r3
     a7a:	482c      	ldr	r0, [pc, #176]	; (b2c <print_mw_sweep_settings+0xec>)
     a7c:	f001 f800 	bl	1a80 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     a80:	4b25      	ldr	r3, [pc, #148]	; (b18 <print_mw_sweep_settings+0xd8>)
     a82:	691b      	ldr	r3, [r3, #16]
     a84:	4619      	mov	r1, r3
     a86:	482a      	ldr	r0, [pc, #168]	; (b30 <print_mw_sweep_settings+0xf0>)
     a88:	f000 fffa 	bl	1a80 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     a8c:	4b22      	ldr	r3, [pc, #136]	; (b18 <print_mw_sweep_settings+0xd8>)
     a8e:	695b      	ldr	r3, [r3, #20]
     a90:	4619      	mov	r1, r3
     a92:	4828      	ldr	r0, [pc, #160]	; (b34 <print_mw_sweep_settings+0xf4>)
     a94:	f000 fff4 	bl	1a80 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     a98:	4b1f      	ldr	r3, [pc, #124]	; (b18 <print_mw_sweep_settings+0xd8>)
     a9a:	699b      	ldr	r3, [r3, #24]
     a9c:	4619      	mov	r1, r3
     a9e:	4826      	ldr	r0, [pc, #152]	; (b38 <print_mw_sweep_settings+0xf8>)
     aa0:	f000 ffee 	bl	1a80 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     aa4:	4b1c      	ldr	r3, [pc, #112]	; (b18 <print_mw_sweep_settings+0xd8>)
     aa6:	69db      	ldr	r3, [r3, #28]
     aa8:	4619      	mov	r1, r3
     aaa:	4824      	ldr	r0, [pc, #144]	; (b3c <print_mw_sweep_settings+0xfc>)
     aac:	f000 ffe8 	bl	1a80 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     ab0:	4b19      	ldr	r3, [pc, #100]	; (b18 <print_mw_sweep_settings+0xd8>)
     ab2:	6a1b      	ldr	r3, [r3, #32]
     ab4:	4619      	mov	r1, r3
     ab6:	4822      	ldr	r0, [pc, #136]	; (b40 <print_mw_sweep_settings+0x100>)
     ab8:	f000 ffe2 	bl	1a80 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     abc:	4b16      	ldr	r3, [pc, #88]	; (b18 <print_mw_sweep_settings+0xd8>)
     abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     ac0:	4619      	mov	r1, r3
     ac2:	4820      	ldr	r0, [pc, #128]	; (b44 <print_mw_sweep_settings+0x104>)
     ac4:	f000 ffdc 	bl	1a80 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     ac8:	4b13      	ldr	r3, [pc, #76]	; (b18 <print_mw_sweep_settings+0xd8>)
     aca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     ace:	481e      	ldr	r0, [pc, #120]	; (b48 <print_mw_sweep_settings+0x108>)
     ad0:	f000 ffd6 	bl	1a80 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     ad4:	4b10      	ldr	r3, [pc, #64]	; (b18 <print_mw_sweep_settings+0xd8>)
     ad6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     ada:	481c      	ldr	r0, [pc, #112]	; (b4c <print_mw_sweep_settings+0x10c>)
     adc:	f000 ffd0 	bl	1a80 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     ae0:	4b0d      	ldr	r3, [pc, #52]	; (b18 <print_mw_sweep_settings+0xd8>)
     ae2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     ae6:	481a      	ldr	r0, [pc, #104]	; (b50 <print_mw_sweep_settings+0x110>)
     ae8:	f000 ffca 	bl	1a80 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     aec:	4b0a      	ldr	r3, [pc, #40]	; (b18 <print_mw_sweep_settings+0xd8>)
     aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     af2:	2b00      	cmp	r3, #0
     af4:	d001      	beq.n	afa <print_mw_sweep_settings+0xba>
     af6:	4b17      	ldr	r3, [pc, #92]	; (b54 <print_mw_sweep_settings+0x114>)
     af8:	e000      	b.n	afc <print_mw_sweep_settings+0xbc>
     afa:	4b17      	ldr	r3, [pc, #92]	; (b58 <print_mw_sweep_settings+0x118>)
     afc:	4619      	mov	r1, r3
     afe:	4817      	ldr	r0, [pc, #92]	; (b5c <print_mw_sweep_settings+0x11c>)
     b00:	f000 ffbe 	bl	1a80 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     b04:	4b04      	ldr	r3, [pc, #16]	; (b18 <print_mw_sweep_settings+0xd8>)
     b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     b0a:	4619      	mov	r1, r3
     b0c:	4814      	ldr	r0, [pc, #80]	; (b60 <print_mw_sweep_settings+0x120>)
     b0e:	f000 ffb7 	bl	1a80 <__printf_veneer>
}
     b12:	bf00      	nop
     b14:	bd80      	pop	{r7, pc}
     b16:	bf00      	nop
     b18:	20000708 	.word	0x20000708
     b1c:	0801d618 	.word	0x0801d618
     b20:	0801d628 	.word	0x0801d628
     b24:	0801d634 	.word	0x0801d634
     b28:	0801d644 	.word	0x0801d644
     b2c:	0801d658 	.word	0x0801d658
     b30:	0801d66c 	.word	0x0801d66c
     b34:	0801d680 	.word	0x0801d680
     b38:	0801d6a0 	.word	0x0801d6a0
     b3c:	0801d6bc 	.word	0x0801d6bc
     b40:	0801d6d4 	.word	0x0801d6d4
     b44:	0801d6f4 	.word	0x0801d6f4
     b48:	0801d70c 	.word	0x0801d70c
     b4c:	0801d724 	.word	0x0801d724
     b50:	0801d734 	.word	0x0801d734
     b54:	0801d74c 	.word	0x0801d74c
     b58:	0801d758 	.word	0x0801d758
     b5c:	0801d764 	.word	0x0801d764
     b60:	0801d778 	.word	0x0801d778

00000b64 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     b64:	b580      	push	{r7, lr}
     b66:	b094      	sub	sp, #80	; 0x50
     b68:	af02      	add	r7, sp, #8
     b6a:	ed87 0b04 	vstr	d0, [r7, #16]
     b6e:	ed87 1b02 	vstr	d1, [r7, #8]
     b72:	6078      	str	r0, [r7, #4]
     b74:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     b76:	ed97 7b04 	vldr	d7, [r7, #16]
     b7a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; db0 <calc_defined_step_MW_sweep+0x24c>
     b7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
     b82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     b86:	e9cd 2300 	strd	r2, r3, [sp]
     b8a:	ec53 2b15 	vmov	r2, r3, d5
     b8e:	4892      	ldr	r0, [pc, #584]	; (dd8 <calc_defined_step_MW_sweep+0x274>)
     b90:	f000 ff76 	bl	1a80 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     b94:	6879      	ldr	r1, [r7, #4]
     b96:	4891      	ldr	r0, [pc, #580]	; (ddc <calc_defined_step_MW_sweep+0x278>)
     b98:	f000 ff72 	bl	1a80 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     b9c:	4b90      	ldr	r3, [pc, #576]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     b9e:	2200      	movs	r2, #0
     ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     ba4:	4a8e      	ldr	r2, [pc, #568]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     baa:	498d      	ldr	r1, [pc, #564]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     bac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     bb0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     bb4:	498a      	ldr	r1, [pc, #552]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     bba:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     bbe:	ed97 7b02 	vldr	d7, [r7, #8]
     bc2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
     bca:	ed97 6b04 	vldr	d6, [r7, #16]
     bce:	ee36 7b47 	vsub.f64	d7, d6, d7
     bd2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     bd6:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     bda:	f000 fb1f 	bl	121c <calculate_k>
     bde:	4603      	mov	r3, r0
     be0:	b2da      	uxtb	r2, r3
     be2:	4b7f      	ldr	r3, [pc, #508]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     be4:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     be6:	683b      	ldr	r3, [r7, #0]
     be8:	3b01      	subs	r3, #1
     bea:	ee07 3a90 	vmov	s15, r3
     bee:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     bf2:	ed97 5b02 	vldr	d5, [r7, #8]
     bf6:	ee85 7b06 	vdiv.f64	d7, d5, d6
     bfa:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     bfe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     c02:	6839      	ldr	r1, [r7, #0]
     c04:	4877      	ldr	r0, [pc, #476]	; (de4 <calc_defined_step_MW_sweep+0x280>)
     c06:	f000 ff3b 	bl	1a80 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     c0a:	ed9f 5b6b 	vldr	d5, [pc, #428]	; db8 <calc_defined_step_MW_sweep+0x254>
     c0e:	4b74      	ldr	r3, [pc, #464]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     c10:	785b      	ldrb	r3, [r3, #1]
     c12:	061b      	lsls	r3, r3, #24
     c14:	ee07 3a90 	vmov	s15, r3
     c18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     c1c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c20:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     c24:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     c28:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     c2c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c30:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     c34:	ee37 7b06 	vadd.f64	d7, d7, d6
     c38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c3c:	ee17 2a90 	vmov	r2, s15
     c40:	4b67      	ldr	r3, [pc, #412]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     c42:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     c44:	4b66      	ldr	r3, [pc, #408]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     c46:	691b      	ldr	r3, [r3, #16]
     c48:	2b00      	cmp	r3, #0
     c4a:	d104      	bne.n	c56 <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     c4c:	4b64      	ldr	r3, [pc, #400]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     c4e:	691b      	ldr	r3, [r3, #16]
     c50:	3301      	adds	r3, #1
     c52:	4a63      	ldr	r2, [pc, #396]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     c54:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     c56:	4b62      	ldr	r3, [pc, #392]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     c58:	691b      	ldr	r3, [r3, #16]
     c5a:	ee07 3a90 	vmov	s15, r3
     c5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     c62:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     c66:	ee26 7b07 	vmul.f64	d7, d6, d7
     c6a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     c72:	485d      	ldr	r0, [pc, #372]	; (de8 <calc_defined_step_MW_sweep+0x284>)
     c74:	f000 ff04 	bl	1a80 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     c78:	ed97 5b02 	vldr	d5, [r7, #8]
     c7c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     c80:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c88:	ee17 2a90 	vmov	r2, s15
     c8c:	4b54      	ldr	r3, [pc, #336]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     c8e:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     c90:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     c94:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     c98:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c9c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     ca0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     ca4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     ca8:	ee26 7b07 	vmul.f64	d7, d6, d7
     cac:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     cb0:	4b4b      	ldr	r3, [pc, #300]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     cb2:	785b      	ldrb	r3, [r3, #1]
     cb4:	ee07 3a90 	vmov	s15, r3
     cb8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     cbc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     cc0:	ee26 6b07 	vmul.f64	d6, d6, d7
     cc4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; db8 <calc_defined_step_MW_sweep+0x254>
     cc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
     ccc:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     cd0:	ed97 7b08 	vldr	d7, [r7, #32]
     cd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     cd8:	ee17 2a90 	vmov	r2, s15
     cdc:	4b40      	ldr	r3, [pc, #256]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     cde:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     ce0:	4b3f      	ldr	r3, [pc, #252]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     ce2:	685b      	ldr	r3, [r3, #4]
     ce4:	ee07 3a90 	vmov	s15, r3
     ce8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     cec:	ed97 6b08 	vldr	d6, [r7, #32]
     cf0:	ee36 7b47 	vsub.f64	d7, d6, d7
     cf4:	ed9f 6b32 	vldr	d6, [pc, #200]	; dc0 <calc_defined_step_MW_sweep+0x25c>
     cf8:	ee27 7b06 	vmul.f64	d7, d7, d6
     cfc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d00:	ee37 7b06 	vadd.f64	d7, d7, d6
     d04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d08:	ee17 2a90 	vmov	r2, s15
     d0c:	4b34      	ldr	r3, [pc, #208]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d0e:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     d10:	f241 3288 	movw	r2, #5000	; 0x1388
     d14:	4b32      	ldr	r3, [pc, #200]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d16:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     d18:	4b34      	ldr	r3, [pc, #208]	; (dec <calc_defined_step_MW_sweep+0x288>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	687a      	ldr	r2, [r7, #4]
     d1e:	fb02 f303 	mul.w	r3, r2, r3
     d22:	2264      	movs	r2, #100	; 0x64
     d24:	4413      	add	r3, r2
     d26:	4a2e      	ldr	r2, [pc, #184]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d28:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     d2a:	f241 3288 	movw	r2, #5000	; 0x1388
     d2e:	2301      	movs	r3, #1
     d30:	441a      	add	r2, r3
     d32:	4b2b      	ldr	r3, [pc, #172]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d34:	69db      	ldr	r3, [r3, #28]
     d36:	4413      	add	r3, r2
     d38:	ee07 3a90 	vmov	s15, r3
     d3c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     d40:	4b27      	ldr	r3, [pc, #156]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d42:	68db      	ldr	r3, [r3, #12]
     d44:	3301      	adds	r3, #1
     d46:	ee07 3a90 	vmov	s15, r3
     d4a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d4e:	ee26 6b07 	vmul.f64	d6, d6, d7
     d52:	ed9f 5b1d 	vldr	d5, [pc, #116]	; dc8 <calc_defined_step_MW_sweep+0x264>
     d56:	ee86 7b05 	vdiv.f64	d7, d6, d5
     d5a:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     d5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     d62:	4823      	ldr	r0, [pc, #140]	; (df0 <calc_defined_step_MW_sweep+0x28c>)
     d64:	f000 fe8c 	bl	1a80 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     d68:	4b1d      	ldr	r3, [pc, #116]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d6a:	68d9      	ldr	r1, [r3, #12]
     d6c:	ed97 7b06 	vldr	d7, [r7, #24]
     d70:	ed9f 6b17 	vldr	d6, [pc, #92]	; dd0 <calc_defined_step_MW_sweep+0x26c>
     d74:	ee27 6b06 	vmul.f64	d6, d7, d6
     d78:	4b19      	ldr	r3, [pc, #100]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d7a:	68db      	ldr	r3, [r3, #12]
     d7c:	3301      	adds	r3, #1
     d7e:	ee07 3a90 	vmov	s15, r3
     d82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d86:	ee86 5b07 	vdiv.f64	d5, d6, d7
     d8a:	ec53 2b15 	vmov	r2, r3, d5
     d8e:	4819      	ldr	r0, [pc, #100]	; (df4 <calc_defined_step_MW_sweep+0x290>)
     d90:	f000 fe76 	bl	1a80 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     d94:	4b12      	ldr	r3, [pc, #72]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d96:	2200      	movs	r2, #0
     d98:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     d9a:	4911      	ldr	r1, [pc, #68]	; (de0 <calc_defined_step_MW_sweep+0x27c>)
     d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     da0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     da4:	2301      	movs	r3, #1
}
     da6:	4618      	mov	r0, r3
     da8:	3748      	adds	r7, #72	; 0x48
     daa:	46bd      	mov	sp, r7
     dac:	bd80      	pop	{r7, pc}
     dae:	bf00      	nop
     db0:	00000000 	.word	0x00000000
     db4:	41cdcd65 	.word	0x41cdcd65
     db8:	00000000 	.word	0x00000000
     dbc:	4187d784 	.word	0x4187d784
     dc0:	00000000 	.word	0x00000000
     dc4:	41700000 	.word	0x41700000
     dc8:	00000000 	.word	0x00000000
     dcc:	412e8480 	.word	0x412e8480
     dd0:	00000000 	.word	0x00000000
     dd4:	408f4000 	.word	0x408f4000
     dd8:	0801d78c 	.word	0x0801d78c
     ddc:	0801d7d0 	.word	0x0801d7d0
     de0:	20000708 	.word	0x20000708
     de4:	0801d7f0 	.word	0x0801d7f0
     de8:	0801d828 	.word	0x0801d828
     dec:	200006f8 	.word	0x200006f8
     df0:	0801d848 	.word	0x0801d848
     df4:	0801d860 	.word	0x0801d860

00000df8 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     df8:	b580      	push	{r7, lr}
     dfa:	b09e      	sub	sp, #120	; 0x78
     dfc:	af04      	add	r7, sp, #16
     dfe:	ed87 0b06 	vstr	d0, [r7, #24]
     e02:	ed87 1b04 	vstr	d1, [r7, #16]
     e06:	ed87 2b02 	vstr	d2, [r7, #8]
     e0a:	4603      	mov	r3, r0
     e0c:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     e0e:	ed97 7b06 	vldr	d7, [r7, #24]
     e12:	ed9f 6b97 	vldr	d6, [pc, #604]	; 1070 <calc_fixed_time_MW_sweep+0x278>
     e16:	ee87 5b06 	vdiv.f64	d5, d7, d6
     e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
     e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     e26:	e9cd 2300 	strd	r2, r3, [sp]
     e2a:	ec53 2b15 	vmov	r2, r3, d5
     e2e:	4898      	ldr	r0, [pc, #608]	; (1090 <calc_fixed_time_MW_sweep+0x298>)
     e30:	f000 fe26 	bl	1a80 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     e34:	4b97      	ldr	r3, [pc, #604]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     e36:	2201      	movs	r2, #1
     e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     e3c:	4995      	ldr	r1, [pc, #596]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     e3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     e42:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     e46:	4993      	ldr	r1, [pc, #588]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     e4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     e50:	4b91      	ldr	r3, [pc, #580]	; (1098 <calc_fixed_time_MW_sweep+0x2a0>)
     e52:	681b      	ldr	r3, [r3, #0]
     e54:	2264      	movs	r2, #100	; 0x64
     e56:	4413      	add	r3, r2
     e58:	4a8e      	ldr	r2, [pc, #568]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     e5a:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     e5c:	f241 3288 	movw	r2, #5000	; 0x1388
     e60:	2301      	movs	r3, #1
     e62:	441a      	add	r2, r3
     e64:	4b8b      	ldr	r3, [pc, #556]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     e66:	69db      	ldr	r3, [r3, #28]
     e68:	4413      	add	r3, r2
     e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     e6c:	4a8b      	ldr	r2, [pc, #556]	; (109c <calc_fixed_time_MW_sweep+0x2a4>)
     e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     e70:	fbb2 f3f3 	udiv	r3, r2, r3
     e74:	ee07 3a90 	vmov	s15, r3
     e78:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     e7c:	ed97 7b02 	vldr	d7, [r7, #8]
     e80:	ee26 7b07 	vmul.f64	d7, d6, d7
     e84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e88:	ee17 3a90 	vmov	r3, s15
     e8c:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     e8e:	ed97 7b04 	vldr	d7, [r7, #16]
     e92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     e96:	ee27 7b06 	vmul.f64	d7, d7, d6
     e9a:	ed97 6b06 	vldr	d6, [r7, #24]
     e9e:	ee36 7b47 	vsub.f64	d7, d6, d7
     ea2:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
     ea6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
     eaa:	f000 f9b7 	bl	121c <calculate_k>
     eae:	4603      	mov	r3, r0
     eb0:	b2da      	uxtb	r2, r3
     eb2:	4b78      	ldr	r3, [pc, #480]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     eb4:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     eb6:	ed9f 5b70 	vldr	d5, [pc, #448]	; 1078 <calc_fixed_time_MW_sweep+0x280>
     eba:	4b76      	ldr	r3, [pc, #472]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     ebc:	785b      	ldrb	r3, [r3, #1]
     ebe:	061b      	lsls	r3, r3, #24
     ec0:	ee07 3a90 	vmov	s15, r3
     ec4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     ec8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     ecc:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     ed0:	4b70      	ldr	r3, [pc, #448]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     ed2:	2201      	movs	r2, #1
     ed4:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     ed6:	e004      	b.n	ee2 <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
     ed8:	4b6e      	ldr	r3, [pc, #440]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     eda:	691b      	ldr	r3, [r3, #16]
     edc:	3301      	adds	r3, #1
     ede:	4a6d      	ldr	r2, [pc, #436]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     ee0:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     ee2:	4b6c      	ldr	r3, [pc, #432]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     ee4:	691b      	ldr	r3, [r3, #16]
     ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
     ee8:	fb02 f303 	mul.w	r3, r2, r3
     eec:	ee07 3a90 	vmov	s15, r3
     ef0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     ef4:	ed97 4b04 	vldr	d4, [r7, #16]
     ef8:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     efc:	ee84 7b05 	vdiv.f64	d7, d4, d5
     f00:	eeb4 6bc7 	vcmpe.f64	d6, d7
     f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f08:	d4e6      	bmi.n	ed8 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     f0a:	4b62      	ldr	r3, [pc, #392]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     f0c:	691b      	ldr	r3, [r3, #16]
     f0e:	ee07 3a90 	vmov	s15, r3
     f12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f16:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     f1a:	ee26 7b07 	vmul.f64	d7, d6, d7
     f1e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     f22:	4b5c      	ldr	r3, [pc, #368]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     f24:	6919      	ldr	r1, [r3, #16]
     f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     f2a:	485d      	ldr	r0, [pc, #372]	; (10a0 <calc_fixed_time_MW_sweep+0x2a8>)
     f2c:	f000 fda8 	bl	1a80 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
     f30:	ed97 5b04 	vldr	d5, [r7, #16]
     f34:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
     f38:	ee85 7b06 	vdiv.f64	d7, d5, d6
     f3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f40:	ee17 2a90 	vmov	r2, s15
     f44:	4b53      	ldr	r3, [pc, #332]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     f46:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
     f48:	ed97 7b02 	vldr	d7, [r7, #8]
     f4c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 1080 <calc_fixed_time_MW_sweep+0x288>
     f50:	ee27 5b06 	vmul.f64	d5, d7, d6
     f54:	4b4f      	ldr	r3, [pc, #316]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     f56:	68db      	ldr	r3, [r3, #12]
     f58:	3301      	adds	r3, #1
     f5a:	ee07 3a90 	vmov	s15, r3
     f5e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     f62:	ee85 7b06 	vdiv.f64	d7, d5, d6
     f66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f6a:	ee17 3a90 	vmov	r3, s15
     f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
     f70:	f241 3288 	movw	r2, #5000	; 0x1388
     f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f76:	1a9b      	subs	r3, r3, r2
     f78:	2264      	movs	r2, #100	; 0x64
     f7a:	1a9b      	subs	r3, r3, r2
     f7c:	2201      	movs	r2, #1
     f7e:	1a9a      	subs	r2, r3, r2
     f80:	4b45      	ldr	r3, [pc, #276]	; (1098 <calc_fixed_time_MW_sweep+0x2a0>)
     f82:	681b      	ldr	r3, [r3, #0]
     f84:	fbb2 f3f3 	udiv	r3, r2, r3
     f88:	4a42      	ldr	r2, [pc, #264]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     f8a:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
     f8c:	4b41      	ldr	r3, [pc, #260]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     f8e:	68db      	ldr	r3, [r3, #12]
     f90:	1c59      	adds	r1, r3, #1
     f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f94:	4a43      	ldr	r2, [pc, #268]	; (10a4 <calc_fixed_time_MW_sweep+0x2ac>)
     f96:	fba2 2303 	umull	r2, r3, r2, r3
     f9a:	099a      	lsrs	r2, r3, #6
     f9c:	4b3d      	ldr	r3, [pc, #244]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     f9e:	695b      	ldr	r3, [r3, #20]
     fa0:	4841      	ldr	r0, [pc, #260]	; (10a8 <calc_fixed_time_MW_sweep+0x2b0>)
     fa2:	f000 fd6d 	bl	1a80 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
     fa6:	4b3b      	ldr	r3, [pc, #236]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     fa8:	695b      	ldr	r3, [r3, #20]
     faa:	4a3b      	ldr	r2, [pc, #236]	; (1098 <calc_fixed_time_MW_sweep+0x2a0>)
     fac:	6812      	ldr	r2, [r2, #0]
     fae:	fb02 f303 	mul.w	r3, r2, r3
     fb2:	2264      	movs	r2, #100	; 0x64
     fb4:	4413      	add	r3, r2
     fb6:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
     fb8:	f241 3288 	movw	r2, #5000	; 0x1388
     fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fbe:	1a9b      	subs	r3, r3, r2
     fc0:	2201      	movs	r2, #1
     fc2:	1a9b      	subs	r3, r3, r2
     fc4:	4a33      	ldr	r2, [pc, #204]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     fc6:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
     fc8:	4b32      	ldr	r3, [pc, #200]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     fca:	69db      	ldr	r3, [r3, #28]
     fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fce:	429a      	cmp	r2, r3
     fd0:	d902      	bls.n	fd8 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
     fd2:	4a30      	ldr	r2, [pc, #192]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd6:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
     fd8:	f241 3288 	movw	r2, #5000	; 0x1388
     fdc:	2301      	movs	r3, #1
     fde:	441a      	add	r2, r3
     fe0:	4b2c      	ldr	r3, [pc, #176]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     fe2:	69db      	ldr	r3, [r3, #28]
     fe4:	4413      	add	r3, r2
     fe6:	ee07 3a90 	vmov	s15, r3
     fea:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     fee:	ed9f 5b24 	vldr	d5, [pc, #144]	; 1080 <calc_fixed_time_MW_sweep+0x288>
     ff2:	ee86 7b05 	vdiv.f64	d7, d6, d5
     ff6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
     ffa:	4b26      	ldr	r3, [pc, #152]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
     ffc:	68db      	ldr	r3, [r3, #12]
     ffe:	3301      	adds	r3, #1
    1000:	ee07 3a90 	vmov	s15, r3
    1004:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1008:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    100c:	ee26 7b07 	vmul.f64	d7, d6, d7
    1010:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    1014:	f241 3288 	movw	r2, #5000	; 0x1388
    1018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    101a:	4413      	add	r3, r2
    101c:	2201      	movs	r2, #1
    101e:	4413      	add	r3, r2
    1020:	4a1c      	ldr	r2, [pc, #112]	; (1094 <calc_fixed_time_MW_sweep+0x29c>)
    1022:	68d2      	ldr	r2, [r2, #12]
    1024:	3201      	adds	r2, #1
    1026:	fb02 f303 	mul.w	r3, r2, r3
    102a:	ee07 3a90 	vmov	s15, r3
    102e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1032:	ed9f 5b13 	vldr	d5, [pc, #76]	; 1080 <calc_fixed_time_MW_sweep+0x288>
    1036:	ee86 7b05 	vdiv.f64	d7, d6, d5
    103a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    103e:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    1042:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    1046:	ee85 7b06 	vdiv.f64	d7, d5, d6
    104a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 1088 <calc_fixed_time_MW_sweep+0x290>
    104e:	eeb4 7bc6 	vcmpe.f64	d7, d6
    1052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1056:	dd2b      	ble.n	10b0 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    1058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    105c:	e9cd 2300 	strd	r2, r3, [sp]
    1060:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1064:	4811      	ldr	r0, [pc, #68]	; (10ac <calc_fixed_time_MW_sweep+0x2b4>)
    1066:	f000 fd0b 	bl	1a80 <__printf_veneer>
    106a:	e029      	b.n	10c0 <calc_fixed_time_MW_sweep+0x2c8>
    106c:	f3af 8000 	nop.w
    1070:	00000000 	.word	0x00000000
    1074:	41cdcd65 	.word	0x41cdcd65
    1078:	00000000 	.word	0x00000000
    107c:	4187d784 	.word	0x4187d784
    1080:	00000000 	.word	0x00000000
    1084:	412e8480 	.word	0x412e8480
    1088:	851eb852 	.word	0x851eb852
    108c:	3ff051eb 	.word	0x3ff051eb
    1090:	0801d87c 	.word	0x0801d87c
    1094:	20000708 	.word	0x20000708
    1098:	200006f8 	.word	0x200006f8
    109c:	000f4240 	.word	0x000f4240
    10a0:	0801d8cc 	.word	0x0801d8cc
    10a4:	10624dd3 	.word	0x10624dd3
    10a8:	0801d8f8 	.word	0x0801d8f8
    10ac:	0801d930 	.word	0x0801d930
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    10b0:	4b57      	ldr	r3, [pc, #348]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    10b2:	695b      	ldr	r3, [r3, #20]
    10b4:	9300      	str	r3, [sp, #0]
    10b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    10ba:	4856      	ldr	r0, [pc, #344]	; (1214 <calc_fixed_time_MW_sweep+0x41c>)
    10bc:	f000 fce0 	bl	1a80 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    10c0:	79fb      	ldrb	r3, [r7, #7]
    10c2:	2b00      	cmp	r3, #0
    10c4:	d044      	beq.n	1150 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    10c6:	4b52      	ldr	r3, [pc, #328]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    10c8:	68db      	ldr	r3, [r3, #12]
    10ca:	ee07 3a90 	vmov	s15, r3
    10ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    10d2:	ed9f 6b49 	vldr	d6, [pc, #292]	; 11f8 <calc_fixed_time_MW_sweep+0x400>
    10d6:	ee27 7b06 	vmul.f64	d7, d7, d6
    10da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    10de:	ee37 7b06 	vadd.f64	d7, d7, d6
    10e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    10e6:	ee17 2a90 	vmov	r2, s15
    10ea:	4b49      	ldr	r3, [pc, #292]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    10ec:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    10ee:	4b48      	ldr	r3, [pc, #288]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    10f0:	68db      	ldr	r3, [r3, #12]
    10f2:	3301      	adds	r3, #1
    10f4:	ee07 3a90 	vmov	s15, r3
    10f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    10fc:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    1100:	ee26 7b07 	vmul.f64	d7, d6, d7
    1104:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    1108:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    110c:	ed97 7b02 	vldr	d7, [r7, #8]
    1110:	ee36 7b47 	vsub.f64	d7, d6, d7
    1114:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    1118:	eeb4 7bc6 	vcmpe.f64	d7, d6
    111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1120:	dd11      	ble.n	1146 <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    1122:	4b3b      	ldr	r3, [pc, #236]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    1124:	68db      	ldr	r3, [r3, #12]
    1126:	3b01      	subs	r3, #1
    1128:	4a39      	ldr	r2, [pc, #228]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    112a:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    112c:	4b38      	ldr	r3, [pc, #224]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    112e:	68db      	ldr	r3, [r3, #12]
    1130:	3301      	adds	r3, #1
    1132:	ee07 3a90 	vmov	s15, r3
    1136:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    113a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    113e:	ee26 7b07 	vmul.f64	d7, d6, d7
    1142:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    1146:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    114a:	4833      	ldr	r0, [pc, #204]	; (1218 <calc_fixed_time_MW_sweep+0x420>)
    114c:	f000 fc98 	bl	1a80 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    1150:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    1154:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1158:	ee85 7b06 	vdiv.f64	d7, d5, d6
    115c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1160:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    1164:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1168:	ee26 7b07 	vmul.f64	d7, d6, d7
    116c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    1170:	4b27      	ldr	r3, [pc, #156]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    1172:	785b      	ldrb	r3, [r3, #1]
    1174:	ee07 3a90 	vmov	s15, r3
    1178:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    117c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    1180:	ee26 6b07 	vmul.f64	d6, d6, d7
    1184:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 1200 <calc_fixed_time_MW_sweep+0x408>
    1188:	ee86 7b05 	vdiv.f64	d7, d6, d5
    118c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1190:	ed97 7b08 	vldr	d7, [r7, #32]
    1194:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1198:	ee17 2a90 	vmov	r2, s15
    119c:	4b1c      	ldr	r3, [pc, #112]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    119e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    11a0:	4b1b      	ldr	r3, [pc, #108]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    11a2:	685b      	ldr	r3, [r3, #4]
    11a4:	ee07 3a90 	vmov	s15, r3
    11a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11ac:	ed97 6b08 	vldr	d6, [r7, #32]
    11b0:	ee36 7b47 	vsub.f64	d7, d6, d7
    11b4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 1208 <calc_fixed_time_MW_sweep+0x410>
    11b8:	ee27 7b06 	vmul.f64	d7, d7, d6
    11bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    11c0:	ee37 7b06 	vadd.f64	d7, d7, d6
    11c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    11c8:	ee17 2a90 	vmov	r2, s15
    11cc:	4b10      	ldr	r3, [pc, #64]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    11ce:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
    11d0:	4b0f      	ldr	r3, [pc, #60]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    11d2:	2200      	movs	r2, #0
    11d4:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
    11d6:	490e      	ldr	r1, [pc, #56]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    11d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    11dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    11e0:	f241 3288 	movw	r2, #5000	; 0x1388
    11e4:	4b0a      	ldr	r3, [pc, #40]	; (1210 <calc_fixed_time_MW_sweep+0x418>)
    11e6:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
    11e8:	2301      	movs	r3, #1
}
    11ea:	4618      	mov	r0, r3
    11ec:	3768      	adds	r7, #104	; 0x68
    11ee:	46bd      	mov	sp, r7
    11f0:	bd80      	pop	{r7, pc}
    11f2:	bf00      	nop
    11f4:	f3af 8000 	nop.w
    11f8:	9999999a 	.word	0x9999999a
    11fc:	3ff19999 	.word	0x3ff19999
    1200:	00000000 	.word	0x00000000
    1204:	4187d784 	.word	0x4187d784
    1208:	00000000 	.word	0x00000000
    120c:	41700000 	.word	0x41700000
    1210:	20000708 	.word	0x20000708
    1214:	0801d968 	.word	0x0801d968
    1218:	0801d9b4 	.word	0x0801d9b4

0000121c <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    121c:	b480      	push	{r7}
    121e:	b085      	sub	sp, #20
    1220:	af00      	add	r7, sp, #0
    1222:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
    1226:	ed9f 5b10 	vldr	d5, [pc, #64]	; 1268 <calculate_k+0x4c>
    122a:	ed97 6b00 	vldr	d6, [r7]
    122e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1232:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1236:	ee17 3a90 	vmov	r3, s15
    123a:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    123c:	68fb      	ldr	r3, [r7, #12]
    123e:	2b01      	cmp	r3, #1
    1240:	d00b      	beq.n	125a <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    1242:	e002      	b.n	124a <calculate_k+0x2e>
			k --;
    1244:	68fb      	ldr	r3, [r7, #12]
    1246:	3b01      	subs	r3, #1
    1248:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    124a:	68fb      	ldr	r3, [r7, #12]
    124c:	2b3e      	cmp	r3, #62	; 0x3e
    124e:	d8f9      	bhi.n	1244 <calculate_k+0x28>
    1250:	68fb      	ldr	r3, [r7, #12]
    1252:	f003 0301 	and.w	r3, r3, #1
    1256:	2b00      	cmp	r3, #0
    1258:	d1f4      	bne.n	1244 <calculate_k+0x28>
		}
	}
	return (k);
    125a:	68fb      	ldr	r3, [r7, #12]
}
    125c:	4618      	mov	r0, r3
    125e:	3714      	adds	r7, #20
    1260:	46bd      	mov	sp, r7
    1262:	f85d 7b04 	ldr.w	r7, [sp], #4
    1266:	4770      	bx	lr
    1268:	20000000 	.word	0x20000000
    126c:	41ee8c21 	.word	0x41ee8c21

00001270 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
    1270:	b580      	push	{r7, lr}
    1272:	b082      	sub	sp, #8
    1274:	af00      	add	r7, sp, #0
    1276:	4603      	mov	r3, r0
    1278:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    127a:	79fb      	ldrb	r3, [r7, #7]
    127c:	2b00      	cmp	r3, #0
    127e:	d003      	beq.n	1288 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    1280:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <start_POP_calibration+0x50>)
    1282:	2201      	movs	r2, #1
    1284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1288:	2201      	movs	r2, #1
    128a:	2102      	movs	r1, #2
    128c:	480d      	ldr	r0, [pc, #52]	; (12c4 <start_POP_calibration+0x54>)
    128e:	f000 fc0b 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    1292:	200a      	movs	r0, #10
    1294:	f000 fc18 	bl	1ac8 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1298:	4b0b      	ldr	r3, [pc, #44]	; (12c8 <start_POP_calibration+0x58>)
    129a:	2200      	movs	r2, #0
    129c:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    129e:	4b08      	ldr	r3, [pc, #32]	; (12c0 <start_POP_calibration+0x50>)
    12a0:	2204      	movs	r2, #4
    12a2:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    12a4:	4b09      	ldr	r3, [pc, #36]	; (12cc <start_POP_calibration+0x5c>)
    12a6:	681b      	ldr	r3, [r3, #0]
    12a8:	4618      	mov	r0, r3
    12aa:	f000 fac3 	bl	1834 <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    12ae:	2200      	movs	r2, #0
    12b0:	2102      	movs	r1, #2
    12b2:	4804      	ldr	r0, [pc, #16]	; (12c4 <start_POP_calibration+0x54>)
    12b4:	f000 fbf8 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    12b8:	bf00      	nop
    12ba:	3708      	adds	r7, #8
    12bc:	46bd      	mov	sp, r7
    12be:	bd80      	pop	{r7, pc}
    12c0:	20000708 	.word	0x20000708
    12c4:	58020400 	.word	0x58020400
    12c8:	200006f6 	.word	0x200006f6
    12cc:	2000011c 	.word	0x2000011c

000012d0 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    12d0:	b580      	push	{r7, lr}
    12d2:	b082      	sub	sp, #8
    12d4:	af00      	add	r7, sp, #0
    12d6:	4603      	mov	r3, r0
    12d8:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    12da:	79fb      	ldrb	r3, [r7, #7]
    12dc:	2b00      	cmp	r3, #0
    12de:	d003      	beq.n	12e8 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    12e0:	4b1c      	ldr	r3, [pc, #112]	; (1354 <start_MW_sweep+0x84>)
    12e2:	2202      	movs	r2, #2
    12e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    12e8:	2201      	movs	r2, #1
    12ea:	2102      	movs	r1, #2
    12ec:	481a      	ldr	r0, [pc, #104]	; (1358 <start_MW_sweep+0x88>)
    12ee:	f000 fbdb 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    12f2:	2201      	movs	r2, #1
    12f4:	2102      	movs	r1, #2
    12f6:	4819      	ldr	r0, [pc, #100]	; (135c <start_MW_sweep+0x8c>)
    12f8:	f000 fbd6 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
    12fc:	4b15      	ldr	r3, [pc, #84]	; (1354 <start_MW_sweep+0x84>)
    12fe:	685b      	ldr	r3, [r3, #4]
    1300:	4a14      	ldr	r2, [pc, #80]	; (1354 <start_MW_sweep+0x84>)
    1302:	6891      	ldr	r1, [r2, #8]
    1304:	4a13      	ldr	r2, [pc, #76]	; (1354 <start_MW_sweep+0x84>)
    1306:	7852      	ldrb	r2, [r2, #1]
    1308:	4618      	mov	r0, r3
    130a:	f7ff fb41 	bl	990 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    130e:	4b11      	ldr	r3, [pc, #68]	; (1354 <start_MW_sweep+0x84>)
    1310:	2202      	movs	r2, #2
    1312:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    1314:	4b0f      	ldr	r3, [pc, #60]	; (1354 <start_MW_sweep+0x84>)
    1316:	2200      	movs	r2, #0
    1318:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    131a:	200a      	movs	r0, #10
    131c:	f000 fbd4 	bl	1ac8 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1320:	4b0f      	ldr	r3, [pc, #60]	; (1360 <start_MW_sweep+0x90>)
    1322:	2200      	movs	r2, #0
    1324:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1326:	2200      	movs	r2, #0
    1328:	2101      	movs	r1, #1
    132a:	480e      	ldr	r0, [pc, #56]	; (1364 <start_MW_sweep+0x94>)
    132c:	f000 fbbc 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    1330:	4b0d      	ldr	r3, [pc, #52]	; (1368 <start_MW_sweep+0x98>)
    1332:	681b      	ldr	r3, [r3, #0]
    1334:	4618      	mov	r0, r3
    1336:	f000 fa7d 	bl	1834 <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    133a:	4b0c      	ldr	r3, [pc, #48]	; (136c <start_MW_sweep+0x9c>)
    133c:	681b      	ldr	r3, [r3, #0]
    133e:	4618      	mov	r0, r3
    1340:	f000 fa78 	bl	1834 <start_timer>
	sample_count = 0; //reset sample count
    1344:	4b06      	ldr	r3, [pc, #24]	; (1360 <start_MW_sweep+0x90>)
    1346:	2200      	movs	r2, #0
    1348:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
    134a:	2301      	movs	r3, #1
}
    134c:	4618      	mov	r0, r3
    134e:	3708      	adds	r7, #8
    1350:	46bd      	mov	sp, r7
    1352:	bd80      	pop	{r7, pc}
    1354:	20000708 	.word	0x20000708
    1358:	58021000 	.word	0x58021000
    135c:	58020400 	.word	0x58020400
    1360:	200006f6 	.word	0x200006f6
    1364:	58021800 	.word	0x58021800
    1368:	2000011c 	.word	0x2000011c
    136c:	20000120 	.word	0x20000120

00001370 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
    1370:	b580      	push	{r7, lr}
    1372:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    1374:	4b04      	ldr	r3, [pc, #16]	; (1388 <start_continuous_MW_sweep+0x18>)
    1376:	2200      	movs	r2, #0
    1378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
    137c:	2000      	movs	r0, #0
    137e:	f7ff ff77 	bl	1270 <start_POP_calibration>
}
    1382:	bf00      	nop
    1384:	bd80      	pop	{r7, pc}
    1386:	bf00      	nop
    1388:	20000708 	.word	0x20000708

0000138c <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    138c:	b580      	push	{r7, lr}
    138e:	b08a      	sub	sp, #40	; 0x28
    1390:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    1392:	4b95      	ldr	r3, [pc, #596]	; (15e8 <MW_update+0x25c>)
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1398:	2300      	movs	r3, #0
    139a:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    139c:	7dbb      	ldrb	r3, [r7, #22]
    139e:	2b04      	cmp	r3, #4
    13a0:	f200 8109 	bhi.w	15b6 <MW_update+0x22a>
    13a4:	a201      	add	r2, pc, #4	; (adr r2, 13ac <MW_update+0x20>)
    13a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13aa:	bf00      	nop
    13ac:	000015cf 	.word	0x000015cf
    13b0:	000015cf 	.word	0x000015cf
    13b4:	000013c1 	.word	0x000013c1
    13b8:	00001403 	.word	0x00001403
    13bc:	00001543 	.word	0x00001543
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    13c0:	4b8a      	ldr	r3, [pc, #552]	; (15ec <MW_update+0x260>)
    13c2:	681b      	ldr	r3, [r3, #0]
    13c4:	4618      	mov	r0, r3
    13c6:	f000 fa65 	bl	1894 <check_timer>
    13ca:	4603      	mov	r3, r0
    13cc:	f241 3288 	movw	r2, #5000	; 0x1388
    13d0:	4293      	cmp	r3, r2
    13d2:	d201      	bcs.n	13d8 <MW_update+0x4c>
    13d4:	2300      	movs	r3, #0
    13d6:	e0fe      	b.n	15d6 <MW_update+0x24a>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    13d8:	4b84      	ldr	r3, [pc, #528]	; (15ec <MW_update+0x260>)
    13da:	681b      	ldr	r3, [r3, #0]
    13dc:	4618      	mov	r0, r3
    13de:	f000 fa47 	bl	1870 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    13e2:	2200      	movs	r2, #0
    13e4:	2102      	movs	r1, #2
    13e6:	4882      	ldr	r0, [pc, #520]	; (15f0 <MW_update+0x264>)
    13e8:	f000 fb5e 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
    13ec:	4b7e      	ldr	r3, [pc, #504]	; (15e8 <MW_update+0x25c>)
    13ee:	2203      	movs	r2, #3
    13f0:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
    13f2:	4b7e      	ldr	r3, [pc, #504]	; (15ec <MW_update+0x260>)
    13f4:	681b      	ldr	r3, [r3, #0]
    13f6:	4618      	mov	r0, r3
    13f8:	f000 fa1c 	bl	1834 <start_timer>
			action_taken = true;
    13fc:	2301      	movs	r3, #1
    13fe:	75fb      	strb	r3, [r7, #23]
			break;
    1400:	e0e8      	b.n	15d4 <MW_update+0x248>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    1402:	4b7a      	ldr	r3, [pc, #488]	; (15ec <MW_update+0x260>)
    1404:	681b      	ldr	r3, [r3, #0]
    1406:	4618      	mov	r0, r3
    1408:	f000 fa44 	bl	1894 <check_timer>
    140c:	4602      	mov	r2, r0
    140e:	4b76      	ldr	r3, [pc, #472]	; (15e8 <MW_update+0x25c>)
    1410:	69db      	ldr	r3, [r3, #28]
    1412:	429a      	cmp	r2, r3
    1414:	d201      	bcs.n	141a <MW_update+0x8e>
    1416:	2300      	movs	r3, #0
    1418:	e0dd      	b.n	15d6 <MW_update+0x24a>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    141a:	2301      	movs	r3, #1
    141c:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    141e:	4b73      	ldr	r3, [pc, #460]	; (15ec <MW_update+0x260>)
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	4618      	mov	r0, r3
    1424:	f000 fa24 	bl	1870 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    1428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    142c:	4870      	ldr	r0, [pc, #448]	; (15f0 <MW_update+0x264>)
    142e:	f000 fb67 	bl	1b00 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    1432:	2201      	movs	r2, #1
    1434:	2102      	movs	r1, #2
    1436:	486e      	ldr	r0, [pc, #440]	; (15f0 <MW_update+0x264>)
    1438:	f000 fb36 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    143c:	4b6a      	ldr	r3, [pc, #424]	; (15e8 <MW_update+0x25c>)
    143e:	2202      	movs	r2, #2
    1440:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    1442:	4b69      	ldr	r3, [pc, #420]	; (15e8 <MW_update+0x25c>)
    1444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1446:	4b68      	ldr	r3, [pc, #416]	; (15e8 <MW_update+0x25c>)
    1448:	68db      	ldr	r3, [r3, #12]
    144a:	429a      	cmp	r2, r3
    144c:	d15c      	bne.n	1508 <MW_update+0x17c>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    144e:	2201      	movs	r2, #1
    1450:	2101      	movs	r1, #1
    1452:	4868      	ldr	r0, [pc, #416]	; (15f4 <MW_update+0x268>)
    1454:	f000 fb28 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    1458:	4b67      	ldr	r3, [pc, #412]	; (15f8 <MW_update+0x26c>)
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	4618      	mov	r0, r3
    145e:	f000 fa19 	bl	1894 <check_timer>
    1462:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    1464:	4b64      	ldr	r3, [pc, #400]	; (15f8 <MW_update+0x26c>)
    1466:	681b      	ldr	r3, [r3, #0]
    1468:	4618      	mov	r0, r3
    146a:	f000 fa01 	bl	1870 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    146e:	68bb      	ldr	r3, [r7, #8]
    1470:	ee07 3a90 	vmov	s15, r3
    1474:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1478:	ed9f 6b59 	vldr	d6, [pc, #356]	; 15e0 <MW_update+0x254>
    147c:	ee87 5b06 	vdiv.f64	d5, d7, d6
    1480:	4b59      	ldr	r3, [pc, #356]	; (15e8 <MW_update+0x25c>)
    1482:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    1486:	495d      	ldr	r1, [pc, #372]	; (15fc <MW_update+0x270>)
    1488:	8809      	ldrh	r1, [r1, #0]
    148a:	b289      	uxth	r1, r1
    148c:	9102      	str	r1, [sp, #8]
    148e:	e9cd 2300 	strd	r2, r3, [sp]
    1492:	ec53 2b15 	vmov	r2, r3, d5
    1496:	485a      	ldr	r0, [pc, #360]	; (1600 <MW_update+0x274>)
    1498:	f000 faf2 	bl	1a80 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    149c:	4b52      	ldr	r3, [pc, #328]	; (15e8 <MW_update+0x25c>)
    149e:	695b      	ldr	r3, [r3, #20]
    14a0:	b29a      	uxth	r2, r3
    14a2:	4b51      	ldr	r3, [pc, #324]	; (15e8 <MW_update+0x25c>)
    14a4:	68db      	ldr	r3, [r3, #12]
    14a6:	3301      	adds	r3, #1
    14a8:	b29b      	uxth	r3, r3
    14aa:	fb12 f303 	smulbb	r3, r2, r3
    14ae:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    14b0:	4b4d      	ldr	r3, [pc, #308]	; (15e8 <MW_update+0x25c>)
    14b2:	68db      	ldr	r3, [r3, #12]
    14b4:	b29a      	uxth	r2, r3
    14b6:	88fb      	ldrh	r3, [r7, #6]
    14b8:	4413      	add	r3, r2
    14ba:	b29b      	uxth	r3, r3
    14bc:	3301      	adds	r3, #1
    14be:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    14c0:	4b4e      	ldr	r3, [pc, #312]	; (15fc <MW_update+0x270>)
    14c2:	881b      	ldrh	r3, [r3, #0]
    14c4:	b29b      	uxth	r3, r3
    14c6:	88fa      	ldrh	r2, [r7, #6]
    14c8:	429a      	cmp	r2, r3
    14ca:	d010      	beq.n	14ee <MW_update+0x162>
    14cc:	4b4b      	ldr	r3, [pc, #300]	; (15fc <MW_update+0x270>)
    14ce:	881b      	ldrh	r3, [r3, #0]
    14d0:	b29b      	uxth	r3, r3
    14d2:	88ba      	ldrh	r2, [r7, #4]
    14d4:	429a      	cmp	r2, r3
    14d6:	d00a      	beq.n	14ee <MW_update+0x162>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    14d8:	88fb      	ldrh	r3, [r7, #6]
    14da:	4a48      	ldr	r2, [pc, #288]	; (15fc <MW_update+0x270>)
    14dc:	8812      	ldrh	r2, [r2, #0]
    14de:	b292      	uxth	r2, r2
    14e0:	4619      	mov	r1, r3
    14e2:	4848      	ldr	r0, [pc, #288]	; (1604 <MW_update+0x278>)
    14e4:	f000 facc 	bl	1a80 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    14e8:	4847      	ldr	r0, [pc, #284]	; (1608 <MW_update+0x27c>)
    14ea:	f000 fb3d 	bl	1b68 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    14ee:	4b3e      	ldr	r3, [pc, #248]	; (15e8 <MW_update+0x25c>)
    14f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    14f4:	2b02      	cmp	r3, #2
    14f6:	d103      	bne.n	1500 <MW_update+0x174>
					mw_sweep_settings.state = MW_STOPPED;
    14f8:	4b3b      	ldr	r3, [pc, #236]	; (15e8 <MW_update+0x25c>)
    14fa:	2200      	movs	r2, #0
    14fc:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    14fe:	e069      	b.n	15d4 <MW_update+0x248>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    1500:	2000      	movs	r0, #0
    1502:	f7ff fee5 	bl	12d0 <start_MW_sweep>
			break;
    1506:	e065      	b.n	15d4 <MW_update+0x248>
				mw_sweep_settings.current_point++; //increment point counter
    1508:	4b37      	ldr	r3, [pc, #220]	; (15e8 <MW_update+0x25c>)
    150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    150c:	3301      	adds	r3, #1
    150e:	4a36      	ldr	r2, [pc, #216]	; (15e8 <MW_update+0x25c>)
    1510:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    1512:	4b35      	ldr	r3, [pc, #212]	; (15e8 <MW_update+0x25c>)
    1514:	689a      	ldr	r2, [r3, #8]
    1516:	4b34      	ldr	r3, [pc, #208]	; (15e8 <MW_update+0x25c>)
    1518:	691b      	ldr	r3, [r3, #16]
    151a:	4933      	ldr	r1, [pc, #204]	; (15e8 <MW_update+0x25c>)
    151c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    151e:	fb01 f303 	mul.w	r3, r1, r3
    1522:	4413      	add	r3, r2
    1524:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    1526:	4b30      	ldr	r3, [pc, #192]	; (15e8 <MW_update+0x25c>)
    1528:	685b      	ldr	r3, [r3, #4]
    152a:	4a2f      	ldr	r2, [pc, #188]	; (15e8 <MW_update+0x25c>)
    152c:	7852      	ldrb	r2, [r2, #1]
    152e:	68f9      	ldr	r1, [r7, #12]
    1530:	4618      	mov	r0, r3
    1532:	f7ff fa2d 	bl	990 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    1536:	4b2d      	ldr	r3, [pc, #180]	; (15ec <MW_update+0x260>)
    1538:	681b      	ldr	r3, [r3, #0]
    153a:	4618      	mov	r0, r3
    153c:	f000 f97a 	bl	1834 <start_timer>
			break;
    1540:	e048      	b.n	15d4 <MW_update+0x248>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    1542:	4b2e      	ldr	r3, [pc, #184]	; (15fc <MW_update+0x270>)
    1544:	881b      	ldrh	r3, [r3, #0]
    1546:	b29b      	uxth	r3, r3
    1548:	2b63      	cmp	r3, #99	; 0x63
    154a:	d942      	bls.n	15d2 <MW_update+0x246>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    154c:	4b27      	ldr	r3, [pc, #156]	; (15ec <MW_update+0x260>)
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	4618      	mov	r0, r3
    1552:	f000 f99f 	bl	1894 <check_timer>
    1556:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    1558:	693b      	ldr	r3, [r7, #16]
    155a:	ee07 3a90 	vmov	s15, r3
    155e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1562:	eddf 6a2a 	vldr	s13, [pc, #168]	; 160c <MW_update+0x280>
    1566:	eec7 7a26 	vdiv.f32	s15, s14, s13
    156a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    156e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1572:	ee37 7b06 	vadd.f64	d7, d7, d6
    1576:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    157a:	ee17 2a90 	vmov	r2, s15
    157e:	4b24      	ldr	r3, [pc, #144]	; (1610 <MW_update+0x284>)
    1580:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    1582:	4b1a      	ldr	r3, [pc, #104]	; (15ec <MW_update+0x260>)
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	4618      	mov	r0, r3
    1588:	f000 f972 	bl	1870 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    158c:	4b20      	ldr	r3, [pc, #128]	; (1610 <MW_update+0x284>)
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	4619      	mov	r1, r3
    1592:	4820      	ldr	r0, [pc, #128]	; (1614 <MW_update+0x288>)
    1594:	f000 fa74 	bl	1a80 <__printf_veneer>
				action_taken = true;
    1598:	2301      	movs	r3, #1
    159a:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    159c:	4b12      	ldr	r3, [pc, #72]	; (15e8 <MW_update+0x25c>)
    159e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    15a2:	2b01      	cmp	r3, #1
    15a4:	d103      	bne.n	15ae <MW_update+0x222>
					mw_sweep_settings.state = MW_STOPPED;
    15a6:	4b10      	ldr	r3, [pc, #64]	; (15e8 <MW_update+0x25c>)
    15a8:	2200      	movs	r2, #0
    15aa:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    15ac:	e011      	b.n	15d2 <MW_update+0x246>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    15ae:	2000      	movs	r0, #0
    15b0:	f7ff fe8e 	bl	12d0 <start_MW_sweep>
			break;
    15b4:	e00d      	b.n	15d2 <MW_update+0x246>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    15b6:	4b0c      	ldr	r3, [pc, #48]	; (15e8 <MW_update+0x25c>)
    15b8:	781b      	ldrb	r3, [r3, #0]
    15ba:	4619      	mov	r1, r3
    15bc:	4816      	ldr	r0, [pc, #88]	; (1618 <MW_update+0x28c>)
    15be:	f000 fa5f 	bl	1a80 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    15c2:	7dbb      	ldrb	r3, [r7, #22]
    15c4:	4619      	mov	r1, r3
    15c6:	4815      	ldr	r0, [pc, #84]	; (161c <MW_update+0x290>)
    15c8:	f000 fa5a 	bl	1a80 <__printf_veneer>
    15cc:	e002      	b.n	15d4 <MW_update+0x248>
			break; //no action to take
    15ce:	bf00      	nop
    15d0:	e000      	b.n	15d4 <MW_update+0x248>
			break;
    15d2:	bf00      	nop
	}
    return(action_taken);
    15d4:	7dfb      	ldrb	r3, [r7, #23]
}
    15d6:	4618      	mov	r0, r3
    15d8:	3718      	adds	r7, #24
    15da:	46bd      	mov	sp, r7
    15dc:	bd80      	pop	{r7, pc}
    15de:	bf00      	nop
    15e0:	00000000 	.word	0x00000000
    15e4:	412e8480 	.word	0x412e8480
    15e8:	20000708 	.word	0x20000708
    15ec:	2000011c 	.word	0x2000011c
    15f0:	58020400 	.word	0x58020400
    15f4:	58021800 	.word	0x58021800
    15f8:	20000120 	.word	0x20000120
    15fc:	200006f6 	.word	0x200006f6
    1600:	0801d9f4 	.word	0x0801d9f4
    1604:	0801da2c 	.word	0x0801da2c
    1608:	0801da68 	.word	0x0801da68
    160c:	42c80000 	.word	0x42c80000
    1610:	200006f8 	.word	0x200006f8
    1614:	0801da8c 	.word	0x0801da8c
    1618:	0801dabc 	.word	0x0801dabc
    161c:	0801dae8 	.word	0x0801dae8

00001620 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    1620:	b580      	push	{r7, lr}
    1622:	b090      	sub	sp, #64	; 0x40
    1624:	af02      	add	r7, sp, #8
    1626:	ed87 0b02 	vstr	d0, [r7, #8]
    162a:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    162e:	486a      	ldr	r0, [pc, #424]	; (17d8 <MW_frequency_toggle+0x1b8>)
    1630:	f000 fa9a 	bl	1b68 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    1634:	ed97 7b02 	vldr	d7, [r7, #8]
    1638:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 17b8 <MW_frequency_toggle+0x198>
    163c:	ee87 4b06 	vdiv.f64	d4, d7, d6
    1640:	ed97 6b00 	vldr	d6, [r7]
    1644:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 17b8 <MW_frequency_toggle+0x198>
    1648:	ee86 7b05 	vdiv.f64	d7, d6, d5
    164c:	ed8d 7b00 	vstr	d7, [sp]
    1650:	ec53 2b14 	vmov	r2, r3, d4
    1654:	4861      	ldr	r0, [pc, #388]	; (17dc <MW_frequency_toggle+0x1bc>)
    1656:	f000 fa13 	bl	1a80 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    165a:	ed9f 5b59 	vldr	d5, [pc, #356]	; 17c0 <MW_frequency_toggle+0x1a0>
    165e:	ed97 6b02 	vldr	d6, [r7, #8]
    1662:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1666:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    166a:	ee17 3a90 	vmov	r3, s15
    166e:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1672:	2b01      	cmp	r3, #1
    1674:	d00b      	beq.n	168e <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    1676:	e002      	b.n	167e <MW_frequency_toggle+0x5e>
			k_one--;
    1678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    167a:	3b01      	subs	r3, #1
    167c:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    167e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1680:	2b3e      	cmp	r3, #62	; 0x3e
    1682:	d8f9      	bhi.n	1678 <MW_frequency_toggle+0x58>
    1684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1686:	f003 0301 	and.w	r3, r3, #1
    168a:	2b00      	cmp	r3, #0
    168c:	d1f4      	bne.n	1678 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    168e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 17c0 <MW_frequency_toggle+0x1a0>
    1692:	ed97 6b00 	vldr	d6, [r7]
    1696:	ee85 7b06 	vdiv.f64	d7, d5, d6
    169a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    169e:	ee17 3a90 	vmov	r3, s15
    16a2:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    16a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16a6:	2b01      	cmp	r3, #1
    16a8:	d00b      	beq.n	16c2 <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    16aa:	e002      	b.n	16b2 <MW_frequency_toggle+0x92>
			k_two--;
    16ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16ae:	3b01      	subs	r3, #1
    16b0:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    16b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16b4:	2b3e      	cmp	r3, #62	; 0x3e
    16b6:	d8f9      	bhi.n	16ac <MW_frequency_toggle+0x8c>
    16b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16ba:	f003 0301 	and.w	r3, r3, #1
    16be:	2b00      	cmp	r3, #0
    16c0:	d1f4      	bne.n	16ac <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    16c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16c4:	ee07 3a90 	vmov	s15, r3
    16c8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    16cc:	ed97 7b02 	vldr	d7, [r7, #8]
    16d0:	ee26 6b07 	vmul.f64	d6, d6, d7
    16d4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 17c8 <MW_frequency_toggle+0x1a8>
    16d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
    16dc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    16e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16e2:	ee07 3a90 	vmov	s15, r3
    16e6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    16ea:	ed97 7b00 	vldr	d7, [r7]
    16ee:	ee26 6b07 	vmul.f64	d6, d6, d7
    16f2:	ed9f 5b35 	vldr	d5, [pc, #212]	; 17c8 <MW_frequency_toggle+0x1a8>
    16f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
    16fa:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    16fe:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    1702:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1706:	ee17 3a90 	vmov	r3, s15
    170a:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    170c:	69fb      	ldr	r3, [r7, #28]
    170e:	ee07 3a90 	vmov	s15, r3
    1712:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1716:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    171a:	ee36 7b47 	vsub.f64	d7, d6, d7
    171e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 17d0 <MW_frequency_toggle+0x1b0>
    1722:	ee27 7b06 	vmul.f64	d7, d7, d6
    1726:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    172a:	ee37 7b06 	vadd.f64	d7, d7, d6
    172e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1732:	ee17 3a90 	vmov	r3, s15
    1736:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    1738:	ed97 7b08 	vldr	d7, [r7, #32]
    173c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1740:	ee17 3a90 	vmov	r3, s15
    1744:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    1746:	697b      	ldr	r3, [r7, #20]
    1748:	ee07 3a90 	vmov	s15, r3
    174c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1750:	ed97 6b08 	vldr	d6, [r7, #32]
    1754:	ee36 7b47 	vsub.f64	d7, d6, d7
    1758:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 17d0 <MW_frequency_toggle+0x1b0>
    175c:	ee27 7b06 	vmul.f64	d7, d7, d6
    1760:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1764:	ee37 7b06 	vadd.f64	d7, d7, d6
    1768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    176c:	ee17 3a90 	vmov	r3, s15
    1770:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    1772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1774:	69b9      	ldr	r1, [r7, #24]
    1776:	69f8      	ldr	r0, [r7, #28]
    1778:	f7ff f90a 	bl	990 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    177c:	2200      	movs	r2, #0
    177e:	2101      	movs	r1, #1
    1780:	4817      	ldr	r0, [pc, #92]	; (17e0 <MW_frequency_toggle+0x1c0>)
    1782:	f000 f991 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    1786:	4b17      	ldr	r3, [pc, #92]	; (17e4 <MW_frequency_toggle+0x1c4>)
    1788:	681b      	ldr	r3, [r3, #0]
    178a:	2164      	movs	r1, #100	; 0x64
    178c:	4618      	mov	r0, r3
    178e:	f000 f88d 	bl	18ac <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    1792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1794:	6939      	ldr	r1, [r7, #16]
    1796:	6978      	ldr	r0, [r7, #20]
    1798:	f7ff f8fa 	bl	990 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    179c:	2201      	movs	r2, #1
    179e:	2101      	movs	r1, #1
    17a0:	480f      	ldr	r0, [pc, #60]	; (17e0 <MW_frequency_toggle+0x1c0>)
    17a2:	f000 f981 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    17a6:	4b0f      	ldr	r3, [pc, #60]	; (17e4 <MW_frequency_toggle+0x1c4>)
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	2164      	movs	r1, #100	; 0x64
    17ac:	4618      	mov	r0, r3
    17ae:	f000 f87d 	bl	18ac <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    17b2:	e7de      	b.n	1772 <MW_frequency_toggle+0x152>
    17b4:	f3af 8000 	nop.w
    17b8:	00000000 	.word	0x00000000
    17bc:	41cdcd65 	.word	0x41cdcd65
    17c0:	20000000 	.word	0x20000000
    17c4:	41ee8c21 	.word	0x41ee8c21
    17c8:	00000000 	.word	0x00000000
    17cc:	4187d784 	.word	0x4187d784
    17d0:	00000000 	.word	0x00000000
    17d4:	41700000 	.word	0x41700000
    17d8:	0801db00 	.word	0x0801db00
    17dc:	0801db24 	.word	0x0801db24
    17e0:	58021800 	.word	0x58021800
    17e4:	20000118 	.word	0x20000118

000017e8 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    17e8:	b580      	push	{r7, lr}
    17ea:	b084      	sub	sp, #16
    17ec:	af00      	add	r7, sp, #0
    17ee:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    17f0:	2300      	movs	r3, #0
    17f2:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	2b1f      	cmp	r3, #31
    17f8:	d904      	bls.n	1804 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    17fa:	480d      	ldr	r0, [pc, #52]	; (1830 <set_SDO_output+0x48>)
    17fc:	f000 f9b4 	bl	1b68 <__puts_veneer>
		Error_Handler();
    1800:	f000 f982 	bl	1b08 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    1804:	200f      	movs	r0, #15
    1806:	f7fe ff29 	bl	65c <synth_readreg>
    180a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    180c:	68fb      	ldr	r3, [r7, #12]
    180e:	f023 031f 	bic.w	r3, r3, #31
    1812:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    1814:	68fa      	ldr	r2, [r7, #12]
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	4313      	orrs	r3, r2
    181a:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    181c:	2301      	movs	r3, #1
    181e:	2200      	movs	r2, #0
    1820:	210f      	movs	r1, #15
    1822:	68f8      	ldr	r0, [r7, #12]
    1824:	f7fe fea0 	bl	568 <synth_writereg>
}
    1828:	bf00      	nop
    182a:	3710      	adds	r7, #16
    182c:	46bd      	mov	sp, r7
    182e:	bd80      	pop	{r7, pc}
    1830:	0801db4c 	.word	0x0801db4c

00001834 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    1834:	b480      	push	{r7}
    1836:	b083      	sub	sp, #12
    1838:	af00      	add	r7, sp, #0
    183a:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    183c:	687b      	ldr	r3, [r7, #4]
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	f023 0201 	bic.w	r2, r3, #1
    1844:	687b      	ldr	r3, [r7, #4]
    1846:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	695b      	ldr	r3, [r3, #20]
    184c:	f043 0201 	orr.w	r2, r3, #1
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	f043 0201 	orr.w	r2, r3, #1
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1864:	4618      	mov	r0, r3
    1866:	370c      	adds	r7, #12
    1868:	46bd      	mov	sp, r7
    186a:	f85d 7b04 	ldr.w	r7, [sp], #4
    186e:	4770      	bx	lr

00001870 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1870:	b480      	push	{r7}
    1872:	b083      	sub	sp, #12
    1874:	af00      	add	r7, sp, #0
    1876:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	f023 0201 	bic.w	r2, r3, #1
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1888:	4618      	mov	r0, r3
    188a:	370c      	adds	r7, #12
    188c:	46bd      	mov	sp, r7
    188e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1892:	4770      	bx	lr

00001894 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    1894:	b480      	push	{r7}
    1896:	b083      	sub	sp, #12
    1898:	af00      	add	r7, sp, #0
    189a:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    189c:	687b      	ldr	r3, [r7, #4]
    189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    18a0:	4618      	mov	r0, r3
    18a2:	370c      	adds	r7, #12
    18a4:	46bd      	mov	sp, r7
    18a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    18aa:	4770      	bx	lr

000018ac <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    18ac:	b580      	push	{r7, lr}
    18ae:	b084      	sub	sp, #16
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
    18b4:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    18b6:	6878      	ldr	r0, [r7, #4]
    18b8:	f7ff ffbc 	bl	1834 <start_timer>
    18bc:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    18be:	bf00      	nop
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    18c4:	683a      	ldr	r2, [r7, #0]
    18c6:	429a      	cmp	r2, r3
    18c8:	d8fa      	bhi.n	18c0 <timer_delay+0x14>

	stop_timer(timer);
    18ca:	6878      	ldr	r0, [r7, #4]
    18cc:	f7ff ffd0 	bl	1870 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    18d0:	bf00      	nop
    18d2:	3710      	adds	r7, #16
    18d4:	46bd      	mov	sp, r7
    18d6:	bd80      	pop	{r7, pc}

000018d8 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    18d8:	b580      	push	{r7, lr}
    18da:	b086      	sub	sp, #24
    18dc:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    18de:	2300      	movs	r3, #0
    18e0:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    18e2:	f242 730f 	movw	r3, #9999	; 0x270f
    18e6:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    18e8:	2300      	movs	r3, #0
    18ea:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    18ec:	2314      	movs	r3, #20
    18ee:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    18f0:	2201      	movs	r2, #1
    18f2:	2102      	movs	r1, #2
    18f4:	4826      	ldr	r0, [pc, #152]	; (1990 <measure_POP_cycle+0xb8>)
    18f6:	f000 f8d7 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    18fa:	4b26      	ldr	r3, [pc, #152]	; (1994 <measure_POP_cycle+0xbc>)
    18fc:	681b      	ldr	r3, [r3, #0]
    18fe:	4618      	mov	r0, r3
    1900:	f7ff ff98 	bl	1834 <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    1904:	2200      	movs	r2, #0
    1906:	2102      	movs	r1, #2
    1908:	4821      	ldr	r0, [pc, #132]	; (1990 <measure_POP_cycle+0xb8>)
    190a:	f000 f8cd 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    190e:	4822      	ldr	r0, [pc, #136]	; (1998 <measure_POP_cycle+0xc0>)
    1910:	f000 f8ae 	bl	1a70 <__HAL_ADC_GetValue_veneer>
    1914:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    1916:	e00c      	b.n	1932 <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    1918:	481f      	ldr	r0, [pc, #124]	; (1998 <measure_POP_cycle+0xc0>)
    191a:	f000 f8a9 	bl	1a70 <__HAL_ADC_GetValue_veneer>
    191e:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    1920:	697a      	ldr	r2, [r7, #20]
    1922:	693b      	ldr	r3, [r7, #16]
    1924:	429a      	cmp	r2, r3
    1926:	d0f7      	beq.n	1918 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    1928:	697b      	ldr	r3, [r7, #20]
    192a:	613b      	str	r3, [r7, #16]
		cycle_count++;
    192c:	7bfb      	ldrb	r3, [r7, #15]
    192e:	3301      	adds	r3, #1
    1930:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    1932:	7bfa      	ldrb	r2, [r7, #15]
    1934:	7bbb      	ldrb	r3, [r7, #14]
    1936:	429a      	cmp	r2, r3
    1938:	d3f2      	bcc.n	1920 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    193a:	4b16      	ldr	r3, [pc, #88]	; (1994 <measure_POP_cycle+0xbc>)
    193c:	681b      	ldr	r3, [r3, #0]
    193e:	4618      	mov	r0, r3
    1940:	f7ff ffa8 	bl	1894 <check_timer>
    1944:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    1946:	4b13      	ldr	r3, [pc, #76]	; (1994 <measure_POP_cycle+0xbc>)
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	4618      	mov	r0, r3
    194c:	f7ff ffa2 	bl	1894 <check_timer>
    1950:	ee07 0a90 	vmov	s15, r0
    1954:	eef8 6a67 	vcvt.f32.u32	s13, s15
    1958:	7bbb      	ldrb	r3, [r7, #14]
    195a:	ee07 3a90 	vmov	s15, r3
    195e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1962:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1966:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    196a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    196e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1972:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1976:	ee17 3a90 	vmov	r3, s15
    197a:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    197c:	4b05      	ldr	r3, [pc, #20]	; (1994 <measure_POP_cycle+0xbc>)
    197e:	681b      	ldr	r3, [r3, #0]
    1980:	4618      	mov	r0, r3
    1982:	f7ff ff75 	bl	1870 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    1986:	687b      	ldr	r3, [r7, #4]

}
    1988:	4618      	mov	r0, r3
    198a:	3718      	adds	r7, #24
    198c:	46bd      	mov	sp, r7
    198e:	bd80      	pop	{r7, pc}
    1990:	58020400 	.word	0x58020400
    1994:	2000011c 	.word	0x2000011c
    1998:	20000358 	.word	0x20000358

0000199c <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    199c:	b580      	push	{r7, lr}
    199e:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    19a0:	f240 1103 	movw	r1, #259	; 0x103
    19a4:	480f      	ldr	r0, [pc, #60]	; (19e4 <start_pop+0x48>)
    19a6:	f000 f8cf 	bl	1b48 <__HAL_HRTIM_WaveformOutputStart_veneer>
    19aa:	4603      	mov	r3, r0
    19ac:	2b00      	cmp	r3, #0
    19ae:	d004      	beq.n	19ba <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    19b0:	480d      	ldr	r0, [pc, #52]	; (19e8 <start_pop+0x4c>)
    19b2:	f000 f8d9 	bl	1b68 <__puts_veneer>
		Error_Handler();
    19b6:	f000 f8a7 	bl	1b08 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    19ba:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    19be:	4809      	ldr	r0, [pc, #36]	; (19e4 <start_pop+0x48>)
    19c0:	f000 f8aa 	bl	1b18 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    19c4:	4603      	mov	r3, r0
    19c6:	2b00      	cmp	r3, #0
    19c8:	d004      	beq.n	19d4 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    19ca:	4808      	ldr	r0, [pc, #32]	; (19ec <start_pop+0x50>)
    19cc:	f000 f8cc 	bl	1b68 <__puts_veneer>
		Error_Handler();
    19d0:	f000 f89a 	bl	1b08 <__Error_Handler_veneer>
	}

	pop_running = true;
    19d4:	4b06      	ldr	r3, [pc, #24]	; (19f0 <start_pop+0x54>)
    19d6:	2201      	movs	r2, #1
    19d8:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    19da:	4806      	ldr	r0, [pc, #24]	; (19f4 <start_pop+0x58>)
    19dc:	f000 f8c4 	bl	1b68 <__puts_veneer>

}
    19e0:	bf00      	nop
    19e2:	bd80      	pop	{r7, pc}
    19e4:	200003d0 	.word	0x200003d0
    19e8:	0801db70 	.word	0x0801db70
    19ec:	0801db88 	.word	0x0801db88
    19f0:	20000758 	.word	0x20000758
    19f4:	0801dba0 	.word	0x0801dba0

000019f8 <stop_pop>:
void stop_pop() {
    19f8:	b580      	push	{r7, lr}
    19fa:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    19fc:	f240 1103 	movw	r1, #259	; 0x103
    1a00:	4813      	ldr	r0, [pc, #76]	; (1a50 <stop_pop+0x58>)
    1a02:	f000 f871 	bl	1ae8 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1a06:	4603      	mov	r3, r0
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d004      	beq.n	1a16 <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    1a0c:	4811      	ldr	r0, [pc, #68]	; (1a54 <stop_pop+0x5c>)
    1a0e:	f000 f8ab 	bl	1b68 <__puts_veneer>
		Error_Handler();
    1a12:	f000 f879 	bl	1b08 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1a16:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1a1a:	480d      	ldr	r0, [pc, #52]	; (1a50 <stop_pop+0x58>)
    1a1c:	f000 f88c 	bl	1b38 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1a20:	4603      	mov	r3, r0
    1a22:	2b00      	cmp	r3, #0
    1a24:	d004      	beq.n	1a30 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1a26:	480c      	ldr	r0, [pc, #48]	; (1a58 <stop_pop+0x60>)
    1a28:	f000 f89e 	bl	1b68 <__puts_veneer>
		Error_Handler();
    1a2c:	f000 f86c 	bl	1b08 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1a30:	4b0a      	ldr	r3, [pc, #40]	; (1a5c <stop_pop+0x64>)
    1a32:	2200      	movs	r2, #0
    1a34:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1a36:	4b0a      	ldr	r3, [pc, #40]	; (1a60 <stop_pop+0x68>)
    1a38:	2200      	movs	r2, #0
    1a3a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1a3c:	2200      	movs	r2, #0
    1a3e:	2102      	movs	r1, #2
    1a40:	4808      	ldr	r0, [pc, #32]	; (1a64 <stop_pop+0x6c>)
    1a42:	f000 f831 	bl	1aa8 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1a46:	4808      	ldr	r0, [pc, #32]	; (1a68 <stop_pop+0x70>)
    1a48:	f000 f88e 	bl	1b68 <__puts_veneer>
}
    1a4c:	bf00      	nop
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	200003d0 	.word	0x200003d0
    1a54:	0801dbb4 	.word	0x0801dbb4
    1a58:	0801dbcc 	.word	0x0801dbcc
    1a5c:	20000754 	.word	0x20000754
    1a60:	20000758 	.word	0x20000758
    1a64:	58021000 	.word	0x58021000
    1a68:	0801dbe4 	.word	0x0801dbe4
    1a6c:	00000000 	.word	0x00000000

00001a70 <__HAL_ADC_GetValue_veneer>:
    1a70:	f85f f000 	ldr.w	pc, [pc]	; 1a74 <__HAL_ADC_GetValue_veneer+0x4>
    1a74:	08004bf9 	.word	0x08004bf9

00001a78 <__tcp_arg_veneer>:
    1a78:	f85f f000 	ldr.w	pc, [pc]	; 1a7c <__tcp_arg_veneer+0x4>
    1a7c:	080130a9 	.word	0x080130a9

00001a80 <__printf_veneer>:
    1a80:	f85f f000 	ldr.w	pc, [pc]	; 1a84 <__printf_veneer+0x4>
    1a84:	0801b131 	.word	0x0801b131

00001a88 <__memcpy_veneer>:
    1a88:	f85f f000 	ldr.w	pc, [pc]	; 1a8c <__memcpy_veneer+0x4>
    1a8c:	0801b4f3 	.word	0x0801b4f3

00001a90 <__tcp_recved_veneer>:
    1a90:	f85f f000 	ldr.w	pc, [pc]	; 1a94 <__tcp_recved_veneer+0x4>
    1a94:	080120f1 	.word	0x080120f1

00001a98 <__pbuf_alloc_veneer>:
    1a98:	f85f f000 	ldr.w	pc, [pc]	; 1a9c <__pbuf_alloc_veneer+0x4>
    1a9c:	08010e29 	.word	0x08010e29

00001aa0 <__HAL_GPIO_ReadPin_veneer>:
    1aa0:	f85f f000 	ldr.w	pc, [pc]	; 1aa4 <__HAL_GPIO_ReadPin_veneer+0x4>
    1aa4:	08007e75 	.word	0x08007e75

00001aa8 <__HAL_GPIO_WritePin_veneer>:
    1aa8:	f85f f000 	ldr.w	pc, [pc]	; 1aac <__HAL_GPIO_WritePin_veneer+0x4>
    1aac:	08007ea5 	.word	0x08007ea5

00001ab0 <__pbuf_free_veneer>:
    1ab0:	f85f f000 	ldr.w	pc, [pc]	; 1ab4 <__pbuf_free_veneer+0x4>
    1ab4:	080113f1 	.word	0x080113f1

00001ab8 <__tcp_recv_veneer>:
    1ab8:	f85f f000 	ldr.w	pc, [pc]	; 1abc <__tcp_recv_veneer+0x4>
    1abc:	080130cd 	.word	0x080130cd

00001ac0 <__mem_free_veneer>:
    1ac0:	f85f f000 	ldr.w	pc, [pc]	; 1ac4 <__mem_free_veneer+0x4>
    1ac4:	08010059 	.word	0x08010059

00001ac8 <__HAL_Delay_veneer>:
    1ac8:	f85f f000 	ldr.w	pc, [pc]	; 1acc <__HAL_Delay_veneer+0x4>
    1acc:	0800414d 	.word	0x0800414d

00001ad0 <__strlen_veneer>:
    1ad0:	f85f f000 	ldr.w	pc, [pc]	; 1ad4 <__strlen_veneer+0x4>
    1ad4:	08001ef1 	.word	0x08001ef1

00001ad8 <__tcp_write_veneer>:
    1ad8:	f85f f000 	ldr.w	pc, [pc]	; 1adc <__tcp_write_veneer+0x4>
    1adc:	08015efd 	.word	0x08015efd

00001ae0 <__ethernetif_input_veneer>:
    1ae0:	f85f f000 	ldr.w	pc, [pc]	; 1ae4 <__ethernetif_input_veneer+0x4>
    1ae4:	0800f689 	.word	0x0800f689

00001ae8 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1ae8:	f85f f000 	ldr.w	pc, [pc]	; 1aec <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    1aec:	080085c1 	.word	0x080085c1

00001af0 <__tcp_abort_veneer>:
    1af0:	f85f f000 	ldr.w	pc, [pc]	; 1af4 <__tcp_abort_veneer+0x4>
    1af4:	08012025 	.word	0x08012025

00001af8 <__tcp_close_veneer>:
    1af8:	f85f f000 	ldr.w	pc, [pc]	; 1afc <__tcp_close_veneer+0x4>
    1afc:	08011e51 	.word	0x08011e51

00001b00 <__HAL_GPIO_TogglePin_veneer>:
    1b00:	f85f f000 	ldr.w	pc, [pc]	; 1b04 <__HAL_GPIO_TogglePin_veneer+0x4>
    1b04:	08007ed7 	.word	0x08007ed7

00001b08 <__Error_Handler_veneer>:
    1b08:	f85f f000 	ldr.w	pc, [pc]	; 1b0c <__Error_Handler_veneer+0x4>
    1b0c:	080032b9 	.word	0x080032b9

00001b10 <__pbuf_ref_veneer>:
    1b10:	f85f f000 	ldr.w	pc, [pc]	; 1b14 <__pbuf_ref_veneer+0x4>
    1b14:	08011531 	.word	0x08011531

00001b18 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1b18:	f85f f000 	ldr.w	pc, [pc]	; 1b1c <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1b1c:	0800861d 	.word	0x0800861d

00001b20 <__mem_malloc_veneer>:
    1b20:	f85f f000 	ldr.w	pc, [pc]	; 1b24 <__mem_malloc_veneer+0x4>
    1b24:	08010315 	.word	0x08010315

00001b28 <__sys_check_timeouts_veneer>:
    1b28:	f85f f000 	ldr.w	pc, [pc]	; 1b2c <__sys_check_timeouts_veneer+0x4>
    1b2c:	08017bcd 	.word	0x08017bcd

00001b30 <__strncmp_veneer>:
    1b30:	f85f f000 	ldr.w	pc, [pc]	; 1b34 <__strncmp_veneer+0x4>
    1b34:	0801b3ed 	.word	0x0801b3ed

00001b38 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1b38:	f85f f000 	ldr.w	pc, [pc]	; 1b3c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    1b3c:	080086fd 	.word	0x080086fd

00001b40 <__ip4addr_ntoa_veneer>:
    1b40:	f85f f000 	ldr.w	pc, [pc]	; 1b44 <__ip4addr_ntoa_veneer+0x4>
    1b44:	08019775 	.word	0x08019775

00001b48 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1b48:	f85f f000 	ldr.w	pc, [pc]	; 1b4c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1b4c:	08008567 	.word	0x08008567

00001b50 <__tcp_poll_veneer>:
    1b50:	f85f f000 	ldr.w	pc, [pc]	; 1b54 <__tcp_poll_veneer+0x4>
    1b54:	08013199 	.word	0x08013199

00001b58 <__pbuf_take_veneer>:
    1b58:	f85f f000 	ldr.w	pc, [pc]	; 1b5c <__pbuf_take_veneer+0x4>
    1b5c:	080118a9 	.word	0x080118a9

00001b60 <__tcp_err_veneer>:
    1b60:	f85f f000 	ldr.w	pc, [pc]	; 1b64 <__tcp_err_veneer+0x4>
    1b64:	08013155 	.word	0x08013155

00001b68 <__puts_veneer>:
    1b68:	f85f f000 	ldr.w	pc, [pc]	; 1b6c <__puts_veneer+0x4>
    1b6c:	0801b1fd 	.word	0x0801b1fd

00001b70 <__tcp_sent_veneer>:
    1b70:	f85f f000 	ldr.w	pc, [pc]	; 1b74 <__tcp_sent_veneer+0x4>
    1b74:	08013111 	.word	0x08013111

Disassembly of section .text:

08001e10 <__do_global_dtors_aux>:
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4c05      	ldr	r4, [pc, #20]	; (8001e28 <__do_global_dtors_aux+0x18>)
 8001e14:	7823      	ldrb	r3, [r4, #0]
 8001e16:	b933      	cbnz	r3, 8001e26 <__do_global_dtors_aux+0x16>
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__do_global_dtors_aux+0x1c>)
 8001e1a:	b113      	cbz	r3, 8001e22 <__do_global_dtors_aux+0x12>
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <__do_global_dtors_aux+0x20>)
 8001e1e:	f3af 8000 	nop.w
 8001e22:	2301      	movs	r3, #1
 8001e24:	7023      	strb	r3, [r4, #0]
 8001e26:	bd10      	pop	{r4, pc}
 8001e28:	20000330 	.word	0x20000330
 8001e2c:	00000000 	.word	0x00000000
 8001e30:	0801d060 	.word	0x0801d060

08001e34 <frame_dummy>:
 8001e34:	b508      	push	{r3, lr}
 8001e36:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <frame_dummy+0x10>)
 8001e38:	b11b      	cbz	r3, 8001e42 <frame_dummy+0xe>
 8001e3a:	4903      	ldr	r1, [pc, #12]	; (8001e48 <frame_dummy+0x14>)
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <frame_dummy+0x18>)
 8001e3e:	f3af 8000 	nop.w
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	00000000 	.word	0x00000000
 8001e48:	20000334 	.word	0x20000334
 8001e4c:	0801d060 	.word	0x0801d060

08001e50 <memchr>:
 8001e50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001e54:	2a10      	cmp	r2, #16
 8001e56:	db2b      	blt.n	8001eb0 <memchr+0x60>
 8001e58:	f010 0f07 	tst.w	r0, #7
 8001e5c:	d008      	beq.n	8001e70 <memchr+0x20>
 8001e5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001e62:	3a01      	subs	r2, #1
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d02d      	beq.n	8001ec4 <memchr+0x74>
 8001e68:	f010 0f07 	tst.w	r0, #7
 8001e6c:	b342      	cbz	r2, 8001ec0 <memchr+0x70>
 8001e6e:	d1f6      	bne.n	8001e5e <memchr+0xe>
 8001e70:	b4f0      	push	{r4, r5, r6, r7}
 8001e72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001e76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001e7a:	f022 0407 	bic.w	r4, r2, #7
 8001e7e:	f07f 0700 	mvns.w	r7, #0
 8001e82:	2300      	movs	r3, #0
 8001e84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001e88:	3c08      	subs	r4, #8
 8001e8a:	ea85 0501 	eor.w	r5, r5, r1
 8001e8e:	ea86 0601 	eor.w	r6, r6, r1
 8001e92:	fa85 f547 	uadd8	r5, r5, r7
 8001e96:	faa3 f587 	sel	r5, r3, r7
 8001e9a:	fa86 f647 	uadd8	r6, r6, r7
 8001e9e:	faa5 f687 	sel	r6, r5, r7
 8001ea2:	b98e      	cbnz	r6, 8001ec8 <memchr+0x78>
 8001ea4:	d1ee      	bne.n	8001e84 <memchr+0x34>
 8001ea6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ea8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001eac:	f002 0207 	and.w	r2, r2, #7
 8001eb0:	b132      	cbz	r2, 8001ec0 <memchr+0x70>
 8001eb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	ea83 0301 	eor.w	r3, r3, r1
 8001ebc:	b113      	cbz	r3, 8001ec4 <memchr+0x74>
 8001ebe:	d1f8      	bne.n	8001eb2 <memchr+0x62>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	4770      	bx	lr
 8001ec4:	3801      	subs	r0, #1
 8001ec6:	4770      	bx	lr
 8001ec8:	2d00      	cmp	r5, #0
 8001eca:	bf06      	itte	eq
 8001ecc:	4635      	moveq	r5, r6
 8001ece:	3803      	subeq	r0, #3
 8001ed0:	3807      	subne	r0, #7
 8001ed2:	f015 0f01 	tst.w	r5, #1
 8001ed6:	d107      	bne.n	8001ee8 <memchr+0x98>
 8001ed8:	3001      	adds	r0, #1
 8001eda:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001ede:	bf02      	ittt	eq
 8001ee0:	3001      	addeq	r0, #1
 8001ee2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001ee6:	3001      	addeq	r0, #1
 8001ee8:	bcf0      	pop	{r4, r5, r6, r7}
 8001eea:	3801      	subs	r0, #1
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <strlen>:
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d1fb      	bne.n	8001ef2 <strlen+0x2>
 8001efa:	1a18      	subs	r0, r3, r0
 8001efc:	3801      	subs	r0, #1
 8001efe:	4770      	bx	lr

08001f00 <__aeabi_uldivmod>:
 8001f00:	b953      	cbnz	r3, 8001f18 <__aeabi_uldivmod+0x18>
 8001f02:	b94a      	cbnz	r2, 8001f18 <__aeabi_uldivmod+0x18>
 8001f04:	2900      	cmp	r1, #0
 8001f06:	bf08      	it	eq
 8001f08:	2800      	cmpeq	r0, #0
 8001f0a:	bf1c      	itt	ne
 8001f0c:	f04f 31ff 	movne.w	r1, #4294967295
 8001f10:	f04f 30ff 	movne.w	r0, #4294967295
 8001f14:	f000 b970 	b.w	80021f8 <__aeabi_idiv0>
 8001f18:	f1ad 0c08 	sub.w	ip, sp, #8
 8001f1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001f20:	f000 f806 	bl	8001f30 <__udivmoddi4>
 8001f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001f2c:	b004      	add	sp, #16
 8001f2e:	4770      	bx	lr

08001f30 <__udivmoddi4>:
 8001f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f34:	9e08      	ldr	r6, [sp, #32]
 8001f36:	460d      	mov	r5, r1
 8001f38:	4604      	mov	r4, r0
 8001f3a:	460f      	mov	r7, r1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d14a      	bne.n	8001fd6 <__udivmoddi4+0xa6>
 8001f40:	428a      	cmp	r2, r1
 8001f42:	4694      	mov	ip, r2
 8001f44:	d965      	bls.n	8002012 <__udivmoddi4+0xe2>
 8001f46:	fab2 f382 	clz	r3, r2
 8001f4a:	b143      	cbz	r3, 8001f5e <__udivmoddi4+0x2e>
 8001f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001f50:	f1c3 0220 	rsb	r2, r3, #32
 8001f54:	409f      	lsls	r7, r3
 8001f56:	fa20 f202 	lsr.w	r2, r0, r2
 8001f5a:	4317      	orrs	r7, r2
 8001f5c:	409c      	lsls	r4, r3
 8001f5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001f62:	fa1f f58c 	uxth.w	r5, ip
 8001f66:	fbb7 f1fe 	udiv	r1, r7, lr
 8001f6a:	0c22      	lsrs	r2, r4, #16
 8001f6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001f70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001f74:	fb01 f005 	mul.w	r0, r1, r5
 8001f78:	4290      	cmp	r0, r2
 8001f7a:	d90a      	bls.n	8001f92 <__udivmoddi4+0x62>
 8001f7c:	eb1c 0202 	adds.w	r2, ip, r2
 8001f80:	f101 37ff 	add.w	r7, r1, #4294967295
 8001f84:	f080 811c 	bcs.w	80021c0 <__udivmoddi4+0x290>
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	f240 8119 	bls.w	80021c0 <__udivmoddi4+0x290>
 8001f8e:	3902      	subs	r1, #2
 8001f90:	4462      	add	r2, ip
 8001f92:	1a12      	subs	r2, r2, r0
 8001f94:	b2a4      	uxth	r4, r4
 8001f96:	fbb2 f0fe 	udiv	r0, r2, lr
 8001f9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8001f9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001fa2:	fb00 f505 	mul.w	r5, r0, r5
 8001fa6:	42a5      	cmp	r5, r4
 8001fa8:	d90a      	bls.n	8001fc0 <__udivmoddi4+0x90>
 8001faa:	eb1c 0404 	adds.w	r4, ip, r4
 8001fae:	f100 32ff 	add.w	r2, r0, #4294967295
 8001fb2:	f080 8107 	bcs.w	80021c4 <__udivmoddi4+0x294>
 8001fb6:	42a5      	cmp	r5, r4
 8001fb8:	f240 8104 	bls.w	80021c4 <__udivmoddi4+0x294>
 8001fbc:	4464      	add	r4, ip
 8001fbe:	3802      	subs	r0, #2
 8001fc0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001fc4:	1b64      	subs	r4, r4, r5
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	b11e      	cbz	r6, 8001fd2 <__udivmoddi4+0xa2>
 8001fca:	40dc      	lsrs	r4, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e9c6 4300 	strd	r4, r3, [r6]
 8001fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd6:	428b      	cmp	r3, r1
 8001fd8:	d908      	bls.n	8001fec <__udivmoddi4+0xbc>
 8001fda:	2e00      	cmp	r6, #0
 8001fdc:	f000 80ed 	beq.w	80021ba <__udivmoddi4+0x28a>
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	e9c6 0500 	strd	r0, r5, [r6]
 8001fe6:	4608      	mov	r0, r1
 8001fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fec:	fab3 f183 	clz	r1, r3
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	d149      	bne.n	8002088 <__udivmoddi4+0x158>
 8001ff4:	42ab      	cmp	r3, r5
 8001ff6:	d302      	bcc.n	8001ffe <__udivmoddi4+0xce>
 8001ff8:	4282      	cmp	r2, r0
 8001ffa:	f200 80f8 	bhi.w	80021ee <__udivmoddi4+0x2be>
 8001ffe:	1a84      	subs	r4, r0, r2
 8002000:	eb65 0203 	sbc.w	r2, r5, r3
 8002004:	2001      	movs	r0, #1
 8002006:	4617      	mov	r7, r2
 8002008:	2e00      	cmp	r6, #0
 800200a:	d0e2      	beq.n	8001fd2 <__udivmoddi4+0xa2>
 800200c:	e9c6 4700 	strd	r4, r7, [r6]
 8002010:	e7df      	b.n	8001fd2 <__udivmoddi4+0xa2>
 8002012:	b902      	cbnz	r2, 8002016 <__udivmoddi4+0xe6>
 8002014:	deff      	udf	#255	; 0xff
 8002016:	fab2 f382 	clz	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 8090 	bne.w	8002140 <__udivmoddi4+0x210>
 8002020:	1a8a      	subs	r2, r1, r2
 8002022:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002026:	fa1f fe8c 	uxth.w	lr, ip
 800202a:	2101      	movs	r1, #1
 800202c:	fbb2 f5f7 	udiv	r5, r2, r7
 8002030:	fb07 2015 	mls	r0, r7, r5, r2
 8002034:	0c22      	lsrs	r2, r4, #16
 8002036:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800203a:	fb0e f005 	mul.w	r0, lr, r5
 800203e:	4290      	cmp	r0, r2
 8002040:	d908      	bls.n	8002054 <__udivmoddi4+0x124>
 8002042:	eb1c 0202 	adds.w	r2, ip, r2
 8002046:	f105 38ff 	add.w	r8, r5, #4294967295
 800204a:	d202      	bcs.n	8002052 <__udivmoddi4+0x122>
 800204c:	4290      	cmp	r0, r2
 800204e:	f200 80cb 	bhi.w	80021e8 <__udivmoddi4+0x2b8>
 8002052:	4645      	mov	r5, r8
 8002054:	1a12      	subs	r2, r2, r0
 8002056:	b2a4      	uxth	r4, r4
 8002058:	fbb2 f0f7 	udiv	r0, r2, r7
 800205c:	fb07 2210 	mls	r2, r7, r0, r2
 8002060:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002064:	fb0e fe00 	mul.w	lr, lr, r0
 8002068:	45a6      	cmp	lr, r4
 800206a:	d908      	bls.n	800207e <__udivmoddi4+0x14e>
 800206c:	eb1c 0404 	adds.w	r4, ip, r4
 8002070:	f100 32ff 	add.w	r2, r0, #4294967295
 8002074:	d202      	bcs.n	800207c <__udivmoddi4+0x14c>
 8002076:	45a6      	cmp	lr, r4
 8002078:	f200 80bb 	bhi.w	80021f2 <__udivmoddi4+0x2c2>
 800207c:	4610      	mov	r0, r2
 800207e:	eba4 040e 	sub.w	r4, r4, lr
 8002082:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002086:	e79f      	b.n	8001fc8 <__udivmoddi4+0x98>
 8002088:	f1c1 0720 	rsb	r7, r1, #32
 800208c:	408b      	lsls	r3, r1
 800208e:	fa22 fc07 	lsr.w	ip, r2, r7
 8002092:	ea4c 0c03 	orr.w	ip, ip, r3
 8002096:	fa05 f401 	lsl.w	r4, r5, r1
 800209a:	fa20 f307 	lsr.w	r3, r0, r7
 800209e:	40fd      	lsrs	r5, r7
 80020a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80020a4:	4323      	orrs	r3, r4
 80020a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80020aa:	fa1f fe8c 	uxth.w	lr, ip
 80020ae:	fb09 5518 	mls	r5, r9, r8, r5
 80020b2:	0c1c      	lsrs	r4, r3, #16
 80020b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80020b8:	fb08 f50e 	mul.w	r5, r8, lr
 80020bc:	42a5      	cmp	r5, r4
 80020be:	fa02 f201 	lsl.w	r2, r2, r1
 80020c2:	fa00 f001 	lsl.w	r0, r0, r1
 80020c6:	d90b      	bls.n	80020e0 <__udivmoddi4+0x1b0>
 80020c8:	eb1c 0404 	adds.w	r4, ip, r4
 80020cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80020d0:	f080 8088 	bcs.w	80021e4 <__udivmoddi4+0x2b4>
 80020d4:	42a5      	cmp	r5, r4
 80020d6:	f240 8085 	bls.w	80021e4 <__udivmoddi4+0x2b4>
 80020da:	f1a8 0802 	sub.w	r8, r8, #2
 80020de:	4464      	add	r4, ip
 80020e0:	1b64      	subs	r4, r4, r5
 80020e2:	b29d      	uxth	r5, r3
 80020e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80020e8:	fb09 4413 	mls	r4, r9, r3, r4
 80020ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80020f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80020f4:	45a6      	cmp	lr, r4
 80020f6:	d908      	bls.n	800210a <__udivmoddi4+0x1da>
 80020f8:	eb1c 0404 	adds.w	r4, ip, r4
 80020fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8002100:	d26c      	bcs.n	80021dc <__udivmoddi4+0x2ac>
 8002102:	45a6      	cmp	lr, r4
 8002104:	d96a      	bls.n	80021dc <__udivmoddi4+0x2ac>
 8002106:	3b02      	subs	r3, #2
 8002108:	4464      	add	r4, ip
 800210a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800210e:	fba3 9502 	umull	r9, r5, r3, r2
 8002112:	eba4 040e 	sub.w	r4, r4, lr
 8002116:	42ac      	cmp	r4, r5
 8002118:	46c8      	mov	r8, r9
 800211a:	46ae      	mov	lr, r5
 800211c:	d356      	bcc.n	80021cc <__udivmoddi4+0x29c>
 800211e:	d053      	beq.n	80021c8 <__udivmoddi4+0x298>
 8002120:	b156      	cbz	r6, 8002138 <__udivmoddi4+0x208>
 8002122:	ebb0 0208 	subs.w	r2, r0, r8
 8002126:	eb64 040e 	sbc.w	r4, r4, lr
 800212a:	fa04 f707 	lsl.w	r7, r4, r7
 800212e:	40ca      	lsrs	r2, r1
 8002130:	40cc      	lsrs	r4, r1
 8002132:	4317      	orrs	r7, r2
 8002134:	e9c6 7400 	strd	r7, r4, [r6]
 8002138:	4618      	mov	r0, r3
 800213a:	2100      	movs	r1, #0
 800213c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002140:	f1c3 0120 	rsb	r1, r3, #32
 8002144:	fa02 fc03 	lsl.w	ip, r2, r3
 8002148:	fa20 f201 	lsr.w	r2, r0, r1
 800214c:	fa25 f101 	lsr.w	r1, r5, r1
 8002150:	409d      	lsls	r5, r3
 8002152:	432a      	orrs	r2, r5
 8002154:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002158:	fa1f fe8c 	uxth.w	lr, ip
 800215c:	fbb1 f0f7 	udiv	r0, r1, r7
 8002160:	fb07 1510 	mls	r5, r7, r0, r1
 8002164:	0c11      	lsrs	r1, r2, #16
 8002166:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800216a:	fb00 f50e 	mul.w	r5, r0, lr
 800216e:	428d      	cmp	r5, r1
 8002170:	fa04 f403 	lsl.w	r4, r4, r3
 8002174:	d908      	bls.n	8002188 <__udivmoddi4+0x258>
 8002176:	eb1c 0101 	adds.w	r1, ip, r1
 800217a:	f100 38ff 	add.w	r8, r0, #4294967295
 800217e:	d22f      	bcs.n	80021e0 <__udivmoddi4+0x2b0>
 8002180:	428d      	cmp	r5, r1
 8002182:	d92d      	bls.n	80021e0 <__udivmoddi4+0x2b0>
 8002184:	3802      	subs	r0, #2
 8002186:	4461      	add	r1, ip
 8002188:	1b49      	subs	r1, r1, r5
 800218a:	b292      	uxth	r2, r2
 800218c:	fbb1 f5f7 	udiv	r5, r1, r7
 8002190:	fb07 1115 	mls	r1, r7, r5, r1
 8002194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002198:	fb05 f10e 	mul.w	r1, r5, lr
 800219c:	4291      	cmp	r1, r2
 800219e:	d908      	bls.n	80021b2 <__udivmoddi4+0x282>
 80021a0:	eb1c 0202 	adds.w	r2, ip, r2
 80021a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80021a8:	d216      	bcs.n	80021d8 <__udivmoddi4+0x2a8>
 80021aa:	4291      	cmp	r1, r2
 80021ac:	d914      	bls.n	80021d8 <__udivmoddi4+0x2a8>
 80021ae:	3d02      	subs	r5, #2
 80021b0:	4462      	add	r2, ip
 80021b2:	1a52      	subs	r2, r2, r1
 80021b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80021b8:	e738      	b.n	800202c <__udivmoddi4+0xfc>
 80021ba:	4631      	mov	r1, r6
 80021bc:	4630      	mov	r0, r6
 80021be:	e708      	b.n	8001fd2 <__udivmoddi4+0xa2>
 80021c0:	4639      	mov	r1, r7
 80021c2:	e6e6      	b.n	8001f92 <__udivmoddi4+0x62>
 80021c4:	4610      	mov	r0, r2
 80021c6:	e6fb      	b.n	8001fc0 <__udivmoddi4+0x90>
 80021c8:	4548      	cmp	r0, r9
 80021ca:	d2a9      	bcs.n	8002120 <__udivmoddi4+0x1f0>
 80021cc:	ebb9 0802 	subs.w	r8, r9, r2
 80021d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80021d4:	3b01      	subs	r3, #1
 80021d6:	e7a3      	b.n	8002120 <__udivmoddi4+0x1f0>
 80021d8:	4645      	mov	r5, r8
 80021da:	e7ea      	b.n	80021b2 <__udivmoddi4+0x282>
 80021dc:	462b      	mov	r3, r5
 80021de:	e794      	b.n	800210a <__udivmoddi4+0x1da>
 80021e0:	4640      	mov	r0, r8
 80021e2:	e7d1      	b.n	8002188 <__udivmoddi4+0x258>
 80021e4:	46d0      	mov	r8, sl
 80021e6:	e77b      	b.n	80020e0 <__udivmoddi4+0x1b0>
 80021e8:	3d02      	subs	r5, #2
 80021ea:	4462      	add	r2, ip
 80021ec:	e732      	b.n	8002054 <__udivmoddi4+0x124>
 80021ee:	4608      	mov	r0, r1
 80021f0:	e70a      	b.n	8002008 <__udivmoddi4+0xd8>
 80021f2:	4464      	add	r4, ip
 80021f4:	3802      	subs	r0, #2
 80021f6:	e742      	b.n	800207e <__udivmoddi4+0x14e>

080021f8 <__aeabi_idiv0>:
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <telnet_client_init>:
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
	tpcb = tcp_new();
 8002202:	f010 ff49 	bl	8013098 <tcp_new>
 8002206:	6078      	str	r0, [r7, #4]
		IP_ADDR4(&destIPADDR, LDC_ADDR1, LDC_ADDR2, LDC_ADDR3, LDC_ADDR4);
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <telnet_client_init+0x28>)
 800220a:	603b      	str	r3, [r7, #0]
			tcp_connect(tpcb, &destIPADDR, LDC_PORT, telnet_client_connected);
 800220c:	4639      	mov	r1, r7
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <telnet_client_init+0x2c>)
 8002210:	f242 22b6 	movw	r2, #8886	; 0x22b6
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f010 f803 	bl	8012220 <tcp_connect>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	0b01a8c0 	.word	0x0b01a8c0
 8002228:	000001a5 	.word	0x000001a5

0800222c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8002234:	1d39      	adds	r1, r7, #4
 8002236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223a:	2201      	movs	r2, #1
 800223c:	4803      	ldr	r0, [pc, #12]	; (800224c <__io_putchar+0x20>)
 800223e:	f00b fea1 	bl	800df84 <HAL_UART_Transmit>
	return ch;
 8002242:	687b      	ldr	r3, [r7, #4]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000660 	.word	0x20000660

08002250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8002256:	4ab4      	ldr	r2, [pc, #720]	; (8002528 <main+0x2d8>)
 8002258:	4bb4      	ldr	r3, [pc, #720]	; (800252c <main+0x2dc>)
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	461a      	mov	r2, r3
 800225e:	49b4      	ldr	r1, [pc, #720]	; (8002530 <main+0x2e0>)
 8002260:	48b2      	ldr	r0, [pc, #712]	; (800252c <main+0x2dc>)
 8002262:	f019 f946 	bl	801b4f2 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002266:	4bb3      	ldr	r3, [pc, #716]	; (8002534 <main+0x2e4>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11b      	bne.n	80022aa <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002272:	f3bf 8f4f 	dsb	sy
}
 8002276:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002278:	f3bf 8f6f 	isb	sy
}
 800227c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800227e:	4bad      	ldr	r3, [pc, #692]	; (8002534 <main+0x2e4>)
 8002280:	2200      	movs	r2, #0
 8002282:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002286:	f3bf 8f4f 	dsb	sy
}
 800228a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800228c:	f3bf 8f6f 	isb	sy
}
 8002290:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002292:	4ba8      	ldr	r3, [pc, #672]	; (8002534 <main+0x2e4>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4aa7      	ldr	r2, [pc, #668]	; (8002534 <main+0x2e4>)
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800229e:	f3bf 8f4f 	dsb	sy
}
 80022a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022a4:	f3bf 8f6f 	isb	sy
}
 80022a8:	e000      	b.n	80022ac <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80022aa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80022ac:	4ba1      	ldr	r3, [pc, #644]	; (8002534 <main+0x2e4>)
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d138      	bne.n	800232a <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80022b8:	4b9e      	ldr	r3, [pc, #632]	; (8002534 <main+0x2e4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80022c0:	f3bf 8f4f 	dsb	sy
}
 80022c4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80022c6:	4b9b      	ldr	r3, [pc, #620]	; (8002534 <main+0x2e4>)
 80022c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022cc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	0b5b      	lsrs	r3, r3, #13
 80022d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022d6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80022ea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022f0:	4990      	ldr	r1, [pc, #576]	; (8002534 <main+0x2e4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1ef      	bne.n	80022e2 <main+0x92>
    } while(sets-- != 0U);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	60ba      	str	r2, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e5      	bne.n	80022d8 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 800230c:	f3bf 8f4f 	dsb	sy
}
 8002310:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <main+0x2e4>)
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4a87      	ldr	r2, [pc, #540]	; (8002534 <main+0x2e4>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800231e:	f3bf 8f4f 	dsb	sy
}
 8002322:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002324:	f3bf 8f6f 	isb	sy
}
 8002328:	e000      	b.n	800232c <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800232a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800232c:	f001 fe7c 	bl	8004028 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002330:	f000 ff70 	bl	8003214 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002334:	f000 f938 	bl	80025a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002338:	f000 fde4 	bl	8002f04 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800233c:	f000 fbd8 	bl	8002af0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8002340:	f000 fa52 	bl	80027e8 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8002344:	f000 fd90 	bl	8002e68 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002348:	f000 fca2 	bl	8002c90 <MX_TIM3_Init>
  MX_TIM1_Init();
 800234c:	f000 fbfe 	bl	8002b4c <MX_TIM1_Init>
  MX_HRTIM_Init();
 8002350:	f000 fa7c 	bl	800284c <MX_HRTIM_Init>
  MX_ADC3_Init();
 8002354:	f000 f9e6 	bl	8002724 <MX_ADC3_Init>
  MX_LWIP_Init();
 8002358:	f00c ff28 	bl	800f1ac <MX_LWIP_Init>
  MX_TIM2_Init();
 800235c:	f000 fc4a 	bl	8002bf4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002360:	f000 fd34 	bl	8002dcc <MX_TIM5_Init>
  MX_TIM4_Init();
 8002364:	f000 fce2 	bl	8002d2c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8002368:	4873      	ldr	r0, [pc, #460]	; (8002538 <main+0x2e8>)
 800236a:	f018 fee1 	bl	801b130 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800236e:	4973      	ldr	r1, [pc, #460]	; (800253c <main+0x2ec>)
 8002370:	4873      	ldr	r0, [pc, #460]	; (8002540 <main+0x2f0>)
 8002372:	f018 fedd 	bl	801b130 <iprintf>

	#ifndef SYNTH_ENABLE
	printf("WARNING - MW Synthesiser is disabled\r\n");
 8002376:	4873      	ldr	r0, [pc, #460]	; (8002544 <main+0x2f4>)
 8002378:	f018 ff40 	bl	801b1fc <puts>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800237c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002380:	4871      	ldr	r0, [pc, #452]	; (8002548 <main+0x2f8>)
 8002382:	f007 f99b 	bl	80096bc <HAL_LPTIM_Counter_Start_IT>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <main+0x146>
		printf("Failed to start slow flashing LED!\r\n");
 800238c:	486f      	ldr	r0, [pc, #444]	; (800254c <main+0x2fc>)
 800238e:	f018 ff35 	bl	801b1fc <puts>
		Error_Handler();
 8002392:	f000 ff91 	bl	80032b8 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8002396:	2100      	movs	r1, #0
 8002398:	486d      	ldr	r0, [pc, #436]	; (8002550 <main+0x300>)
 800239a:	f003 fe45 	bl	8006028 <HAL_DAC_Start>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <main+0x15e>
		printf("Failure to initialise DAC \r\n");
 80023a4:	486b      	ldr	r0, [pc, #428]	; (8002554 <main+0x304>)
 80023a6:	f018 ff29 	bl	801b1fc <puts>
		Error_Handler();
 80023aa:	f000 ff85 	bl	80032b8 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 80023ae:	486a      	ldr	r0, [pc, #424]	; (8002558 <main+0x308>)
 80023b0:	f018 ff24 	bl	801b1fc <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 80023b4:	f240 43d9 	movw	r3, #1241	; 0x4d9
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	4864      	ldr	r0, [pc, #400]	; (8002550 <main+0x300>)
 80023be:	f003 fe85 	bl	80060cc <HAL_DAC_SetValue>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d004      	beq.n	80023d2 <main+0x182>
			printf("DAC setup failed!\r\n");
 80023c8:	4864      	ldr	r0, [pc, #400]	; (800255c <main+0x30c>)
 80023ca:	f018 ff17 	bl	801b1fc <puts>
		Error_Handler();
 80023ce:	f000 ff73 	bl	80032b8 <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023d8:	4861      	ldr	r0, [pc, #388]	; (8002560 <main+0x310>)
 80023da:	f005 fd63 	bl	8007ea4 <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 80023de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023e2:	2100      	movs	r1, #0
 80023e4:	485f      	ldr	r0, [pc, #380]	; (8002564 <main+0x314>)
 80023e6:	f003 fbdb 	bl	8005ba0 <HAL_ADCEx_Calibration_Start>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <main+0x1aa>
		printf("ADC calibration failure \r\n");
 80023f0:	485d      	ldr	r0, [pc, #372]	; (8002568 <main+0x318>)
 80023f2:	f018 ff03 	bl	801b1fc <puts>
		Error_Handler();
 80023f6:	f000 ff5f 	bl	80032b8 <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80023fa:	485a      	ldr	r0, [pc, #360]	; (8002564 <main+0x314>)
 80023fc:	f002 fabe 	bl	800497c <HAL_ADC_Start_IT>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <main+0x1c0>
		printf("Failed to start ADC with interrupt capability \r\n");
 8002406:	4859      	ldr	r0, [pc, #356]	; (800256c <main+0x31c>)
 8002408:	f018 fef8 	bl	801b1fc <puts>
	                Error_Handler();
 800240c:	f000 ff54 	bl	80032b8 <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 8002410:	4857      	ldr	r0, [pc, #348]	; (8002570 <main+0x320>)
 8002412:	f018 fef3 	bl	801b1fc <puts>
	/* Calculate the MW sweep settings
	 * Notes:
	 * Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Calculate sweep settings after first POP calibration routine
	 */
	start_timer(SWEEP_TIMER); //reset SWEEP_TIMER and start counting
 8002416:	4b57      	ldr	r3, [pc, #348]	; (8002574 <main+0x324>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f01a fe38 	bl	801d090 <__start_timer_veneer>
	start_POP_calibration(true);
 8002420:	2001      	movs	r0, #1
 8002422:	f01a fe49 	bl	801d0b8 <__start_POP_calibration_veneer>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 8002426:	e001      	b.n	800242c <main+0x1dc>
		MW_update();
 8002428:	f01a fe36 	bl	801d098 <__MW_update_veneer>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 800242c:	4b52      	ldr	r3, [pc, #328]	; (8002578 <main+0x328>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d108      	bne.n	8002446 <main+0x1f6>
 8002434:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <main+0x324>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f01a fe31 	bl	801d0a0 <__check_timer_veneer>
 800243e:	4603      	mov	r3, r0
 8002440:	4a4e      	ldr	r2, [pc, #312]	; (800257c <main+0x32c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d9f0      	bls.n	8002428 <main+0x1d8>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
 8002446:	4b4b      	ldr	r3, [pc, #300]	; (8002574 <main+0x324>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f01a fe30 	bl	801d0b0 <__stop_timer_veneer>
	if (!POP_period_us) {//if the calibration loop timed out
 8002450:	4b49      	ldr	r3, [pc, #292]	; (8002578 <main+0x328>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <main+0x20e>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
 8002458:	4849      	ldr	r0, [pc, #292]	; (8002580 <main+0x330>)
 800245a:	f018 fecf 	bl	801b1fc <puts>
	}

//	initiate_MW_calibration_sweep(POP_period);
//	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
//	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10, 3600, ADD_SCOPE_SYNC_TIME); //10Hz sweep, 1hr
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 800245e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002508 <main+0x2b8>
 8002462:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8002510 <main+0x2c0>
 8002466:	ee36 7b07 	vadd.f64	d7, d6, d7
 800246a:	2000      	movs	r0, #0
 800246c:	ed9f 2b2a 	vldr	d2, [pc, #168]	; 8002518 <main+0x2c8>
 8002470:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002520 <main+0x2d0>
 8002474:	eeb0 0b47 	vmov.f64	d0, d7
 8002478:	f01a fe16 	bl	801d0a8 <__calc_fixed_time_MW_sweep_veneer>
//	last_pin_status = pin_status;

//	timer_delay(MW_TIMER, 7000);
//	timer_delay(MW_TIMER, 50000);

	telnet_client_init(); //initialise telnet client
 800247c:	f7ff febe 	bl	80021fc <telnet_client_init>
	printf("Telnet client initialised\r\n");
 8002480:	4840      	ldr	r0, [pc, #256]	; (8002584 <main+0x334>)
 8002482:	f018 febb 	bl	801b1fc <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Entering main while loop\r\n");
 8002486:	4840      	ldr	r0, [pc, #256]	; (8002588 <main+0x338>)
 8002488:	f018 feb8 	bl	801b1fc <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800248c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002490:	483e      	ldr	r0, [pc, #248]	; (800258c <main+0x33c>)
 8002492:	f005 fcef 	bl	8007e74 <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <main+0x340>)
 80024a4:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <main+0x340>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <main+0x2a2>
			printf("Blue button pressed....\r\n");
 80024b0:	4838      	ldr	r0, [pc, #224]	; (8002594 <main+0x344>)
 80024b2:	f018 fea3 	bl	801b1fc <puts>
			printf("Initialising comms with LDC501\r\n");
 80024b6:	4838      	ldr	r0, [pc, #224]	; (8002598 <main+0x348>)
 80024b8:	f018 fea0 	bl	801b1fc <puts>
			init_ldc_comms();
 80024bc:	f01a fddc 	bl	801d078 <__init_ldc_comms_veneer>
//			} else {
//				printf("Initiating sweep.\r\n");
//				mw_sweep_started = true;
//				start_continuous_MW_sweep();
//			}
			while(blue_button_status) {//remain here polling button until it is released
 80024c0:	e012      	b.n	80024e8 <main+0x298>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 80024c2:	4b36      	ldr	r3, [pc, #216]	; (800259c <main+0x34c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2164      	movs	r1, #100	; 0x64
 80024c8:	4618      	mov	r0, r3
 80024ca:	f01a fdd9 	bl	801d080 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80024ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d2:	482e      	ldr	r0, [pc, #184]	; (800258c <main+0x33c>)
 80024d4:	f005 fcce 	bl	8007e74 <HAL_GPIO_ReadPin>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <main+0x340>)
 80024e6:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 80024e8:	4b29      	ldr	r3, [pc, #164]	; (8002590 <main+0x340>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e7      	bne.n	80024c2 <main+0x272>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <main+0x350>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 80024f6:	f01a fdcf 	bl	801d098 <__MW_update_veneer>

	    /* Ethernet handling */
		ethernetif_input(&gnetif);
 80024fa:	482a      	ldr	r0, [pc, #168]	; (80025a4 <main+0x354>)
 80024fc:	f00d f8c4 	bl	800f688 <ethernetif_input>
		sys_check_timeouts();
 8002500:	f015 fb64 	bl	8017bcc <sys_check_timeouts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002504:	e7c2      	b.n	800248c <main+0x23c>
 8002506:	bf00      	nop
 8002508:	6d600000 	.word	0x6d600000
 800250c:	41e69e35 	.word	0x41e69e35
 8002510:	00000000 	.word	0x00000000
 8002514:	408f4000 	.word	0x408f4000
 8002518:	00000000 	.word	0x00000000
 800251c:	40490000 	.word	0x40490000
 8002520:	00000000 	.word	0x00000000
 8002524:	40c38800 	.word	0x40c38800
 8002528:	00001b78 	.word	0x00001b78
 800252c:	00000000 	.word	0x00000000
 8002530:	08000298 	.word	0x08000298
 8002534:	e000ed00 	.word	0xe000ed00
 8002538:	0801d2cc 	.word	0x0801d2cc
 800253c:	0801d2d0 	.word	0x0801d2d0
 8002540:	0801d2ec 	.word	0x0801d2ec
 8002544:	0801d318 	.word	0x0801d318
 8002548:	200004ac 	.word	0x200004ac
 800254c:	0801d340 	.word	0x0801d340
 8002550:	200003bc 	.word	0x200003bc
 8002554:	0801d364 	.word	0x0801d364
 8002558:	0801d380 	.word	0x0801d380
 800255c:	0801d3a0 	.word	0x0801d3a0
 8002560:	58020400 	.word	0x58020400
 8002564:	20000358 	.word	0x20000358
 8002568:	0801d3b4 	.word	0x0801d3b4
 800256c:	0801d3d0 	.word	0x0801d3d0
 8002570:	0801d400 	.word	0x0801d400
 8002574:	20000120 	.word	0x20000120
 8002578:	200006f8 	.word	0x200006f8
 800257c:	002dc6bf 	.word	0x002dc6bf
 8002580:	0801d440 	.word	0x0801d440
 8002584:	0801d484 	.word	0x0801d484
 8002588:	0801d4a0 	.word	0x0801d4a0
 800258c:	58020800 	.word	0x58020800
 8002590:	200006f5 	.word	0x200006f5
 8002594:	0801d4bc 	.word	0x0801d4bc
 8002598:	0801d4d8 	.word	0x0801d4d8
 800259c:	20000118 	.word	0x20000118
 80025a0:	200006f4 	.word	0x200006f4
 80025a4:	20000764 	.word	0x20000764

080025a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0a4      	sub	sp, #144	; 0x90
 80025ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025b2:	224c      	movs	r2, #76	; 0x4c
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f018 ff10 	bl	801b3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	2220      	movs	r2, #32
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f018 ff09 	bl	801b3dc <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80025dc:	2002      	movs	r0, #2
 80025de:	f007 fbcb 	bl	8009d78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	4b4c      	ldr	r3, [pc, #304]	; (8002718 <SystemClock_Config+0x170>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	4a4b      	ldr	r2, [pc, #300]	; (8002718 <SystemClock_Config+0x170>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80025f2:	4b49      	ldr	r3, [pc, #292]	; (8002718 <SystemClock_Config+0x170>)
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <SystemClock_Config+0x174>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a46      	ldr	r2, [pc, #280]	; (800271c <SystemClock_Config+0x174>)
 8002602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b44      	ldr	r3, [pc, #272]	; (800271c <SystemClock_Config+0x174>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002614:	bf00      	nop
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <SystemClock_Config+0x174>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002622:	d1f8      	bne.n	8002616 <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002624:	f007 fb98 	bl	8009d58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002628:	f001 fdb4 	bl	8004194 <HAL_GetREVID>
 800262c:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <SystemClock_Config+0x178>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	4a3b      	ldr	r2, [pc, #236]	; (8002720 <SystemClock_Config+0x178>)
 8002632:	f023 0318 	bic.w	r3, r3, #24
 8002636:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8002638:	2325      	movs	r3, #37	; 0x25
 800263a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800263c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002642:	2301      	movs	r3, #1
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002646:	2301      	movs	r3, #1
 8002648:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800264a:	2302      	movs	r3, #2
 800264c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800264e:	2302      	movs	r3, #2
 8002650:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002656:	2350      	movs	r3, #80	; 0x50
 8002658:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800265a:	2302      	movs	r3, #2
 800265c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800265e:	2304      	movs	r3, #4
 8002660:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002668:	230c      	movs	r3, #12
 800266a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800267a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800267e:	4618      	mov	r0, r3
 8002680:	f007 fbb4 	bl	8009dec <HAL_RCC_OscConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800268a:	f000 fe15 	bl	80032b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268e:	233f      	movs	r3, #63	; 0x3f
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002692:	2303      	movs	r3, #3
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800269a:	2309      	movs	r3, #9
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80026a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b4:	2101      	movs	r1, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	f007 fff2 	bl	800a6a0 <HAL_RCC_ClockConfig>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80026c2:	f000 fdf9 	bl	80032b8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80026c6:	f008 f9a1 	bl	800aa0c <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <SystemClock_Config+0x178>)
 80026cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80026d0:	4a13      	ldr	r2, [pc, #76]	; (8002720 <SystemClock_Config+0x178>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <SystemClock_Config+0x178>)
 80026dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80026ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026f0:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80026f6:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80026fa:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80026fc:	2322      	movs	r3, #34	; 0x22
 80026fe:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002700:	2320      	movs	r3, #32
 8002702:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	4618      	mov	r0, r3
 800270a:	f00a ff1b 	bl	800d544 <HAL_RCCEx_CRSConfig>
}
 800270e:	bf00      	nop
 8002710:	3790      	adds	r7, #144	; 0x90
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	58000400 	.word	0x58000400
 800271c:	58024800 	.word	0x58024800
 8002720:	58024400 	.word	0x58024400

08002724 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
 8002738:	615a      	str	r2, [r3, #20]
 800273a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <MX_ADC3_Init+0xbc>)
 800273e:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <MX_ADC3_Init+0xc0>)
 8002740:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <MX_ADC3_Init+0xbc>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002750:	2204      	movs	r2, #4
 8002752:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002756:	2200      	movs	r2, #0
 8002758:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800275a:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <MX_ADC3_Init+0xbc>)
 800275c:	2200      	movs	r2, #0
 800275e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002762:	2201      	movs	r2, #1
 8002764:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <MX_ADC3_Init+0xbc>)
 800276e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_ADC3_Init+0xbc>)
 800277e:	2200      	movs	r2, #0
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <MX_ADC3_Init+0xbc>)
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002796:	4812      	ldr	r0, [pc, #72]	; (80027e0 <MX_ADC3_Init+0xbc>)
 8002798:	f001 ff4e 	bl	8004638 <HAL_ADC_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 80027a2:	f000 fd89 	bl	80032b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027a6:	2301      	movs	r3, #1
 80027a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027aa:	2306      	movs	r3, #6
 80027ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80027b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80027b8:	2304      	movs	r3, #4
 80027ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_ADC3_Init+0xbc>)
 80027ca:	f002 fc71 	bl	80050b0 <HAL_ADC_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80027d4:	f000 fd70 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000358 	.word	0x20000358
 80027e4:	58026000 	.word	0x58026000

080027e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	2224      	movs	r2, #36	; 0x24
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f018 fdf1 	bl	801b3dc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_DAC1_Init+0x5c>)
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <MX_DAC1_Init+0x60>)
 80027fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002800:	4810      	ldr	r0, [pc, #64]	; (8002844 <MX_DAC1_Init+0x5c>)
 8002802:	f003 fbef 	bl	8005fe4 <HAL_DAC_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800280c:	f000 fd54 	bl	80032b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800281c:	2301      	movs	r3, #1
 800281e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	4619      	mov	r1, r3
 800282a:	4806      	ldr	r0, [pc, #24]	; (8002844 <MX_DAC1_Init+0x5c>)
 800282c:	f003 fc74 	bl	8006118 <HAL_DAC_ConfigChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002836:	f000 fd3f 	bl	80032b8 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	3728      	adds	r7, #40	; 0x28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200003bc 	.word	0x200003bc
 8002848:	40007400 	.word	0x40007400

0800284c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0a4      	sub	sp, #144	; 0x90
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002852:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002864:	2254      	movs	r2, #84	; 0x54
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f018 fdb7 	bl	801b3dc <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800286e:	f107 0320 	add.w	r3, r7, #32
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800287a:	463b      	mov	r3, r7
 800287c:	2220      	movs	r2, #32
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f018 fdab 	bl	801b3dc <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8002886:	4b98      	ldr	r3, [pc, #608]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002888:	4a98      	ldr	r2, [pc, #608]	; (8002aec <MX_HRTIM_Init+0x2a0>)
 800288a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800288c:	4b96      	ldr	r3, [pc, #600]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 800288e:	2200      	movs	r2, #0
 8002890:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002892:	4b95      	ldr	r3, [pc, #596]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8002898:	4893      	ldr	r0, [pc, #588]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 800289a:	f005 fb5b 	bl	8007f54 <HAL_HRTIM_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 80028a4:	f000 fd08 	bl	80032b8 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80028a8:	f24c 2318 	movw	r3, #49688	; 0xc218
 80028ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80028b6:	2307      	movs	r3, #7
 80028b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80028bc:	2308      	movs	r3, #8
 80028be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80028c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028c6:	461a      	mov	r2, r3
 80028c8:	2100      	movs	r1, #0
 80028ca:	4887      	ldr	r0, [pc, #540]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 80028cc:	f005 fc12 	bl	80080f4 <HAL_HRTIM_TimeBaseConfig>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80028d6:	f000 fcef 	bl	80032b8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80028da:	2314      	movs	r3, #20
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80028de:	2300      	movs	r3, #0
 80028e0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80028e2:	2300      	movs	r3, #0
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80028e6:	2300      	movs	r3, #0
 80028e8:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80028ee:	2300      	movs	r3, #0
 80028f0:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80028f2:	2300      	movs	r3, #0
 80028f4:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80028f6:	2300      	movs	r3, #0
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80028fe:	2300      	movs	r3, #0
 8002900:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002902:	2300      	movs	r3, #0
 8002904:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002906:	2300      	movs	r3, #0
 8002908:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800290a:	2300      	movs	r3, #0
 800290c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800290e:	2300      	movs	r3, #0
 8002910:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002912:	2300      	movs	r3, #0
 8002914:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002916:	2300      	movs	r3, #0
 8002918:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800291a:	2300      	movs	r3, #0
 800291c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800291e:	2300      	movs	r3, #0
 8002920:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002922:	2300      	movs	r3, #0
 8002924:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002926:	2300      	movs	r3, #0
 8002928:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800292a:	2300      	movs	r3, #0
 800292c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800292e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002932:	461a      	mov	r2, r3
 8002934:	2100      	movs	r1, #0
 8002936:	486c      	ldr	r0, [pc, #432]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002938:	f005 fc04 	bl	8008144 <HAL_HRTIM_WaveformTimerConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8002942:	f000 fcb9 	bl	80032b8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8002946:	2306      	movs	r3, #6
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800294a:	2300      	movs	r3, #0
 800294c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800294e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002952:	461a      	mov	r2, r3
 8002954:	2104      	movs	r1, #4
 8002956:	4864      	ldr	r0, [pc, #400]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002958:	f005 fbf4 	bl	8008144 <HAL_HRTIM_WaveformTimerConfig>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8002962:	f000 fca9 	bl	80032b8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8002966:	f240 631b 	movw	r3, #1563	; 0x61b
 800296a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800296c:	f107 0320 	add.w	r3, r7, #32
 8002970:	2201      	movs	r2, #1
 8002972:	2100      	movs	r1, #0
 8002974:	485c      	ldr	r0, [pc, #368]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002976:	f005 fc57 	bl	8008228 <HAL_HRTIM_WaveformCompareConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8002980:	f000 fc9a 	bl	80032b8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002984:	f244 5395 	movw	r3, #17813	; 0x4595
 8002988:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002992:	f107 0320 	add.w	r3, r7, #32
 8002996:	2202      	movs	r2, #2
 8002998:	2100      	movs	r1, #0
 800299a:	4853      	ldr	r0, [pc, #332]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 800299c:	f005 fc44 	bl	8008228 <HAL_HRTIM_WaveformCompareConfig>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 80029a6:	f000 fc87 	bl	80032b8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80029aa:	f640 536e 	movw	r3, #3438	; 0xd6e
 80029ae:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80029b0:	f107 0320 	add.w	r3, r7, #32
 80029b4:	2202      	movs	r2, #2
 80029b6:	2104      	movs	r1, #4
 80029b8:	484b      	ldr	r0, [pc, #300]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 80029ba:	f005 fc35 	bl	8008228 <HAL_HRTIM_WaveformCompareConfig>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80029c4:	f000 fc78 	bl	80032b8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80029c8:	f644 0306 	movw	r3, #18438	; 0x4806
 80029cc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80029ce:	f107 0320 	add.w	r3, r7, #32
 80029d2:	2204      	movs	r2, #4
 80029d4:	2100      	movs	r1, #0
 80029d6:	4844      	ldr	r0, [pc, #272]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 80029d8:	f005 fc26 	bl	8008228 <HAL_HRTIM_WaveformCompareConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80029e2:	f000 fc69 	bl	80032b8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80029e6:	f244 435d 	movw	r3, #17501	; 0x445d
 80029ea:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80029ec:	f107 0320 	add.w	r3, r7, #32
 80029f0:	2208      	movs	r2, #8
 80029f2:	2104      	movs	r1, #4
 80029f4:	483c      	ldr	r0, [pc, #240]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 80029f6:	f005 fc17 	bl	8008228 <HAL_HRTIM_WaveformCompareConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002a00:	f000 fc5a 	bl	80032b8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002a04:	2302      	movs	r3, #2
 8002a06:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002a08:	2328      	movs	r3, #40	; 0x28
 8002a0a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002a0c:	2314      	movs	r3, #20
 8002a0e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002a14:	2308      	movs	r3, #8
 8002a16:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002a24:	463b      	mov	r3, r7
 8002a26:	2201      	movs	r2, #1
 8002a28:	2100      	movs	r1, #0
 8002a2a:	482f      	ldr	r0, [pc, #188]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002a2c:	f005 fd6a 	bl	8008504 <HAL_HRTIM_WaveformOutputConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8002a36:	f000 fc3f 	bl	80032b8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002a3e:	2350      	movs	r3, #80	; 0x50
 8002a40:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002a46:	463b      	mov	r3, r7
 8002a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	4826      	ldr	r0, [pc, #152]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002a50:	f005 fd58 	bl	8008504 <HAL_HRTIM_WaveformOutputConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8002a5a:	f000 fc2d 	bl	80032b8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002a62:	2320      	movs	r3, #32
 8002a64:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002a66:	2310      	movs	r3, #16
 8002a68:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002a6e:	463b      	mov	r3, r7
 8002a70:	2202      	movs	r2, #2
 8002a72:	2100      	movs	r1, #0
 8002a74:	481c      	ldr	r0, [pc, #112]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002a76:	f005 fd45 	bl	8008504 <HAL_HRTIM_WaveformOutputConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002a80:	f000 fc1a 	bl	80032b8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002a84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	4816      	ldr	r0, [pc, #88]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002a8e:	f005 fb31 	bl	80080f4 <HAL_HRTIM_TimeBaseConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8002a98:	f000 fc0e 	bl	80032b8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8002a9c:	f240 7353 	movw	r3, #1875	; 0x753
 8002aa0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002aa2:	f107 0320 	add.w	r3, r7, #32
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	480f      	ldr	r0, [pc, #60]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002aac:	f005 fbbc 	bl	8008228 <HAL_HRTIM_WaveformCompareConfig>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8002ab6:	f000 fbff 	bl	80032b8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002aba:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002abe:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002ac0:	f107 0320 	add.w	r3, r7, #32
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	4807      	ldr	r0, [pc, #28]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002aca:	f005 fbad 	bl	8008228 <HAL_HRTIM_WaveformCompareConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8002ad4:	f000 fbf0 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002ad8:	4803      	ldr	r0, [pc, #12]	; (8002ae8 <MX_HRTIM_Init+0x29c>)
 8002ada:	f000 fd2f 	bl	800353c <HAL_HRTIM_MspPostInit>

}
 8002ade:	bf00      	nop
 8002ae0:	3790      	adds	r7, #144	; 0x90
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200003d0 	.word	0x200003d0
 8002aec:	40017400 	.word	0x40017400

08002af0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002af6:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <MX_LPTIM1_Init+0x58>)
 8002af8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002b02:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002b06:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_LPTIM1_Init+0x54>)
 8002b30:	f006 fd14 	bl	800955c <HAL_LPTIM_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8002b3a:	f000 fbbd 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200004ac 	.word	0x200004ac
 8002b48:	40002400 	.word	0x40002400

08002b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002b6c:	4a20      	ldr	r2, [pc, #128]	; (8002bf0 <MX_TIM1_Init+0xa4>)
 8002b6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002b70:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002b72:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002b76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b98:	4814      	ldr	r0, [pc, #80]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002b9a:	f00a fe8d 	bl	800d8b8 <HAL_TIM_Base_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002ba4:	f000 fb88 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002bb6:	f00a fed7 	bl	800d968 <HAL_TIM_ConfigClockSource>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002bc0:	f000 fb7a 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4805      	ldr	r0, [pc, #20]	; (8002bec <MX_TIM1_Init+0xa0>)
 8002bd6:	f00b f8f7 	bl	800ddc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002be0:	f000 fb6a 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	200004e4 	.word	0x200004e4
 8002bf0:	40010000 	.word	0x40010000

08002bf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfa:	f107 0310 	add.w	r3, r7, #16
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c12:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c1c:	227c      	movs	r2, #124	; 0x7c
 8002c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c3a:	4814      	ldr	r0, [pc, #80]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c3c:	f00a fe3c 	bl	800d8b8 <HAL_TIM_Base_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002c46:	f000 fb37 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4619      	mov	r1, r3
 8002c56:	480d      	ldr	r0, [pc, #52]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c58:	f00a fe86 	bl	800d968 <HAL_TIM_ConfigClockSource>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002c62:	f000 fb29 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4806      	ldr	r0, [pc, #24]	; (8002c8c <MX_TIM2_Init+0x98>)
 8002c74:	f00b f8a8 	bl	800ddc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c7e:	f000 fb1b 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000530 	.word	0x20000530

08002c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <MX_TIM3_Init+0x98>)
 8002cb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002cb6:	227c      	movs	r2, #124	; 0x7c
 8002cb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc8:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cd4:	4813      	ldr	r0, [pc, #76]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002cd6:	f00a fdef 	bl	800d8b8 <HAL_TIM_Base_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ce0:	f000 faea 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480c      	ldr	r0, [pc, #48]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002cf2:	f00a fe39 	bl	800d968 <HAL_TIM_ConfigClockSource>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002cfc:	f000 fadc 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4805      	ldr	r0, [pc, #20]	; (8002d24 <MX_TIM3_Init+0x94>)
 8002d0e:	f00b f85b 	bl	800ddc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002d18:	f000 face 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d1c:	bf00      	nop
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	2000057c 	.word	0x2000057c
 8002d28:	40000400 	.word	0x40000400

08002d2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <MX_TIM4_Init+0x9c>)
 8002d4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002d50:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002d52:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002d56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d58:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d72:	4814      	ldr	r0, [pc, #80]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002d74:	f00a fda0 	bl	800d8b8 <HAL_TIM_Base_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002d7e:	f000 fa9b 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002d90:	f00a fdea 	bl	800d968 <HAL_TIM_ConfigClockSource>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002d9a:	f000 fa8d 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	4619      	mov	r1, r3
 8002daa:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <MX_TIM4_Init+0x98>)
 8002dac:	f00b f80c 	bl	800ddc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002db6:	f000 fa7f 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200005c8 	.word	0x200005c8
 8002dc8:	40000800 	.word	0x40000800

08002dcc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <MX_TIM5_Init+0x98>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002df2:	227c      	movs	r2, #124	; 0x7c
 8002df4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002e02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e10:	4813      	ldr	r0, [pc, #76]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e12:	f00a fd51 	bl	800d8b8 <HAL_TIM_Base_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002e1c:	f000 fa4c 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	480c      	ldr	r0, [pc, #48]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e2e:	f00a fd9b 	bl	800d968 <HAL_TIM_ConfigClockSource>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002e38:	f000 fa3e 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4805      	ldr	r0, [pc, #20]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e4a:	f00a ffbd 	bl	800ddc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002e54:	f000 fa30 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e58:	bf00      	nop
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000614 	.word	0x20000614
 8002e64:	40000c00 	.word	0x40000c00

08002e68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e6c:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e6e:	4a23      	ldr	r2, [pc, #140]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002e72:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e74:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <MX_USART3_UART_Init+0x98>)
 8002e76:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e78:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e84:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e8c:	220c      	movs	r2, #12
 8002e8e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e96:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eae:	4812      	ldr	r0, [pc, #72]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002eb0:	f00b f818 	bl	800dee4 <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002eba:	f000 f9fd 	bl	80032b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002ec2:	f00c f8a8 	bl	800f016 <HAL_UARTEx_SetTxFifoThreshold>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002ecc:	f000 f9f4 	bl	80032b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002ed4:	f00c f8dd 	bl	800f092 <HAL_UARTEx_SetRxFifoThreshold>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002ede:	f000 f9eb 	bl	80032b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <MX_USART3_UART_Init+0x90>)
 8002ee4:	f00c f85e 	bl	800efa4 <HAL_UARTEx_DisableFifoMode>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002eee:	f000 f9e3 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000660 	.word	0x20000660
 8002efc:	40004800 	.word	0x40004800
 8002f00:	000f4240 	.word	0x000f4240

08002f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08e      	sub	sp, #56	; 0x38
 8002f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1a:	4ba0      	ldr	r3, [pc, #640]	; (800319c <MX_GPIO_Init+0x298>)
 8002f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f20:	4a9e      	ldr	r2, [pc, #632]	; (800319c <MX_GPIO_Init+0x298>)
 8002f22:	f043 0310 	orr.w	r3, r3, #16
 8002f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f2a:	4b9c      	ldr	r3, [pc, #624]	; (800319c <MX_GPIO_Init+0x298>)
 8002f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	623b      	str	r3, [r7, #32]
 8002f36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f38:	4b98      	ldr	r3, [pc, #608]	; (800319c <MX_GPIO_Init+0x298>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3e:	4a97      	ldr	r2, [pc, #604]	; (800319c <MX_GPIO_Init+0x298>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f48:	4b94      	ldr	r3, [pc, #592]	; (800319c <MX_GPIO_Init+0x298>)
 8002f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f56:	4b91      	ldr	r3, [pc, #580]	; (800319c <MX_GPIO_Init+0x298>)
 8002f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f5c:	4a8f      	ldr	r2, [pc, #572]	; (800319c <MX_GPIO_Init+0x298>)
 8002f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f66:	4b8d      	ldr	r3, [pc, #564]	; (800319c <MX_GPIO_Init+0x298>)
 8002f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f74:	4b89      	ldr	r3, [pc, #548]	; (800319c <MX_GPIO_Init+0x298>)
 8002f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7a:	4a88      	ldr	r2, [pc, #544]	; (800319c <MX_GPIO_Init+0x298>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f84:	4b85      	ldr	r3, [pc, #532]	; (800319c <MX_GPIO_Init+0x298>)
 8002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	4b82      	ldr	r3, [pc, #520]	; (800319c <MX_GPIO_Init+0x298>)
 8002f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f98:	4a80      	ldr	r2, [pc, #512]	; (800319c <MX_GPIO_Init+0x298>)
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fa2:	4b7e      	ldr	r3, [pc, #504]	; (800319c <MX_GPIO_Init+0x298>)
 8002fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fb0:	4b7a      	ldr	r3, [pc, #488]	; (800319c <MX_GPIO_Init+0x298>)
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <MX_GPIO_Init+0x298>)
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fc0:	4b76      	ldr	r3, [pc, #472]	; (800319c <MX_GPIO_Init+0x298>)
 8002fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fce:	4b73      	ldr	r3, [pc, #460]	; (800319c <MX_GPIO_Init+0x298>)
 8002fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd4:	4a71      	ldr	r2, [pc, #452]	; (800319c <MX_GPIO_Init+0x298>)
 8002fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fde:	4b6f      	ldr	r3, [pc, #444]	; (800319c <MX_GPIO_Init+0x298>)
 8002fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fec:	4b6b      	ldr	r3, [pc, #428]	; (800319c <MX_GPIO_Init+0x298>)
 8002fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff2:	4a6a      	ldr	r2, [pc, #424]	; (800319c <MX_GPIO_Init+0x298>)
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ffc:	4b67      	ldr	r3, [pc, #412]	; (800319c <MX_GPIO_Init+0x298>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 800300a:	2201      	movs	r2, #1
 800300c:	2134      	movs	r1, #52	; 0x34
 800300e:	4864      	ldr	r0, [pc, #400]	; (80031a0 <MX_GPIO_Init+0x29c>)
 8003010:	f004 ff48 	bl	8007ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8003014:	2200      	movs	r2, #0
 8003016:	f245 1103 	movw	r1, #20739	; 0x5103
 800301a:	4862      	ldr	r0, [pc, #392]	; (80031a4 <MX_GPIO_Init+0x2a0>)
 800301c:	f004 ff42 	bl	8007ea4 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8003020:	2200      	movs	r2, #0
 8003022:	2101      	movs	r1, #1
 8003024:	4860      	ldr	r0, [pc, #384]	; (80031a8 <MX_GPIO_Init+0x2a4>)
 8003026:	f004 ff3d 	bl	8007ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800302a:	2200      	movs	r2, #0
 800302c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003030:	485e      	ldr	r0, [pc, #376]	; (80031ac <MX_GPIO_Init+0x2a8>)
 8003032:	f004 ff37 	bl	8007ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8003036:	2200      	movs	r2, #0
 8003038:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800303c:	485c      	ldr	r0, [pc, #368]	; (80031b0 <MX_GPIO_Init+0x2ac>)
 800303e:	f004 ff31 	bl	8007ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003042:	2201      	movs	r2, #1
 8003044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003048:	4859      	ldr	r0, [pc, #356]	; (80031b0 <MX_GPIO_Init+0x2ac>)
 800304a:	f004 ff2b 	bl	8007ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 800304e:	2201      	movs	r2, #1
 8003050:	21f8      	movs	r1, #248	; 0xf8
 8003052:	4856      	ldr	r0, [pc, #344]	; (80031ac <MX_GPIO_Init+0x2a8>)
 8003054:	f004 ff26 	bl	8007ea4 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003058:	2200      	movs	r2, #0
 800305a:	2102      	movs	r1, #2
 800305c:	4850      	ldr	r0, [pc, #320]	; (80031a0 <MX_GPIO_Init+0x29c>)
 800305e:	f004 ff21 	bl	8007ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8003062:	2336      	movs	r3, #54	; 0x36
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003066:	2301      	movs	r3, #1
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003076:	4619      	mov	r1, r3
 8003078:	4849      	ldr	r0, [pc, #292]	; (80031a0 <MX_GPIO_Init+0x29c>)
 800307a:	f004 fd4b 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800307e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003084:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800308e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003092:	4619      	mov	r1, r3
 8003094:	4846      	ldr	r0, [pc, #280]	; (80031b0 <MX_GPIO_Init+0x2ac>)
 8003096:	f004 fd3d 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 800309a:	f245 1303 	movw	r3, #20739	; 0x5103
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a0:	2301      	movs	r3, #1
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b0:	4619      	mov	r1, r3
 80030b2:	483c      	ldr	r0, [pc, #240]	; (80031a4 <MX_GPIO_Init+0x2a0>)
 80030b4:	f004 fd2e 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	4619      	mov	r1, r3
 80030ce:	4839      	ldr	r0, [pc, #228]	; (80031b4 <MX_GPIO_Init+0x2b0>)
 80030d0:	f004 fd20 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 80030d4:	2301      	movs	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d8:	2301      	movs	r3, #1
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 80030e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e8:	4619      	mov	r1, r3
 80030ea:	482f      	ldr	r0, [pc, #188]	; (80031a8 <MX_GPIO_Init+0x2a4>)
 80030ec:	f004 fd12 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 80030f0:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f6:	2301      	movs	r3, #1
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003106:	4619      	mov	r1, r3
 8003108:	4828      	ldr	r0, [pc, #160]	; (80031ac <MX_GPIO_Init+0x2a8>)
 800310a:	f004 fd03 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003112:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003120:	4619      	mov	r1, r3
 8003122:	4821      	ldr	r0, [pc, #132]	; (80031a8 <MX_GPIO_Init+0x2a4>)
 8003124:	f004 fcf6 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8003128:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800312e:	2301      	movs	r3, #1
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003132:	2302      	movs	r3, #2
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800313e:	4619      	mov	r1, r3
 8003140:	481b      	ldr	r0, [pc, #108]	; (80031b0 <MX_GPIO_Init+0x2ac>)
 8003142:	f004 fce7 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003146:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003158:	230a      	movs	r3, #10
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003160:	4619      	mov	r1, r3
 8003162:	4815      	ldr	r0, [pc, #84]	; (80031b8 <MX_GPIO_Init+0x2b4>)
 8003164:	f004 fcd6 	bl	8007b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8003168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8003176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317a:	4619      	mov	r1, r3
 800317c:	480c      	ldr	r0, [pc, #48]	; (80031b0 <MX_GPIO_Init+0x2ac>)
 800317e:	f004 fcc9 	bl	8007b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2028      	movs	r0, #40	; 0x28
 8003188:	f002 fe7b 	bl	8005e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800318c:	2028      	movs	r0, #40	; 0x28
 800318e:	f002 fe92 	bl	8005eb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003192:	bf00      	nop
 8003194:	3738      	adds	r7, #56	; 0x38
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	58024400 	.word	0x58024400
 80031a0:	58021000 	.word	0x58021000
 80031a4:	58020400 	.word	0x58020400
 80031a8:	58021800 	.word	0x58021800
 80031ac:	58020c00 	.word	0x58020c00
 80031b0:	58020800 	.word	0x58020800
 80031b4:	58021400 	.word	0x58021400
 80031b8:	58020000 	.word	0x58020000

080031bc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 80031c4:	480e      	ldr	r0, [pc, #56]	; (8003200 <HAL_ADC_ConvCpltCallback+0x44>)
 80031c6:	f001 fd17 	bl	8004bf8 <HAL_ADC_GetValue>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_ADC_ConvCpltCallback+0x48>)
 80031ce:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_ADC_ConvCpltCallback+0x48>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <HAL_ADC_ConvCpltCallback+0x4c>)
 80031d8:	6013      	str	r3, [r2, #0]
  sample_count++;
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_ADC_ConvCpltCallback+0x50>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_ADC_ConvCpltCallback+0x50>)
 80031e6:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_ADC_ConvCpltCallback+0x4c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	4807      	ldr	r0, [pc, #28]	; (8003210 <HAL_ADC_ConvCpltCallback+0x54>)
 80031f2:	f002 ff6b 	bl	80060cc <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000358 	.word	0x20000358
 8003204:	200006fc 	.word	0x200006fc
 8003208:	20000700 	.word	0x20000700
 800320c:	200006f6 	.word	0x200006f6
 8003210:	200003bc 	.word	0x200003bc

08003214 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800321a:	463b      	mov	r3, r7
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003226:	f002 fe61 	bl	8005eec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800322a:	2301      	movs	r3, #1
 800322c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800322e:	2300      	movs	r3, #0
 8003230:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003236:	231f      	movs	r3, #31
 8003238:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800323a:	2387      	movs	r3, #135	; 0x87
 800323c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800323e:	2300      	movs	r3, #0
 8003240:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003242:	2300      	movs	r3, #0
 8003244:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003246:	2301      	movs	r3, #1
 8003248:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800324a:	2301      	movs	r3, #1
 800324c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003256:	463b      	mov	r3, r7
 8003258:	4618      	mov	r0, r3
 800325a:	f002 fe7f 	bl	8005f5c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800325e:	2301      	movs	r3, #1
 8003260:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <MPU_Config+0x9c>)
 8003264:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8003266:	2310      	movs	r3, #16
 8003268:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800326a:	2300      	movs	r3, #0
 800326c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800326e:	2301      	movs	r3, #1
 8003270:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003272:	2303      	movs	r3, #3
 8003274:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800327a:	463b      	mov	r3, r7
 800327c:	4618      	mov	r0, r3
 800327e:	f002 fe6d 	bl	8005f5c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003282:	2302      	movs	r3, #2
 8003284:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <MPU_Config+0xa0>)
 8003288:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800328a:	2308      	movs	r3, #8
 800328c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800328e:	2300      	movs	r3, #0
 8003290:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003292:	2301      	movs	r3, #1
 8003294:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800329a:	463b      	mov	r3, r7
 800329c:	4618      	mov	r0, r3
 800329e:	f002 fe5d 	bl	8005f5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80032a2:	2004      	movs	r0, #4
 80032a4:	f002 fe3a 	bl	8005f1c <HAL_MPU_Enable>

}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	30020000 	.word	0x30020000
 80032b4:	30040000 	.word	0x30040000

080032b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80032bc:	b672      	cpsid	i
}
 80032be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 80032c0:	4810      	ldr	r0, [pc, #64]	; (8003304 <Error_Handler+0x4c>)
 80032c2:	f017 ff9b 	bl	801b1fc <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80032c6:	f240 1103 	movw	r1, #259	; 0x103
 80032ca:	480f      	ldr	r0, [pc, #60]	; (8003308 <Error_Handler+0x50>)
 80032cc:	f005 f978 	bl	80085c0 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 80032d0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 80032d4:	480c      	ldr	r0, [pc, #48]	; (8003308 <Error_Handler+0x50>)
 80032d6:	f005 fa11 	bl	80086fc <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032e0:	480a      	ldr	r0, [pc, #40]	; (800330c <Error_Handler+0x54>)
 80032e2:	f004 fddf 	bl	8007ea4 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80032e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032ea:	4809      	ldr	r0, [pc, #36]	; (8003310 <Error_Handler+0x58>)
 80032ec:	f004 fdf3 	bl	8007ed6 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <Error_Handler+0x5c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f019 fec0 	bl	801d080 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003300:	e7f1      	b.n	80032e6 <Error_Handler+0x2e>
 8003302:	bf00      	nop
 8003304:	0801d4f8 	.word	0x0801d4f8
 8003308:	200003d0 	.word	0x200003d0
 800330c:	58020800 	.word	0x58020800
 8003310:	58020400 	.word	0x58020400
 8003314:	20000118 	.word	0x20000118

08003318 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_MspInit+0x30>)
 8003320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003324:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_MspInit+0x30>)
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_MspInit+0x30>)
 8003330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	58024400 	.word	0x58024400

0800334c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b0b4      	sub	sp, #208	; 0xd0
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	22c0      	movs	r2, #192	; 0xc0
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f018 f83d 	bl	801b3dc <memset>
  if(hadc->Instance==ADC3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <HAL_ADC_MspInit+0xc8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d14e      	bne.n	800340a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800336c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8003378:	2301      	movs	r3, #1
 800337a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800337c:	2313      	movs	r3, #19
 800337e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8003380:	234f      	movs	r3, #79	; 0x4f
 8003382:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003384:	2302      	movs	r3, #2
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003388:	2302      	movs	r3, #2
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800338c:	23c0      	movs	r3, #192	; 0xc0
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003390:	2320      	movs	r3, #32
 8003392:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800339e:	f107 0310 	add.w	r3, r7, #16
 80033a2:	4618      	mov	r0, r3
 80033a4:	f007 fd34 	bl	800ae10 <HAL_RCCEx_PeriphCLKConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80033ae:	f7ff ff83 	bl	80032b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_ADC_MspInit+0xcc>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b8:	4a17      	ldr	r2, [pc, #92]	; (8003418 <HAL_ADC_MspInit+0xcc>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_ADC_MspInit+0xcc>)
 80033c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_ADC_MspInit+0xcc>)
 80033d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d6:	4a10      	ldr	r2, [pc, #64]	; (8003418 <HAL_ADC_MspInit+0xcc>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_ADC_MspInit+0xcc>)
 80033e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80033ee:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80033f2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80033f6:	f000 feed 	bl	80041d4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2100      	movs	r1, #0
 80033fe:	207f      	movs	r0, #127	; 0x7f
 8003400:	f002 fd3f 	bl	8005e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003404:	207f      	movs	r0, #127	; 0x7f
 8003406:	f002 fd56 	bl	8005eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800340a:	bf00      	nop
 800340c:	37d0      	adds	r7, #208	; 0xd0
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	58026000 	.word	0x58026000
 8003418:	58024400 	.word	0x58024400

0800341c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_DAC_MspInit+0x80>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d129      	bne.n	8003492 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800343e:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <HAL_DAC_MspInit+0x84>)
 8003440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003444:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <HAL_DAC_MspInit+0x84>)
 8003446:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800344a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_DAC_MspInit+0x84>)
 8003450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_DAC_MspInit+0x84>)
 800345e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <HAL_DAC_MspInit+0x84>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <HAL_DAC_MspInit+0x84>)
 800346e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800347a:	2310      	movs	r3, #16
 800347c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800347e:	2303      	movs	r3, #3
 8003480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003486:	f107 0314 	add.w	r3, r7, #20
 800348a:	4619      	mov	r1, r3
 800348c:	4805      	ldr	r0, [pc, #20]	; (80034a4 <HAL_DAC_MspInit+0x88>)
 800348e:	f004 fb41 	bl	8007b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003492:	bf00      	nop
 8003494:	3728      	adds	r7, #40	; 0x28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40007400 	.word	0x40007400
 80034a0:	58024400 	.word	0x58024400
 80034a4:	58020000 	.word	0x58020000

080034a8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b0b4      	sub	sp, #208	; 0xd0
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034b0:	f107 0310 	add.w	r3, r7, #16
 80034b4:	22c0      	movs	r2, #192	; 0xc0
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f017 ff8f 	bl	801b3dc <memset>
  if(hhrtim->Instance==HRTIM1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <HAL_HRTIM_MspInit+0x8c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d131      	bne.n	800352c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80034c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034da:	f107 0310 	add.w	r3, r7, #16
 80034de:	4618      	mov	r0, r3
 80034e0:	f007 fc96 	bl	800ae10 <HAL_RCCEx_PeriphCLKConfig>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 80034ea:	f7ff fee5 	bl	80032b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_HRTIM_MspInit+0x90>)
 80034f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034f4:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_HRTIM_MspInit+0x90>)
 80034f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_HRTIM_MspInit+0x90>)
 8003500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800350c:	2200      	movs	r2, #0
 800350e:	2100      	movs	r1, #0
 8003510:	2068      	movs	r0, #104	; 0x68
 8003512:	f002 fcb6 	bl	8005e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8003516:	2068      	movs	r0, #104	; 0x68
 8003518:	f002 fccd 	bl	8005eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	206c      	movs	r0, #108	; 0x6c
 8003522:	f002 fcae 	bl	8005e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8003526:	206c      	movs	r0, #108	; 0x6c
 8003528:	f002 fcc5 	bl	8005eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 800352c:	bf00      	nop
 800352e:	37d0      	adds	r7, #208	; 0xd0
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40017400 	.word	0x40017400
 8003538:	58024400 	.word	0x58024400

0800353c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a22      	ldr	r2, [pc, #136]	; (80035e4 <HAL_HRTIM_MspPostInit+0xa8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d13d      	bne.n	80035da <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_HRTIM_MspPostInit+0xac>)
 8003560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <HAL_HRTIM_MspPostInit+0xac>)
 8003566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800356a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_HRTIM_MspPostInit+0xac>)
 8003570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_HRTIM_MspPostInit+0xac>)
 800357e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003582:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_HRTIM_MspPostInit+0xac>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_HRTIM_MspPostInit+0xac>)
 800358e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800359a:	2340      	movs	r3, #64	; 0x40
 800359c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a6:	2303      	movs	r3, #3
 80035a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80035aa:	2302      	movs	r3, #2
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	480d      	ldr	r0, [pc, #52]	; (80035ec <HAL_HRTIM_MspPostInit+0xb0>)
 80035b6:	f004 faad 	bl	8007b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035ba:	23c0      	movs	r3, #192	; 0xc0
 80035bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c6:	2303      	movs	r3, #3
 80035c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4806      	ldr	r0, [pc, #24]	; (80035f0 <HAL_HRTIM_MspPostInit+0xb4>)
 80035d6:	f004 fa9d 	bl	8007b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80035da:	bf00      	nop
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40017400 	.word	0x40017400
 80035e8:	58024400 	.word	0x58024400
 80035ec:	58021800 	.word	0x58021800
 80035f0:	58020800 	.word	0x58020800

080035f4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0b4      	sub	sp, #208	; 0xd0
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035fc:	f107 0310 	add.w	r3, r7, #16
 8003600:	22c0      	movs	r2, #192	; 0xc0
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f017 fee9 	bl	801b3dc <memset>
  if(hlptim->Instance==LPTIM1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_LPTIM_MspInit+0x80>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d12a      	bne.n	800366a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003614:	f04f 0220 	mov.w	r2, #32
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003620:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	4618      	mov	r0, r3
 800362e:	f007 fbef 	bl	800ae10 <HAL_RCCEx_PeriphCLKConfig>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8003638:	f7ff fe3e 	bl	80032b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <HAL_LPTIM_MspInit+0x84>)
 800363e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003642:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <HAL_LPTIM_MspInit+0x84>)
 8003644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003648:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_LPTIM_MspInit+0x84>)
 800364e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800365a:	2200      	movs	r2, #0
 800365c:	2100      	movs	r1, #0
 800365e:	205d      	movs	r0, #93	; 0x5d
 8003660:	f002 fc0f 	bl	8005e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003664:	205d      	movs	r0, #93	; 0x5d
 8003666:	f002 fc26 	bl	8005eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800366a:	bf00      	nop
 800366c:	37d0      	adds	r7, #208	; 0xd0
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40002400 	.word	0x40002400
 8003678:	58024400 	.word	0x58024400

0800367c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	; 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a35      	ldr	r2, [pc, #212]	; (8003760 <HAL_TIM_Base_MspInit+0xe4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10f      	bne.n	80036ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800368e:	4b35      	ldr	r3, [pc, #212]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 8003690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003694:	4a33      	ldr	r2, [pc, #204]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800369e:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 80036a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80036ac:	e052      	b.n	8003754 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d10f      	bne.n	80036d8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 80036ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036be:	4a29      	ldr	r2, [pc, #164]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 80036ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	69bb      	ldr	r3, [r7, #24]
}
 80036d6:	e03d      	b.n	8003754 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a22      	ldr	r2, [pc, #136]	; (8003768 <HAL_TIM_Base_MspInit+0xec>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10f      	bne.n	8003702 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 80036e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 80036ea:	f043 0302 	orr.w	r3, r3, #2
 80036ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 80036f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	e028      	b.n	8003754 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_TIM_Base_MspInit+0xf0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10f      	bne.n	800372c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800370c:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 800370e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003712:	4a14      	ldr	r2, [pc, #80]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 800371e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	693b      	ldr	r3, [r7, #16]
}
 800372a:	e013      	b.n	8003754 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0f      	ldr	r2, [pc, #60]	; (8003770 <HAL_TIM_Base_MspInit+0xf4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003736:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 8003738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800373c:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 800373e:	f043 0308 	orr.w	r3, r3, #8
 8003742:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_TIM_Base_MspInit+0xe8>)
 8003748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	bf00      	nop
 8003756:	3724      	adds	r7, #36	; 0x24
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	40010000 	.word	0x40010000
 8003764:	58024400 	.word	0x58024400
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40000c00 	.word	0x40000c00

08003774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b0ba      	sub	sp, #232	; 0xe8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800378c:	f107 0310 	add.w	r3, r7, #16
 8003790:	22c0      	movs	r2, #192	; 0xc0
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f017 fe21 	bl	801b3dc <memset>
  if(huart->Instance==USART3)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_UART_MspInit+0xc8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d146      	bne.n	8003832 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037a4:	f04f 0202 	mov.w	r2, #2
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037b6:	f107 0310 	add.w	r3, r7, #16
 80037ba:	4618      	mov	r0, r3
 80037bc:	f007 fb28 	bl	800ae10 <HAL_RCCEx_PeriphCLKConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80037c6:	f7ff fd77 	bl	80032b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037ca:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_UART_MspInit+0xcc>)
 80037cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037d0:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_UART_MspInit+0xcc>)
 80037d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_UART_MspInit+0xcc>)
 80037dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_UART_MspInit+0xcc>)
 80037ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ee:	4a14      	ldr	r2, [pc, #80]	; (8003840 <HAL_UART_MspInit+0xcc>)
 80037f0:	f043 0308 	orr.w	r3, r3, #8
 80037f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f8:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_UART_MspInit+0xcc>)
 80037fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800380a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381a:	2300      	movs	r3, #0
 800381c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003820:	2307      	movs	r3, #7
 8003822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003826:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800382a:	4619      	mov	r1, r3
 800382c:	4805      	ldr	r0, [pc, #20]	; (8003844 <HAL_UART_MspInit+0xd0>)
 800382e:	f004 f971 	bl	8007b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003832:	bf00      	nop
 8003834:	37e8      	adds	r7, #232	; 0xe8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40004800 	.word	0x40004800
 8003840:	58024400 	.word	0x58024400
 8003844:	58020c00 	.word	0x58020c00

08003848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800384c:	f007 fac4 	bl	800add8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003850:	f7ff fd32 	bl	80032b8 <Error_Handler>
 8003854:	e7fc      	b.n	8003850 <NMI_Handler+0x8>

08003856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800385a:	f7ff fd2d 	bl	80032b8 <Error_Handler>
 800385e:	e7fc      	b.n	800385a <HardFault_Handler+0x4>

08003860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003864:	f7ff fd28 	bl	80032b8 <Error_Handler>
 8003868:	e7fc      	b.n	8003864 <MemManage_Handler+0x4>

0800386a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 800386e:	f7ff fd23 	bl	80032b8 <Error_Handler>
 8003872:	e7fc      	b.n	800386e <BusFault_Handler+0x4>

08003874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8003878:	f7ff fd1e 	bl	80032b8 <Error_Handler>
 800387c:	e7fc      	b.n	8003878 <UsageFault_Handler+0x4>

0800387e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ac:	f000 fc2e 	bl	800410c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80038b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038bc:	f004 fb25 	bl	8007f0a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80038c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038c4:	f004 fb21 	bl	8007f0a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}

080038cc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80038d0:	4802      	ldr	r0, [pc, #8]	; (80038dc <LPTIM1_IRQHandler+0x10>)
 80038d2:	f005 ff5a 	bl	800978a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200004ac 	.word	0x200004ac

080038e0 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80038e4:	2100      	movs	r1, #0
 80038e6:	4802      	ldr	r0, [pc, #8]	; (80038f0 <HRTIM1_TIMA_IRQHandler+0x10>)
 80038e8:	f004 ff86 	bl	80087f8 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	200003d0 	.word	0x200003d0

080038f4 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80038f8:	2104      	movs	r1, #4
 80038fa:	4802      	ldr	r0, [pc, #8]	; (8003904 <HRTIM1_TIME_IRQHandler+0x10>)
 80038fc:	f004 ff7c 	bl	80087f8 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200003d0 	.word	0x200003d0

08003908 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <ADC3_IRQHandler+0x10>)
 800390e:	f001 f981 	bl	8004c14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000358 	.word	0x20000358

0800391c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
	return 1;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_kill>:

int _kill(int pid, int sig)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <_kill+0x20>)
 8003938:	2216      	movs	r2, #22
 800393a:	601a      	str	r2, [r3, #0]
	return -1;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	20007444 	.word	0x20007444

08003950 <_exit>:

void _exit (int status)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003958:	f04f 31ff 	mov.w	r1, #4294967295
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ffe5 	bl	800392c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003962:	e7fe      	b.n	8003962 <_exit+0x12>

08003964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e00a      	b.n	800398c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003976:	f3af 8000 	nop.w
 800397a:	4601      	mov	r1, r0
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	60ba      	str	r2, [r7, #8]
 8003982:	b2ca      	uxtb	r2, r1
 8003984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	dbf0      	blt.n	8003976 <_read+0x12>
	}

return len;
 8003994:	687b      	ldr	r3, [r7, #4]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e009      	b.n	80039c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	60ba      	str	r2, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fc37 	bl	800222c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3301      	adds	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	dbf1      	blt.n	80039b0 <_write+0x12>
	}
	return len;
 80039cc:	687b      	ldr	r3, [r7, #4]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <_close>:

int _close(int file)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
	return -1;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <_isatty>:

int _isatty(int file)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
	return 1;
 8003a16:	2301      	movs	r3, #1
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <_sbrk+0x5c>)
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <_sbrk+0x60>)
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <_sbrk+0x64>)
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <_sbrk+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d205      	bcs.n	8003a7c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <_sbrk+0x6c>)
 8003a72:	220c      	movs	r2, #12
 8003a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	e009      	b.n	8003a90 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <_sbrk+0x64>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	4a06      	ldr	r2, [pc, #24]	; (8003aa4 <_sbrk+0x64>)
 8003a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	20020000 	.word	0x20020000
 8003aa0:	00000400 	.word	0x00000400
 8003aa4:	20000750 	.word	0x20000750
 8003aa8:	20007458 	.word	0x20007458
 8003aac:	20007444 	.word	0x20007444

08003ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ab6:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <SystemInit+0x104>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	4a3d      	ldr	r2, [pc, #244]	; (8003bb4 <SystemInit+0x104>)
 8003abe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ac6:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <SystemInit+0x108>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d807      	bhi.n	8003ae2 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <SystemInit+0x108>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 030f 	bic.w	r3, r3, #15
 8003ada:	4a37      	ldr	r2, [pc, #220]	; (8003bb8 <SystemInit+0x108>)
 8003adc:	f043 0307 	orr.w	r3, r3, #7
 8003ae0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <SystemInit+0x10c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a35      	ldr	r2, [pc, #212]	; (8003bbc <SystemInit+0x10c>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003aee:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <SystemInit+0x10c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <SystemInit+0x10c>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4930      	ldr	r1, [pc, #192]	; (8003bbc <SystemInit+0x10c>)
 8003afa:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <SystemInit+0x110>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b00:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <SystemInit+0x108>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <SystemInit+0x108>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 030f 	bic.w	r3, r3, #15
 8003b14:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <SystemInit+0x108>)
 8003b16:	f043 0307 	orr.w	r3, r3, #7
 8003b1a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b1c:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <SystemInit+0x10c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <SystemInit+0x10c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <SystemInit+0x10c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <SystemInit+0x10c>)
 8003b30:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <SystemInit+0x114>)
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <SystemInit+0x10c>)
 8003b36:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <SystemInit+0x118>)
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <SystemInit+0x10c>)
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <SystemInit+0x11c>)
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b40:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <SystemInit+0x10c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b46:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <SystemInit+0x10c>)
 8003b48:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <SystemInit+0x11c>)
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <SystemInit+0x10c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b52:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <SystemInit+0x10c>)
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <SystemInit+0x11c>)
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <SystemInit+0x10c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b5e:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <SystemInit+0x10c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a16      	ldr	r2, [pc, #88]	; (8003bbc <SystemInit+0x10c>)
 8003b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b6a:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <SystemInit+0x10c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <SystemInit+0x120>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <SystemInit+0x124>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7c:	d202      	bcs.n	8003b84 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <SystemInit+0x128>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <SystemInit+0x10c>)
 8003b86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <SystemInit+0x10c>)
 8003b8c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003b90:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <SystemInit+0x10c>)
 8003b96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b9a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003b9c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <SystemInit+0x12c>)
 8003ba0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ba4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000ed00 	.word	0xe000ed00
 8003bb8:	52002000 	.word	0x52002000
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003bc4:	02020200 	.word	0x02020200
 8003bc8:	01ff0000 	.word	0x01ff0000
 8003bcc:	01010280 	.word	0x01010280
 8003bd0:	5c001000 	.word	0x5c001000
 8003bd4:	ffff0000 	.word	0xffff0000
 8003bd8:	51008108 	.word	0x51008108
 8003bdc:	52004000 	.word	0x52004000

08003be0 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003be8:	2101      	movs	r1, #1
 8003bea:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003bec:	f004 f973 	bl	8007ed6 <HAL_GPIO_TogglePin>
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	58020400 	.word	0x58020400

08003bfc <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d15d      	bne.n	8003ce0 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003c24:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c26:	ed93 5b00 	vldr	d5, [r3]
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c2c:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003c34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003c38:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003c3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c3e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c42:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c46:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8003c4a:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c4c:	ed93 5b02 	vldr	d5, [r3, #8]
 8003c50:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c52:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003c5a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003c5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c62:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003c66:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c74:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8003c78:	ed97 6b04 	vldr	d6, [r7, #16]
 8003c7c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003c80:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003c84:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c86:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003c8e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003c92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003c9a:	ee17 3a90 	vmov	r3, s15
 8003c9e:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d106      	bne.n	8003cb8 <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8003caa:	f019 fa09 	bl	801d0c0 <__stop_pop_veneer>
			i = 0;
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
			start_pop();
 8003cb4:	f019 f9e8 	bl	801d088 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003cc0:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003cca:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4809      	ldr	r0, [pc, #36]	; (8003cf4 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003cd0:	f004 f901 	bl	8007ed6 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4807      	ldr	r0, [pc, #28]	; (8003cf8 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003cdc:	f017 fa28 	bl	801b130 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003ce0:	bf00      	nop
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	080205f8 	.word	0x080205f8
 8003cec:	2000075c 	.word	0x2000075c
 8003cf0:	20000754 	.word	0x20000754
 8003cf4:	58021000 	.word	0x58021000
 8003cf8:	0801dbf8 	.word	0x0801dbf8

08003cfc <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d18:	f7ff feca 	bl	8003ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d1c:	480c      	ldr	r0, [pc, #48]	; (8003d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d1e:	490d      	ldr	r1, [pc, #52]	; (8003d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d24:	e002      	b.n	8003d2c <LoopCopyDataInit>

08003d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d2a:	3304      	adds	r3, #4

08003d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d30:	d3f9      	bcc.n	8003d26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d34:	4c0a      	ldr	r4, [pc, #40]	; (8003d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d38:	e001      	b.n	8003d3e <LoopFillZerobss>

08003d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d3c:	3204      	adds	r2, #4

08003d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d40:	d3fb      	bcc.n	8003d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d42:	f017 fbaf 	bl	801b4a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d46:	f7fe fa83 	bl	8002250 <main>
  bx  lr
 8003d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d54:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8003d58:	08020b10 	.word	0x08020b10
  ldr r2, =_sbss
 8003d5c:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8003d60:	20007454 	.word	0x20007454

08003d64 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d64:	e7fe      	b.n	8003d64 <ADC_IRQHandler>

08003d66 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <LAN8742_RegisterBusIO+0x28>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <LAN8742_RegisterBusIO+0x28>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <LAN8742_RegisterBusIO+0x28>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d92:	e014      	b.n	8003dbe <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d17c      	bne.n	8003ee4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e01c      	b.n	8003e3e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f107 0208 	add.w	r2, r7, #8
 8003e0c:	2112      	movs	r1, #18
 8003e0e:	6978      	ldr	r0, [r7, #20]
 8003e10:	4798      	blx	r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	da03      	bge.n	8003e20 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003e18:	f06f 0304 	mvn.w	r3, #4
 8003e1c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003e1e:	e00b      	b.n	8003e38 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d105      	bne.n	8003e38 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
         break;
 8003e36:	e005      	b.n	8003e44 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b1f      	cmp	r3, #31
 8003e42:	d9df      	bls.n	8003e04 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b1f      	cmp	r3, #31
 8003e4a:	d902      	bls.n	8003e52 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003e4c:	f06f 0302 	mvn.w	r3, #2
 8003e50:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d145      	bne.n	8003ee4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6810      	ldr	r0, [r2, #0]
 8003e60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e64:	2100      	movs	r1, #0
 8003e66:	4798      	blx	r3
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	db37      	blt.n	8003ede <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6810      	ldr	r0, [r2, #0]
 8003e76:	f107 0208 	add.w	r2, r7, #8
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4798      	blx	r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	db28      	blt.n	8003ed6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4798      	blx	r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003e8e:	e01c      	b.n	8003eca <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	4798      	blx	r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ea2:	d80e      	bhi.n	8003ec2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6810      	ldr	r0, [r2, #0]
 8003eac:	f107 0208 	add.w	r2, r7, #8
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4798      	blx	r3
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da07      	bge.n	8003eca <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003eba:	f06f 0304 	mvn.w	r3, #4
 8003ebe:	613b      	str	r3, [r7, #16]
                 break;
 8003ec0:	e010      	b.n	8003ee4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003ec2:	f06f 0301 	mvn.w	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]
               break;
 8003ec8:	e00c      	b.n	8003ee4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1dd      	bne.n	8003e90 <LAN8742_Init+0xc6>
 8003ed4:	e006      	b.n	8003ee4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003ed6:	f06f 0304 	mvn.w	r3, #4
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e002      	b.n	8003ee4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003ede:	f06f 0303 	mvn.w	r3, #3
 8003ee2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d112      	bne.n	8003f10 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	4798      	blx	r3
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003ef4:	bf00      	nop
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	4798      	blx	r3
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f08:	d9f5      	bls.n	8003ef6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003f10:	693b      	ldr	r3, [r7, #16]
 }
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6810      	ldr	r0, [r2, #0]
 8003f2e:	f107 020c 	add.w	r2, r7, #12
 8003f32:	2101      	movs	r1, #1
 8003f34:	4798      	blx	r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	da02      	bge.n	8003f42 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003f3c:	f06f 0304 	mvn.w	r3, #4
 8003f40:	e06e      	b.n	8004020 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6810      	ldr	r0, [r2, #0]
 8003f4a:	f107 020c 	add.w	r2, r7, #12
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4798      	blx	r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	da02      	bge.n	8003f5e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003f58:	f06f 0304 	mvn.w	r3, #4
 8003f5c:	e060      	b.n	8004020 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e059      	b.n	8004020 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6810      	ldr	r0, [r2, #0]
 8003f74:	f107 020c 	add.w	r2, r7, #12
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4798      	blx	r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	da02      	bge.n	8003f88 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003f82:	f06f 0304 	mvn.w	r3, #4
 8003f86:	e04b      	b.n	8004020 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11b      	bne.n	8003fca <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d006      	beq.n	8003faa <LAN8742_GetLinkState+0x90>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e03a      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e033      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	e02c      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	e02a      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6810      	ldr	r0, [r2, #0]
 8003fd2:	f107 020c 	add.w	r2, r7, #12
 8003fd6:	211f      	movs	r1, #31
 8003fd8:	4798      	blx	r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	da02      	bge.n	8003fe6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003fe0:	f06f 0304 	mvn.w	r3, #4
 8003fe4:	e01c      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003ff0:	2306      	movs	r3, #6
 8003ff2:	e015      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 031c 	and.w	r3, r3, #28
 8003ffa:	2b18      	cmp	r3, #24
 8003ffc:	d101      	bne.n	8004002 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003ffe:	2302      	movs	r3, #2
 8004000:	e00e      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 031c 	and.w	r3, r3, #28
 8004008:	2b08      	cmp	r3, #8
 800400a:	d101      	bne.n	8004010 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800400c:	2303      	movs	r3, #3
 800400e:	e007      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 031c 	and.w	r3, r3, #28
 8004016:	2b14      	cmp	r3, #20
 8004018:	d101      	bne.n	800401e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800401a:	2304      	movs	r3, #4
 800401c:	e000      	b.n	8004020 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800401e:	2305      	movs	r3, #5
    }				
  }
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800402e:	2003      	movs	r0, #3
 8004030:	f001 ff1c 	bl	8005e6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004034:	f006 fcfa 	bl	800aa2c <HAL_RCC_GetSysClockFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <HAL_Init+0x68>)
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	4913      	ldr	r1, [pc, #76]	; (8004094 <HAL_Init+0x6c>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_Init+0x68>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	4a0e      	ldr	r2, [pc, #56]	; (8004094 <HAL_Init+0x6c>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <HAL_Init+0x70>)
 800406a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <HAL_Init+0x74>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004072:	2000      	movs	r0, #0
 8004074:	f000 f814 	bl	80040a0 <HAL_InitTick>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e002      	b.n	8004088 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004082:	f7ff f949 	bl	8003318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	58024400 	.word	0x58024400
 8004094:	08020610 	.word	0x08020610
 8004098:	20000114 	.word	0x20000114
 800409c:	20000110 	.word	0x20000110

080040a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_InitTick+0x60>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e021      	b.n	80040f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_InitTick+0x64>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_InitTick+0x60>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 ff01 	bl	8005ed2 <HAL_SYSTICK_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00e      	b.n	80040f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d80a      	bhi.n	80040f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e0:	2200      	movs	r2, #0
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	f001 fecb 	bl	8005e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040ec:	4a06      	ldr	r2, [pc, #24]	; (8004108 <HAL_InitTick+0x68>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	2000012c 	.word	0x2000012c
 8004104:	20000110 	.word	0x20000110
 8004108:	20000128 	.word	0x20000128

0800410c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_IncTick+0x20>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_IncTick+0x24>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4413      	add	r3, r2
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_IncTick+0x24>)
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2000012c 	.word	0x2000012c
 8004130:	20000760 	.word	0x20000760

08004134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return uwTick;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <HAL_GetTick+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000760 	.word	0x20000760

0800414c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff ffee 	bl	8004134 <HAL_GetTick>
 8004158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d005      	beq.n	8004172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_Delay+0x44>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004172:	bf00      	nop
 8004174:	f7ff ffde 	bl	8004134 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d8f7      	bhi.n	8004174 <HAL_Delay+0x28>
  {
  }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	2000012c 	.word	0x2000012c

08004194 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_GetREVID+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0c1b      	lsrs	r3, r3, #16
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	5c001000 	.word	0x5c001000

080041ac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041bc:	4904      	ldr	r1, [pc, #16]	; (80041d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	58000400 	.word	0x58000400

080041d4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	401a      	ands	r2, r3
 80041e8:	4904      	ldr	r1, [pc, #16]	; (80041fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	58000400 	.word	0x58000400

08004200 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	609a      	str	r2, [r3, #8]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3360      	adds	r3, #96	; 0x60
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	430b      	orrs	r3, r1
 8004296:	431a      	orrs	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	611a      	str	r2, [r3, #16]
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80042da:	b480      	push	{r7}
 80042dc:	b087      	sub	sp, #28
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3360      	adds	r3, #96	; 0x60
 80042ea:	461a      	mov	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	431a      	orrs	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	601a      	str	r2, [r3, #0]
  }
}
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3330      	adds	r3, #48	; 0x30
 8004346:	461a      	mov	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	4413      	add	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	211f      	movs	r1, #31
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	401a      	ands	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	f003 011f 	and.w	r1, r3, #31
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	431a      	orrs	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3314      	adds	r3, #20
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0e5b      	lsrs	r3, r3, #25
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	4413      	add	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	0d1b      	lsrs	r3, r3, #20
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2107      	movs	r1, #7
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	401a      	ands	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	0d1b      	lsrs	r3, r3, #20
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	431a      	orrs	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004424:	43db      	mvns	r3, r3
 8004426:	401a      	ands	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f003 0318 	and.w	r3, r3, #24
 800442e:	4908      	ldr	r1, [pc, #32]	; (8004450 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004430:	40d9      	lsrs	r1, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	400b      	ands	r3, r1
 8004436:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800443a:	431a      	orrs	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	000fffff 	.word	0x000fffff

08004454 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 031f 	and.w	r3, r3, #31
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800449a:	4013      	ands	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6093      	str	r3, [r2, #8]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	5fffffc0 	.word	0x5fffffc0

080044b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c4:	d101      	bne.n	80044ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <LL_ADC_EnableInternalRegulator+0x24>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	6fffffc0 	.word	0x6fffffc0

08004500 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004514:	d101      	bne.n	800451a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <LL_ADC_Enable+0x24>)
 8004536:	4013      	ands	r3, r2
 8004538:	f043 0201 	orr.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	7fffffc0 	.word	0x7fffffc0

08004550 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <LL_ADC_Disable+0x24>)
 800455e:	4013      	ands	r3, r2
 8004560:	f043 0202 	orr.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	7fffffc0 	.word	0x7fffffc0

08004578 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <LL_ADC_IsEnabled+0x18>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <LL_ADC_IsEnabled+0x1a>
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d101      	bne.n	80045b6 <LL_ADC_IsDisableOngoing+0x18>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <LL_ADC_IsDisableOngoing+0x1a>
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <LL_ADC_REG_StartConversion+0x24>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	f043 0204 	orr.w	r2, r3, #4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	7fffffc0 	.word	0x7fffffc0

080045ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d101      	bne.n	8004604 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d101      	bne.n	800462a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004644:	2300      	movs	r3, #0
 8004646:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e18f      	b.n	8004972 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fe fe73 	bl	800334c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff19 	bl	80044b0 <LL_ADC_IsDeepPowerDownEnabled>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff feff 	bl	800448c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ff34 	bl	8004500 <LL_ADC_IsInternalRegulatorEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d114      	bne.n	80046c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff18 	bl	80044d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a8:	4b87      	ldr	r3, [pc, #540]	; (80048c8 <HAL_ADC_Init+0x290>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	4a87      	ldr	r2, [pc, #540]	; (80048cc <HAL_ADC_Init+0x294>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	3301      	adds	r3, #1
 80046b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046ba:	e002      	b.n	80046c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	3b01      	subs	r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f9      	bne.n	80046bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff17 	bl	8004500 <LL_ADC_IsInternalRegulatorEnabled>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10d      	bne.n	80046f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046dc:	f043 0210 	orr.w	r2, r3, #16
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff77 	bl	80045ec <LL_ADC_REG_IsConversionOngoing>
 80046fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 8129 	bne.w	8004960 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f040 8125 	bne.w	8004960 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ff24 	bl	8004578 <LL_ADC_IsEnabled>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d136      	bne.n	80047a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a65      	ldr	r2, [pc, #404]	; (80048d0 <HAL_ADC_Init+0x298>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_ADC_Init+0x112>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a63      	ldr	r2, [pc, #396]	; (80048d4 <HAL_ADC_Init+0x29c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10e      	bne.n	8004768 <HAL_ADC_Init+0x130>
 800474a:	4861      	ldr	r0, [pc, #388]	; (80048d0 <HAL_ADC_Init+0x298>)
 800474c:	f7ff ff14 	bl	8004578 <LL_ADC_IsEnabled>
 8004750:	4604      	mov	r4, r0
 8004752:	4860      	ldr	r0, [pc, #384]	; (80048d4 <HAL_ADC_Init+0x29c>)
 8004754:	f7ff ff10 	bl	8004578 <LL_ADC_IsEnabled>
 8004758:	4603      	mov	r3, r0
 800475a:	4323      	orrs	r3, r4
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e008      	b.n	800477a <HAL_ADC_Init+0x142>
 8004768:	485b      	ldr	r0, [pc, #364]	; (80048d8 <HAL_ADC_Init+0x2a0>)
 800476a:	f7ff ff05 	bl	8004578 <LL_ADC_IsEnabled>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d012      	beq.n	80047a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a53      	ldr	r2, [pc, #332]	; (80048d0 <HAL_ADC_Init+0x298>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_ADC_Init+0x15a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a51      	ldr	r2, [pc, #324]	; (80048d4 <HAL_ADC_Init+0x29c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_ADC_Init+0x15e>
 8004792:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_ADC_Init+0x2a4>)
 8004794:	e000      	b.n	8004798 <HAL_ADC_Init+0x160>
 8004796:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_ADC_Init+0x2a8>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7ff fd2e 	bl	8004200 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80047a4:	f7ff fcf6 	bl	8004194 <HAL_GetREVID>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d914      	bls.n	80047dc <HAL_ADC_Init+0x1a4>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d110      	bne.n	80047dc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7d5b      	ldrb	r3, [r3, #21]
 80047be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80047ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	7f1b      	ldrb	r3, [r3, #28]
 80047d0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80047d2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047d4:	f043 030c 	orr.w	r3, r3, #12
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e00d      	b.n	80047f8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7d5b      	ldrb	r3, [r3, #21]
 80047e0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047e6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80047ec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7f1b      	ldrb	r3, [r3, #28]
 80047f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7f1b      	ldrb	r3, [r3, #28]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d106      	bne.n	800480e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	3b01      	subs	r3, #1
 8004806:	045b      	lsls	r3, r3, #17
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	4b2c      	ldr	r3, [pc, #176]	; (80048e4 <HAL_ADC_Init+0x2ac>)
 8004832:	4013      	ands	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	430b      	orrs	r3, r1
 800483c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fed2 	bl	80045ec <LL_ADC_REG_IsConversionOngoing>
 8004848:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fedf 	bl	8004612 <LL_ADC_INJ_IsConversionOngoing>
 8004854:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d15f      	bne.n	800491c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d15c      	bne.n	800491c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	7d1b      	ldrb	r3, [r3, #20]
 8004866:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <HAL_ADC_Init+0x2b0>)
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	69b9      	ldr	r1, [r7, #24]
 8004880:	430b      	orrs	r3, r1
 8004882:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800488a:	2b01      	cmp	r3, #1
 800488c:	d130      	bne.n	80048f0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	4b14      	ldr	r3, [pc, #80]	; (80048ec <HAL_ADC_Init+0x2b4>)
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048a2:	3a01      	subs	r2, #1
 80048a4:	0411      	lsls	r1, r2, #16
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048aa:	4311      	orrs	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048b6:	430a      	orrs	r2, r1
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	611a      	str	r2, [r3, #16]
 80048c4:	e01c      	b.n	8004900 <HAL_ADC_Init+0x2c8>
 80048c6:	bf00      	nop
 80048c8:	20000110 	.word	0x20000110
 80048cc:	053e2d63 	.word	0x053e2d63
 80048d0:	40022000 	.word	0x40022000
 80048d4:	40022100 	.word	0x40022100
 80048d8:	58026000 	.word	0x58026000
 80048dc:	40022300 	.word	0x40022300
 80048e0:	58026300 	.word	0x58026300
 80048e4:	fff0c003 	.word	0xfff0c003
 80048e8:	ffffbffc 	.word	0xffffbffc
 80048ec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f001 f804 	bl	8005924 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10c      	bne.n	800493e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f023 010f 	bic.w	r1, r3, #15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	1e5a      	subs	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
 800493c:	e007      	b.n	800494e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 020f 	bic.w	r2, r2, #15
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	f043 0201 	orr.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
 800495e:	e007      	b.n	8004970 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f043 0210 	orr.w	r2, r3, #16
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004970:	7ffb      	ldrb	r3, [r7, #31]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3724      	adds	r7, #36	; 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd90      	pop	{r4, r7, pc}
 800497a:	bf00      	nop

0800497c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a92      	ldr	r2, [pc, #584]	; (8004bd4 <HAL_ADC_Start_IT+0x258>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_ADC_Start_IT+0x1c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a91      	ldr	r2, [pc, #580]	; (8004bd8 <HAL_ADC_Start_IT+0x25c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d101      	bne.n	800499c <HAL_ADC_Start_IT+0x20>
 8004998:	4b90      	ldr	r3, [pc, #576]	; (8004bdc <HAL_ADC_Start_IT+0x260>)
 800499a:	e000      	b.n	800499e <HAL_ADC_Start_IT+0x22>
 800499c:	4b90      	ldr	r3, [pc, #576]	; (8004be0 <HAL_ADC_Start_IT+0x264>)
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fd58 	bl	8004454 <LL_ADC_GetMultimode>
 80049a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fe1e 	bl	80045ec <LL_ADC_REG_IsConversionOngoing>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 8118 	bne.w	8004be8 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_ADC_Start_IT+0x4a>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e113      	b.n	8004bee <HAL_ADC_Start_IT+0x272>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 febe 	bl	8005750 <ADC_Enable>
 80049d4:	4603      	mov	r3, r0
 80049d6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 80f5 	bne.w	8004bca <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049e4:	4b7f      	ldr	r3, [pc, #508]	; (8004be4 <HAL_ADC_Start_IT+0x268>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a78      	ldr	r2, [pc, #480]	; (8004bd8 <HAL_ADC_Start_IT+0x25c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d002      	beq.n	8004a00 <HAL_ADC_Start_IT+0x84>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	e000      	b.n	8004a02 <HAL_ADC_Start_IT+0x86>
 8004a00:	4b74      	ldr	r3, [pc, #464]	; (8004bd4 <HAL_ADC_Start_IT+0x258>)
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d002      	beq.n	8004a10 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d105      	bne.n	8004a1c <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	f023 0206 	bic.w	r2, r3, #6
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	659a      	str	r2, [r3, #88]	; 0x58
 8004a34:	e002      	b.n	8004a3c <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	221c      	movs	r2, #28
 8004a42:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 021c 	bic.w	r2, r2, #28
 8004a5a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d108      	bne.n	8004a76 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0208 	orr.w	r2, r2, #8
 8004a72:	605a      	str	r2, [r3, #4]
          break;
 8004a74:	e008      	b.n	8004a88 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0204 	orr.w	r2, r2, #4
 8004a84:	605a      	str	r2, [r3, #4]
          break;
 8004a86:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0210 	orr.w	r2, r2, #16
 8004a9e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a4c      	ldr	r2, [pc, #304]	; (8004bd8 <HAL_ADC_Start_IT+0x25c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d002      	beq.n	8004ab0 <HAL_ADC_Start_IT+0x134>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	e000      	b.n	8004ab2 <HAL_ADC_Start_IT+0x136>
 8004ab0:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <HAL_ADC_Start_IT+0x258>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d008      	beq.n	8004acc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d002      	beq.n	8004acc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b09      	cmp	r3, #9
 8004aca:	d13a      	bne.n	8004b42 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02d      	beq.n	8004b36 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ae2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d110      	bne.n	8004b14 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0220 	bic.w	r2, r2, #32
 8004b00:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b10:	605a      	str	r2, [r3, #4]
              break;
 8004b12:	e010      	b.n	8004b36 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b22:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0220 	orr.w	r2, r2, #32
 8004b32:	605a      	str	r2, [r3, #4]
              break;
 8004b34:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fd42 	bl	80045c4 <LL_ADC_REG_StartConversion>
 8004b40:	e054      	b.n	8004bec <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a21      	ldr	r2, [pc, #132]	; (8004bd8 <HAL_ADC_Start_IT+0x25c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d002      	beq.n	8004b5e <HAL_ADC_Start_IT+0x1e2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	e000      	b.n	8004b60 <HAL_ADC_Start_IT+0x1e4>
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <HAL_ADC_Start_IT+0x258>)
 8004b60:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d03e      	beq.n	8004bec <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d110      	bne.n	8004ba8 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0220 	bic.w	r2, r2, #32
 8004b94:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba4:	605a      	str	r2, [r3, #4]
              break;
 8004ba6:	e021      	b.n	8004bec <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0220 	orr.w	r2, r2, #32
 8004bc6:	605a      	str	r2, [r3, #4]
              break;
 8004bc8:	e010      	b.n	8004bec <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004bd2:	e00b      	b.n	8004bec <HAL_ADC_Start_IT+0x270>
 8004bd4:	40022000 	.word	0x40022000
 8004bd8:	40022100 	.word	0x40022100
 8004bdc:	40022300 	.word	0x40022300
 8004be0:	58026300 	.word	0x58026300
 8004be4:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
 8004bea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop

08004bf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a87      	ldr	r2, [pc, #540]	; (8004e54 <HAL_ADC_IRQHandler+0x240>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_ADC_IRQHandler+0x30>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a86      	ldr	r2, [pc, #536]	; (8004e58 <HAL_ADC_IRQHandler+0x244>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d101      	bne.n	8004c48 <HAL_ADC_IRQHandler+0x34>
 8004c44:	4b85      	ldr	r3, [pc, #532]	; (8004e5c <HAL_ADC_IRQHandler+0x248>)
 8004c46:	e000      	b.n	8004c4a <HAL_ADC_IRQHandler+0x36>
 8004c48:	4b85      	ldr	r3, [pc, #532]	; (8004e60 <HAL_ADC_IRQHandler+0x24c>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fc02 	bl	8004454 <LL_ADC_GetMultimode>
 8004c50:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d017      	beq.n	8004c8c <HAL_ADC_IRQHandler+0x78>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c76:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 f81a 	bl	8005cb8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_ADC_IRQHandler+0x8c>
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8083 	beq.w	8004db2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d07d      	beq.n	8004db2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d105      	bne.n	8004cce <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fb1c 	bl	8004310 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d062      	beq.n	8004da4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5d      	ldr	r2, [pc, #372]	; (8004e58 <HAL_ADC_IRQHandler+0x244>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d002      	beq.n	8004cee <HAL_ADC_IRQHandler+0xda>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	e000      	b.n	8004cf0 <HAL_ADC_IRQHandler+0xdc>
 8004cee:	4b59      	ldr	r3, [pc, #356]	; (8004e54 <HAL_ADC_IRQHandler+0x240>)
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d008      	beq.n	8004d0a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d002      	beq.n	8004d0a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b09      	cmp	r3, #9
 8004d08:	d104      	bne.n	8004d14 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	e00c      	b.n	8004d2e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a4f      	ldr	r2, [pc, #316]	; (8004e58 <HAL_ADC_IRQHandler+0x244>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d002      	beq.n	8004d24 <HAL_ADC_IRQHandler+0x110>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	e000      	b.n	8004d26 <HAL_ADC_IRQHandler+0x112>
 8004d24:	4b4b      	ldr	r3, [pc, #300]	; (8004e54 <HAL_ADC_IRQHandler+0x240>)
 8004d26:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d135      	bne.n	8004da4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d12e      	bne.n	8004da4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fc4e 	bl	80045ec <LL_ADC_REG_IsConversionOngoing>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11a      	bne.n	8004d8c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 020c 	bic.w	r2, r2, #12
 8004d64:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d112      	bne.n	8004da4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	f043 0201 	orr.w	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
 8004d8a:	e00b      	b.n	8004da4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f043 0210 	orr.w	r2, r3, #16
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fe fa09 	bl	80031bc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	220c      	movs	r2, #12
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADC_IRQHandler+0x1b2>
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80a0 	beq.w	8004f12 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 809a 	beq.w	8004f12 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d105      	bne.n	8004df6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fac7 	bl	800438e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004e00:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fa82 	bl	8004310 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e0c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a11      	ldr	r2, [pc, #68]	; (8004e58 <HAL_ADC_IRQHandler+0x244>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d002      	beq.n	8004e1e <HAL_ADC_IRQHandler+0x20a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	e000      	b.n	8004e20 <HAL_ADC_IRQHandler+0x20c>
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <HAL_ADC_IRQHandler+0x240>)
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d008      	beq.n	8004e3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d002      	beq.n	8004e3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	d104      	bne.n	8004e44 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	e014      	b.n	8004e6e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <HAL_ADC_IRQHandler+0x244>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00a      	beq.n	8004e64 <HAL_ADC_IRQHandler+0x250>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	e008      	b.n	8004e66 <HAL_ADC_IRQHandler+0x252>
 8004e54:	40022000 	.word	0x40022000
 8004e58:	40022100 	.word	0x40022100
 8004e5c:	40022300 	.word	0x40022300
 8004e60:	58026300 	.word	0x58026300
 8004e64:	4b84      	ldr	r3, [pc, #528]	; (8005078 <HAL_ADC_IRQHandler+0x464>)
 8004e66:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d047      	beq.n	8004f04 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_ADC_IRQHandler+0x27a>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d03f      	beq.n	8004f04 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d13a      	bne.n	8004f04 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d133      	bne.n	8004f04 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d12e      	bne.n	8004f04 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fbb1 	bl	8004612 <LL_ADC_INJ_IsConversionOngoing>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11a      	bne.n	8004eec <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d112      	bne.n	8004f04 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	655a      	str	r2, [r3, #84]	; 0x54
 8004eea:	e00b      	b.n	8004f04 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	f043 0210 	orr.w	r2, r3, #16
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 feaf 	bl	8005c68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2260      	movs	r2, #96	; 0x60
 8004f10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d011      	beq.n	8004f40 <HAL_ADC_IRQHandler+0x32c>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8a8 	bl	8005088 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2280      	movs	r2, #128	; 0x80
 8004f3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d012      	beq.n	8004f70 <HAL_ADC_IRQHandler+0x35c>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fe95 	bl	8005c90 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d012      	beq.n	8004fa0 <HAL_ADC_IRQHandler+0x38c>
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fe87 	bl	8005ca4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d043      	beq.n	8005032 <HAL_ADC_IRQHandler+0x41e>
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d03e      	beq.n	8005032 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	e021      	b.n	8005006 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <HAL_ADC_IRQHandler+0x464>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_ADC_IRQHandler+0x3c8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a29      	ldr	r2, [pc, #164]	; (800507c <HAL_ADC_IRQHandler+0x468>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADC_IRQHandler+0x3cc>
 8004fdc:	4b28      	ldr	r3, [pc, #160]	; (8005080 <HAL_ADC_IRQHandler+0x46c>)
 8004fde:	e000      	b.n	8004fe2 <HAL_ADC_IRQHandler+0x3ce>
 8004fe0:	4b28      	ldr	r3, [pc, #160]	; (8005084 <HAL_ADC_IRQHandler+0x470>)
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fa44 	bl	8004470 <LL_ADC_GetMultiDMATransfer>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff2:	e008      	b.n	8005006 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005002:	2301      	movs	r3, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10e      	bne.n	800502a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	f043 0202 	orr.w	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f839 	bl	800509c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2210      	movs	r2, #16
 8005030:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d018      	beq.n	800506e <HAL_ADC_IRQHandler+0x45a>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005042:	2b00      	cmp	r3, #0
 8005044:	d013      	beq.n	800506e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	f043 0208 	orr.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005066:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fe07 	bl	8005c7c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800506e:	bf00      	nop
 8005070:	3728      	adds	r7, #40	; 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40022000 	.word	0x40022000
 800507c:	40022100 	.word	0x40022100
 8005080:	40022300 	.word	0x40022300
 8005084:	58026300 	.word	0x58026300

08005088 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b0a1      	sub	sp, #132	; 0x84
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a9d      	ldr	r2, [pc, #628]	; (8005340 <HAL_ADC_ConfigChannel+0x290>)
 80050ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_ADC_ConfigChannel+0x2a>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e321      	b.n	800571e <HAL_ADC_ConfigChannel+0x66e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fa80 	bl	80045ec <LL_ADC_REG_IsConversionOngoing>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 8306 	bne.w	8005700 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x62>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0e9b      	lsrs	r3, r3, #26
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2201      	movs	r2, #1
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	e016      	b.n	8005140 <HAL_ADC_ConfigChannel+0x90>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800511a:	fa93 f3a3 	rbit	r3, r3
 800511e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005122:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800512a:	2320      	movs	r3, #32
 800512c:	e003      	b.n	8005136 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800512e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005130:	fab3 f383 	clz	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2201      	movs	r2, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	69d1      	ldr	r1, [r2, #28]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	430b      	orrs	r3, r1
 800514c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f7ff f8eb 	bl	8004336 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fa41 	bl	80045ec <LL_ADC_REG_IsConversionOngoing>
 800516a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fa4e 	bl	8004612 <LL_ADC_INJ_IsConversionOngoing>
 8005176:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800517a:	2b00      	cmp	r3, #0
 800517c:	f040 80b3 	bne.w	80052e6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 80af 	bne.w	80052e6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	461a      	mov	r2, r3
 8005196:	f7ff f90d 	bl	80043b4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800519a:	4b6a      	ldr	r3, [pc, #424]	; (8005344 <HAL_ADC_ConfigChannel+0x294>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80051a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a6:	d10b      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x110>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	e01d      	b.n	80051fc <HAL_ADC_ConfigChannel+0x14c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x136>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	e00a      	b.n	80051fc <HAL_ADC_ConfigChannel+0x14c>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b04      	cmp	r3, #4
 8005204:	d027      	beq.n	8005256 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6919      	ldr	r1, [r3, #16]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005214:	f7ff f828 	bl	8004268 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6919      	ldr	r1, [r3, #16]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	7e5b      	ldrb	r3, [r3, #25]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d102      	bne.n	800522e <HAL_ADC_ConfigChannel+0x17e>
 8005228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800522c:	e000      	b.n	8005230 <HAL_ADC_ConfigChannel+0x180>
 800522e:	2300      	movs	r3, #0
 8005230:	461a      	mov	r2, r3
 8005232:	f7ff f852 	bl	80042da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6919      	ldr	r1, [r3, #16]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7e1b      	ldrb	r3, [r3, #24]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_ADC_ConfigChannel+0x19c>
 8005246:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800524a:	e000      	b.n	800524e <HAL_ADC_ConfigChannel+0x19e>
 800524c:	2300      	movs	r3, #0
 800524e:	461a      	mov	r2, r3
 8005250:	f7ff f82a 	bl	80042a8 <LL_ADC_SetDataRightShift>
 8005254:	e047      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	069b      	lsls	r3, r3, #26
 8005266:	429a      	cmp	r2, r3
 8005268:	d107      	bne.n	800527a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005278:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	069b      	lsls	r3, r3, #26
 800528a:	429a      	cmp	r2, r3
 800528c:	d107      	bne.n	800529e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800529c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	069b      	lsls	r3, r3, #26
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d107      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052c0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	069b      	lsls	r3, r3, #26
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d107      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff f944 	bl	8004578 <LL_ADC_IsEnabled>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f040 820d 	bne.w	8005712 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6819      	ldr	r1, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	461a      	mov	r2, r3
 8005306:	f7ff f881 	bl	800440c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <HAL_ADC_ConfigChannel+0x290>)
 8005310:	4293      	cmp	r3, r2
 8005312:	f040 8133 	bne.w	800557c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005322:	2b00      	cmp	r3, #0
 8005324:	d110      	bne.n	8005348 <HAL_ADC_ConfigChannel+0x298>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	0e9b      	lsrs	r3, r3, #26
 800532c:	3301      	adds	r3, #1
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2b09      	cmp	r3, #9
 8005334:	bf94      	ite	ls
 8005336:	2301      	movls	r3, #1
 8005338:	2300      	movhi	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	e01e      	b.n	800537c <HAL_ADC_ConfigChannel+0x2cc>
 800533e:	bf00      	nop
 8005340:	47ff0000 	.word	0x47ff0000
 8005344:	5c001000 	.word	0x5c001000
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005350:	fa93 f3a3 	rbit	r3, r3
 8005354:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005358:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800535a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005360:	2320      	movs	r3, #32
 8005362:	e003      	b.n	800536c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005366:	fab3 f383 	clz	r3, r3
 800536a:	b2db      	uxtb	r3, r3
 800536c:	3301      	adds	r3, #1
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2b09      	cmp	r3, #9
 8005374:	bf94      	ite	ls
 8005376:	2301      	movls	r3, #1
 8005378:	2300      	movhi	r3, #0
 800537a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800537c:	2b00      	cmp	r3, #0
 800537e:	d079      	beq.n	8005474 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <HAL_ADC_ConfigChannel+0x2ec>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	0e9b      	lsrs	r3, r3, #26
 8005392:	3301      	adds	r3, #1
 8005394:	069b      	lsls	r3, r3, #26
 8005396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800539a:	e015      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x318>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a4:	fa93 f3a3 	rbit	r3, r3
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80053aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80053ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80053b4:	2320      	movs	r3, #32
 80053b6:	e003      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80053b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ba:	fab3 f383 	clz	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	3301      	adds	r3, #1
 80053c2:	069b      	lsls	r3, r3, #26
 80053c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x338>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	0e9b      	lsrs	r3, r3, #26
 80053da:	3301      	adds	r3, #1
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	2101      	movs	r1, #1
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	e017      	b.n	8005418 <HAL_ADC_ConfigChannel+0x368>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80053f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80053fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005400:	2320      	movs	r3, #32
 8005402:	e003      	b.n	800540c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005406:	fab3 f383 	clz	r3, r3
 800540a:	b2db      	uxtb	r3, r3
 800540c:	3301      	adds	r3, #1
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2101      	movs	r1, #1
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	ea42 0103 	orr.w	r1, r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <HAL_ADC_ConfigChannel+0x38e>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	0e9b      	lsrs	r3, r3, #26
 800542e:	3301      	adds	r3, #1
 8005430:	f003 021f 	and.w	r2, r3, #31
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	051b      	lsls	r3, r3, #20
 800543c:	e018      	b.n	8005470 <HAL_ADC_ConfigChannel+0x3c0>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	fa93 f3a3 	rbit	r3, r3
 800544a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005456:	2320      	movs	r3, #32
 8005458:	e003      	b.n	8005462 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	fab3 f383 	clz	r3, r3
 8005460:	b2db      	uxtb	r3, r3
 8005462:	3301      	adds	r3, #1
 8005464:	f003 021f 	and.w	r2, r3, #31
 8005468:	4613      	mov	r3, r2
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	4413      	add	r3, r2
 800546e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005470:	430b      	orrs	r3, r1
 8005472:	e07e      	b.n	8005572 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x3e0>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	0e9b      	lsrs	r3, r3, #26
 8005486:	3301      	adds	r3, #1
 8005488:	069b      	lsls	r3, r3, #26
 800548a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800548e:	e015      	b.n	80054bc <HAL_ADC_ConfigChannel+0x40c>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	fa93 f3a3 	rbit	r3, r3
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80054a8:	2320      	movs	r3, #32
 80054aa:	e003      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	fab3 f383 	clz	r3, r3
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	3301      	adds	r3, #1
 80054b6:	069b      	lsls	r3, r3, #26
 80054b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x42c>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	0e9b      	lsrs	r3, r3, #26
 80054ce:	3301      	adds	r3, #1
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	e017      	b.n	800550c <HAL_ADC_ConfigChannel+0x45c>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	fa93 f3a3 	rbit	r3, r3
 80054e8:	61bb      	str	r3, [r7, #24]
  return result;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80054f4:	2320      	movs	r3, #32
 80054f6:	e003      	b.n	8005500 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	3301      	adds	r3, #1
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2101      	movs	r1, #1
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	ea42 0103 	orr.w	r1, r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10d      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x488>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0e9b      	lsrs	r3, r3, #26
 8005522:	3301      	adds	r3, #1
 8005524:	f003 021f 	and.w	r2, r3, #31
 8005528:	4613      	mov	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4413      	add	r3, r2
 800552e:	3b1e      	subs	r3, #30
 8005530:	051b      	lsls	r3, r3, #20
 8005532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005536:	e01b      	b.n	8005570 <HAL_ADC_ConfigChannel+0x4c0>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	fa93 f3a3 	rbit	r3, r3
 8005544:	60fb      	str	r3, [r7, #12]
  return result;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005550:	2320      	movs	r3, #32
 8005552:	e003      	b.n	800555c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	3301      	adds	r3, #1
 800555e:	f003 021f 	and.w	r2, r3, #31
 8005562:	4613      	mov	r3, r2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	4413      	add	r3, r2
 8005568:	3b1e      	subs	r3, #30
 800556a:	051b      	lsls	r3, r3, #20
 800556c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005570:	430b      	orrs	r3, r1
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	6892      	ldr	r2, [r2, #8]
 8005576:	4619      	mov	r1, r3
 8005578:	f7fe ff1c 	bl	80043b4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f280 80c6 	bge.w	8005712 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a67      	ldr	r2, [pc, #412]	; (8005728 <HAL_ADC_ConfigChannel+0x678>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_ADC_ConfigChannel+0x4ea>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a65      	ldr	r2, [pc, #404]	; (800572c <HAL_ADC_ConfigChannel+0x67c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_ADC_ConfigChannel+0x4ee>
 800559a:	4b65      	ldr	r3, [pc, #404]	; (8005730 <HAL_ADC_ConfigChannel+0x680>)
 800559c:	e000      	b.n	80055a0 <HAL_ADC_ConfigChannel+0x4f0>
 800559e:	4b65      	ldr	r3, [pc, #404]	; (8005734 <HAL_ADC_ConfigChannel+0x684>)
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fe53 	bl	800424c <LL_ADC_GetCommonPathInternalCh>
 80055a6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5e      	ldr	r2, [pc, #376]	; (8005728 <HAL_ADC_ConfigChannel+0x678>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_ADC_ConfigChannel+0x50c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5d      	ldr	r2, [pc, #372]	; (800572c <HAL_ADC_ConfigChannel+0x67c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10e      	bne.n	80055da <HAL_ADC_ConfigChannel+0x52a>
 80055bc:	485a      	ldr	r0, [pc, #360]	; (8005728 <HAL_ADC_ConfigChannel+0x678>)
 80055be:	f7fe ffdb 	bl	8004578 <LL_ADC_IsEnabled>
 80055c2:	4604      	mov	r4, r0
 80055c4:	4859      	ldr	r0, [pc, #356]	; (800572c <HAL_ADC_ConfigChannel+0x67c>)
 80055c6:	f7fe ffd7 	bl	8004578 <LL_ADC_IsEnabled>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4323      	orrs	r3, r4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf0c      	ite	eq
 80055d2:	2301      	moveq	r3, #1
 80055d4:	2300      	movne	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	e008      	b.n	80055ec <HAL_ADC_ConfigChannel+0x53c>
 80055da:	4857      	ldr	r0, [pc, #348]	; (8005738 <HAL_ADC_ConfigChannel+0x688>)
 80055dc:	f7fe ffcc 	bl	8004578 <LL_ADC_IsEnabled>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d07d      	beq.n	80056ec <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a51      	ldr	r2, [pc, #324]	; (800573c <HAL_ADC_ConfigChannel+0x68c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d130      	bne.n	800565c <HAL_ADC_ConfigChannel+0x5ac>
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d12b      	bne.n	800565c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a4b      	ldr	r2, [pc, #300]	; (8005738 <HAL_ADC_ConfigChannel+0x688>)
 800560a:	4293      	cmp	r3, r2
 800560c:	f040 8081 	bne.w	8005712 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a44      	ldr	r2, [pc, #272]	; (8005728 <HAL_ADC_ConfigChannel+0x678>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <HAL_ADC_ConfigChannel+0x574>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a43      	ldr	r2, [pc, #268]	; (800572c <HAL_ADC_ConfigChannel+0x67c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d101      	bne.n	8005628 <HAL_ADC_ConfigChannel+0x578>
 8005624:	4a42      	ldr	r2, [pc, #264]	; (8005730 <HAL_ADC_ConfigChannel+0x680>)
 8005626:	e000      	b.n	800562a <HAL_ADC_ConfigChannel+0x57a>
 8005628:	4a42      	ldr	r2, [pc, #264]	; (8005734 <HAL_ADC_ConfigChannel+0x684>)
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f7fe fdf7 	bl	8004226 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005638:	4b41      	ldr	r3, [pc, #260]	; (8005740 <HAL_ADC_ConfigChannel+0x690>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	4a41      	ldr	r2, [pc, #260]	; (8005744 <HAL_ADC_ConfigChannel+0x694>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	099b      	lsrs	r3, r3, #6
 8005646:	3301      	adds	r3, #1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800564c:	e002      	b.n	8005654 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3b01      	subs	r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f9      	bne.n	800564e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800565a:	e05a      	b.n	8005712 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a39      	ldr	r2, [pc, #228]	; (8005748 <HAL_ADC_ConfigChannel+0x698>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d11e      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x5f4>
 8005666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d119      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a30      	ldr	r2, [pc, #192]	; (8005738 <HAL_ADC_ConfigChannel+0x688>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d14b      	bne.n	8005712 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <HAL_ADC_ConfigChannel+0x678>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_ADC_ConfigChannel+0x5de>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a28      	ldr	r2, [pc, #160]	; (800572c <HAL_ADC_ConfigChannel+0x67c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <HAL_ADC_ConfigChannel+0x5e2>
 800568e:	4a28      	ldr	r2, [pc, #160]	; (8005730 <HAL_ADC_ConfigChannel+0x680>)
 8005690:	e000      	b.n	8005694 <HAL_ADC_ConfigChannel+0x5e4>
 8005692:	4a28      	ldr	r2, [pc, #160]	; (8005734 <HAL_ADC_ConfigChannel+0x684>)
 8005694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f7fe fdc2 	bl	8004226 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056a2:	e036      	b.n	8005712 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a28      	ldr	r2, [pc, #160]	; (800574c <HAL_ADC_ConfigChannel+0x69c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d131      	bne.n	8005712 <HAL_ADC_ConfigChannel+0x662>
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d12c      	bne.n	8005712 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_ADC_ConfigChannel+0x688>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d127      	bne.n	8005712 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <HAL_ADC_ConfigChannel+0x678>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_ADC_ConfigChannel+0x626>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <HAL_ADC_ConfigChannel+0x67c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d101      	bne.n	80056da <HAL_ADC_ConfigChannel+0x62a>
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <HAL_ADC_ConfigChannel+0x680>)
 80056d8:	e000      	b.n	80056dc <HAL_ADC_ConfigChannel+0x62c>
 80056da:	4a16      	ldr	r2, [pc, #88]	; (8005734 <HAL_ADC_ConfigChannel+0x684>)
 80056dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fe fd9e 	bl	8004226 <LL_ADC_SetCommonPathInternalCh>
 80056ea:	e012      	b.n	8005712 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80056fe:	e008      	b.n	8005712 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800571a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800571e:	4618      	mov	r0, r3
 8005720:	3784      	adds	r7, #132	; 0x84
 8005722:	46bd      	mov	sp, r7
 8005724:	bd90      	pop	{r4, r7, pc}
 8005726:	bf00      	nop
 8005728:	40022000 	.word	0x40022000
 800572c:	40022100 	.word	0x40022100
 8005730:	40022300 	.word	0x40022300
 8005734:	58026300 	.word	0x58026300
 8005738:	58026000 	.word	0x58026000
 800573c:	cb840000 	.word	0xcb840000
 8005740:	20000110 	.word	0x20000110
 8005744:	053e2d63 	.word	0x053e2d63
 8005748:	c7520000 	.word	0xc7520000
 800574c:	cfb80000 	.word	0xcfb80000

08005750 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe ff0b 	bl	8004578 <LL_ADC_IsEnabled>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d16e      	bne.n	8005846 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	4b38      	ldr	r3, [pc, #224]	; (8005850 <ADC_Enable+0x100>)
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00d      	beq.n	8005792 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	f043 0210 	orr.w	r2, r3, #16
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005786:	f043 0201 	orr.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e05a      	b.n	8005848 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fec6 	bl	8004528 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800579c:	f7fe fcca 	bl	8004134 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2b      	ldr	r2, [pc, #172]	; (8005854 <ADC_Enable+0x104>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <ADC_Enable+0x66>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a29      	ldr	r2, [pc, #164]	; (8005858 <ADC_Enable+0x108>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d101      	bne.n	80057ba <ADC_Enable+0x6a>
 80057b6:	4b29      	ldr	r3, [pc, #164]	; (800585c <ADC_Enable+0x10c>)
 80057b8:	e000      	b.n	80057bc <ADC_Enable+0x6c>
 80057ba:	4b29      	ldr	r3, [pc, #164]	; (8005860 <ADC_Enable+0x110>)
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fe fe49 	bl	8004454 <LL_ADC_GetMultimode>
 80057c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a23      	ldr	r2, [pc, #140]	; (8005858 <ADC_Enable+0x108>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d002      	beq.n	80057d4 <ADC_Enable+0x84>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	e000      	b.n	80057d6 <ADC_Enable+0x86>
 80057d4:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <ADC_Enable+0x104>)
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	4293      	cmp	r3, r2
 80057dc:	d02c      	beq.n	8005838 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d130      	bne.n	8005846 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057e4:	e028      	b.n	8005838 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fec4 	bl	8004578 <LL_ADC_IsEnabled>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fe94 	bl	8004528 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005800:	f7fe fc98 	bl	8004134 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d914      	bls.n	8005838 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d00d      	beq.n	8005838 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f043 0210 	orr.w	r2, r3, #16
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	f043 0201 	orr.w	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e007      	b.n	8005848 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d1cf      	bne.n	80057e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	8000003f 	.word	0x8000003f
 8005854:	40022000 	.word	0x40022000
 8005858:	40022100 	.word	0x40022100
 800585c:	40022300 	.word	0x40022300
 8005860:	58026300 	.word	0x58026300

08005864 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f7fe fe94 	bl	800459e <LL_ADC_IsDisableOngoing>
 8005876:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fe7b 	bl	8004578 <LL_ADC_IsEnabled>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d047      	beq.n	8005918 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d144      	bne.n	8005918 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 030d 	and.w	r3, r3, #13
 8005898:	2b01      	cmp	r3, #1
 800589a:	d10c      	bne.n	80058b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fe55 	bl	8004550 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2203      	movs	r2, #3
 80058ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80058ae:	f7fe fc41 	bl	8004134 <HAL_GetTick>
 80058b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058b4:	e029      	b.n	800590a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f043 0210 	orr.w	r2, r3, #16
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	f043 0201 	orr.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e023      	b.n	800591a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80058d2:	f7fe fc2f 	bl	8004134 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d914      	bls.n	800590a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f043 0210 	orr.w	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	f043 0201 	orr.w	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e007      	b.n	800591a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1dc      	bne.n	80058d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a7a      	ldr	r2, [pc, #488]	; (8005b1c <ADC_ConfigureBoostMode+0x1f8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <ADC_ConfigureBoostMode+0x1c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a79      	ldr	r2, [pc, #484]	; (8005b20 <ADC_ConfigureBoostMode+0x1fc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d109      	bne.n	8005954 <ADC_ConfigureBoostMode+0x30>
 8005940:	4b78      	ldr	r3, [pc, #480]	; (8005b24 <ADC_ConfigureBoostMode+0x200>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005948:	2b00      	cmp	r3, #0
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e008      	b.n	8005966 <ADC_ConfigureBoostMode+0x42>
 8005954:	4b74      	ldr	r3, [pc, #464]	; (8005b28 <ADC_ConfigureBoostMode+0x204>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01c      	beq.n	80059a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800596a:	f005 f9d9 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 800596e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005978:	d010      	beq.n	800599c <ADC_ConfigureBoostMode+0x78>
 800597a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800597e:	d873      	bhi.n	8005a68 <ADC_ConfigureBoostMode+0x144>
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005984:	d002      	beq.n	800598c <ADC_ConfigureBoostMode+0x68>
 8005986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800598a:	d16d      	bne.n	8005a68 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	0c1b      	lsrs	r3, r3, #16
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	60fb      	str	r3, [r7, #12]
        break;
 800599a:	e068      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	60fb      	str	r3, [r7, #12]
        break;
 80059a2:	e064      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80059a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80059a8:	f04f 0100 	mov.w	r1, #0
 80059ac:	f006 fc3a 	bl	800c224 <HAL_RCCEx_GetPeriphCLKFreq>
 80059b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80059ba:	d051      	beq.n	8005a60 <ADC_ConfigureBoostMode+0x13c>
 80059bc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80059c0:	d854      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 80059c2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80059c6:	d047      	beq.n	8005a58 <ADC_ConfigureBoostMode+0x134>
 80059c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80059cc:	d84e      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 80059ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80059d2:	d03d      	beq.n	8005a50 <ADC_ConfigureBoostMode+0x12c>
 80059d4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80059d8:	d848      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 80059da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059de:	d033      	beq.n	8005a48 <ADC_ConfigureBoostMode+0x124>
 80059e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059e4:	d842      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 80059e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80059ea:	d029      	beq.n	8005a40 <ADC_ConfigureBoostMode+0x11c>
 80059ec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80059f0:	d83c      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 80059f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059f6:	d01a      	beq.n	8005a2e <ADC_ConfigureBoostMode+0x10a>
 80059f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059fc:	d836      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 80059fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005a02:	d014      	beq.n	8005a2e <ADC_ConfigureBoostMode+0x10a>
 8005a04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005a08:	d830      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 8005a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0e:	d00e      	beq.n	8005a2e <ADC_ConfigureBoostMode+0x10a>
 8005a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a14:	d82a      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 8005a16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a1a:	d008      	beq.n	8005a2e <ADC_ConfigureBoostMode+0x10a>
 8005a1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a20:	d824      	bhi.n	8005a6c <ADC_ConfigureBoostMode+0x148>
 8005a22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a26:	d002      	beq.n	8005a2e <ADC_ConfigureBoostMode+0x10a>
 8005a28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a2c:	d11e      	bne.n	8005a6c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	0c9b      	lsrs	r3, r3, #18
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	60fb      	str	r3, [r7, #12]
        break;
 8005a3e:	e016      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	091b      	lsrs	r3, r3, #4
 8005a44:	60fb      	str	r3, [r7, #12]
        break;
 8005a46:	e012      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	60fb      	str	r3, [r7, #12]
        break;
 8005a4e:	e00e      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	099b      	lsrs	r3, r3, #6
 8005a54:	60fb      	str	r3, [r7, #12]
        break;
 8005a56:	e00a      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	09db      	lsrs	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]
        break;
 8005a5e:	e006      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	60fb      	str	r3, [r7, #12]
        break;
 8005a66:	e002      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005a6c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005a6e:	f7fe fb91 	bl	8004194 <HAL_GetREVID>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d815      	bhi.n	8005aa8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <ADC_ConfigureBoostMode+0x208>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d908      	bls.n	8005a96 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005a94:	e03e      	b.n	8005b14 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aa4:	609a      	str	r2, [r3, #8]
}
 8005aa6:	e035      	b.n	8005b14 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <ADC_ConfigureBoostMode+0x20c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d808      	bhi.n	8005ac8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ac4:	609a      	str	r2, [r3, #8]
}
 8005ac6:	e025      	b.n	8005b14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <ADC_ConfigureBoostMode+0x210>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d80a      	bhi.n	8005ae6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	e016      	b.n	8005b14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <ADC_ConfigureBoostMode+0x214>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d80a      	bhi.n	8005b04 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b00:	609a      	str	r2, [r3, #8]
}
 8005b02:	e007      	b.n	8005b14 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005b12:	609a      	str	r2, [r3, #8]
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40022000 	.word	0x40022000
 8005b20:	40022100 	.word	0x40022100
 8005b24:	40022300 	.word	0x40022300
 8005b28:	58026300 	.word	0x58026300
 8005b2c:	01312d00 	.word	0x01312d00
 8005b30:	005f5e10 	.word	0x005f5e10
 8005b34:	00bebc20 	.word	0x00bebc20
 8005b38:	017d7840 	.word	0x017d7840

08005b3c <LL_ADC_StartCalibration>:
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <LL_ADC_StartCalibration+0x38>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	3ffeffc0 	.word	0x3ffeffc0

08005b78 <LL_ADC_IsCalibrationOnGoing>:
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b8c:	d101      	bne.n	8005b92 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_ADCEx_Calibration_Start+0x1e>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e04c      	b.n	8005c58 <HAL_ADCEx_Calibration_Start+0xb8>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff fe4c 	bl	8005864 <ADC_Disable>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d135      	bne.n	8005c42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bda:	4b21      	ldr	r3, [pc, #132]	; (8005c60 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	f043 0202 	orr.w	r2, r3, #2
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ffa4 	bl	8005b3c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005bf4:	e014      	b.n	8005c20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d30d      	bcc.n	8005c20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	f023 0312 	bic.w	r3, r3, #18
 8005c0c:	f043 0210 	orr.w	r2, r3, #16
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e01b      	b.n	8005c58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ffa7 	bl	8005b78 <LL_ADC_IsCalibrationOnGoing>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e2      	bne.n	8005bf6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c34:	f023 0303 	bic.w	r3, r3, #3
 8005c38:	f043 0201 	orr.w	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
 8005c40:	e005      	b.n	8005c4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	f043 0210 	orr.w	r2, r3, #16
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	ffffeefd 	.word	0xffffeefd
 8005c64:	25c3f800 	.word	0x25c3f800

08005c68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <__NVIC_SetPriorityGrouping>:
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <__NVIC_SetPriorityGrouping+0x40>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005cf4:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <__NVIC_SetPriorityGrouping+0x44>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cfa:	4a04      	ldr	r2, [pc, #16]	; (8005d0c <__NVIC_SetPriorityGrouping+0x40>)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	60d3      	str	r3, [r2, #12]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	e000ed00 	.word	0xe000ed00
 8005d10:	05fa0000 	.word	0x05fa0000

08005d14 <__NVIC_GetPriorityGrouping>:
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d18:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <__NVIC_GetPriorityGrouping+0x18>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	f003 0307 	and.w	r3, r3, #7
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <__NVIC_EnableIRQ>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	db0b      	blt.n	8005d5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	f003 021f 	and.w	r2, r3, #31
 8005d48:	4907      	ldr	r1, [pc, #28]	; (8005d68 <__NVIC_EnableIRQ+0x38>)
 8005d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	2001      	movs	r0, #1
 8005d52:	fa00 f202 	lsl.w	r2, r0, r2
 8005d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	e000e100 	.word	0xe000e100

08005d6c <__NVIC_SetPriority>:
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	db0a      	blt.n	8005d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	490c      	ldr	r1, [pc, #48]	; (8005db8 <__NVIC_SetPriority+0x4c>)
 8005d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d8a:	0112      	lsls	r2, r2, #4
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	440b      	add	r3, r1
 8005d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d94:	e00a      	b.n	8005dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	4908      	ldr	r1, [pc, #32]	; (8005dbc <__NVIC_SetPriority+0x50>)
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	3b04      	subs	r3, #4
 8005da4:	0112      	lsls	r2, r2, #4
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	440b      	add	r3, r1
 8005daa:	761a      	strb	r2, [r3, #24]
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	e000e100 	.word	0xe000e100
 8005dbc:	e000ed00 	.word	0xe000ed00

08005dc0 <NVIC_EncodePriority>:
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b089      	sub	sp, #36	; 0x24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f1c3 0307 	rsb	r3, r3, #7
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	bf28      	it	cs
 8005dde:	2304      	movcs	r3, #4
 8005de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3304      	adds	r3, #4
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d902      	bls.n	8005df0 <NVIC_EncodePriority+0x30>
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3b03      	subs	r3, #3
 8005dee:	e000      	b.n	8005df2 <NVIC_EncodePriority+0x32>
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43da      	mvns	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	401a      	ands	r2, r3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e08:	f04f 31ff 	mov.w	r1, #4294967295
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e12:	43d9      	mvns	r1, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e18:	4313      	orrs	r3, r2
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3724      	adds	r7, #36	; 0x24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e38:	d301      	bcc.n	8005e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e00f      	b.n	8005e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e3e:	4a0a      	ldr	r2, [pc, #40]	; (8005e68 <SysTick_Config+0x40>)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e46:	210f      	movs	r1, #15
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	f7ff ff8e 	bl	8005d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <SysTick_Config+0x40>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e56:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <SysTick_Config+0x40>)
 8005e58:	2207      	movs	r2, #7
 8005e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	e000e010 	.word	0xe000e010

08005e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff ff29 	bl	8005ccc <__NVIC_SetPriorityGrouping>
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b086      	sub	sp, #24
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	4603      	mov	r3, r0
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e90:	f7ff ff40 	bl	8005d14 <__NVIC_GetPriorityGrouping>
 8005e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f7ff ff90 	bl	8005dc0 <NVIC_EncodePriority>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff ff5f 	bl	8005d6c <__NVIC_SetPriority>
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff ff33 	bl	8005d30 <__NVIC_EnableIRQ>
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff ffa4 	bl	8005e28 <SysTick_Config>
 8005ee0:	4603      	mov	r3, r0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005ef0:	f3bf 8f5f 	dmb	sy
}
 8005ef4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <HAL_MPU_Disable+0x28>)
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	4a06      	ldr	r2, [pc, #24]	; (8005f14 <HAL_MPU_Disable+0x28>)
 8005efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f00:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_MPU_Disable+0x2c>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	e000ed00 	.word	0xe000ed00
 8005f18:	e000ed90 	.word	0xe000ed90

08005f1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005f24:	4a0b      	ldr	r2, [pc, #44]	; (8005f54 <HAL_MPU_Enable+0x38>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <HAL_MPU_Enable+0x3c>)
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <HAL_MPU_Enable+0x3c>)
 8005f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f38:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005f3a:	f3bf 8f4f 	dsb	sy
}
 8005f3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f40:	f3bf 8f6f 	isb	sy
}
 8005f44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	e000ed90 	.word	0xe000ed90
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	785a      	ldrb	r2, [r3, #1]
 8005f68:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_MPU_ConfigRegion+0x84>)
 8005f6a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d029      	beq.n	8005fc8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005f74:	4a1a      	ldr	r2, [pc, #104]	; (8005fe0 <HAL_MPU_ConfigRegion+0x84>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	7b1b      	ldrb	r3, [r3, #12]
 8005f80:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	7adb      	ldrb	r3, [r3, #11]
 8005f86:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7a9b      	ldrb	r3, [r3, #10]
 8005f8e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005f90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	7b5b      	ldrb	r3, [r3, #13]
 8005f96:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005f98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	7b9b      	ldrb	r3, [r3, #14]
 8005f9e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005fa0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7bdb      	ldrb	r3, [r3, #15]
 8005fa6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005fa8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	7a5b      	ldrb	r3, [r3, #9]
 8005fae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005fb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	7a1b      	ldrb	r3, [r3, #8]
 8005fb6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005fb8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	7812      	ldrb	r2, [r2, #0]
 8005fbe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005fc0:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005fc2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005fc4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005fc6:	e005      	b.n	8005fd4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <HAL_MPU_ConfigRegion+0x84>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005fce:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <HAL_MPU_ConfigRegion+0x84>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	611a      	str	r2, [r3, #16]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	e000ed90 	.word	0xe000ed90

08005fe4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e014      	b.n	8006020 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	791b      	ldrb	r3, [r3, #4]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d105      	bne.n	800600c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fd fa08 	bl	800341c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	795b      	ldrb	r3, [r3, #5]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_DAC_Start+0x16>
 800603a:	2302      	movs	r3, #2
 800603c:	e040      	b.n	80060c0 <HAL_DAC_Start+0x98>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6819      	ldr	r1, [r3, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2201      	movs	r2, #1
 8006058:	409a      	lsls	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10f      	bne.n	8006088 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006072:	2b02      	cmp	r3, #2
 8006074:	d11d      	bne.n	80060b2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0201 	orr.w	r2, r2, #1
 8006084:	605a      	str	r2, [r3, #4]
 8006086:	e014      	b.n	80060b2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2102      	movs	r1, #2
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	429a      	cmp	r2, r3
 80060a0:	d107      	bne.n	80060b2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0202 	orr.w	r2, r2, #2
 80060b0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d105      	bne.n	80060f6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	3308      	adds	r3, #8
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e004      	b.n	8006100 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4413      	add	r3, r2
 80060fc:	3314      	adds	r3, #20
 80060fe:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	461a      	mov	r2, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	795b      	ldrb	r3, [r3, #5]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_DAC_ConfigChannel+0x18>
 800612c:	2302      	movs	r3, #2
 800612e:	e12a      	b.n	8006386 <HAL_DAC_ConfigChannel+0x26e>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2202      	movs	r2, #2
 800613a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b04      	cmp	r3, #4
 8006142:	f040 8081 	bne.w	8006248 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006146:	f7fd fff5 	bl	8004134 <HAL_GetTick>
 800614a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d140      	bne.n	80061d4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006152:	e018      	b.n	8006186 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006154:	f7fd ffee 	bl	8004134 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d911      	bls.n	8006186 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006168:	4b89      	ldr	r3, [pc, #548]	; (8006390 <HAL_DAC_ConfigChannel+0x278>)
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f043 0208 	orr.w	r2, r3, #8
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2203      	movs	r2, #3
 8006180:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e0ff      	b.n	8006386 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800618c:	4b80      	ldr	r3, [pc, #512]	; (8006390 <HAL_DAC_ConfigChannel+0x278>)
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1df      	bne.n	8006154 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8006194:	2001      	movs	r0, #1
 8006196:	f7fd ffd9 	bl	800414c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	6992      	ldr	r2, [r2, #24]
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
 80061a4:	e023      	b.n	80061ee <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80061a6:	f7fd ffc5 	bl	8004134 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d90f      	bls.n	80061d4 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	da0a      	bge.n	80061d4 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f043 0208 	orr.w	r2, r3, #8
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2203      	movs	r2, #3
 80061ce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e0d8      	b.n	8006386 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061da:	2b00      	cmp	r3, #0
 80061dc:	dbe3      	blt.n	80061a6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80061de:	2001      	movs	r0, #1
 80061e0:	f7fd ffb4 	bl	800414c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	6992      	ldr	r2, [r2, #24]
 80061ec:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	ea02 0103 	and.w	r1, r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	409a      	lsls	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	21ff      	movs	r1, #255	; 0xff
 800622a:	fa01 f303 	lsl.w	r3, r1, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	ea02 0103 	and.w	r1, r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	409a      	lsls	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d11d      	bne.n	800628c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	221f      	movs	r2, #31
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	43db      	mvns	r3, r3
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4013      	ands	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2207      	movs	r2, #7
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	43db      	mvns	r3, r3
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4013      	ands	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d102      	bne.n	80062b6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	e00f      	b.n	80062d6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d102      	bne.n	80062c4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80062be:	2301      	movs	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e008      	b.n	80062d6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80062cc:	2301      	movs	r3, #1
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e001      	b.n	80062d6 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4313      	orrs	r3, r2
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	43da      	mvns	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	400a      	ands	r2, r1
 800631c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4013      	ands	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6819      	ldr	r1, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	22c0      	movs	r2, #192	; 0xc0
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	43da      	mvns	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	400a      	ands	r2, r1
 8006376:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20008000 	.word	0x20008000

08006394 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e0cf      	b.n	8006546 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2223      	movs	r2, #35	; 0x23
 80063b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f009 f9d5 	bl	800f768 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063be:	4b64      	ldr	r3, [pc, #400]	; (8006550 <HAL_ETH_Init+0x1bc>)
 80063c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063c4:	4a62      	ldr	r2, [pc, #392]	; (8006550 <HAL_ETH_Init+0x1bc>)
 80063c6:	f043 0302 	orr.w	r3, r3, #2
 80063ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80063ce:	4b60      	ldr	r3, [pc, #384]	; (8006550 <HAL_ETH_Init+0x1bc>)
 80063d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7a1b      	ldrb	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80063e4:	2000      	movs	r0, #0
 80063e6:	f7fd fee1 	bl	80041ac <HAL_SYSCFG_ETHInterfaceSelect>
 80063ea:	e003      	b.n	80063f4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80063ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80063f0:	f7fd fedc 	bl	80041ac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80063f4:	4b57      	ldr	r3, [pc, #348]	; (8006554 <HAL_ETH_Init+0x1c0>)
 80063f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800640e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006410:	f7fd fe90 	bl	8004134 <HAL_GetTick>
 8006414:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006416:	e011      	b.n	800643c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006418:	f7fd fe8c 	bl	8004134 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006426:	d909      	bls.n	800643c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2204      	movs	r2, #4
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	22e0      	movs	r2, #224	; 0xe0
 8006434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e084      	b.n	8006546 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e4      	bne.n	8006418 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fd94 	bl	8006f7c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006454:	f004 fc64 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 8006458:	4603      	mov	r3, r0
 800645a:	4a3f      	ldr	r2, [pc, #252]	; (8006558 <HAL_ETH_Init+0x1c4>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	0c9a      	lsrs	r2, r3, #18
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3a01      	subs	r2, #1
 8006468:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 ff7f 	bl	8007370 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800647e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800648e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	22e0      	movs	r2, #224	; 0xe0
 80064aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e049      	b.n	8006546 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80064be:	4b27      	ldr	r3, [pc, #156]	; (800655c <HAL_ETH_Init+0x1c8>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6952      	ldr	r2, [r2, #20]
 80064c6:	0051      	lsls	r1, r2, #1
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	430b      	orrs	r3, r1
 80064ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064d2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 ffe7 	bl	80074aa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 f82d 	bl	800753c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	3305      	adds	r3, #5
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	4619      	mov	r1, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	3303      	adds	r3, #3
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	061a      	lsls	r2, r3, #24
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	3302      	adds	r3, #2
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	3301      	adds	r3, #1
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006520:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800652e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006530:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2210      	movs	r2, #16
 8006540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	58024400 	.word	0x58024400
 8006554:	58000400 	.word	0x58000400
 8006558:	431bde83 	.word	0x431bde83
 800655c:	ffff8001 	.word	0xffff8001

08006560 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800656e:	2b10      	cmp	r3, #16
 8006570:	d153      	bne.n	800661a <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2223      	movs	r2, #35	; 0x23
 8006576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2204      	movs	r2, #4
 800657e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f9f6 	bl	8006972 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0202 	orr.w	r2, r2, #2
 8006594:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065d2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8006606:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800660a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2223      	movs	r2, #35	; 0x23
 8006612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	e000      	b.n	800661c <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
  }
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006632:	2b23      	cmp	r3, #35	; 0x23
 8006634:	d13f      	bne.n	80066b6 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2223      	movs	r2, #35	; 0x23
 800663a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006646:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6812      	ldr	r2, [r2, #0]
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006656:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006662:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6812      	ldr	r2, [r2, #0]
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006672:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0202 	bic.w	r2, r2, #2
 80066a8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2210      	movs	r2, #16
 80066ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e000      	b.n	80066b8 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f043 0201 	orr.w	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e07f      	b.n	80067ea <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f0:	2b23      	cmp	r3, #35	; 0x23
 80066f2:	d179      	bne.n	80067e8 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80066f4:	2200      	movs	r2, #0
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 ff7d 	bl	80075f8 <ETH_Prepare_Tx_Descriptors>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f043 0202 	orr.w	r2, r3, #2
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e068      	b.n	80067ea <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8006718:	f3bf 8f4f 	dsb	sy
}
 800671c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3206      	adds	r2, #6
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	629a      	str	r2, [r3, #40]	; 0x28
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	2b03      	cmp	r3, #3
 800673c:	d904      	bls.n	8006748 <HAL_ETH_Transmit+0x84>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	1f1a      	subs	r2, r3, #4
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3106      	adds	r1, #6
 8006754:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006758:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800675c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8006760:	f7fd fce8 	bl	8004134 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006766:	e039      	b.n	80067dc <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006770:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d012      	beq.n	80067a2 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006782:	f043 0208 	orr.w	r2, r3, #8
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006794:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e023      	b.n	80067ea <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d018      	beq.n	80067dc <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067aa:	f7fd fcc3 	bl	8004134 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d302      	bcc.n	80067c0 <HAL_ETH_Transmit+0xfc>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10d      	bne.n	80067dc <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	f043 0204 	orr.w	r2, r3, #4
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80067d6:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e006      	b.n	80067ea <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dbc1      	blt.n	8006768 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	e000      	b.n	80067ea <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b088      	sub	sp, #32
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	f043 0201 	orr.w	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e0a5      	b.n	800696a <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006824:	2b23      	cmp	r3, #35	; 0x23
 8006826:	d001      	beq.n	800682c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e09e      	b.n	800696a <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	3212      	adds	r2, #18
 8006838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006842:	f1c3 0304 	rsb	r3, r3, #4
 8006846:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006848:	e067      	b.n	800691a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <HAL_ETH_ReadData+0x88>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d03d      	beq.n	80068f6 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80068d0:	461a      	mov	r2, r3
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f009 f91f 	bl	800fb18 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	441a      	add	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	3301      	adds	r3, #1
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d902      	bls.n	8006908 <HAL_ETH_ReadData+0x116>
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3b04      	subs	r3, #4
 8006906:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	3212      	adds	r2, #18
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3301      	adds	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800691e:	2b00      	cmp	r3, #0
 8006920:	db06      	blt.n	8006930 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	d202      	bcs.n	8006930 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d08c      	beq.n	800684a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	441a      	add	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f814 	bl	8006972 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d108      	bne.n	8006968 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	e000      	b.n	800696a <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
}
 800696a:	4618      	mov	r0, r3
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b088      	sub	sp, #32
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800697e:	2301      	movs	r3, #1
 8006980:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006986:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	3212      	adds	r2, #18
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006998:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800699a:	e03b      	b.n	8006a14 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d112      	bne.n	80069ca <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80069a4:	f107 030c 	add.w	r3, r7, #12
 80069a8:	4618      	mov	r0, r3
 80069aa:	f009 f885 	bl	800fab8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	74fb      	strb	r3, [r7, #19]
 80069b8:	e007      	b.n	80069ca <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	461a      	mov	r2, r3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	461a      	mov	r2, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80069ca:	7cfb      	ldrb	r3, [r7, #19]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d021      	beq.n	8006a14 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80069d0:	f3bf 8f5f 	dmb	sy
}
 80069d4:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80069e4:	60da      	str	r2, [r3, #12]
 80069e6:	e003      	b.n	80069f0 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80069ee:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	3301      	adds	r3, #1
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d902      	bls.n	8006a02 <ETH_UpdateDescriptor+0x90>
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	3b04      	subs	r3, #4
 8006a00:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	3212      	adds	r2, #18
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	617b      	str	r3, [r7, #20]
      desccount--;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <ETH_UpdateDescriptor+0xae>
 8006a1a:	7cfb      	ldrb	r3, [r7, #19]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1bd      	bne.n	800699c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d00d      	beq.n	8006a46 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a32:	461a      	mov	r2, r3
 8006a34:	2300      	movs	r3, #0
 8006a36:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8006a46:	bf00      	nop
 8006a48:	3720      	adds	r7, #32
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e03e      	b.n	8006aee <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a78:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	055b      	lsls	r3, r3, #21
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	041b      	lsls	r3, r3, #16
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f043 030c 	orr.w	r3, r3, #12
 8006a9c:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006ab0:	f7fd fb40 	bl	8004134 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006ab6:	e009      	b.n	8006acc <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006ab8:	f7fd fb3c 	bl	8004134 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ac6:	d901      	bls.n	8006acc <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e010      	b.n	8006aee <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1ed      	bne.n	8006ab8 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e03c      	b.n	8006b94 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b22:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	055b      	lsls	r3, r3, #21
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f023 030c 	bic.w	r3, r3, #12
 8006b46:	f043 0304 	orr.w	r3, r3, #4
 8006b4a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <HAL_ETH_WritePHYRegister+0xa4>)
 8006b5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006b5e:	4a0f      	ldr	r2, [pc, #60]	; (8006b9c <HAL_ETH_WritePHYRegister+0xa4>)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006b66:	f7fd fae5 	bl	8004134 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006b6c:	e009      	b.n	8006b82 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006b6e:	f7fd fae1 	bl	8004134 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b7c:	d901      	bls.n	8006b82 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e008      	b.n	8006b94 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ed      	bne.n	8006b6e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40028000 	.word	0x40028000

08006ba0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e1c3      	b.n	8006f3c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 020c 	and.w	r2, r3, #12
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bf14      	ite	ne
 8006bd0:	2301      	movne	r3, #1
 8006bd2:	2300      	moveq	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf0c      	ite	eq
 8006bfa:	2301      	moveq	r3, #1
 8006bfc:	2300      	movne	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bf14      	ite	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	2300      	moveq	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bf0c      	ite	eq
 8006c30:	2301      	moveq	r3, #1
 8006c32:	2300      	movne	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	2301      	movne	r3, #1
 8006c4c:	2300      	moveq	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	bf14      	ite	ne
 8006c64:	2301      	movne	r3, #1
 8006c66:	2300      	moveq	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	bf14      	ite	ne
 8006c9a:	2301      	movne	r3, #1
 8006c9c:	2300      	moveq	r3, #0
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bf14      	ite	ne
 8006ce8:	2301      	movne	r3, #1
 8006cea:	2300      	moveq	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf14      	ite	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	2300      	moveq	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bf0c      	ite	eq
 8006d94:	2301      	moveq	r3, #1
 8006d96:	2300      	movne	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bf14      	ite	ne
 8006db0:	2301      	movne	r3, #1
 8006db2:	2300      	moveq	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bf14      	ite	ne
 8006dcc:	2301      	movne	r3, #1
 8006dce:	2300      	moveq	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	0e5b      	lsrs	r3, r3, #25
 8006dfe:	f003 021f 	and.w	r2, r3, #31
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bf14      	ite	ne
 8006e14:	2301      	movne	r3, #1
 8006e16:	2300      	moveq	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 020f 	and.w	r2, r3, #15
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bf14      	ite	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	2300      	moveq	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bf0c      	ite	eq
 8006e5a:	2301      	moveq	r3, #1
 8006e5c:	2300      	movne	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bf14      	ite	ne
 8006e94:	2301      	movne	r3, #1
 8006e96:	2300      	moveq	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bf14      	ite	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	2300      	moveq	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006ec8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006ed8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf14      	ite	ne
 8006ef0:	2301      	movne	r3, #1
 8006ef2:	2300      	moveq	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf14      	ite	ne
 8006f0e:	2301      	movne	r3, #1
 8006f10:	2300      	moveq	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e00b      	b.n	8006f74 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f62:	2b10      	cmp	r3, #16
 8006f64:	d105      	bne.n	8006f72 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f85f 	bl	800702c <ETH_SetMACConfig>

    return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e000      	b.n	8006f74 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
  }
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006f96:	f003 fec3 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 8006f9a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d908      	bls.n	8006fb6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a1d      	ldr	r2, [pc, #116]	; (800701c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d804      	bhi.n	8006fb6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e027      	b.n	8007006 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4a18      	ldr	r2, [pc, #96]	; (800701c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d908      	bls.n	8006fd0 <HAL_ETH_SetMDIOClockRange+0x54>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4a17      	ldr	r2, [pc, #92]	; (8007020 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d204      	bcs.n	8006fd0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	e01a      	b.n	8007006 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4a13      	ldr	r2, [pc, #76]	; (8007020 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d303      	bcc.n	8006fe0 <HAL_ETH_SetMDIOClockRange+0x64>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4a12      	ldr	r2, [pc, #72]	; (8007024 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d911      	bls.n	8007004 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a10      	ldr	r2, [pc, #64]	; (8007024 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d908      	bls.n	8006ffa <HAL_ETH_SetMDIOClockRange+0x7e>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4a0f      	ldr	r2, [pc, #60]	; (8007028 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d804      	bhi.n	8006ffa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e005      	b.n	8007006 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e000      	b.n	8007006 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007004:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	01312cff 	.word	0x01312cff
 800701c:	02160ebf 	.word	0x02160ebf
 8007020:	03938700 	.word	0x03938700
 8007024:	05f5e0ff 	.word	0x05f5e0ff
 8007028:	08f0d17f 	.word	0x08f0d17f

0800702c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800703e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	791b      	ldrb	r3, [r3, #4]
 8007044:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8007046:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	7b1b      	ldrb	r3, [r3, #12]
 800704c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800704e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	7b5b      	ldrb	r3, [r3, #13]
 8007054:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007056:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	7b9b      	ldrb	r3, [r3, #14]
 800705c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800705e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	7bdb      	ldrb	r3, [r3, #15]
 8007064:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007066:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	7c12      	ldrb	r2, [r2, #16]
 800706c:	2a00      	cmp	r2, #0
 800706e:	d102      	bne.n	8007076 <ETH_SetMACConfig+0x4a>
 8007070:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007074:	e000      	b.n	8007078 <ETH_SetMACConfig+0x4c>
 8007076:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007078:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	7c52      	ldrb	r2, [r2, #17]
 800707e:	2a00      	cmp	r2, #0
 8007080:	d102      	bne.n	8007088 <ETH_SetMACConfig+0x5c>
 8007082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007086:	e000      	b.n	800708a <ETH_SetMACConfig+0x5e>
 8007088:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800708a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	7c9b      	ldrb	r3, [r3, #18]
 8007090:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007092:	431a      	orrs	r2, r3
               macconf->Speed |
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8007098:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800709e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	7f1b      	ldrb	r3, [r3, #28]
 80070a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80070a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	7f5b      	ldrb	r3, [r3, #29]
 80070ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80070ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	7f92      	ldrb	r2, [r2, #30]
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	d102      	bne.n	80070be <ETH_SetMACConfig+0x92>
 80070b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070bc:	e000      	b.n	80070c0 <ETH_SetMACConfig+0x94>
 80070be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80070c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	7fdb      	ldrb	r3, [r3, #31]
 80070c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80070c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	d102      	bne.n	80070da <ETH_SetMACConfig+0xae>
 80070d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070d8:	e000      	b.n	80070dc <ETH_SetMACConfig+0xb0>
 80070da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80070dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80070e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80070ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4b56      	ldr	r3, [pc, #344]	; (8007258 <ETH_SetMACConfig+0x22c>)
 80070fe:	4013      	ands	r3, r2
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	68f9      	ldr	r1, [r7, #12]
 8007106:	430b      	orrs	r3, r1
 8007108:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007116:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007118:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007120:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007122:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800712a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800712c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007134:	2a00      	cmp	r2, #0
 8007136:	d102      	bne.n	800713e <ETH_SetMACConfig+0x112>
 8007138:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800713c:	e000      	b.n	8007140 <ETH_SetMACConfig+0x114>
 800713e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007140:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	4b42      	ldr	r3, [pc, #264]	; (800725c <ETH_SetMACConfig+0x230>)
 8007152:	4013      	ands	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6812      	ldr	r2, [r2, #0]
 8007158:	68f9      	ldr	r1, [r7, #12]
 800715a:	430b      	orrs	r3, r1
 800715c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007164:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	4b3a      	ldr	r3, [pc, #232]	; (8007260 <ETH_SetMACConfig+0x234>)
 8007176:	4013      	ands	r3, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	68f9      	ldr	r1, [r7, #12]
 800717e:	430b      	orrs	r3, r1
 8007180:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007188:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800718e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007196:	2a00      	cmp	r2, #0
 8007198:	d101      	bne.n	800719e <ETH_SetMACConfig+0x172>
 800719a:	2280      	movs	r2, #128	; 0x80
 800719c:	e000      	b.n	80071a0 <ETH_SetMACConfig+0x174>
 800719e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80071a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80071b6:	4013      	ands	r3, r2
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	68f9      	ldr	r1, [r7, #12]
 80071be:	430b      	orrs	r3, r1
 80071c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80071c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80071d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071de:	f023 0103 	bic.w	r1, r3, #3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80071f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007212:	2a00      	cmp	r2, #0
 8007214:	d101      	bne.n	800721a <ETH_SetMACConfig+0x1ee>
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	e000      	b.n	800721c <ETH_SetMACConfig+0x1f0>
 800721a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800721c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007224:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007226:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800722e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800723c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	430a      	orrs	r2, r1
 8007248:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	00048083 	.word	0x00048083
 800725c:	c0f88000 	.word	0xc0f88000
 8007260:	fffffef0 	.word	0xfffffef0

08007264 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4b38      	ldr	r3, [pc, #224]	; (800735c <ETH_SetDMAConfig+0xf8>)
 800727a:	4013      	ands	r3, r2
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	6811      	ldr	r1, [r2, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	430b      	orrs	r3, r1
 8007286:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800728a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	791b      	ldrb	r3, [r3, #4]
 8007290:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007296:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	7b1b      	ldrb	r3, [r3, #12]
 800729c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	4b2c      	ldr	r3, [pc, #176]	; (8007360 <ETH_SetDMAConfig+0xfc>)
 80072ae:	4013      	ands	r3, r2
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	68f9      	ldr	r1, [r7, #12]
 80072b6:	430b      	orrs	r3, r1
 80072b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	7b5b      	ldrb	r3, [r3, #13]
 80072c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80072d8:	4b22      	ldr	r3, [pc, #136]	; (8007364 <ETH_SetDMAConfig+0x100>)
 80072da:	4013      	ands	r3, r2
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	68f9      	ldr	r1, [r7, #12]
 80072e2:	430b      	orrs	r3, r1
 80072e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	7d1b      	ldrb	r3, [r3, #20]
 80072f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80072f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	7f5b      	ldrb	r3, [r3, #29]
 80072fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800730e:	4b16      	ldr	r3, [pc, #88]	; (8007368 <ETH_SetDMAConfig+0x104>)
 8007310:	4013      	ands	r3, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	430b      	orrs	r3, r1
 800731a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800731e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	7f1b      	ldrb	r3, [r3, #28]
 8007326:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007338:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <ETH_SetDMAConfig+0x108>)
 800733e:	4013      	ands	r3, r2
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	68f9      	ldr	r1, [r7, #12]
 8007346:	430b      	orrs	r3, r1
 8007348:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800734c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	ffff87fd 	.word	0xffff87fd
 8007360:	ffff2ffe 	.word	0xffff2ffe
 8007364:	fffec000 	.word	0xfffec000
 8007368:	ffc0efef 	.word	0xffc0efef
 800736c:	7fc0ffff 	.word	0x7fc0ffff

08007370 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b0a4      	sub	sp, #144	; 0x90
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800737e:	2300      	movs	r3, #0
 8007380:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007382:	2300      	movs	r3, #0
 8007384:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007388:	2300      	movs	r3, #0
 800738a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007394:	2301      	movs	r3, #1
 8007396:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80073ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80073c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80073cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80073d4:	2300      	movs	r3, #0
 80073d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80073de:	2300      	movs	r3, #0
 80073e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80073ea:	2300      	movs	r3, #0
 80073ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80073f2:	2300      	movs	r3, #0
 80073f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007408:	2320      	movs	r3, #32
 800740a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800740e:	2301      	movs	r3, #1
 8007410:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007414:	2300      	movs	r3, #0
 8007416:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800741a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007420:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007424:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007426:	2300      	movs	r3, #0
 8007428:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800742c:	2302      	movs	r3, #2
 800742e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007432:	2300      	movs	r3, #0
 8007434:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007438:	2300      	movs	r3, #0
 800743a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800743e:	2300      	movs	r3, #0
 8007440:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800744a:	2300      	movs	r3, #0
 800744c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fde6 	bl	800702c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007460:	2301      	movs	r3, #1
 8007462:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007464:	2301      	movs	r3, #1
 8007466:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007468:	2300      	movs	r3, #0
 800746a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007472:	2300      	movs	r3, #0
 8007474:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8007476:	2300      	movs	r3, #0
 8007478:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800747a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800747e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007480:	2300      	movs	r3, #0
 8007482:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007488:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800748a:	2300      	movs	r3, #0
 800748c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007490:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007496:	f107 0308 	add.w	r3, r7, #8
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff fee1 	bl	8007264 <ETH_SetDMAConfig>
}
 80074a2:	bf00      	nop
 80074a4:	3790      	adds	r7, #144	; 0x90
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e01d      	b.n	80074f4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68d9      	ldr	r1, [r3, #12]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2200      	movs	r2, #0
 80074d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	3206      	adds	r2, #6
 80074ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3301      	adds	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d9de      	bls.n	80074b8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007508:	461a      	mov	r2, r3
 800750a:	2303      	movs	r3, #3
 800750c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e023      	b.n	8007592 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6919      	ldr	r1, [r3, #16]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4613      	mov	r3, r2
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	4413      	add	r3, r2
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	440b      	add	r3, r1
 800755a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2200      	movs	r2, #0
 8007566:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2200      	movs	r2, #0
 800756c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2200      	movs	r2, #0
 8007572:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2200      	movs	r2, #0
 8007578:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	3212      	adds	r2, #18
 8007588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d9d8      	bls.n	800754a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075be:	461a      	mov	r2, r3
 80075c0:	2303      	movs	r3, #3
 80075c2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b08d      	sub	sp, #52	; 0x34
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3318      	adds	r3, #24
 8007608:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800761e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007622:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800763a:	d007      	beq.n	800764c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	3304      	adds	r3, #4
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800764c:	2302      	movs	r3, #2
 800764e:	e259      	b.n	8007b04 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d044      	beq.n	80076e6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	4b75      	ldr	r3, [pc, #468]	; (8007838 <ETH_Prepare_Tx_Descriptors+0x240>)
 8007662:	4013      	ands	r3, r2
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007668:	431a      	orrs	r2, r3
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007688:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d027      	beq.n	80076e6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	b29a      	uxth	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	431a      	orrs	r2, r3
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	431a      	orrs	r2, r3
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80076d4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00e      	beq.n	8007710 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	4b51      	ldr	r3, [pc, #324]	; (800783c <ETH_Prepare_Tx_Descriptors+0x244>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	6992      	ldr	r2, [r2, #24]
 80076fe:	431a      	orrs	r2, r3
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0310 	and.w	r3, r3, #16
 8007724:	2b00      	cmp	r3, #0
 8007726:	d036      	beq.n	8007796 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007734:	f3bf 8f5f 	dmb	sy
}
 8007738:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	3301      	adds	r3, #1
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	2b03      	cmp	r3, #3
 8007750:	d902      	bls.n	8007758 <ETH_Prepare_Tx_Descriptors+0x160>
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	3b04      	subs	r3, #4
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800775c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007760:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	3301      	adds	r3, #1
 8007766:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007774:	d10f      	bne.n	8007796 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007780:	f3bf 8f5f 	dmb	sy
}
 8007784:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8007792:	2302      	movs	r3, #2
 8007794:	e1b6      	b.n	8007b04 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	3301      	adds	r3, #1
 800779a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	4b24      	ldr	r3, [pc, #144]	; (800783c <ETH_Prepare_Tx_Descriptors+0x244>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	6852      	ldr	r2, [r2, #4]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d012      	beq.n	80077e6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <ETH_Prepare_Tx_Descriptors+0x248>)
 80077d6:	4013      	ands	r3, r2
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	6852      	ldr	r2, [r2, #4]
 80077dc:	0412      	lsls	r2, r2, #16
 80077de:	431a      	orrs	r2, r3
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	e008      	b.n	80077f8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	2200      	movs	r2, #0
 80077ea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	4b13      	ldr	r3, [pc, #76]	; (8007840 <ETH_Prepare_Tx_Descriptors+0x248>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	6a3a      	ldr	r2, [r7, #32]
 80077f6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b00      	cmp	r3, #0
 8007802:	d021      	beq.n	8007848 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	04db      	lsls	r3, r3, #19
 8007812:	431a      	orrs	r2, r3
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800781e:	4013      	ands	r3, r2
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	69d2      	ldr	r2, [r2, #28]
 8007824:	431a      	orrs	r2, r3
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	60da      	str	r2, [r3, #12]
 8007836:	e02e      	b.n	8007896 <ETH_Prepare_Tx_Descriptors+0x29e>
 8007838:	ffff0000 	.word	0xffff0000
 800783c:	ffffc000 	.word	0xffffc000
 8007840:	c000ffff 	.word	0xc000ffff
 8007844:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	4b7b      	ldr	r3, [pc, #492]	; (8007a3c <ETH_Prepare_Tx_Descriptors+0x444>)
 800784e:	4013      	ands	r3, r2
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	6852      	ldr	r2, [r2, #4]
 8007854:	431a      	orrs	r2, r3
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d008      	beq.n	8007878 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	431a      	orrs	r2, r3
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	431a      	orrs	r2, r3
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0304 	and.w	r3, r3, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ae:	431a      	orrs	r2, r3
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80078cc:	f3bf 8f5f 	dmb	sy
}
 80078d0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 80da 	beq.w	8007aa0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	431a      	orrs	r2, r3
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80078fe:	e0cf      	b.n	8007aa0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	3301      	adds	r3, #1
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	2b03      	cmp	r3, #3
 8007916:	d902      	bls.n	800791e <ETH_Prepare_Tx_Descriptors+0x326>
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	3b04      	subs	r3, #4
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007926:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800793c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007940:	d007      	beq.n	8007952 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	3304      	adds	r3, #4
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d029      	beq.n	80079a6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795e:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8007960:	2300      	movs	r3, #0
 8007962:	62bb      	str	r3, [r7, #40]	; 0x28
 8007964:	e019      	b.n	800799a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8007966:	f3bf 8f5f 	dmb	sy
}
 800796a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	3301      	adds	r3, #1
 800797c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	2b03      	cmp	r3, #3
 8007982:	d902      	bls.n	800798a <ETH_Prepare_Tx_Descriptors+0x392>
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	3b04      	subs	r3, #4
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007992:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	3301      	adds	r3, #1
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
 800799a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	429a      	cmp	r2, r3
 80079a0:	d3e1      	bcc.n	8007966 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80079a2:	2302      	movs	r3, #2
 80079a4:	e0ae      	b.n	8007b04 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	3301      	adds	r3, #1
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	4b1f      	ldr	r3, [pc, #124]	; (8007a40 <ETH_Prepare_Tx_Descriptors+0x448>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	6852      	ldr	r2, [r2, #4]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d012      	beq.n	80079fc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	6852      	ldr	r2, [r2, #4]
 80079f2:	0412      	lsls	r2, r2, #16
 80079f4:	431a      	orrs	r2, r3
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	609a      	str	r2, [r3, #8]
 80079fa:	e008      	b.n	8007a0e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	2200      	movs	r2, #0
 8007a00:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	6a3a      	ldr	r2, [r7, #32]
 8007a0c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d018      	beq.n	8007a4c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <ETH_Prepare_Tx_Descriptors+0x450>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	69d2      	ldr	r2, [r2, #28]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	60da      	str	r2, [r3, #12]
 8007a38:	e020      	b.n	8007a7c <ETH_Prepare_Tx_Descriptors+0x484>
 8007a3a:	bf00      	nop
 8007a3c:	ffff8000 	.word	0xffff8000
 8007a40:	ffffc000 	.word	0xffffc000
 8007a44:	c000ffff 	.word	0xc000ffff
 8007a48:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	4b2f      	ldr	r3, [pc, #188]	; (8007b10 <ETH_Prepare_Tx_Descriptors+0x518>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	6852      	ldr	r2, [r2, #4]
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8007a82:	f3bf 8f5f 	dmb	sy
}
 8007a86:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f47f af2b 	bne.w	8007900 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	609a      	str	r2, [r3, #8]
 8007abc:	e005      	b.n	8007aca <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ada:	6979      	ldr	r1, [r7, #20]
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	3304      	adds	r3, #4
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aea:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007aec:	b672      	cpsid	i
}
 8007aee:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	4413      	add	r3, r2
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007afe:	b662      	cpsie	i
}
 8007b00:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3734      	adds	r7, #52	; 0x34
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	ffff8000 	.word	0xffff8000

08007b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b089      	sub	sp, #36	; 0x24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b22:	4b89      	ldr	r3, [pc, #548]	; (8007d48 <HAL_GPIO_Init+0x234>)
 8007b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b26:	e194      	b.n	8007e52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	fa01 f303 	lsl.w	r3, r1, r3
 8007b34:	4013      	ands	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8186 	beq.w	8007e4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d005      	beq.n	8007b58 <HAL_GPIO_Init+0x44>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d130      	bne.n	8007bba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	2203      	movs	r2, #3
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b8e:	2201      	movs	r2, #1
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	43db      	mvns	r3, r3
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	f003 0201 	and.w	r2, r3, #1
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d017      	beq.n	8007bf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d123      	bne.n	8007c4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	08da      	lsrs	r2, r3, #3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3208      	adds	r2, #8
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	220f      	movs	r2, #15
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4013      	ands	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	fa02 f303 	lsl.w	r3, r2, r3
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	08da      	lsrs	r2, r3, #3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3208      	adds	r2, #8
 8007c44:	69b9      	ldr	r1, [r7, #24]
 8007c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	2203      	movs	r2, #3
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f003 0203 	and.w	r2, r3, #3
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80e0 	beq.w	8007e4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c8c:	4b2f      	ldr	r3, [pc, #188]	; (8007d4c <HAL_GPIO_Init+0x238>)
 8007c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c92:	4a2e      	ldr	r2, [pc, #184]	; (8007d4c <HAL_GPIO_Init+0x238>)
 8007c94:	f043 0302 	orr.w	r3, r3, #2
 8007c98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c9c:	4b2b      	ldr	r3, [pc, #172]	; (8007d4c <HAL_GPIO_Init+0x238>)
 8007c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007caa:	4a29      	ldr	r2, [pc, #164]	; (8007d50 <HAL_GPIO_Init+0x23c>)
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	089b      	lsrs	r3, r3, #2
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	220f      	movs	r2, #15
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	43db      	mvns	r3, r3
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a20      	ldr	r2, [pc, #128]	; (8007d54 <HAL_GPIO_Init+0x240>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d052      	beq.n	8007d7c <HAL_GPIO_Init+0x268>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a1f      	ldr	r2, [pc, #124]	; (8007d58 <HAL_GPIO_Init+0x244>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d031      	beq.n	8007d42 <HAL_GPIO_Init+0x22e>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1e      	ldr	r2, [pc, #120]	; (8007d5c <HAL_GPIO_Init+0x248>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d02b      	beq.n	8007d3e <HAL_GPIO_Init+0x22a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1d      	ldr	r2, [pc, #116]	; (8007d60 <HAL_GPIO_Init+0x24c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d025      	beq.n	8007d3a <HAL_GPIO_Init+0x226>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1c      	ldr	r2, [pc, #112]	; (8007d64 <HAL_GPIO_Init+0x250>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d01f      	beq.n	8007d36 <HAL_GPIO_Init+0x222>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1b      	ldr	r2, [pc, #108]	; (8007d68 <HAL_GPIO_Init+0x254>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d019      	beq.n	8007d32 <HAL_GPIO_Init+0x21e>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a1a      	ldr	r2, [pc, #104]	; (8007d6c <HAL_GPIO_Init+0x258>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d013      	beq.n	8007d2e <HAL_GPIO_Init+0x21a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a19      	ldr	r2, [pc, #100]	; (8007d70 <HAL_GPIO_Init+0x25c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00d      	beq.n	8007d2a <HAL_GPIO_Init+0x216>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <HAL_GPIO_Init+0x260>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d007      	beq.n	8007d26 <HAL_GPIO_Init+0x212>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <HAL_GPIO_Init+0x264>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d101      	bne.n	8007d22 <HAL_GPIO_Init+0x20e>
 8007d1e:	2309      	movs	r3, #9
 8007d20:	e02d      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d22:	230a      	movs	r3, #10
 8007d24:	e02b      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d26:	2308      	movs	r3, #8
 8007d28:	e029      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d2a:	2307      	movs	r3, #7
 8007d2c:	e027      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d2e:	2306      	movs	r3, #6
 8007d30:	e025      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d32:	2305      	movs	r3, #5
 8007d34:	e023      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d36:	2304      	movs	r3, #4
 8007d38:	e021      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e01f      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	e01d      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e01b      	b.n	8007d7e <HAL_GPIO_Init+0x26a>
 8007d46:	bf00      	nop
 8007d48:	58000080 	.word	0x58000080
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	58000400 	.word	0x58000400
 8007d54:	58020000 	.word	0x58020000
 8007d58:	58020400 	.word	0x58020400
 8007d5c:	58020800 	.word	0x58020800
 8007d60:	58020c00 	.word	0x58020c00
 8007d64:	58021000 	.word	0x58021000
 8007d68:	58021400 	.word	0x58021400
 8007d6c:	58021800 	.word	0x58021800
 8007d70:	58021c00 	.word	0x58021c00
 8007d74:	58022000 	.word	0x58022000
 8007d78:	58022400 	.word	0x58022400
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	f002 0203 	and.w	r2, r2, #3
 8007d84:	0092      	lsls	r2, r2, #2
 8007d86:	4093      	lsls	r3, r2
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d8e:	4938      	ldr	r1, [pc, #224]	; (8007e70 <HAL_GPIO_Init+0x35c>)
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	089b      	lsrs	r3, r3, #2
 8007d94:	3302      	adds	r3, #2
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	43db      	mvns	r3, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	4013      	ands	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	43db      	mvns	r3, r3
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	4013      	ands	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	43db      	mvns	r3, r3
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f47f ae63 	bne.w	8007b28 <HAL_GPIO_Init+0x14>
  }
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	3724      	adds	r7, #36	; 0x24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	58000400 	.word	0x58000400

08007e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	887b      	ldrh	r3, [r7, #2]
 8007e86:	4013      	ands	r3, r2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	73fb      	strb	r3, [r7, #15]
 8007e90:	e001      	b.n	8007e96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	807b      	strh	r3, [r7, #2]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007eb4:	787b      	ldrb	r3, [r7, #1]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007eba:	887a      	ldrh	r2, [r7, #2]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ec0:	e003      	b.n	8007eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ec2:	887b      	ldrh	r3, [r7, #2]
 8007ec4:	041a      	lsls	r2, r3, #16
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	619a      	str	r2, [r3, #24]
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ee8:	887a      	ldrh	r2, [r7, #2]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4013      	ands	r3, r2
 8007eee:	041a      	lsls	r2, r3, #16
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	43d9      	mvns	r1, r3
 8007ef4:	887b      	ldrh	r3, [r7, #2]
 8007ef6:	400b      	ands	r3, r1
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	619a      	str	r2, [r3, #24]
}
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	4603      	mov	r3, r0
 8007f12:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f1c:	88fb      	ldrh	r3, [r7, #6]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f2e:	88fb      	ldrh	r3, [r7, #6]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 f804 	bl	8007f3e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	4603      	mov	r3, r0
 8007f46:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e0bd      	b.n	80080e2 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d031      	beq.n	800800e <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a4f      	ldr	r2, [pc, #316]	; (80080ec <HAL_HRTIM_Init+0x198>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d10e      	bne.n	8007fd2 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007fb4:	4b4e      	ldr	r3, [pc, #312]	; (80080f0 <HAL_HRTIM_Init+0x19c>)
 8007fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fba:	4a4d      	ldr	r2, [pc, #308]	; (80080f0 <HAL_HRTIM_Init+0x19c>)
 8007fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007fc4:	4b4a      	ldr	r3, [pc, #296]	; (80080f0 <HAL_HRTIM_Init+0x19c>)
 8007fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007fe0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ff6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fb fa4a 	bl	80034a8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d012      	beq.n	8008046 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800802e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]
 800805a:	e03e      	b.n	80080da <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800805c:	7dfa      	ldrb	r2, [r7, #23]
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	3318      	adds	r3, #24
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8008070:	7dfa      	ldrb	r2, [r7, #23]
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	331c      	adds	r3, #28
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8008084:	7dfa      	ldrb	r2, [r7, #23]
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4613      	mov	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	3320      	adds	r3, #32
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8008098:	7dfa      	ldrb	r2, [r7, #23]
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	4613      	mov	r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	440b      	add	r3, r1
 80080a6:	3324      	adds	r3, #36	; 0x24
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80080ac:	7dfa      	ldrb	r2, [r7, #23]
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4613      	mov	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	3328      	adds	r3, #40	; 0x28
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80080c0:	7dfa      	ldrb	r2, [r7, #23]
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4613      	mov	r3, r2
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	3330      	adds	r3, #48	; 0x30
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	3301      	adds	r3, #1
 80080d8:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	2b05      	cmp	r3, #5
 80080de:	d9bd      	bls.n	800805c <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	40017400 	.word	0x40017400
 80080f0:	58024400 	.word	0x58024400

080080f4 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d101      	bne.n	8008110 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800810c:	2302      	movs	r3, #2
 800810e:	e015      	b.n	800813c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b05      	cmp	r3, #5
 800811c:	d104      	bne.n	8008128 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fc4d 	bl	80089c0 <HRTIM_MasterBase_Config>
 8008126:	e004      	b.n	8008132 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fc76 	bl	8008a1e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b02      	cmp	r3, #2
 800815a:	d101      	bne.n	8008160 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800815c:	2302      	movs	r3, #2
 800815e:	e05f      	b.n	8008220 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800816a:	2302      	movs	r3, #2
 800816c:	e058      	b.n	8008220 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2202      	movs	r2, #2
 800817a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b05      	cmp	r3, #5
 8008182:	d104      	bne.n	800818e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fc89 	bl	8008a9e <HRTIM_MasterWaveform_Config>
 800818c:	e004      	b.n	8008198 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fcea 	bl	8008b6c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6819      	ldr	r1, [r3, #0]
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4613      	mov	r3, r2
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4403      	add	r3, r0
 80081aa:	3320      	adds	r3, #32
 80081ac:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6859      	ldr	r1, [r3, #4]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4403      	add	r3, r0
 80081c0:	3324      	adds	r3, #36	; 0x24
 80081c2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6899      	ldr	r1, [r3, #8]
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4613      	mov	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4403      	add	r3, r0
 80081d6:	3328      	adds	r3, #40	; 0x28
 80081d8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68d9      	ldr	r1, [r3, #12]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4403      	add	r3, r0
 80081ec:	332c      	adds	r3, #44	; 0x2c
 80081ee:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6919      	ldr	r1, [r3, #16]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4403      	add	r3, r0
 8008202:	3330      	adds	r3, #48	; 0x30
 8008204:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 fec7 	bl	8008f9c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d101      	bne.n	8008246 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8008242:	2302      	movs	r3, #2
 8008244:	e157      	b.n	80084f6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008250:	2302      	movs	r3, #2
 8008252:	e150      	b.n	80084f6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b05      	cmp	r3, #5
 8008268:	d140      	bne.n	80082ec <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3b01      	subs	r3, #1
 800826e:	2b07      	cmp	r3, #7
 8008270:	d82a      	bhi.n	80082c8 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	08008299 	.word	0x08008299
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082c9 	.word	0x080082c9
 8008284:	080082b1 	.word	0x080082b1
 8008288:	080082c9 	.word	0x080082c9
 800828c:	080082c9 	.word	0x080082c9
 8008290:	080082c9 	.word	0x080082c9
 8008294:	080082bd 	.word	0x080082bd
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	6812      	ldr	r2, [r2, #0]
 80082a0:	61da      	str	r2, [r3, #28]
        break;
 80082a2:	e01a      	b.n	80082da <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80082ae:	e014      	b.n	80082da <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80082ba:	e00e      	b.n	80082da <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80082c6:	e008      	b.n	80082da <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2207      	movs	r2, #7
 80082cc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 80082d8:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b07      	cmp	r3, #7
 80082e4:	f040 80fe 	bne.w	80084e4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e104      	b.n	80084f6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	2b07      	cmp	r3, #7
 80082f2:	f200 80e3 	bhi.w	80084bc <HAL_HRTIM_WaveformCompareConfig+0x294>
 80082f6:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	0800831d 	.word	0x0800831d
 8008300:	08008331 	.word	0x08008331
 8008304:	080084bd 	.word	0x080084bd
 8008308:	080083ed 	.word	0x080083ed
 800830c:	080084bd 	.word	0x080084bd
 8008310:	080084bd 	.word	0x080084bd
 8008314:	080084bd 	.word	0x080084bd
 8008318:	08008401 	.word	0x08008401
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	01db      	lsls	r3, r3, #7
 8008328:	440b      	add	r3, r1
 800832a:	339c      	adds	r3, #156	; 0x9c
 800832c:	601a      	str	r2, [r3, #0]
        break;
 800832e:	e0d1      	b.n	80084d4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6819      	ldr	r1, [r3, #0]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	01db      	lsls	r3, r3, #7
 800833c:	440b      	add	r3, r1
 800833e:	33a4      	adds	r3, #164	; 0xa4
 8008340:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d03f      	beq.n	80083ca <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	3301      	adds	r3, #1
 8008352:	01db      	lsls	r3, r3, #7
 8008354:	4413      	add	r3, r2
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	6811      	ldr	r1, [r2, #0]
 800835c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3301      	adds	r3, #1
 8008364:	01db      	lsls	r3, r3, #7
 8008366:	440b      	add	r3, r1
 8008368:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	3301      	adds	r3, #1
 8008372:	01db      	lsls	r3, r3, #7
 8008374:	4413      	add	r3, r2
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	68f9      	ldr	r1, [r7, #12]
 800837e:	6809      	ldr	r1, [r1, #0]
 8008380:	431a      	orrs	r2, r3
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	3301      	adds	r3, #1
 8008386:	01db      	lsls	r3, r3, #7
 8008388:	440b      	add	r3, r1
 800838a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008394:	d109      	bne.n	80083aa <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6819      	ldr	r1, [r3, #0]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	01db      	lsls	r3, r3, #7
 80083a2:	440b      	add	r3, r1
 80083a4:	339c      	adds	r3, #156	; 0x9c
 80083a6:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80083a8:	e091      	b.n	80084ce <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083b2:	f040 808c 	bne.w	80084ce <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6819      	ldr	r1, [r3, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	01db      	lsls	r3, r3, #7
 80083c2:	440b      	add	r3, r1
 80083c4:	33a8      	adds	r3, #168	; 0xa8
 80083c6:	601a      	str	r2, [r3, #0]
         break;
 80083c8:	e081      	b.n	80084ce <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	3301      	adds	r3, #1
 80083d2:	01db      	lsls	r3, r3, #7
 80083d4:	4413      	add	r3, r2
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	6811      	ldr	r1, [r2, #0]
 80083dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	3301      	adds	r3, #1
 80083e4:	01db      	lsls	r3, r3, #7
 80083e6:	440b      	add	r3, r1
 80083e8:	601a      	str	r2, [r3, #0]
         break;
 80083ea:	e070      	b.n	80084ce <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6819      	ldr	r1, [r3, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	01db      	lsls	r3, r3, #7
 80083f8:	440b      	add	r3, r1
 80083fa:	33a8      	adds	r3, #168	; 0xa8
 80083fc:	601a      	str	r2, [r3, #0]
        break;
 80083fe:	e069      	b.n	80084d4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	01db      	lsls	r3, r3, #7
 800840c:	440b      	add	r3, r1
 800840e:	33ac      	adds	r3, #172	; 0xac
 8008410:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d03f      	beq.n	800849a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3301      	adds	r3, #1
 8008422:	01db      	lsls	r3, r3, #7
 8008424:	4413      	add	r3, r2
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	6811      	ldr	r1, [r2, #0]
 800842c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3301      	adds	r3, #1
 8008434:	01db      	lsls	r3, r3, #7
 8008436:	440b      	add	r3, r1
 8008438:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3301      	adds	r3, #1
 8008442:	01db      	lsls	r3, r3, #7
 8008444:	4413      	add	r3, r2
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	6809      	ldr	r1, [r1, #0]
 8008452:	431a      	orrs	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3301      	adds	r3, #1
 8008458:	01db      	lsls	r3, r3, #7
 800845a:	440b      	add	r3, r1
 800845c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008466:	d109      	bne.n	800847c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6819      	ldr	r1, [r3, #0]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	01db      	lsls	r3, r3, #7
 8008474:	440b      	add	r3, r1
 8008476:	339c      	adds	r3, #156	; 0x9c
 8008478:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800847a:	e02a      	b.n	80084d2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008484:	d125      	bne.n	80084d2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6819      	ldr	r1, [r3, #0]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	689a      	ldr	r2, [r3, #8]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	01db      	lsls	r3, r3, #7
 8008492:	440b      	add	r3, r1
 8008494:	33a8      	adds	r3, #168	; 0xa8
 8008496:	601a      	str	r2, [r3, #0]
         break;
 8008498:	e01b      	b.n	80084d2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	3301      	adds	r3, #1
 80084a2:	01db      	lsls	r3, r3, #7
 80084a4:	4413      	add	r3, r2
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	6811      	ldr	r1, [r2, #0]
 80084ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	3301      	adds	r3, #1
 80084b4:	01db      	lsls	r3, r3, #7
 80084b6:	440b      	add	r3, r1
 80084b8:	601a      	str	r2, [r3, #0]
         break;
 80084ba:	e00a      	b.n	80084d2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2207      	movs	r2, #7
 80084c0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80084cc:	e002      	b.n	80084d4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80084ce:	bf00      	nop
 80084d0:	e000      	b.n	80084d4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80084d2:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b07      	cmp	r3, #7
 80084de:	d101      	bne.n	80084e4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e008      	b.n	80084f6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d101      	bne.n	8008522 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800851e:	2302      	movs	r3, #2
 8008520:	e01d      	b.n	800855e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800852c:	2302      	movs	r3, #2
 800852e:	e016      	b.n	800855e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68b9      	ldr	r1, [r7, #8]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 fc50 	bl	8008dec <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008576:	2b01      	cmp	r3, #1
 8008578:	d101      	bne.n	800857e <HAL_HRTIM_WaveformOutputStart+0x18>
 800857a:	2302      	movs	r3, #2
 800857c:	e01a      	b.n	80085b4 <HAL_HRTIM_WaveformOutputStart+0x4e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_HRTIM_WaveformOutputStop+0x18>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e01a      	b.n	800860e <HAL_HRTIM_WaveformOutputStop+0x4e>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800862c:	2b01      	cmp	r3, #1
 800862e:	d101      	bne.n	8008634 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8008630:	2302      	movs	r3, #2
 8008632:	e05b      	b.n	80086ec <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d009      	beq.n	8008678 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68d9      	ldr	r1, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
 800867c:	e022      	b.n	80086c4 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8008682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	4013      	ands	r3, r2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d017      	beq.n	80086be <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	01db      	lsls	r3, r3, #7
 8008696:	4413      	add	r3, r2
 8008698:	338c      	adds	r3, #140	; 0x8c
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	7bfa      	ldrb	r2, [r7, #15]
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	1a9b      	subs	r3, r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	3320      	adds	r3, #32
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6819      	ldr	r1, [r3, #0]
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	4302      	orrs	r2, r0
 80086b6:	01db      	lsls	r3, r3, #7
 80086b8:	440b      	add	r3, r1
 80086ba:	338c      	adds	r3, #140	; 0x8c
 80086bc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	3301      	adds	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d9d9      	bls.n	800867e <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80086ea:	2300      	movs	r3, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	20000130 	.word	0x20000130

080086fc <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8008706:	f240 137f 	movw	r3, #383	; 0x17f
 800870a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8008716:	2302      	movs	r3, #2
 8008718:	e065      	b.n	80087e6 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	43da      	mvns	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	400a      	ands	r2, r1
 800873e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68d9      	ldr	r1, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008758:	43da      	mvns	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	400a      	ands	r2, r1
 8008760:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
 8008766:	e023      	b.n	80087b0 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4a22      	ldr	r2, [pc, #136]	; (80087f4 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 800876c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	4013      	ands	r3, r2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d018      	beq.n	80087aa <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	01db      	lsls	r3, r3, #7
 8008780:	4413      	add	r3, r2
 8008782:	338c      	adds	r3, #140	; 0x8c
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	7bfa      	ldrb	r2, [r7, #15]
 8008788:	6879      	ldr	r1, [r7, #4]
 800878a:	4613      	mov	r3, r2
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	1a9b      	subs	r3, r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	3320      	adds	r3, #32
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	43da      	mvns	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6819      	ldr	r1, [r3, #0]
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	4002      	ands	r2, r0
 80087a2:	01db      	lsls	r3, r3, #7
 80087a4:	440b      	add	r3, r1
 80087a6:	338c      	adds	r3, #140	; 0x8c
 80087a8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	3301      	adds	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d9d8      	bls.n	8008768 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	60bb      	str	r3, [r7, #8]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f9      	bne.n	80087b6 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6819      	ldr	r1, [r3, #0]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	43da      	mvns	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	400a      	ands	r2, r1
 80087d2:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	20000130 	.word	0x20000130

080087f8 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2bff      	cmp	r3, #255	; 0xff
 8008806:	d103      	bne.n	8008810 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fc29 	bl	8009060 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800880e:	e00a      	b.n	8008826 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b05      	cmp	r3, #5
 8008814:	d103      	bne.n	800881e <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fca0 	bl	800915c <HRTIM_Master_ISR>
}
 800881c:	e003      	b.n	8008826 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fd45 	bl	80092b0 <HRTIM_Timer_ISR>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f023 0307 	bic.w	r3, r3, #7
 80089d8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f023 0318 	bic.w	r3, r3, #24
 80089ea:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	6852      	ldr	r2, [r2, #4]
 8008a10:	619a      	str	r2, [r3, #24]
}
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b087      	sub	sp, #28
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	3301      	adds	r3, #1
 8008a32:	01db      	lsls	r3, r3, #7
 8008a34:	4413      	add	r3, r2
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f023 0307 	bic.w	r3, r3, #7
 8008a40:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f023 0318 	bic.w	r3, r3, #24
 8008a52:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	3301      	adds	r3, #1
 8008a66:	01db      	lsls	r3, r3, #7
 8008a68:	4413      	add	r3, r2
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6819      	ldr	r1, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	01db      	lsls	r3, r3, #7
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3394      	adds	r3, #148	; 0x94
 8008a7e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6819      	ldr	r1, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	01db      	lsls	r3, r3, #7
 8008a8c:	440b      	add	r3, r1
 8008a8e:	3398      	adds	r3, #152	; 0x98
 8008a90:	601a      	str	r2, [r3, #0]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008ab8:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f023 0320 	bic.w	r3, r3, #32
 8008ac0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ae4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008af6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008b08:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008b1a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b2e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b40:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008b5e:	bf00      	nop
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
	...

08008b6c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b08b      	sub	sp, #44	; 0x2c
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	01db      	lsls	r3, r3, #7
 8008b82:	4413      	add	r3, r2
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	6811      	ldr	r1, [r2, #0]
 8008b8a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	3301      	adds	r3, #1
 8008b92:	01db      	lsls	r3, r3, #7
 8008b94:	440b      	add	r3, r1
 8008b96:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	01db      	lsls	r3, r3, #7
 8008ba2:	4413      	add	r3, r2
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	01db      	lsls	r3, r3, #7
 8008bb0:	4413      	add	r3, r2
 8008bb2:	33e8      	adds	r3, #232	; 0xe8
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	01db      	lsls	r3, r3, #7
 8008bc0:	4413      	add	r3, r2
 8008bc2:	33e4      	adds	r3, #228	; 0xe4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008bd0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	f023 0320 	bic.w	r3, r3, #32
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be0:	4313      	orrs	r3, r2
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c04:	4313      	orrs	r3, r2
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c16:	4313      	orrs	r3, r2
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c4e:	d103      	bne.n	8008c58 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c66:	4313      	orrs	r3, r2
 8008c68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	f023 031f 	bic.w	r3, r3, #31
 8008c94:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008caa:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d108      	bne.n	8008cd0 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cc4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	6a3a      	ldr	r2, [r7, #32]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008cd8:	d004      	beq.n	8008ce4 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cde:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008ce2:	d103      	bne.n	8008cec <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce8:	2b40      	cmp	r3, #64	; 0x40
 8008cea:	d108      	bne.n	8008cfe <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008cf2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf8:	6a3a      	ldr	r2, [r7, #32]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d02:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d843      	bhi.n	8008d92 <HRTIM_TimingUnitWaveform_Config+0x226>
 8008d0a:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d10:	08008d25 	.word	0x08008d25
 8008d14:	08008d3b 	.word	0x08008d3b
 8008d18:	08008d51 	.word	0x08008d51
 8008d1c:	08008d67 	.word	0x08008d67
 8008d20:	08008d7d 	.word	0x08008d7d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d2a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	61fb      	str	r3, [r7, #28]
      break;
 8008d38:	e02c      	b.n	8008d94 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d40:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	61fb      	str	r3, [r7, #28]
      break;
 8008d4e:	e021      	b.n	8008d94 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008d56:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	61fb      	str	r3, [r7, #28]
      break;
 8008d64:	e016      	b.n	8008d94 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d6c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	61fb      	str	r3, [r7, #28]
      break;
 8008d7a:	e00b      	b.n	8008d94 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d82:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	015b      	lsls	r3, r3, #5
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	61fb      	str	r3, [r7, #28]
      break;
 8008d90:	e000      	b.n	8008d94 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008d92:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	01db      	lsls	r3, r3, #7
 8008d9e:	4413      	add	r3, r2
 8008da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	01db      	lsls	r3, r3, #7
 8008dac:	4413      	add	r3, r2
 8008dae:	33e8      	adds	r3, #232	; 0xe8
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	01db      	lsls	r3, r3, #7
 8008dbc:	4413      	add	r3, r2
 8008dbe:	33e4      	adds	r3, #228	; 0xe4
 8008dc0:	6a3a      	ldr	r2, [r7, #32]
 8008dc2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	01db      	lsls	r3, r3, #7
 8008dcc:	4413      	add	r3, r2
 8008dce:	33d4      	adds	r3, #212	; 0xd4
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008dde:	bf00      	nop
 8008de0:	372c      	adds	r7, #44	; 0x2c
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop

08008dec <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b089      	sub	sp, #36	; 0x24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	01db      	lsls	r3, r3, #7
 8008e06:	4413      	add	r3, r2
 8008e08:	33e4      	adds	r3, #228	; 0xe4
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	01db      	lsls	r3, r3, #7
 8008e16:	4413      	add	r3, r2
 8008e18:	33b8      	adds	r3, #184	; 0xb8
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e24:	d04d      	beq.n	8008ec2 <HRTIM_OutputConfig+0xd6>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e2c:	d85e      	bhi.n	8008eec <HRTIM_OutputConfig+0x100>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e34:	d032      	beq.n	8008e9c <HRTIM_OutputConfig+0xb0>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3c:	d856      	bhi.n	8008eec <HRTIM_OutputConfig+0x100>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b80      	cmp	r3, #128	; 0x80
 8008e42:	d03e      	beq.n	8008ec2 <HRTIM_OutputConfig+0xd6>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b80      	cmp	r3, #128	; 0x80
 8008e48:	d850      	bhi.n	8008eec <HRTIM_OutputConfig+0x100>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b40      	cmp	r3, #64	; 0x40
 8008e4e:	d025      	beq.n	8008e9c <HRTIM_OutputConfig+0xb0>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d84a      	bhi.n	8008eec <HRTIM_OutputConfig+0x100>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d01f      	beq.n	8008e9c <HRTIM_OutputConfig+0xb0>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d044      	beq.n	8008eec <HRTIM_OutputConfig+0x100>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b20      	cmp	r3, #32
 8008e66:	d841      	bhi.n	8008eec <HRTIM_OutputConfig+0x100>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d33e      	bcc.n	8008eec <HRTIM_OutputConfig+0x100>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	3b02      	subs	r3, #2
 8008e72:	2201      	movs	r2, #1
 8008e74:	409a      	lsls	r2, r3
 8008e76:	4b48      	ldr	r3, [pc, #288]	; (8008f98 <HRTIM_OutputConfig+0x1ac>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	bf14      	ite	ne
 8008e7e:	2301      	movne	r3, #1
 8008e80:	2300      	moveq	r3, #0
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11c      	bne.n	8008ec2 <HRTIM_OutputConfig+0xd6>
 8008e88:	f244 0304 	movw	r3, #16388	; 0x4004
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bf14      	ite	ne
 8008e92:	2301      	movne	r3, #1
 8008e94:	2300      	moveq	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d027      	beq.n	8008eec <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6819      	ldr	r1, [r3, #0]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	01db      	lsls	r3, r3, #7
 8008ea8:	440b      	add	r3, r1
 8008eaa:	33bc      	adds	r3, #188	; 0xbc
 8008eac:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6819      	ldr	r1, [r3, #0]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	01db      	lsls	r3, r3, #7
 8008eba:	440b      	add	r3, r1
 8008ebc:	33c0      	adds	r3, #192	; 0xc0
 8008ebe:	601a      	str	r2, [r3, #0]
      break;
 8008ec0:	e015      	b.n	8008eee <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6819      	ldr	r1, [r3, #0]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	01db      	lsls	r3, r3, #7
 8008ece:	440b      	add	r3, r1
 8008ed0:	33c4      	adds	r3, #196	; 0xc4
 8008ed2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6819      	ldr	r1, [r3, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	01db      	lsls	r3, r3, #7
 8008ee0:	440b      	add	r3, r1
 8008ee2:	33c8      	adds	r3, #200	; 0xc8
 8008ee4:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008ee6:	2310      	movs	r3, #16
 8008ee8:	61bb      	str	r3, [r7, #24]
      break;
 8008eea:	e000      	b.n	8008eee <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008eec:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008eee:	22fe      	movs	r2, #254	; 0xfe
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008ef6:	43db      	mvns	r3, r3
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	4013      	ands	r3, r2
 8008efc:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	fa02 f303 	lsl.w	r3, r2, r3
 8008f18:	69fa      	ldr	r2, [r7, #28]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	691a      	ldr	r2, [r3, #16]
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	fa02 f303 	lsl.w	r3, r2, r3
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	fa02 f303 	lsl.w	r3, r2, r3
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	fa02 f303 	lsl.w	r3, r2, r3
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d111      	bne.n	8008f7a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10c      	bne.n	8008f7a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d107      	bne.n	8008f7a <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	69da      	ldr	r2, [r3, #28]
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	69fa      	ldr	r2, [r7, #28]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	01db      	lsls	r3, r3, #7
 8008f82:	4413      	add	r3, r2
 8008f84:	33e4      	adds	r3, #228	; 0xe4
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	601a      	str	r2, [r3, #0]
}
 8008f8a:	bf00      	nop
 8008f8c:	3724      	adds	r7, #36	; 0x24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	40000041 	.word	0x40000041

08008f9c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b05      	cmp	r3, #5
 8008faa:	d851      	bhi.n	8009050 <HRTIM_ForceRegistersUpdate+0xb4>
 8008fac:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <HRTIM_ForceRegistersUpdate+0x18>)
 8008fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb2:	bf00      	nop
 8008fb4:	08008fe3 	.word	0x08008fe3
 8008fb8:	08008ff9 	.word	0x08008ff9
 8008fbc:	0800900f 	.word	0x0800900f
 8008fc0:	08009025 	.word	0x08009025
 8008fc4:	0800903b 	.word	0x0800903b
 8008fc8:	08008fcd 	.word	0x08008fcd
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f042 0201 	orr.w	r2, r2, #1
 8008fdc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008fe0:	e037      	b.n	8009052 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f042 0202 	orr.w	r2, r2, #2
 8008ff2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008ff6:	e02c      	b.n	8009052 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f042 0204 	orr.w	r2, r2, #4
 8009008:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800900c:	e021      	b.n	8009052 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0208 	orr.w	r2, r2, #8
 800901e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009022:	e016      	b.n	8009052 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f042 0210 	orr.w	r2, r2, #16
 8009034:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009038:	e00b      	b.n	8009052 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0220 	orr.w	r2, r2, #32
 800904a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800904e:	e000      	b.n	8009052 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8009050:	bf00      	nop
  }
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop

08009060 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009070:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800907a:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00c      	beq.n	80090a0 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2201      	movs	r2, #1
 8009096:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff fbc7 	bl	800882e <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00c      	beq.n	80090c4 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d007      	beq.n	80090c4 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2202      	movs	r2, #2
 80090ba:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff fbbf 	bl	8008842 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2204      	movs	r2, #4
 80090de:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff fbb7 	bl	8008856 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f003 0308 	and.w	r3, r3, #8
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00c      	beq.n	800910c <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d007      	beq.n	800910c <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2208      	movs	r2, #8
 8009102:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff fbaf 	bl	800886a <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00c      	beq.n	8009130 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f003 0310 	and.w	r3, r3, #16
 800911c:	2b00      	cmp	r3, #0
 800911e:	d007      	beq.n	8009130 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2210      	movs	r2, #16
 8009126:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff fba7 	bl	800887e <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00c      	beq.n	8009154 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f003 0320 	and.w	r3, r3, #32
 8009140:	2b00      	cmp	r3, #0
 8009142:	d007      	beq.n	8009154 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2220      	movs	r2, #32
 800914a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff fb9f 	bl	8008892 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009154:	bf00      	nop
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800916c:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009176:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00d      	beq.n	80091ae <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d008      	beq.n	80091ae <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80091a4:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff fb7c 	bl	80088a6 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00c      	beq.n	80091d2 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d007      	beq.n	80091d2 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2201      	movs	r2, #1
 80091c8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80091ca:	2105      	movs	r1, #5
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff fb89 	bl	80088e4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00c      	beq.n	80091f6 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d007      	beq.n	80091f6 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2202      	movs	r2, #2
 80091ec:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80091ee:	2105      	movs	r1, #5
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7fa fd03 	bl	8003bfc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00c      	beq.n	800921a <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f003 0304 	and.w	r3, r3, #4
 8009206:	2b00      	cmp	r3, #0
 8009208:	d007      	beq.n	800921a <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2204      	movs	r2, #4
 8009210:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009212:	2105      	movs	r1, #5
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7fa fcfd 	bl	8003c14 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f003 0308 	and.w	r3, r3, #8
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00c      	beq.n	800923e <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	2b00      	cmp	r3, #0
 800922c:	d007      	beq.n	800923e <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2208      	movs	r2, #8
 8009234:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009236:	2105      	movs	r1, #5
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff fb5e 	bl	80088fa <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f003 0310 	and.w	r3, r3, #16
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f003 0310 	and.w	r3, r3, #16
 800924e:	2b00      	cmp	r3, #0
 8009250:	d007      	beq.n	8009262 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2210      	movs	r2, #16
 8009258:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800925a:	2105      	movs	r1, #5
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7fa fd4d 	bl	8003cfc <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f003 0320 	and.w	r3, r3, #32
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f003 0320 	and.w	r3, r3, #32
 8009272:	2b00      	cmp	r3, #0
 8009274:	d006      	beq.n	8009284 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2220      	movs	r2, #32
 800927c:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fb1b 	bl	80088ba <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00c      	beq.n	80092a8 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009294:	2b00      	cmp	r3, #0
 8009296:	d007      	beq.n	80092a8 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2240      	movs	r2, #64	; 0x40
 800929e:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80092a0:	2105      	movs	r1, #5
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7ff fb13 	bl	80088ce <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80092a8:	bf00      	nop
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	3301      	adds	r3, #1
 80092c2:	01db      	lsls	r3, r3, #7
 80092c4:	4413      	add	r3, r2
 80092c6:	3304      	adds	r3, #4
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	01db      	lsls	r3, r3, #7
 80092d4:	4413      	add	r3, r2
 80092d6:	338c      	adds	r3, #140	; 0x8c
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d010      	beq.n	8009308 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	01db      	lsls	r3, r3, #7
 80092f8:	4413      	add	r3, r2
 80092fa:	3388      	adds	r3, #136	; 0x88
 80092fc:	2201      	movs	r2, #1
 80092fe:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff faee 	bl	80088e4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d010      	beq.n	8009334 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	01db      	lsls	r3, r3, #7
 8009324:	4413      	add	r3, r2
 8009326:	3388      	adds	r3, #136	; 0x88
 8009328:	2202      	movs	r2, #2
 800932a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7fa fc64 	bl	8003bfc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d010      	beq.n	8009360 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	01db      	lsls	r3, r3, #7
 8009350:	4413      	add	r3, r2
 8009352:	3388      	adds	r3, #136	; 0x88
 8009354:	2204      	movs	r2, #4
 8009356:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7fa fc5a 	bl	8003c14 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f003 0308 	and.w	r3, r3, #8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d010      	beq.n	800938c <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f003 0308 	and.w	r3, r3, #8
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00b      	beq.n	800938c <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	01db      	lsls	r3, r3, #7
 800937c:	4413      	add	r3, r2
 800937e:	3388      	adds	r3, #136	; 0x88
 8009380:	2208      	movs	r2, #8
 8009382:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff fab7 	bl	80088fa <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0310 	and.w	r3, r3, #16
 8009392:	2b00      	cmp	r3, #0
 8009394:	d010      	beq.n	80093b8 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	01db      	lsls	r3, r3, #7
 80093a8:	4413      	add	r3, r2
 80093aa:	3388      	adds	r3, #136	; 0x88
 80093ac:	2210      	movs	r2, #16
 80093ae:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7fa fca2 	bl	8003cfc <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d010      	beq.n	80093e4 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	01db      	lsls	r3, r3, #7
 80093d4:	4413      	add	r3, r2
 80093d6:	3388      	adds	r3, #136	; 0x88
 80093d8:	2240      	movs	r2, #64	; 0x40
 80093da:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fa75 	bl	80088ce <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d010      	beq.n	8009410 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	01db      	lsls	r3, r3, #7
 8009400:	4413      	add	r3, r2
 8009402:	3388      	adds	r3, #136	; 0x88
 8009404:	2280      	movs	r2, #128	; 0x80
 8009406:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff fa80 	bl	8008910 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009416:	2b00      	cmp	r3, #0
 8009418:	d011      	beq.n	800943e <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00c      	beq.n	800943e <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	01db      	lsls	r3, r3, #7
 800942c:	4413      	add	r3, r2
 800942e:	3388      	adds	r3, #136	; 0x88
 8009430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009434:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fa74 	bl	8008926 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009444:	2b00      	cmp	r3, #0
 8009446:	d011      	beq.n	800946c <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00c      	beq.n	800946c <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	01db      	lsls	r3, r3, #7
 800945a:	4413      	add	r3, r2
 800945c:	3388      	adds	r3, #136	; 0x88
 800945e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009462:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff fa7e 	bl	8008968 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009472:	2b00      	cmp	r3, #0
 8009474:	d011      	beq.n	800949a <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00c      	beq.n	800949a <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	01db      	lsls	r3, r3, #7
 8009488:	4413      	add	r3, r2
 800948a:	3388      	adds	r3, #136	; 0x88
 800948c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009490:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff fa72 	bl	800897e <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d011      	beq.n	80094c8 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00c      	beq.n	80094c8 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	01db      	lsls	r3, r3, #7
 80094b6:	4413      	add	r3, r2
 80094b8:	3388      	adds	r3, #136	; 0x88
 80094ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094be:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff fa66 	bl	8008994 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d011      	beq.n	80094f6 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	01db      	lsls	r3, r3, #7
 80094e4:	4413      	add	r3, r2
 80094e6:	3388      	adds	r3, #136	; 0x88
 80094e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094ec:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fa5a 	bl	80089aa <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d011      	beq.n	8009524 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00c      	beq.n	8009524 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	01db      	lsls	r3, r3, #7
 8009512:	4413      	add	r3, r2
 8009514:	3388      	adds	r3, #136	; 0x88
 8009516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800951a:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff fa17 	bl	8008952 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d011      	beq.n	8009552 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00c      	beq.n	8009552 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	01db      	lsls	r3, r3, #7
 8009540:	4413      	add	r3, r2
 8009542:	3388      	adds	r3, #136	; 0x88
 8009544:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009548:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff f9f5 	bl	800893c <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e097      	b.n	800969e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d106      	bne.n	800958e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7fa f833 	bl	80035f4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d004      	beq.n	80095b0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095ae:	d103      	bne.n	80095b8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f023 031e 	bic.w	r3, r3, #30
 80095b6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d003      	beq.n	80095cc <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4b38      	ldr	r3, [pc, #224]	; (80096a8 <HAL_LPTIM_Init+0x14c>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	4b37      	ldr	r3, [pc, #220]	; (80096ac <HAL_LPTIM_Init+0x150>)
 80095d0:	4013      	ands	r3, r2
 80095d2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80095dc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80095e2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80095e8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80095ee:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d107      	bne.n	800960e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8009606:	4313      	orrs	r3, r2
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d004      	beq.n	8009620 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800961e:	d107      	bne.n	8009630 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009628:	4313      	orrs	r3, r2
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009638:	4293      	cmp	r3, r2
 800963a:	d00a      	beq.n	8009652 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009644:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800964a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a14      	ldr	r2, [pc, #80]	; (80096b0 <HAL_LPTIM_Init+0x154>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d004      	beq.n	800966e <HAL_LPTIM_Init+0x112>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a12      	ldr	r2, [pc, #72]	; (80096b4 <HAL_LPTIM_Init+0x158>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d108      	bne.n	8009680 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	625a      	str	r2, [r3, #36]	; 0x24
 800967e:	e009      	b.n	8009694 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a0c      	ldr	r2, [pc, #48]	; (80096b8 <HAL_LPTIM_Init+0x15c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d104      	bne.n	8009694 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009692:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	ffff1f3f 	.word	0xffff1f3f
 80096ac:	ff19f1fe 	.word	0xff19f1fe
 80096b0:	40002400 	.word	0x40002400
 80096b4:	58002400 	.word	0x58002400
 80096b8:	58002800 	.word	0x58002800

080096bc <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2202      	movs	r2, #2
 80096ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d00c      	beq.n	80096f0 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096de:	d107      	bne.n	80096f0 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80096ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	691a      	ldr	r2, [r3, #16]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0201 	orr.w	r2, r2, #1
 80096fe:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2210      	movs	r2, #16
 8009706:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009710:	2110      	movs	r1, #16
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f91e 	bl	8009954 <LPTIM_WaitForFlag>
 8009718:	4603      	mov	r3, r0
 800971a:	2b03      	cmp	r3, #3
 800971c:	d101      	bne.n	8009722 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e02f      	b.n	8009782 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f946 	bl	80099b4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f905 	bl	8009938 <HAL_LPTIM_GetState>
 800972e:	4603      	mov	r3, r0
 8009730:	2b03      	cmp	r3, #3
 8009732:	d101      	bne.n	8009738 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e024      	b.n	8009782 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0210 	orr.w	r2, r2, #16
 8009746:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f042 0202 	orr.w	r2, r2, #2
 8009756:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691a      	ldr	r2, [r3, #16]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	691a      	ldr	r2, [r3, #16]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0204 	orr.w	r2, r2, #4
 8009776:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b01      	cmp	r3, #1
 800979e:	d10d      	bne.n	80097bc <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d106      	bne.n	80097bc <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2201      	movs	r2, #1
 80097b4:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f882 	bl	80098c0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0302 	and.w	r3, r3, #2
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d10d      	bne.n	80097e6 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d106      	bne.n	80097e6 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2202      	movs	r2, #2
 80097de:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7fa f9fd 	bl	8003be0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d10d      	bne.n	8009810 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b04      	cmp	r3, #4
 8009800:	d106      	bne.n	8009810 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2204      	movs	r2, #4
 8009808:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f862 	bl	80098d4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b08      	cmp	r3, #8
 800981c:	d10d      	bne.n	800983a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	2b08      	cmp	r3, #8
 800982a:	d106      	bne.n	800983a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2208      	movs	r2, #8
 8009832:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f857 	bl	80098e8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0310 	and.w	r3, r3, #16
 8009844:	2b10      	cmp	r3, #16
 8009846:	d10d      	bne.n	8009864 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f003 0310 	and.w	r3, r3, #16
 8009852:	2b10      	cmp	r3, #16
 8009854:	d106      	bne.n	8009864 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2210      	movs	r2, #16
 800985c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f84c 	bl	80098fc <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b20      	cmp	r3, #32
 8009870:	d10d      	bne.n	800988e <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b20      	cmp	r3, #32
 800987e:	d106      	bne.n	800988e <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2220      	movs	r2, #32
 8009886:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f841 	bl	8009910 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009898:	2b40      	cmp	r3, #64	; 0x40
 800989a:	d10d      	bne.n	80098b8 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a6:	2b40      	cmp	r3, #64	; 0x40
 80098a8:	d106      	bne.n	80098b8 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2240      	movs	r2, #64	; 0x40
 80098b0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f836 	bl	8009924 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009946:	b2db      	uxtb	r3, r3
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8009962:	4b12      	ldr	r3, [pc, #72]	; (80099ac <LPTIM_WaitForFlag+0x58>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <LPTIM_WaitForFlag+0x5c>)
 8009968:	fba2 2303 	umull	r2, r3, r2, r3
 800996c:	0b9b      	lsrs	r3, r3, #14
 800996e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009972:	fb02 f303 	mul.w	r3, r2, r3
 8009976:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	3b01      	subs	r3, #1
 800997c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	4013      	ands	r3, r2
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d002      	beq.n	800999e <LPTIM_WaitForFlag+0x4a>
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1ec      	bne.n	8009978 <LPTIM_WaitForFlag+0x24>

  return result;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	20000110 	.word	0x20000110
 80099b0:	d1b71759 	.word	0xd1b71759

080099b4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08c      	sub	sp, #48	; 0x30
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099c0:	f3ef 8310 	mrs	r3, PRIMASK
 80099c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80099c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80099c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ca:	2301      	movs	r3, #1
 80099cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f383 8810 	msr	PRIMASK, r3
}
 80099d4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a81      	ldr	r2, [pc, #516]	; (8009be0 <LPTIM_Disable+0x22c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d02d      	beq.n	8009a3c <LPTIM_Disable+0x88>
 80099e0:	4a7f      	ldr	r2, [pc, #508]	; (8009be0 <LPTIM_Disable+0x22c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d830      	bhi.n	8009a48 <LPTIM_Disable+0x94>
 80099e6:	4a7f      	ldr	r2, [pc, #508]	; (8009be4 <LPTIM_Disable+0x230>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d021      	beq.n	8009a30 <LPTIM_Disable+0x7c>
 80099ec:	4a7d      	ldr	r2, [pc, #500]	; (8009be4 <LPTIM_Disable+0x230>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d82a      	bhi.n	8009a48 <LPTIM_Disable+0x94>
 80099f2:	4a7d      	ldr	r2, [pc, #500]	; (8009be8 <LPTIM_Disable+0x234>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d015      	beq.n	8009a24 <LPTIM_Disable+0x70>
 80099f8:	4a7b      	ldr	r2, [pc, #492]	; (8009be8 <LPTIM_Disable+0x234>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d824      	bhi.n	8009a48 <LPTIM_Disable+0x94>
 80099fe:	4a7b      	ldr	r2, [pc, #492]	; (8009bec <LPTIM_Disable+0x238>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d003      	beq.n	8009a0c <LPTIM_Disable+0x58>
 8009a04:	4a7a      	ldr	r2, [pc, #488]	; (8009bf0 <LPTIM_Disable+0x23c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d006      	beq.n	8009a18 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009a0a:	e01d      	b.n	8009a48 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009a0c:	4b79      	ldr	r3, [pc, #484]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a10:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009a16:	e018      	b.n	8009a4a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009a18:	4b76      	ldr	r3, [pc, #472]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009a22:	e012      	b.n	8009a4a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009a24:	4b73      	ldr	r3, [pc, #460]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009a2e:	e00c      	b.n	8009a4a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009a30:	4b70      	ldr	r3, [pc, #448]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009a3a:	e006      	b.n	8009a4a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009a3c:	4b6d      	ldr	r3, [pc, #436]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009a46:	e000      	b.n	8009a4a <LPTIM_Disable+0x96>
      break;
 8009a48:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a5a      	ldr	r2, [pc, #360]	; (8009be0 <LPTIM_Disable+0x22c>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d059      	beq.n	8009b30 <LPTIM_Disable+0x17c>
 8009a7c:	4a58      	ldr	r2, [pc, #352]	; (8009be0 <LPTIM_Disable+0x22c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d867      	bhi.n	8009b52 <LPTIM_Disable+0x19e>
 8009a82:	4a58      	ldr	r2, [pc, #352]	; (8009be4 <LPTIM_Disable+0x230>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d042      	beq.n	8009b0e <LPTIM_Disable+0x15a>
 8009a88:	4a56      	ldr	r2, [pc, #344]	; (8009be4 <LPTIM_Disable+0x230>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d861      	bhi.n	8009b52 <LPTIM_Disable+0x19e>
 8009a8e:	4a56      	ldr	r2, [pc, #344]	; (8009be8 <LPTIM_Disable+0x234>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d02b      	beq.n	8009aec <LPTIM_Disable+0x138>
 8009a94:	4a54      	ldr	r2, [pc, #336]	; (8009be8 <LPTIM_Disable+0x234>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d85b      	bhi.n	8009b52 <LPTIM_Disable+0x19e>
 8009a9a:	4a54      	ldr	r2, [pc, #336]	; (8009bec <LPTIM_Disable+0x238>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <LPTIM_Disable+0xf4>
 8009aa0:	4a53      	ldr	r2, [pc, #332]	; (8009bf0 <LPTIM_Disable+0x23c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d011      	beq.n	8009aca <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009aa6:	e054      	b.n	8009b52 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009aa8:	4b52      	ldr	r3, [pc, #328]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aae:	4a51      	ldr	r2, [pc, #324]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009ab8:	4b4e      	ldr	r3, [pc, #312]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009abe:	4a4d      	ldr	r2, [pc, #308]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009ac8:	e044      	b.n	8009b54 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009aca:	4b4a      	ldr	r3, [pc, #296]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ad0:	4a48      	ldr	r2, [pc, #288]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ad6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009ada:	4b46      	ldr	r3, [pc, #280]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ae0:	4a44      	ldr	r2, [pc, #272]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009ae2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ae6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009aea:	e033      	b.n	8009b54 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009aec:	4b41      	ldr	r3, [pc, #260]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009af2:	4a40      	ldr	r2, [pc, #256]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009af8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009afc:	4b3d      	ldr	r3, [pc, #244]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b02:	4a3c      	ldr	r2, [pc, #240]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009b0c:	e022      	b.n	8009b54 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8009b0e:	4b39      	ldr	r3, [pc, #228]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b14:	4a37      	ldr	r2, [pc, #220]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8009b1e:	4b35      	ldr	r3, [pc, #212]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b24:	4a33      	ldr	r2, [pc, #204]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009b2e:	e011      	b.n	8009b54 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009b30:	4b30      	ldr	r3, [pc, #192]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b36:	4a2f      	ldr	r2, [pc, #188]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009b40:	4b2c      	ldr	r3, [pc, #176]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b46:	4a2b      	ldr	r2, [pc, #172]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b4c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009b50:	e000      	b.n	8009b54 <LPTIM_Disable+0x1a0>
      break;
 8009b52:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d103      	bne.n	8009b62 <LPTIM_Disable+0x1ae>
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 80d1 	beq.w	8009d04 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a1e      	ldr	r2, [pc, #120]	; (8009be0 <LPTIM_Disable+0x22c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d031      	beq.n	8009bd0 <LPTIM_Disable+0x21c>
 8009b6c:	4a1c      	ldr	r2, [pc, #112]	; (8009be0 <LPTIM_Disable+0x22c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d842      	bhi.n	8009bf8 <LPTIM_Disable+0x244>
 8009b72:	4a1c      	ldr	r2, [pc, #112]	; (8009be4 <LPTIM_Disable+0x230>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d024      	beq.n	8009bc2 <LPTIM_Disable+0x20e>
 8009b78:	4a1a      	ldr	r2, [pc, #104]	; (8009be4 <LPTIM_Disable+0x230>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d83c      	bhi.n	8009bf8 <LPTIM_Disable+0x244>
 8009b7e:	4a1a      	ldr	r2, [pc, #104]	; (8009be8 <LPTIM_Disable+0x234>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d017      	beq.n	8009bb4 <LPTIM_Disable+0x200>
 8009b84:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <LPTIM_Disable+0x234>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d836      	bhi.n	8009bf8 <LPTIM_Disable+0x244>
 8009b8a:	4a18      	ldr	r2, [pc, #96]	; (8009bec <LPTIM_Disable+0x238>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d003      	beq.n	8009b98 <LPTIM_Disable+0x1e4>
 8009b90:	4a17      	ldr	r2, [pc, #92]	; (8009bf0 <LPTIM_Disable+0x23c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d007      	beq.n	8009ba6 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009b96:	e02f      	b.n	8009bf8 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009b98:	4b16      	ldr	r3, [pc, #88]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9c:	4a15      	ldr	r2, [pc, #84]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009b9e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009ba2:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009ba4:	e029      	b.n	8009bfa <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009ba6:	4b13      	ldr	r3, [pc, #76]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009baa:	4a12      	ldr	r2, [pc, #72]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009bac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009bb0:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009bb2:	e022      	b.n	8009bfa <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009bb4:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb8:	4a0e      	ldr	r2, [pc, #56]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009bba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009bbe:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009bc0:	e01b      	b.n	8009bfa <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc6:	4a0b      	ldr	r2, [pc, #44]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009bc8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009bcc:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009bce:	e014      	b.n	8009bfa <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009bd0:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd4:	4a07      	ldr	r2, [pc, #28]	; (8009bf4 <LPTIM_Disable+0x240>)
 8009bd6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009bda:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009bdc:	e00d      	b.n	8009bfa <LPTIM_Disable+0x246>
 8009bde:	bf00      	nop
 8009be0:	58003000 	.word	0x58003000
 8009be4:	58002c00 	.word	0x58002c00
 8009be8:	58002800 	.word	0x58002800
 8009bec:	40002400 	.word	0x40002400
 8009bf0:	58002400 	.word	0x58002400
 8009bf4:	58024400 	.word	0x58024400
        break;
 8009bf8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d01a      	beq.n	8009c36 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	691a      	ldr	r2, [r3, #16]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0201 	orr.w	r2, r2, #1
 8009c0e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009c18:	2108      	movs	r1, #8
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7ff fe9a 	bl	8009954 <LPTIM_WaitForFlag>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d103      	bne.n	8009c2e <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2203      	movs	r2, #3
 8009c2a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2208      	movs	r2, #8
 8009c34:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01a      	beq.n	8009c72 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691a      	ldr	r2, [r3, #16]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0201 	orr.w	r2, r2, #1
 8009c4a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	69ba      	ldr	r2, [r7, #24]
 8009c52:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009c54:	2110      	movs	r1, #16
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff fe7c 	bl	8009954 <LPTIM_WaitForFlag>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b03      	cmp	r3, #3
 8009c60:	d103      	bne.n	8009c6a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2203      	movs	r2, #3
 8009c66:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2210      	movs	r2, #16
 8009c70:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a32      	ldr	r2, [pc, #200]	; (8009d40 <LPTIM_Disable+0x38c>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d039      	beq.n	8009cf0 <LPTIM_Disable+0x33c>
 8009c7c:	4a30      	ldr	r2, [pc, #192]	; (8009d40 <LPTIM_Disable+0x38c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d83f      	bhi.n	8009d02 <LPTIM_Disable+0x34e>
 8009c82:	4a30      	ldr	r2, [pc, #192]	; (8009d44 <LPTIM_Disable+0x390>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d02a      	beq.n	8009cde <LPTIM_Disable+0x32a>
 8009c88:	4a2e      	ldr	r2, [pc, #184]	; (8009d44 <LPTIM_Disable+0x390>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d839      	bhi.n	8009d02 <LPTIM_Disable+0x34e>
 8009c8e:	4a2e      	ldr	r2, [pc, #184]	; (8009d48 <LPTIM_Disable+0x394>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d01b      	beq.n	8009ccc <LPTIM_Disable+0x318>
 8009c94:	4a2c      	ldr	r2, [pc, #176]	; (8009d48 <LPTIM_Disable+0x394>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d833      	bhi.n	8009d02 <LPTIM_Disable+0x34e>
 8009c9a:	4a2c      	ldr	r2, [pc, #176]	; (8009d4c <LPTIM_Disable+0x398>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d003      	beq.n	8009ca8 <LPTIM_Disable+0x2f4>
 8009ca0:	4a2b      	ldr	r2, [pc, #172]	; (8009d50 <LPTIM_Disable+0x39c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d009      	beq.n	8009cba <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009ca6:	e02c      	b.n	8009d02 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009ca8:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cb0:	4928      	ldr	r1, [pc, #160]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009cb8:	e024      	b.n	8009d04 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009cba:	4b26      	ldr	r3, [pc, #152]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cc2:	4924      	ldr	r1, [pc, #144]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009cca:	e01b      	b.n	8009d04 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009ccc:	4b21      	ldr	r3, [pc, #132]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cd4:	491f      	ldr	r1, [pc, #124]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009cdc:	e012      	b.n	8009d04 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009cde:	4b1d      	ldr	r3, [pc, #116]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ce6:	491b      	ldr	r1, [pc, #108]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cea:	4313      	orrs	r3, r2
 8009cec:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009cee:	e009      	b.n	8009d04 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009cf0:	4b18      	ldr	r3, [pc, #96]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cf8:	4916      	ldr	r1, [pc, #88]	; (8009d54 <LPTIM_Disable+0x3a0>)
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009d00:	e000      	b.n	8009d04 <LPTIM_Disable+0x350>
        break;
 8009d02:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691a      	ldr	r2, [r3, #16]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0201 	bic.w	r2, r2, #1
 8009d12:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6a3a      	ldr	r2, [r7, #32]
 8009d22:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f383 8810 	msr	PRIMASK, r3
}
 8009d36:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009d38:	bf00      	nop
 8009d3a:	3730      	adds	r7, #48	; 0x30
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	58003000 	.word	0x58003000
 8009d44:	58002c00 	.word	0x58002c00
 8009d48:	58002800 	.word	0x58002800
 8009d4c:	40002400 	.word	0x40002400
 8009d50:	58002400 	.word	0x58002400
 8009d54:	58024400 	.word	0x58024400

08009d58 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009d5c:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a04      	ldr	r2, [pc, #16]	; (8009d74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d66:	6013      	str	r3, [r2, #0]
}
 8009d68:	bf00      	nop
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	58024800 	.word	0x58024800

08009d78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	d00a      	beq.n	8009da2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d8c:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d001      	beq.n	8009d9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e01f      	b.n	8009dde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	e01d      	b.n	8009dde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009da2:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f023 0207 	bic.w	r2, r3, #7
 8009daa:	490f      	ldr	r1, [pc, #60]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009db2:	f7fa f9bf 	bl	8004134 <HAL_GetTick>
 8009db6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009db8:	e009      	b.n	8009dce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009dba:	f7fa f9bb 	bl	8004134 <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dc8:	d901      	bls.n	8009dce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e007      	b.n	8009dde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009dce:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <HAL_PWREx_ConfigSupply+0x70>)
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dda:	d1ee      	bne.n	8009dba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	58024800 	.word	0x58024800

08009dec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08c      	sub	sp, #48	; 0x30
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	f000 bc48 	b.w	800a690 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 8088 	beq.w	8009f1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e0e:	4b99      	ldr	r3, [pc, #612]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e18:	4b96      	ldr	r3, [pc, #600]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	2b10      	cmp	r3, #16
 8009e22:	d007      	beq.n	8009e34 <HAL_RCC_OscConfig+0x48>
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	2b18      	cmp	r3, #24
 8009e28:	d111      	bne.n	8009e4e <HAL_RCC_OscConfig+0x62>
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d10c      	bne.n	8009e4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e34:	4b8f      	ldr	r3, [pc, #572]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d06d      	beq.n	8009f1c <HAL_RCC_OscConfig+0x130>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d169      	bne.n	8009f1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f000 bc21 	b.w	800a690 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e56:	d106      	bne.n	8009e66 <HAL_RCC_OscConfig+0x7a>
 8009e58:	4b86      	ldr	r3, [pc, #536]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a85      	ldr	r2, [pc, #532]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	e02e      	b.n	8009ec4 <HAL_RCC_OscConfig+0xd8>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10c      	bne.n	8009e88 <HAL_RCC_OscConfig+0x9c>
 8009e6e:	4b81      	ldr	r3, [pc, #516]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a80      	ldr	r2, [pc, #512]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	4b7e      	ldr	r3, [pc, #504]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a7d      	ldr	r2, [pc, #500]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e01d      	b.n	8009ec4 <HAL_RCC_OscConfig+0xd8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e90:	d10c      	bne.n	8009eac <HAL_RCC_OscConfig+0xc0>
 8009e92:	4b78      	ldr	r3, [pc, #480]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a77      	ldr	r2, [pc, #476]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	4b75      	ldr	r3, [pc, #468]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a74      	ldr	r2, [pc, #464]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	e00b      	b.n	8009ec4 <HAL_RCC_OscConfig+0xd8>
 8009eac:	4b71      	ldr	r3, [pc, #452]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a70      	ldr	r2, [pc, #448]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	4b6e      	ldr	r3, [pc, #440]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a6d      	ldr	r2, [pc, #436]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d013      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ecc:	f7fa f932 	bl	8004134 <HAL_GetTick>
 8009ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ed4:	f7fa f92e 	bl	8004134 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b64      	cmp	r3, #100	; 0x64
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e3d4      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ee6:	4b63      	ldr	r3, [pc, #396]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0f0      	beq.n	8009ed4 <HAL_RCC_OscConfig+0xe8>
 8009ef2:	e014      	b.n	8009f1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef4:	f7fa f91e 	bl	8004134 <HAL_GetTick>
 8009ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009efa:	e008      	b.n	8009f0e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009efc:	f7fa f91a 	bl	8004134 <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	2b64      	cmp	r3, #100	; 0x64
 8009f08:	d901      	bls.n	8009f0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e3c0      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f0e:	4b59      	ldr	r3, [pc, #356]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1f0      	bne.n	8009efc <HAL_RCC_OscConfig+0x110>
 8009f1a:	e000      	b.n	8009f1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 80ca 	beq.w	800a0c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f2c:	4b51      	ldr	r3, [pc, #324]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f36:	4b4f      	ldr	r3, [pc, #316]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <HAL_RCC_OscConfig+0x166>
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	2b18      	cmp	r3, #24
 8009f46:	d156      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x20a>
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d151      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f52:	4b48      	ldr	r3, [pc, #288]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <HAL_RCC_OscConfig+0x17e>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e392      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f6a:	4b42      	ldr	r3, [pc, #264]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f023 0219 	bic.w	r2, r3, #25
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	493f      	ldr	r1, [pc, #252]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7c:	f7fa f8da 	bl	8004134 <HAL_GetTick>
 8009f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f84:	f7fa f8d6 	bl	8004134 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e37c      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f96:	4b37      	ldr	r3, [pc, #220]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d0f0      	beq.n	8009f84 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fa2:	f7fa f8f7 	bl	8004194 <HAL_GetREVID>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d817      	bhi.n	8009fe0 <HAL_RCC_OscConfig+0x1f4>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b40      	cmp	r3, #64	; 0x40
 8009fb6:	d108      	bne.n	8009fca <HAL_RCC_OscConfig+0x1de>
 8009fb8:	4b2e      	ldr	r3, [pc, #184]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009fc0:	4a2c      	ldr	r2, [pc, #176]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fc8:	e07a      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fca:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	031b      	lsls	r3, r3, #12
 8009fd8:	4926      	ldr	r1, [pc, #152]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fde:	e06f      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fe0:	4b24      	ldr	r3, [pc, #144]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	061b      	lsls	r3, r3, #24
 8009fee:	4921      	ldr	r1, [pc, #132]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ff4:	e064      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d047      	beq.n	800a08e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ffe:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f023 0219 	bic.w	r2, r3, #25
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	491a      	ldr	r1, [pc, #104]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7fa f890 	bl	8004134 <HAL_GetTick>
 800a014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a018:	f7fa f88c 	bl	8004134 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e332      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a02a:	4b12      	ldr	r3, [pc, #72]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f0      	beq.n	800a018 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a036:	f7fa f8ad 	bl	8004194 <HAL_GetREVID>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a040:	4293      	cmp	r3, r2
 800a042:	d819      	bhi.n	800a078 <HAL_RCC_OscConfig+0x28c>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d108      	bne.n	800a05e <HAL_RCC_OscConfig+0x272>
 800a04c:	4b09      	ldr	r3, [pc, #36]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a054:	4a07      	ldr	r2, [pc, #28]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a05a:	6053      	str	r3, [r2, #4]
 800a05c:	e030      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	031b      	lsls	r3, r3, #12
 800a06c:	4901      	ldr	r1, [pc, #4]	; (800a074 <HAL_RCC_OscConfig+0x288>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	604b      	str	r3, [r1, #4]
 800a072:	e025      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
 800a074:	58024400 	.word	0x58024400
 800a078:	4b9a      	ldr	r3, [pc, #616]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	061b      	lsls	r3, r3, #24
 800a086:	4997      	ldr	r1, [pc, #604]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	604b      	str	r3, [r1, #4]
 800a08c:	e018      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a08e:	4b95      	ldr	r3, [pc, #596]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a94      	ldr	r2, [pc, #592]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a094:	f023 0301 	bic.w	r3, r3, #1
 800a098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a09a:	f7fa f84b 	bl	8004134 <HAL_GetTick>
 800a09e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0a0:	e008      	b.n	800a0b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0a2:	f7fa f847 	bl	8004134 <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d901      	bls.n	800a0b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e2ed      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0b4:	4b8b      	ldr	r3, [pc, #556]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1f0      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0310 	and.w	r3, r3, #16
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 80a9 	beq.w	800a220 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0ce:	4b85      	ldr	r3, [pc, #532]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0d8:	4b82      	ldr	r3, [pc, #520]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d007      	beq.n	800a0f4 <HAL_RCC_OscConfig+0x308>
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	2b18      	cmp	r3, #24
 800a0e8:	d13a      	bne.n	800a160 <HAL_RCC_OscConfig+0x374>
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d135      	bne.n	800a160 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0f4:	4b7b      	ldr	r3, [pc, #492]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d005      	beq.n	800a10c <HAL_RCC_OscConfig+0x320>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	2b80      	cmp	r3, #128	; 0x80
 800a106:	d001      	beq.n	800a10c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e2c1      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a10c:	f7fa f842 	bl	8004194 <HAL_GetREVID>
 800a110:	4603      	mov	r3, r0
 800a112:	f241 0203 	movw	r2, #4099	; 0x1003
 800a116:	4293      	cmp	r3, r2
 800a118:	d817      	bhi.n	800a14a <HAL_RCC_OscConfig+0x35e>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	2b20      	cmp	r3, #32
 800a120:	d108      	bne.n	800a134 <HAL_RCC_OscConfig+0x348>
 800a122:	4b70      	ldr	r3, [pc, #448]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a12a:	4a6e      	ldr	r2, [pc, #440]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a12c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a130:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a132:	e075      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a134:	4b6b      	ldr	r3, [pc, #428]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	069b      	lsls	r3, r3, #26
 800a142:	4968      	ldr	r1, [pc, #416]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a144:	4313      	orrs	r3, r2
 800a146:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a148:	e06a      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a14a:	4b66      	ldr	r3, [pc, #408]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	061b      	lsls	r3, r3, #24
 800a158:	4962      	ldr	r1, [pc, #392]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a15e:	e05f      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d042      	beq.n	800a1ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a168:	4b5e      	ldr	r3, [pc, #376]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a5d      	ldr	r2, [pc, #372]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a174:	f7f9 ffde 	bl	8004134 <HAL_GetTick>
 800a178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a17a:	e008      	b.n	800a18e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a17c:	f7f9 ffda 	bl	8004134 <HAL_GetTick>
 800a180:	4602      	mov	r2, r0
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	2b02      	cmp	r3, #2
 800a188:	d901      	bls.n	800a18e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e280      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a18e:	4b55      	ldr	r3, [pc, #340]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0f0      	beq.n	800a17c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a19a:	f7f9 fffb 	bl	8004194 <HAL_GetREVID>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d817      	bhi.n	800a1d8 <HAL_RCC_OscConfig+0x3ec>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	2b20      	cmp	r3, #32
 800a1ae:	d108      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x3d6>
 800a1b0:	4b4c      	ldr	r3, [pc, #304]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a1b8:	4a4a      	ldr	r2, [pc, #296]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1be:	6053      	str	r3, [r2, #4]
 800a1c0:	e02e      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
 800a1c2:	4b48      	ldr	r3, [pc, #288]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	069b      	lsls	r3, r3, #26
 800a1d0:	4944      	ldr	r1, [pc, #272]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	604b      	str	r3, [r1, #4]
 800a1d6:	e023      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
 800a1d8:	4b42      	ldr	r3, [pc, #264]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	061b      	lsls	r3, r3, #24
 800a1e6:	493f      	ldr	r1, [pc, #252]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60cb      	str	r3, [r1, #12]
 800a1ec:	e018      	b.n	800a220 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1ee:	4b3d      	ldr	r3, [pc, #244]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a3c      	ldr	r2, [pc, #240]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a1f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1fa:	f7f9 ff9b 	bl	8004134 <HAL_GetTick>
 800a1fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a200:	e008      	b.n	800a214 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a202:	f7f9 ff97 	bl	8004134 <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d901      	bls.n	800a214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e23d      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a214:	4b33      	ldr	r3, [pc, #204]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1f0      	bne.n	800a202 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0308 	and.w	r3, r3, #8
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d036      	beq.n	800a29a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d019      	beq.n	800a268 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a234:	4b2b      	ldr	r3, [pc, #172]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a238:	4a2a      	ldr	r2, [pc, #168]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a23a:	f043 0301 	orr.w	r3, r3, #1
 800a23e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a240:	f7f9 ff78 	bl	8004134 <HAL_GetTick>
 800a244:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a246:	e008      	b.n	800a25a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a248:	f7f9 ff74 	bl	8004134 <HAL_GetTick>
 800a24c:	4602      	mov	r2, r0
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	2b02      	cmp	r3, #2
 800a254:	d901      	bls.n	800a25a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a256:	2303      	movs	r3, #3
 800a258:	e21a      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a25a:	4b22      	ldr	r3, [pc, #136]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a25e:	f003 0302 	and.w	r3, r3, #2
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0f0      	beq.n	800a248 <HAL_RCC_OscConfig+0x45c>
 800a266:	e018      	b.n	800a29a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a268:	4b1e      	ldr	r3, [pc, #120]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a26c:	4a1d      	ldr	r2, [pc, #116]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a26e:	f023 0301 	bic.w	r3, r3, #1
 800a272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a274:	f7f9 ff5e 	bl	8004134 <HAL_GetTick>
 800a278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a27a:	e008      	b.n	800a28e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a27c:	f7f9 ff5a 	bl	8004134 <HAL_GetTick>
 800a280:	4602      	mov	r2, r0
 800a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	2b02      	cmp	r3, #2
 800a288:	d901      	bls.n	800a28e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e200      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a28e:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1f0      	bne.n	800a27c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d039      	beq.n	800a31a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d01c      	beq.n	800a2e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a0c      	ldr	r2, [pc, #48]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a2b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2ba:	f7f9 ff3b 	bl	8004134 <HAL_GetTick>
 800a2be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2c0:	e008      	b.n	800a2d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2c2:	f7f9 ff37 	bl	8004134 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d901      	bls.n	800a2d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e1dd      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2d4:	4b03      	ldr	r3, [pc, #12]	; (800a2e4 <HAL_RCC_OscConfig+0x4f8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0f0      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x4d6>
 800a2e0:	e01b      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
 800a2e2:	bf00      	nop
 800a2e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2e8:	4b9b      	ldr	r3, [pc, #620]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a9a      	ldr	r2, [pc, #616]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a2ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2f4:	f7f9 ff1e 	bl	8004134 <HAL_GetTick>
 800a2f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2fa:	e008      	b.n	800a30e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2fc:	f7f9 ff1a 	bl	8004134 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d901      	bls.n	800a30e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e1c0      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a30e:	4b92      	ldr	r3, [pc, #584]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1f0      	bne.n	800a2fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0304 	and.w	r3, r3, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 8081 	beq.w	800a42a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a328:	4b8c      	ldr	r3, [pc, #560]	; (800a55c <HAL_RCC_OscConfig+0x770>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a8b      	ldr	r2, [pc, #556]	; (800a55c <HAL_RCC_OscConfig+0x770>)
 800a32e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a332:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a334:	f7f9 fefe 	bl	8004134 <HAL_GetTick>
 800a338:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a33a:	e008      	b.n	800a34e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a33c:	f7f9 fefa 	bl	8004134 <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	2b64      	cmp	r3, #100	; 0x64
 800a348:	d901      	bls.n	800a34e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e1a0      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a34e:	4b83      	ldr	r3, [pc, #524]	; (800a55c <HAL_RCC_OscConfig+0x770>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0f0      	beq.n	800a33c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d106      	bne.n	800a370 <HAL_RCC_OscConfig+0x584>
 800a362:	4b7d      	ldr	r3, [pc, #500]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a366:	4a7c      	ldr	r2, [pc, #496]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a368:	f043 0301 	orr.w	r3, r3, #1
 800a36c:	6713      	str	r3, [r2, #112]	; 0x70
 800a36e:	e02d      	b.n	800a3cc <HAL_RCC_OscConfig+0x5e0>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10c      	bne.n	800a392 <HAL_RCC_OscConfig+0x5a6>
 800a378:	4b77      	ldr	r3, [pc, #476]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37c:	4a76      	ldr	r2, [pc, #472]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a37e:	f023 0301 	bic.w	r3, r3, #1
 800a382:	6713      	str	r3, [r2, #112]	; 0x70
 800a384:	4b74      	ldr	r3, [pc, #464]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a388:	4a73      	ldr	r2, [pc, #460]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a38a:	f023 0304 	bic.w	r3, r3, #4
 800a38e:	6713      	str	r3, [r2, #112]	; 0x70
 800a390:	e01c      	b.n	800a3cc <HAL_RCC_OscConfig+0x5e0>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2b05      	cmp	r3, #5
 800a398:	d10c      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x5c8>
 800a39a:	4b6f      	ldr	r3, [pc, #444]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39e:	4a6e      	ldr	r2, [pc, #440]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3a0:	f043 0304 	orr.w	r3, r3, #4
 800a3a4:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a6:	4b6c      	ldr	r3, [pc, #432]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3aa:	4a6b      	ldr	r2, [pc, #428]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3ac:	f043 0301 	orr.w	r3, r3, #1
 800a3b0:	6713      	str	r3, [r2, #112]	; 0x70
 800a3b2:	e00b      	b.n	800a3cc <HAL_RCC_OscConfig+0x5e0>
 800a3b4:	4b68      	ldr	r3, [pc, #416]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b8:	4a67      	ldr	r2, [pc, #412]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3ba:	f023 0301 	bic.w	r3, r3, #1
 800a3be:	6713      	str	r3, [r2, #112]	; 0x70
 800a3c0:	4b65      	ldr	r3, [pc, #404]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c4:	4a64      	ldr	r2, [pc, #400]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3c6:	f023 0304 	bic.w	r3, r3, #4
 800a3ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d015      	beq.n	800a400 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3d4:	f7f9 feae 	bl	8004134 <HAL_GetTick>
 800a3d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3da:	e00a      	b.n	800a3f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3dc:	f7f9 feaa 	bl	8004134 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d901      	bls.n	800a3f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e14e      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3f2:	4b59      	ldr	r3, [pc, #356]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0ee      	beq.n	800a3dc <HAL_RCC_OscConfig+0x5f0>
 800a3fe:	e014      	b.n	800a42a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a400:	f7f9 fe98 	bl	8004134 <HAL_GetTick>
 800a404:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a406:	e00a      	b.n	800a41e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a408:	f7f9 fe94 	bl	8004134 <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	f241 3288 	movw	r2, #5000	; 0x1388
 800a416:	4293      	cmp	r3, r2
 800a418:	d901      	bls.n	800a41e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e138      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a41e:	4b4e      	ldr	r3, [pc, #312]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1ee      	bne.n	800a408 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 812d 	beq.w	800a68e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a434:	4b48      	ldr	r3, [pc, #288]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a43c:	2b18      	cmp	r3, #24
 800a43e:	f000 80bd 	beq.w	800a5bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	2b02      	cmp	r3, #2
 800a448:	f040 809e 	bne.w	800a588 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a44c:	4b42      	ldr	r3, [pc, #264]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a41      	ldr	r2, [pc, #260]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a458:	f7f9 fe6c 	bl	8004134 <HAL_GetTick>
 800a45c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a45e:	e008      	b.n	800a472 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a460:	f7f9 fe68 	bl	8004134 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e10e      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a472:	4b39      	ldr	r3, [pc, #228]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1f0      	bne.n	800a460 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a47e:	4b36      	ldr	r3, [pc, #216]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a482:	4b37      	ldr	r3, [pc, #220]	; (800a560 <HAL_RCC_OscConfig+0x774>)
 800a484:	4013      	ands	r3, r2
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a48e:	0112      	lsls	r2, r2, #4
 800a490:	430a      	orrs	r2, r1
 800a492:	4931      	ldr	r1, [pc, #196]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a494:	4313      	orrs	r3, r2
 800a496:	628b      	str	r3, [r1, #40]	; 0x28
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49c:	3b01      	subs	r3, #1
 800a49e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	025b      	lsls	r3, r3, #9
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	041b      	lsls	r3, r3, #16
 800a4b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	061b      	lsls	r3, r3, #24
 800a4c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4c8:	4923      	ldr	r1, [pc, #140]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a4ce:	4b22      	ldr	r3, [pc, #136]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d2:	4a21      	ldr	r2, [pc, #132]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4d4:	f023 0301 	bic.w	r3, r3, #1
 800a4d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4da:	4b1f      	ldr	r3, [pc, #124]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4de:	4b21      	ldr	r3, [pc, #132]	; (800a564 <HAL_RCC_OscConfig+0x778>)
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4e6:	00d2      	lsls	r2, r2, #3
 800a4e8:	491b      	ldr	r1, [pc, #108]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4ee:	4b1a      	ldr	r3, [pc, #104]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	f023 020c 	bic.w	r2, r3, #12
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	4917      	ldr	r1, [pc, #92]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a500:	4b15      	ldr	r3, [pc, #84]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	f023 0202 	bic.w	r2, r3, #2
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a50c:	4912      	ldr	r1, [pc, #72]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a512:	4b11      	ldr	r3, [pc, #68]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a516:	4a10      	ldr	r2, [pc, #64]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a51c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a51e:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	4a0d      	ldr	r2, [pc, #52]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a52a:	4b0b      	ldr	r3, [pc, #44]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	4a0a      	ldr	r2, [pc, #40]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a536:	4b08      	ldr	r3, [pc, #32]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53a:	4a07      	ldr	r2, [pc, #28]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a53c:	f043 0301 	orr.w	r3, r3, #1
 800a540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a542:	4b05      	ldr	r3, [pc, #20]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a04      	ldr	r2, [pc, #16]	; (800a558 <HAL_RCC_OscConfig+0x76c>)
 800a548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a54c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54e:	f7f9 fdf1 	bl	8004134 <HAL_GetTick>
 800a552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a554:	e011      	b.n	800a57a <HAL_RCC_OscConfig+0x78e>
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400
 800a55c:	58024800 	.word	0x58024800
 800a560:	fffffc0c 	.word	0xfffffc0c
 800a564:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a568:	f7f9 fde4 	bl	8004134 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	2b02      	cmp	r3, #2
 800a574:	d901      	bls.n	800a57a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e08a      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a57a:	4b47      	ldr	r3, [pc, #284]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0f0      	beq.n	800a568 <HAL_RCC_OscConfig+0x77c>
 800a586:	e082      	b.n	800a68e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a588:	4b43      	ldr	r3, [pc, #268]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a42      	ldr	r2, [pc, #264]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a58e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a594:	f7f9 fdce 	bl	8004134 <HAL_GetTick>
 800a598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a59c:	f7f9 fdca 	bl	8004134 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e070      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5ae:	4b3a      	ldr	r3, [pc, #232]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f0      	bne.n	800a59c <HAL_RCC_OscConfig+0x7b0>
 800a5ba:	e068      	b.n	800a68e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5bc:	4b36      	ldr	r3, [pc, #216]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5c2:	4b35      	ldr	r3, [pc, #212]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d031      	beq.n	800a634 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f003 0203 	and.w	r2, r3, #3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d12a      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	091b      	lsrs	r3, r3, #4
 800a5e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d122      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d11a      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	0a5b      	lsrs	r3, r3, #9
 800a602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d111      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	0c1b      	lsrs	r3, r3, #16
 800a614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a61e:	429a      	cmp	r2, r3
 800a620:	d108      	bne.n	800a634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	0e1b      	lsrs	r3, r3, #24
 800a626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a630:	429a      	cmp	r2, r3
 800a632:	d001      	beq.n	800a638 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e02b      	b.n	800a690 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a638:	4b17      	ldr	r3, [pc, #92]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	08db      	lsrs	r3, r3, #3
 800a63e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a642:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d01f      	beq.n	800a68e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a64e:	4b12      	ldr	r3, [pc, #72]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a652:	4a11      	ldr	r2, [pc, #68]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a654:	f023 0301 	bic.w	r3, r3, #1
 800a658:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a65a:	f7f9 fd6b 	bl	8004134 <HAL_GetTick>
 800a65e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a660:	bf00      	nop
 800a662:	f7f9 fd67 	bl	8004134 <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d0f9      	beq.n	800a662 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a672:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <HAL_RCC_OscConfig+0x8b0>)
 800a674:	4013      	ands	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a67a:	00d2      	lsls	r2, r2, #3
 800a67c:	4906      	ldr	r1, [pc, #24]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a682:	4b05      	ldr	r3, [pc, #20]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	4a04      	ldr	r2, [pc, #16]	; (800a698 <HAL_RCC_OscConfig+0x8ac>)
 800a688:	f043 0301 	orr.w	r3, r3, #1
 800a68c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3730      	adds	r7, #48	; 0x30
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	58024400 	.word	0x58024400
 800a69c:	ffff0007 	.word	0xffff0007

0800a6a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e19c      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6b4:	4b8a      	ldr	r3, [pc, #552]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 030f 	and.w	r3, r3, #15
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d910      	bls.n	800a6e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6c2:	4b87      	ldr	r3, [pc, #540]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f023 020f 	bic.w	r2, r3, #15
 800a6ca:	4985      	ldr	r1, [pc, #532]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6d2:	4b83      	ldr	r3, [pc, #524]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 030f 	and.w	r3, r3, #15
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d001      	beq.n	800a6e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e184      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d010      	beq.n	800a712 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	4b7b      	ldr	r3, [pc, #492]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d908      	bls.n	800a712 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a700:	4b78      	ldr	r3, [pc, #480]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	4975      	ldr	r1, [pc, #468]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 0308 	and.w	r3, r3, #8
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d010      	beq.n	800a740 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	695a      	ldr	r2, [r3, #20]
 800a722:	4b70      	ldr	r3, [pc, #448]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d908      	bls.n	800a740 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a72e:	4b6d      	ldr	r3, [pc, #436]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	496a      	ldr	r1, [pc, #424]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a73c:	4313      	orrs	r3, r2
 800a73e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0310 	and.w	r3, r3, #16
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d010      	beq.n	800a76e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699a      	ldr	r2, [r3, #24]
 800a750:	4b64      	ldr	r3, [pc, #400]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a758:	429a      	cmp	r2, r3
 800a75a:	d908      	bls.n	800a76e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a75c:	4b61      	ldr	r3, [pc, #388]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	495e      	ldr	r1, [pc, #376]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0320 	and.w	r3, r3, #32
 800a776:	2b00      	cmp	r3, #0
 800a778:	d010      	beq.n	800a79c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69da      	ldr	r2, [r3, #28]
 800a77e:	4b59      	ldr	r3, [pc, #356]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a786:	429a      	cmp	r2, r3
 800a788:	d908      	bls.n	800a79c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a78a:	4b56      	ldr	r3, [pc, #344]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	4953      	ldr	r1, [pc, #332]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d010      	beq.n	800a7ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68da      	ldr	r2, [r3, #12]
 800a7ac:	4b4d      	ldr	r3, [pc, #308]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	f003 030f 	and.w	r3, r3, #15
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d908      	bls.n	800a7ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7b8:	4b4a      	ldr	r3, [pc, #296]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	f023 020f 	bic.w	r2, r3, #15
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	4947      	ldr	r1, [pc, #284]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d055      	beq.n	800a882 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a7d6:	4b43      	ldr	r3, [pc, #268]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	4940      	ldr	r1, [pc, #256]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d107      	bne.n	800a800 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7f0:	4b3c      	ldr	r3, [pc, #240]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d121      	bne.n	800a840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e0f6      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2b03      	cmp	r3, #3
 800a806:	d107      	bne.n	800a818 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a808:	4b36      	ldr	r3, [pc, #216]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d115      	bne.n	800a840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e0ea      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d107      	bne.n	800a830 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a820:	4b30      	ldr	r3, [pc, #192]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d109      	bne.n	800a840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e0de      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a830:	4b2c      	ldr	r3, [pc, #176]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0d6      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a840:	4b28      	ldr	r3, [pc, #160]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f023 0207 	bic.w	r2, r3, #7
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4925      	ldr	r1, [pc, #148]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a852:	f7f9 fc6f 	bl	8004134 <HAL_GetTick>
 800a856:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a858:	e00a      	b.n	800a870 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a85a:	f7f9 fc6b 	bl	8004134 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	f241 3288 	movw	r2, #5000	; 0x1388
 800a868:	4293      	cmp	r3, r2
 800a86a:	d901      	bls.n	800a870 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e0be      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a870:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	429a      	cmp	r2, r3
 800a880:	d1eb      	bne.n	800a85a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0302 	and.w	r3, r3, #2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d010      	beq.n	800a8b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	4b14      	ldr	r3, [pc, #80]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d208      	bcs.n	800a8b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a89e:	4b11      	ldr	r3, [pc, #68]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	f023 020f 	bic.w	r2, r3, #15
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	490e      	ldr	r1, [pc, #56]	; (800a8e4 <HAL_RCC_ClockConfig+0x244>)
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 030f 	and.w	r3, r3, #15
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d214      	bcs.n	800a8e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8be:	4b08      	ldr	r3, [pc, #32]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f023 020f 	bic.w	r2, r3, #15
 800a8c6:	4906      	ldr	r1, [pc, #24]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <HAL_RCC_ClockConfig+0x240>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 030f 	and.w	r3, r3, #15
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d005      	beq.n	800a8e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e086      	b.n	800a9ee <HAL_RCC_ClockConfig+0x34e>
 800a8e0:	52002000 	.word	0x52002000
 800a8e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d010      	beq.n	800a916 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691a      	ldr	r2, [r3, #16]
 800a8f8:	4b3f      	ldr	r3, [pc, #252]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a900:	429a      	cmp	r2, r3
 800a902:	d208      	bcs.n	800a916 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a904:	4b3c      	ldr	r3, [pc, #240]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	4939      	ldr	r1, [pc, #228]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a912:	4313      	orrs	r3, r2
 800a914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0308 	and.w	r3, r3, #8
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d010      	beq.n	800a944 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	695a      	ldr	r2, [r3, #20]
 800a926:	4b34      	ldr	r3, [pc, #208]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a92e:	429a      	cmp	r2, r3
 800a930:	d208      	bcs.n	800a944 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a932:	4b31      	ldr	r3, [pc, #196]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	492e      	ldr	r1, [pc, #184]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a940:	4313      	orrs	r3, r2
 800a942:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0310 	and.w	r3, r3, #16
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d010      	beq.n	800a972 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	699a      	ldr	r2, [r3, #24]
 800a954:	4b28      	ldr	r3, [pc, #160]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d208      	bcs.n	800a972 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a960:	4b25      	ldr	r3, [pc, #148]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	4922      	ldr	r1, [pc, #136]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d010      	beq.n	800a9a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	69da      	ldr	r2, [r3, #28]
 800a982:	4b1d      	ldr	r3, [pc, #116]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d208      	bcs.n	800a9a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a98e:	4b1a      	ldr	r3, [pc, #104]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	4917      	ldr	r1, [pc, #92]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a9a0:	f000 f844 	bl	800aa2c <HAL_RCC_GetSysClockFreq>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	4b14      	ldr	r3, [pc, #80]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	0a1b      	lsrs	r3, r3, #8
 800a9ac:	f003 030f 	and.w	r3, r3, #15
 800a9b0:	4912      	ldr	r1, [pc, #72]	; (800a9fc <HAL_RCC_ClockConfig+0x35c>)
 800a9b2:	5ccb      	ldrb	r3, [r1, r3]
 800a9b4:	f003 031f 	and.w	r3, r3, #31
 800a9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9be:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <HAL_RCC_ClockConfig+0x358>)
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	4a0d      	ldr	r2, [pc, #52]	; (800a9fc <HAL_RCC_ClockConfig+0x35c>)
 800a9c8:	5cd3      	ldrb	r3, [r2, r3]
 800a9ca:	f003 031f 	and.w	r3, r3, #31
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d4:	4a0a      	ldr	r2, [pc, #40]	; (800aa00 <HAL_RCC_ClockConfig+0x360>)
 800a9d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9d8:	4a0a      	ldr	r2, [pc, #40]	; (800aa04 <HAL_RCC_ClockConfig+0x364>)
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a9de:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <HAL_RCC_ClockConfig+0x368>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7f9 fb5c 	bl	80040a0 <HAL_InitTick>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	08020610 	.word	0x08020610
 800aa00:	20000114 	.word	0x20000114
 800aa04:	20000110 	.word	0x20000110
 800aa08:	20000128 	.word	0x20000128

0800aa0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800aa10:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <HAL_RCC_EnableCSS+0x1c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a04      	ldr	r2, [pc, #16]	; (800aa28 <HAL_RCC_EnableCSS+0x1c>)
 800aa16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa1a:	6013      	str	r3, [r2, #0]
}
 800aa1c:	bf00      	nop
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	58024400 	.word	0x58024400

0800aa2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b089      	sub	sp, #36	; 0x24
 800aa30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa32:	4bb3      	ldr	r3, [pc, #716]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa3a:	2b18      	cmp	r3, #24
 800aa3c:	f200 8155 	bhi.w	800acea <HAL_RCC_GetSysClockFreq+0x2be>
 800aa40:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa46:	bf00      	nop
 800aa48:	0800aaad 	.word	0x0800aaad
 800aa4c:	0800aceb 	.word	0x0800aceb
 800aa50:	0800aceb 	.word	0x0800aceb
 800aa54:	0800aceb 	.word	0x0800aceb
 800aa58:	0800aceb 	.word	0x0800aceb
 800aa5c:	0800aceb 	.word	0x0800aceb
 800aa60:	0800aceb 	.word	0x0800aceb
 800aa64:	0800aceb 	.word	0x0800aceb
 800aa68:	0800aad3 	.word	0x0800aad3
 800aa6c:	0800aceb 	.word	0x0800aceb
 800aa70:	0800aceb 	.word	0x0800aceb
 800aa74:	0800aceb 	.word	0x0800aceb
 800aa78:	0800aceb 	.word	0x0800aceb
 800aa7c:	0800aceb 	.word	0x0800aceb
 800aa80:	0800aceb 	.word	0x0800aceb
 800aa84:	0800aceb 	.word	0x0800aceb
 800aa88:	0800aad9 	.word	0x0800aad9
 800aa8c:	0800aceb 	.word	0x0800aceb
 800aa90:	0800aceb 	.word	0x0800aceb
 800aa94:	0800aceb 	.word	0x0800aceb
 800aa98:	0800aceb 	.word	0x0800aceb
 800aa9c:	0800aceb 	.word	0x0800aceb
 800aaa0:	0800aceb 	.word	0x0800aceb
 800aaa4:	0800aceb 	.word	0x0800aceb
 800aaa8:	0800aadf 	.word	0x0800aadf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaac:	4b94      	ldr	r3, [pc, #592]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0320 	and.w	r3, r3, #32
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aab8:	4b91      	ldr	r3, [pc, #580]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	08db      	lsrs	r3, r3, #3
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	4a90      	ldr	r2, [pc, #576]	; (800ad04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aac4:	fa22 f303 	lsr.w	r3, r2, r3
 800aac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aaca:	e111      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aacc:	4b8d      	ldr	r3, [pc, #564]	; (800ad04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aace:	61bb      	str	r3, [r7, #24]
      break;
 800aad0:	e10e      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aad2:	4b8d      	ldr	r3, [pc, #564]	; (800ad08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aad4:	61bb      	str	r3, [r7, #24]
      break;
 800aad6:	e10b      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aad8:	4b8c      	ldr	r3, [pc, #560]	; (800ad0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aada:	61bb      	str	r3, [r7, #24]
      break;
 800aadc:	e108      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aade:	4b88      	ldr	r3, [pc, #544]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae2:	f003 0303 	and.w	r3, r3, #3
 800aae6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aae8:	4b85      	ldr	r3, [pc, #532]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaec:	091b      	lsrs	r3, r3, #4
 800aaee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaf2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aaf4:	4b82      	ldr	r3, [pc, #520]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aafe:	4b80      	ldr	r3, [pc, #512]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab02:	08db      	lsrs	r3, r3, #3
 800ab04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 80e1 	beq.w	800ace4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	f000 8083 	beq.w	800ac30 <HAL_RCC_GetSysClockFreq+0x204>
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	f200 80a1 	bhi.w	800ac74 <HAL_RCC_GetSysClockFreq+0x248>
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <HAL_RCC_GetSysClockFreq+0x114>
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d056      	beq.n	800abec <HAL_RCC_GetSysClockFreq+0x1c0>
 800ab3e:	e099      	b.n	800ac74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab40:	4b6f      	ldr	r3, [pc, #444]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0320 	and.w	r3, r3, #32
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d02d      	beq.n	800aba8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab4c:	4b6c      	ldr	r3, [pc, #432]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	08db      	lsrs	r3, r3, #3
 800ab52:	f003 0303 	and.w	r3, r3, #3
 800ab56:	4a6b      	ldr	r2, [pc, #428]	; (800ad04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab58:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	ee07 3a90 	vmov	s15, r3
 800ab64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab76:	4b62      	ldr	r3, [pc, #392]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab86:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aba6:	e087      	b.n	800acb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ad14 <HAL_RCC_GetSysClockFreq+0x2e8>
 800abb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abba:	4b51      	ldr	r3, [pc, #324]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abca:	ed97 6a02 	vldr	s12, [r7, #8]
 800abce:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abea:	e065      	b.n	800acb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ad18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abfe:	4b40      	ldr	r3, [pc, #256]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac2e:	e043      	b.n	800acb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ad1c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ac3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac42:	4b2f      	ldr	r3, [pc, #188]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac72:	e021      	b.n	800acb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ad18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b1e      	ldr	r3, [pc, #120]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800acb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800acb8:	4b11      	ldr	r3, [pc, #68]	; (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acbc:	0a5b      	lsrs	r3, r3, #9
 800acbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acc2:	3301      	adds	r3, #1
 800acc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	ee07 3a90 	vmov	s15, r3
 800accc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acdc:	ee17 3a90 	vmov	r3, s15
 800ace0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ace2:	e005      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	61bb      	str	r3, [r7, #24]
      break;
 800ace8:	e002      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800acec:	61bb      	str	r3, [r7, #24]
      break;
 800acee:	bf00      	nop
  }

  return sysclockfreq;
 800acf0:	69bb      	ldr	r3, [r7, #24]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3724      	adds	r7, #36	; 0x24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	58024400 	.word	0x58024400
 800ad04:	03d09000 	.word	0x03d09000
 800ad08:	003d0900 	.word	0x003d0900
 800ad0c:	00989680 	.word	0x00989680
 800ad10:	46000000 	.word	0x46000000
 800ad14:	4c742400 	.word	0x4c742400
 800ad18:	4a742400 	.word	0x4a742400
 800ad1c:	4b189680 	.word	0x4b189680

0800ad20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad26:	f7ff fe81 	bl	800aa2c <HAL_RCC_GetSysClockFreq>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <HAL_RCC_GetHCLKFreq+0x50>)
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	0a1b      	lsrs	r3, r3, #8
 800ad32:	f003 030f 	and.w	r3, r3, #15
 800ad36:	490f      	ldr	r1, [pc, #60]	; (800ad74 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad38:	5ccb      	ldrb	r3, [r1, r3]
 800ad3a:	f003 031f 	and.w	r3, r3, #31
 800ad3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad44:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <HAL_RCC_GetHCLKFreq+0x50>)
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	f003 030f 	and.w	r3, r3, #15
 800ad4c:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad4e:	5cd3      	ldrb	r3, [r2, r3]
 800ad50:	f003 031f 	and.w	r3, r3, #31
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5a:	4a07      	ldr	r2, [pc, #28]	; (800ad78 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad5e:	4a07      	ldr	r2, [pc, #28]	; (800ad7c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad64:	4b04      	ldr	r3, [pc, #16]	; (800ad78 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad66:	681b      	ldr	r3, [r3, #0]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	58024400 	.word	0x58024400
 800ad74:	08020610 	.word	0x08020610
 800ad78:	20000114 	.word	0x20000114
 800ad7c:	20000110 	.word	0x20000110

0800ad80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad84:	f7ff ffcc 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	091b      	lsrs	r3, r3, #4
 800ad90:	f003 0307 	and.w	r3, r3, #7
 800ad94:	4904      	ldr	r1, [pc, #16]	; (800ada8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad96:	5ccb      	ldrb	r3, [r1, r3]
 800ad98:	f003 031f 	and.w	r3, r3, #31
 800ad9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	58024400 	.word	0x58024400
 800ada8:	08020610 	.word	0x08020610

0800adac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800adb0:	f7ff ffb6 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 800adb4:	4602      	mov	r2, r0
 800adb6:	4b06      	ldr	r3, [pc, #24]	; (800add0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	0a1b      	lsrs	r3, r3, #8
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	4904      	ldr	r1, [pc, #16]	; (800add4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800adc2:	5ccb      	ldrb	r3, [r1, r3]
 800adc4:	f003 031f 	and.w	r3, r3, #31
 800adc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800adcc:	4618      	mov	r0, r3
 800adce:	bd80      	pop	{r7, pc}
 800add0:	58024400 	.word	0x58024400
 800add4:	08020610 	.word	0x08020610

0800add8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800addc:	4b07      	ldr	r3, [pc, #28]	; (800adfc <HAL_RCC_NMI_IRQHandler+0x24>)
 800adde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ade0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ade4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade8:	d105      	bne.n	800adf6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800adea:	f000 f809 	bl	800ae00 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800adee:	4b03      	ldr	r3, [pc, #12]	; (800adfc <HAL_RCC_NMI_IRQHandler+0x24>)
 800adf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adf4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800adf6:	bf00      	nop
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	58024400 	.word	0x58024400

0800ae00 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ae00:	b480      	push	{r7}
 800ae02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800ae04:	bf00      	nop
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
	...

0800ae10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae14:	b0ca      	sub	sp, #296	; 0x128
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae22:	2300      	movs	r3, #0
 800ae24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ae34:	2500      	movs	r5, #0
 800ae36:	ea54 0305 	orrs.w	r3, r4, r5
 800ae3a:	d049      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae46:	d02f      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ae48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae4c:	d828      	bhi.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae52:	d01a      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ae54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae58:	d822      	bhi.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ae5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae62:	d007      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae64:	e01c      	b.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae66:	4bb8      	ldr	r3, [pc, #736]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6a:	4ab7      	ldr	r2, [pc, #732]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae72:	e01a      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae78:	3308      	adds	r3, #8
 800ae7a:	2102      	movs	r1, #2
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f002 fbb7 	bl	800d5f0 <RCCEx_PLL2_Config>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae88:	e00f      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae8e:	3328      	adds	r3, #40	; 0x28
 800ae90:	2102      	movs	r1, #2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f002 fc5e 	bl	800d754 <RCCEx_PLL3_Config>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae9e:	e004      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aea6:	e000      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aeb2:	4ba5      	ldr	r3, [pc, #660]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aeba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec0:	4aa1      	ldr	r2, [pc, #644]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aec2:	430b      	orrs	r3, r1
 800aec4:	6513      	str	r3, [r2, #80]	; 0x50
 800aec6:	e003      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aedc:	f04f 0900 	mov.w	r9, #0
 800aee0:	ea58 0309 	orrs.w	r3, r8, r9
 800aee4:	d047      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d82a      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aef0:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef6:	bf00      	nop
 800aef8:	0800af0d 	.word	0x0800af0d
 800aefc:	0800af1b 	.word	0x0800af1b
 800af00:	0800af31 	.word	0x0800af31
 800af04:	0800af4f 	.word	0x0800af4f
 800af08:	0800af4f 	.word	0x0800af4f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af0c:	4b8e      	ldr	r3, [pc, #568]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af10:	4a8d      	ldr	r2, [pc, #564]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af18:	e01a      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1e:	3308      	adds	r3, #8
 800af20:	2100      	movs	r1, #0
 800af22:	4618      	mov	r0, r3
 800af24:	f002 fb64 	bl	800d5f0 <RCCEx_PLL2_Config>
 800af28:	4603      	mov	r3, r0
 800af2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af2e:	e00f      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af34:	3328      	adds	r3, #40	; 0x28
 800af36:	2100      	movs	r1, #0
 800af38:	4618      	mov	r0, r3
 800af3a:	f002 fc0b 	bl	800d754 <RCCEx_PLL3_Config>
 800af3e:	4603      	mov	r3, r0
 800af40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af44:	e004      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af4c:	e000      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800af4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af58:	4b7b      	ldr	r3, [pc, #492]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5c:	f023 0107 	bic.w	r1, r3, #7
 800af60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af66:	4a78      	ldr	r2, [pc, #480]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af68:	430b      	orrs	r3, r1
 800af6a:	6513      	str	r3, [r2, #80]	; 0x50
 800af6c:	e003      	b.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800af76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800af82:	f04f 0b00 	mov.w	fp, #0
 800af86:	ea5a 030b 	orrs.w	r3, sl, fp
 800af8a:	d04c      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800af8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af96:	d030      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800af98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af9c:	d829      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800af9e:	2bc0      	cmp	r3, #192	; 0xc0
 800afa0:	d02d      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800afa2:	2bc0      	cmp	r3, #192	; 0xc0
 800afa4:	d825      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afa6:	2b80      	cmp	r3, #128	; 0x80
 800afa8:	d018      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800afaa:	2b80      	cmp	r3, #128	; 0x80
 800afac:	d821      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800afb2:	2b40      	cmp	r3, #64	; 0x40
 800afb4:	d007      	beq.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800afb6:	e01c      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afb8:	4b63      	ldr	r3, [pc, #396]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	4a62      	ldr	r2, [pc, #392]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800afc4:	e01c      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afca:	3308      	adds	r3, #8
 800afcc:	2100      	movs	r1, #0
 800afce:	4618      	mov	r0, r3
 800afd0:	f002 fb0e 	bl	800d5f0 <RCCEx_PLL2_Config>
 800afd4:	4603      	mov	r3, r0
 800afd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800afda:	e011      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe0:	3328      	adds	r3, #40	; 0x28
 800afe2:	2100      	movs	r1, #0
 800afe4:	4618      	mov	r0, r3
 800afe6:	f002 fbb5 	bl	800d754 <RCCEx_PLL3_Config>
 800afea:	4603      	mov	r3, r0
 800afec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aff0:	e006      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aff8:	e002      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800affa:	bf00      	nop
 800affc:	e000      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800affe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b008:	4b4f      	ldr	r3, [pc, #316]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b00c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b016:	4a4c      	ldr	r2, [pc, #304]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b018:	430b      	orrs	r3, r1
 800b01a:	6513      	str	r3, [r2, #80]	; 0x50
 800b01c:	e003      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b032:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b036:	2300      	movs	r3, #0
 800b038:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b03c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b040:	460b      	mov	r3, r1
 800b042:	4313      	orrs	r3, r2
 800b044:	d053      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b04e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b052:	d035      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b058:	d82e      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b05a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b05e:	d031      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b060:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b064:	d828      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b06a:	d01a      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b06c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b070:	d822      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b07a:	d007      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b07c:	e01c      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b07e:	4b32      	ldr	r3, [pc, #200]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	4a31      	ldr	r2, [pc, #196]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b088:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b08a:	e01c      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b090:	3308      	adds	r3, #8
 800b092:	2100      	movs	r1, #0
 800b094:	4618      	mov	r0, r3
 800b096:	f002 faab 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b0a0:	e011      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a6:	3328      	adds	r3, #40	; 0x28
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f002 fb52 	bl	800d754 <RCCEx_PLL3_Config>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0b6:	e006      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0be:	e002      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0c0:	bf00      	nop
 800b0c2:	e000      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10b      	bne.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b0ce:	4b1e      	ldr	r3, [pc, #120]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0d2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b0de:	4a1a      	ldr	r2, [pc, #104]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0e0:	430b      	orrs	r3, r1
 800b0e2:	6593      	str	r3, [r2, #88]	; 0x58
 800b0e4:	e003      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b0fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b0fe:	2300      	movs	r3, #0
 800b100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b104:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b108:	460b      	mov	r3, r1
 800b10a:	4313      	orrs	r3, r2
 800b10c:	d056      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b112:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b11a:	d038      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b11c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b120:	d831      	bhi.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b122:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b126:	d034      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b128:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b12c:	d82b      	bhi.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b12e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b132:	d01d      	beq.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b138:	d825      	bhi.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d006      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b13e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b142:	d00a      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b144:	e01f      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b146:	bf00      	nop
 800b148:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b14c:	4ba2      	ldr	r3, [pc, #648]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b150:	4aa1      	ldr	r2, [pc, #644]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b158:	e01c      	b.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15e:	3308      	adds	r3, #8
 800b160:	2100      	movs	r1, #0
 800b162:	4618      	mov	r0, r3
 800b164:	f002 fa44 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b168:	4603      	mov	r3, r0
 800b16a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b16e:	e011      	b.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b174:	3328      	adds	r3, #40	; 0x28
 800b176:	2100      	movs	r1, #0
 800b178:	4618      	mov	r0, r3
 800b17a:	f002 faeb 	bl	800d754 <RCCEx_PLL3_Config>
 800b17e:	4603      	mov	r3, r0
 800b180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b184:	e006      	b.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b18c:	e002      	b.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b18e:	bf00      	nop
 800b190:	e000      	b.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b192:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10b      	bne.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b19c:	4b8e      	ldr	r3, [pc, #568]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b19e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1ac:	4a8a      	ldr	r2, [pc, #552]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b1b2:	e003      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b1c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	d03a      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e2:	2b30      	cmp	r3, #48	; 0x30
 800b1e4:	d01f      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b1e6:	2b30      	cmp	r3, #48	; 0x30
 800b1e8:	d819      	bhi.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b1ea:	2b20      	cmp	r3, #32
 800b1ec:	d00c      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b1ee:	2b20      	cmp	r3, #32
 800b1f0:	d815      	bhi.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d019      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b1f6:	2b10      	cmp	r3, #16
 800b1f8:	d111      	bne.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1fa:	4b77      	ldr	r3, [pc, #476]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fe:	4a76      	ldr	r2, [pc, #472]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b206:	e011      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20c:	3308      	adds	r3, #8
 800b20e:	2102      	movs	r1, #2
 800b210:	4618      	mov	r0, r3
 800b212:	f002 f9ed 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b216:	4603      	mov	r3, r0
 800b218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b21c:	e006      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b224:	e002      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b226:	bf00      	nop
 800b228:	e000      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b22a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b22c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b234:	4b68      	ldr	r3, [pc, #416]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b238:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b242:	4a65      	ldr	r2, [pc, #404]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b244:	430b      	orrs	r3, r1
 800b246:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b248:	e003      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b24e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b25e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b262:	2300      	movs	r3, #0
 800b264:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b268:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4313      	orrs	r3, r2
 800b270:	d051      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b27c:	d035      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b27e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b282:	d82e      	bhi.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b284:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b288:	d031      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b28a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b28e:	d828      	bhi.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b294:	d01a      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b29a:	d822      	bhi.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d003      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a4:	d007      	beq.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b2a6:	e01c      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2a8:	4b4b      	ldr	r3, [pc, #300]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ac:	4a4a      	ldr	r2, [pc, #296]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2b4:	e01c      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f002 f996 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2ca:	e011      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d0:	3328      	adds	r3, #40	; 0x28
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f002 fa3d 	bl	800d754 <RCCEx_PLL3_Config>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2e0:	e006      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2e8:	e002      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b2ea:	bf00      	nop
 800b2ec:	e000      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b2ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b2f8:	4b37      	ldr	r3, [pc, #220]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2fc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b306:	4a34      	ldr	r2, [pc, #208]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b308:	430b      	orrs	r3, r1
 800b30a:	6513      	str	r3, [r2, #80]	; 0x50
 800b30c:	e003      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b326:	2300      	movs	r3, #0
 800b328:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b32c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b330:	460b      	mov	r3, r1
 800b332:	4313      	orrs	r3, r2
 800b334:	d056      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b33c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b340:	d033      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b346:	d82c      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b34c:	d02f      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b34e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b352:	d826      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b354:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b358:	d02b      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b35a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b35e:	d820      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b364:	d012      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b36a:	d81a      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d022      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b374:	d115      	bne.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37a:	3308      	adds	r3, #8
 800b37c:	2101      	movs	r1, #1
 800b37e:	4618      	mov	r0, r3
 800b380:	f002 f936 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b384:	4603      	mov	r3, r0
 800b386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b38a:	e015      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b390:	3328      	adds	r3, #40	; 0x28
 800b392:	2101      	movs	r1, #1
 800b394:	4618      	mov	r0, r3
 800b396:	f002 f9dd 	bl	800d754 <RCCEx_PLL3_Config>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b3a0:	e00a      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3a8:	e006      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3aa:	bf00      	nop
 800b3ac:	e004      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3ae:	bf00      	nop
 800b3b0:	e002      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3b2:	bf00      	nop
 800b3b4:	e000      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10d      	bne.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b3c0:	4b05      	ldr	r3, [pc, #20]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ce:	4a02      	ldr	r2, [pc, #8]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	6513      	str	r3, [r2, #80]	; 0x50
 800b3d4:	e006      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b3d6:	bf00      	nop
 800b3d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b3f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3fa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4313      	orrs	r3, r2
 800b402:	d055      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b40c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b410:	d033      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b416:	d82c      	bhi.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b41c:	d02f      	beq.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b422:	d826      	bhi.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b424:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b428:	d02b      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b42a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b42e:	d820      	bhi.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b434:	d012      	beq.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b43a:	d81a      	bhi.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d022      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b444:	d115      	bne.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44a:	3308      	adds	r3, #8
 800b44c:	2101      	movs	r1, #1
 800b44e:	4618      	mov	r0, r3
 800b450:	f002 f8ce 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b454:	4603      	mov	r3, r0
 800b456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b45a:	e015      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b460:	3328      	adds	r3, #40	; 0x28
 800b462:	2101      	movs	r1, #1
 800b464:	4618      	mov	r0, r3
 800b466:	f002 f975 	bl	800d754 <RCCEx_PLL3_Config>
 800b46a:	4603      	mov	r3, r0
 800b46c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b470:	e00a      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b478:	e006      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b47a:	bf00      	nop
 800b47c:	e004      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b47e:	bf00      	nop
 800b480:	e002      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b482:	bf00      	nop
 800b484:	e000      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b486:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10b      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b490:	4ba3      	ldr	r3, [pc, #652]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b494:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b49c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4a0:	4a9f      	ldr	r2, [pc, #636]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	6593      	str	r3, [r2, #88]	; 0x58
 800b4a6:	e003      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b4bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	d037      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4da:	d00e      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e0:	d816      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d018      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b4e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4ea:	d111      	bne.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ec:	4b8c      	ldr	r3, [pc, #560]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f0:	4a8b      	ldr	r2, [pc, #556]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b4f8:	e00f      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fe:	3308      	adds	r3, #8
 800b500:	2101      	movs	r1, #1
 800b502:	4618      	mov	r0, r3
 800b504:	f002 f874 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b508:	4603      	mov	r3, r0
 800b50a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b50e:	e004      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b516:	e000      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b51a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b522:	4b7f      	ldr	r3, [pc, #508]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b526:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b530:	4a7b      	ldr	r2, [pc, #492]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b532:	430b      	orrs	r3, r1
 800b534:	6513      	str	r3, [r2, #80]	; 0x50
 800b536:	e003      	b.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b53c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b54c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b550:	2300      	movs	r3, #0
 800b552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b556:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4313      	orrs	r3, r2
 800b55e:	d039      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b566:	2b03      	cmp	r3, #3
 800b568:	d81c      	bhi.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b56a:	a201      	add	r2, pc, #4	; (adr r2, 800b570 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b570:	0800b5ad 	.word	0x0800b5ad
 800b574:	0800b581 	.word	0x0800b581
 800b578:	0800b58f 	.word	0x0800b58f
 800b57c:	0800b5ad 	.word	0x0800b5ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b580:	4b67      	ldr	r3, [pc, #412]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	4a66      	ldr	r2, [pc, #408]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b58a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b58c:	e00f      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b592:	3308      	adds	r3, #8
 800b594:	2102      	movs	r1, #2
 800b596:	4618      	mov	r0, r3
 800b598:	f002 f82a 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b5a2:	e004      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5aa:	e000      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b5ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10a      	bne.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b5b6:	4b5a      	ldr	r3, [pc, #360]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ba:	f023 0103 	bic.w	r1, r3, #3
 800b5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5c4:	4a56      	ldr	r2, [pc, #344]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5c6:	430b      	orrs	r3, r1
 800b5c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5ca:	e003      	b.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b5e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	f000 809f 	beq.w	800b734 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5f6:	4b4b      	ldr	r3, [pc, #300]	; (800b724 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a4a      	ldr	r2, [pc, #296]	; (800b724 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b5fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b600:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b602:	f7f8 fd97 	bl	8004134 <HAL_GetTick>
 800b606:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b60a:	e00b      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b60c:	f7f8 fd92 	bl	8004134 <HAL_GetTick>
 800b610:	4602      	mov	r2, r0
 800b612:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b64      	cmp	r3, #100	; 0x64
 800b61a:	d903      	bls.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b622:	e005      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b624:	4b3f      	ldr	r3, [pc, #252]	; (800b724 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d0ed      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b634:	2b00      	cmp	r3, #0
 800b636:	d179      	bne.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b638:	4b39      	ldr	r3, [pc, #228]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b63a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b640:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b644:	4053      	eors	r3, r2
 800b646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d015      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b64e:	4b34      	ldr	r3, [pc, #208]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b656:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b65a:	4b31      	ldr	r3, [pc, #196]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65e:	4a30      	ldr	r2, [pc, #192]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b664:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b666:	4b2e      	ldr	r3, [pc, #184]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b66a:	4a2d      	ldr	r2, [pc, #180]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b66c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b670:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b672:	4a2b      	ldr	r2, [pc, #172]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b674:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b678:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b686:	d118      	bne.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b688:	f7f8 fd54 	bl	8004134 <HAL_GetTick>
 800b68c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b690:	e00d      	b.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b692:	f7f8 fd4f 	bl	8004134 <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b69c:	1ad2      	subs	r2, r2, r3
 800b69e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d903      	bls.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b6ac:	e005      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b6ae:	4b1c      	ldr	r3, [pc, #112]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d0eb      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b6ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d129      	bne.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6d2:	d10e      	bne.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b6d4:	4b12      	ldr	r3, [pc, #72]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6e4:	091a      	lsrs	r2, r3, #4
 800b6e6:	4b10      	ldr	r3, [pc, #64]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	4a0d      	ldr	r2, [pc, #52]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	6113      	str	r3, [r2, #16]
 800b6f0:	e005      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b6f2:	4b0b      	ldr	r3, [pc, #44]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	4a0a      	ldr	r2, [pc, #40]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b6fc:	6113      	str	r3, [r2, #16]
 800b6fe:	4b08      	ldr	r3, [pc, #32]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b700:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b70a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b70e:	4a04      	ldr	r2, [pc, #16]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b710:	430b      	orrs	r3, r1
 800b712:	6713      	str	r3, [r2, #112]	; 0x70
 800b714:	e00e      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b71a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b71e:	e009      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b720:	58024400 	.word	0x58024400
 800b724:	58024800 	.word	0x58024800
 800b728:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b72c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f002 0301 	and.w	r3, r2, #1
 800b740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b744:	2300      	movs	r3, #0
 800b746:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b74a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b74e:	460b      	mov	r3, r1
 800b750:	4313      	orrs	r3, r2
 800b752:	f000 8089 	beq.w	800b868 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b75a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b75c:	2b28      	cmp	r3, #40	; 0x28
 800b75e:	d86b      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b760:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b766:	bf00      	nop
 800b768:	0800b841 	.word	0x0800b841
 800b76c:	0800b839 	.word	0x0800b839
 800b770:	0800b839 	.word	0x0800b839
 800b774:	0800b839 	.word	0x0800b839
 800b778:	0800b839 	.word	0x0800b839
 800b77c:	0800b839 	.word	0x0800b839
 800b780:	0800b839 	.word	0x0800b839
 800b784:	0800b839 	.word	0x0800b839
 800b788:	0800b80d 	.word	0x0800b80d
 800b78c:	0800b839 	.word	0x0800b839
 800b790:	0800b839 	.word	0x0800b839
 800b794:	0800b839 	.word	0x0800b839
 800b798:	0800b839 	.word	0x0800b839
 800b79c:	0800b839 	.word	0x0800b839
 800b7a0:	0800b839 	.word	0x0800b839
 800b7a4:	0800b839 	.word	0x0800b839
 800b7a8:	0800b823 	.word	0x0800b823
 800b7ac:	0800b839 	.word	0x0800b839
 800b7b0:	0800b839 	.word	0x0800b839
 800b7b4:	0800b839 	.word	0x0800b839
 800b7b8:	0800b839 	.word	0x0800b839
 800b7bc:	0800b839 	.word	0x0800b839
 800b7c0:	0800b839 	.word	0x0800b839
 800b7c4:	0800b839 	.word	0x0800b839
 800b7c8:	0800b841 	.word	0x0800b841
 800b7cc:	0800b839 	.word	0x0800b839
 800b7d0:	0800b839 	.word	0x0800b839
 800b7d4:	0800b839 	.word	0x0800b839
 800b7d8:	0800b839 	.word	0x0800b839
 800b7dc:	0800b839 	.word	0x0800b839
 800b7e0:	0800b839 	.word	0x0800b839
 800b7e4:	0800b839 	.word	0x0800b839
 800b7e8:	0800b841 	.word	0x0800b841
 800b7ec:	0800b839 	.word	0x0800b839
 800b7f0:	0800b839 	.word	0x0800b839
 800b7f4:	0800b839 	.word	0x0800b839
 800b7f8:	0800b839 	.word	0x0800b839
 800b7fc:	0800b839 	.word	0x0800b839
 800b800:	0800b839 	.word	0x0800b839
 800b804:	0800b839 	.word	0x0800b839
 800b808:	0800b841 	.word	0x0800b841
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b810:	3308      	adds	r3, #8
 800b812:	2101      	movs	r1, #1
 800b814:	4618      	mov	r0, r3
 800b816:	f001 feeb 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b81a:	4603      	mov	r3, r0
 800b81c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b820:	e00f      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b826:	3328      	adds	r3, #40	; 0x28
 800b828:	2101      	movs	r1, #1
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 ff92 	bl	800d754 <RCCEx_PLL3_Config>
 800b830:	4603      	mov	r3, r0
 800b832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b836:	e004      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b83e:	e000      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10a      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b84a:	4bbf      	ldr	r3, [pc, #764]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b858:	4abb      	ldr	r2, [pc, #748]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b85a:	430b      	orrs	r3, r1
 800b85c:	6553      	str	r3, [r2, #84]	; 0x54
 800b85e:	e003      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f002 0302 	and.w	r3, r2, #2
 800b874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b87e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	d041      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b88e:	2b05      	cmp	r3, #5
 800b890:	d824      	bhi.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b892:	a201      	add	r2, pc, #4	; (adr r2, 800b898 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b898:	0800b8e5 	.word	0x0800b8e5
 800b89c:	0800b8b1 	.word	0x0800b8b1
 800b8a0:	0800b8c7 	.word	0x0800b8c7
 800b8a4:	0800b8e5 	.word	0x0800b8e5
 800b8a8:	0800b8e5 	.word	0x0800b8e5
 800b8ac:	0800b8e5 	.word	0x0800b8e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	2101      	movs	r1, #1
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f001 fe99 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8c4:	e00f      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ca:	3328      	adds	r3, #40	; 0x28
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f001 ff40 	bl	800d754 <RCCEx_PLL3_Config>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8da:	e004      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8e2:	e000      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b8e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10a      	bne.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b8ee:	4b96      	ldr	r3, [pc, #600]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f2:	f023 0107 	bic.w	r1, r3, #7
 800b8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8fc:	4a92      	ldr	r2, [pc, #584]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8fe:	430b      	orrs	r3, r1
 800b900:	6553      	str	r3, [r2, #84]	; 0x54
 800b902:	e003      	b.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	f002 0304 	and.w	r3, r2, #4
 800b918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b91c:	2300      	movs	r3, #0
 800b91e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b922:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b926:	460b      	mov	r3, r1
 800b928:	4313      	orrs	r3, r2
 800b92a:	d044      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b934:	2b05      	cmp	r3, #5
 800b936:	d825      	bhi.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b938:	a201      	add	r2, pc, #4	; (adr r2, 800b940 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93e:	bf00      	nop
 800b940:	0800b98d 	.word	0x0800b98d
 800b944:	0800b959 	.word	0x0800b959
 800b948:	0800b96f 	.word	0x0800b96f
 800b94c:	0800b98d 	.word	0x0800b98d
 800b950:	0800b98d 	.word	0x0800b98d
 800b954:	0800b98d 	.word	0x0800b98d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95c:	3308      	adds	r3, #8
 800b95e:	2101      	movs	r1, #1
 800b960:	4618      	mov	r0, r3
 800b962:	f001 fe45 	bl	800d5f0 <RCCEx_PLL2_Config>
 800b966:	4603      	mov	r3, r0
 800b968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b96c:	e00f      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b972:	3328      	adds	r3, #40	; 0x28
 800b974:	2101      	movs	r1, #1
 800b976:	4618      	mov	r0, r3
 800b978:	f001 feec 	bl	800d754 <RCCEx_PLL3_Config>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b982:	e004      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b98a:	e000      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b98c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b98e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10b      	bne.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b996:	4b6c      	ldr	r3, [pc, #432]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b99a:	f023 0107 	bic.w	r1, r3, #7
 800b99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9a6:	4a68      	ldr	r2, [pc, #416]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9a8:	430b      	orrs	r3, r1
 800b9aa:	6593      	str	r3, [r2, #88]	; 0x58
 800b9ac:	e003      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f002 0320 	and.w	r3, r2, #32
 800b9c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	d055      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9e2:	d033      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b9e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9e8:	d82c      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ee:	d02f      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b9f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f4:	d826      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b9f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9fa:	d02b      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b9fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba00:	d820      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba06:	d012      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ba08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba0c:	d81a      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d022      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ba12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba16:	d115      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	2100      	movs	r1, #0
 800ba20:	4618      	mov	r0, r3
 800ba22:	f001 fde5 	bl	800d5f0 <RCCEx_PLL2_Config>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba2c:	e015      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba32:	3328      	adds	r3, #40	; 0x28
 800ba34:	2102      	movs	r1, #2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f001 fe8c 	bl	800d754 <RCCEx_PLL3_Config>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba42:	e00a      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba4a:	e006      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba4c:	bf00      	nop
 800ba4e:	e004      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba50:	bf00      	nop
 800ba52:	e002      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba54:	bf00      	nop
 800ba56:	e000      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10b      	bne.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba62:	4b39      	ldr	r3, [pc, #228]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba72:	4a35      	ldr	r2, [pc, #212]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba74:	430b      	orrs	r3, r1
 800ba76:	6553      	str	r3, [r2, #84]	; 0x54
 800ba78:	e003      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ba82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ba8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba92:	2300      	movs	r3, #0
 800ba94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ba98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	d058      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800baa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800baaa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800baae:	d033      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bab0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bab4:	d82c      	bhi.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baba:	d02f      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800babc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac0:	d826      	bhi.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bac6:	d02b      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bac8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bacc:	d820      	bhi.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bad2:	d012      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bad8:	d81a      	bhi.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d022      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bae2:	d115      	bne.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae8:	3308      	adds	r3, #8
 800baea:	2100      	movs	r1, #0
 800baec:	4618      	mov	r0, r3
 800baee:	f001 fd7f 	bl	800d5f0 <RCCEx_PLL2_Config>
 800baf2:	4603      	mov	r3, r0
 800baf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800baf8:	e015      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bafe:	3328      	adds	r3, #40	; 0x28
 800bb00:	2102      	movs	r1, #2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f001 fe26 	bl	800d754 <RCCEx_PLL3_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb0e:	e00a      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb16:	e006      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb18:	bf00      	nop
 800bb1a:	e004      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb1c:	bf00      	nop
 800bb1e:	e002      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb20:	bf00      	nop
 800bb22:	e000      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10e      	bne.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bb2e:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb32:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bb36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb3e:	4a02      	ldr	r2, [pc, #8]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb40:	430b      	orrs	r3, r1
 800bb42:	6593      	str	r3, [r2, #88]	; 0x58
 800bb44:	e006      	b.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bb46:	bf00      	nop
 800bb48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bb54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bb60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb64:	2300      	movs	r3, #0
 800bb66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4313      	orrs	r3, r2
 800bb72:	d055      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb80:	d033      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bb82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb86:	d82c      	bhi.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb8c:	d02f      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bb8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb92:	d826      	bhi.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bb98:	d02b      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bb9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bb9e:	d820      	bhi.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bba4:	d012      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbaa:	d81a      	bhi.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d022      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bbb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbb4:	d115      	bne.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbba:	3308      	adds	r3, #8
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f001 fd16 	bl	800d5f0 <RCCEx_PLL2_Config>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bbca:	e015      	b.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd0:	3328      	adds	r3, #40	; 0x28
 800bbd2:	2102      	movs	r1, #2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 fdbd 	bl	800d754 <RCCEx_PLL3_Config>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bbe0:	e00a      	b.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbe8:	e006      	b.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbea:	bf00      	nop
 800bbec:	e004      	b.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbee:	bf00      	nop
 800bbf0:	e002      	b.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbf2:	bf00      	nop
 800bbf4:	e000      	b.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10b      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bc00:	4ba1      	ldr	r3, [pc, #644]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc04:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bc08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc10:	4a9d      	ldr	r2, [pc, #628]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc12:	430b      	orrs	r3, r1
 800bc14:	6593      	str	r3, [r2, #88]	; 0x58
 800bc16:	e003      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f002 0308 	and.w	r3, r2, #8
 800bc2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc30:	2300      	movs	r3, #0
 800bc32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	d01e      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc4c:	d10c      	bne.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc52:	3328      	adds	r3, #40	; 0x28
 800bc54:	2102      	movs	r1, #2
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 fd7c 	bl	800d754 <RCCEx_PLL3_Config>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d002      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bc68:	4b87      	ldr	r3, [pc, #540]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc78:	4a83      	ldr	r2, [pc, #524]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc7a:	430b      	orrs	r3, r1
 800bc7c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	f002 0310 	and.w	r3, r2, #16
 800bc8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc94:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	d01e      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bc9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcaa:	d10c      	bne.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb0:	3328      	adds	r3, #40	; 0x28
 800bcb2:	2102      	movs	r1, #2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f001 fd4d 	bl	800d754 <RCCEx_PLL3_Config>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcc6:	4b70      	ldr	r3, [pc, #448]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcd6:	4a6c      	ldr	r2, [pc, #432]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bcdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcec:	2300      	movs	r3, #0
 800bcee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bcf2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	d03e      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bcfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd08:	d022      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bd0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd0e:	d81b      	bhi.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d003      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bd14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd18:	d00b      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bd1a:	e015      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd20:	3308      	adds	r3, #8
 800bd22:	2100      	movs	r1, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f001 fc63 	bl	800d5f0 <RCCEx_PLL2_Config>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd30:	e00f      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd36:	3328      	adds	r3, #40	; 0x28
 800bd38:	2102      	movs	r1, #2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f001 fd0a 	bl	800d754 <RCCEx_PLL3_Config>
 800bd40:	4603      	mov	r3, r0
 800bd42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd46:	e004      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd4e:	e000      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bd50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10b      	bne.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd5a:	4b4b      	ldr	r3, [pc, #300]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bd62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd6a:	4a47      	ldr	r2, [pc, #284]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd6c:	430b      	orrs	r3, r1
 800bd6e:	6593      	str	r3, [r2, #88]	; 0x58
 800bd70:	e003      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bd86:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd88:	2300      	movs	r3, #0
 800bd8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bd90:	460b      	mov	r3, r1
 800bd92:	4313      	orrs	r3, r2
 800bd94:	d03b      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bda2:	d01f      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bda4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bda8:	d818      	bhi.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bdaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdae:	d003      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bdb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdb4:	d007      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bdb6:	e011      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdb8:	4b33      	ldr	r3, [pc, #204]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbc:	4a32      	ldr	r2, [pc, #200]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bdc4:	e00f      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdca:	3328      	adds	r3, #40	; 0x28
 800bdcc:	2101      	movs	r1, #1
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f001 fcc0 	bl	800d754 <RCCEx_PLL3_Config>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bdda:	e004      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bde2:	e000      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bde4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bde6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10b      	bne.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bdee:	4b26      	ldr	r3, [pc, #152]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bdf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdfe:	4a22      	ldr	r2, [pc, #136]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be00:	430b      	orrs	r3, r1
 800be02:	6553      	str	r3, [r2, #84]	; 0x54
 800be04:	e003      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800be0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800be1a:	673b      	str	r3, [r7, #112]	; 0x70
 800be1c:	2300      	movs	r3, #0
 800be1e:	677b      	str	r3, [r7, #116]	; 0x74
 800be20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800be24:	460b      	mov	r3, r1
 800be26:	4313      	orrs	r3, r2
 800be28:	d034      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800be2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800be34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be38:	d007      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800be3a:	e011      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be3c:	4b12      	ldr	r3, [pc, #72]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	4a11      	ldr	r2, [pc, #68]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be48:	e00e      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4e:	3308      	adds	r3, #8
 800be50:	2102      	movs	r1, #2
 800be52:	4618      	mov	r0, r3
 800be54:	f001 fbcc 	bl	800d5f0 <RCCEx_PLL2_Config>
 800be58:	4603      	mov	r3, r0
 800be5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be5e:	e003      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10d      	bne.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be7e:	4a02      	ldr	r2, [pc, #8]	; (800be88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be80:	430b      	orrs	r3, r1
 800be82:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be84:	e006      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800be86:	bf00      	nop
 800be88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bea0:	66bb      	str	r3, [r7, #104]	; 0x68
 800bea2:	2300      	movs	r3, #0
 800bea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bea6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800beaa:	460b      	mov	r3, r1
 800beac:	4313      	orrs	r3, r2
 800beae:	d00c      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800beb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb4:	3328      	adds	r3, #40	; 0x28
 800beb6:	2102      	movs	r1, #2
 800beb8:	4618      	mov	r0, r3
 800beba:	f001 fc4b 	bl	800d754 <RCCEx_PLL3_Config>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800beca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bed6:	663b      	str	r3, [r7, #96]	; 0x60
 800bed8:	2300      	movs	r3, #0
 800beda:	667b      	str	r3, [r7, #100]	; 0x64
 800bedc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bee0:	460b      	mov	r3, r1
 800bee2:	4313      	orrs	r3, r2
 800bee4:	d038      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bef2:	d018      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bef8:	d811      	bhi.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800befa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800befe:	d014      	beq.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bf00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf04:	d80b      	bhi.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d011      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bf0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0e:	d106      	bne.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf10:	4bc3      	ldr	r3, [pc, #780]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	4ac2      	ldr	r2, [pc, #776]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bf1c:	e008      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf24:	e004      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf26:	bf00      	nop
 800bf28:	e002      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf2a:	bf00      	nop
 800bf2c:	e000      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10b      	bne.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf38:	4bb9      	ldr	r3, [pc, #740]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf48:	4ab5      	ldr	r2, [pc, #724]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf4a:	430b      	orrs	r3, r1
 800bf4c:	6553      	str	r3, [r2, #84]	; 0x54
 800bf4e:	e003      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bf64:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf66:	2300      	movs	r3, #0
 800bf68:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf6a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4313      	orrs	r3, r2
 800bf72:	d009      	beq.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf74:	4baa      	ldr	r3, [pc, #680]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf82:	4aa7      	ldr	r2, [pc, #668]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf84:	430b      	orrs	r3, r1
 800bf86:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bf88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bf94:	653b      	str	r3, [r7, #80]	; 0x50
 800bf96:	2300      	movs	r3, #0
 800bf98:	657b      	str	r3, [r7, #84]	; 0x54
 800bf9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	d00a      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bfa4:	4b9e      	ldr	r3, [pc, #632]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bfb4:	4a9a      	ldr	r2, [pc, #616]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bfc6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfc8:	2300      	movs	r3, #0
 800bfca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfcc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	d009      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfd6:	4b92      	ldr	r3, [pc, #584]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfda:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfe4:	4a8e      	ldr	r2, [pc, #568]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfe6:	430b      	orrs	r3, r1
 800bfe8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bfea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bff6:	643b      	str	r3, [r7, #64]	; 0x40
 800bff8:	2300      	movs	r3, #0
 800bffa:	647b      	str	r3, [r7, #68]	; 0x44
 800bffc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c000:	460b      	mov	r3, r1
 800c002:	4313      	orrs	r3, r2
 800c004:	d00e      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c006:	4b86      	ldr	r3, [pc, #536]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	4a85      	ldr	r2, [pc, #532]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c00c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c010:	6113      	str	r3, [r2, #16]
 800c012:	4b83      	ldr	r3, [pc, #524]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c014:	6919      	ldr	r1, [r3, #16]
 800c016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c01e:	4a80      	ldr	r2, [pc, #512]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c020:	430b      	orrs	r3, r1
 800c022:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c030:	63bb      	str	r3, [r7, #56]	; 0x38
 800c032:	2300      	movs	r3, #0
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c036:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c03a:	460b      	mov	r3, r1
 800c03c:	4313      	orrs	r3, r2
 800c03e:	d009      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c040:	4b77      	ldr	r3, [pc, #476]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c044:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04e:	4a74      	ldr	r2, [pc, #464]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c050:	430b      	orrs	r3, r1
 800c052:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c060:	633b      	str	r3, [r7, #48]	; 0x30
 800c062:	2300      	movs	r3, #0
 800c064:	637b      	str	r3, [r7, #52]	; 0x34
 800c066:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c06a:	460b      	mov	r3, r1
 800c06c:	4313      	orrs	r3, r2
 800c06e:	d00a      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c070:	4b6b      	ldr	r3, [pc, #428]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c074:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c07c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c080:	4a67      	ldr	r2, [pc, #412]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c082:	430b      	orrs	r3, r1
 800c084:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	2100      	movs	r1, #0
 800c090:	62b9      	str	r1, [r7, #40]	; 0x28
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c098:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c09c:	460b      	mov	r3, r1
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	d011      	beq.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f001 faa0 	bl	800d5f0 <RCCEx_PLL2_Config>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d003      	beq.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	6239      	str	r1, [r7, #32]
 800c0d2:	f003 0302 	and.w	r3, r3, #2
 800c0d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c0d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	d011      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f001 fa80 	bl	800d5f0 <RCCEx_PLL2_Config>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d003      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	2100      	movs	r1, #0
 800c110:	61b9      	str	r1, [r7, #24]
 800c112:	f003 0304 	and.w	r3, r3, #4
 800c116:	61fb      	str	r3, [r7, #28]
 800c118:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c11c:	460b      	mov	r3, r1
 800c11e:	4313      	orrs	r3, r2
 800c120:	d011      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c126:	3308      	adds	r3, #8
 800c128:	2102      	movs	r1, #2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f001 fa60 	bl	800d5f0 <RCCEx_PLL2_Config>
 800c130:	4603      	mov	r3, r0
 800c132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c13e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c142:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	2100      	movs	r1, #0
 800c150:	6139      	str	r1, [r7, #16]
 800c152:	f003 0308 	and.w	r3, r3, #8
 800c156:	617b      	str	r3, [r7, #20]
 800c158:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c15c:	460b      	mov	r3, r1
 800c15e:	4313      	orrs	r3, r2
 800c160:	d011      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c166:	3328      	adds	r3, #40	; 0x28
 800c168:	2100      	movs	r1, #0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f001 faf2 	bl	800d754 <RCCEx_PLL3_Config>
 800c170:	4603      	mov	r3, r0
 800c172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c17e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c182:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	2100      	movs	r1, #0
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	f003 0310 	and.w	r3, r3, #16
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c19c:	460b      	mov	r3, r1
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	d011      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a6:	3328      	adds	r3, #40	; 0x28
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f001 fad2 	bl	800d754 <RCCEx_PLL3_Config>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d003      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	6039      	str	r1, [r7, #0]
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	607b      	str	r3, [r7, #4]
 800c1d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	d011      	beq.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1e6:	3328      	adds	r3, #40	; 0x28
 800c1e8:	2102      	movs	r1, #2
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f001 fab2 	bl	800d754 <RCCEx_PLL3_Config>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c206:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c20e:	2300      	movs	r3, #0
 800c210:	e000      	b.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c212:	2301      	movs	r3, #1
}
 800c214:	4618      	mov	r0, r3
 800c216:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c21a:	46bd      	mov	sp, r7
 800c21c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c220:	58024400 	.word	0x58024400

0800c224 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b090      	sub	sp, #64	; 0x40
 800c228:	af00      	add	r7, sp, #0
 800c22a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c232:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c236:	430b      	orrs	r3, r1
 800c238:	f040 8094 	bne.w	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c23c:	4b9e      	ldr	r3, [pc, #632]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c240:	f003 0307 	and.w	r3, r3, #7
 800c244:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	2b04      	cmp	r3, #4
 800c24a:	f200 8087 	bhi.w	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c24e:	a201      	add	r2, pc, #4	; (adr r2, 800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c254:	0800c269 	.word	0x0800c269
 800c258:	0800c291 	.word	0x0800c291
 800c25c:	0800c2b9 	.word	0x0800c2b9
 800c260:	0800c355 	.word	0x0800c355
 800c264:	0800c2e1 	.word	0x0800c2e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c268:	4b93      	ldr	r3, [pc, #588]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c274:	d108      	bne.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c27a:	4618      	mov	r0, r3
 800c27c:	f001 f810 	bl	800d2a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c284:	f000 bd45 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c288:	2300      	movs	r3, #0
 800c28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c28c:	f000 bd41 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c290:	4b89      	ldr	r3, [pc, #548]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c29c:	d108      	bne.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c29e:	f107 0318 	add.w	r3, r7, #24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 fd54 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ac:	f000 bd31 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b4:	f000 bd2d 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2b8:	4b7f      	ldr	r3, [pc, #508]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c4:	d108      	bne.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2c6:	f107 030c 	add.w	r3, r7, #12
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fe94 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d4:	f000 bd1d 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2dc:	f000 bd19 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2e0:	4b75      	ldr	r3, [pc, #468]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2ea:	4b73      	ldr	r3, [pc, #460]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f003 0304 	and.w	r3, r3, #4
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	d10c      	bne.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d109      	bne.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2fc:	4b6e      	ldr	r3, [pc, #440]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	08db      	lsrs	r3, r3, #3
 800c302:	f003 0303 	and.w	r3, r3, #3
 800c306:	4a6d      	ldr	r2, [pc, #436]	; (800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c308:	fa22 f303 	lsr.w	r3, r2, r3
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c30e:	e01f      	b.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c310:	4b69      	ldr	r3, [pc, #420]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c31c:	d106      	bne.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c324:	d102      	bne.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c326:	4b66      	ldr	r3, [pc, #408]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c32a:	e011      	b.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c32c:	4b62      	ldr	r3, [pc, #392]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c338:	d106      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c340:	d102      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c342:	4b60      	ldr	r3, [pc, #384]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c344:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c346:	e003      	b.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c34c:	f000 bce1 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c350:	f000 bcdf 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c354:	4b5c      	ldr	r3, [pc, #368]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c358:	f000 bcdb 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c360:	f000 bcd7 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c364:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c368:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c36c:	430b      	orrs	r3, r1
 800c36e:	f040 80ad 	bne.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c372:	4b51      	ldr	r3, [pc, #324]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c376:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c37a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c382:	d056      	beq.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c38a:	f200 8090 	bhi.w	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	2bc0      	cmp	r3, #192	; 0xc0
 800c392:	f000 8088 	beq.w	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	2bc0      	cmp	r3, #192	; 0xc0
 800c39a:	f200 8088 	bhi.w	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	2b80      	cmp	r3, #128	; 0x80
 800c3a2:	d032      	beq.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a6:	2b80      	cmp	r3, #128	; 0x80
 800c3a8:	f200 8081 	bhi.w	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d003      	beq.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	2b40      	cmp	r3, #64	; 0x40
 800c3b6:	d014      	beq.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c3b8:	e079      	b.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3ba:	4b3f      	ldr	r3, [pc, #252]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3c6:	d108      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 ff67 	bl	800d2a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3d6:	f000 bc9c 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3de:	f000 bc98 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3e2:	4b35      	ldr	r3, [pc, #212]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3ee:	d108      	bne.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3f0:	f107 0318 	add.w	r3, r7, #24
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 fcab 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3fe:	f000 bc88 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c406:	f000 bc84 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c40a:	4b2b      	ldr	r3, [pc, #172]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c416:	d108      	bne.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c418:	f107 030c 	add.w	r3, r7, #12
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 fdeb 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c426:	f000 bc74 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c42e:	f000 bc70 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c432:	4b21      	ldr	r3, [pc, #132]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c436:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c43a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c43c:	4b1e      	ldr	r3, [pc, #120]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 0304 	and.w	r3, r3, #4
 800c444:	2b04      	cmp	r3, #4
 800c446:	d10c      	bne.n	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d109      	bne.n	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c44e:	4b1a      	ldr	r3, [pc, #104]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	08db      	lsrs	r3, r3, #3
 800c454:	f003 0303 	and.w	r3, r3, #3
 800c458:	4a18      	ldr	r2, [pc, #96]	; (800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c45a:	fa22 f303 	lsr.w	r3, r2, r3
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c460:	e01f      	b.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c462:	4b15      	ldr	r3, [pc, #84]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c46a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c46e:	d106      	bne.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c476:	d102      	bne.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c478:	4b11      	ldr	r3, [pc, #68]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c47c:	e011      	b.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c47e:	4b0e      	ldr	r3, [pc, #56]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c48a:	d106      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c492:	d102      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c494:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c498:	e003      	b.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c49e:	f000 bc38 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4a2:	f000 bc36 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4a6:	4b08      	ldr	r3, [pc, #32]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4aa:	f000 bc32 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b2:	f000 bc2e 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4b6:	bf00      	nop
 800c4b8:	58024400 	.word	0x58024400
 800c4bc:	03d09000 	.word	0x03d09000
 800c4c0:	003d0900 	.word	0x003d0900
 800c4c4:	00989680 	.word	0x00989680
 800c4c8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c4cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c4d4:	430b      	orrs	r3, r1
 800c4d6:	f040 809c 	bne.w	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c4da:	4b9e      	ldr	r3, [pc, #632]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4de:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c4e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4ea:	d054      	beq.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4f2:	f200 808b 	bhi.w	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c4fc:	f000 8083 	beq.w	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c502:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c506:	f200 8081 	bhi.w	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c510:	d02f      	beq.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c518:	d878      	bhi.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d004      	beq.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c526:	d012      	beq.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c528:	e070      	b.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c52a:	4b8a      	ldr	r3, [pc, #552]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c536:	d107      	bne.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 feaf 	bl	800d2a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c546:	e3e4      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c54c:	e3e1      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c54e:	4b81      	ldr	r3, [pc, #516]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c55a:	d107      	bne.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c55c:	f107 0318 	add.w	r3, r7, #24
 800c560:	4618      	mov	r0, r3
 800c562:	f000 fbf5 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c56a:	e3d2      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c570:	e3cf      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c572:	4b78      	ldr	r3, [pc, #480]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c57a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c57e:	d107      	bne.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c580:	f107 030c 	add.w	r3, r7, #12
 800c584:	4618      	mov	r0, r3
 800c586:	f000 fd37 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c58e:	e3c0      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c594:	e3bd      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c596:	4b6f      	ldr	r3, [pc, #444]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c59a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c59e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5a0:	4b6c      	ldr	r3, [pc, #432]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0304 	and.w	r3, r3, #4
 800c5a8:	2b04      	cmp	r3, #4
 800c5aa:	d10c      	bne.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d109      	bne.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5b2:	4b68      	ldr	r3, [pc, #416]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	08db      	lsrs	r3, r3, #3
 800c5b8:	f003 0303 	and.w	r3, r3, #3
 800c5bc:	4a66      	ldr	r2, [pc, #408]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5be:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c4:	e01e      	b.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5c6:	4b63      	ldr	r3, [pc, #396]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5d2:	d106      	bne.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5da:	d102      	bne.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5dc:	4b5f      	ldr	r3, [pc, #380]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e0:	e010      	b.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5e2:	4b5c      	ldr	r3, [pc, #368]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ee:	d106      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5f6:	d102      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5f8:	4b59      	ldr	r3, [pc, #356]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5fc:	e002      	b.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c602:	e386      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c604:	e385      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c606:	4b57      	ldr	r3, [pc, #348]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c60a:	e382      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c610:	e37f      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c612:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c616:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c61a:	430b      	orrs	r3, r1
 800c61c:	f040 80a7 	bne.w	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c620:	4b4c      	ldr	r3, [pc, #304]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c624:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c628:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c630:	d055      	beq.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c638:	f200 8096 	bhi.w	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c642:	f000 8084 	beq.w	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c64c:	f200 808c 	bhi.w	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c656:	d030      	beq.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c65e:	f200 8083 	bhi.w	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	2b00      	cmp	r3, #0
 800c666:	d004      	beq.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c66e:	d012      	beq.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c670:	e07a      	b.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c672:	4b38      	ldr	r3, [pc, #224]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c67a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c67e:	d107      	bne.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c684:	4618      	mov	r0, r3
 800c686:	f000 fe0b 	bl	800d2a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c68e:	e340      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c694:	e33d      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c696:	4b2f      	ldr	r3, [pc, #188]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c69e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6a2:	d107      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6a4:	f107 0318 	add.w	r3, r7, #24
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 fb51 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b2:	e32e      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b8:	e32b      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6ba:	4b26      	ldr	r3, [pc, #152]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6c6:	d107      	bne.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6c8:	f107 030c 	add.w	r3, r7, #12
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fc93 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d6:	e31c      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6dc:	e319      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6de:	4b1d      	ldr	r3, [pc, #116]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6e8:	4b1a      	ldr	r3, [pc, #104]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	d10c      	bne.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d109      	bne.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6fa:	4b16      	ldr	r3, [pc, #88]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	08db      	lsrs	r3, r3, #3
 800c700:	f003 0303 	and.w	r3, r3, #3
 800c704:	4a14      	ldr	r2, [pc, #80]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c706:	fa22 f303 	lsr.w	r3, r2, r3
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c70c:	e01e      	b.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c70e:	4b11      	ldr	r3, [pc, #68]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c71a:	d106      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c722:	d102      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c724:	4b0d      	ldr	r3, [pc, #52]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c728:	e010      	b.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c72a:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c736:	d106      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c73e:	d102      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c740:	4b07      	ldr	r3, [pc, #28]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c744:	e002      	b.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c74a:	e2e2      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c74c:	e2e1      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c74e:	4b05      	ldr	r3, [pc, #20]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c752:	e2de      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c754:	58024400 	.word	0x58024400
 800c758:	03d09000 	.word	0x03d09000
 800c75c:	003d0900 	.word	0x003d0900
 800c760:	00989680 	.word	0x00989680
 800c764:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c76c:	e2d1      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c76e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c772:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c776:	430b      	orrs	r3, r1
 800c778:	f040 809c 	bne.w	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c77c:	4b93      	ldr	r3, [pc, #588]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c780:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c784:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c78c:	d054      	beq.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c794:	f200 808b 	bhi.w	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c79e:	f000 8083 	beq.w	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7a8:	f200 8081 	bhi.w	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7b2:	d02f      	beq.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7ba:	d878      	bhi.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d004      	beq.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7c8:	d012      	beq.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c7ca:	e070      	b.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7cc:	4b7f      	ldr	r3, [pc, #508]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7d8:	d107      	bne.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f000 fd5e 	bl	800d2a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e8:	e293      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ee:	e290      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7f0:	4b76      	ldr	r3, [pc, #472]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7fc:	d107      	bne.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7fe:	f107 0318 	add.w	r3, r7, #24
 800c802:	4618      	mov	r0, r3
 800c804:	f000 faa4 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c80c:	e281      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c80e:	2300      	movs	r3, #0
 800c810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c812:	e27e      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c814:	4b6d      	ldr	r3, [pc, #436]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c820:	d107      	bne.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c822:	f107 030c 	add.w	r3, r7, #12
 800c826:	4618      	mov	r0, r3
 800c828:	f000 fbe6 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c830:	e26f      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c836:	e26c      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c838:	4b64      	ldr	r3, [pc, #400]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c840:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c842:	4b62      	ldr	r3, [pc, #392]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0304 	and.w	r3, r3, #4
 800c84a:	2b04      	cmp	r3, #4
 800c84c:	d10c      	bne.n	800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c850:	2b00      	cmp	r3, #0
 800c852:	d109      	bne.n	800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c854:	4b5d      	ldr	r3, [pc, #372]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	08db      	lsrs	r3, r3, #3
 800c85a:	f003 0303 	and.w	r3, r3, #3
 800c85e:	4a5c      	ldr	r2, [pc, #368]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c860:	fa22 f303 	lsr.w	r3, r2, r3
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c866:	e01e      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c868:	4b58      	ldr	r3, [pc, #352]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c874:	d106      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c87c:	d102      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c87e:	4b55      	ldr	r3, [pc, #340]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c880:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c882:	e010      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c884:	4b51      	ldr	r3, [pc, #324]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c88c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c890:	d106      	bne.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c898:	d102      	bne.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c89a:	4b4f      	ldr	r3, [pc, #316]	; (800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c89c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c89e:	e002      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8a4:	e235      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8a6:	e234      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8a8:	4b4c      	ldr	r3, [pc, #304]	; (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ac:	e231      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b2:	e22e      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c8bc:	430b      	orrs	r3, r1
 800c8be:	f040 808f 	bne.w	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c8c2:	4b42      	ldr	r3, [pc, #264]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8c6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c8ca:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8d2:	d06b      	beq.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8da:	d874      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8e2:	d056      	beq.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8ea:	d86c      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c8f2:	d03b      	beq.n	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c8fa:	d864      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c902:	d021      	beq.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c90a:	d85c      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d004      	beq.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c918:	d004      	beq.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c91a:	e054      	b.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c91c:	f7fe fa30 	bl	800ad80 <HAL_RCC_GetPCLK1Freq>
 800c920:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c922:	e1f6      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c924:	4b29      	ldr	r3, [pc, #164]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c92c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c930:	d107      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c932:	f107 0318 	add.w	r3, r7, #24
 800c936:	4618      	mov	r0, r3
 800c938:	f000 fa0a 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c940:	e1e7      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c946:	e1e4      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c948:	4b20      	ldr	r3, [pc, #128]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c954:	d107      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c956:	f107 030c 	add.w	r3, r7, #12
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 fb4c 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c964:	e1d5      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96a:	e1d2      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c96c:	4b17      	ldr	r3, [pc, #92]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b04      	cmp	r3, #4
 800c976:	d109      	bne.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c978:	4b14      	ldr	r3, [pc, #80]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	08db      	lsrs	r3, r3, #3
 800c97e:	f003 0303 	and.w	r3, r3, #3
 800c982:	4a13      	ldr	r2, [pc, #76]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c984:	fa22 f303 	lsr.w	r3, r2, r3
 800c988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c98a:	e1c2      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c990:	e1bf      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c992:	4b0e      	ldr	r3, [pc, #56]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c99e:	d102      	bne.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c9a0:	4b0c      	ldr	r3, [pc, #48]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9a4:	e1b5      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9aa:	e1b2      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9ac:	4b07      	ldr	r3, [pc, #28]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9b8:	d102      	bne.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c9ba:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9be:	e1a8      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c4:	e1a5      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ca:	e1a2      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9cc:	58024400 	.word	0x58024400
 800c9d0:	03d09000 	.word	0x03d09000
 800c9d4:	003d0900 	.word	0x003d0900
 800c9d8:	00989680 	.word	0x00989680
 800c9dc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c9e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c9e8:	430b      	orrs	r3, r1
 800c9ea:	d173      	bne.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c9ec:	4b9c      	ldr	r3, [pc, #624]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c9f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9fc:	d02f      	beq.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca04:	d863      	bhi.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d004      	beq.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca12:	d012      	beq.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ca14:	e05b      	b.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca16:	4b92      	ldr	r3, [pc, #584]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca22:	d107      	bne.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca24:	f107 0318 	add.w	r3, r7, #24
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 f991 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca32:	e16e      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca38:	e16b      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca3a:	4b89      	ldr	r3, [pc, #548]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca46:	d107      	bne.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca48:	f107 030c 	add.w	r3, r7, #12
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 fad3 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca56:	e15c      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca5c:	e159      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca5e:	4b80      	ldr	r3, [pc, #512]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca68:	4b7d      	ldr	r3, [pc, #500]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0304 	and.w	r3, r3, #4
 800ca70:	2b04      	cmp	r3, #4
 800ca72:	d10c      	bne.n	800ca8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ca74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d109      	bne.n	800ca8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca7a:	4b79      	ldr	r3, [pc, #484]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	08db      	lsrs	r3, r3, #3
 800ca80:	f003 0303 	and.w	r3, r3, #3
 800ca84:	4a77      	ldr	r2, [pc, #476]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ca86:	fa22 f303 	lsr.w	r3, r2, r3
 800ca8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca8c:	e01e      	b.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca8e:	4b74      	ldr	r3, [pc, #464]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca9a:	d106      	bne.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ca9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caa2:	d102      	bne.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800caa4:	4b70      	ldr	r3, [pc, #448]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800caa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caa8:	e010      	b.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800caaa:	4b6d      	ldr	r3, [pc, #436]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cab6:	d106      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cabe:	d102      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cac0:	4b6a      	ldr	r3, [pc, #424]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cac4:	e002      	b.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800caca:	e122      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cacc:	e121      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad2:	e11e      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cadc:	430b      	orrs	r3, r1
 800cade:	d133      	bne.n	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cae0:	4b5f      	ldr	r3, [pc, #380]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cae8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caf6:	d012      	beq.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800caf8:	e023      	b.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cafa:	4b59      	ldr	r3, [pc, #356]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb06:	d107      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 fbc7 	bl	800d2a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb16:	e0fc      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1c:	e0f9      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb1e:	4b50      	ldr	r3, [pc, #320]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb2a:	d107      	bne.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb2c:	f107 0318 	add.w	r3, r7, #24
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 f90d 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cb36:	6a3b      	ldr	r3, [r7, #32]
 800cb38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb3a:	e0ea      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb40:	e0e7      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb46:	e0e4      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cb48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb4c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cb50:	430b      	orrs	r3, r1
 800cb52:	f040 808d 	bne.w	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cb56:	4b42      	ldr	r3, [pc, #264]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb5a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cb5e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb66:	d06b      	beq.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb6e:	d874      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb76:	d056      	beq.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb7e:	d86c      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb86:	d03b      	beq.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb8e:	d864      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb96:	d021      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb9e:	d85c      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbac:	d004      	beq.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cbae:	e054      	b.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cbb0:	f000 f8b8 	bl	800cd24 <HAL_RCCEx_GetD3PCLK1Freq>
 800cbb4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbb6:	e0ac      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbb8:	4b29      	ldr	r3, [pc, #164]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbc4:	d107      	bne.n	800cbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbc6:	f107 0318 	add.w	r3, r7, #24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 f8c0 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd4:	e09d      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbda:	e09a      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbdc:	4b20      	ldr	r3, [pc, #128]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbe8:	d107      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbea:	f107 030c 	add.w	r3, r7, #12
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 fa02 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbf8:	e08b      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbfe:	e088      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc00:	4b17      	ldr	r3, [pc, #92]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f003 0304 	and.w	r3, r3, #4
 800cc08:	2b04      	cmp	r3, #4
 800cc0a:	d109      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc0c:	4b14      	ldr	r3, [pc, #80]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	08db      	lsrs	r3, r3, #3
 800cc12:	f003 0303 	and.w	r3, r3, #3
 800cc16:	4a13      	ldr	r2, [pc, #76]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc18:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc1e:	e078      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc24:	e075      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc32:	d102      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cc34:	4b0c      	ldr	r3, [pc, #48]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc38:	e06b      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3e:	e068      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc4c:	d102      	bne.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cc4e:	4b07      	ldr	r3, [pc, #28]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc52:	e05e      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc58:	e05b      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc5e:	e058      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc60:	58024400 	.word	0x58024400
 800cc64:	03d09000 	.word	0x03d09000
 800cc68:	003d0900 	.word	0x003d0900
 800cc6c:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cc70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc74:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cc78:	430b      	orrs	r3, r1
 800cc7a:	d148      	bne.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cc7c:	4b27      	ldr	r3, [pc, #156]	; (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cc7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc84:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc8c:	d02a      	beq.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc94:	d838      	bhi.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d004      	beq.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cca2:	d00d      	beq.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cca4:	e030      	b.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cca6:	4b1d      	ldr	r3, [pc, #116]	; (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccb2:	d102      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ccb4:	4b1a      	ldr	r3, [pc, #104]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ccb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccb8:	e02b      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccbe:	e028      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccc0:	4b16      	ldr	r3, [pc, #88]	; (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cccc:	d107      	bne.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 fae4 	bl	800d2a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccdc:	e019      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce2:	e016      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cce4:	4b0d      	ldr	r3, [pc, #52]	; (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccf0:	d107      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccf2:	f107 0318 	add.w	r3, r7, #24
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 f82a 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd00:	e007      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd06:	e004      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0c:	e001      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3740      	adds	r7, #64	; 0x40
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	58024400 	.word	0x58024400
 800cd20:	00989680 	.word	0x00989680

0800cd24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd28:	f7fd fffa 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	091b      	lsrs	r3, r3, #4
 800cd34:	f003 0307 	and.w	r3, r3, #7
 800cd38:	4904      	ldr	r1, [pc, #16]	; (800cd4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd3a:	5ccb      	ldrb	r3, [r1, r3]
 800cd3c:	f003 031f 	and.w	r3, r3, #31
 800cd40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	58024400 	.word	0x58024400
 800cd4c:	08020610 	.word	0x08020610

0800cd50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b089      	sub	sp, #36	; 0x24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd58:	4ba1      	ldr	r3, [pc, #644]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd5c:	f003 0303 	and.w	r3, r3, #3
 800cd60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cd62:	4b9f      	ldr	r3, [pc, #636]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd66:	0b1b      	lsrs	r3, r3, #12
 800cd68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cd6e:	4b9c      	ldr	r3, [pc, #624]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd72:	091b      	lsrs	r3, r3, #4
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cd7a:	4b99      	ldr	r3, [pc, #612]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd7e:	08db      	lsrs	r3, r3, #3
 800cd80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	fb02 f303 	mul.w	r3, r2, r3
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 8111 	beq.w	800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	f000 8083 	beq.w	800ceac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	f200 80a1 	bhi.w	800cef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d003      	beq.n	800cdbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d056      	beq.n	800ce68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cdba:	e099      	b.n	800cef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdbc:	4b88      	ldr	r3, [pc, #544]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f003 0320 	and.w	r3, r3, #32
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d02d      	beq.n	800ce24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdc8:	4b85      	ldr	r3, [pc, #532]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	08db      	lsrs	r3, r3, #3
 800cdce:	f003 0303 	and.w	r3, r3, #3
 800cdd2:	4a84      	ldr	r2, [pc, #528]	; (800cfe4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cdd4:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	ee07 3a90 	vmov	s15, r3
 800cde0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	ee07 3a90 	vmov	s15, r3
 800cdea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdf2:	4b7b      	ldr	r3, [pc, #492]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce06:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce22:	e087      	b.n	800cf34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	ee07 3a90 	vmov	s15, r3
 800ce2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cfec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ce32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce36:	4b6a      	ldr	r3, [pc, #424]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce3e:	ee07 3a90 	vmov	s15, r3
 800ce42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce66:	e065      	b.n	800cf34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	ee07 3a90 	vmov	s15, r3
 800ce6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce7a:	4b59      	ldr	r3, [pc, #356]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce82:	ee07 3a90 	vmov	s15, r3
 800ce86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceaa:	e043      	b.n	800cf34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	ee07 3a90 	vmov	s15, r3
 800ceb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ceba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cebe:	4b48      	ldr	r3, [pc, #288]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cec6:	ee07 3a90 	vmov	s15, r3
 800ceca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cece:	ed97 6a03 	vldr	s12, [r7, #12]
 800ced2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ced6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceee:	e021      	b.n	800cf34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	ee07 3a90 	vmov	s15, r3
 800cef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cefe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf02:	4b37      	ldr	r3, [pc, #220]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf0a:	ee07 3a90 	vmov	s15, r3
 800cf0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf12:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf16:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cf34:	4b2a      	ldr	r3, [pc, #168]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf38:	0a5b      	lsrs	r3, r3, #9
 800cf3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf3e:	ee07 3a90 	vmov	s15, r3
 800cf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf5a:	ee17 2a90 	vmov	r2, s15
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cf62:	4b1f      	ldr	r3, [pc, #124]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf66:	0c1b      	lsrs	r3, r3, #16
 800cf68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf6c:	ee07 3a90 	vmov	s15, r3
 800cf70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf88:	ee17 2a90 	vmov	r2, s15
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cf90:	4b13      	ldr	r3, [pc, #76]	; (800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf94:	0e1b      	lsrs	r3, r3, #24
 800cf96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfb6:	ee17 2a90 	vmov	r2, s15
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cfbe:	e008      	b.n	800cfd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	609a      	str	r2, [r3, #8]
}
 800cfd2:	bf00      	nop
 800cfd4:	3724      	adds	r7, #36	; 0x24
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	58024400 	.word	0x58024400
 800cfe4:	03d09000 	.word	0x03d09000
 800cfe8:	46000000 	.word	0x46000000
 800cfec:	4c742400 	.word	0x4c742400
 800cff0:	4a742400 	.word	0x4a742400
 800cff4:	4b189680 	.word	0x4b189680

0800cff8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b089      	sub	sp, #36	; 0x24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d000:	4ba1      	ldr	r3, [pc, #644]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d004:	f003 0303 	and.w	r3, r3, #3
 800d008:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d00a:	4b9f      	ldr	r3, [pc, #636]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00e:	0d1b      	lsrs	r3, r3, #20
 800d010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d014:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d016:	4b9c      	ldr	r3, [pc, #624]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01a:	0a1b      	lsrs	r3, r3, #8
 800d01c:	f003 0301 	and.w	r3, r3, #1
 800d020:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d022:	4b99      	ldr	r3, [pc, #612]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d026:	08db      	lsrs	r3, r3, #3
 800d028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	fb02 f303 	mul.w	r3, r2, r3
 800d032:	ee07 3a90 	vmov	s15, r3
 800d036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	2b00      	cmp	r3, #0
 800d042:	f000 8111 	beq.w	800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	2b02      	cmp	r3, #2
 800d04a:	f000 8083 	beq.w	800d154 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b02      	cmp	r3, #2
 800d052:	f200 80a1 	bhi.w	800d198 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d056      	beq.n	800d110 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d062:	e099      	b.n	800d198 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d064:	4b88      	ldr	r3, [pc, #544]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0320 	and.w	r3, r3, #32
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d02d      	beq.n	800d0cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d070:	4b85      	ldr	r3, [pc, #532]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	08db      	lsrs	r3, r3, #3
 800d076:	f003 0303 	and.w	r3, r3, #3
 800d07a:	4a84      	ldr	r2, [pc, #528]	; (800d28c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d07c:	fa22 f303 	lsr.w	r3, r2, r3
 800d080:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	ee07 3a90 	vmov	s15, r3
 800d088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d09a:	4b7b      	ldr	r3, [pc, #492]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a2:	ee07 3a90 	vmov	s15, r3
 800d0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0ca:	e087      	b.n	800d1dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	ee07 3a90 	vmov	s15, r3
 800d0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d294 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0de:	4b6a      	ldr	r3, [pc, #424]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e6:	ee07 3a90 	vmov	s15, r3
 800d0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d10e:	e065      	b.n	800d1dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d298 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d122:	4b59      	ldr	r3, [pc, #356]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12a:	ee07 3a90 	vmov	s15, r3
 800d12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d132:	ed97 6a03 	vldr	s12, [r7, #12]
 800d136:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d14e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d152:	e043      	b.n	800d1dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	ee07 3a90 	vmov	s15, r3
 800d15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d29c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d166:	4b48      	ldr	r3, [pc, #288]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d16e:	ee07 3a90 	vmov	s15, r3
 800d172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d176:	ed97 6a03 	vldr	s12, [r7, #12]
 800d17a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d196:	e021      	b.n	800d1dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d298 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1aa:	4b37      	ldr	r3, [pc, #220]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b2:	ee07 3a90 	vmov	s15, r3
 800d1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1be:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d1dc:	4b2a      	ldr	r3, [pc, #168]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e0:	0a5b      	lsrs	r3, r3, #9
 800d1e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1e6:	ee07 3a90 	vmov	s15, r3
 800d1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d202:	ee17 2a90 	vmov	r2, s15
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d20a:	4b1f      	ldr	r3, [pc, #124]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20e:	0c1b      	lsrs	r3, r3, #16
 800d210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d214:	ee07 3a90 	vmov	s15, r3
 800d218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d21c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d220:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d224:	edd7 6a07 	vldr	s13, [r7, #28]
 800d228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d22c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d230:	ee17 2a90 	vmov	r2, s15
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d238:	4b13      	ldr	r3, [pc, #76]	; (800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23c:	0e1b      	lsrs	r3, r3, #24
 800d23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d242:	ee07 3a90 	vmov	s15, r3
 800d246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d24e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d252:	edd7 6a07 	vldr	s13, [r7, #28]
 800d256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d25e:	ee17 2a90 	vmov	r2, s15
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d266:	e008      	b.n	800d27a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	609a      	str	r2, [r3, #8]
}
 800d27a:	bf00      	nop
 800d27c:	3724      	adds	r7, #36	; 0x24
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	58024400 	.word	0x58024400
 800d28c:	03d09000 	.word	0x03d09000
 800d290:	46000000 	.word	0x46000000
 800d294:	4c742400 	.word	0x4c742400
 800d298:	4a742400 	.word	0x4a742400
 800d29c:	4b189680 	.word	0x4b189680

0800d2a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b089      	sub	sp, #36	; 0x24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2a8:	4ba0      	ldr	r3, [pc, #640]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ac:	f003 0303 	and.w	r3, r3, #3
 800d2b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d2b2:	4b9e      	ldr	r3, [pc, #632]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b6:	091b      	lsrs	r3, r3, #4
 800d2b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d2be:	4b9b      	ldr	r3, [pc, #620]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d2c8:	4b98      	ldr	r3, [pc, #608]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2cc:	08db      	lsrs	r3, r3, #3
 800d2ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	fb02 f303 	mul.w	r3, r2, r3
 800d2d8:	ee07 3a90 	vmov	s15, r3
 800d2dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 8111 	beq.w	800d50e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	f000 8083 	beq.w	800d3fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	f200 80a1 	bhi.w	800d43e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d003      	beq.n	800d30a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d056      	beq.n	800d3b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d308:	e099      	b.n	800d43e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d30a:	4b88      	ldr	r3, [pc, #544]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 0320 	and.w	r3, r3, #32
 800d312:	2b00      	cmp	r3, #0
 800d314:	d02d      	beq.n	800d372 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d316:	4b85      	ldr	r3, [pc, #532]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	08db      	lsrs	r3, r3, #3
 800d31c:	f003 0303 	and.w	r3, r3, #3
 800d320:	4a83      	ldr	r2, [pc, #524]	; (800d530 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d322:	fa22 f303 	lsr.w	r3, r2, r3
 800d326:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	ee07 3a90 	vmov	s15, r3
 800d32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	ee07 3a90 	vmov	s15, r3
 800d338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d33c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d340:	4b7a      	ldr	r3, [pc, #488]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d348:	ee07 3a90 	vmov	s15, r3
 800d34c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d350:	ed97 6a03 	vldr	s12, [r7, #12]
 800d354:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d35c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d36c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d370:	e087      	b.n	800d482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	ee07 3a90 	vmov	s15, r3
 800d378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d538 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d384:	4b69      	ldr	r3, [pc, #420]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d38c:	ee07 3a90 	vmov	s15, r3
 800d390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d394:	ed97 6a03 	vldr	s12, [r7, #12]
 800d398:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d39c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3b4:	e065      	b.n	800d482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	ee07 3a90 	vmov	s15, r3
 800d3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d53c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d3c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3c8:	4b58      	ldr	r3, [pc, #352]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d0:	ee07 3a90 	vmov	s15, r3
 800d3d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3f8:	e043      	b.n	800d482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	ee07 3a90 	vmov	s15, r3
 800d400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d404:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d540 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d40c:	4b47      	ldr	r3, [pc, #284]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d414:	ee07 3a90 	vmov	s15, r3
 800d418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d41c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d420:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d42c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d43c:	e021      	b.n	800d482 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	ee07 3a90 	vmov	s15, r3
 800d444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d448:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d538 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d44c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d450:	4b36      	ldr	r3, [pc, #216]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d458:	ee07 3a90 	vmov	s15, r3
 800d45c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d460:	ed97 6a03 	vldr	s12, [r7, #12]
 800d464:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d46c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d47c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d480:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d482:	4b2a      	ldr	r3, [pc, #168]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d486:	0a5b      	lsrs	r3, r3, #9
 800d488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d48c:	ee07 3a90 	vmov	s15, r3
 800d490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d49c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4a8:	ee17 2a90 	vmov	r2, s15
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d4b0:	4b1e      	ldr	r3, [pc, #120]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b4:	0c1b      	lsrs	r3, r3, #16
 800d4b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ba:	ee07 3a90 	vmov	s15, r3
 800d4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4d6:	ee17 2a90 	vmov	r2, s15
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d4de:	4b13      	ldr	r3, [pc, #76]	; (800d52c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e2:	0e1b      	lsrs	r3, r3, #24
 800d4e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4e8:	ee07 3a90 	vmov	s15, r3
 800d4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d504:	ee17 2a90 	vmov	r2, s15
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d50c:	e008      	b.n	800d520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2200      	movs	r2, #0
 800d518:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	609a      	str	r2, [r3, #8]
}
 800d520:	bf00      	nop
 800d522:	3724      	adds	r7, #36	; 0x24
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	58024400 	.word	0x58024400
 800d530:	03d09000 	.word	0x03d09000
 800d534:	46000000 	.word	0x46000000
 800d538:	4c742400 	.word	0x4c742400
 800d53c:	4a742400 	.word	0x4a742400
 800d540:	4b189680 	.word	0x4b189680

0800d544 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d54c:	4b26      	ldr	r3, [pc, #152]	; (800d5e8 <HAL_RCCEx_CRSConfig+0xa4>)
 800d54e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d552:	4a25      	ldr	r2, [pc, #148]	; (800d5e8 <HAL_RCCEx_CRSConfig+0xa4>)
 800d554:	f043 0302 	orr.w	r3, r3, #2
 800d558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d55c:	4b22      	ldr	r3, [pc, #136]	; (800d5e8 <HAL_RCCEx_CRSConfig+0xa4>)
 800d55e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d562:	4a21      	ldr	r2, [pc, #132]	; (800d5e8 <HAL_RCCEx_CRSConfig+0xa4>)
 800d564:	f023 0302 	bic.w	r3, r3, #2
 800d568:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d56c:	f7f6 fe12 	bl	8004194 <HAL_GetREVID>
 800d570:	4603      	mov	r3, r0
 800d572:	f241 0203 	movw	r2, #4099	; 0x1003
 800d576:	4293      	cmp	r3, r2
 800d578:	d80b      	bhi.n	800d592 <HAL_RCCEx_CRSConfig+0x4e>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d582:	d106      	bne.n	800d592 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	60fb      	str	r3, [r7, #12]
 800d590:	e008      	b.n	800d5a4 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	431a      	orrs	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	041b      	lsls	r3, r3, #16
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d5ba:	4a0c      	ldr	r2, [pc, #48]	; (800d5ec <HAL_RCCEx_CRSConfig+0xa8>)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <HAL_RCCEx_CRSConfig+0xa8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	695b      	ldr	r3, [r3, #20]
 800d5cc:	021b      	lsls	r3, r3, #8
 800d5ce:	4907      	ldr	r1, [pc, #28]	; (800d5ec <HAL_RCCEx_CRSConfig+0xa8>)
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d5d4:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <HAL_RCCEx_CRSConfig+0xa8>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a04      	ldr	r2, [pc, #16]	; (800d5ec <HAL_RCCEx_CRSConfig+0xa8>)
 800d5da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d5de:	6013      	str	r3, [r2, #0]
}
 800d5e0:	bf00      	nop
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	58024400 	.word	0x58024400
 800d5ec:	40008400 	.word	0x40008400

0800d5f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d5fe:	4b53      	ldr	r3, [pc, #332]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d602:	f003 0303 	and.w	r3, r3, #3
 800d606:	2b03      	cmp	r3, #3
 800d608:	d101      	bne.n	800d60e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e099      	b.n	800d742 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d60e:	4b4f      	ldr	r3, [pc, #316]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a4e      	ldr	r2, [pc, #312]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d61a:	f7f6 fd8b 	bl	8004134 <HAL_GetTick>
 800d61e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d620:	e008      	b.n	800d634 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d622:	f7f6 fd87 	bl	8004134 <HAL_GetTick>
 800d626:	4602      	mov	r2, r0
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	1ad3      	subs	r3, r2, r3
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	d901      	bls.n	800d634 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d630:	2303      	movs	r3, #3
 800d632:	e086      	b.n	800d742 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d634:	4b45      	ldr	r3, [pc, #276]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1f0      	bne.n	800d622 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d640:	4b42      	ldr	r3, [pc, #264]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d644:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	031b      	lsls	r3, r3, #12
 800d64e:	493f      	ldr	r1, [pc, #252]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d650:	4313      	orrs	r3, r2
 800d652:	628b      	str	r3, [r1, #40]	; 0x28
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	3b01      	subs	r3, #1
 800d65a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	3b01      	subs	r3, #1
 800d664:	025b      	lsls	r3, r3, #9
 800d666:	b29b      	uxth	r3, r3
 800d668:	431a      	orrs	r2, r3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	3b01      	subs	r3, #1
 800d670:	041b      	lsls	r3, r3, #16
 800d672:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d676:	431a      	orrs	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	3b01      	subs	r3, #1
 800d67e:	061b      	lsls	r3, r3, #24
 800d680:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d684:	4931      	ldr	r1, [pc, #196]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d686:	4313      	orrs	r3, r2
 800d688:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d68a:	4b30      	ldr	r3, [pc, #192]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	695b      	ldr	r3, [r3, #20]
 800d696:	492d      	ldr	r1, [pc, #180]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d698:	4313      	orrs	r3, r2
 800d69a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d69c:	4b2b      	ldr	r3, [pc, #172]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a0:	f023 0220 	bic.w	r2, r3, #32
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	699b      	ldr	r3, [r3, #24]
 800d6a8:	4928      	ldr	r1, [pc, #160]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d6ae:	4b27      	ldr	r3, [pc, #156]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b2:	4a26      	ldr	r2, [pc, #152]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6b4:	f023 0310 	bic.w	r3, r3, #16
 800d6b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d6ba:	4b24      	ldr	r3, [pc, #144]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6be:	4b24      	ldr	r3, [pc, #144]	; (800d750 <RCCEx_PLL2_Config+0x160>)
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	69d2      	ldr	r2, [r2, #28]
 800d6c6:	00d2      	lsls	r2, r2, #3
 800d6c8:	4920      	ldr	r1, [pc, #128]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d6ce:	4b1f      	ldr	r3, [pc, #124]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d2:	4a1e      	ldr	r2, [pc, #120]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6d4:	f043 0310 	orr.w	r3, r3, #16
 800d6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d106      	bne.n	800d6ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d6e0:	4b1a      	ldr	r3, [pc, #104]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e4:	4a19      	ldr	r2, [pc, #100]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6ec:	e00f      	b.n	800d70e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d106      	bne.n	800d702 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d6f4:	4b15      	ldr	r3, [pc, #84]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f8:	4a14      	ldr	r2, [pc, #80]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d6fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d700:	e005      	b.n	800d70e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d702:	4b12      	ldr	r3, [pc, #72]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d706:	4a11      	ldr	r2, [pc, #68]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d70c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d70e:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a0e      	ldr	r2, [pc, #56]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d71a:	f7f6 fd0b 	bl	8004134 <HAL_GetTick>
 800d71e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d720:	e008      	b.n	800d734 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d722:	f7f6 fd07 	bl	8004134 <HAL_GetTick>
 800d726:	4602      	mov	r2, r0
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	1ad3      	subs	r3, r2, r3
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d901      	bls.n	800d734 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d730:	2303      	movs	r3, #3
 800d732:	e006      	b.n	800d742 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d734:	4b05      	ldr	r3, [pc, #20]	; (800d74c <RCCEx_PLL2_Config+0x15c>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d0f0      	beq.n	800d722 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	58024400 	.word	0x58024400
 800d750:	ffff0007 	.word	0xffff0007

0800d754 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d75e:	2300      	movs	r3, #0
 800d760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d762:	4b53      	ldr	r3, [pc, #332]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d766:	f003 0303 	and.w	r3, r3, #3
 800d76a:	2b03      	cmp	r3, #3
 800d76c:	d101      	bne.n	800d772 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	e099      	b.n	800d8a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d772:	4b4f      	ldr	r3, [pc, #316]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a4e      	ldr	r2, [pc, #312]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d77c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d77e:	f7f6 fcd9 	bl	8004134 <HAL_GetTick>
 800d782:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d784:	e008      	b.n	800d798 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d786:	f7f6 fcd5 	bl	8004134 <HAL_GetTick>
 800d78a:	4602      	mov	r2, r0
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	1ad3      	subs	r3, r2, r3
 800d790:	2b02      	cmp	r3, #2
 800d792:	d901      	bls.n	800d798 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d794:	2303      	movs	r3, #3
 800d796:	e086      	b.n	800d8a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d798:	4b45      	ldr	r3, [pc, #276]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1f0      	bne.n	800d786 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d7a4:	4b42      	ldr	r3, [pc, #264]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	051b      	lsls	r3, r3, #20
 800d7b2:	493f      	ldr	r1, [pc, #252]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	628b      	str	r3, [r1, #40]	; 0x28
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	025b      	lsls	r3, r3, #9
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	041b      	lsls	r3, r3, #16
 800d7d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7da:	431a      	orrs	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	061b      	lsls	r3, r3, #24
 800d7e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7e8:	4931      	ldr	r1, [pc, #196]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d7ee:	4b30      	ldr	r3, [pc, #192]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	695b      	ldr	r3, [r3, #20]
 800d7fa:	492d      	ldr	r1, [pc, #180]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d800:	4b2b      	ldr	r3, [pc, #172]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d804:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	699b      	ldr	r3, [r3, #24]
 800d80c:	4928      	ldr	r1, [pc, #160]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d80e:	4313      	orrs	r3, r2
 800d810:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d812:	4b27      	ldr	r3, [pc, #156]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d816:	4a26      	ldr	r2, [pc, #152]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d81c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d81e:	4b24      	ldr	r3, [pc, #144]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d822:	4b24      	ldr	r3, [pc, #144]	; (800d8b4 <RCCEx_PLL3_Config+0x160>)
 800d824:	4013      	ands	r3, r2
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	69d2      	ldr	r2, [r2, #28]
 800d82a:	00d2      	lsls	r2, r2, #3
 800d82c:	4920      	ldr	r1, [pc, #128]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d82e:	4313      	orrs	r3, r2
 800d830:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d832:	4b1f      	ldr	r3, [pc, #124]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d836:	4a1e      	ldr	r2, [pc, #120]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d83c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d106      	bne.n	800d852 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d844:	4b1a      	ldr	r3, [pc, #104]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d848:	4a19      	ldr	r2, [pc, #100]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d84a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d84e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d850:	e00f      	b.n	800d872 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d106      	bne.n	800d866 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d858:	4b15      	ldr	r3, [pc, #84]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	4a14      	ldr	r2, [pc, #80]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d85e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d862:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d864:	e005      	b.n	800d872 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d866:	4b12      	ldr	r3, [pc, #72]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	4a11      	ldr	r2, [pc, #68]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d86c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d870:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d872:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a0e      	ldr	r2, [pc, #56]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d87c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d87e:	f7f6 fc59 	bl	8004134 <HAL_GetTick>
 800d882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d884:	e008      	b.n	800d898 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d886:	f7f6 fc55 	bl	8004134 <HAL_GetTick>
 800d88a:	4602      	mov	r2, r0
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	1ad3      	subs	r3, r2, r3
 800d890:	2b02      	cmp	r3, #2
 800d892:	d901      	bls.n	800d898 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d894:	2303      	movs	r3, #3
 800d896:	e006      	b.n	800d8a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d898:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <RCCEx_PLL3_Config+0x15c>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d0f0      	beq.n	800d886 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	58024400 	.word	0x58024400
 800d8b4:	ffff0007 	.word	0xffff0007

0800d8b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d101      	bne.n	800d8ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e049      	b.n	800d95e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d106      	bne.n	800d8e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7f5 fecc 	bl	800367c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2202      	movs	r2, #2
 800d8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	f000 f92e 	bl	800db58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d972:	2300      	movs	r3, #0
 800d974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d101      	bne.n	800d984 <HAL_TIM_ConfigClockSource+0x1c>
 800d980:	2302      	movs	r3, #2
 800d982:	e0dc      	b.n	800db3e <HAL_TIM_ConfigClockSource+0x1d6>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2202      	movs	r2, #2
 800d990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	4b6a      	ldr	r3, [pc, #424]	; (800db48 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a64      	ldr	r2, [pc, #400]	; (800db4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	f000 80a9 	beq.w	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800d9c0:	4a62      	ldr	r2, [pc, #392]	; (800db4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	f200 80ae 	bhi.w	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800d9c8:	4a61      	ldr	r2, [pc, #388]	; (800db50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	f000 80a1 	beq.w	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800d9d0:	4a5f      	ldr	r2, [pc, #380]	; (800db50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	f200 80a6 	bhi.w	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800d9d8:	4a5e      	ldr	r2, [pc, #376]	; (800db54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	f000 8099 	beq.w	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800d9e0:	4a5c      	ldr	r2, [pc, #368]	; (800db54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	f200 809e 	bhi.w	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800d9e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d9ec:	f000 8091 	beq.w	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800d9f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d9f4:	f200 8096 	bhi.w	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800d9f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9fc:	f000 8089 	beq.w	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800da00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da04:	f200 808e 	bhi.w	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da0c:	d03e      	beq.n	800da8c <HAL_TIM_ConfigClockSource+0x124>
 800da0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da12:	f200 8087 	bhi.w	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da1a:	f000 8086 	beq.w	800db2a <HAL_TIM_ConfigClockSource+0x1c2>
 800da1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da22:	d87f      	bhi.n	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da24:	2b70      	cmp	r3, #112	; 0x70
 800da26:	d01a      	beq.n	800da5e <HAL_TIM_ConfigClockSource+0xf6>
 800da28:	2b70      	cmp	r3, #112	; 0x70
 800da2a:	d87b      	bhi.n	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da2c:	2b60      	cmp	r3, #96	; 0x60
 800da2e:	d050      	beq.n	800dad2 <HAL_TIM_ConfigClockSource+0x16a>
 800da30:	2b60      	cmp	r3, #96	; 0x60
 800da32:	d877      	bhi.n	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da34:	2b50      	cmp	r3, #80	; 0x50
 800da36:	d03c      	beq.n	800dab2 <HAL_TIM_ConfigClockSource+0x14a>
 800da38:	2b50      	cmp	r3, #80	; 0x50
 800da3a:	d873      	bhi.n	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da3c:	2b40      	cmp	r3, #64	; 0x40
 800da3e:	d058      	beq.n	800daf2 <HAL_TIM_ConfigClockSource+0x18a>
 800da40:	2b40      	cmp	r3, #64	; 0x40
 800da42:	d86f      	bhi.n	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da44:	2b30      	cmp	r3, #48	; 0x30
 800da46:	d064      	beq.n	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800da48:	2b30      	cmp	r3, #48	; 0x30
 800da4a:	d86b      	bhi.n	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da4c:	2b20      	cmp	r3, #32
 800da4e:	d060      	beq.n	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800da50:	2b20      	cmp	r3, #32
 800da52:	d867      	bhi.n	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
 800da54:	2b00      	cmp	r3, #0
 800da56:	d05c      	beq.n	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800da58:	2b10      	cmp	r3, #16
 800da5a:	d05a      	beq.n	800db12 <HAL_TIM_ConfigClockSource+0x1aa>
 800da5c:	e062      	b.n	800db24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800da6e:	f000 f98b 	bl	800dd88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800da80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	609a      	str	r2, [r3, #8]
      break;
 800da8a:	e04f      	b.n	800db2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800da9c:	f000 f974 	bl	800dd88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	689a      	ldr	r2, [r3, #8]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800daae:	609a      	str	r2, [r3, #8]
      break;
 800dab0:	e03c      	b.n	800db2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dabe:	461a      	mov	r2, r3
 800dac0:	f000 f8e4 	bl	800dc8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2150      	movs	r1, #80	; 0x50
 800daca:	4618      	mov	r0, r3
 800dacc:	f000 f93e 	bl	800dd4c <TIM_ITRx_SetConfig>
      break;
 800dad0:	e02c      	b.n	800db2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dade:	461a      	mov	r2, r3
 800dae0:	f000 f903 	bl	800dcea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2160      	movs	r1, #96	; 0x60
 800daea:	4618      	mov	r0, r3
 800daec:	f000 f92e 	bl	800dd4c <TIM_ITRx_SetConfig>
      break;
 800daf0:	e01c      	b.n	800db2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dafe:	461a      	mov	r2, r3
 800db00:	f000 f8c4 	bl	800dc8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2140      	movs	r1, #64	; 0x40
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 f91e 	bl	800dd4c <TIM_ITRx_SetConfig>
      break;
 800db10:	e00c      	b.n	800db2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4619      	mov	r1, r3
 800db1c:	4610      	mov	r0, r2
 800db1e:	f000 f915 	bl	800dd4c <TIM_ITRx_SetConfig>
      break;
 800db22:	e003      	b.n	800db2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	73fb      	strb	r3, [r7, #15]
      break;
 800db28:	e000      	b.n	800db2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800db2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	ffceff88 	.word	0xffceff88
 800db4c:	00100040 	.word	0x00100040
 800db50:	00100030 	.word	0x00100030
 800db54:	00100020 	.word	0x00100020

0800db58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a40      	ldr	r2, [pc, #256]	; (800dc6c <TIM_Base_SetConfig+0x114>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d013      	beq.n	800db98 <TIM_Base_SetConfig+0x40>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db76:	d00f      	beq.n	800db98 <TIM_Base_SetConfig+0x40>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4a3d      	ldr	r2, [pc, #244]	; (800dc70 <TIM_Base_SetConfig+0x118>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d00b      	beq.n	800db98 <TIM_Base_SetConfig+0x40>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4a3c      	ldr	r2, [pc, #240]	; (800dc74 <TIM_Base_SetConfig+0x11c>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d007      	beq.n	800db98 <TIM_Base_SetConfig+0x40>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	4a3b      	ldr	r2, [pc, #236]	; (800dc78 <TIM_Base_SetConfig+0x120>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d003      	beq.n	800db98 <TIM_Base_SetConfig+0x40>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	4a3a      	ldr	r2, [pc, #232]	; (800dc7c <TIM_Base_SetConfig+0x124>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d108      	bne.n	800dbaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4a2f      	ldr	r2, [pc, #188]	; (800dc6c <TIM_Base_SetConfig+0x114>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d01f      	beq.n	800dbf2 <TIM_Base_SetConfig+0x9a>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbb8:	d01b      	beq.n	800dbf2 <TIM_Base_SetConfig+0x9a>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4a2c      	ldr	r2, [pc, #176]	; (800dc70 <TIM_Base_SetConfig+0x118>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d017      	beq.n	800dbf2 <TIM_Base_SetConfig+0x9a>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4a2b      	ldr	r2, [pc, #172]	; (800dc74 <TIM_Base_SetConfig+0x11c>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d013      	beq.n	800dbf2 <TIM_Base_SetConfig+0x9a>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4a2a      	ldr	r2, [pc, #168]	; (800dc78 <TIM_Base_SetConfig+0x120>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d00f      	beq.n	800dbf2 <TIM_Base_SetConfig+0x9a>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a29      	ldr	r2, [pc, #164]	; (800dc7c <TIM_Base_SetConfig+0x124>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d00b      	beq.n	800dbf2 <TIM_Base_SetConfig+0x9a>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4a28      	ldr	r2, [pc, #160]	; (800dc80 <TIM_Base_SetConfig+0x128>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d007      	beq.n	800dbf2 <TIM_Base_SetConfig+0x9a>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4a27      	ldr	r2, [pc, #156]	; (800dc84 <TIM_Base_SetConfig+0x12c>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d003      	beq.n	800dbf2 <TIM_Base_SetConfig+0x9a>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a26      	ldr	r2, [pc, #152]	; (800dc88 <TIM_Base_SetConfig+0x130>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d108      	bne.n	800dc04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	4313      	orrs	r3, r2
 800dc02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	68fa      	ldr	r2, [r7, #12]
 800dc16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	689a      	ldr	r2, [r3, #8]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a10      	ldr	r2, [pc, #64]	; (800dc6c <TIM_Base_SetConfig+0x114>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d00f      	beq.n	800dc50 <TIM_Base_SetConfig+0xf8>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a12      	ldr	r2, [pc, #72]	; (800dc7c <TIM_Base_SetConfig+0x124>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d00b      	beq.n	800dc50 <TIM_Base_SetConfig+0xf8>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a11      	ldr	r2, [pc, #68]	; (800dc80 <TIM_Base_SetConfig+0x128>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d007      	beq.n	800dc50 <TIM_Base_SetConfig+0xf8>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4a10      	ldr	r2, [pc, #64]	; (800dc84 <TIM_Base_SetConfig+0x12c>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d003      	beq.n	800dc50 <TIM_Base_SetConfig+0xf8>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4a0f      	ldr	r2, [pc, #60]	; (800dc88 <TIM_Base_SetConfig+0x130>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d103      	bne.n	800dc58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	691a      	ldr	r2, [r3, #16]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	615a      	str	r2, [r3, #20]
}
 800dc5e:	bf00      	nop
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	40010000 	.word	0x40010000
 800dc70:	40000400 	.word	0x40000400
 800dc74:	40000800 	.word	0x40000800
 800dc78:	40000c00 	.word	0x40000c00
 800dc7c:	40010400 	.word	0x40010400
 800dc80:	40014000 	.word	0x40014000
 800dc84:	40014400 	.word	0x40014400
 800dc88:	40014800 	.word	0x40014800

0800dc8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b087      	sub	sp, #28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6a1b      	ldr	r3, [r3, #32]
 800dc9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	f023 0201 	bic.w	r2, r3, #1
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dcb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	011b      	lsls	r3, r3, #4
 800dcbc:	693a      	ldr	r2, [r7, #16]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	f023 030a 	bic.w	r3, r3, #10
 800dcc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dcca:	697a      	ldr	r2, [r7, #20]
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	621a      	str	r2, [r3, #32]
}
 800dcde:	bf00      	nop
 800dce0:	371c      	adds	r7, #28
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcea:	b480      	push	{r7}
 800dcec:	b087      	sub	sp, #28
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	60b9      	str	r1, [r7, #8]
 800dcf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	f023 0210 	bic.w	r2, r3, #16
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6a1b      	ldr	r3, [r3, #32]
 800dd0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	031b      	lsls	r3, r3, #12
 800dd1a:	697a      	ldr	r2, [r7, #20]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dd26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	011b      	lsls	r3, r3, #4
 800dd2c:	693a      	ldr	r2, [r7, #16]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	697a      	ldr	r2, [r7, #20]
 800dd36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	621a      	str	r2, [r3, #32]
}
 800dd3e:	bf00      	nop
 800dd40:	371c      	adds	r7, #28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
	...

0800dd4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	4b09      	ldr	r3, [pc, #36]	; (800dd84 <TIM_ITRx_SetConfig+0x38>)
 800dd60:	4013      	ands	r3, r2
 800dd62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	f043 0307 	orr.w	r3, r3, #7
 800dd6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	609a      	str	r2, [r3, #8]
}
 800dd76:	bf00      	nop
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	ffcfff8f 	.word	0xffcfff8f

0800dd88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]
 800dd94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dda2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	021a      	lsls	r2, r3, #8
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	431a      	orrs	r2, r3
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	697a      	ldr	r2, [r7, #20]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	697a      	ldr	r2, [r7, #20]
 800ddba:	609a      	str	r2, [r3, #8]
}
 800ddbc:	bf00      	nop
 800ddbe:	371c      	adds	r7, #28
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d101      	bne.n	800dde0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dddc:	2302      	movs	r3, #2
 800ddde:	e06d      	b.n	800debc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2202      	movs	r2, #2
 800ddec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a30      	ldr	r2, [pc, #192]	; (800dec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d004      	beq.n	800de14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a2f      	ldr	r2, [pc, #188]	; (800decc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d108      	bne.n	800de26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800de1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	4313      	orrs	r3, r2
 800de24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	4313      	orrs	r3, r2
 800de36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a20      	ldr	r2, [pc, #128]	; (800dec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d022      	beq.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de52:	d01d      	beq.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a1d      	ldr	r2, [pc, #116]	; (800ded0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d018      	beq.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a1c      	ldr	r2, [pc, #112]	; (800ded4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d013      	beq.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a1a      	ldr	r2, [pc, #104]	; (800ded8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d00e      	beq.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a15      	ldr	r2, [pc, #84]	; (800decc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d009      	beq.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a16      	ldr	r2, [pc, #88]	; (800dedc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d004      	beq.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a15      	ldr	r2, [pc, #84]	; (800dee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d10c      	bne.n	800deaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	4313      	orrs	r3, r2
 800dea0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2201      	movs	r2, #1
 800deae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3714      	adds	r7, #20
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	40010000 	.word	0x40010000
 800decc:	40010400 	.word	0x40010400
 800ded0:	40000400 	.word	0x40000400
 800ded4:	40000800 	.word	0x40000800
 800ded8:	40000c00 	.word	0x40000c00
 800dedc:	40001800 	.word	0x40001800
 800dee0:	40014000 	.word	0x40014000

0800dee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	e042      	b.n	800df7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800defc:	2b00      	cmp	r3, #0
 800defe:	d106      	bne.n	800df0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f7f5 fc33 	bl	8003774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2224      	movs	r2, #36	; 0x24
 800df12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f022 0201 	bic.w	r2, r2, #1
 800df24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 f8ba 	bl	800e0a0 <UART_SetConfig>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d101      	bne.n	800df36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	e022      	b.n	800df7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d002      	beq.n	800df44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 fe16 	bl	800eb70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	689a      	ldr	r2, [r3, #8]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f042 0201 	orr.w	r2, r2, #1
 800df72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 fe9d 	bl	800ecb4 <UART_CheckIdleState>
 800df7a:	4603      	mov	r3, r0
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b08a      	sub	sp, #40	; 0x28
 800df88:	af02      	add	r7, sp, #8
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	603b      	str	r3, [r7, #0]
 800df90:	4613      	mov	r3, r2
 800df92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df9a:	2b20      	cmp	r3, #32
 800df9c:	d17b      	bne.n	800e096 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <HAL_UART_Transmit+0x26>
 800dfa4:	88fb      	ldrh	r3, [r7, #6]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e074      	b.n	800e098 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2221      	movs	r2, #33	; 0x21
 800dfba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dfbe:	f7f6 f8b9 	bl	8004134 <HAL_GetTick>
 800dfc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	88fa      	ldrh	r2, [r7, #6]
 800dfc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	88fa      	ldrh	r2, [r7, #6]
 800dfd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfdc:	d108      	bne.n	800dff0 <HAL_UART_Transmit+0x6c>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d104      	bne.n	800dff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	61bb      	str	r3, [r7, #24]
 800dfee:	e003      	b.n	800dff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dff4:	2300      	movs	r3, #0
 800dff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dff8:	e030      	b.n	800e05c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2200      	movs	r2, #0
 800e002:	2180      	movs	r1, #128	; 0x80
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f000 feff 	bl	800ee08 <UART_WaitOnFlagUntilTimeout>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2220      	movs	r2, #32
 800e014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e018:	2303      	movs	r3, #3
 800e01a:	e03d      	b.n	800e098 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10b      	bne.n	800e03a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e030:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	3302      	adds	r3, #2
 800e036:	61bb      	str	r3, [r7, #24]
 800e038:	e007      	b.n	800e04a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	781a      	ldrb	r2, [r3, #0]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	3301      	adds	r3, #1
 800e048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e050:	b29b      	uxth	r3, r3
 800e052:	3b01      	subs	r3, #1
 800e054:	b29a      	uxth	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e062:	b29b      	uxth	r3, r3
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1c8      	bne.n	800dffa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	2200      	movs	r2, #0
 800e070:	2140      	movs	r1, #64	; 0x40
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f000 fec8 	bl	800ee08 <UART_WaitOnFlagUntilTimeout>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d005      	beq.n	800e08a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2220      	movs	r2, #32
 800e082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e086:	2303      	movs	r3, #3
 800e088:	e006      	b.n	800e098 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2220      	movs	r2, #32
 800e08e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e092:	2300      	movs	r3, #0
 800e094:	e000      	b.n	800e098 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e096:	2302      	movs	r3, #2
  }
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3720      	adds	r7, #32
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0a4:	b092      	sub	sp, #72	; 0x48
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	689a      	ldr	r2, [r3, #8]
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	431a      	orrs	r2, r3
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	695b      	ldr	r3, [r3, #20]
 800e0be:	431a      	orrs	r2, r3
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	69db      	ldr	r3, [r3, #28]
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	4bbe      	ldr	r3, [pc, #760]	; (800e3c8 <UART_SetConfig+0x328>)
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	6812      	ldr	r2, [r2, #0]
 800e0d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0d8:	430b      	orrs	r3, r1
 800e0da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	68da      	ldr	r2, [r3, #12]
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	430a      	orrs	r2, r1
 800e0f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4ab3      	ldr	r2, [pc, #716]	; (800e3cc <UART_SetConfig+0x32c>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d004      	beq.n	800e10c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e108:	4313      	orrs	r3, r2
 800e10a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	689a      	ldr	r2, [r3, #8]
 800e112:	4baf      	ldr	r3, [pc, #700]	; (800e3d0 <UART_SetConfig+0x330>)
 800e114:	4013      	ands	r3, r2
 800e116:	697a      	ldr	r2, [r7, #20]
 800e118:	6812      	ldr	r2, [r2, #0]
 800e11a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e11c:	430b      	orrs	r3, r1
 800e11e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e126:	f023 010f 	bic.w	r1, r3, #15
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	430a      	orrs	r2, r1
 800e134:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4aa6      	ldr	r2, [pc, #664]	; (800e3d4 <UART_SetConfig+0x334>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d177      	bne.n	800e230 <UART_SetConfig+0x190>
 800e140:	4ba5      	ldr	r3, [pc, #660]	; (800e3d8 <UART_SetConfig+0x338>)
 800e142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e148:	2b28      	cmp	r3, #40	; 0x28
 800e14a:	d86d      	bhi.n	800e228 <UART_SetConfig+0x188>
 800e14c:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <UART_SetConfig+0xb4>)
 800e14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e152:	bf00      	nop
 800e154:	0800e1f9 	.word	0x0800e1f9
 800e158:	0800e229 	.word	0x0800e229
 800e15c:	0800e229 	.word	0x0800e229
 800e160:	0800e229 	.word	0x0800e229
 800e164:	0800e229 	.word	0x0800e229
 800e168:	0800e229 	.word	0x0800e229
 800e16c:	0800e229 	.word	0x0800e229
 800e170:	0800e229 	.word	0x0800e229
 800e174:	0800e201 	.word	0x0800e201
 800e178:	0800e229 	.word	0x0800e229
 800e17c:	0800e229 	.word	0x0800e229
 800e180:	0800e229 	.word	0x0800e229
 800e184:	0800e229 	.word	0x0800e229
 800e188:	0800e229 	.word	0x0800e229
 800e18c:	0800e229 	.word	0x0800e229
 800e190:	0800e229 	.word	0x0800e229
 800e194:	0800e209 	.word	0x0800e209
 800e198:	0800e229 	.word	0x0800e229
 800e19c:	0800e229 	.word	0x0800e229
 800e1a0:	0800e229 	.word	0x0800e229
 800e1a4:	0800e229 	.word	0x0800e229
 800e1a8:	0800e229 	.word	0x0800e229
 800e1ac:	0800e229 	.word	0x0800e229
 800e1b0:	0800e229 	.word	0x0800e229
 800e1b4:	0800e211 	.word	0x0800e211
 800e1b8:	0800e229 	.word	0x0800e229
 800e1bc:	0800e229 	.word	0x0800e229
 800e1c0:	0800e229 	.word	0x0800e229
 800e1c4:	0800e229 	.word	0x0800e229
 800e1c8:	0800e229 	.word	0x0800e229
 800e1cc:	0800e229 	.word	0x0800e229
 800e1d0:	0800e229 	.word	0x0800e229
 800e1d4:	0800e219 	.word	0x0800e219
 800e1d8:	0800e229 	.word	0x0800e229
 800e1dc:	0800e229 	.word	0x0800e229
 800e1e0:	0800e229 	.word	0x0800e229
 800e1e4:	0800e229 	.word	0x0800e229
 800e1e8:	0800e229 	.word	0x0800e229
 800e1ec:	0800e229 	.word	0x0800e229
 800e1f0:	0800e229 	.word	0x0800e229
 800e1f4:	0800e221 	.word	0x0800e221
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e222      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e200:	2304      	movs	r3, #4
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e206:	e21e      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e208:	2308      	movs	r3, #8
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e21a      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e210:	2310      	movs	r3, #16
 800e212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e216:	e216      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e218:	2320      	movs	r3, #32
 800e21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21e:	e212      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e220:	2340      	movs	r3, #64	; 0x40
 800e222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e226:	e20e      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e228:	2380      	movs	r3, #128	; 0x80
 800e22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22e:	e20a      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a69      	ldr	r2, [pc, #420]	; (800e3dc <UART_SetConfig+0x33c>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d130      	bne.n	800e29c <UART_SetConfig+0x1fc>
 800e23a:	4b67      	ldr	r3, [pc, #412]	; (800e3d8 <UART_SetConfig+0x338>)
 800e23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e23e:	f003 0307 	and.w	r3, r3, #7
 800e242:	2b05      	cmp	r3, #5
 800e244:	d826      	bhi.n	800e294 <UART_SetConfig+0x1f4>
 800e246:	a201      	add	r2, pc, #4	; (adr r2, 800e24c <UART_SetConfig+0x1ac>)
 800e248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24c:	0800e265 	.word	0x0800e265
 800e250:	0800e26d 	.word	0x0800e26d
 800e254:	0800e275 	.word	0x0800e275
 800e258:	0800e27d 	.word	0x0800e27d
 800e25c:	0800e285 	.word	0x0800e285
 800e260:	0800e28d 	.word	0x0800e28d
 800e264:	2300      	movs	r3, #0
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e1ec      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e26c:	2304      	movs	r3, #4
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e272:	e1e8      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e274:	2308      	movs	r3, #8
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e1e4      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e27c:	2310      	movs	r3, #16
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e282:	e1e0      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e284:	2320      	movs	r3, #32
 800e286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28a:	e1dc      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e28c:	2340      	movs	r3, #64	; 0x40
 800e28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e292:	e1d8      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e294:	2380      	movs	r3, #128	; 0x80
 800e296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29a:	e1d4      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a4f      	ldr	r2, [pc, #316]	; (800e3e0 <UART_SetConfig+0x340>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d130      	bne.n	800e308 <UART_SetConfig+0x268>
 800e2a6:	4b4c      	ldr	r3, [pc, #304]	; (800e3d8 <UART_SetConfig+0x338>)
 800e2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2aa:	f003 0307 	and.w	r3, r3, #7
 800e2ae:	2b05      	cmp	r3, #5
 800e2b0:	d826      	bhi.n	800e300 <UART_SetConfig+0x260>
 800e2b2:	a201      	add	r2, pc, #4	; (adr r2, 800e2b8 <UART_SetConfig+0x218>)
 800e2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b8:	0800e2d1 	.word	0x0800e2d1
 800e2bc:	0800e2d9 	.word	0x0800e2d9
 800e2c0:	0800e2e1 	.word	0x0800e2e1
 800e2c4:	0800e2e9 	.word	0x0800e2e9
 800e2c8:	0800e2f1 	.word	0x0800e2f1
 800e2cc:	0800e2f9 	.word	0x0800e2f9
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d6:	e1b6      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e2d8:	2304      	movs	r3, #4
 800e2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2de:	e1b2      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e2e0:	2308      	movs	r3, #8
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e6:	e1ae      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e2e8:	2310      	movs	r3, #16
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ee:	e1aa      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e2f0:	2320      	movs	r3, #32
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e1a6      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e2f8:	2340      	movs	r3, #64	; 0x40
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e1a2      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e300:	2380      	movs	r3, #128	; 0x80
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e19e      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a35      	ldr	r2, [pc, #212]	; (800e3e4 <UART_SetConfig+0x344>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d130      	bne.n	800e374 <UART_SetConfig+0x2d4>
 800e312:	4b31      	ldr	r3, [pc, #196]	; (800e3d8 <UART_SetConfig+0x338>)
 800e314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	2b05      	cmp	r3, #5
 800e31c:	d826      	bhi.n	800e36c <UART_SetConfig+0x2cc>
 800e31e:	a201      	add	r2, pc, #4	; (adr r2, 800e324 <UART_SetConfig+0x284>)
 800e320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e324:	0800e33d 	.word	0x0800e33d
 800e328:	0800e345 	.word	0x0800e345
 800e32c:	0800e34d 	.word	0x0800e34d
 800e330:	0800e355 	.word	0x0800e355
 800e334:	0800e35d 	.word	0x0800e35d
 800e338:	0800e365 	.word	0x0800e365
 800e33c:	2300      	movs	r3, #0
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e180      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e344:	2304      	movs	r3, #4
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34a:	e17c      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e34c:	2308      	movs	r3, #8
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e352:	e178      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e354:	2310      	movs	r3, #16
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35a:	e174      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e35c:	2320      	movs	r3, #32
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e170      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e364:	2340      	movs	r3, #64	; 0x40
 800e366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36a:	e16c      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e36c:	2380      	movs	r3, #128	; 0x80
 800e36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e372:	e168      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a1b      	ldr	r2, [pc, #108]	; (800e3e8 <UART_SetConfig+0x348>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d142      	bne.n	800e404 <UART_SetConfig+0x364>
 800e37e:	4b16      	ldr	r3, [pc, #88]	; (800e3d8 <UART_SetConfig+0x338>)
 800e380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e382:	f003 0307 	and.w	r3, r3, #7
 800e386:	2b05      	cmp	r3, #5
 800e388:	d838      	bhi.n	800e3fc <UART_SetConfig+0x35c>
 800e38a:	a201      	add	r2, pc, #4	; (adr r2, 800e390 <UART_SetConfig+0x2f0>)
 800e38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e390:	0800e3a9 	.word	0x0800e3a9
 800e394:	0800e3b1 	.word	0x0800e3b1
 800e398:	0800e3b9 	.word	0x0800e3b9
 800e39c:	0800e3c1 	.word	0x0800e3c1
 800e3a0:	0800e3ed 	.word	0x0800e3ed
 800e3a4:	0800e3f5 	.word	0x0800e3f5
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e14a      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e3b0:	2304      	movs	r3, #4
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b6:	e146      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e3b8:	2308      	movs	r3, #8
 800e3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3be:	e142      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e3c0:	2310      	movs	r3, #16
 800e3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c6:	e13e      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e3c8:	cfff69f3 	.word	0xcfff69f3
 800e3cc:	58000c00 	.word	0x58000c00
 800e3d0:	11fff4ff 	.word	0x11fff4ff
 800e3d4:	40011000 	.word	0x40011000
 800e3d8:	58024400 	.word	0x58024400
 800e3dc:	40004400 	.word	0x40004400
 800e3e0:	40004800 	.word	0x40004800
 800e3e4:	40004c00 	.word	0x40004c00
 800e3e8:	40005000 	.word	0x40005000
 800e3ec:	2320      	movs	r3, #32
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e128      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e3f4:	2340      	movs	r3, #64	; 0x40
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e124      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e3fc:	2380      	movs	r3, #128	; 0x80
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e402:	e120      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4acb      	ldr	r2, [pc, #812]	; (800e738 <UART_SetConfig+0x698>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d176      	bne.n	800e4fc <UART_SetConfig+0x45c>
 800e40e:	4bcb      	ldr	r3, [pc, #812]	; (800e73c <UART_SetConfig+0x69c>)
 800e410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e416:	2b28      	cmp	r3, #40	; 0x28
 800e418:	d86c      	bhi.n	800e4f4 <UART_SetConfig+0x454>
 800e41a:	a201      	add	r2, pc, #4	; (adr r2, 800e420 <UART_SetConfig+0x380>)
 800e41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e420:	0800e4c5 	.word	0x0800e4c5
 800e424:	0800e4f5 	.word	0x0800e4f5
 800e428:	0800e4f5 	.word	0x0800e4f5
 800e42c:	0800e4f5 	.word	0x0800e4f5
 800e430:	0800e4f5 	.word	0x0800e4f5
 800e434:	0800e4f5 	.word	0x0800e4f5
 800e438:	0800e4f5 	.word	0x0800e4f5
 800e43c:	0800e4f5 	.word	0x0800e4f5
 800e440:	0800e4cd 	.word	0x0800e4cd
 800e444:	0800e4f5 	.word	0x0800e4f5
 800e448:	0800e4f5 	.word	0x0800e4f5
 800e44c:	0800e4f5 	.word	0x0800e4f5
 800e450:	0800e4f5 	.word	0x0800e4f5
 800e454:	0800e4f5 	.word	0x0800e4f5
 800e458:	0800e4f5 	.word	0x0800e4f5
 800e45c:	0800e4f5 	.word	0x0800e4f5
 800e460:	0800e4d5 	.word	0x0800e4d5
 800e464:	0800e4f5 	.word	0x0800e4f5
 800e468:	0800e4f5 	.word	0x0800e4f5
 800e46c:	0800e4f5 	.word	0x0800e4f5
 800e470:	0800e4f5 	.word	0x0800e4f5
 800e474:	0800e4f5 	.word	0x0800e4f5
 800e478:	0800e4f5 	.word	0x0800e4f5
 800e47c:	0800e4f5 	.word	0x0800e4f5
 800e480:	0800e4dd 	.word	0x0800e4dd
 800e484:	0800e4f5 	.word	0x0800e4f5
 800e488:	0800e4f5 	.word	0x0800e4f5
 800e48c:	0800e4f5 	.word	0x0800e4f5
 800e490:	0800e4f5 	.word	0x0800e4f5
 800e494:	0800e4f5 	.word	0x0800e4f5
 800e498:	0800e4f5 	.word	0x0800e4f5
 800e49c:	0800e4f5 	.word	0x0800e4f5
 800e4a0:	0800e4e5 	.word	0x0800e4e5
 800e4a4:	0800e4f5 	.word	0x0800e4f5
 800e4a8:	0800e4f5 	.word	0x0800e4f5
 800e4ac:	0800e4f5 	.word	0x0800e4f5
 800e4b0:	0800e4f5 	.word	0x0800e4f5
 800e4b4:	0800e4f5 	.word	0x0800e4f5
 800e4b8:	0800e4f5 	.word	0x0800e4f5
 800e4bc:	0800e4f5 	.word	0x0800e4f5
 800e4c0:	0800e4ed 	.word	0x0800e4ed
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ca:	e0bc      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e4cc:	2304      	movs	r3, #4
 800e4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d2:	e0b8      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e4d4:	2308      	movs	r3, #8
 800e4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4da:	e0b4      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e4dc:	2310      	movs	r3, #16
 800e4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e2:	e0b0      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e4e4:	2320      	movs	r3, #32
 800e4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ea:	e0ac      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e4ec:	2340      	movs	r3, #64	; 0x40
 800e4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f2:	e0a8      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e4f4:	2380      	movs	r3, #128	; 0x80
 800e4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fa:	e0a4      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a8f      	ldr	r2, [pc, #572]	; (800e740 <UART_SetConfig+0x6a0>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d130      	bne.n	800e568 <UART_SetConfig+0x4c8>
 800e506:	4b8d      	ldr	r3, [pc, #564]	; (800e73c <UART_SetConfig+0x69c>)
 800e508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e50a:	f003 0307 	and.w	r3, r3, #7
 800e50e:	2b05      	cmp	r3, #5
 800e510:	d826      	bhi.n	800e560 <UART_SetConfig+0x4c0>
 800e512:	a201      	add	r2, pc, #4	; (adr r2, 800e518 <UART_SetConfig+0x478>)
 800e514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e518:	0800e531 	.word	0x0800e531
 800e51c:	0800e539 	.word	0x0800e539
 800e520:	0800e541 	.word	0x0800e541
 800e524:	0800e549 	.word	0x0800e549
 800e528:	0800e551 	.word	0x0800e551
 800e52c:	0800e559 	.word	0x0800e559
 800e530:	2300      	movs	r3, #0
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e536:	e086      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e538:	2304      	movs	r3, #4
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53e:	e082      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e540:	2308      	movs	r3, #8
 800e542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e546:	e07e      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e548:	2310      	movs	r3, #16
 800e54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54e:	e07a      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e550:	2320      	movs	r3, #32
 800e552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e556:	e076      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e558:	2340      	movs	r3, #64	; 0x40
 800e55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55e:	e072      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e560:	2380      	movs	r3, #128	; 0x80
 800e562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e566:	e06e      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a75      	ldr	r2, [pc, #468]	; (800e744 <UART_SetConfig+0x6a4>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d130      	bne.n	800e5d4 <UART_SetConfig+0x534>
 800e572:	4b72      	ldr	r3, [pc, #456]	; (800e73c <UART_SetConfig+0x69c>)
 800e574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e576:	f003 0307 	and.w	r3, r3, #7
 800e57a:	2b05      	cmp	r3, #5
 800e57c:	d826      	bhi.n	800e5cc <UART_SetConfig+0x52c>
 800e57e:	a201      	add	r2, pc, #4	; (adr r2, 800e584 <UART_SetConfig+0x4e4>)
 800e580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e584:	0800e59d 	.word	0x0800e59d
 800e588:	0800e5a5 	.word	0x0800e5a5
 800e58c:	0800e5ad 	.word	0x0800e5ad
 800e590:	0800e5b5 	.word	0x0800e5b5
 800e594:	0800e5bd 	.word	0x0800e5bd
 800e598:	0800e5c5 	.word	0x0800e5c5
 800e59c:	2300      	movs	r3, #0
 800e59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a2:	e050      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e5a4:	2304      	movs	r3, #4
 800e5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5aa:	e04c      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e5ac:	2308      	movs	r3, #8
 800e5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b2:	e048      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e5b4:	2310      	movs	r3, #16
 800e5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ba:	e044      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e5bc:	2320      	movs	r3, #32
 800e5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c2:	e040      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e5c4:	2340      	movs	r3, #64	; 0x40
 800e5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ca:	e03c      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e5cc:	2380      	movs	r3, #128	; 0x80
 800e5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d2:	e038      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a5b      	ldr	r2, [pc, #364]	; (800e748 <UART_SetConfig+0x6a8>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d130      	bne.n	800e640 <UART_SetConfig+0x5a0>
 800e5de:	4b57      	ldr	r3, [pc, #348]	; (800e73c <UART_SetConfig+0x69c>)
 800e5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5e2:	f003 0307 	and.w	r3, r3, #7
 800e5e6:	2b05      	cmp	r3, #5
 800e5e8:	d826      	bhi.n	800e638 <UART_SetConfig+0x598>
 800e5ea:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <UART_SetConfig+0x550>)
 800e5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f0:	0800e609 	.word	0x0800e609
 800e5f4:	0800e611 	.word	0x0800e611
 800e5f8:	0800e619 	.word	0x0800e619
 800e5fc:	0800e621 	.word	0x0800e621
 800e600:	0800e629 	.word	0x0800e629
 800e604:	0800e631 	.word	0x0800e631
 800e608:	2302      	movs	r3, #2
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60e:	e01a      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e610:	2304      	movs	r3, #4
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e616:	e016      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e618:	2308      	movs	r3, #8
 800e61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61e:	e012      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e620:	2310      	movs	r3, #16
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e626:	e00e      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e628:	2320      	movs	r3, #32
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62e:	e00a      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e630:	2340      	movs	r3, #64	; 0x40
 800e632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e636:	e006      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e638:	2380      	movs	r3, #128	; 0x80
 800e63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63e:	e002      	b.n	800e646 <UART_SetConfig+0x5a6>
 800e640:	2380      	movs	r3, #128	; 0x80
 800e642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4a3f      	ldr	r2, [pc, #252]	; (800e748 <UART_SetConfig+0x6a8>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	f040 80f8 	bne.w	800e842 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e652:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e656:	2b20      	cmp	r3, #32
 800e658:	dc46      	bgt.n	800e6e8 <UART_SetConfig+0x648>
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	f2c0 8082 	blt.w	800e764 <UART_SetConfig+0x6c4>
 800e660:	3b02      	subs	r3, #2
 800e662:	2b1e      	cmp	r3, #30
 800e664:	d87e      	bhi.n	800e764 <UART_SetConfig+0x6c4>
 800e666:	a201      	add	r2, pc, #4	; (adr r2, 800e66c <UART_SetConfig+0x5cc>)
 800e668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66c:	0800e6ef 	.word	0x0800e6ef
 800e670:	0800e765 	.word	0x0800e765
 800e674:	0800e6f7 	.word	0x0800e6f7
 800e678:	0800e765 	.word	0x0800e765
 800e67c:	0800e765 	.word	0x0800e765
 800e680:	0800e765 	.word	0x0800e765
 800e684:	0800e707 	.word	0x0800e707
 800e688:	0800e765 	.word	0x0800e765
 800e68c:	0800e765 	.word	0x0800e765
 800e690:	0800e765 	.word	0x0800e765
 800e694:	0800e765 	.word	0x0800e765
 800e698:	0800e765 	.word	0x0800e765
 800e69c:	0800e765 	.word	0x0800e765
 800e6a0:	0800e765 	.word	0x0800e765
 800e6a4:	0800e717 	.word	0x0800e717
 800e6a8:	0800e765 	.word	0x0800e765
 800e6ac:	0800e765 	.word	0x0800e765
 800e6b0:	0800e765 	.word	0x0800e765
 800e6b4:	0800e765 	.word	0x0800e765
 800e6b8:	0800e765 	.word	0x0800e765
 800e6bc:	0800e765 	.word	0x0800e765
 800e6c0:	0800e765 	.word	0x0800e765
 800e6c4:	0800e765 	.word	0x0800e765
 800e6c8:	0800e765 	.word	0x0800e765
 800e6cc:	0800e765 	.word	0x0800e765
 800e6d0:	0800e765 	.word	0x0800e765
 800e6d4:	0800e765 	.word	0x0800e765
 800e6d8:	0800e765 	.word	0x0800e765
 800e6dc:	0800e765 	.word	0x0800e765
 800e6e0:	0800e765 	.word	0x0800e765
 800e6e4:	0800e757 	.word	0x0800e757
 800e6e8:	2b40      	cmp	r3, #64	; 0x40
 800e6ea:	d037      	beq.n	800e75c <UART_SetConfig+0x6bc>
 800e6ec:	e03a      	b.n	800e764 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e6ee:	f7fe fb19 	bl	800cd24 <HAL_RCCEx_GetD3PCLK1Freq>
 800e6f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6f4:	e03c      	b.n	800e770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fe fb28 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e704:	e034      	b.n	800e770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e706:	f107 0318 	add.w	r3, r7, #24
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe fc74 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e714:	e02c      	b.n	800e770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e716:	4b09      	ldr	r3, [pc, #36]	; (800e73c <UART_SetConfig+0x69c>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f003 0320 	and.w	r3, r3, #32
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d016      	beq.n	800e750 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e722:	4b06      	ldr	r3, [pc, #24]	; (800e73c <UART_SetConfig+0x69c>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	08db      	lsrs	r3, r3, #3
 800e728:	f003 0303 	and.w	r3, r3, #3
 800e72c:	4a07      	ldr	r2, [pc, #28]	; (800e74c <UART_SetConfig+0x6ac>)
 800e72e:	fa22 f303 	lsr.w	r3, r2, r3
 800e732:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e734:	e01c      	b.n	800e770 <UART_SetConfig+0x6d0>
 800e736:	bf00      	nop
 800e738:	40011400 	.word	0x40011400
 800e73c:	58024400 	.word	0x58024400
 800e740:	40007800 	.word	0x40007800
 800e744:	40007c00 	.word	0x40007c00
 800e748:	58000c00 	.word	0x58000c00
 800e74c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e750:	4b9d      	ldr	r3, [pc, #628]	; (800e9c8 <UART_SetConfig+0x928>)
 800e752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e754:	e00c      	b.n	800e770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e756:	4b9d      	ldr	r3, [pc, #628]	; (800e9cc <UART_SetConfig+0x92c>)
 800e758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75a:	e009      	b.n	800e770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e75c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e762:	e005      	b.n	800e770 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e764:	2300      	movs	r3, #0
 800e766:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e768:	2301      	movs	r3, #1
 800e76a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e76e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e772:	2b00      	cmp	r3, #0
 800e774:	f000 81de 	beq.w	800eb34 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77c:	4a94      	ldr	r2, [pc, #592]	; (800e9d0 <UART_SetConfig+0x930>)
 800e77e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e782:	461a      	mov	r2, r3
 800e784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e786:	fbb3 f3f2 	udiv	r3, r3, r2
 800e78a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	4613      	mov	r3, r2
 800e792:	005b      	lsls	r3, r3, #1
 800e794:	4413      	add	r3, r2
 800e796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e798:	429a      	cmp	r2, r3
 800e79a:	d305      	bcc.n	800e7a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d903      	bls.n	800e7b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7ae:	e1c1      	b.n	800eb34 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	60bb      	str	r3, [r7, #8]
 800e7b6:	60fa      	str	r2, [r7, #12]
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7bc:	4a84      	ldr	r2, [pc, #528]	; (800e9d0 <UART_SetConfig+0x930>)
 800e7be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	603b      	str	r3, [r7, #0]
 800e7c8:	607a      	str	r2, [r7, #4]
 800e7ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e7d2:	f7f3 fb95 	bl	8001f00 <__aeabi_uldivmod>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	4610      	mov	r0, r2
 800e7dc:	4619      	mov	r1, r3
 800e7de:	f04f 0200 	mov.w	r2, #0
 800e7e2:	f04f 0300 	mov.w	r3, #0
 800e7e6:	020b      	lsls	r3, r1, #8
 800e7e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e7ec:	0202      	lsls	r2, r0, #8
 800e7ee:	6979      	ldr	r1, [r7, #20]
 800e7f0:	6849      	ldr	r1, [r1, #4]
 800e7f2:	0849      	lsrs	r1, r1, #1
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	460c      	mov	r4, r1
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	eb12 0804 	adds.w	r8, r2, r4
 800e7fe:	eb43 0905 	adc.w	r9, r3, r5
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	2200      	movs	r2, #0
 800e808:	469a      	mov	sl, r3
 800e80a:	4693      	mov	fp, r2
 800e80c:	4652      	mov	r2, sl
 800e80e:	465b      	mov	r3, fp
 800e810:	4640      	mov	r0, r8
 800e812:	4649      	mov	r1, r9
 800e814:	f7f3 fb74 	bl	8001f00 <__aeabi_uldivmod>
 800e818:	4602      	mov	r2, r0
 800e81a:	460b      	mov	r3, r1
 800e81c:	4613      	mov	r3, r2
 800e81e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e826:	d308      	bcc.n	800e83a <UART_SetConfig+0x79a>
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e82e:	d204      	bcs.n	800e83a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e836:	60da      	str	r2, [r3, #12]
 800e838:	e17c      	b.n	800eb34 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e840:	e178      	b.n	800eb34 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	69db      	ldr	r3, [r3, #28]
 800e846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e84a:	f040 80c5 	bne.w	800e9d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e84e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e852:	2b20      	cmp	r3, #32
 800e854:	dc48      	bgt.n	800e8e8 <UART_SetConfig+0x848>
 800e856:	2b00      	cmp	r3, #0
 800e858:	db7b      	blt.n	800e952 <UART_SetConfig+0x8b2>
 800e85a:	2b20      	cmp	r3, #32
 800e85c:	d879      	bhi.n	800e952 <UART_SetConfig+0x8b2>
 800e85e:	a201      	add	r2, pc, #4	; (adr r2, 800e864 <UART_SetConfig+0x7c4>)
 800e860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e864:	0800e8ef 	.word	0x0800e8ef
 800e868:	0800e8f7 	.word	0x0800e8f7
 800e86c:	0800e953 	.word	0x0800e953
 800e870:	0800e953 	.word	0x0800e953
 800e874:	0800e8ff 	.word	0x0800e8ff
 800e878:	0800e953 	.word	0x0800e953
 800e87c:	0800e953 	.word	0x0800e953
 800e880:	0800e953 	.word	0x0800e953
 800e884:	0800e90f 	.word	0x0800e90f
 800e888:	0800e953 	.word	0x0800e953
 800e88c:	0800e953 	.word	0x0800e953
 800e890:	0800e953 	.word	0x0800e953
 800e894:	0800e953 	.word	0x0800e953
 800e898:	0800e953 	.word	0x0800e953
 800e89c:	0800e953 	.word	0x0800e953
 800e8a0:	0800e953 	.word	0x0800e953
 800e8a4:	0800e91f 	.word	0x0800e91f
 800e8a8:	0800e953 	.word	0x0800e953
 800e8ac:	0800e953 	.word	0x0800e953
 800e8b0:	0800e953 	.word	0x0800e953
 800e8b4:	0800e953 	.word	0x0800e953
 800e8b8:	0800e953 	.word	0x0800e953
 800e8bc:	0800e953 	.word	0x0800e953
 800e8c0:	0800e953 	.word	0x0800e953
 800e8c4:	0800e953 	.word	0x0800e953
 800e8c8:	0800e953 	.word	0x0800e953
 800e8cc:	0800e953 	.word	0x0800e953
 800e8d0:	0800e953 	.word	0x0800e953
 800e8d4:	0800e953 	.word	0x0800e953
 800e8d8:	0800e953 	.word	0x0800e953
 800e8dc:	0800e953 	.word	0x0800e953
 800e8e0:	0800e953 	.word	0x0800e953
 800e8e4:	0800e945 	.word	0x0800e945
 800e8e8:	2b40      	cmp	r3, #64	; 0x40
 800e8ea:	d02e      	beq.n	800e94a <UART_SetConfig+0x8aa>
 800e8ec:	e031      	b.n	800e952 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8ee:	f7fc fa47 	bl	800ad80 <HAL_RCC_GetPCLK1Freq>
 800e8f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8f4:	e033      	b.n	800e95e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8f6:	f7fc fa59 	bl	800adac <HAL_RCC_GetPCLK2Freq>
 800e8fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8fc:	e02f      	b.n	800e95e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe fa24 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e90c:	e027      	b.n	800e95e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e90e:	f107 0318 	add.w	r3, r7, #24
 800e912:	4618      	mov	r0, r3
 800e914:	f7fe fb70 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e91c:	e01f      	b.n	800e95e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e91e:	4b2d      	ldr	r3, [pc, #180]	; (800e9d4 <UART_SetConfig+0x934>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f003 0320 	and.w	r3, r3, #32
 800e926:	2b00      	cmp	r3, #0
 800e928:	d009      	beq.n	800e93e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e92a:	4b2a      	ldr	r3, [pc, #168]	; (800e9d4 <UART_SetConfig+0x934>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	08db      	lsrs	r3, r3, #3
 800e930:	f003 0303 	and.w	r3, r3, #3
 800e934:	4a24      	ldr	r2, [pc, #144]	; (800e9c8 <UART_SetConfig+0x928>)
 800e936:	fa22 f303 	lsr.w	r3, r2, r3
 800e93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e93c:	e00f      	b.n	800e95e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e93e:	4b22      	ldr	r3, [pc, #136]	; (800e9c8 <UART_SetConfig+0x928>)
 800e940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e942:	e00c      	b.n	800e95e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e944:	4b21      	ldr	r3, [pc, #132]	; (800e9cc <UART_SetConfig+0x92c>)
 800e946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e948:	e009      	b.n	800e95e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e94a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e950:	e005      	b.n	800e95e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e952:	2300      	movs	r3, #0
 800e954:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e95c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 80e7 	beq.w	800eb34 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96a:	4a19      	ldr	r2, [pc, #100]	; (800e9d0 <UART_SetConfig+0x930>)
 800e96c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e970:	461a      	mov	r2, r3
 800e972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e974:	fbb3 f3f2 	udiv	r3, r3, r2
 800e978:	005a      	lsls	r2, r3, #1
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	085b      	lsrs	r3, r3, #1
 800e980:	441a      	add	r2, r3
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	fbb2 f3f3 	udiv	r3, r2, r3
 800e98a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98e:	2b0f      	cmp	r3, #15
 800e990:	d916      	bls.n	800e9c0 <UART_SetConfig+0x920>
 800e992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e998:	d212      	bcs.n	800e9c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	f023 030f 	bic.w	r3, r3, #15
 800e9a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a6:	085b      	lsrs	r3, r3, #1
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	f003 0307 	and.w	r3, r3, #7
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9bc:	60da      	str	r2, [r3, #12]
 800e9be:	e0b9      	b.n	800eb34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9c6:	e0b5      	b.n	800eb34 <UART_SetConfig+0xa94>
 800e9c8:	03d09000 	.word	0x03d09000
 800e9cc:	003d0900 	.word	0x003d0900
 800e9d0:	08020620 	.word	0x08020620
 800e9d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e9d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9dc:	2b20      	cmp	r3, #32
 800e9de:	dc49      	bgt.n	800ea74 <UART_SetConfig+0x9d4>
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	db7c      	blt.n	800eade <UART_SetConfig+0xa3e>
 800e9e4:	2b20      	cmp	r3, #32
 800e9e6:	d87a      	bhi.n	800eade <UART_SetConfig+0xa3e>
 800e9e8:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <UART_SetConfig+0x950>)
 800e9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ee:	bf00      	nop
 800e9f0:	0800ea7b 	.word	0x0800ea7b
 800e9f4:	0800ea83 	.word	0x0800ea83
 800e9f8:	0800eadf 	.word	0x0800eadf
 800e9fc:	0800eadf 	.word	0x0800eadf
 800ea00:	0800ea8b 	.word	0x0800ea8b
 800ea04:	0800eadf 	.word	0x0800eadf
 800ea08:	0800eadf 	.word	0x0800eadf
 800ea0c:	0800eadf 	.word	0x0800eadf
 800ea10:	0800ea9b 	.word	0x0800ea9b
 800ea14:	0800eadf 	.word	0x0800eadf
 800ea18:	0800eadf 	.word	0x0800eadf
 800ea1c:	0800eadf 	.word	0x0800eadf
 800ea20:	0800eadf 	.word	0x0800eadf
 800ea24:	0800eadf 	.word	0x0800eadf
 800ea28:	0800eadf 	.word	0x0800eadf
 800ea2c:	0800eadf 	.word	0x0800eadf
 800ea30:	0800eaab 	.word	0x0800eaab
 800ea34:	0800eadf 	.word	0x0800eadf
 800ea38:	0800eadf 	.word	0x0800eadf
 800ea3c:	0800eadf 	.word	0x0800eadf
 800ea40:	0800eadf 	.word	0x0800eadf
 800ea44:	0800eadf 	.word	0x0800eadf
 800ea48:	0800eadf 	.word	0x0800eadf
 800ea4c:	0800eadf 	.word	0x0800eadf
 800ea50:	0800eadf 	.word	0x0800eadf
 800ea54:	0800eadf 	.word	0x0800eadf
 800ea58:	0800eadf 	.word	0x0800eadf
 800ea5c:	0800eadf 	.word	0x0800eadf
 800ea60:	0800eadf 	.word	0x0800eadf
 800ea64:	0800eadf 	.word	0x0800eadf
 800ea68:	0800eadf 	.word	0x0800eadf
 800ea6c:	0800eadf 	.word	0x0800eadf
 800ea70:	0800ead1 	.word	0x0800ead1
 800ea74:	2b40      	cmp	r3, #64	; 0x40
 800ea76:	d02e      	beq.n	800ead6 <UART_SetConfig+0xa36>
 800ea78:	e031      	b.n	800eade <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea7a:	f7fc f981 	bl	800ad80 <HAL_RCC_GetPCLK1Freq>
 800ea7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea80:	e033      	b.n	800eaea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea82:	f7fc f993 	bl	800adac <HAL_RCC_GetPCLK2Freq>
 800ea86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea88:	e02f      	b.n	800eaea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7fe f95e 	bl	800cd50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea98:	e027      	b.n	800eaea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea9a:	f107 0318 	add.w	r3, r7, #24
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fe faaa 	bl	800cff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa8:	e01f      	b.n	800eaea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eaaa:	4b2d      	ldr	r3, [pc, #180]	; (800eb60 <UART_SetConfig+0xac0>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f003 0320 	and.w	r3, r3, #32
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d009      	beq.n	800eaca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eab6:	4b2a      	ldr	r3, [pc, #168]	; (800eb60 <UART_SetConfig+0xac0>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	08db      	lsrs	r3, r3, #3
 800eabc:	f003 0303 	and.w	r3, r3, #3
 800eac0:	4a28      	ldr	r2, [pc, #160]	; (800eb64 <UART_SetConfig+0xac4>)
 800eac2:	fa22 f303 	lsr.w	r3, r2, r3
 800eac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eac8:	e00f      	b.n	800eaea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800eaca:	4b26      	ldr	r3, [pc, #152]	; (800eb64 <UART_SetConfig+0xac4>)
 800eacc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eace:	e00c      	b.n	800eaea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ead0:	4b25      	ldr	r3, [pc, #148]	; (800eb68 <UART_SetConfig+0xac8>)
 800ead2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ead4:	e009      	b.n	800eaea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ead6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eadc:	e005      	b.n	800eaea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800eade:	2300      	movs	r3, #0
 800eae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eae2:	2301      	movs	r3, #1
 800eae4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eae8:	bf00      	nop
    }

    if (pclk != 0U)
 800eaea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d021      	beq.n	800eb34 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf4:	4a1d      	ldr	r2, [pc, #116]	; (800eb6c <UART_SetConfig+0xacc>)
 800eaf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eafa:	461a      	mov	r2, r3
 800eafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eafe:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	685b      	ldr	r3, [r3, #4]
 800eb06:	085b      	lsrs	r3, r3, #1
 800eb08:	441a      	add	r2, r3
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb16:	2b0f      	cmp	r3, #15
 800eb18:	d909      	bls.n	800eb2e <UART_SetConfig+0xa8e>
 800eb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb20:	d205      	bcs.n	800eb2e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60da      	str	r2, [r3, #12]
 800eb2c:	e002      	b.n	800eb34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2201      	movs	r2, #1
 800eb38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	2200      	movs	r2, #0
 800eb48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800eb50:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3748      	adds	r7, #72	; 0x48
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb5e:	bf00      	nop
 800eb60:	58024400 	.word	0x58024400
 800eb64:	03d09000 	.word	0x03d09000
 800eb68:	003d0900 	.word	0x003d0900
 800eb6c:	08020620 	.word	0x08020620

0800eb70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb7c:	f003 0301 	and.w	r3, r3, #1
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00a      	beq.n	800eb9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	430a      	orrs	r2, r1
 800eb98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9e:	f003 0302 	and.w	r3, r3, #2
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00a      	beq.n	800ebbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	430a      	orrs	r2, r1
 800ebba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc0:	f003 0304 	and.w	r3, r3, #4
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d00a      	beq.n	800ebde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	430a      	orrs	r2, r1
 800ebdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe2:	f003 0308 	and.w	r3, r3, #8
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00a      	beq.n	800ec00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	430a      	orrs	r2, r1
 800ebfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec04:	f003 0310 	and.w	r3, r3, #16
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00a      	beq.n	800ec22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	689b      	ldr	r3, [r3, #8]
 800ec12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec26:	f003 0320 	and.w	r3, r3, #32
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00a      	beq.n	800ec44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	430a      	orrs	r2, r1
 800ec42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d01a      	beq.n	800ec86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	430a      	orrs	r2, r1
 800ec64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec6e:	d10a      	bne.n	800ec86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	430a      	orrs	r2, r1
 800ec84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00a      	beq.n	800eca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	430a      	orrs	r2, r1
 800eca6:	605a      	str	r2, [r3, #4]
  }
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b098      	sub	sp, #96	; 0x60
 800ecb8:	af02      	add	r7, sp, #8
 800ecba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ecc4:	f7f5 fa36 	bl	8004134 <HAL_GetTick>
 800ecc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f003 0308 	and.w	r3, r3, #8
 800ecd4:	2b08      	cmp	r3, #8
 800ecd6:	d12f      	bne.n	800ed38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ece0:	2200      	movs	r2, #0
 800ece2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 f88e 	bl	800ee08 <UART_WaitOnFlagUntilTimeout>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d022      	beq.n	800ed38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfa:	e853 3f00 	ldrex	r3, [r3]
 800ecfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed06:	653b      	str	r3, [r7, #80]	; 0x50
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed10:	647b      	str	r3, [r7, #68]	; 0x44
 800ed12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed18:	e841 2300 	strex	r3, r2, [r1]
 800ed1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1e6      	bne.n	800ecf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2220      	movs	r2, #32
 800ed28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed34:	2303      	movs	r3, #3
 800ed36:	e063      	b.n	800ee00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f003 0304 	and.w	r3, r3, #4
 800ed42:	2b04      	cmp	r3, #4
 800ed44:	d149      	bne.n	800edda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 f857 	bl	800ee08 <UART_WaitOnFlagUntilTimeout>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d03c      	beq.n	800edda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed68:	e853 3f00 	ldrex	r3, [r3]
 800ed6c:	623b      	str	r3, [r7, #32]
   return(result);
 800ed6e:	6a3b      	ldr	r3, [r7, #32]
 800ed70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ed80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed86:	e841 2300 	strex	r3, r2, [r1]
 800ed8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1e6      	bne.n	800ed60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3308      	adds	r3, #8
 800ed98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	e853 3f00 	ldrex	r3, [r3]
 800eda0:	60fb      	str	r3, [r7, #12]
   return(result);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f023 0301 	bic.w	r3, r3, #1
 800eda8:	64bb      	str	r3, [r7, #72]	; 0x48
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	3308      	adds	r3, #8
 800edb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edb2:	61fa      	str	r2, [r7, #28]
 800edb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb6:	69b9      	ldr	r1, [r7, #24]
 800edb8:	69fa      	ldr	r2, [r7, #28]
 800edba:	e841 2300 	strex	r3, r2, [r1]
 800edbe:	617b      	str	r3, [r7, #20]
   return(result);
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1e5      	bne.n	800ed92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2220      	movs	r2, #32
 800edca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edd6:	2303      	movs	r3, #3
 800edd8:	e012      	b.n	800ee00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2220      	movs	r2, #32
 800edde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2220      	movs	r2, #32
 800ede6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3758      	adds	r7, #88	; 0x58
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	603b      	str	r3, [r7, #0]
 800ee14:	4613      	mov	r3, r2
 800ee16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee18:	e049      	b.n	800eeae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee20:	d045      	beq.n	800eeae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee22:	f7f5 f987 	bl	8004134 <HAL_GetTick>
 800ee26:	4602      	mov	r2, r0
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	69ba      	ldr	r2, [r7, #24]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d302      	bcc.n	800ee38 <UART_WaitOnFlagUntilTimeout+0x30>
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d101      	bne.n	800ee3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee38:	2303      	movs	r3, #3
 800ee3a:	e048      	b.n	800eece <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f003 0304 	and.w	r3, r3, #4
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d031      	beq.n	800eeae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	69db      	ldr	r3, [r3, #28]
 800ee50:	f003 0308 	and.w	r3, r3, #8
 800ee54:	2b08      	cmp	r3, #8
 800ee56:	d110      	bne.n	800ee7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	2208      	movs	r2, #8
 800ee5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 f839 	bl	800eed8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2208      	movs	r2, #8
 800ee6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e029      	b.n	800eece <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee88:	d111      	bne.n	800eeae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f000 f81f 	bl	800eed8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2220      	movs	r2, #32
 800ee9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	e00f      	b.n	800eece <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	69da      	ldr	r2, [r3, #28]
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	4013      	ands	r3, r2
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	bf0c      	ite	eq
 800eebe:	2301      	moveq	r3, #1
 800eec0:	2300      	movne	r3, #0
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	461a      	mov	r2, r3
 800eec6:	79fb      	ldrb	r3, [r7, #7]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d0a6      	beq.n	800ee1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
	...

0800eed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b095      	sub	sp, #84	; 0x54
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eee8:	e853 3f00 	ldrex	r3, [r3]
 800eeec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eefe:	643b      	str	r3, [r7, #64]	; 0x40
 800ef00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef06:	e841 2300 	strex	r3, r2, [r1]
 800ef0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1e6      	bne.n	800eee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	3308      	adds	r3, #8
 800ef18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1a:	6a3b      	ldr	r3, [r7, #32]
 800ef1c:	e853 3f00 	ldrex	r3, [r3]
 800ef20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef22:	69fa      	ldr	r2, [r7, #28]
 800ef24:	4b1e      	ldr	r3, [pc, #120]	; (800efa0 <UART_EndRxTransfer+0xc8>)
 800ef26:	4013      	ands	r3, r2
 800ef28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	3308      	adds	r3, #8
 800ef30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef3a:	e841 2300 	strex	r3, r2, [r1]
 800ef3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1e5      	bne.n	800ef12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d118      	bne.n	800ef80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	e853 3f00 	ldrex	r3, [r3]
 800ef5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	f023 0310 	bic.w	r3, r3, #16
 800ef62:	647b      	str	r3, [r7, #68]	; 0x44
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	461a      	mov	r2, r3
 800ef6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef6c:	61bb      	str	r3, [r7, #24]
 800ef6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef70:	6979      	ldr	r1, [r7, #20]
 800ef72:	69ba      	ldr	r2, [r7, #24]
 800ef74:	e841 2300 	strex	r3, r2, [r1]
 800ef78:	613b      	str	r3, [r7, #16]
   return(result);
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1e6      	bne.n	800ef4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2220      	movs	r2, #32
 800ef84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ef94:	bf00      	nop
 800ef96:	3754      	adds	r7, #84	; 0x54
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr
 800efa0:	effffffe 	.word	0xeffffffe

0800efa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d101      	bne.n	800efba <HAL_UARTEx_DisableFifoMode+0x16>
 800efb6:	2302      	movs	r3, #2
 800efb8:	e027      	b.n	800f00a <HAL_UARTEx_DisableFifoMode+0x66>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2201      	movs	r2, #1
 800efbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2224      	movs	r2, #36	; 0x24
 800efc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f022 0201 	bic.w	r2, r2, #1
 800efe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800efe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2220      	movs	r2, #32
 800effc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f008:	2300      	movs	r3, #0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr

0800f016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b084      	sub	sp, #16
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
 800f01e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f026:	2b01      	cmp	r3, #1
 800f028:	d101      	bne.n	800f02e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f02a:	2302      	movs	r3, #2
 800f02c:	e02d      	b.n	800f08a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2201      	movs	r2, #1
 800f032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2224      	movs	r2, #36	; 0x24
 800f03a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f022 0201 	bic.w	r2, r2, #1
 800f054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	683a      	ldr	r2, [r7, #0]
 800f066:	430a      	orrs	r2, r1
 800f068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 f850 	bl	800f110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2220      	movs	r2, #32
 800f07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f088:	2300      	movs	r3, #0
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}

0800f092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f092:	b580      	push	{r7, lr}
 800f094:	b084      	sub	sp, #16
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
 800f09a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	d101      	bne.n	800f0aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	e02d      	b.n	800f106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2224      	movs	r2, #36	; 0x24
 800f0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f022 0201 	bic.w	r2, r2, #1
 800f0d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	430a      	orrs	r2, r1
 800f0e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f812 	bl	800f110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2220      	movs	r2, #32
 800f0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
	...

0800f110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d108      	bne.n	800f132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2201      	movs	r2, #1
 800f124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2201      	movs	r2, #1
 800f12c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f130:	e031      	b.n	800f196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f132:	2310      	movs	r3, #16
 800f134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f136:	2310      	movs	r3, #16
 800f138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	689b      	ldr	r3, [r3, #8]
 800f140:	0e5b      	lsrs	r3, r3, #25
 800f142:	b2db      	uxtb	r3, r3
 800f144:	f003 0307 	and.w	r3, r3, #7
 800f148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	0f5b      	lsrs	r3, r3, #29
 800f152:	b2db      	uxtb	r3, r3
 800f154:	f003 0307 	and.w	r3, r3, #7
 800f158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f15a:	7bbb      	ldrb	r3, [r7, #14]
 800f15c:	7b3a      	ldrb	r2, [r7, #12]
 800f15e:	4911      	ldr	r1, [pc, #68]	; (800f1a4 <UARTEx_SetNbDataToProcess+0x94>)
 800f160:	5c8a      	ldrb	r2, [r1, r2]
 800f162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f166:	7b3a      	ldrb	r2, [r7, #12]
 800f168:	490f      	ldr	r1, [pc, #60]	; (800f1a8 <UARTEx_SetNbDataToProcess+0x98>)
 800f16a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f16c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f170:	b29a      	uxth	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f178:	7bfb      	ldrb	r3, [r7, #15]
 800f17a:	7b7a      	ldrb	r2, [r7, #13]
 800f17c:	4909      	ldr	r1, [pc, #36]	; (800f1a4 <UARTEx_SetNbDataToProcess+0x94>)
 800f17e:	5c8a      	ldrb	r2, [r1, r2]
 800f180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f184:	7b7a      	ldrb	r2, [r7, #13]
 800f186:	4908      	ldr	r1, [pc, #32]	; (800f1a8 <UARTEx_SetNbDataToProcess+0x98>)
 800f188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f18a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f18e:	b29a      	uxth	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f196:	bf00      	nop
 800f198:	3714      	adds	r7, #20
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	08020638 	.word	0x08020638
 800f1a8:	08020640 	.word	0x08020640

0800f1ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f1b2:	4b8d      	ldr	r3, [pc, #564]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f1b4:	22c0      	movs	r2, #192	; 0xc0
 800f1b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f1b8:	4b8b      	ldr	r3, [pc, #556]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f1ba:	22a8      	movs	r2, #168	; 0xa8
 800f1bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800f1be:	4b8a      	ldr	r3, [pc, #552]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800f1c4:	4b88      	ldr	r3, [pc, #544]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f1c6:	220a      	movs	r2, #10
 800f1c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f1ca:	4b88      	ldr	r3, [pc, #544]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f1cc:	22ff      	movs	r2, #255	; 0xff
 800f1ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f1d0:	4b86      	ldr	r3, [pc, #536]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f1d2:	22ff      	movs	r2, #255	; 0xff
 800f1d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800f1d6:	4b85      	ldr	r3, [pc, #532]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f1dc:	4b83      	ldr	r3, [pc, #524]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f1e2:	4b83      	ldr	r3, [pc, #524]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f1e4:	22c0      	movs	r2, #192	; 0xc0
 800f1e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f1e8:	4b81      	ldr	r3, [pc, #516]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f1ea:	22a8      	movs	r2, #168	; 0xa8
 800f1ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800f1ee:	4b80      	ldr	r3, [pc, #512]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f1f4:	4b7e      	ldr	r3, [pc, #504]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f1fa:	f000 fddf 	bl	800fdbc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f1fe:	4b7a      	ldr	r3, [pc, #488]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	061a      	lsls	r2, r3, #24
 800f204:	4b78      	ldr	r3, [pc, #480]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f206:	785b      	ldrb	r3, [r3, #1]
 800f208:	041b      	lsls	r3, r3, #16
 800f20a:	431a      	orrs	r2, r3
 800f20c:	4b76      	ldr	r3, [pc, #472]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f20e:	789b      	ldrb	r3, [r3, #2]
 800f210:	021b      	lsls	r3, r3, #8
 800f212:	4313      	orrs	r3, r2
 800f214:	4a74      	ldr	r2, [pc, #464]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f216:	78d2      	ldrb	r2, [r2, #3]
 800f218:	4313      	orrs	r3, r2
 800f21a:	061a      	lsls	r2, r3, #24
 800f21c:	4b72      	ldr	r3, [pc, #456]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	0619      	lsls	r1, r3, #24
 800f222:	4b71      	ldr	r3, [pc, #452]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f224:	785b      	ldrb	r3, [r3, #1]
 800f226:	041b      	lsls	r3, r3, #16
 800f228:	4319      	orrs	r1, r3
 800f22a:	4b6f      	ldr	r3, [pc, #444]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f22c:	789b      	ldrb	r3, [r3, #2]
 800f22e:	021b      	lsls	r3, r3, #8
 800f230:	430b      	orrs	r3, r1
 800f232:	496d      	ldr	r1, [pc, #436]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f234:	78c9      	ldrb	r1, [r1, #3]
 800f236:	430b      	orrs	r3, r1
 800f238:	021b      	lsls	r3, r3, #8
 800f23a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f23e:	431a      	orrs	r2, r3
 800f240:	4b69      	ldr	r3, [pc, #420]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	0619      	lsls	r1, r3, #24
 800f246:	4b68      	ldr	r3, [pc, #416]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f248:	785b      	ldrb	r3, [r3, #1]
 800f24a:	041b      	lsls	r3, r3, #16
 800f24c:	4319      	orrs	r1, r3
 800f24e:	4b66      	ldr	r3, [pc, #408]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f250:	789b      	ldrb	r3, [r3, #2]
 800f252:	021b      	lsls	r3, r3, #8
 800f254:	430b      	orrs	r3, r1
 800f256:	4964      	ldr	r1, [pc, #400]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f258:	78c9      	ldrb	r1, [r1, #3]
 800f25a:	430b      	orrs	r3, r1
 800f25c:	0a1b      	lsrs	r3, r3, #8
 800f25e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f262:	431a      	orrs	r2, r3
 800f264:	4b60      	ldr	r3, [pc, #384]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	0619      	lsls	r1, r3, #24
 800f26a:	4b5f      	ldr	r3, [pc, #380]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f26c:	785b      	ldrb	r3, [r3, #1]
 800f26e:	041b      	lsls	r3, r3, #16
 800f270:	4319      	orrs	r1, r3
 800f272:	4b5d      	ldr	r3, [pc, #372]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f274:	789b      	ldrb	r3, [r3, #2]
 800f276:	021b      	lsls	r3, r3, #8
 800f278:	430b      	orrs	r3, r1
 800f27a:	495b      	ldr	r1, [pc, #364]	; (800f3e8 <MX_LWIP_Init+0x23c>)
 800f27c:	78c9      	ldrb	r1, [r1, #3]
 800f27e:	430b      	orrs	r3, r1
 800f280:	0e1b      	lsrs	r3, r3, #24
 800f282:	4313      	orrs	r3, r2
 800f284:	4a5b      	ldr	r2, [pc, #364]	; (800f3f4 <MX_LWIP_Init+0x248>)
 800f286:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f288:	4b58      	ldr	r3, [pc, #352]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	061a      	lsls	r2, r3, #24
 800f28e:	4b57      	ldr	r3, [pc, #348]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f290:	785b      	ldrb	r3, [r3, #1]
 800f292:	041b      	lsls	r3, r3, #16
 800f294:	431a      	orrs	r2, r3
 800f296:	4b55      	ldr	r3, [pc, #340]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f298:	789b      	ldrb	r3, [r3, #2]
 800f29a:	021b      	lsls	r3, r3, #8
 800f29c:	4313      	orrs	r3, r2
 800f29e:	4a53      	ldr	r2, [pc, #332]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2a0:	78d2      	ldrb	r2, [r2, #3]
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	061a      	lsls	r2, r3, #24
 800f2a6:	4b51      	ldr	r3, [pc, #324]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	0619      	lsls	r1, r3, #24
 800f2ac:	4b4f      	ldr	r3, [pc, #316]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2ae:	785b      	ldrb	r3, [r3, #1]
 800f2b0:	041b      	lsls	r3, r3, #16
 800f2b2:	4319      	orrs	r1, r3
 800f2b4:	4b4d      	ldr	r3, [pc, #308]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2b6:	789b      	ldrb	r3, [r3, #2]
 800f2b8:	021b      	lsls	r3, r3, #8
 800f2ba:	430b      	orrs	r3, r1
 800f2bc:	494b      	ldr	r1, [pc, #300]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2be:	78c9      	ldrb	r1, [r1, #3]
 800f2c0:	430b      	orrs	r3, r1
 800f2c2:	021b      	lsls	r3, r3, #8
 800f2c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f2c8:	431a      	orrs	r2, r3
 800f2ca:	4b48      	ldr	r3, [pc, #288]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	0619      	lsls	r1, r3, #24
 800f2d0:	4b46      	ldr	r3, [pc, #280]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2d2:	785b      	ldrb	r3, [r3, #1]
 800f2d4:	041b      	lsls	r3, r3, #16
 800f2d6:	4319      	orrs	r1, r3
 800f2d8:	4b44      	ldr	r3, [pc, #272]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2da:	789b      	ldrb	r3, [r3, #2]
 800f2dc:	021b      	lsls	r3, r3, #8
 800f2de:	430b      	orrs	r3, r1
 800f2e0:	4942      	ldr	r1, [pc, #264]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2e2:	78c9      	ldrb	r1, [r1, #3]
 800f2e4:	430b      	orrs	r3, r1
 800f2e6:	0a1b      	lsrs	r3, r3, #8
 800f2e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f2ec:	431a      	orrs	r2, r3
 800f2ee:	4b3f      	ldr	r3, [pc, #252]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	0619      	lsls	r1, r3, #24
 800f2f4:	4b3d      	ldr	r3, [pc, #244]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2f6:	785b      	ldrb	r3, [r3, #1]
 800f2f8:	041b      	lsls	r3, r3, #16
 800f2fa:	4319      	orrs	r1, r3
 800f2fc:	4b3b      	ldr	r3, [pc, #236]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f2fe:	789b      	ldrb	r3, [r3, #2]
 800f300:	021b      	lsls	r3, r3, #8
 800f302:	430b      	orrs	r3, r1
 800f304:	4939      	ldr	r1, [pc, #228]	; (800f3ec <MX_LWIP_Init+0x240>)
 800f306:	78c9      	ldrb	r1, [r1, #3]
 800f308:	430b      	orrs	r3, r1
 800f30a:	0e1b      	lsrs	r3, r3, #24
 800f30c:	4313      	orrs	r3, r2
 800f30e:	4a3a      	ldr	r2, [pc, #232]	; (800f3f8 <MX_LWIP_Init+0x24c>)
 800f310:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f312:	4b37      	ldr	r3, [pc, #220]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	061a      	lsls	r2, r3, #24
 800f318:	4b35      	ldr	r3, [pc, #212]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f31a:	785b      	ldrb	r3, [r3, #1]
 800f31c:	041b      	lsls	r3, r3, #16
 800f31e:	431a      	orrs	r2, r3
 800f320:	4b33      	ldr	r3, [pc, #204]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f322:	789b      	ldrb	r3, [r3, #2]
 800f324:	021b      	lsls	r3, r3, #8
 800f326:	4313      	orrs	r3, r2
 800f328:	4a31      	ldr	r2, [pc, #196]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f32a:	78d2      	ldrb	r2, [r2, #3]
 800f32c:	4313      	orrs	r3, r2
 800f32e:	061a      	lsls	r2, r3, #24
 800f330:	4b2f      	ldr	r3, [pc, #188]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	0619      	lsls	r1, r3, #24
 800f336:	4b2e      	ldr	r3, [pc, #184]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f338:	785b      	ldrb	r3, [r3, #1]
 800f33a:	041b      	lsls	r3, r3, #16
 800f33c:	4319      	orrs	r1, r3
 800f33e:	4b2c      	ldr	r3, [pc, #176]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f340:	789b      	ldrb	r3, [r3, #2]
 800f342:	021b      	lsls	r3, r3, #8
 800f344:	430b      	orrs	r3, r1
 800f346:	492a      	ldr	r1, [pc, #168]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f348:	78c9      	ldrb	r1, [r1, #3]
 800f34a:	430b      	orrs	r3, r1
 800f34c:	021b      	lsls	r3, r3, #8
 800f34e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f352:	431a      	orrs	r2, r3
 800f354:	4b26      	ldr	r3, [pc, #152]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	0619      	lsls	r1, r3, #24
 800f35a:	4b25      	ldr	r3, [pc, #148]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f35c:	785b      	ldrb	r3, [r3, #1]
 800f35e:	041b      	lsls	r3, r3, #16
 800f360:	4319      	orrs	r1, r3
 800f362:	4b23      	ldr	r3, [pc, #140]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f364:	789b      	ldrb	r3, [r3, #2]
 800f366:	021b      	lsls	r3, r3, #8
 800f368:	430b      	orrs	r3, r1
 800f36a:	4921      	ldr	r1, [pc, #132]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f36c:	78c9      	ldrb	r1, [r1, #3]
 800f36e:	430b      	orrs	r3, r1
 800f370:	0a1b      	lsrs	r3, r3, #8
 800f372:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f376:	431a      	orrs	r2, r3
 800f378:	4b1d      	ldr	r3, [pc, #116]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	0619      	lsls	r1, r3, #24
 800f37e:	4b1c      	ldr	r3, [pc, #112]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f380:	785b      	ldrb	r3, [r3, #1]
 800f382:	041b      	lsls	r3, r3, #16
 800f384:	4319      	orrs	r1, r3
 800f386:	4b1a      	ldr	r3, [pc, #104]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f388:	789b      	ldrb	r3, [r3, #2]
 800f38a:	021b      	lsls	r3, r3, #8
 800f38c:	430b      	orrs	r3, r1
 800f38e:	4918      	ldr	r1, [pc, #96]	; (800f3f0 <MX_LWIP_Init+0x244>)
 800f390:	78c9      	ldrb	r1, [r1, #3]
 800f392:	430b      	orrs	r3, r1
 800f394:	0e1b      	lsrs	r3, r3, #24
 800f396:	4313      	orrs	r3, r2
 800f398:	4a18      	ldr	r2, [pc, #96]	; (800f3fc <MX_LWIP_Init+0x250>)
 800f39a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f39c:	4b18      	ldr	r3, [pc, #96]	; (800f400 <MX_LWIP_Init+0x254>)
 800f39e:	9302      	str	r3, [sp, #8]
 800f3a0:	4b18      	ldr	r3, [pc, #96]	; (800f404 <MX_LWIP_Init+0x258>)
 800f3a2:	9301      	str	r3, [sp, #4]
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	4b14      	ldr	r3, [pc, #80]	; (800f3fc <MX_LWIP_Init+0x250>)
 800f3aa:	4a13      	ldr	r2, [pc, #76]	; (800f3f8 <MX_LWIP_Init+0x24c>)
 800f3ac:	4911      	ldr	r1, [pc, #68]	; (800f3f4 <MX_LWIP_Init+0x248>)
 800f3ae:	4816      	ldr	r0, [pc, #88]	; (800f408 <MX_LWIP_Init+0x25c>)
 800f3b0:	f001 f9da 	bl	8010768 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f3b4:	4814      	ldr	r0, [pc, #80]	; (800f408 <MX_LWIP_Init+0x25c>)
 800f3b6:	f001 fb89 	bl	8010acc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f3ba:	4b13      	ldr	r3, [pc, #76]	; (800f408 <MX_LWIP_Init+0x25c>)
 800f3bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f3c0:	089b      	lsrs	r3, r3, #2
 800f3c2:	f003 0301 	and.w	r3, r3, #1
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d003      	beq.n	800f3d4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f3cc:	480e      	ldr	r0, [pc, #56]	; (800f408 <MX_LWIP_Init+0x25c>)
 800f3ce:	f001 fb8d 	bl	8010aec <netif_set_up>
 800f3d2:	e002      	b.n	800f3da <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f3d4:	480c      	ldr	r0, [pc, #48]	; (800f408 <MX_LWIP_Init+0x25c>)
 800f3d6:	f001 fbf5 	bl	8010bc4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f3da:	490c      	ldr	r1, [pc, #48]	; (800f40c <MX_LWIP_Init+0x260>)
 800f3dc:	480a      	ldr	r0, [pc, #40]	; (800f408 <MX_LWIP_Init+0x25c>)
 800f3de:	f001 fc87 	bl	8010cf0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f3e2:	bf00      	nop
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	200007a4 	.word	0x200007a4
 800f3ec:	200007a8 	.word	0x200007a8
 800f3f0:	200007ac 	.word	0x200007ac
 800f3f4:	20000798 	.word	0x20000798
 800f3f8:	2000079c 	.word	0x2000079c
 800f3fc:	200007a0 	.word	0x200007a0
 800f400:	0801a511 	.word	0x0801a511
 800f404:	0800f6c9 	.word	0x0800f6c9
 800f408:	20000764 	.word	0x20000764
 800f40c:	0800f411 	.word	0x0800f411

0800f410 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f418:	bf00      	nop
 800f41a:	370c      	adds	r7, #12
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f42c:	2300      	movs	r3, #0
 800f42e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f430:	4b3f      	ldr	r3, [pc, #252]	; (800f530 <low_level_init+0x10c>)
 800f432:	4a40      	ldr	r2, [pc, #256]	; (800f534 <low_level_init+0x110>)
 800f434:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f436:	2300      	movs	r3, #0
 800f438:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f43a:	2380      	movs	r3, #128	; 0x80
 800f43c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f43e:	23e1      	movs	r3, #225	; 0xe1
 800f440:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f442:	2300      	movs	r3, #0
 800f444:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f446:	2300      	movs	r3, #0
 800f448:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f44a:	2300      	movs	r3, #0
 800f44c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f44e:	4a38      	ldr	r2, [pc, #224]	; (800f530 <low_level_init+0x10c>)
 800f450:	f107 0308 	add.w	r3, r7, #8
 800f454:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f456:	4b36      	ldr	r3, [pc, #216]	; (800f530 <low_level_init+0x10c>)
 800f458:	2201      	movs	r2, #1
 800f45a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f45c:	4b34      	ldr	r3, [pc, #208]	; (800f530 <low_level_init+0x10c>)
 800f45e:	4a36      	ldr	r2, [pc, #216]	; (800f538 <low_level_init+0x114>)
 800f460:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f462:	4b33      	ldr	r3, [pc, #204]	; (800f530 <low_level_init+0x10c>)
 800f464:	4a35      	ldr	r2, [pc, #212]	; (800f53c <low_level_init+0x118>)
 800f466:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f468:	4b31      	ldr	r3, [pc, #196]	; (800f530 <low_level_init+0x10c>)
 800f46a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f46e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f470:	482f      	ldr	r0, [pc, #188]	; (800f530 <low_level_init+0x10c>)
 800f472:	f7f6 ff8f 	bl	8006394 <HAL_ETH_Init>
 800f476:	4603      	mov	r3, r0
 800f478:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f47a:	2238      	movs	r2, #56	; 0x38
 800f47c:	2100      	movs	r1, #0
 800f47e:	4830      	ldr	r0, [pc, #192]	; (800f540 <low_level_init+0x11c>)
 800f480:	f00b ffac 	bl	801b3dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f484:	4b2e      	ldr	r3, [pc, #184]	; (800f540 <low_level_init+0x11c>)
 800f486:	2221      	movs	r2, #33	; 0x21
 800f488:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f48a:	4b2d      	ldr	r3, [pc, #180]	; (800f540 <low_level_init+0x11c>)
 800f48c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f490:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f492:	4b2b      	ldr	r3, [pc, #172]	; (800f540 <low_level_init+0x11c>)
 800f494:	2200      	movs	r2, #0
 800f496:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f498:	482a      	ldr	r0, [pc, #168]	; (800f544 <low_level_init+0x120>)
 800f49a:	f001 f82d 	bl	80104f8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2206      	movs	r2, #6
 800f4a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f4a6:	4b22      	ldr	r3, [pc, #136]	; (800f530 <low_level_init+0x10c>)
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	781a      	ldrb	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f4b2:	4b1f      	ldr	r3, [pc, #124]	; (800f530 <low_level_init+0x10c>)
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	785a      	ldrb	r2, [r3, #1]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f4be:	4b1c      	ldr	r3, [pc, #112]	; (800f530 <low_level_init+0x10c>)
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	789a      	ldrb	r2, [r3, #2]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f4ca:	4b19      	ldr	r3, [pc, #100]	; (800f530 <low_level_init+0x10c>)
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	78da      	ldrb	r2, [r3, #3]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f4d6:	4b16      	ldr	r3, [pc, #88]	; (800f530 <low_level_init+0x10c>)
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	791a      	ldrb	r2, [r3, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f4e2:	4b13      	ldr	r3, [pc, #76]	; (800f530 <low_level_init+0x10c>)
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	795a      	ldrb	r2, [r3, #5]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f4f4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4fc:	f043 030a 	orr.w	r3, r3, #10
 800f500:	b2da      	uxtb	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f508:	490f      	ldr	r1, [pc, #60]	; (800f548 <low_level_init+0x124>)
 800f50a:	4810      	ldr	r0, [pc, #64]	; (800f54c <low_level_init+0x128>)
 800f50c:	f7f4 fc2b 	bl	8003d66 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f510:	480e      	ldr	r0, [pc, #56]	; (800f54c <low_level_init+0x128>)
 800f512:	f7f4 fc5a 	bl	8003dca <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d103      	bne.n	800f524 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 fa3f 	bl	800f9a0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f522:	e001      	b.n	800f528 <low_level_init+0x104>
    Error_Handler();
 800f524:	f7f3 fec8 	bl	80032b8 <Error_Handler>
}
 800f528:	bf00      	nop
 800f52a:	3710      	adds	r7, #16
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	200007b8 	.word	0x200007b8
 800f534:	40028000 	.word	0x40028000
 800f538:	30040060 	.word	0x30040060
 800f53c:	30040000 	.word	0x30040000
 800f540:	20000868 	.word	0x20000868
 800f544:	08020648 	.word	0x08020648
 800f548:	20000148 	.word	0x20000148
 800f54c:	200008a0 	.word	0x200008a0

0800f550 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b092      	sub	sp, #72	; 0x48
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f55a:	2300      	movs	r3, #0
 800f55c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f55e:	2300      	movs	r3, #0
 800f560:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f562:	2300      	movs	r3, #0
 800f564:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f568:	f107 030c 	add.w	r3, r7, #12
 800f56c:	2230      	movs	r2, #48	; 0x30
 800f56e:	2100      	movs	r1, #0
 800f570:	4618      	mov	r0, r3
 800f572:	f00b ff33 	bl	801b3dc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f576:	f107 030c 	add.w	r3, r7, #12
 800f57a:	2230      	movs	r2, #48	; 0x30
 800f57c:	2100      	movs	r1, #0
 800f57e:	4618      	mov	r0, r3
 800f580:	f00b ff2c 	bl	801b3dc <memset>

  for(q = p; q != NULL; q = q->next)
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	643b      	str	r3, [r7, #64]	; 0x40
 800f588:	e045      	b.n	800f616 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f58c:	2b03      	cmp	r3, #3
 800f58e:	d902      	bls.n	800f596 <low_level_output+0x46>
      return ERR_IF;
 800f590:	f06f 030b 	mvn.w	r3, #11
 800f594:	e055      	b.n	800f642 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f598:	6859      	ldr	r1, [r3, #4]
 800f59a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f59c:	4613      	mov	r3, r2
 800f59e:	005b      	lsls	r3, r3, #1
 800f5a0:	4413      	add	r3, r2
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	3348      	adds	r3, #72	; 0x48
 800f5a6:	443b      	add	r3, r7
 800f5a8:	3b3c      	subs	r3, #60	; 0x3c
 800f5aa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ae:	895b      	ldrh	r3, [r3, #10]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5b4:	4613      	mov	r3, r2
 800f5b6:	005b      	lsls	r3, r3, #1
 800f5b8:	4413      	add	r3, r2
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	3348      	adds	r3, #72	; 0x48
 800f5be:	443b      	add	r3, r7
 800f5c0:	3b38      	subs	r3, #56	; 0x38
 800f5c2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f5c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d011      	beq.n	800f5ee <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5cc:	1e5a      	subs	r2, r3, #1
 800f5ce:	f107 000c 	add.w	r0, r7, #12
 800f5d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	005b      	lsls	r3, r3, #1
 800f5d8:	440b      	add	r3, r1
 800f5da:	009b      	lsls	r3, r3, #2
 800f5dc:	18c1      	adds	r1, r0, r3
 800f5de:	4613      	mov	r3, r2
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	4413      	add	r3, r2
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	3348      	adds	r3, #72	; 0x48
 800f5e8:	443b      	add	r3, r7
 800f5ea:	3b34      	subs	r3, #52	; 0x34
 800f5ec:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f5ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d109      	bne.n	800f60a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f5f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	4413      	add	r3, r2
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	3348      	adds	r3, #72	; 0x48
 800f602:	443b      	add	r3, r7
 800f604:	3b34      	subs	r3, #52	; 0x34
 800f606:	2200      	movs	r2, #0
 800f608:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f60c:	3301      	adds	r3, #1
 800f60e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	643b      	str	r3, [r7, #64]	; 0x40
 800f616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1b6      	bne.n	800f58a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	891b      	ldrh	r3, [r3, #8]
 800f620:	461a      	mov	r2, r3
 800f622:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <low_level_output+0xfc>)
 800f624:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f626:	4a09      	ldr	r2, [pc, #36]	; (800f64c <low_level_output+0xfc>)
 800f628:	f107 030c 	add.w	r3, r7, #12
 800f62c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f62e:	4a07      	ldr	r2, [pc, #28]	; (800f64c <low_level_output+0xfc>)
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f634:	2214      	movs	r2, #20
 800f636:	4905      	ldr	r1, [pc, #20]	; (800f64c <low_level_output+0xfc>)
 800f638:	4805      	ldr	r0, [pc, #20]	; (800f650 <low_level_output+0x100>)
 800f63a:	f7f7 f843 	bl	80066c4 <HAL_ETH_Transmit>

  return errval;
 800f63e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f642:	4618      	mov	r0, r3
 800f644:	3748      	adds	r7, #72	; 0x48
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	20000868 	.word	0x20000868
 800f650:	200007b8 	.word	0x200007b8

0800f654 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f65c:	2300      	movs	r3, #0
 800f65e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800f660:	4b07      	ldr	r3, [pc, #28]	; (800f680 <low_level_input+0x2c>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d105      	bne.n	800f674 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800f668:	f107 030c 	add.w	r3, r7, #12
 800f66c:	4619      	mov	r1, r3
 800f66e:	4805      	ldr	r0, [pc, #20]	; (800f684 <low_level_input+0x30>)
 800f670:	f7f7 f8bf 	bl	80067f2 <HAL_ETH_ReadData>
  }

  return p;
 800f674:	68fb      	ldr	r3, [r7, #12]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	200007b4 	.word	0x200007b4
 800f684:	200007b8 	.word	0x200007b8

0800f688 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f690:	2300      	movs	r3, #0
 800f692:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7ff ffdd 	bl	800f654 <low_level_input>
 800f69a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00a      	beq.n	800f6b8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	691b      	ldr	r3, [r3, #16]
 800f6a6:	6879      	ldr	r1, [r7, #4]
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	4798      	blx	r3
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d002      	beq.n	800f6b8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	f001 fe9c 	bl	80113f0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1ea      	bne.n	800f694 <ethernetif_input+0xc>
}
 800f6be:	bf00      	nop
 800f6c0:	bf00      	nop
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d106      	bne.n	800f6e4 <ethernetif_init+0x1c>
 800f6d6:	4b0e      	ldr	r3, [pc, #56]	; (800f710 <ethernetif_init+0x48>)
 800f6d8:	f240 1285 	movw	r2, #389	; 0x185
 800f6dc:	490d      	ldr	r1, [pc, #52]	; (800f714 <ethernetif_init+0x4c>)
 800f6de:	480e      	ldr	r0, [pc, #56]	; (800f718 <ethernetif_init+0x50>)
 800f6e0:	f00b fd26 	bl	801b130 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2273      	movs	r2, #115	; 0x73
 800f6e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2274      	movs	r2, #116	; 0x74
 800f6f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a09      	ldr	r2, [pc, #36]	; (800f71c <ethernetif_init+0x54>)
 800f6f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4a08      	ldr	r2, [pc, #32]	; (800f720 <ethernetif_init+0x58>)
 800f6fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7ff fe8f 	bl	800f424 <low_level_init>

  return ERR_OK;
 800f706:	2300      	movs	r3, #0
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3708      	adds	r7, #8
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	0801dc10 	.word	0x0801dc10
 800f714:	0801dc2c 	.word	0x0801dc2c
 800f718:	0801dc3c 	.word	0x0801dc3c
 800f71c:	0801885d 	.word	0x0801885d
 800f720:	0800f551 	.word	0x0800f551

0800f724 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f730:	68f9      	ldr	r1, [r7, #12]
 800f732:	4807      	ldr	r0, [pc, #28]	; (800f750 <pbuf_free_custom+0x2c>)
 800f734:	f000 ffc2 	bl	80106bc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f738:	4b06      	ldr	r3, [pc, #24]	; (800f754 <pbuf_free_custom+0x30>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d102      	bne.n	800f746 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f740:	4b04      	ldr	r3, [pc, #16]	; (800f754 <pbuf_free_custom+0x30>)
 800f742:	2200      	movs	r2, #0
 800f744:	701a      	strb	r2, [r3, #0]
  }
}
 800f746:	bf00      	nop
 800f748:	3710      	adds	r7, #16
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	08020648 	.word	0x08020648
 800f754:	200007b4 	.word	0x200007b4

0800f758 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f75c:	f7f4 fcea 	bl	8004134 <HAL_GetTick>
 800f760:	4603      	mov	r3, r0
}
 800f762:	4618      	mov	r0, r3
 800f764:	bd80      	pop	{r7, pc}
	...

0800f768 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b08e      	sub	sp, #56	; 0x38
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]
 800f778:	605a      	str	r2, [r3, #4]
 800f77a:	609a      	str	r2, [r3, #8]
 800f77c:	60da      	str	r2, [r3, #12]
 800f77e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a59      	ldr	r2, [pc, #356]	; (800f8ec <HAL_ETH_MspInit+0x184>)
 800f786:	4293      	cmp	r3, r2
 800f788:	f040 80ab 	bne.w	800f8e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f78c:	4b58      	ldr	r3, [pc, #352]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f78e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f792:	4a57      	ldr	r2, [pc, #348]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f798:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f79c:	4b54      	ldr	r3, [pc, #336]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f79e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7a6:	623b      	str	r3, [r7, #32]
 800f7a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f7aa:	4b51      	ldr	r3, [pc, #324]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7b0:	4a4f      	ldr	r2, [pc, #316]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f7b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f7ba:	4b4d      	ldr	r3, [pc, #308]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7c4:	61fb      	str	r3, [r7, #28]
 800f7c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f7c8:	4b49      	ldr	r3, [pc, #292]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7ce:	4a48      	ldr	r2, [pc, #288]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f7d8:	4b45      	ldr	r3, [pc, #276]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7e2:	61bb      	str	r3, [r7, #24]
 800f7e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f7e6:	4b42      	ldr	r3, [pc, #264]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f7ec:	4a40      	ldr	r2, [pc, #256]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7ee:	f043 0304 	orr.w	r3, r3, #4
 800f7f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f7f6:	4b3e      	ldr	r3, [pc, #248]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f7f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f7fc:	f003 0304 	and.w	r3, r3, #4
 800f800:	617b      	str	r3, [r7, #20]
 800f802:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f804:	4b3a      	ldr	r3, [pc, #232]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f80a:	4a39      	ldr	r2, [pc, #228]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f80c:	f043 0301 	orr.w	r3, r3, #1
 800f810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f814:	4b36      	ldr	r3, [pc, #216]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f81a:	f003 0301 	and.w	r3, r3, #1
 800f81e:	613b      	str	r3, [r7, #16]
 800f820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f822:	4b33      	ldr	r3, [pc, #204]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f828:	4a31      	ldr	r2, [pc, #196]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f82a:	f043 0302 	orr.w	r3, r3, #2
 800f82e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f832:	4b2f      	ldr	r3, [pc, #188]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f838:	f003 0302 	and.w	r3, r3, #2
 800f83c:	60fb      	str	r3, [r7, #12]
 800f83e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f840:	4b2b      	ldr	r3, [pc, #172]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f846:	4a2a      	ldr	r2, [pc, #168]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f84c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f850:	4b27      	ldr	r3, [pc, #156]	; (800f8f0 <HAL_ETH_MspInit+0x188>)
 800f852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f85a:	60bb      	str	r3, [r7, #8]
 800f85c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f85e:	2332      	movs	r3, #50	; 0x32
 800f860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f862:	2302      	movs	r3, #2
 800f864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f866:	2300      	movs	r3, #0
 800f868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f86a:	2300      	movs	r3, #0
 800f86c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f86e:	230b      	movs	r3, #11
 800f870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f876:	4619      	mov	r1, r3
 800f878:	481e      	ldr	r0, [pc, #120]	; (800f8f4 <HAL_ETH_MspInit+0x18c>)
 800f87a:	f7f8 f94b 	bl	8007b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f87e:	2386      	movs	r3, #134	; 0x86
 800f880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f882:	2302      	movs	r3, #2
 800f884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f886:	2300      	movs	r3, #0
 800f888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f88a:	2300      	movs	r3, #0
 800f88c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f88e:	230b      	movs	r3, #11
 800f890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f896:	4619      	mov	r1, r3
 800f898:	4817      	ldr	r0, [pc, #92]	; (800f8f8 <HAL_ETH_MspInit+0x190>)
 800f89a:	f7f8 f93b 	bl	8007b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f89e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f8a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8a4:	2302      	movs	r3, #2
 800f8a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f8b0:	230b      	movs	r3, #11
 800f8b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f8b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	4810      	ldr	r0, [pc, #64]	; (800f8fc <HAL_ETH_MspInit+0x194>)
 800f8bc:	f7f8 f92a 	bl	8007b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f8c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f8c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8c6:	2302      	movs	r3, #2
 800f8c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f8d2:	230b      	movs	r3, #11
 800f8d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f8d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8da:	4619      	mov	r1, r3
 800f8dc:	4808      	ldr	r0, [pc, #32]	; (800f900 <HAL_ETH_MspInit+0x198>)
 800f8de:	f7f8 f919 	bl	8007b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f8e2:	bf00      	nop
 800f8e4:	3738      	adds	r7, #56	; 0x38
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	40028000 	.word	0x40028000
 800f8f0:	58024400 	.word	0x58024400
 800f8f4:	58020800 	.word	0x58020800
 800f8f8:	58020000 	.word	0x58020000
 800f8fc:	58020400 	.word	0x58020400
 800f900:	58021800 	.word	0x58021800

0800f904 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f908:	4802      	ldr	r0, [pc, #8]	; (800f914 <ETH_PHY_IO_Init+0x10>)
 800f90a:	f7f7 fb37 	bl	8006f7c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f90e:	2300      	movs	r3, #0
}
 800f910:	4618      	mov	r0, r3
 800f912:	bd80      	pop	{r7, pc}
 800f914:	200007b8 	.word	0x200007b8

0800f918 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f918:	b480      	push	{r7}
 800f91a:	af00      	add	r7, sp, #0
  return 0;
 800f91c:	2300      	movs	r3, #0
}
 800f91e:	4618      	mov	r0, r3
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	68f9      	ldr	r1, [r7, #12]
 800f93a:	4807      	ldr	r0, [pc, #28]	; (800f958 <ETH_PHY_IO_ReadReg+0x30>)
 800f93c:	f7f7 f887 	bl	8006a4e <HAL_ETH_ReadPHYRegister>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d002      	beq.n	800f94c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f946:	f04f 33ff 	mov.w	r3, #4294967295
 800f94a:	e000      	b.n	800f94e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f94c:	2300      	movs	r3, #0
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	200007b8 	.word	0x200007b8

0800f95c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	60b9      	str	r1, [r7, #8]
 800f966:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	68ba      	ldr	r2, [r7, #8]
 800f96c:	68f9      	ldr	r1, [r7, #12]
 800f96e:	4807      	ldr	r0, [pc, #28]	; (800f98c <ETH_PHY_IO_WriteReg+0x30>)
 800f970:	f7f7 f8c2 	bl	8006af8 <HAL_ETH_WritePHYRegister>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d002      	beq.n	800f980 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f97a:	f04f 33ff 	mov.w	r3, #4294967295
 800f97e:	e000      	b.n	800f982 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	200007b8 	.word	0x200007b8

0800f990 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f994:	f7f4 fbce 	bl	8004134 <HAL_GetTick>
 800f998:	4603      	mov	r3, r0
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	bd80      	pop	{r7, pc}
	...

0800f9a0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b0a0      	sub	sp, #128	; 0x80
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f9a8:	f107 030c 	add.w	r3, r7, #12
 800f9ac:	2264      	movs	r2, #100	; 0x64
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f00b fd13 	bl	801b3dc <memset>
  int32_t PHYLinkState = 0;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f9be:	2300      	movs	r3, #0
 800f9c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f9c6:	483a      	ldr	r0, [pc, #232]	; (800fab0 <ethernet_link_check_state+0x110>)
 800f9c8:	f7f4 faa7 	bl	8003f1a <LAN8742_GetLinkState>
 800f9cc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9d4:	089b      	lsrs	r3, r3, #2
 800f9d6:	f003 0301 	and.w	r3, r3, #1
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00c      	beq.n	800f9fa <ethernet_link_check_state+0x5a>
 800f9e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	dc09      	bgt.n	800f9fa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f9e6:	4833      	ldr	r0, [pc, #204]	; (800fab4 <ethernet_link_check_state+0x114>)
 800f9e8:	f7f6 fe1c 	bl	8006624 <HAL_ETH_Stop>
    netif_set_down(netif);
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f001 f8e9 	bl	8010bc4 <netif_set_down>
    netif_set_link_down(netif);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f001 f94c 	bl	8010c90 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f9f8:	e055      	b.n	800faa6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa00:	f003 0304 	and.w	r3, r3, #4
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d14e      	bne.n	800faa6 <ethernet_link_check_state+0x106>
 800fa08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	dd4b      	ble.n	800faa6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800fa0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa10:	3b02      	subs	r3, #2
 800fa12:	2b03      	cmp	r3, #3
 800fa14:	d82a      	bhi.n	800fa6c <ethernet_link_check_state+0xcc>
 800fa16:	a201      	add	r2, pc, #4	; (adr r2, 800fa1c <ethernet_link_check_state+0x7c>)
 800fa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa1c:	0800fa2d 	.word	0x0800fa2d
 800fa20:	0800fa3f 	.word	0x0800fa3f
 800fa24:	0800fa4f 	.word	0x0800fa4f
 800fa28:	0800fa5f 	.word	0x0800fa5f
      duplex = ETH_FULLDUPLEX_MODE;
 800fa2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa30:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fa32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fa36:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fa38:	2301      	movs	r3, #1
 800fa3a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fa3c:	e017      	b.n	800fa6e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fa42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fa46:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fa4c:	e00f      	b.n	800fa6e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800fa4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa52:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fa54:	2300      	movs	r3, #0
 800fa56:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fa5c:	e007      	b.n	800fa6e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fa62:	2300      	movs	r3, #0
 800fa64:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fa66:	2301      	movs	r3, #1
 800fa68:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fa6a:	e000      	b.n	800fa6e <ethernet_link_check_state+0xce>
      break;
 800fa6c:	bf00      	nop
    if(linkchanged)
 800fa6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d018      	beq.n	800faa6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fa74:	f107 030c 	add.w	r3, r7, #12
 800fa78:	4619      	mov	r1, r3
 800fa7a:	480e      	ldr	r0, [pc, #56]	; (800fab4 <ethernet_link_check_state+0x114>)
 800fa7c:	f7f7 f890 	bl	8006ba0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800fa80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa82:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800fa84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa86:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fa88:	f107 030c 	add.w	r3, r7, #12
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	4809      	ldr	r0, [pc, #36]	; (800fab4 <ethernet_link_check_state+0x114>)
 800fa90:	f7f7 fa5a 	bl	8006f48 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800fa94:	4807      	ldr	r0, [pc, #28]	; (800fab4 <ethernet_link_check_state+0x114>)
 800fa96:	f7f6 fd63 	bl	8006560 <HAL_ETH_Start>
      netif_set_up(netif);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f001 f826 	bl	8010aec <netif_set_up>
      netif_set_link_up(netif);
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f001 f8c1 	bl	8010c28 <netif_set_link_up>
}
 800faa6:	bf00      	nop
 800faa8:	3780      	adds	r7, #128	; 0x80
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	200008a0 	.word	0x200008a0
 800fab4:	200007b8 	.word	0x200007b8

0800fab8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800fac0:	4812      	ldr	r0, [pc, #72]	; (800fb0c <HAL_ETH_RxAllocateCallback+0x54>)
 800fac2:	f000 fd8d 	bl	80105e0 <memp_malloc_pool>
 800fac6:	60f8      	str	r0, [r7, #12]
  if (p)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d014      	beq.n	800faf8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f103 0220 	add.w	r2, r3, #32
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	4a0d      	ldr	r2, [pc, #52]	; (800fb10 <HAL_ETH_RxAllocateCallback+0x58>)
 800fadc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800fae6:	9201      	str	r2, [sp, #4]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2241      	movs	r2, #65	; 0x41
 800faee:	2100      	movs	r1, #0
 800faf0:	2000      	movs	r0, #0
 800faf2:	f001 fac5 	bl	8011080 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800faf6:	e005      	b.n	800fb04 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800faf8:	4b06      	ldr	r3, [pc, #24]	; (800fb14 <HAL_ETH_RxAllocateCallback+0x5c>)
 800fafa:	2201      	movs	r2, #1
 800fafc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	601a      	str	r2, [r3, #0]
}
 800fb04:	bf00      	nop
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	08020648 	.word	0x08020648
 800fb10:	0800f725 	.word	0x0800f725
 800fb14:	200007b4 	.word	0x200007b4

0800fb18 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b08d      	sub	sp, #52	; 0x34
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
 800fb24:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	3b20      	subs	r3, #32
 800fb36:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800fb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb40:	2200      	movs	r2, #0
 800fb42:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800fb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb46:	887a      	ldrh	r2, [r7, #2]
 800fb48:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800fb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d103      	bne.n	800fb5a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb56:	601a      	str	r2, [r3, #0]
 800fb58:	e003      	b.n	800fb62 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800fb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb60:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb66:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800fb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb6e:	e009      	b.n	800fb84 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800fb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb72:	891a      	ldrh	r2, [r3, #8]
 800fb74:	887b      	ldrh	r3, [r7, #2]
 800fb76:	4413      	add	r3, r2
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800fb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1f2      	bne.n	800fb70 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800fb8a:	887b      	ldrh	r3, [r7, #2]
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	623a      	str	r2, [r7, #32]
 800fb90:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	dd1d      	ble.n	800fbd4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fb98:	6a3b      	ldr	r3, [r7, #32]
 800fb9a:	f003 021f 	and.w	r2, r3, #31
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	4413      	add	r3, r2
 800fba2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fba4:	6a3b      	ldr	r3, [r7, #32]
 800fba6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800fba8:	f3bf 8f4f 	dsb	sy
}
 800fbac:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fbae:	4a0d      	ldr	r2, [pc, #52]	; (800fbe4 <HAL_ETH_RxLinkCallback+0xcc>)
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	3320      	adds	r3, #32
 800fbba:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	3b20      	subs	r3, #32
 800fbc0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	dcf2      	bgt.n	800fbae <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800fbc8:	f3bf 8f4f 	dsb	sy
}
 800fbcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fbce:	f3bf 8f6f 	isb	sy
}
 800fbd2:	bf00      	nop
}
 800fbd4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800fbd6:	bf00      	nop
 800fbd8:	3734      	adds	r7, #52	; 0x34
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	e000ed00 	.word	0xe000ed00

0800fbe8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	4603      	mov	r3, r0
 800fbf0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fbf2:	88fb      	ldrh	r3, [r7, #6]
 800fbf4:	021b      	lsls	r3, r3, #8
 800fbf6:	b21a      	sxth	r2, r3
 800fbf8:	88fb      	ldrh	r3, [r7, #6]
 800fbfa:	0a1b      	lsrs	r3, r3, #8
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	b21b      	sxth	r3, r3
 800fc00:	4313      	orrs	r3, r2
 800fc02:	b21b      	sxth	r3, r3
 800fc04:	b29b      	uxth	r3, r3
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fc12:	b480      	push	{r7}
 800fc14:	b083      	sub	sp, #12
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	061a      	lsls	r2, r3, #24
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	021b      	lsls	r3, r3, #8
 800fc22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fc26:	431a      	orrs	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	0a1b      	lsrs	r3, r3, #8
 800fc2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fc30:	431a      	orrs	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	0e1b      	lsrs	r3, r3, #24
 800fc36:	4313      	orrs	r3, r2
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b089      	sub	sp, #36	; 0x24
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800fc52:	2300      	movs	r3, #0
 800fc54:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fc56:	2300      	movs	r3, #0
 800fc58:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	f003 0301 	and.w	r3, r3, #1
 800fc60:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d00d      	beq.n	800fc84 <lwip_standard_chksum+0x40>
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	dd0a      	ble.n	800fc84 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fc6e:	69fa      	ldr	r2, [r7, #28]
 800fc70:	1c53      	adds	r3, r2, #1
 800fc72:	61fb      	str	r3, [r7, #28]
 800fc74:	f107 030e 	add.w	r3, r7, #14
 800fc78:	3301      	adds	r3, #1
 800fc7a:	7812      	ldrb	r2, [r2, #0]
 800fc7c:	701a      	strb	r2, [r3, #0]
    len--;
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	3b01      	subs	r3, #1
 800fc82:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fc88:	e00a      	b.n	800fca0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	1c9a      	adds	r2, r3, #2
 800fc8e:	61ba      	str	r2, [r7, #24]
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	4413      	add	r3, r2
 800fc98:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	3b02      	subs	r3, #2
 800fc9e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	dcf1      	bgt.n	800fc8a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	dd04      	ble.n	800fcb6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fcac:	f107 030e 	add.w	r3, r7, #14
 800fcb0:	69ba      	ldr	r2, [r7, #24]
 800fcb2:	7812      	ldrb	r2, [r2, #0]
 800fcb4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800fcb6:	89fb      	ldrh	r3, [r7, #14]
 800fcb8:	461a      	mov	r2, r3
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	0c1a      	lsrs	r2, r3, #16
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	4413      	add	r3, r2
 800fcca:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	0c1a      	lsrs	r2, r3, #16
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	4413      	add	r3, r2
 800fcd6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d007      	beq.n	800fcee <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	021b      	lsls	r3, r3, #8
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	0a1b      	lsrs	r3, r3, #8
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	4313      	orrs	r3, r2
 800fcec:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	b29b      	uxth	r3, r3
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3724      	adds	r7, #36	; 0x24
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr

0800fcfe <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	b082      	sub	sp, #8
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
 800fd06:	460b      	mov	r3, r1
 800fd08:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fd0a:	887b      	ldrh	r3, [r7, #2]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f7ff ff98 	bl	800fc44 <lwip_standard_chksum>
 800fd14:	4603      	mov	r3, r0
 800fd16:	43db      	mvns	r3, r3
 800fd18:	b29b      	uxth	r3, r3
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3708      	adds	r7, #8
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b086      	sub	sp, #24
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	613b      	str	r3, [r7, #16]
 800fd36:	e02b      	b.n	800fd90 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	685a      	ldr	r2, [r3, #4]
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	895b      	ldrh	r3, [r3, #10]
 800fd40:	4619      	mov	r1, r3
 800fd42:	4610      	mov	r0, r2
 800fd44:	f7ff ff7e 	bl	800fc44 <lwip_standard_chksum>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	4413      	add	r3, r2
 800fd50:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	0c1a      	lsrs	r2, r3, #16
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	4413      	add	r3, r2
 800fd5c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	895b      	ldrh	r3, [r3, #10]
 800fd62:	f003 0301 	and.w	r3, r3, #1
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00e      	beq.n	800fd8a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	bf0c      	ite	eq
 800fd72:	2301      	moveq	r3, #1
 800fd74:	2300      	movne	r3, #0
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	021b      	lsls	r3, r3, #8
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	0a1b      	lsrs	r3, r3, #8
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	4313      	orrs	r3, r2
 800fd88:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	613b      	str	r3, [r7, #16]
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d1d0      	bne.n	800fd38 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d007      	beq.n	800fdac <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	021b      	lsls	r3, r3, #8
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	0a1b      	lsrs	r3, r3, #8
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	43db      	mvns	r3, r3
 800fdb2:	b29b      	uxth	r3, r3
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800fdc6:	f000 f8d3 	bl	800ff70 <mem_init>
  memp_init();
 800fdca:	f000 fbc5 	bl	8010558 <memp_init>
  pbuf_init();
  netif_init();
 800fdce:	f000 fcc3 	bl	8010758 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fdd2:	f007 ff3d 	bl	8017c50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fdd6:	f001 fe2b 	bl	8011a30 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fdda:	f007 feaf 	bl	8017b3c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fdde:	bf00      	nop
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
	...

0800fde8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800fdf0:	4b04      	ldr	r3, [pc, #16]	; (800fe04 <ptr_to_mem+0x1c>)
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	4413      	add	r3, r2
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr
 800fe04:	200008d8 	.word	0x200008d8

0800fe08 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fe10:	4b04      	ldr	r3, [pc, #16]	; (800fe24 <mem_to_ptr+0x1c>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	1ad3      	subs	r3, r2, r3
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr
 800fe24:	200008d8 	.word	0x200008d8

0800fe28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fe28:	b590      	push	{r4, r7, lr}
 800fe2a:	b085      	sub	sp, #20
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fe30:	4b45      	ldr	r3, [pc, #276]	; (800ff48 <plug_holes+0x120>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d206      	bcs.n	800fe48 <plug_holes+0x20>
 800fe3a:	4b44      	ldr	r3, [pc, #272]	; (800ff4c <plug_holes+0x124>)
 800fe3c:	f240 12df 	movw	r2, #479	; 0x1df
 800fe40:	4943      	ldr	r1, [pc, #268]	; (800ff50 <plug_holes+0x128>)
 800fe42:	4844      	ldr	r0, [pc, #272]	; (800ff54 <plug_holes+0x12c>)
 800fe44:	f00b f974 	bl	801b130 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fe48:	4b43      	ldr	r3, [pc, #268]	; (800ff58 <plug_holes+0x130>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d306      	bcc.n	800fe60 <plug_holes+0x38>
 800fe52:	4b3e      	ldr	r3, [pc, #248]	; (800ff4c <plug_holes+0x124>)
 800fe54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fe58:	4940      	ldr	r1, [pc, #256]	; (800ff5c <plug_holes+0x134>)
 800fe5a:	483e      	ldr	r0, [pc, #248]	; (800ff54 <plug_holes+0x12c>)
 800fe5c:	f00b f968 	bl	801b130 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	7a1b      	ldrb	r3, [r3, #8]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d006      	beq.n	800fe76 <plug_holes+0x4e>
 800fe68:	4b38      	ldr	r3, [pc, #224]	; (800ff4c <plug_holes+0x124>)
 800fe6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fe6e:	493c      	ldr	r1, [pc, #240]	; (800ff60 <plug_holes+0x138>)
 800fe70:	4838      	ldr	r0, [pc, #224]	; (800ff54 <plug_holes+0x12c>)
 800fe72:	f00b f95d 	bl	801b130 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a3a      	ldr	r2, [pc, #232]	; (800ff64 <plug_holes+0x13c>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d906      	bls.n	800fe8e <plug_holes+0x66>
 800fe80:	4b32      	ldr	r3, [pc, #200]	; (800ff4c <plug_holes+0x124>)
 800fe82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fe86:	4938      	ldr	r1, [pc, #224]	; (800ff68 <plug_holes+0x140>)
 800fe88:	4832      	ldr	r0, [pc, #200]	; (800ff54 <plug_holes+0x12c>)
 800fe8a:	f00b f951 	bl	801b130 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7ff ffa8 	bl	800fde8 <ptr_to_mem>
 800fe98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d024      	beq.n	800feec <plug_holes+0xc4>
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	7a1b      	ldrb	r3, [r3, #8]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d120      	bne.n	800feec <plug_holes+0xc4>
 800feaa:	4b2b      	ldr	r3, [pc, #172]	; (800ff58 <plug_holes+0x130>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68fa      	ldr	r2, [r7, #12]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d01b      	beq.n	800feec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800feb4:	4b2d      	ldr	r3, [pc, #180]	; (800ff6c <plug_holes+0x144>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	429a      	cmp	r2, r3
 800febc:	d102      	bne.n	800fec4 <plug_holes+0x9c>
      lfree = mem;
 800febe:	4a2b      	ldr	r2, [pc, #172]	; (800ff6c <plug_holes+0x144>)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a24      	ldr	r2, [pc, #144]	; (800ff64 <plug_holes+0x13c>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d00a      	beq.n	800feec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4618      	mov	r0, r3
 800fedc:	f7ff ff84 	bl	800fde8 <ptr_to_mem>
 800fee0:	4604      	mov	r4, r0
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff ff90 	bl	800fe08 <mem_to_ptr>
 800fee8:	4603      	mov	r3, r0
 800feea:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7ff ff79 	bl	800fde8 <ptr_to_mem>
 800fef6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fef8:	68ba      	ldr	r2, [r7, #8]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d01f      	beq.n	800ff40 <plug_holes+0x118>
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	7a1b      	ldrb	r3, [r3, #8]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d11b      	bne.n	800ff40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ff08:	4b18      	ldr	r3, [pc, #96]	; (800ff6c <plug_holes+0x144>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d102      	bne.n	800ff18 <plug_holes+0xf0>
      lfree = pmem;
 800ff12:	4a16      	ldr	r2, [pc, #88]	; (800ff6c <plug_holes+0x144>)
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a0f      	ldr	r2, [pc, #60]	; (800ff64 <plug_holes+0x13c>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d00a      	beq.n	800ff40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff ff5a 	bl	800fde8 <ptr_to_mem>
 800ff34:	4604      	mov	r4, r0
 800ff36:	68b8      	ldr	r0, [r7, #8]
 800ff38:	f7ff ff66 	bl	800fe08 <mem_to_ptr>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	6063      	str	r3, [r4, #4]
    }
  }
}
 800ff40:	bf00      	nop
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd90      	pop	{r4, r7, pc}
 800ff48:	200008d8 	.word	0x200008d8
 800ff4c:	0801dc64 	.word	0x0801dc64
 800ff50:	0801dc94 	.word	0x0801dc94
 800ff54:	0801dcac 	.word	0x0801dcac
 800ff58:	200008dc 	.word	0x200008dc
 800ff5c:	0801dcd4 	.word	0x0801dcd4
 800ff60:	0801dcf0 	.word	0x0801dcf0
 800ff64:	0001ffe8 	.word	0x0001ffe8
 800ff68:	0801dd0c 	.word	0x0801dd0c
 800ff6c:	200008e0 	.word	0x200008e0

0800ff70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ff76:	4b14      	ldr	r3, [pc, #80]	; (800ffc8 <mem_init+0x58>)
 800ff78:	4a14      	ldr	r2, [pc, #80]	; (800ffcc <mem_init+0x5c>)
 800ff7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ff7c:	4b12      	ldr	r3, [pc, #72]	; (800ffc8 <mem_init+0x58>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4a12      	ldr	r2, [pc, #72]	; (800ffd0 <mem_init+0x60>)
 800ff86:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ff94:	480e      	ldr	r0, [pc, #56]	; (800ffd0 <mem_init+0x60>)
 800ff96:	f7ff ff27 	bl	800fde8 <ptr_to_mem>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	4a0d      	ldr	r2, [pc, #52]	; (800ffd4 <mem_init+0x64>)
 800ff9e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ffa0:	4b0c      	ldr	r3, [pc, #48]	; (800ffd4 <mem_init+0x64>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ffa8:	4b0a      	ldr	r3, [pc, #40]	; (800ffd4 <mem_init+0x64>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a08      	ldr	r2, [pc, #32]	; (800ffd0 <mem_init+0x60>)
 800ffae:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ffb0:	4b08      	ldr	r3, [pc, #32]	; (800ffd4 <mem_init+0x64>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4a06      	ldr	r2, [pc, #24]	; (800ffd0 <mem_init+0x60>)
 800ffb6:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ffb8:	4b03      	ldr	r3, [pc, #12]	; (800ffc8 <mem_init+0x58>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a06      	ldr	r2, [pc, #24]	; (800ffd8 <mem_init+0x68>)
 800ffbe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ffc0:	bf00      	nop
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	200008d8 	.word	0x200008d8
 800ffcc:	30020000 	.word	0x30020000
 800ffd0:	0001ffe8 	.word	0x0001ffe8
 800ffd4:	200008dc 	.word	0x200008dc
 800ffd8:	200008e0 	.word	0x200008e0

0800ffdc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7ff ff0f 	bl	800fe08 <mem_to_ptr>
 800ffea:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7ff fef9 	bl	800fde8 <ptr_to_mem>
 800fff6:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7ff fef3 	bl	800fde8 <ptr_to_mem>
 8010002:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4a11      	ldr	r2, [pc, #68]	; (8010050 <mem_link_valid+0x74>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d818      	bhi.n	8010040 <mem_link_valid+0x64>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	4a0f      	ldr	r2, [pc, #60]	; (8010050 <mem_link_valid+0x74>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d813      	bhi.n	8010040 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	429a      	cmp	r2, r3
 8010020:	d004      	beq.n	801002c <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	697a      	ldr	r2, [r7, #20]
 8010028:	429a      	cmp	r2, r3
 801002a:	d109      	bne.n	8010040 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801002c:	4b09      	ldr	r3, [pc, #36]	; (8010054 <mem_link_valid+0x78>)
 801002e:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010030:	693a      	ldr	r2, [r7, #16]
 8010032:	429a      	cmp	r2, r3
 8010034:	d006      	beq.n	8010044 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	697a      	ldr	r2, [r7, #20]
 801003c:	429a      	cmp	r2, r3
 801003e:	d001      	beq.n	8010044 <mem_link_valid+0x68>
    return 0;
 8010040:	2300      	movs	r3, #0
 8010042:	e000      	b.n	8010046 <mem_link_valid+0x6a>
  }
  return 1;
 8010044:	2301      	movs	r3, #1
}
 8010046:	4618      	mov	r0, r3
 8010048:	3718      	adds	r7, #24
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	0001ffe8 	.word	0x0001ffe8
 8010054:	200008dc 	.word	0x200008dc

08010058 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d04c      	beq.n	8010100 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f003 0303 	and.w	r3, r3, #3
 801006c:	2b00      	cmp	r3, #0
 801006e:	d007      	beq.n	8010080 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010070:	4b25      	ldr	r3, [pc, #148]	; (8010108 <mem_free+0xb0>)
 8010072:	f240 2273 	movw	r2, #627	; 0x273
 8010076:	4925      	ldr	r1, [pc, #148]	; (801010c <mem_free+0xb4>)
 8010078:	4825      	ldr	r0, [pc, #148]	; (8010110 <mem_free+0xb8>)
 801007a:	f00b f859 	bl	801b130 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801007e:	e040      	b.n	8010102 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	3b0c      	subs	r3, #12
 8010084:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010086:	4b23      	ldr	r3, [pc, #140]	; (8010114 <mem_free+0xbc>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	429a      	cmp	r2, r3
 801008e:	d306      	bcc.n	801009e <mem_free+0x46>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f103 020c 	add.w	r2, r3, #12
 8010096:	4b20      	ldr	r3, [pc, #128]	; (8010118 <mem_free+0xc0>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	429a      	cmp	r2, r3
 801009c:	d907      	bls.n	80100ae <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801009e:	4b1a      	ldr	r3, [pc, #104]	; (8010108 <mem_free+0xb0>)
 80100a0:	f240 227f 	movw	r2, #639	; 0x27f
 80100a4:	491d      	ldr	r1, [pc, #116]	; (801011c <mem_free+0xc4>)
 80100a6:	481a      	ldr	r0, [pc, #104]	; (8010110 <mem_free+0xb8>)
 80100a8:	f00b f842 	bl	801b130 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80100ac:	e029      	b.n	8010102 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	7a1b      	ldrb	r3, [r3, #8]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d107      	bne.n	80100c6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80100b6:	4b14      	ldr	r3, [pc, #80]	; (8010108 <mem_free+0xb0>)
 80100b8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80100bc:	4918      	ldr	r1, [pc, #96]	; (8010120 <mem_free+0xc8>)
 80100be:	4814      	ldr	r0, [pc, #80]	; (8010110 <mem_free+0xb8>)
 80100c0:	f00b f836 	bl	801b130 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80100c4:	e01d      	b.n	8010102 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f7ff ff88 	bl	800ffdc <mem_link_valid>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d107      	bne.n	80100e2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80100d2:	4b0d      	ldr	r3, [pc, #52]	; (8010108 <mem_free+0xb0>)
 80100d4:	f240 2295 	movw	r2, #661	; 0x295
 80100d8:	4912      	ldr	r1, [pc, #72]	; (8010124 <mem_free+0xcc>)
 80100da:	480d      	ldr	r0, [pc, #52]	; (8010110 <mem_free+0xb8>)
 80100dc:	f00b f828 	bl	801b130 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80100e0:	e00f      	b.n	8010102 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2200      	movs	r2, #0
 80100e6:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 80100e8:	4b0f      	ldr	r3, [pc, #60]	; (8010128 <mem_free+0xd0>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d202      	bcs.n	80100f8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80100f2:	4a0d      	ldr	r2, [pc, #52]	; (8010128 <mem_free+0xd0>)
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f7ff fe95 	bl	800fe28 <plug_holes>
 80100fe:	e000      	b.n	8010102 <mem_free+0xaa>
    return;
 8010100:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8010102:	3710      	adds	r7, #16
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	0801dc64 	.word	0x0801dc64
 801010c:	0801dd38 	.word	0x0801dd38
 8010110:	0801dcac 	.word	0x0801dcac
 8010114:	200008d8 	.word	0x200008d8
 8010118:	200008dc 	.word	0x200008dc
 801011c:	0801dd5c 	.word	0x0801dd5c
 8010120:	0801dd78 	.word	0x0801dd78
 8010124:	0801dda0 	.word	0x0801dda0
 8010128:	200008e0 	.word	0x200008e0

0801012c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b08a      	sub	sp, #40	; 0x28
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	3303      	adds	r3, #3
 801013a:	f023 0303 	bic.w	r3, r3, #3
 801013e:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	2b0b      	cmp	r3, #11
 8010144:	d801      	bhi.n	801014a <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010146:	230c      	movs	r3, #12
 8010148:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	4a68      	ldr	r2, [pc, #416]	; (80102f0 <mem_trim+0x1c4>)
 801014e:	4293      	cmp	r3, r2
 8010150:	d803      	bhi.n	801015a <mem_trim+0x2e>
 8010152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	429a      	cmp	r2, r3
 8010158:	d201      	bcs.n	801015e <mem_trim+0x32>
    return NULL;
 801015a:	2300      	movs	r3, #0
 801015c:	e0c4      	b.n	80102e8 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801015e:	4b65      	ldr	r3, [pc, #404]	; (80102f4 <mem_trim+0x1c8>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	429a      	cmp	r2, r3
 8010166:	d304      	bcc.n	8010172 <mem_trim+0x46>
 8010168:	4b63      	ldr	r3, [pc, #396]	; (80102f8 <mem_trim+0x1cc>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	429a      	cmp	r2, r3
 8010170:	d306      	bcc.n	8010180 <mem_trim+0x54>
 8010172:	4b62      	ldr	r3, [pc, #392]	; (80102fc <mem_trim+0x1d0>)
 8010174:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010178:	4961      	ldr	r1, [pc, #388]	; (8010300 <mem_trim+0x1d4>)
 801017a:	4862      	ldr	r0, [pc, #392]	; (8010304 <mem_trim+0x1d8>)
 801017c:	f00a ffd8 	bl	801b130 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010180:	4b5c      	ldr	r3, [pc, #368]	; (80102f4 <mem_trim+0x1c8>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	429a      	cmp	r2, r3
 8010188:	d304      	bcc.n	8010194 <mem_trim+0x68>
 801018a:	4b5b      	ldr	r3, [pc, #364]	; (80102f8 <mem_trim+0x1cc>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	429a      	cmp	r2, r3
 8010192:	d301      	bcc.n	8010198 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	e0a7      	b.n	80102e8 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3b0c      	subs	r3, #12
 801019c:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801019e:	6a38      	ldr	r0, [r7, #32]
 80101a0:	f7ff fe32 	bl	800fe08 <mem_to_ptr>
 80101a4:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	1ad3      	subs	r3, r2, r3
 80101ae:	3b0c      	subs	r3, #12
 80101b0:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80101b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101b4:	69bb      	ldr	r3, [r7, #24]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d906      	bls.n	80101c8 <mem_trim+0x9c>
 80101ba:	4b50      	ldr	r3, [pc, #320]	; (80102fc <mem_trim+0x1d0>)
 80101bc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80101c0:	4951      	ldr	r1, [pc, #324]	; (8010308 <mem_trim+0x1dc>)
 80101c2:	4850      	ldr	r0, [pc, #320]	; (8010304 <mem_trim+0x1d8>)
 80101c4:	f00a ffb4 	bl	801b130 <iprintf>
  if (newsize > size) {
 80101c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d901      	bls.n	80101d4 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80101d0:	2300      	movs	r3, #0
 80101d2:	e089      	b.n	80102e8 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 80101d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d101      	bne.n	80101e0 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	e083      	b.n	80102e8 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7ff fdff 	bl	800fde8 <ptr_to_mem>
 80101ea:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	7a1b      	ldrb	r3, [r3, #8]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d13c      	bne.n	801026e <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80101f4:	6a3b      	ldr	r3, [r7, #32]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4a3d      	ldr	r2, [pc, #244]	; (80102f0 <mem_trim+0x1c4>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d106      	bne.n	801020c <mem_trim+0xe0>
 80101fe:	4b3f      	ldr	r3, [pc, #252]	; (80102fc <mem_trim+0x1d0>)
 8010200:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010204:	4941      	ldr	r1, [pc, #260]	; (801030c <mem_trim+0x1e0>)
 8010206:	483f      	ldr	r0, [pc, #252]	; (8010304 <mem_trim+0x1d8>)
 8010208:	f00a ff92 	bl	801b130 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010212:	69fa      	ldr	r2, [r7, #28]
 8010214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010216:	4413      	add	r3, r2
 8010218:	330c      	adds	r3, #12
 801021a:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 801021c:	4b3c      	ldr	r3, [pc, #240]	; (8010310 <mem_trim+0x1e4>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	697a      	ldr	r2, [r7, #20]
 8010222:	429a      	cmp	r2, r3
 8010224:	d105      	bne.n	8010232 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 8010226:	6938      	ldr	r0, [r7, #16]
 8010228:	f7ff fdde 	bl	800fde8 <ptr_to_mem>
 801022c:	4603      	mov	r3, r0
 801022e:	4a38      	ldr	r2, [pc, #224]	; (8010310 <mem_trim+0x1e4>)
 8010230:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010232:	6938      	ldr	r0, [r7, #16]
 8010234:	f7ff fdd8 	bl	800fde8 <ptr_to_mem>
 8010238:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	2200      	movs	r2, #0
 801023e:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	69fa      	ldr	r2, [r7, #28]
 801024a:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 801024c:	6a3b      	ldr	r3, [r7, #32]
 801024e:	693a      	ldr	r2, [r7, #16]
 8010250:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4a26      	ldr	r2, [pc, #152]	; (80102f0 <mem_trim+0x1c4>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d044      	beq.n	80102e6 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff fdc1 	bl	800fde8 <ptr_to_mem>
 8010266:	4602      	mov	r2, r0
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	6053      	str	r3, [r2, #4]
 801026c:	e03b      	b.n	80102e6 <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801026e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010270:	3318      	adds	r3, #24
 8010272:	69ba      	ldr	r2, [r7, #24]
 8010274:	429a      	cmp	r2, r3
 8010276:	d336      	bcc.n	80102e6 <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010278:	69fa      	ldr	r2, [r7, #28]
 801027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027c:	4413      	add	r3, r2
 801027e:	330c      	adds	r3, #12
 8010280:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010282:	6a3b      	ldr	r3, [r7, #32]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a1a      	ldr	r2, [pc, #104]	; (80102f0 <mem_trim+0x1c4>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d106      	bne.n	801029a <mem_trim+0x16e>
 801028c:	4b1b      	ldr	r3, [pc, #108]	; (80102fc <mem_trim+0x1d0>)
 801028e:	f240 3216 	movw	r2, #790	; 0x316
 8010292:	491e      	ldr	r1, [pc, #120]	; (801030c <mem_trim+0x1e0>)
 8010294:	481b      	ldr	r0, [pc, #108]	; (8010304 <mem_trim+0x1d8>)
 8010296:	f00a ff4b 	bl	801b130 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801029a:	6938      	ldr	r0, [r7, #16]
 801029c:	f7ff fda4 	bl	800fde8 <ptr_to_mem>
 80102a0:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 80102a2:	4b1b      	ldr	r3, [pc, #108]	; (8010310 <mem_trim+0x1e4>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d202      	bcs.n	80102b2 <mem_trim+0x186>
      lfree = mem2;
 80102ac:	4a18      	ldr	r2, [pc, #96]	; (8010310 <mem_trim+0x1e4>)
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	2200      	movs	r2, #0
 80102b6:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 80102b8:	6a3b      	ldr	r3, [r7, #32]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	69fa      	ldr	r2, [r7, #28]
 80102c4:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 80102c6:	6a3b      	ldr	r3, [r7, #32]
 80102c8:	693a      	ldr	r2, [r7, #16]
 80102ca:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	4a07      	ldr	r2, [pc, #28]	; (80102f0 <mem_trim+0x1c4>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d007      	beq.n	80102e6 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4618      	mov	r0, r3
 80102dc:	f7ff fd84 	bl	800fde8 <ptr_to_mem>
 80102e0:	4602      	mov	r2, r0
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80102e6:	687b      	ldr	r3, [r7, #4]
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3728      	adds	r7, #40	; 0x28
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	0001ffe8 	.word	0x0001ffe8
 80102f4:	200008d8 	.word	0x200008d8
 80102f8:	200008dc 	.word	0x200008dc
 80102fc:	0801dc64 	.word	0x0801dc64
 8010300:	0801ddd4 	.word	0x0801ddd4
 8010304:	0801dcac 	.word	0x0801dcac
 8010308:	0801ddec 	.word	0x0801ddec
 801030c:	0801de0c 	.word	0x0801de0c
 8010310:	200008e0 	.word	0x200008e0

08010314 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d101      	bne.n	8010326 <mem_malloc+0x12>
    return NULL;
 8010322:	2300      	movs	r3, #0
 8010324:	e0d0      	b.n	80104c8 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	3303      	adds	r3, #3
 801032a:	f023 0303 	bic.w	r3, r3, #3
 801032e:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	2b0b      	cmp	r3, #11
 8010334:	d801      	bhi.n	801033a <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010336:	230c      	movs	r3, #12
 8010338:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	4a64      	ldr	r2, [pc, #400]	; (80104d0 <mem_malloc+0x1bc>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d803      	bhi.n	801034a <mem_malloc+0x36>
 8010342:	69ba      	ldr	r2, [r7, #24]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	429a      	cmp	r2, r3
 8010348:	d201      	bcs.n	801034e <mem_malloc+0x3a>
    return NULL;
 801034a:	2300      	movs	r3, #0
 801034c:	e0bc      	b.n	80104c8 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801034e:	4b61      	ldr	r3, [pc, #388]	; (80104d4 <mem_malloc+0x1c0>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4618      	mov	r0, r3
 8010354:	f7ff fd58 	bl	800fe08 <mem_to_ptr>
 8010358:	61f8      	str	r0, [r7, #28]
 801035a:	e0ad      	b.n	80104b8 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801035c:	69f8      	ldr	r0, [r7, #28]
 801035e:	f7ff fd43 	bl	800fde8 <ptr_to_mem>
 8010362:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	7a1b      	ldrb	r3, [r3, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	f040 809f 	bne.w	80104ac <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	1ad3      	subs	r3, r2, r3
 8010376:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8010378:	69ba      	ldr	r2, [r7, #24]
 801037a:	429a      	cmp	r2, r3
 801037c:	f200 8096 	bhi.w	80104ac <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	f1a3 020c 	sub.w	r2, r3, #12
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	3318      	adds	r3, #24
 8010390:	429a      	cmp	r2, r3
 8010392:	d331      	bcc.n	80103f8 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010394:	69fa      	ldr	r2, [r7, #28]
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	4413      	add	r3, r2
 801039a:	330c      	adds	r3, #12
 801039c:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	4a4b      	ldr	r2, [pc, #300]	; (80104d0 <mem_malloc+0x1bc>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d106      	bne.n	80103b4 <mem_malloc+0xa0>
 80103a6:	4b4c      	ldr	r3, [pc, #304]	; (80104d8 <mem_malloc+0x1c4>)
 80103a8:	f240 3287 	movw	r2, #903	; 0x387
 80103ac:	494b      	ldr	r1, [pc, #300]	; (80104dc <mem_malloc+0x1c8>)
 80103ae:	484c      	ldr	r0, [pc, #304]	; (80104e0 <mem_malloc+0x1cc>)
 80103b0:	f00a febe 	bl	801b130 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f7ff fd17 	bl	800fde8 <ptr_to_mem>
 80103ba:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	2200      	movs	r2, #0
 80103c0:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	69fa      	ldr	r2, [r7, #28]
 80103ce:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	2201      	movs	r2, #1
 80103da:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a3b      	ldr	r2, [pc, #236]	; (80104d0 <mem_malloc+0x1bc>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d00b      	beq.n	80103fe <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7ff fcfc 	bl	800fde8 <ptr_to_mem>
 80103f0:	4602      	mov	r2, r0
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	6053      	str	r3, [r2, #4]
 80103f6:	e002      	b.n	80103fe <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	2201      	movs	r2, #1
 80103fc:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80103fe:	4b35      	ldr	r3, [pc, #212]	; (80104d4 <mem_malloc+0x1c0>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	693a      	ldr	r2, [r7, #16]
 8010404:	429a      	cmp	r2, r3
 8010406:	d127      	bne.n	8010458 <mem_malloc+0x144>
          struct mem *cur = lfree;
 8010408:	4b32      	ldr	r3, [pc, #200]	; (80104d4 <mem_malloc+0x1c0>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801040e:	e005      	b.n	801041c <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fce7 	bl	800fde8 <ptr_to_mem>
 801041a:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	7a1b      	ldrb	r3, [r3, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d004      	beq.n	801042e <mem_malloc+0x11a>
 8010424:	4b2f      	ldr	r3, [pc, #188]	; (80104e4 <mem_malloc+0x1d0>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	697a      	ldr	r2, [r7, #20]
 801042a:	429a      	cmp	r2, r3
 801042c:	d1f0      	bne.n	8010410 <mem_malloc+0xfc>
          }
          lfree = cur;
 801042e:	4a29      	ldr	r2, [pc, #164]	; (80104d4 <mem_malloc+0x1c0>)
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010434:	4b27      	ldr	r3, [pc, #156]	; (80104d4 <mem_malloc+0x1c0>)
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	4b2a      	ldr	r3, [pc, #168]	; (80104e4 <mem_malloc+0x1d0>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	429a      	cmp	r2, r3
 801043e:	d00b      	beq.n	8010458 <mem_malloc+0x144>
 8010440:	4b24      	ldr	r3, [pc, #144]	; (80104d4 <mem_malloc+0x1c0>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	7a1b      	ldrb	r3, [r3, #8]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d006      	beq.n	8010458 <mem_malloc+0x144>
 801044a:	4b23      	ldr	r3, [pc, #140]	; (80104d8 <mem_malloc+0x1c4>)
 801044c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010450:	4925      	ldr	r1, [pc, #148]	; (80104e8 <mem_malloc+0x1d4>)
 8010452:	4823      	ldr	r0, [pc, #140]	; (80104e0 <mem_malloc+0x1cc>)
 8010454:	f00a fe6c 	bl	801b130 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010458:	693a      	ldr	r2, [r7, #16]
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	4413      	add	r3, r2
 801045e:	330c      	adds	r3, #12
 8010460:	4a20      	ldr	r2, [pc, #128]	; (80104e4 <mem_malloc+0x1d0>)
 8010462:	6812      	ldr	r2, [r2, #0]
 8010464:	4293      	cmp	r3, r2
 8010466:	d906      	bls.n	8010476 <mem_malloc+0x162>
 8010468:	4b1b      	ldr	r3, [pc, #108]	; (80104d8 <mem_malloc+0x1c4>)
 801046a:	f240 32b9 	movw	r2, #953	; 0x3b9
 801046e:	491f      	ldr	r1, [pc, #124]	; (80104ec <mem_malloc+0x1d8>)
 8010470:	481b      	ldr	r0, [pc, #108]	; (80104e0 <mem_malloc+0x1cc>)
 8010472:	f00a fe5d 	bl	801b130 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	f003 0303 	and.w	r3, r3, #3
 801047c:	2b00      	cmp	r3, #0
 801047e:	d006      	beq.n	801048e <mem_malloc+0x17a>
 8010480:	4b15      	ldr	r3, [pc, #84]	; (80104d8 <mem_malloc+0x1c4>)
 8010482:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010486:	491a      	ldr	r1, [pc, #104]	; (80104f0 <mem_malloc+0x1dc>)
 8010488:	4815      	ldr	r0, [pc, #84]	; (80104e0 <mem_malloc+0x1cc>)
 801048a:	f00a fe51 	bl	801b130 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	f003 0303 	and.w	r3, r3, #3
 8010494:	2b00      	cmp	r3, #0
 8010496:	d006      	beq.n	80104a6 <mem_malloc+0x192>
 8010498:	4b0f      	ldr	r3, [pc, #60]	; (80104d8 <mem_malloc+0x1c4>)
 801049a:	f240 32bd 	movw	r2, #957	; 0x3bd
 801049e:	4915      	ldr	r1, [pc, #84]	; (80104f4 <mem_malloc+0x1e0>)
 80104a0:	480f      	ldr	r0, [pc, #60]	; (80104e0 <mem_malloc+0x1cc>)
 80104a2:	f00a fe45 	bl	801b130 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	330c      	adds	r3, #12
 80104aa:	e00d      	b.n	80104c8 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 80104ac:	69f8      	ldr	r0, [r7, #28]
 80104ae:	f7ff fc9b 	bl	800fde8 <ptr_to_mem>
 80104b2:	4603      	mov	r3, r0
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80104b8:	69ba      	ldr	r2, [r7, #24]
 80104ba:	4b05      	ldr	r3, [pc, #20]	; (80104d0 <mem_malloc+0x1bc>)
 80104bc:	1a9b      	subs	r3, r3, r2
 80104be:	69fa      	ldr	r2, [r7, #28]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	f4ff af4b 	bcc.w	801035c <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3720      	adds	r7, #32
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	0001ffe8 	.word	0x0001ffe8
 80104d4:	200008e0 	.word	0x200008e0
 80104d8:	0801dc64 	.word	0x0801dc64
 80104dc:	0801de0c 	.word	0x0801de0c
 80104e0:	0801dcac 	.word	0x0801dcac
 80104e4:	200008dc 	.word	0x200008dc
 80104e8:	0801de20 	.word	0x0801de20
 80104ec:	0801de3c 	.word	0x0801de3c
 80104f0:	0801de6c 	.word	0x0801de6c
 80104f4:	0801de9c 	.word	0x0801de9c

080104f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	2200      	movs	r2, #0
 8010506:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	3303      	adds	r3, #3
 801050e:	f023 0303 	bic.w	r3, r3, #3
 8010512:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010514:	2300      	movs	r3, #0
 8010516:	60fb      	str	r3, [r7, #12]
 8010518:	e011      	b.n	801053e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	68ba      	ldr	r2, [r7, #8]
 801052a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	881b      	ldrh	r3, [r3, #0]
 8010530:	461a      	mov	r2, r3
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	4413      	add	r3, r2
 8010536:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	3301      	adds	r3, #1
 801053c:	60fb      	str	r3, [r7, #12]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	885b      	ldrh	r3, [r3, #2]
 8010542:	461a      	mov	r2, r3
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	4293      	cmp	r3, r2
 8010548:	dbe7      	blt.n	801051a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801054a:	bf00      	nop
 801054c:	bf00      	nop
 801054e:	3714      	adds	r7, #20
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801055e:	2300      	movs	r3, #0
 8010560:	80fb      	strh	r3, [r7, #6]
 8010562:	e009      	b.n	8010578 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010564:	88fb      	ldrh	r3, [r7, #6]
 8010566:	4a08      	ldr	r2, [pc, #32]	; (8010588 <memp_init+0x30>)
 8010568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff ffc3 	bl	80104f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010572:	88fb      	ldrh	r3, [r7, #6]
 8010574:	3301      	adds	r3, #1
 8010576:	80fb      	strh	r3, [r7, #6]
 8010578:	88fb      	ldrh	r3, [r7, #6]
 801057a:	2b08      	cmp	r3, #8
 801057c:	d9f2      	bls.n	8010564 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801057e:	bf00      	nop
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	080206c0 	.word	0x080206c0

0801058c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	689b      	ldr	r3, [r3, #8]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d012      	beq.n	80105c8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	6812      	ldr	r2, [r2, #0]
 80105aa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f003 0303 	and.w	r3, r3, #3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d006      	beq.n	80105c4 <do_memp_malloc_pool+0x38>
 80105b6:	4b07      	ldr	r3, [pc, #28]	; (80105d4 <do_memp_malloc_pool+0x48>)
 80105b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80105bc:	4906      	ldr	r1, [pc, #24]	; (80105d8 <do_memp_malloc_pool+0x4c>)
 80105be:	4807      	ldr	r0, [pc, #28]	; (80105dc <do_memp_malloc_pool+0x50>)
 80105c0:	f00a fdb6 	bl	801b130 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	e000      	b.n	80105ca <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80105c8:	2300      	movs	r3, #0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	0801dec0 	.word	0x0801dec0
 80105d8:	0801def0 	.word	0x0801def0
 80105dc:	0801df14 	.word	0x0801df14

080105e0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d106      	bne.n	80105fc <memp_malloc_pool+0x1c>
 80105ee:	4b0a      	ldr	r3, [pc, #40]	; (8010618 <memp_malloc_pool+0x38>)
 80105f0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80105f4:	4909      	ldr	r1, [pc, #36]	; (801061c <memp_malloc_pool+0x3c>)
 80105f6:	480a      	ldr	r0, [pc, #40]	; (8010620 <memp_malloc_pool+0x40>)
 80105f8:	f00a fd9a 	bl	801b130 <iprintf>
  if (desc == NULL) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d101      	bne.n	8010606 <memp_malloc_pool+0x26>
    return NULL;
 8010602:	2300      	movs	r3, #0
 8010604:	e003      	b.n	801060e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f7ff ffc0 	bl	801058c <do_memp_malloc_pool>
 801060c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801060e:	4618      	mov	r0, r3
 8010610:	3708      	adds	r7, #8
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	0801dec0 	.word	0x0801dec0
 801061c:	0801df3c 	.word	0x0801df3c
 8010620:	0801df14 	.word	0x0801df14

08010624 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	4603      	mov	r3, r0
 801062c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801062e:	79fb      	ldrb	r3, [r7, #7]
 8010630:	2b08      	cmp	r3, #8
 8010632:	d908      	bls.n	8010646 <memp_malloc+0x22>
 8010634:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <memp_malloc+0x3c>)
 8010636:	f240 1257 	movw	r2, #343	; 0x157
 801063a:	490a      	ldr	r1, [pc, #40]	; (8010664 <memp_malloc+0x40>)
 801063c:	480a      	ldr	r0, [pc, #40]	; (8010668 <memp_malloc+0x44>)
 801063e:	f00a fd77 	bl	801b130 <iprintf>
 8010642:	2300      	movs	r3, #0
 8010644:	e008      	b.n	8010658 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010646:	79fb      	ldrb	r3, [r7, #7]
 8010648:	4a08      	ldr	r2, [pc, #32]	; (801066c <memp_malloc+0x48>)
 801064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff ff9c 	bl	801058c <do_memp_malloc_pool>
 8010654:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010656:	68fb      	ldr	r3, [r7, #12]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	0801dec0 	.word	0x0801dec0
 8010664:	0801df50 	.word	0x0801df50
 8010668:	0801df14 	.word	0x0801df14
 801066c:	080206c0 	.word	0x080206c0

08010670 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	f003 0303 	and.w	r3, r3, #3
 8010680:	2b00      	cmp	r3, #0
 8010682:	d006      	beq.n	8010692 <do_memp_free_pool+0x22>
 8010684:	4b0a      	ldr	r3, [pc, #40]	; (80106b0 <do_memp_free_pool+0x40>)
 8010686:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801068a:	490a      	ldr	r1, [pc, #40]	; (80106b4 <do_memp_free_pool+0x44>)
 801068c:	480a      	ldr	r0, [pc, #40]	; (80106b8 <do_memp_free_pool+0x48>)
 801068e:	f00a fd4f 	bl	801b130 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	68fa      	ldr	r2, [r7, #12]
 80106a6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80106a8:	bf00      	nop
 80106aa:	3710      	adds	r7, #16
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	0801dec0 	.word	0x0801dec0
 80106b4:	0801df70 	.word	0x0801df70
 80106b8:	0801df14 	.word	0x0801df14

080106bc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d106      	bne.n	80106da <memp_free_pool+0x1e>
 80106cc:	4b0a      	ldr	r3, [pc, #40]	; (80106f8 <memp_free_pool+0x3c>)
 80106ce:	f240 1295 	movw	r2, #405	; 0x195
 80106d2:	490a      	ldr	r1, [pc, #40]	; (80106fc <memp_free_pool+0x40>)
 80106d4:	480a      	ldr	r0, [pc, #40]	; (8010700 <memp_free_pool+0x44>)
 80106d6:	f00a fd2b 	bl	801b130 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d007      	beq.n	80106f0 <memp_free_pool+0x34>
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d004      	beq.n	80106f0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80106e6:	6839      	ldr	r1, [r7, #0]
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7ff ffc1 	bl	8010670 <do_memp_free_pool>
 80106ee:	e000      	b.n	80106f2 <memp_free_pool+0x36>
    return;
 80106f0:	bf00      	nop
}
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	0801dec0 	.word	0x0801dec0
 80106fc:	0801df3c 	.word	0x0801df3c
 8010700:	0801df14 	.word	0x0801df14

08010704 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	4603      	mov	r3, r0
 801070c:	6039      	str	r1, [r7, #0]
 801070e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010710:	79fb      	ldrb	r3, [r7, #7]
 8010712:	2b08      	cmp	r3, #8
 8010714:	d907      	bls.n	8010726 <memp_free+0x22>
 8010716:	4b0c      	ldr	r3, [pc, #48]	; (8010748 <memp_free+0x44>)
 8010718:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801071c:	490b      	ldr	r1, [pc, #44]	; (801074c <memp_free+0x48>)
 801071e:	480c      	ldr	r0, [pc, #48]	; (8010750 <memp_free+0x4c>)
 8010720:	f00a fd06 	bl	801b130 <iprintf>
 8010724:	e00c      	b.n	8010740 <memp_free+0x3c>

  if (mem == NULL) {
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d008      	beq.n	801073e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801072c:	79fb      	ldrb	r3, [r7, #7]
 801072e:	4a09      	ldr	r2, [pc, #36]	; (8010754 <memp_free+0x50>)
 8010730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010734:	6839      	ldr	r1, [r7, #0]
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff ff9a 	bl	8010670 <do_memp_free_pool>
 801073c:	e000      	b.n	8010740 <memp_free+0x3c>
    return;
 801073e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010740:	3708      	adds	r7, #8
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	0801dec0 	.word	0x0801dec0
 801074c:	0801df90 	.word	0x0801df90
 8010750:	0801df14 	.word	0x0801df14
 8010754:	080206c0 	.word	0x080206c0

08010758 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010758:	b480      	push	{r7}
 801075a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801075c:	bf00      	nop
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
	...

08010768 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b086      	sub	sp, #24
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	607a      	str	r2, [r7, #4]
 8010774:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d108      	bne.n	801078e <netif_add+0x26>
 801077c:	4b57      	ldr	r3, [pc, #348]	; (80108dc <netif_add+0x174>)
 801077e:	f240 1227 	movw	r2, #295	; 0x127
 8010782:	4957      	ldr	r1, [pc, #348]	; (80108e0 <netif_add+0x178>)
 8010784:	4857      	ldr	r0, [pc, #348]	; (80108e4 <netif_add+0x17c>)
 8010786:	f00a fcd3 	bl	801b130 <iprintf>
 801078a:	2300      	movs	r3, #0
 801078c:	e0a2      	b.n	80108d4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	2b00      	cmp	r3, #0
 8010792:	d108      	bne.n	80107a6 <netif_add+0x3e>
 8010794:	4b51      	ldr	r3, [pc, #324]	; (80108dc <netif_add+0x174>)
 8010796:	f44f 7294 	mov.w	r2, #296	; 0x128
 801079a:	4953      	ldr	r1, [pc, #332]	; (80108e8 <netif_add+0x180>)
 801079c:	4851      	ldr	r0, [pc, #324]	; (80108e4 <netif_add+0x17c>)
 801079e:	f00a fcc7 	bl	801b130 <iprintf>
 80107a2:	2300      	movs	r3, #0
 80107a4:	e096      	b.n	80108d4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d101      	bne.n	80107b0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80107ac:	4b4f      	ldr	r3, [pc, #316]	; (80108ec <netif_add+0x184>)
 80107ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d101      	bne.n	80107ba <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80107b6:	4b4d      	ldr	r3, [pc, #308]	; (80108ec <netif_add+0x184>)
 80107b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d101      	bne.n	80107c4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80107c0:	4b4a      	ldr	r3, [pc, #296]	; (80108ec <netif_add+0x184>)
 80107c2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2200      	movs	r2, #0
 80107c8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2200      	movs	r2, #0
 80107ce:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2200      	movs	r2, #0
 80107d4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	4a45      	ldr	r2, [pc, #276]	; (80108f0 <netif_add+0x188>)
 80107da:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2200      	movs	r2, #0
 80107e0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2200      	movs	r2, #0
 80107e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2200      	movs	r2, #0
 80107ee:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6a3a      	ldr	r2, [r7, #32]
 80107f4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80107f6:	4b3f      	ldr	r3, [pc, #252]	; (80108f4 <netif_add+0x18c>)
 80107f8:	781a      	ldrb	r2, [r3, #0]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010804:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	68b9      	ldr	r1, [r7, #8]
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f000 f913 	bl	8010a38 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	4798      	blx	r3
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d001      	beq.n	8010822 <netif_add+0xba>
    return NULL;
 801081e:	2300      	movs	r3, #0
 8010820:	e058      	b.n	80108d4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010828:	2bff      	cmp	r3, #255	; 0xff
 801082a:	d103      	bne.n	8010834 <netif_add+0xcc>
        netif->num = 0;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010834:	2300      	movs	r3, #0
 8010836:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010838:	4b2f      	ldr	r3, [pc, #188]	; (80108f8 <netif_add+0x190>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	617b      	str	r3, [r7, #20]
 801083e:	e02b      	b.n	8010898 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010840:	697a      	ldr	r2, [r7, #20]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	429a      	cmp	r2, r3
 8010846:	d106      	bne.n	8010856 <netif_add+0xee>
 8010848:	4b24      	ldr	r3, [pc, #144]	; (80108dc <netif_add+0x174>)
 801084a:	f240 128b 	movw	r2, #395	; 0x18b
 801084e:	492b      	ldr	r1, [pc, #172]	; (80108fc <netif_add+0x194>)
 8010850:	4824      	ldr	r0, [pc, #144]	; (80108e4 <netif_add+0x17c>)
 8010852:	f00a fc6d 	bl	801b130 <iprintf>
        num_netifs++;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	3301      	adds	r3, #1
 801085a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	2bff      	cmp	r3, #255	; 0xff
 8010860:	dd06      	ble.n	8010870 <netif_add+0x108>
 8010862:	4b1e      	ldr	r3, [pc, #120]	; (80108dc <netif_add+0x174>)
 8010864:	f240 128d 	movw	r2, #397	; 0x18d
 8010868:	4925      	ldr	r1, [pc, #148]	; (8010900 <netif_add+0x198>)
 801086a:	481e      	ldr	r0, [pc, #120]	; (80108e4 <netif_add+0x17c>)
 801086c:	f00a fc60 	bl	801b130 <iprintf>
        if (netif2->num == netif->num) {
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801087c:	429a      	cmp	r2, r3
 801087e:	d108      	bne.n	8010892 <netif_add+0x12a>
          netif->num++;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010886:	3301      	adds	r3, #1
 8010888:	b2da      	uxtb	r2, r3
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010890:	e005      	b.n	801089e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	617b      	str	r3, [r7, #20]
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d1d0      	bne.n	8010840 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d1be      	bne.n	8010822 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108aa:	2bfe      	cmp	r3, #254	; 0xfe
 80108ac:	d103      	bne.n	80108b6 <netif_add+0x14e>
    netif_num = 0;
 80108ae:	4b11      	ldr	r3, [pc, #68]	; (80108f4 <netif_add+0x18c>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	701a      	strb	r2, [r3, #0]
 80108b4:	e006      	b.n	80108c4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108bc:	3301      	adds	r3, #1
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	4b0c      	ldr	r3, [pc, #48]	; (80108f4 <netif_add+0x18c>)
 80108c2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80108c4:	4b0c      	ldr	r3, [pc, #48]	; (80108f8 <netif_add+0x190>)
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80108cc:	4a0a      	ldr	r2, [pc, #40]	; (80108f8 <netif_add+0x190>)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80108d2:	68fb      	ldr	r3, [r7, #12]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3718      	adds	r7, #24
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	0801dfac 	.word	0x0801dfac
 80108e0:	0801e040 	.word	0x0801e040
 80108e4:	0801dffc 	.word	0x0801dffc
 80108e8:	0801e05c 	.word	0x0801e05c
 80108ec:	08020724 	.word	0x08020724
 80108f0:	08010d13 	.word	0x08010d13
 80108f4:	20007198 	.word	0x20007198
 80108f8:	20007190 	.word	0x20007190
 80108fc:	0801e080 	.word	0x0801e080
 8010900:	0801e094 	.word	0x0801e094

08010904 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801090e:	6839      	ldr	r1, [r7, #0]
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f002 fde7 	bl	80134e4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010916:	6839      	ldr	r1, [r7, #0]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f007 fb23 	bl	8017f64 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801091e:	bf00      	nop
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
	...

08010928 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d106      	bne.n	8010948 <netif_do_set_ipaddr+0x20>
 801093a:	4b1d      	ldr	r3, [pc, #116]	; (80109b0 <netif_do_set_ipaddr+0x88>)
 801093c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010940:	491c      	ldr	r1, [pc, #112]	; (80109b4 <netif_do_set_ipaddr+0x8c>)
 8010942:	481d      	ldr	r0, [pc, #116]	; (80109b8 <netif_do_set_ipaddr+0x90>)
 8010944:	f00a fbf4 	bl	801b130 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d106      	bne.n	801095c <netif_do_set_ipaddr+0x34>
 801094e:	4b18      	ldr	r3, [pc, #96]	; (80109b0 <netif_do_set_ipaddr+0x88>)
 8010950:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010954:	4917      	ldr	r1, [pc, #92]	; (80109b4 <netif_do_set_ipaddr+0x8c>)
 8010956:	4818      	ldr	r0, [pc, #96]	; (80109b8 <netif_do_set_ipaddr+0x90>)
 8010958:	f00a fbea 	bl	801b130 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	3304      	adds	r3, #4
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	429a      	cmp	r2, r3
 8010968:	d01c      	beq.n	80109a4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	3304      	adds	r3, #4
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801097a:	f107 0314 	add.w	r3, r7, #20
 801097e:	4619      	mov	r1, r3
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff ffbf 	bl	8010904 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <netif_do_set_ipaddr+0x6a>
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	e000      	b.n	8010994 <netif_do_set_ipaddr+0x6c>
 8010992:	2300      	movs	r3, #0
 8010994:	68fa      	ldr	r2, [r7, #12]
 8010996:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010998:	2101      	movs	r1, #1
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f000 f8d2 	bl	8010b44 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80109a0:	2301      	movs	r3, #1
 80109a2:	e000      	b.n	80109a6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80109a4:	2300      	movs	r3, #0
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3718      	adds	r7, #24
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	0801dfac 	.word	0x0801dfac
 80109b4:	0801e0c4 	.word	0x0801e0c4
 80109b8:	0801dffc 	.word	0x0801dffc

080109bc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80109bc:	b480      	push	{r7}
 80109be:	b085      	sub	sp, #20
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	60b9      	str	r1, [r7, #8]
 80109c6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	3308      	adds	r3, #8
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d00a      	beq.n	80109ec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <netif_do_set_netmask+0x26>
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	e000      	b.n	80109e4 <netif_do_set_netmask+0x28>
 80109e2:	2300      	movs	r3, #0
 80109e4:	68fa      	ldr	r2, [r7, #12]
 80109e6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80109e8:	2301      	movs	r3, #1
 80109ea:	e000      	b.n	80109ee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80109ec:	2300      	movs	r3, #0
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3714      	adds	r7, #20
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr

080109fa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80109fa:	b480      	push	{r7}
 80109fc:	b085      	sub	sp, #20
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	60f8      	str	r0, [r7, #12]
 8010a02:	60b9      	str	r1, [r7, #8]
 8010a04:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	330c      	adds	r3, #12
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d00a      	beq.n	8010a2a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d002      	beq.n	8010a20 <netif_do_set_gw+0x26>
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	e000      	b.n	8010a22 <netif_do_set_gw+0x28>
 8010a20:	2300      	movs	r3, #0
 8010a22:	68fa      	ldr	r2, [r7, #12]
 8010a24:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010a26:	2301      	movs	r3, #1
 8010a28:	e000      	b.n	8010a2c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3714      	adds	r7, #20
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b088      	sub	sp, #32
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	60b9      	str	r1, [r7, #8]
 8010a42:	607a      	str	r2, [r7, #4]
 8010a44:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010a46:	2300      	movs	r3, #0
 8010a48:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d101      	bne.n	8010a58 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010a54:	4b1c      	ldr	r3, [pc, #112]	; (8010ac8 <netif_set_addr+0x90>)
 8010a56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d101      	bne.n	8010a62 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010a5e:	4b1a      	ldr	r3, [pc, #104]	; (8010ac8 <netif_set_addr+0x90>)
 8010a60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d101      	bne.n	8010a6c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010a68:	4b17      	ldr	r3, [pc, #92]	; (8010ac8 <netif_set_addr+0x90>)
 8010a6a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d003      	beq.n	8010a7a <netif_set_addr+0x42>
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d101      	bne.n	8010a7e <netif_set_addr+0x46>
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e000      	b.n	8010a80 <netif_set_addr+0x48>
 8010a7e:	2300      	movs	r3, #0
 8010a80:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d006      	beq.n	8010a96 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010a88:	f107 0310 	add.w	r3, r7, #16
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	68b9      	ldr	r1, [r7, #8]
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f7ff ff49 	bl	8010928 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010a96:	69fa      	ldr	r2, [r7, #28]
 8010a98:	6879      	ldr	r1, [r7, #4]
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f7ff ff8e 	bl	80109bc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010aa0:	69ba      	ldr	r2, [r7, #24]
 8010aa2:	6839      	ldr	r1, [r7, #0]
 8010aa4:	68f8      	ldr	r0, [r7, #12]
 8010aa6:	f7ff ffa8 	bl	80109fa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d106      	bne.n	8010abe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010ab0:	f107 0310 	add.w	r3, r7, #16
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	68b9      	ldr	r1, [r7, #8]
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f7ff ff35 	bl	8010928 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010abe:	bf00      	nop
 8010ac0:	3720      	adds	r7, #32
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	08020724 	.word	0x08020724

08010acc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010ad4:	4a04      	ldr	r2, [pc, #16]	; (8010ae8 <netif_set_default+0x1c>)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010ada:	bf00      	nop
 8010adc:	370c      	adds	r7, #12
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	20007194 	.word	0x20007194

08010aec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d107      	bne.n	8010b0a <netif_set_up+0x1e>
 8010afa:	4b0f      	ldr	r3, [pc, #60]	; (8010b38 <netif_set_up+0x4c>)
 8010afc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010b00:	490e      	ldr	r1, [pc, #56]	; (8010b3c <netif_set_up+0x50>)
 8010b02:	480f      	ldr	r0, [pc, #60]	; (8010b40 <netif_set_up+0x54>)
 8010b04:	f00a fb14 	bl	801b130 <iprintf>
 8010b08:	e013      	b.n	8010b32 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b10:	f003 0301 	and.w	r3, r3, #1
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d10c      	bne.n	8010b32 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b1e:	f043 0301 	orr.w	r3, r3, #1
 8010b22:	b2da      	uxtb	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010b2a:	2103      	movs	r1, #3
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 f809 	bl	8010b44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	0801dfac 	.word	0x0801dfac
 8010b3c:	0801e134 	.word	0x0801e134
 8010b40:	0801dffc 	.word	0x0801dffc

08010b44 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <netif_issue_reports+0x20>
 8010b56:	4b18      	ldr	r3, [pc, #96]	; (8010bb8 <netif_issue_reports+0x74>)
 8010b58:	f240 326d 	movw	r2, #877	; 0x36d
 8010b5c:	4917      	ldr	r1, [pc, #92]	; (8010bbc <netif_issue_reports+0x78>)
 8010b5e:	4818      	ldr	r0, [pc, #96]	; (8010bc0 <netif_issue_reports+0x7c>)
 8010b60:	f00a fae6 	bl	801b130 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b6a:	f003 0304 	and.w	r3, r3, #4
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d01e      	beq.n	8010bb0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b78:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d017      	beq.n	8010bb0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010b80:	78fb      	ldrb	r3, [r7, #3]
 8010b82:	f003 0301 	and.w	r3, r3, #1
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d013      	beq.n	8010bb2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	3304      	adds	r3, #4
 8010b8e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d00e      	beq.n	8010bb2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b9a:	f003 0308 	and.w	r3, r3, #8
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d007      	beq.n	8010bb2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f008 f945 	bl	8018e38 <etharp_request>
 8010bae:	e000      	b.n	8010bb2 <netif_issue_reports+0x6e>
    return;
 8010bb0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	0801dfac 	.word	0x0801dfac
 8010bbc:	0801e150 	.word	0x0801e150
 8010bc0:	0801dffc 	.word	0x0801dffc

08010bc4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d107      	bne.n	8010be2 <netif_set_down+0x1e>
 8010bd2:	4b12      	ldr	r3, [pc, #72]	; (8010c1c <netif_set_down+0x58>)
 8010bd4:	f240 329b 	movw	r2, #923	; 0x39b
 8010bd8:	4911      	ldr	r1, [pc, #68]	; (8010c20 <netif_set_down+0x5c>)
 8010bda:	4812      	ldr	r0, [pc, #72]	; (8010c24 <netif_set_down+0x60>)
 8010bdc:	f00a faa8 	bl	801b130 <iprintf>
 8010be0:	e019      	b.n	8010c16 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010be8:	f003 0301 	and.w	r3, r3, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d012      	beq.n	8010c16 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010bf6:	f023 0301 	bic.w	r3, r3, #1
 8010bfa:	b2da      	uxtb	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c08:	f003 0308 	and.w	r3, r3, #8
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f007 fccf 	bl	80185b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	0801dfac 	.word	0x0801dfac
 8010c20:	0801e174 	.word	0x0801e174
 8010c24:	0801dffc 	.word	0x0801dffc

08010c28 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d107      	bne.n	8010c46 <netif_set_link_up+0x1e>
 8010c36:	4b13      	ldr	r3, [pc, #76]	; (8010c84 <netif_set_link_up+0x5c>)
 8010c38:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010c3c:	4912      	ldr	r1, [pc, #72]	; (8010c88 <netif_set_link_up+0x60>)
 8010c3e:	4813      	ldr	r0, [pc, #76]	; (8010c8c <netif_set_link_up+0x64>)
 8010c40:	f00a fa76 	bl	801b130 <iprintf>
 8010c44:	e01b      	b.n	8010c7e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c4c:	f003 0304 	and.w	r3, r3, #4
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d114      	bne.n	8010c7e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c5a:	f043 0304 	orr.w	r3, r3, #4
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010c66:	2103      	movs	r1, #3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7ff ff6b 	bl	8010b44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	69db      	ldr	r3, [r3, #28]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d003      	beq.n	8010c7e <netif_set_link_up+0x56>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	69db      	ldr	r3, [r3, #28]
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	0801dfac 	.word	0x0801dfac
 8010c88:	0801e194 	.word	0x0801e194
 8010c8c:	0801dffc 	.word	0x0801dffc

08010c90 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d107      	bne.n	8010cae <netif_set_link_down+0x1e>
 8010c9e:	4b11      	ldr	r3, [pc, #68]	; (8010ce4 <netif_set_link_down+0x54>)
 8010ca0:	f240 4206 	movw	r2, #1030	; 0x406
 8010ca4:	4910      	ldr	r1, [pc, #64]	; (8010ce8 <netif_set_link_down+0x58>)
 8010ca6:	4811      	ldr	r0, [pc, #68]	; (8010cec <netif_set_link_down+0x5c>)
 8010ca8:	f00a fa42 	bl	801b130 <iprintf>
 8010cac:	e017      	b.n	8010cde <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cb4:	f003 0304 	and.w	r3, r3, #4
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d010      	beq.n	8010cde <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cc2:	f023 0304 	bic.w	r3, r3, #4
 8010cc6:	b2da      	uxtb	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	69db      	ldr	r3, [r3, #28]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d003      	beq.n	8010cde <netif_set_link_down+0x4e>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	69db      	ldr	r3, [r3, #28]
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	0801dfac 	.word	0x0801dfac
 8010ce8:	0801e1b8 	.word	0x0801e1b8
 8010cec:	0801dffc 	.word	0x0801dffc

08010cf0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	683a      	ldr	r2, [r7, #0]
 8010d04:	61da      	str	r2, [r3, #28]
  }
}
 8010d06:	bf00      	nop
 8010d08:	370c      	adds	r7, #12
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr

08010d12 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010d12:	b480      	push	{r7}
 8010d14:	b085      	sub	sp, #20
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	60f8      	str	r0, [r7, #12]
 8010d1a:	60b9      	str	r1, [r7, #8]
 8010d1c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010d1e:	f06f 030b 	mvn.w	r3, #11
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3714      	adds	r7, #20
 8010d26:	46bd      	mov	sp, r7
 8010d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2c:	4770      	bx	lr
	...

08010d30 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	4603      	mov	r3, r0
 8010d38:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010d3a:	79fb      	ldrb	r3, [r7, #7]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d013      	beq.n	8010d68 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010d40:	4b0d      	ldr	r3, [pc, #52]	; (8010d78 <netif_get_by_index+0x48>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	60fb      	str	r3, [r7, #12]
 8010d46:	e00c      	b.n	8010d62 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d4e:	3301      	adds	r3, #1
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	79fa      	ldrb	r2, [r7, #7]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d101      	bne.n	8010d5c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	e006      	b.n	8010d6a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	60fb      	str	r3, [r7, #12]
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d1ef      	bne.n	8010d48 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010d68:	2300      	movs	r3, #0
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3714      	adds	r7, #20
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop
 8010d78:	20007190 	.word	0x20007190

08010d7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010d82:	4b0c      	ldr	r3, [pc, #48]	; (8010db4 <pbuf_free_ooseq+0x38>)
 8010d84:	2200      	movs	r2, #0
 8010d86:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010d88:	4b0b      	ldr	r3, [pc, #44]	; (8010db8 <pbuf_free_ooseq+0x3c>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	607b      	str	r3, [r7, #4]
 8010d8e:	e00a      	b.n	8010da6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d003      	beq.n	8010da0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f002 fbe1 	bl	8013560 <tcp_free_ooseq>
      return;
 8010d9e:	e005      	b.n	8010dac <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	607b      	str	r3, [r7, #4]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1f1      	bne.n	8010d90 <pbuf_free_ooseq+0x14>
    }
  }
}
 8010dac:	3708      	adds	r7, #8
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	20007199 	.word	0x20007199
 8010db8:	200071a8 	.word	0x200071a8

08010dbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010dc0:	4b03      	ldr	r3, [pc, #12]	; (8010dd0 <pbuf_pool_is_empty+0x14>)
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010dc6:	bf00      	nop
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr
 8010dd0:	20007199 	.word	0x20007199

08010dd4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	4611      	mov	r1, r2
 8010de0:	461a      	mov	r2, r3
 8010de2:	460b      	mov	r3, r1
 8010de4:	80fb      	strh	r3, [r7, #6]
 8010de6:	4613      	mov	r3, r2
 8010de8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2200      	movs	r2, #0
 8010dee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	68ba      	ldr	r2, [r7, #8]
 8010df4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	88fa      	ldrh	r2, [r7, #6]
 8010dfa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	88ba      	ldrh	r2, [r7, #4]
 8010e00:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010e02:	8b3b      	ldrh	r3, [r7, #24]
 8010e04:	b2da      	uxtb	r2, r3
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	7f3a      	ldrb	r2, [r7, #28]
 8010e0e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	2201      	movs	r2, #1
 8010e14:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	73da      	strb	r2, [r3, #15]
}
 8010e1c:	bf00      	nop
 8010e1e:	3714      	adds	r7, #20
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b08c      	sub	sp, #48	; 0x30
 8010e2c:	af02      	add	r7, sp, #8
 8010e2e:	4603      	mov	r3, r0
 8010e30:	71fb      	strb	r3, [r7, #7]
 8010e32:	460b      	mov	r3, r1
 8010e34:	80bb      	strh	r3, [r7, #4]
 8010e36:	4613      	mov	r3, r2
 8010e38:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010e3e:	887b      	ldrh	r3, [r7, #2]
 8010e40:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010e44:	f000 8082 	beq.w	8010f4c <pbuf_alloc+0x124>
 8010e48:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010e4c:	f300 80c9 	bgt.w	8010fe2 <pbuf_alloc+0x1ba>
 8010e50:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010e54:	d010      	beq.n	8010e78 <pbuf_alloc+0x50>
 8010e56:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010e5a:	f300 80c2 	bgt.w	8010fe2 <pbuf_alloc+0x1ba>
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d002      	beq.n	8010e68 <pbuf_alloc+0x40>
 8010e62:	2b41      	cmp	r3, #65	; 0x41
 8010e64:	f040 80bd 	bne.w	8010fe2 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010e68:	887a      	ldrh	r2, [r7, #2]
 8010e6a:	88bb      	ldrh	r3, [r7, #4]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	2000      	movs	r0, #0
 8010e70:	f000 f8d2 	bl	8011018 <pbuf_alloc_reference>
 8010e74:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010e76:	e0be      	b.n	8010ff6 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010e80:	88bb      	ldrh	r3, [r7, #4]
 8010e82:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010e84:	2008      	movs	r0, #8
 8010e86:	f7ff fbcd 	bl	8010624 <memp_malloc>
 8010e8a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d109      	bne.n	8010ea6 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010e92:	f7ff ff93 	bl	8010dbc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d002      	beq.n	8010ea2 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e9e:	f000 faa7 	bl	80113f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	e0a8      	b.n	8010ff8 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010ea6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ea8:	3303      	adds	r3, #3
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	f023 0303 	bic.w	r3, r3, #3
 8010eb0:	b29a      	uxth	r2, r3
 8010eb2:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8010eb6:	1a9b      	subs	r3, r3, r2
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	8b7a      	ldrh	r2, [r7, #26]
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	bf28      	it	cs
 8010ec0:	4613      	movcs	r3, r2
 8010ec2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ec6:	3310      	adds	r3, #16
 8010ec8:	693a      	ldr	r2, [r7, #16]
 8010eca:	4413      	add	r3, r2
 8010ecc:	3303      	adds	r3, #3
 8010ece:	f023 0303 	bic.w	r3, r3, #3
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	89f9      	ldrh	r1, [r7, #14]
 8010ed6:	8b7a      	ldrh	r2, [r7, #26]
 8010ed8:	2300      	movs	r3, #0
 8010eda:	9301      	str	r3, [sp, #4]
 8010edc:	887b      	ldrh	r3, [r7, #2]
 8010ede:	9300      	str	r3, [sp, #0]
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	4601      	mov	r1, r0
 8010ee4:	6938      	ldr	r0, [r7, #16]
 8010ee6:	f7ff ff75 	bl	8010dd4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	f003 0303 	and.w	r3, r3, #3
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d006      	beq.n	8010f04 <pbuf_alloc+0xdc>
 8010ef6:	4b42      	ldr	r3, [pc, #264]	; (8011000 <pbuf_alloc+0x1d8>)
 8010ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010efc:	4941      	ldr	r1, [pc, #260]	; (8011004 <pbuf_alloc+0x1dc>)
 8010efe:	4842      	ldr	r0, [pc, #264]	; (8011008 <pbuf_alloc+0x1e0>)
 8010f00:	f00a f916 	bl	801b130 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f06:	3303      	adds	r3, #3
 8010f08:	f023 0303 	bic.w	r3, r3, #3
 8010f0c:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d106      	bne.n	8010f22 <pbuf_alloc+0xfa>
 8010f14:	4b3a      	ldr	r3, [pc, #232]	; (8011000 <pbuf_alloc+0x1d8>)
 8010f16:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010f1a:	493c      	ldr	r1, [pc, #240]	; (801100c <pbuf_alloc+0x1e4>)
 8010f1c:	483a      	ldr	r0, [pc, #232]	; (8011008 <pbuf_alloc+0x1e0>)
 8010f1e:	f00a f907 	bl	801b130 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d102      	bne.n	8010f2e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8010f2c:	e002      	b.n	8010f34 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	693a      	ldr	r2, [r7, #16]
 8010f32:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010f38:	8b7a      	ldrh	r2, [r7, #26]
 8010f3a:	89fb      	ldrh	r3, [r7, #14]
 8010f3c:	1ad3      	subs	r3, r2, r3
 8010f3e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010f40:	2300      	movs	r3, #0
 8010f42:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010f44:	8b7b      	ldrh	r3, [r7, #26]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d19c      	bne.n	8010e84 <pbuf_alloc+0x5c>
      break;
 8010f4a:	e054      	b.n	8010ff6 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010f4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f4e:	3303      	adds	r3, #3
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	f023 0303 	bic.w	r3, r3, #3
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	88bb      	ldrh	r3, [r7, #4]
 8010f5a:	3303      	adds	r3, #3
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	f023 0303 	bic.w	r3, r3, #3
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	4413      	add	r3, r2
 8010f66:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010f68:	8b3b      	ldrh	r3, [r7, #24]
 8010f6a:	3310      	adds	r3, #16
 8010f6c:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010f6e:	8b3a      	ldrh	r2, [r7, #24]
 8010f70:	88bb      	ldrh	r3, [r7, #4]
 8010f72:	3303      	adds	r3, #3
 8010f74:	f023 0303 	bic.w	r3, r3, #3
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d306      	bcc.n	8010f8a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010f7c:	88bb      	ldrh	r3, [r7, #4]
 8010f7e:	3303      	adds	r3, #3
 8010f80:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010f84:	697a      	ldr	r2, [r7, #20]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d201      	bcs.n	8010f8e <pbuf_alloc+0x166>
        return NULL;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e034      	b.n	8010ff8 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010f8e:	6978      	ldr	r0, [r7, #20]
 8010f90:	f7ff f9c0 	bl	8010314 <mem_malloc>
 8010f94:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d101      	bne.n	8010fa0 <pbuf_alloc+0x178>
        return NULL;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	e02b      	b.n	8010ff8 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010fa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fa2:	3310      	adds	r3, #16
 8010fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fa6:	4413      	add	r3, r2
 8010fa8:	3303      	adds	r3, #3
 8010faa:	f023 0303 	bic.w	r3, r3, #3
 8010fae:	4618      	mov	r0, r3
 8010fb0:	88b9      	ldrh	r1, [r7, #4]
 8010fb2:	88ba      	ldrh	r2, [r7, #4]
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	9301      	str	r3, [sp, #4]
 8010fb8:	887b      	ldrh	r3, [r7, #2]
 8010fba:	9300      	str	r3, [sp, #0]
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	4601      	mov	r1, r0
 8010fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fc2:	f7ff ff07 	bl	8010dd4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	f003 0303 	and.w	r3, r3, #3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d010      	beq.n	8010ff4 <pbuf_alloc+0x1cc>
 8010fd2:	4b0b      	ldr	r3, [pc, #44]	; (8011000 <pbuf_alloc+0x1d8>)
 8010fd4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010fd8:	490d      	ldr	r1, [pc, #52]	; (8011010 <pbuf_alloc+0x1e8>)
 8010fda:	480b      	ldr	r0, [pc, #44]	; (8011008 <pbuf_alloc+0x1e0>)
 8010fdc:	f00a f8a8 	bl	801b130 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010fe0:	e008      	b.n	8010ff4 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010fe2:	4b07      	ldr	r3, [pc, #28]	; (8011000 <pbuf_alloc+0x1d8>)
 8010fe4:	f240 1227 	movw	r2, #295	; 0x127
 8010fe8:	490a      	ldr	r1, [pc, #40]	; (8011014 <pbuf_alloc+0x1ec>)
 8010fea:	4807      	ldr	r0, [pc, #28]	; (8011008 <pbuf_alloc+0x1e0>)
 8010fec:	f00a f8a0 	bl	801b130 <iprintf>
      return NULL;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	e001      	b.n	8010ff8 <pbuf_alloc+0x1d0>
      break;
 8010ff4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3728      	adds	r7, #40	; 0x28
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	0801e1dc 	.word	0x0801e1dc
 8011004:	0801e20c 	.word	0x0801e20c
 8011008:	0801e23c 	.word	0x0801e23c
 801100c:	0801e264 	.word	0x0801e264
 8011010:	0801e298 	.word	0x0801e298
 8011014:	0801e2c4 	.word	0x0801e2c4

08011018 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b086      	sub	sp, #24
 801101c:	af02      	add	r7, sp, #8
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	460b      	mov	r3, r1
 8011022:	807b      	strh	r3, [r7, #2]
 8011024:	4613      	mov	r3, r2
 8011026:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011028:	883b      	ldrh	r3, [r7, #0]
 801102a:	2b41      	cmp	r3, #65	; 0x41
 801102c:	d009      	beq.n	8011042 <pbuf_alloc_reference+0x2a>
 801102e:	883b      	ldrh	r3, [r7, #0]
 8011030:	2b01      	cmp	r3, #1
 8011032:	d006      	beq.n	8011042 <pbuf_alloc_reference+0x2a>
 8011034:	4b0f      	ldr	r3, [pc, #60]	; (8011074 <pbuf_alloc_reference+0x5c>)
 8011036:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801103a:	490f      	ldr	r1, [pc, #60]	; (8011078 <pbuf_alloc_reference+0x60>)
 801103c:	480f      	ldr	r0, [pc, #60]	; (801107c <pbuf_alloc_reference+0x64>)
 801103e:	f00a f877 	bl	801b130 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011042:	2007      	movs	r0, #7
 8011044:	f7ff faee 	bl	8010624 <memp_malloc>
 8011048:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d101      	bne.n	8011054 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011050:	2300      	movs	r3, #0
 8011052:	e00b      	b.n	801106c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011054:	8879      	ldrh	r1, [r7, #2]
 8011056:	887a      	ldrh	r2, [r7, #2]
 8011058:	2300      	movs	r3, #0
 801105a:	9301      	str	r3, [sp, #4]
 801105c:	883b      	ldrh	r3, [r7, #0]
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	460b      	mov	r3, r1
 8011062:	6879      	ldr	r1, [r7, #4]
 8011064:	68f8      	ldr	r0, [r7, #12]
 8011066:	f7ff feb5 	bl	8010dd4 <pbuf_init_alloced_pbuf>
  return p;
 801106a:	68fb      	ldr	r3, [r7, #12]
}
 801106c:	4618      	mov	r0, r3
 801106e:	3710      	adds	r7, #16
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	0801e1dc 	.word	0x0801e1dc
 8011078:	0801e2e0 	.word	0x0801e2e0
 801107c:	0801e23c 	.word	0x0801e23c

08011080 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b088      	sub	sp, #32
 8011084:	af02      	add	r7, sp, #8
 8011086:	607b      	str	r3, [r7, #4]
 8011088:	4603      	mov	r3, r0
 801108a:	73fb      	strb	r3, [r7, #15]
 801108c:	460b      	mov	r3, r1
 801108e:	81bb      	strh	r3, [r7, #12]
 8011090:	4613      	mov	r3, r2
 8011092:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011094:	7bfb      	ldrb	r3, [r7, #15]
 8011096:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011098:	8a7b      	ldrh	r3, [r7, #18]
 801109a:	3303      	adds	r3, #3
 801109c:	f023 0203 	bic.w	r2, r3, #3
 80110a0:	89bb      	ldrh	r3, [r7, #12]
 80110a2:	441a      	add	r2, r3
 80110a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d901      	bls.n	80110ae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80110aa:	2300      	movs	r3, #0
 80110ac:	e018      	b.n	80110e0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80110ae:	6a3b      	ldr	r3, [r7, #32]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d007      	beq.n	80110c4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80110b4:	8a7b      	ldrh	r3, [r7, #18]
 80110b6:	3303      	adds	r3, #3
 80110b8:	f023 0303 	bic.w	r3, r3, #3
 80110bc:	6a3a      	ldr	r2, [r7, #32]
 80110be:	4413      	add	r3, r2
 80110c0:	617b      	str	r3, [r7, #20]
 80110c2:	e001      	b.n	80110c8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80110c4:	2300      	movs	r3, #0
 80110c6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	89b9      	ldrh	r1, [r7, #12]
 80110cc:	89ba      	ldrh	r2, [r7, #12]
 80110ce:	2302      	movs	r3, #2
 80110d0:	9301      	str	r3, [sp, #4]
 80110d2:	897b      	ldrh	r3, [r7, #10]
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	460b      	mov	r3, r1
 80110d8:	6979      	ldr	r1, [r7, #20]
 80110da:	f7ff fe7b 	bl	8010dd4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80110de:	687b      	ldr	r3, [r7, #4]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3718      	adds	r7, #24
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	460b      	mov	r3, r1
 80110f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d106      	bne.n	8011108 <pbuf_realloc+0x20>
 80110fa:	4b39      	ldr	r3, [pc, #228]	; (80111e0 <pbuf_realloc+0xf8>)
 80110fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011100:	4938      	ldr	r1, [pc, #224]	; (80111e4 <pbuf_realloc+0xfc>)
 8011102:	4839      	ldr	r0, [pc, #228]	; (80111e8 <pbuf_realloc+0x100>)
 8011104:	f00a f814 	bl	801b130 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	891b      	ldrh	r3, [r3, #8]
 801110c:	887a      	ldrh	r2, [r7, #2]
 801110e:	429a      	cmp	r2, r3
 8011110:	d261      	bcs.n	80111d6 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	891a      	ldrh	r2, [r3, #8]
 8011116:	887b      	ldrh	r3, [r7, #2]
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801111c:	887b      	ldrh	r3, [r7, #2]
 801111e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011124:	e018      	b.n	8011158 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	895b      	ldrh	r3, [r3, #10]
 801112a:	897a      	ldrh	r2, [r7, #10]
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	891a      	ldrh	r2, [r3, #8]
 8011134:	893b      	ldrh	r3, [r7, #8]
 8011136:	1ad3      	subs	r3, r2, r3
 8011138:	b29a      	uxth	r2, r3
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d106      	bne.n	8011158 <pbuf_realloc+0x70>
 801114a:	4b25      	ldr	r3, [pc, #148]	; (80111e0 <pbuf_realloc+0xf8>)
 801114c:	f240 12af 	movw	r2, #431	; 0x1af
 8011150:	4926      	ldr	r1, [pc, #152]	; (80111ec <pbuf_realloc+0x104>)
 8011152:	4825      	ldr	r0, [pc, #148]	; (80111e8 <pbuf_realloc+0x100>)
 8011154:	f009 ffec 	bl	801b130 <iprintf>
  while (rem_len > q->len) {
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	895b      	ldrh	r3, [r3, #10]
 801115c:	897a      	ldrh	r2, [r7, #10]
 801115e:	429a      	cmp	r2, r3
 8011160:	d8e1      	bhi.n	8011126 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	7b1b      	ldrb	r3, [r3, #12]
 8011166:	f003 030f 	and.w	r3, r3, #15
 801116a:	2b00      	cmp	r3, #0
 801116c:	d11f      	bne.n	80111ae <pbuf_realloc+0xc6>
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	895b      	ldrh	r3, [r3, #10]
 8011172:	897a      	ldrh	r2, [r7, #10]
 8011174:	429a      	cmp	r2, r3
 8011176:	d01a      	beq.n	80111ae <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	7b5b      	ldrb	r3, [r3, #13]
 801117c:	f003 0302 	and.w	r3, r3, #2
 8011180:	2b00      	cmp	r3, #0
 8011182:	d114      	bne.n	80111ae <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	685a      	ldr	r2, [r3, #4]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	1ad2      	subs	r2, r2, r3
 801118c:	897b      	ldrh	r3, [r7, #10]
 801118e:	4413      	add	r3, r2
 8011190:	4619      	mov	r1, r3
 8011192:	68f8      	ldr	r0, [r7, #12]
 8011194:	f7fe ffca 	bl	801012c <mem_trim>
 8011198:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d106      	bne.n	80111ae <pbuf_realloc+0xc6>
 80111a0:	4b0f      	ldr	r3, [pc, #60]	; (80111e0 <pbuf_realloc+0xf8>)
 80111a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80111a6:	4912      	ldr	r1, [pc, #72]	; (80111f0 <pbuf_realloc+0x108>)
 80111a8:	480f      	ldr	r0, [pc, #60]	; (80111e8 <pbuf_realloc+0x100>)
 80111aa:	f009 ffc1 	bl	801b130 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	897a      	ldrh	r2, [r7, #10]
 80111b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	895a      	ldrh	r2, [r3, #10]
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d004      	beq.n	80111ce <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f000 f911 	bl	80113f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2200      	movs	r2, #0
 80111d2:	601a      	str	r2, [r3, #0]
 80111d4:	e000      	b.n	80111d8 <pbuf_realloc+0xf0>
    return;
 80111d6:	bf00      	nop

}
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	0801e1dc 	.word	0x0801e1dc
 80111e4:	0801e2f4 	.word	0x0801e2f4
 80111e8:	0801e23c 	.word	0x0801e23c
 80111ec:	0801e30c 	.word	0x0801e30c
 80111f0:	0801e324 	.word	0x0801e324

080111f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b086      	sub	sp, #24
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	4613      	mov	r3, r2
 8011200:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d106      	bne.n	8011216 <pbuf_add_header_impl+0x22>
 8011208:	4b2b      	ldr	r3, [pc, #172]	; (80112b8 <pbuf_add_header_impl+0xc4>)
 801120a:	f240 12df 	movw	r2, #479	; 0x1df
 801120e:	492b      	ldr	r1, [pc, #172]	; (80112bc <pbuf_add_header_impl+0xc8>)
 8011210:	482b      	ldr	r0, [pc, #172]	; (80112c0 <pbuf_add_header_impl+0xcc>)
 8011212:	f009 ff8d 	bl	801b130 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d003      	beq.n	8011224 <pbuf_add_header_impl+0x30>
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011222:	d301      	bcc.n	8011228 <pbuf_add_header_impl+0x34>
    return 1;
 8011224:	2301      	movs	r3, #1
 8011226:	e043      	b.n	80112b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d101      	bne.n	8011232 <pbuf_add_header_impl+0x3e>
    return 0;
 801122e:	2300      	movs	r3, #0
 8011230:	e03e      	b.n	80112b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	891a      	ldrh	r2, [r3, #8]
 801123a:	8a7b      	ldrh	r3, [r7, #18]
 801123c:	4413      	add	r3, r2
 801123e:	b29b      	uxth	r3, r3
 8011240:	8a7a      	ldrh	r2, [r7, #18]
 8011242:	429a      	cmp	r2, r3
 8011244:	d901      	bls.n	801124a <pbuf_add_header_impl+0x56>
    return 1;
 8011246:	2301      	movs	r3, #1
 8011248:	e032      	b.n	80112b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	7b1b      	ldrb	r3, [r3, #12]
 801124e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011250:	8a3b      	ldrh	r3, [r7, #16]
 8011252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011256:	2b00      	cmp	r3, #0
 8011258:	d00c      	beq.n	8011274 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	685a      	ldr	r2, [r3, #4]
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	425b      	negs	r3, r3
 8011262:	4413      	add	r3, r2
 8011264:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	3310      	adds	r3, #16
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	429a      	cmp	r2, r3
 801126e:	d20d      	bcs.n	801128c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011270:	2301      	movs	r3, #1
 8011272:	e01d      	b.n	80112b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011274:	79fb      	ldrb	r3, [r7, #7]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d006      	beq.n	8011288 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	685a      	ldr	r2, [r3, #4]
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	425b      	negs	r3, r3
 8011282:	4413      	add	r3, r2
 8011284:	617b      	str	r3, [r7, #20]
 8011286:	e001      	b.n	801128c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011288:	2301      	movs	r3, #1
 801128a:	e011      	b.n	80112b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	697a      	ldr	r2, [r7, #20]
 8011290:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	895a      	ldrh	r2, [r3, #10]
 8011296:	8a7b      	ldrh	r3, [r7, #18]
 8011298:	4413      	add	r3, r2
 801129a:	b29a      	uxth	r2, r3
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	891a      	ldrh	r2, [r3, #8]
 80112a4:	8a7b      	ldrh	r3, [r7, #18]
 80112a6:	4413      	add	r3, r2
 80112a8:	b29a      	uxth	r2, r3
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	811a      	strh	r2, [r3, #8]


  return 0;
 80112ae:	2300      	movs	r3, #0
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3718      	adds	r7, #24
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	0801e1dc 	.word	0x0801e1dc
 80112bc:	0801e340 	.word	0x0801e340
 80112c0:	0801e23c 	.word	0x0801e23c

080112c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80112ce:	2200      	movs	r2, #0
 80112d0:	6839      	ldr	r1, [r7, #0]
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7ff ff8e 	bl	80111f4 <pbuf_add_header_impl>
 80112d8:	4603      	mov	r3, r0
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3708      	adds	r7, #8
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
	...

080112e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d106      	bne.n	8011302 <pbuf_remove_header+0x1e>
 80112f4:	4b20      	ldr	r3, [pc, #128]	; (8011378 <pbuf_remove_header+0x94>)
 80112f6:	f240 224b 	movw	r2, #587	; 0x24b
 80112fa:	4920      	ldr	r1, [pc, #128]	; (801137c <pbuf_remove_header+0x98>)
 80112fc:	4820      	ldr	r0, [pc, #128]	; (8011380 <pbuf_remove_header+0x9c>)
 80112fe:	f009 ff17 	bl	801b130 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d003      	beq.n	8011310 <pbuf_remove_header+0x2c>
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801130e:	d301      	bcc.n	8011314 <pbuf_remove_header+0x30>
    return 1;
 8011310:	2301      	movs	r3, #1
 8011312:	e02c      	b.n	801136e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d101      	bne.n	801131e <pbuf_remove_header+0x3a>
    return 0;
 801131a:	2300      	movs	r3, #0
 801131c:	e027      	b.n	801136e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	895b      	ldrh	r3, [r3, #10]
 8011326:	89fa      	ldrh	r2, [r7, #14]
 8011328:	429a      	cmp	r2, r3
 801132a:	d908      	bls.n	801133e <pbuf_remove_header+0x5a>
 801132c:	4b12      	ldr	r3, [pc, #72]	; (8011378 <pbuf_remove_header+0x94>)
 801132e:	f240 2255 	movw	r2, #597	; 0x255
 8011332:	4914      	ldr	r1, [pc, #80]	; (8011384 <pbuf_remove_header+0xa0>)
 8011334:	4812      	ldr	r0, [pc, #72]	; (8011380 <pbuf_remove_header+0x9c>)
 8011336:	f009 fefb 	bl	801b130 <iprintf>
 801133a:	2301      	movs	r3, #1
 801133c:	e017      	b.n	801136e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	685a      	ldr	r2, [r3, #4]
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	441a      	add	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	895a      	ldrh	r2, [r3, #10]
 8011354:	89fb      	ldrh	r3, [r7, #14]
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	b29a      	uxth	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	891a      	ldrh	r2, [r3, #8]
 8011362:	89fb      	ldrh	r3, [r7, #14]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	b29a      	uxth	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801136c:	2300      	movs	r3, #0
}
 801136e:	4618      	mov	r0, r3
 8011370:	3710      	adds	r7, #16
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	0801e1dc 	.word	0x0801e1dc
 801137c:	0801e340 	.word	0x0801e340
 8011380:	0801e23c 	.word	0x0801e23c
 8011384:	0801e34c 	.word	0x0801e34c

08011388 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	460b      	mov	r3, r1
 8011392:	807b      	strh	r3, [r7, #2]
 8011394:	4613      	mov	r3, r2
 8011396:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011398:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801139c:	2b00      	cmp	r3, #0
 801139e:	da08      	bge.n	80113b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80113a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80113a4:	425b      	negs	r3, r3
 80113a6:	4619      	mov	r1, r3
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7ff ff9b 	bl	80112e4 <pbuf_remove_header>
 80113ae:	4603      	mov	r3, r0
 80113b0:	e007      	b.n	80113c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80113b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80113b6:	787a      	ldrb	r2, [r7, #1]
 80113b8:	4619      	mov	r1, r3
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f7ff ff1a 	bl	80111f4 <pbuf_add_header_impl>
 80113c0:	4603      	mov	r3, r0
  }
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3708      	adds	r7, #8
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}

080113ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80113ca:	b580      	push	{r7, lr}
 80113cc:	b082      	sub	sp, #8
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
 80113d2:	460b      	mov	r3, r1
 80113d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80113d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80113da:	2201      	movs	r2, #1
 80113dc:	4619      	mov	r1, r3
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7ff ffd2 	bl	8011388 <pbuf_header_impl>
 80113e4:	4603      	mov	r3, r0
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3708      	adds	r7, #8
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
	...

080113f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b086      	sub	sp, #24
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d10b      	bne.n	8011416 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d106      	bne.n	8011412 <pbuf_free+0x22>
 8011404:	4b38      	ldr	r3, [pc, #224]	; (80114e8 <pbuf_free+0xf8>)
 8011406:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801140a:	4938      	ldr	r1, [pc, #224]	; (80114ec <pbuf_free+0xfc>)
 801140c:	4838      	ldr	r0, [pc, #224]	; (80114f0 <pbuf_free+0x100>)
 801140e:	f009 fe8f 	bl	801b130 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011412:	2300      	movs	r3, #0
 8011414:	e063      	b.n	80114de <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801141a:	e05c      	b.n	80114d6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7b9b      	ldrb	r3, [r3, #14]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d106      	bne.n	8011432 <pbuf_free+0x42>
 8011424:	4b30      	ldr	r3, [pc, #192]	; (80114e8 <pbuf_free+0xf8>)
 8011426:	f240 22f1 	movw	r2, #753	; 0x2f1
 801142a:	4932      	ldr	r1, [pc, #200]	; (80114f4 <pbuf_free+0x104>)
 801142c:	4830      	ldr	r0, [pc, #192]	; (80114f0 <pbuf_free+0x100>)
 801142e:	f009 fe7f 	bl	801b130 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	7b9b      	ldrb	r3, [r3, #14]
 8011436:	3b01      	subs	r3, #1
 8011438:	b2da      	uxtb	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	739a      	strb	r2, [r3, #14]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	7b9b      	ldrb	r3, [r3, #14]
 8011442:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011444:	7dbb      	ldrb	r3, [r7, #22]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d143      	bne.n	80114d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	7b1b      	ldrb	r3, [r3, #12]
 8011454:	f003 030f 	and.w	r3, r3, #15
 8011458:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	7b5b      	ldrb	r3, [r3, #13]
 801145e:	f003 0302 	and.w	r3, r3, #2
 8011462:	2b00      	cmp	r3, #0
 8011464:	d011      	beq.n	801148a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	691b      	ldr	r3, [r3, #16]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d106      	bne.n	8011480 <pbuf_free+0x90>
 8011472:	4b1d      	ldr	r3, [pc, #116]	; (80114e8 <pbuf_free+0xf8>)
 8011474:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011478:	491f      	ldr	r1, [pc, #124]	; (80114f8 <pbuf_free+0x108>)
 801147a:	481d      	ldr	r0, [pc, #116]	; (80114f0 <pbuf_free+0x100>)
 801147c:	f009 fe58 	bl	801b130 <iprintf>
        pc->custom_free_function(p);
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	691b      	ldr	r3, [r3, #16]
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	4798      	blx	r3
 8011488:	e01d      	b.n	80114c6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801148a:	7bfb      	ldrb	r3, [r7, #15]
 801148c:	2b02      	cmp	r3, #2
 801148e:	d104      	bne.n	801149a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8011490:	6879      	ldr	r1, [r7, #4]
 8011492:	2008      	movs	r0, #8
 8011494:	f7ff f936 	bl	8010704 <memp_free>
 8011498:	e015      	b.n	80114c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801149a:	7bfb      	ldrb	r3, [r7, #15]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d104      	bne.n	80114aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80114a0:	6879      	ldr	r1, [r7, #4]
 80114a2:	2007      	movs	r0, #7
 80114a4:	f7ff f92e 	bl	8010704 <memp_free>
 80114a8:	e00d      	b.n	80114c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80114aa:	7bfb      	ldrb	r3, [r7, #15]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d103      	bne.n	80114b8 <pbuf_free+0xc8>
          mem_free(p);
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f7fe fdd1 	bl	8010058 <mem_free>
 80114b6:	e006      	b.n	80114c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80114b8:	4b0b      	ldr	r3, [pc, #44]	; (80114e8 <pbuf_free+0xf8>)
 80114ba:	f240 320f 	movw	r2, #783	; 0x30f
 80114be:	490f      	ldr	r1, [pc, #60]	; (80114fc <pbuf_free+0x10c>)
 80114c0:	480b      	ldr	r0, [pc, #44]	; (80114f0 <pbuf_free+0x100>)
 80114c2:	f009 fe35 	bl	801b130 <iprintf>
        }
      }
      count++;
 80114c6:	7dfb      	ldrb	r3, [r7, #23]
 80114c8:	3301      	adds	r3, #1
 80114ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	607b      	str	r3, [r7, #4]
 80114d0:	e001      	b.n	80114d6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80114d2:	2300      	movs	r3, #0
 80114d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d19f      	bne.n	801141c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80114dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3718      	adds	r7, #24
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	0801e1dc 	.word	0x0801e1dc
 80114ec:	0801e340 	.word	0x0801e340
 80114f0:	0801e23c 	.word	0x0801e23c
 80114f4:	0801e36c 	.word	0x0801e36c
 80114f8:	0801e384 	.word	0x0801e384
 80114fc:	0801e3a8 	.word	0x0801e3a8

08011500 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011500:	b480      	push	{r7}
 8011502:	b085      	sub	sp, #20
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011508:	2300      	movs	r3, #0
 801150a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801150c:	e005      	b.n	801151a <pbuf_clen+0x1a>
    ++len;
 801150e:	89fb      	ldrh	r3, [r7, #14]
 8011510:	3301      	adds	r3, #1
 8011512:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d1f6      	bne.n	801150e <pbuf_clen+0xe>
  }
  return len;
 8011520:	89fb      	ldrh	r3, [r7, #14]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3714      	adds	r7, #20
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr
	...

08011530 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d010      	beq.n	8011560 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	7b9b      	ldrb	r3, [r3, #14]
 8011542:	3301      	adds	r3, #1
 8011544:	b2da      	uxtb	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	7b9b      	ldrb	r3, [r3, #14]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d106      	bne.n	8011560 <pbuf_ref+0x30>
 8011552:	4b05      	ldr	r3, [pc, #20]	; (8011568 <pbuf_ref+0x38>)
 8011554:	f240 3242 	movw	r2, #834	; 0x342
 8011558:	4904      	ldr	r1, [pc, #16]	; (801156c <pbuf_ref+0x3c>)
 801155a:	4805      	ldr	r0, [pc, #20]	; (8011570 <pbuf_ref+0x40>)
 801155c:	f009 fde8 	bl	801b130 <iprintf>
  }
}
 8011560:	bf00      	nop
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	0801e1dc 	.word	0x0801e1dc
 801156c:	0801e3bc 	.word	0x0801e3bc
 8011570:	0801e23c 	.word	0x0801e23c

08011574 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d002      	beq.n	801158a <pbuf_cat+0x16>
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d107      	bne.n	801159a <pbuf_cat+0x26>
 801158a:	4b20      	ldr	r3, [pc, #128]	; (801160c <pbuf_cat+0x98>)
 801158c:	f240 3259 	movw	r2, #857	; 0x359
 8011590:	491f      	ldr	r1, [pc, #124]	; (8011610 <pbuf_cat+0x9c>)
 8011592:	4820      	ldr	r0, [pc, #128]	; (8011614 <pbuf_cat+0xa0>)
 8011594:	f009 fdcc 	bl	801b130 <iprintf>
 8011598:	e034      	b.n	8011604 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	60fb      	str	r3, [r7, #12]
 801159e:	e00a      	b.n	80115b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	891a      	ldrh	r2, [r3, #8]
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	891b      	ldrh	r3, [r3, #8]
 80115a8:	4413      	add	r3, r2
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	60fb      	str	r3, [r7, #12]
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1f0      	bne.n	80115a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	891a      	ldrh	r2, [r3, #8]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	895b      	ldrh	r3, [r3, #10]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d006      	beq.n	80115d8 <pbuf_cat+0x64>
 80115ca:	4b10      	ldr	r3, [pc, #64]	; (801160c <pbuf_cat+0x98>)
 80115cc:	f240 3262 	movw	r2, #866	; 0x362
 80115d0:	4911      	ldr	r1, [pc, #68]	; (8011618 <pbuf_cat+0xa4>)
 80115d2:	4810      	ldr	r0, [pc, #64]	; (8011614 <pbuf_cat+0xa0>)
 80115d4:	f009 fdac 	bl	801b130 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d006      	beq.n	80115ee <pbuf_cat+0x7a>
 80115e0:	4b0a      	ldr	r3, [pc, #40]	; (801160c <pbuf_cat+0x98>)
 80115e2:	f240 3263 	movw	r2, #867	; 0x363
 80115e6:	490d      	ldr	r1, [pc, #52]	; (801161c <pbuf_cat+0xa8>)
 80115e8:	480a      	ldr	r0, [pc, #40]	; (8011614 <pbuf_cat+0xa0>)
 80115ea:	f009 fda1 	bl	801b130 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	891a      	ldrh	r2, [r3, #8]
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	891b      	ldrh	r3, [r3, #8]
 80115f6:	4413      	add	r3, r2
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	683a      	ldr	r2, [r7, #0]
 8011602:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	0801e1dc 	.word	0x0801e1dc
 8011610:	0801e3d0 	.word	0x0801e3d0
 8011614:	0801e23c 	.word	0x0801e23c
 8011618:	0801e408 	.word	0x0801e408
 801161c:	0801e438 	.word	0x0801e438

08011620 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b086      	sub	sp, #24
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801162a:	2300      	movs	r3, #0
 801162c:	617b      	str	r3, [r7, #20]
 801162e:	2300      	movs	r3, #0
 8011630:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d008      	beq.n	801164a <pbuf_copy+0x2a>
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d005      	beq.n	801164a <pbuf_copy+0x2a>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	891a      	ldrh	r2, [r3, #8]
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	891b      	ldrh	r3, [r3, #8]
 8011646:	429a      	cmp	r2, r3
 8011648:	d209      	bcs.n	801165e <pbuf_copy+0x3e>
 801164a:	4b57      	ldr	r3, [pc, #348]	; (80117a8 <pbuf_copy+0x188>)
 801164c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011650:	4956      	ldr	r1, [pc, #344]	; (80117ac <pbuf_copy+0x18c>)
 8011652:	4857      	ldr	r0, [pc, #348]	; (80117b0 <pbuf_copy+0x190>)
 8011654:	f009 fd6c 	bl	801b130 <iprintf>
 8011658:	f06f 030f 	mvn.w	r3, #15
 801165c:	e09f      	b.n	801179e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	895b      	ldrh	r3, [r3, #10]
 8011662:	461a      	mov	r2, r3
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	1ad2      	subs	r2, r2, r3
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	895b      	ldrh	r3, [r3, #10]
 801166c:	4619      	mov	r1, r3
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	1acb      	subs	r3, r1, r3
 8011672:	429a      	cmp	r2, r3
 8011674:	d306      	bcc.n	8011684 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	895b      	ldrh	r3, [r3, #10]
 801167a:	461a      	mov	r2, r3
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	1ad3      	subs	r3, r2, r3
 8011680:	60fb      	str	r3, [r7, #12]
 8011682:	e005      	b.n	8011690 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	895b      	ldrh	r3, [r3, #10]
 8011688:	461a      	mov	r2, r3
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	1ad3      	subs	r3, r2, r3
 801168e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	685a      	ldr	r2, [r3, #4]
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	18d0      	adds	r0, r2, r3
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	685a      	ldr	r2, [r3, #4]
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	4413      	add	r3, r2
 80116a0:	68fa      	ldr	r2, [r7, #12]
 80116a2:	4619      	mov	r1, r3
 80116a4:	f009 ff25 	bl	801b4f2 <memcpy>
    offset_to += len;
 80116a8:	697a      	ldr	r2, [r7, #20]
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	4413      	add	r3, r2
 80116ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80116b0:	693a      	ldr	r2, [r7, #16]
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	4413      	add	r3, r2
 80116b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	895b      	ldrh	r3, [r3, #10]
 80116bc:	461a      	mov	r2, r3
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d906      	bls.n	80116d2 <pbuf_copy+0xb2>
 80116c4:	4b38      	ldr	r3, [pc, #224]	; (80117a8 <pbuf_copy+0x188>)
 80116c6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80116ca:	493a      	ldr	r1, [pc, #232]	; (80117b4 <pbuf_copy+0x194>)
 80116cc:	4838      	ldr	r0, [pc, #224]	; (80117b0 <pbuf_copy+0x190>)
 80116ce:	f009 fd2f 	bl	801b130 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	895b      	ldrh	r3, [r3, #10]
 80116d6:	461a      	mov	r2, r3
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	4293      	cmp	r3, r2
 80116dc:	d906      	bls.n	80116ec <pbuf_copy+0xcc>
 80116de:	4b32      	ldr	r3, [pc, #200]	; (80117a8 <pbuf_copy+0x188>)
 80116e0:	f240 32da 	movw	r2, #986	; 0x3da
 80116e4:	4934      	ldr	r1, [pc, #208]	; (80117b8 <pbuf_copy+0x198>)
 80116e6:	4832      	ldr	r0, [pc, #200]	; (80117b0 <pbuf_copy+0x190>)
 80116e8:	f009 fd22 	bl	801b130 <iprintf>
    if (offset_from >= p_from->len) {
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	895b      	ldrh	r3, [r3, #10]
 80116f0:	461a      	mov	r2, r3
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	4293      	cmp	r3, r2
 80116f6:	d304      	bcc.n	8011702 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80116f8:	2300      	movs	r3, #0
 80116fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	895b      	ldrh	r3, [r3, #10]
 8011706:	461a      	mov	r2, r3
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	4293      	cmp	r3, r2
 801170c:	d114      	bne.n	8011738 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801170e:	2300      	movs	r3, #0
 8011710:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d10c      	bne.n	8011738 <pbuf_copy+0x118>
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d009      	beq.n	8011738 <pbuf_copy+0x118>
 8011724:	4b20      	ldr	r3, [pc, #128]	; (80117a8 <pbuf_copy+0x188>)
 8011726:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801172a:	4924      	ldr	r1, [pc, #144]	; (80117bc <pbuf_copy+0x19c>)
 801172c:	4820      	ldr	r0, [pc, #128]	; (80117b0 <pbuf_copy+0x190>)
 801172e:	f009 fcff 	bl	801b130 <iprintf>
 8011732:	f06f 030f 	mvn.w	r3, #15
 8011736:	e032      	b.n	801179e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d013      	beq.n	8011766 <pbuf_copy+0x146>
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	895a      	ldrh	r2, [r3, #10]
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	891b      	ldrh	r3, [r3, #8]
 8011746:	429a      	cmp	r2, r3
 8011748:	d10d      	bne.n	8011766 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d009      	beq.n	8011766 <pbuf_copy+0x146>
 8011752:	4b15      	ldr	r3, [pc, #84]	; (80117a8 <pbuf_copy+0x188>)
 8011754:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011758:	4919      	ldr	r1, [pc, #100]	; (80117c0 <pbuf_copy+0x1a0>)
 801175a:	4815      	ldr	r0, [pc, #84]	; (80117b0 <pbuf_copy+0x190>)
 801175c:	f009 fce8 	bl	801b130 <iprintf>
 8011760:	f06f 0305 	mvn.w	r3, #5
 8011764:	e01b      	b.n	801179e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d013      	beq.n	8011794 <pbuf_copy+0x174>
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	895a      	ldrh	r2, [r3, #10]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	891b      	ldrh	r3, [r3, #8]
 8011774:	429a      	cmp	r2, r3
 8011776:	d10d      	bne.n	8011794 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d009      	beq.n	8011794 <pbuf_copy+0x174>
 8011780:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <pbuf_copy+0x188>)
 8011782:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011786:	490e      	ldr	r1, [pc, #56]	; (80117c0 <pbuf_copy+0x1a0>)
 8011788:	4809      	ldr	r0, [pc, #36]	; (80117b0 <pbuf_copy+0x190>)
 801178a:	f009 fcd1 	bl	801b130 <iprintf>
 801178e:	f06f 0305 	mvn.w	r3, #5
 8011792:	e004      	b.n	801179e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	f47f af61 	bne.w	801165e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801179c:	2300      	movs	r3, #0
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3718      	adds	r7, #24
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	0801e1dc 	.word	0x0801e1dc
 80117ac:	0801e484 	.word	0x0801e484
 80117b0:	0801e23c 	.word	0x0801e23c
 80117b4:	0801e4b4 	.word	0x0801e4b4
 80117b8:	0801e4cc 	.word	0x0801e4cc
 80117bc:	0801e4e8 	.word	0x0801e4e8
 80117c0:	0801e4f8 	.word	0x0801e4f8

080117c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b088      	sub	sp, #32
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	4611      	mov	r1, r2
 80117d0:	461a      	mov	r2, r3
 80117d2:	460b      	mov	r3, r1
 80117d4:	80fb      	strh	r3, [r7, #6]
 80117d6:	4613      	mov	r3, r2
 80117d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80117da:	2300      	movs	r3, #0
 80117dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d108      	bne.n	80117fa <pbuf_copy_partial+0x36>
 80117e8:	4b2b      	ldr	r3, [pc, #172]	; (8011898 <pbuf_copy_partial+0xd4>)
 80117ea:	f240 420a 	movw	r2, #1034	; 0x40a
 80117ee:	492b      	ldr	r1, [pc, #172]	; (801189c <pbuf_copy_partial+0xd8>)
 80117f0:	482b      	ldr	r0, [pc, #172]	; (80118a0 <pbuf_copy_partial+0xdc>)
 80117f2:	f009 fc9d 	bl	801b130 <iprintf>
 80117f6:	2300      	movs	r3, #0
 80117f8:	e04a      	b.n	8011890 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d108      	bne.n	8011812 <pbuf_copy_partial+0x4e>
 8011800:	4b25      	ldr	r3, [pc, #148]	; (8011898 <pbuf_copy_partial+0xd4>)
 8011802:	f240 420b 	movw	r2, #1035	; 0x40b
 8011806:	4927      	ldr	r1, [pc, #156]	; (80118a4 <pbuf_copy_partial+0xe0>)
 8011808:	4825      	ldr	r0, [pc, #148]	; (80118a0 <pbuf_copy_partial+0xdc>)
 801180a:	f009 fc91 	bl	801b130 <iprintf>
 801180e:	2300      	movs	r3, #0
 8011810:	e03e      	b.n	8011890 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	61fb      	str	r3, [r7, #28]
 8011816:	e034      	b.n	8011882 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011818:	88bb      	ldrh	r3, [r7, #4]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d00a      	beq.n	8011834 <pbuf_copy_partial+0x70>
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	895b      	ldrh	r3, [r3, #10]
 8011822:	88ba      	ldrh	r2, [r7, #4]
 8011824:	429a      	cmp	r2, r3
 8011826:	d305      	bcc.n	8011834 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	895b      	ldrh	r3, [r3, #10]
 801182c:	88ba      	ldrh	r2, [r7, #4]
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	80bb      	strh	r3, [r7, #4]
 8011832:	e023      	b.n	801187c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	895a      	ldrh	r2, [r3, #10]
 8011838:	88bb      	ldrh	r3, [r7, #4]
 801183a:	1ad3      	subs	r3, r2, r3
 801183c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801183e:	8b3a      	ldrh	r2, [r7, #24]
 8011840:	88fb      	ldrh	r3, [r7, #6]
 8011842:	429a      	cmp	r2, r3
 8011844:	d901      	bls.n	801184a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011846:	88fb      	ldrh	r3, [r7, #6]
 8011848:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801184a:	8b7b      	ldrh	r3, [r7, #26]
 801184c:	68ba      	ldr	r2, [r7, #8]
 801184e:	18d0      	adds	r0, r2, r3
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	685a      	ldr	r2, [r3, #4]
 8011854:	88bb      	ldrh	r3, [r7, #4]
 8011856:	4413      	add	r3, r2
 8011858:	8b3a      	ldrh	r2, [r7, #24]
 801185a:	4619      	mov	r1, r3
 801185c:	f009 fe49 	bl	801b4f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011860:	8afa      	ldrh	r2, [r7, #22]
 8011862:	8b3b      	ldrh	r3, [r7, #24]
 8011864:	4413      	add	r3, r2
 8011866:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011868:	8b7a      	ldrh	r2, [r7, #26]
 801186a:	8b3b      	ldrh	r3, [r7, #24]
 801186c:	4413      	add	r3, r2
 801186e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011870:	88fa      	ldrh	r2, [r7, #6]
 8011872:	8b3b      	ldrh	r3, [r7, #24]
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011878:	2300      	movs	r3, #0
 801187a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	61fb      	str	r3, [r7, #28]
 8011882:	88fb      	ldrh	r3, [r7, #6]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d002      	beq.n	801188e <pbuf_copy_partial+0xca>
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1c4      	bne.n	8011818 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801188e:	8afb      	ldrh	r3, [r7, #22]
}
 8011890:	4618      	mov	r0, r3
 8011892:	3720      	adds	r7, #32
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	0801e1dc 	.word	0x0801e1dc
 801189c:	0801e524 	.word	0x0801e524
 80118a0:	0801e23c 	.word	0x0801e23c
 80118a4:	0801e544 	.word	0x0801e544

080118a8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b088      	sub	sp, #32
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	4613      	mov	r3, r2
 80118b4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80118b6:	88fb      	ldrh	r3, [r7, #6]
 80118b8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80118ba:	2300      	movs	r3, #0
 80118bc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d109      	bne.n	80118d8 <pbuf_take+0x30>
 80118c4:	4b3a      	ldr	r3, [pc, #232]	; (80119b0 <pbuf_take+0x108>)
 80118c6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80118ca:	493a      	ldr	r1, [pc, #232]	; (80119b4 <pbuf_take+0x10c>)
 80118cc:	483a      	ldr	r0, [pc, #232]	; (80119b8 <pbuf_take+0x110>)
 80118ce:	f009 fc2f 	bl	801b130 <iprintf>
 80118d2:	f06f 030f 	mvn.w	r3, #15
 80118d6:	e067      	b.n	80119a8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d109      	bne.n	80118f2 <pbuf_take+0x4a>
 80118de:	4b34      	ldr	r3, [pc, #208]	; (80119b0 <pbuf_take+0x108>)
 80118e0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80118e4:	4935      	ldr	r1, [pc, #212]	; (80119bc <pbuf_take+0x114>)
 80118e6:	4834      	ldr	r0, [pc, #208]	; (80119b8 <pbuf_take+0x110>)
 80118e8:	f009 fc22 	bl	801b130 <iprintf>
 80118ec:	f06f 030f 	mvn.w	r3, #15
 80118f0:	e05a      	b.n	80119a8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	891b      	ldrh	r3, [r3, #8]
 80118f6:	88fa      	ldrh	r2, [r7, #6]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d909      	bls.n	8011910 <pbuf_take+0x68>
 80118fc:	4b2c      	ldr	r3, [pc, #176]	; (80119b0 <pbuf_take+0x108>)
 80118fe:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8011902:	492f      	ldr	r1, [pc, #188]	; (80119c0 <pbuf_take+0x118>)
 8011904:	482c      	ldr	r0, [pc, #176]	; (80119b8 <pbuf_take+0x110>)
 8011906:	f009 fc13 	bl	801b130 <iprintf>
 801190a:	f04f 33ff 	mov.w	r3, #4294967295
 801190e:	e04b      	b.n	80119a8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d007      	beq.n	8011926 <pbuf_take+0x7e>
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d004      	beq.n	8011926 <pbuf_take+0x7e>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	891b      	ldrh	r3, [r3, #8]
 8011920:	88fa      	ldrh	r2, [r7, #6]
 8011922:	429a      	cmp	r2, r3
 8011924:	d902      	bls.n	801192c <pbuf_take+0x84>
    return ERR_ARG;
 8011926:	f06f 030f 	mvn.w	r3, #15
 801192a:	e03d      	b.n	80119a8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	61fb      	str	r3, [r7, #28]
 8011930:	e028      	b.n	8011984 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d106      	bne.n	8011946 <pbuf_take+0x9e>
 8011938:	4b1d      	ldr	r3, [pc, #116]	; (80119b0 <pbuf_take+0x108>)
 801193a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801193e:	4921      	ldr	r1, [pc, #132]	; (80119c4 <pbuf_take+0x11c>)
 8011940:	481d      	ldr	r0, [pc, #116]	; (80119b8 <pbuf_take+0x110>)
 8011942:	f009 fbf5 	bl	801b130 <iprintf>
    buf_copy_len = total_copy_len;
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	895b      	ldrh	r3, [r3, #10]
 801194e:	461a      	mov	r2, r3
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	4293      	cmp	r3, r2
 8011954:	d902      	bls.n	801195c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011956:	69fb      	ldr	r3, [r7, #28]
 8011958:	895b      	ldrh	r3, [r3, #10]
 801195a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	6858      	ldr	r0, [r3, #4]
 8011960:	68ba      	ldr	r2, [r7, #8]
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	4413      	add	r3, r2
 8011966:	69ba      	ldr	r2, [r7, #24]
 8011968:	4619      	mov	r1, r3
 801196a:	f009 fdc2 	bl	801b4f2 <memcpy>
    total_copy_len -= buf_copy_len;
 801196e:	697a      	ldr	r2, [r7, #20]
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8011976:	693a      	ldr	r2, [r7, #16]
 8011978:	69bb      	ldr	r3, [r7, #24]
 801197a:	4413      	add	r3, r2
 801197c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	61fb      	str	r3, [r7, #28]
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d1d3      	bne.n	8011932 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d103      	bne.n	8011998 <pbuf_take+0xf0>
 8011990:	88fb      	ldrh	r3, [r7, #6]
 8011992:	693a      	ldr	r2, [r7, #16]
 8011994:	429a      	cmp	r2, r3
 8011996:	d006      	beq.n	80119a6 <pbuf_take+0xfe>
 8011998:	4b05      	ldr	r3, [pc, #20]	; (80119b0 <pbuf_take+0x108>)
 801199a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801199e:	490a      	ldr	r1, [pc, #40]	; (80119c8 <pbuf_take+0x120>)
 80119a0:	4805      	ldr	r0, [pc, #20]	; (80119b8 <pbuf_take+0x110>)
 80119a2:	f009 fbc5 	bl	801b130 <iprintf>
  return ERR_OK;
 80119a6:	2300      	movs	r3, #0
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	3720      	adds	r7, #32
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	0801e1dc 	.word	0x0801e1dc
 80119b4:	0801e5b4 	.word	0x0801e5b4
 80119b8:	0801e23c 	.word	0x0801e23c
 80119bc:	0801e5cc 	.word	0x0801e5cc
 80119c0:	0801e5e8 	.word	0x0801e5e8
 80119c4:	0801e608 	.word	0x0801e608
 80119c8:	0801e620 	.word	0x0801e620

080119cc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	4603      	mov	r3, r0
 80119d4:	603a      	str	r2, [r7, #0]
 80119d6:	71fb      	strb	r3, [r7, #7]
 80119d8:	460b      	mov	r3, r1
 80119da:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	8919      	ldrh	r1, [r3, #8]
 80119e0:	88ba      	ldrh	r2, [r7, #4]
 80119e2:	79fb      	ldrb	r3, [r7, #7]
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7ff fa1f 	bl	8010e28 <pbuf_alloc>
 80119ea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d101      	bne.n	80119f6 <pbuf_clone+0x2a>
    return NULL;
 80119f2:	2300      	movs	r3, #0
 80119f4:	e011      	b.n	8011a1a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80119f6:	6839      	ldr	r1, [r7, #0]
 80119f8:	68f8      	ldr	r0, [r7, #12]
 80119fa:	f7ff fe11 	bl	8011620 <pbuf_copy>
 80119fe:	4603      	mov	r3, r0
 8011a00:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011a02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d006      	beq.n	8011a18 <pbuf_clone+0x4c>
 8011a0a:	4b06      	ldr	r3, [pc, #24]	; (8011a24 <pbuf_clone+0x58>)
 8011a0c:	f240 5224 	movw	r2, #1316	; 0x524
 8011a10:	4905      	ldr	r1, [pc, #20]	; (8011a28 <pbuf_clone+0x5c>)
 8011a12:	4806      	ldr	r0, [pc, #24]	; (8011a2c <pbuf_clone+0x60>)
 8011a14:	f009 fb8c 	bl	801b130 <iprintf>
  return q;
 8011a18:	68fb      	ldr	r3, [r7, #12]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	0801e1dc 	.word	0x0801e1dc
 8011a28:	0801e650 	.word	0x0801e650
 8011a2c:	0801e23c 	.word	0x0801e23c

08011a30 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011a34:	f008 fe42 	bl	801a6bc <rand>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	4b01      	ldr	r3, [pc, #4]	; (8011a50 <tcp_init+0x20>)
 8011a4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011a4c:	bf00      	nop
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	2000015c 	.word	0x2000015c

08011a54 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	7d1b      	ldrb	r3, [r3, #20]
 8011a60:	2b01      	cmp	r3, #1
 8011a62:	d105      	bne.n	8011a70 <tcp_free+0x1c>
 8011a64:	4b06      	ldr	r3, [pc, #24]	; (8011a80 <tcp_free+0x2c>)
 8011a66:	22d4      	movs	r2, #212	; 0xd4
 8011a68:	4906      	ldr	r1, [pc, #24]	; (8011a84 <tcp_free+0x30>)
 8011a6a:	4807      	ldr	r0, [pc, #28]	; (8011a88 <tcp_free+0x34>)
 8011a6c:	f009 fb60 	bl	801b130 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011a70:	6879      	ldr	r1, [r7, #4]
 8011a72:	2001      	movs	r0, #1
 8011a74:	f7fe fe46 	bl	8010704 <memp_free>
}
 8011a78:	bf00      	nop
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	0801e6dc 	.word	0x0801e6dc
 8011a84:	0801e70c 	.word	0x0801e70c
 8011a88:	0801e720 	.word	0x0801e720

08011a8c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	7d1b      	ldrb	r3, [r3, #20]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d105      	bne.n	8011aa8 <tcp_free_listen+0x1c>
 8011a9c:	4b06      	ldr	r3, [pc, #24]	; (8011ab8 <tcp_free_listen+0x2c>)
 8011a9e:	22df      	movs	r2, #223	; 0xdf
 8011aa0:	4906      	ldr	r1, [pc, #24]	; (8011abc <tcp_free_listen+0x30>)
 8011aa2:	4807      	ldr	r0, [pc, #28]	; (8011ac0 <tcp_free_listen+0x34>)
 8011aa4:	f009 fb44 	bl	801b130 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011aa8:	6879      	ldr	r1, [r7, #4]
 8011aaa:	2002      	movs	r0, #2
 8011aac:	f7fe fe2a 	bl	8010704 <memp_free>
}
 8011ab0:	bf00      	nop
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	0801e6dc 	.word	0x0801e6dc
 8011abc:	0801e748 	.word	0x0801e748
 8011ac0:	0801e720 	.word	0x0801e720

08011ac4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011ac8:	f001 f802 	bl	8012ad0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011acc:	4b07      	ldr	r3, [pc, #28]	; (8011aec <tcp_tmr+0x28>)
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	4b05      	ldr	r3, [pc, #20]	; (8011aec <tcp_tmr+0x28>)
 8011ad6:	701a      	strb	r2, [r3, #0]
 8011ad8:	4b04      	ldr	r3, [pc, #16]	; (8011aec <tcp_tmr+0x28>)
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	f003 0301 	and.w	r3, r3, #1
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d001      	beq.n	8011ae8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011ae4:	f000 fcb4 	bl	8012450 <tcp_slowtmr>
  }
}
 8011ae8:	bf00      	nop
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	200071b1 	.word	0x200071b1

08011af0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d105      	bne.n	8011b0c <tcp_remove_listener+0x1c>
 8011b00:	4b0d      	ldr	r3, [pc, #52]	; (8011b38 <tcp_remove_listener+0x48>)
 8011b02:	22ff      	movs	r2, #255	; 0xff
 8011b04:	490d      	ldr	r1, [pc, #52]	; (8011b3c <tcp_remove_listener+0x4c>)
 8011b06:	480e      	ldr	r0, [pc, #56]	; (8011b40 <tcp_remove_listener+0x50>)
 8011b08:	f009 fb12 	bl	801b130 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	60fb      	str	r3, [r7, #12]
 8011b10:	e00a      	b.n	8011b28 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b16:	683a      	ldr	r2, [r7, #0]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d102      	bne.n	8011b22 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	60fb      	str	r3, [r7, #12]
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1f1      	bne.n	8011b12 <tcp_remove_listener+0x22>
    }
  }
}
 8011b2e:	bf00      	nop
 8011b30:	bf00      	nop
 8011b32:	3710      	adds	r7, #16
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	0801e6dc 	.word	0x0801e6dc
 8011b3c:	0801e764 	.word	0x0801e764
 8011b40:	0801e720 	.word	0x0801e720

08011b44 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d106      	bne.n	8011b60 <tcp_listen_closed+0x1c>
 8011b52:	4b14      	ldr	r3, [pc, #80]	; (8011ba4 <tcp_listen_closed+0x60>)
 8011b54:	f240 1211 	movw	r2, #273	; 0x111
 8011b58:	4913      	ldr	r1, [pc, #76]	; (8011ba8 <tcp_listen_closed+0x64>)
 8011b5a:	4814      	ldr	r0, [pc, #80]	; (8011bac <tcp_listen_closed+0x68>)
 8011b5c:	f009 fae8 	bl	801b130 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	7d1b      	ldrb	r3, [r3, #20]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d006      	beq.n	8011b76 <tcp_listen_closed+0x32>
 8011b68:	4b0e      	ldr	r3, [pc, #56]	; (8011ba4 <tcp_listen_closed+0x60>)
 8011b6a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011b6e:	4910      	ldr	r1, [pc, #64]	; (8011bb0 <tcp_listen_closed+0x6c>)
 8011b70:	480e      	ldr	r0, [pc, #56]	; (8011bac <tcp_listen_closed+0x68>)
 8011b72:	f009 fadd 	bl	801b130 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011b76:	2301      	movs	r3, #1
 8011b78:	60fb      	str	r3, [r7, #12]
 8011b7a:	e00b      	b.n	8011b94 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011b7c:	4a0d      	ldr	r2, [pc, #52]	; (8011bb4 <tcp_listen_closed+0x70>)
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	6879      	ldr	r1, [r7, #4]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7ff ffb1 	bl	8011af0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	3301      	adds	r3, #1
 8011b92:	60fb      	str	r3, [r7, #12]
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2b03      	cmp	r3, #3
 8011b98:	d9f0      	bls.n	8011b7c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011b9a:	bf00      	nop
 8011b9c:	bf00      	nop
 8011b9e:	3710      	adds	r7, #16
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	0801e6dc 	.word	0x0801e6dc
 8011ba8:	0801e78c 	.word	0x0801e78c
 8011bac:	0801e720 	.word	0x0801e720
 8011bb0:	0801e798 	.word	0x0801e798
 8011bb4:	080206fc 	.word	0x080206fc

08011bb8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011bb8:	b5b0      	push	{r4, r5, r7, lr}
 8011bba:	b088      	sub	sp, #32
 8011bbc:	af04      	add	r7, sp, #16
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d106      	bne.n	8011bd8 <tcp_close_shutdown+0x20>
 8011bca:	4b63      	ldr	r3, [pc, #396]	; (8011d58 <tcp_close_shutdown+0x1a0>)
 8011bcc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011bd0:	4962      	ldr	r1, [pc, #392]	; (8011d5c <tcp_close_shutdown+0x1a4>)
 8011bd2:	4863      	ldr	r0, [pc, #396]	; (8011d60 <tcp_close_shutdown+0x1a8>)
 8011bd4:	f009 faac 	bl	801b130 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011bd8:	78fb      	ldrb	r3, [r7, #3]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d067      	beq.n	8011cae <tcp_close_shutdown+0xf6>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	7d1b      	ldrb	r3, [r3, #20]
 8011be2:	2b04      	cmp	r3, #4
 8011be4:	d003      	beq.n	8011bee <tcp_close_shutdown+0x36>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	7d1b      	ldrb	r3, [r3, #20]
 8011bea:	2b07      	cmp	r3, #7
 8011bec:	d15f      	bne.n	8011cae <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d105      	bne.n	8011c02 <tcp_close_shutdown+0x4a>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011bfa:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	d055      	beq.n	8011cae <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	8b5b      	ldrh	r3, [r3, #26]
 8011c06:	f003 0310 	and.w	r3, r3, #16
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d106      	bne.n	8011c1c <tcp_close_shutdown+0x64>
 8011c0e:	4b52      	ldr	r3, [pc, #328]	; (8011d58 <tcp_close_shutdown+0x1a0>)
 8011c10:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011c14:	4953      	ldr	r1, [pc, #332]	; (8011d64 <tcp_close_shutdown+0x1ac>)
 8011c16:	4852      	ldr	r0, [pc, #328]	; (8011d60 <tcp_close_shutdown+0x1a8>)
 8011c18:	f009 fa8a 	bl	801b130 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011c24:	687d      	ldr	r5, [r7, #4]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	3304      	adds	r3, #4
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	8ad2      	ldrh	r2, [r2, #22]
 8011c2e:	6879      	ldr	r1, [r7, #4]
 8011c30:	8b09      	ldrh	r1, [r1, #24]
 8011c32:	9102      	str	r1, [sp, #8]
 8011c34:	9201      	str	r2, [sp, #4]
 8011c36:	9300      	str	r3, [sp, #0]
 8011c38:	462b      	mov	r3, r5
 8011c3a:	4622      	mov	r2, r4
 8011c3c:	4601      	mov	r1, r0
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f005 fcfa 	bl	8017638 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f001 fad7 	bl	80131f8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011c4a:	4b47      	ldr	r3, [pc, #284]	; (8011d68 <tcp_close_shutdown+0x1b0>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d105      	bne.n	8011c60 <tcp_close_shutdown+0xa8>
 8011c54:	4b44      	ldr	r3, [pc, #272]	; (8011d68 <tcp_close_shutdown+0x1b0>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	68db      	ldr	r3, [r3, #12]
 8011c5a:	4a43      	ldr	r2, [pc, #268]	; (8011d68 <tcp_close_shutdown+0x1b0>)
 8011c5c:	6013      	str	r3, [r2, #0]
 8011c5e:	e013      	b.n	8011c88 <tcp_close_shutdown+0xd0>
 8011c60:	4b41      	ldr	r3, [pc, #260]	; (8011d68 <tcp_close_shutdown+0x1b0>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	60fb      	str	r3, [r7, #12]
 8011c66:	e00c      	b.n	8011c82 <tcp_close_shutdown+0xca>
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d104      	bne.n	8011c7c <tcp_close_shutdown+0xc4>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	68da      	ldr	r2, [r3, #12]
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	60da      	str	r2, [r3, #12]
 8011c7a:	e005      	b.n	8011c88 <tcp_close_shutdown+0xd0>
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	60fb      	str	r3, [r7, #12]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d1ef      	bne.n	8011c68 <tcp_close_shutdown+0xb0>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	60da      	str	r2, [r3, #12]
 8011c8e:	4b37      	ldr	r3, [pc, #220]	; (8011d6c <tcp_close_shutdown+0x1b4>)
 8011c90:	2201      	movs	r2, #1
 8011c92:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011c94:	4b36      	ldr	r3, [pc, #216]	; (8011d70 <tcp_close_shutdown+0x1b8>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d102      	bne.n	8011ca4 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011c9e:	f003 ff6f 	bl	8015b80 <tcp_trigger_input_pcb_close>
 8011ca2:	e002      	b.n	8011caa <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f7ff fed5 	bl	8011a54 <tcp_free>
      }
      return ERR_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	e050      	b.n	8011d50 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	7d1b      	ldrb	r3, [r3, #20]
 8011cb2:	2b02      	cmp	r3, #2
 8011cb4:	d03b      	beq.n	8011d2e <tcp_close_shutdown+0x176>
 8011cb6:	2b02      	cmp	r3, #2
 8011cb8:	dc44      	bgt.n	8011d44 <tcp_close_shutdown+0x18c>
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d002      	beq.n	8011cc4 <tcp_close_shutdown+0x10c>
 8011cbe:	2b01      	cmp	r3, #1
 8011cc0:	d02a      	beq.n	8011d18 <tcp_close_shutdown+0x160>
 8011cc2:	e03f      	b.n	8011d44 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	8adb      	ldrh	r3, [r3, #22]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d021      	beq.n	8011d10 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011ccc:	4b29      	ldr	r3, [pc, #164]	; (8011d74 <tcp_close_shutdown+0x1bc>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d105      	bne.n	8011ce2 <tcp_close_shutdown+0x12a>
 8011cd6:	4b27      	ldr	r3, [pc, #156]	; (8011d74 <tcp_close_shutdown+0x1bc>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	4a25      	ldr	r2, [pc, #148]	; (8011d74 <tcp_close_shutdown+0x1bc>)
 8011cde:	6013      	str	r3, [r2, #0]
 8011ce0:	e013      	b.n	8011d0a <tcp_close_shutdown+0x152>
 8011ce2:	4b24      	ldr	r3, [pc, #144]	; (8011d74 <tcp_close_shutdown+0x1bc>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	60bb      	str	r3, [r7, #8]
 8011ce8:	e00c      	b.n	8011d04 <tcp_close_shutdown+0x14c>
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	68db      	ldr	r3, [r3, #12]
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d104      	bne.n	8011cfe <tcp_close_shutdown+0x146>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	68da      	ldr	r2, [r3, #12]
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	60da      	str	r2, [r3, #12]
 8011cfc:	e005      	b.n	8011d0a <tcp_close_shutdown+0x152>
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	60bb      	str	r3, [r7, #8]
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d1ef      	bne.n	8011cea <tcp_close_shutdown+0x132>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff fe9f 	bl	8011a54 <tcp_free>
      break;
 8011d16:	e01a      	b.n	8011d4e <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7ff ff13 	bl	8011b44 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011d1e:	6879      	ldr	r1, [r7, #4]
 8011d20:	4815      	ldr	r0, [pc, #84]	; (8011d78 <tcp_close_shutdown+0x1c0>)
 8011d22:	f001 fab9 	bl	8013298 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f7ff feb0 	bl	8011a8c <tcp_free_listen>
      break;
 8011d2c:	e00f      	b.n	8011d4e <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011d2e:	6879      	ldr	r1, [r7, #4]
 8011d30:	480d      	ldr	r0, [pc, #52]	; (8011d68 <tcp_close_shutdown+0x1b0>)
 8011d32:	f001 fab1 	bl	8013298 <tcp_pcb_remove>
 8011d36:	4b0d      	ldr	r3, [pc, #52]	; (8011d6c <tcp_close_shutdown+0x1b4>)
 8011d38:	2201      	movs	r2, #1
 8011d3a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7ff fe89 	bl	8011a54 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011d42:	e004      	b.n	8011d4e <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f000 f819 	bl	8011d7c <tcp_close_shutdown_fin>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	e000      	b.n	8011d50 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011d4e:	2300      	movs	r3, #0
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bdb0      	pop	{r4, r5, r7, pc}
 8011d58:	0801e6dc 	.word	0x0801e6dc
 8011d5c:	0801e7b0 	.word	0x0801e7b0
 8011d60:	0801e720 	.word	0x0801e720
 8011d64:	0801e7d0 	.word	0x0801e7d0
 8011d68:	200071a8 	.word	0x200071a8
 8011d6c:	200071b0 	.word	0x200071b0
 8011d70:	200071e8 	.word	0x200071e8
 8011d74:	200071a0 	.word	0x200071a0
 8011d78:	200071a4 	.word	0x200071a4

08011d7c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d106      	bne.n	8011d98 <tcp_close_shutdown_fin+0x1c>
 8011d8a:	4b2e      	ldr	r3, [pc, #184]	; (8011e44 <tcp_close_shutdown_fin+0xc8>)
 8011d8c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011d90:	492d      	ldr	r1, [pc, #180]	; (8011e48 <tcp_close_shutdown_fin+0xcc>)
 8011d92:	482e      	ldr	r0, [pc, #184]	; (8011e4c <tcp_close_shutdown_fin+0xd0>)
 8011d94:	f009 f9cc 	bl	801b130 <iprintf>

  switch (pcb->state) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	7d1b      	ldrb	r3, [r3, #20]
 8011d9c:	2b07      	cmp	r3, #7
 8011d9e:	d020      	beq.n	8011de2 <tcp_close_shutdown_fin+0x66>
 8011da0:	2b07      	cmp	r3, #7
 8011da2:	dc2b      	bgt.n	8011dfc <tcp_close_shutdown_fin+0x80>
 8011da4:	2b03      	cmp	r3, #3
 8011da6:	d002      	beq.n	8011dae <tcp_close_shutdown_fin+0x32>
 8011da8:	2b04      	cmp	r3, #4
 8011daa:	d00d      	beq.n	8011dc8 <tcp_close_shutdown_fin+0x4c>
 8011dac:	e026      	b.n	8011dfc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f004 fd50 	bl	8016854 <tcp_send_fin>
 8011db4:	4603      	mov	r3, r0
 8011db6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d11f      	bne.n	8011e00 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2205      	movs	r2, #5
 8011dc4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011dc6:	e01b      	b.n	8011e00 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f004 fd43 	bl	8016854 <tcp_send_fin>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d114      	bne.n	8011e04 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2205      	movs	r2, #5
 8011dde:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011de0:	e010      	b.n	8011e04 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f004 fd36 	bl	8016854 <tcp_send_fin>
 8011de8:	4603      	mov	r3, r0
 8011dea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d109      	bne.n	8011e08 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2209      	movs	r2, #9
 8011df8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011dfa:	e005      	b.n	8011e08 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	e01c      	b.n	8011e3a <tcp_close_shutdown_fin+0xbe>
      break;
 8011e00:	bf00      	nop
 8011e02:	e002      	b.n	8011e0a <tcp_close_shutdown_fin+0x8e>
      break;
 8011e04:	bf00      	nop
 8011e06:	e000      	b.n	8011e0a <tcp_close_shutdown_fin+0x8e>
      break;
 8011e08:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d103      	bne.n	8011e1a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f004 fe5c 	bl	8016ad0 <tcp_output>
 8011e18:	e00d      	b.n	8011e36 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e22:	d108      	bne.n	8011e36 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	8b5b      	ldrh	r3, [r3, #26]
 8011e28:	f043 0308 	orr.w	r3, r3, #8
 8011e2c:	b29a      	uxth	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011e32:	2300      	movs	r3, #0
 8011e34:	e001      	b.n	8011e3a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3710      	adds	r7, #16
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	0801e6dc 	.word	0x0801e6dc
 8011e48:	0801e78c 	.word	0x0801e78c
 8011e4c:	0801e720 	.word	0x0801e720

08011e50 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d109      	bne.n	8011e72 <tcp_close+0x22>
 8011e5e:	4b0f      	ldr	r3, [pc, #60]	; (8011e9c <tcp_close+0x4c>)
 8011e60:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011e64:	490e      	ldr	r1, [pc, #56]	; (8011ea0 <tcp_close+0x50>)
 8011e66:	480f      	ldr	r0, [pc, #60]	; (8011ea4 <tcp_close+0x54>)
 8011e68:	f009 f962 	bl	801b130 <iprintf>
 8011e6c:	f06f 030f 	mvn.w	r3, #15
 8011e70:	e00f      	b.n	8011e92 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	7d1b      	ldrb	r3, [r3, #20]
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d006      	beq.n	8011e88 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	8b5b      	ldrh	r3, [r3, #26]
 8011e7e:	f043 0310 	orr.w	r3, r3, #16
 8011e82:	b29a      	uxth	r2, r3
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011e88:	2101      	movs	r1, #1
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f7ff fe94 	bl	8011bb8 <tcp_close_shutdown>
 8011e90:	4603      	mov	r3, r0
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3708      	adds	r7, #8
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	bf00      	nop
 8011e9c:	0801e6dc 	.word	0x0801e6dc
 8011ea0:	0801e7ec 	.word	0x0801e7ec
 8011ea4:	0801e720 	.word	0x0801e720

08011ea8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b08e      	sub	sp, #56	; 0x38
 8011eac:	af04      	add	r7, sp, #16
 8011eae:	6078      	str	r0, [r7, #4]
 8011eb0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d107      	bne.n	8011ec8 <tcp_abandon+0x20>
 8011eb8:	4b52      	ldr	r3, [pc, #328]	; (8012004 <tcp_abandon+0x15c>)
 8011eba:	f240 223d 	movw	r2, #573	; 0x23d
 8011ebe:	4952      	ldr	r1, [pc, #328]	; (8012008 <tcp_abandon+0x160>)
 8011ec0:	4852      	ldr	r0, [pc, #328]	; (801200c <tcp_abandon+0x164>)
 8011ec2:	f009 f935 	bl	801b130 <iprintf>
 8011ec6:	e099      	b.n	8011ffc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	7d1b      	ldrb	r3, [r3, #20]
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d106      	bne.n	8011ede <tcp_abandon+0x36>
 8011ed0:	4b4c      	ldr	r3, [pc, #304]	; (8012004 <tcp_abandon+0x15c>)
 8011ed2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011ed6:	494e      	ldr	r1, [pc, #312]	; (8012010 <tcp_abandon+0x168>)
 8011ed8:	484c      	ldr	r0, [pc, #304]	; (801200c <tcp_abandon+0x164>)
 8011eda:	f009 f929 	bl	801b130 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	7d1b      	ldrb	r3, [r3, #20]
 8011ee2:	2b0a      	cmp	r3, #10
 8011ee4:	d107      	bne.n	8011ef6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011ee6:	6879      	ldr	r1, [r7, #4]
 8011ee8:	484a      	ldr	r0, [pc, #296]	; (8012014 <tcp_abandon+0x16c>)
 8011eea:	f001 f9d5 	bl	8013298 <tcp_pcb_remove>
    tcp_free(pcb);
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f7ff fdb0 	bl	8011a54 <tcp_free>
 8011ef4:	e082      	b.n	8011ffc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011efa:	2300      	movs	r3, #0
 8011efc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	691b      	ldr	r3, [r3, #16]
 8011f16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	7d1b      	ldrb	r3, [r3, #20]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d126      	bne.n	8011f6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	8adb      	ldrh	r3, [r3, #22]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d02e      	beq.n	8011f86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011f28:	4b3b      	ldr	r3, [pc, #236]	; (8012018 <tcp_abandon+0x170>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	687a      	ldr	r2, [r7, #4]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d105      	bne.n	8011f3e <tcp_abandon+0x96>
 8011f32:	4b39      	ldr	r3, [pc, #228]	; (8012018 <tcp_abandon+0x170>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	4a37      	ldr	r2, [pc, #220]	; (8012018 <tcp_abandon+0x170>)
 8011f3a:	6013      	str	r3, [r2, #0]
 8011f3c:	e013      	b.n	8011f66 <tcp_abandon+0xbe>
 8011f3e:	4b36      	ldr	r3, [pc, #216]	; (8012018 <tcp_abandon+0x170>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	61fb      	str	r3, [r7, #28]
 8011f44:	e00c      	b.n	8011f60 <tcp_abandon+0xb8>
 8011f46:	69fb      	ldr	r3, [r7, #28]
 8011f48:	68db      	ldr	r3, [r3, #12]
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d104      	bne.n	8011f5a <tcp_abandon+0xb2>
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	68da      	ldr	r2, [r3, #12]
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	60da      	str	r2, [r3, #12]
 8011f58:	e005      	b.n	8011f66 <tcp_abandon+0xbe>
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	61fb      	str	r3, [r7, #28]
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d1ef      	bne.n	8011f46 <tcp_abandon+0x9e>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	60da      	str	r2, [r3, #12]
 8011f6c:	e00b      	b.n	8011f86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	8adb      	ldrh	r3, [r3, #22]
 8011f76:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011f78:	6879      	ldr	r1, [r7, #4]
 8011f7a:	4828      	ldr	r0, [pc, #160]	; (801201c <tcp_abandon+0x174>)
 8011f7c:	f001 f98c 	bl	8013298 <tcp_pcb_remove>
 8011f80:	4b27      	ldr	r3, [pc, #156]	; (8012020 <tcp_abandon+0x178>)
 8011f82:	2201      	movs	r2, #1
 8011f84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d004      	beq.n	8011f98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f92:	4618      	mov	r0, r3
 8011f94:	f000 fe7e 	bl	8012c94 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d004      	beq.n	8011faa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f000 fe75 	bl	8012c94 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d004      	beq.n	8011fbc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f000 fe6c 	bl	8012c94 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00e      	beq.n	8011fe0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011fc2:	6879      	ldr	r1, [r7, #4]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	3304      	adds	r3, #4
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	8b12      	ldrh	r2, [r2, #24]
 8011fcc:	9202      	str	r2, [sp, #8]
 8011fce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011fd0:	9201      	str	r2, [sp, #4]
 8011fd2:	9300      	str	r3, [sp, #0]
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	697a      	ldr	r2, [r7, #20]
 8011fd8:	69b9      	ldr	r1, [r7, #24]
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f005 fb2c 	bl	8017638 <tcp_rst>
    }
    last_state = pcb->state;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	7d1b      	ldrb	r3, [r3, #20]
 8011fe4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f7ff fd34 	bl	8011a54 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d004      	beq.n	8011ffc <tcp_abandon+0x154>
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	f06f 010c 	mvn.w	r1, #12
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	4798      	blx	r3
  }
}
 8011ffc:	3728      	adds	r7, #40	; 0x28
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	0801e6dc 	.word	0x0801e6dc
 8012008:	0801e820 	.word	0x0801e820
 801200c:	0801e720 	.word	0x0801e720
 8012010:	0801e83c 	.word	0x0801e83c
 8012014:	200071ac 	.word	0x200071ac
 8012018:	200071a0 	.word	0x200071a0
 801201c:	200071a8 	.word	0x200071a8
 8012020:	200071b0 	.word	0x200071b0

08012024 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801202c:	2101      	movs	r1, #1
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7ff ff3a 	bl	8011ea8 <tcp_abandon>
}
 8012034:	bf00      	nop
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d106      	bne.n	8012058 <tcp_update_rcv_ann_wnd+0x1c>
 801204a:	4b25      	ldr	r3, [pc, #148]	; (80120e0 <tcp_update_rcv_ann_wnd+0xa4>)
 801204c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012050:	4924      	ldr	r1, [pc, #144]	; (80120e4 <tcp_update_rcv_ann_wnd+0xa8>)
 8012052:	4825      	ldr	r0, [pc, #148]	; (80120e8 <tcp_update_rcv_ann_wnd+0xac>)
 8012054:	f009 f86c 	bl	801b130 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012060:	4413      	add	r3, r2
 8012062:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801206c:	f640 3168 	movw	r1, #2920	; 0xb68
 8012070:	428a      	cmp	r2, r1
 8012072:	bf28      	it	cs
 8012074:	460a      	movcs	r2, r1
 8012076:	b292      	uxth	r2, r2
 8012078:	4413      	add	r3, r2
 801207a:	68fa      	ldr	r2, [r7, #12]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	2b00      	cmp	r3, #0
 8012080:	db08      	blt.n	8012094 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801208e:	68fa      	ldr	r2, [r7, #12]
 8012090:	1ad3      	subs	r3, r2, r3
 8012092:	e020      	b.n	80120d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	2b00      	cmp	r3, #0
 80120a0:	dd03      	ble.n	80120aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2200      	movs	r2, #0
 80120a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80120a8:	e014      	b.n	80120d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b2:	1ad3      	subs	r3, r2, r3
 80120b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120bc:	d306      	bcc.n	80120cc <tcp_update_rcv_ann_wnd+0x90>
 80120be:	4b08      	ldr	r3, [pc, #32]	; (80120e0 <tcp_update_rcv_ann_wnd+0xa4>)
 80120c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80120c4:	4909      	ldr	r1, [pc, #36]	; (80120ec <tcp_update_rcv_ann_wnd+0xb0>)
 80120c6:	4808      	ldr	r0, [pc, #32]	; (80120e8 <tcp_update_rcv_ann_wnd+0xac>)
 80120c8:	f009 f832 	bl	801b130 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80120d4:	2300      	movs	r3, #0
  }
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3710      	adds	r7, #16
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	0801e6dc 	.word	0x0801e6dc
 80120e4:	0801e938 	.word	0x0801e938
 80120e8:	0801e720 	.word	0x0801e720
 80120ec:	0801e95c 	.word	0x0801e95c

080120f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b084      	sub	sp, #16
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	460b      	mov	r3, r1
 80120fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d107      	bne.n	8012112 <tcp_recved+0x22>
 8012102:	4b20      	ldr	r3, [pc, #128]	; (8012184 <tcp_recved+0x94>)
 8012104:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012108:	491f      	ldr	r1, [pc, #124]	; (8012188 <tcp_recved+0x98>)
 801210a:	4820      	ldr	r0, [pc, #128]	; (801218c <tcp_recved+0x9c>)
 801210c:	f009 f810 	bl	801b130 <iprintf>
 8012110:	e034      	b.n	801217c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	7d1b      	ldrb	r3, [r3, #20]
 8012116:	2b01      	cmp	r3, #1
 8012118:	d106      	bne.n	8012128 <tcp_recved+0x38>
 801211a:	4b1a      	ldr	r3, [pc, #104]	; (8012184 <tcp_recved+0x94>)
 801211c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012120:	491b      	ldr	r1, [pc, #108]	; (8012190 <tcp_recved+0xa0>)
 8012122:	481a      	ldr	r0, [pc, #104]	; (801218c <tcp_recved+0x9c>)
 8012124:	f009 f804 	bl	801b130 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801212c:	887b      	ldrh	r3, [r7, #2]
 801212e:	4413      	add	r3, r2
 8012130:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012132:	89fb      	ldrh	r3, [r7, #14]
 8012134:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012138:	4293      	cmp	r3, r2
 801213a:	d804      	bhi.n	8012146 <tcp_recved+0x56>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012140:	89fa      	ldrh	r2, [r7, #14]
 8012142:	429a      	cmp	r2, r3
 8012144:	d204      	bcs.n	8012150 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801214c:	851a      	strh	r2, [r3, #40]	; 0x28
 801214e:	e002      	b.n	8012156 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	89fa      	ldrh	r2, [r7, #14]
 8012154:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ff ff70 	bl	801203c <tcp_update_rcv_ann_wnd>
 801215c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012164:	4293      	cmp	r3, r2
 8012166:	d909      	bls.n	801217c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	8b5b      	ldrh	r3, [r3, #26]
 801216c:	f043 0302 	orr.w	r3, r3, #2
 8012170:	b29a      	uxth	r2, r3
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f004 fcaa 	bl	8016ad0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801217c:	3710      	adds	r7, #16
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	0801e6dc 	.word	0x0801e6dc
 8012188:	0801e978 	.word	0x0801e978
 801218c:	0801e720 	.word	0x0801e720
 8012190:	0801e990 	.word	0x0801e990

08012194 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012194:	b480      	push	{r7}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801219a:	2300      	movs	r3, #0
 801219c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801219e:	4b1e      	ldr	r3, [pc, #120]	; (8012218 <tcp_new_port+0x84>)
 80121a0:	881b      	ldrh	r3, [r3, #0]
 80121a2:	3301      	adds	r3, #1
 80121a4:	b29a      	uxth	r2, r3
 80121a6:	4b1c      	ldr	r3, [pc, #112]	; (8012218 <tcp_new_port+0x84>)
 80121a8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80121aa:	4b1b      	ldr	r3, [pc, #108]	; (8012218 <tcp_new_port+0x84>)
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121b2:	4293      	cmp	r3, r2
 80121b4:	d103      	bne.n	80121be <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80121b6:	4b18      	ldr	r3, [pc, #96]	; (8012218 <tcp_new_port+0x84>)
 80121b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80121bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80121be:	2300      	movs	r3, #0
 80121c0:	71fb      	strb	r3, [r7, #7]
 80121c2:	e01e      	b.n	8012202 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80121c4:	79fb      	ldrb	r3, [r7, #7]
 80121c6:	4a15      	ldr	r2, [pc, #84]	; (801221c <tcp_new_port+0x88>)
 80121c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	603b      	str	r3, [r7, #0]
 80121d0:	e011      	b.n	80121f6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	8ada      	ldrh	r2, [r3, #22]
 80121d6:	4b10      	ldr	r3, [pc, #64]	; (8012218 <tcp_new_port+0x84>)
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d108      	bne.n	80121f0 <tcp_new_port+0x5c>
        n++;
 80121de:	88bb      	ldrh	r3, [r7, #4]
 80121e0:	3301      	adds	r3, #1
 80121e2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80121e4:	88bb      	ldrh	r3, [r7, #4]
 80121e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80121ea:	d3d8      	bcc.n	801219e <tcp_new_port+0xa>
          return 0;
 80121ec:	2300      	movs	r3, #0
 80121ee:	e00d      	b.n	801220c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	603b      	str	r3, [r7, #0]
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d1ea      	bne.n	80121d2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80121fc:	79fb      	ldrb	r3, [r7, #7]
 80121fe:	3301      	adds	r3, #1
 8012200:	71fb      	strb	r3, [r7, #7]
 8012202:	79fb      	ldrb	r3, [r7, #7]
 8012204:	2b03      	cmp	r3, #3
 8012206:	d9dd      	bls.n	80121c4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012208:	4b03      	ldr	r3, [pc, #12]	; (8012218 <tcp_new_port+0x84>)
 801220a:	881b      	ldrh	r3, [r3, #0]
}
 801220c:	4618      	mov	r0, r3
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr
 8012218:	2000015c 	.word	0x2000015c
 801221c:	080206fc 	.word	0x080206fc

08012220 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b08a      	sub	sp, #40	; 0x28
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	603b      	str	r3, [r7, #0]
 801222c:	4613      	mov	r3, r2
 801222e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012230:	2300      	movs	r3, #0
 8012232:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d109      	bne.n	801224e <tcp_connect+0x2e>
 801223a:	4b7d      	ldr	r3, [pc, #500]	; (8012430 <tcp_connect+0x210>)
 801223c:	f240 4235 	movw	r2, #1077	; 0x435
 8012240:	497c      	ldr	r1, [pc, #496]	; (8012434 <tcp_connect+0x214>)
 8012242:	487d      	ldr	r0, [pc, #500]	; (8012438 <tcp_connect+0x218>)
 8012244:	f008 ff74 	bl	801b130 <iprintf>
 8012248:	f06f 030f 	mvn.w	r3, #15
 801224c:	e0ec      	b.n	8012428 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d109      	bne.n	8012268 <tcp_connect+0x48>
 8012254:	4b76      	ldr	r3, [pc, #472]	; (8012430 <tcp_connect+0x210>)
 8012256:	f240 4236 	movw	r2, #1078	; 0x436
 801225a:	4978      	ldr	r1, [pc, #480]	; (801243c <tcp_connect+0x21c>)
 801225c:	4876      	ldr	r0, [pc, #472]	; (8012438 <tcp_connect+0x218>)
 801225e:	f008 ff67 	bl	801b130 <iprintf>
 8012262:	f06f 030f 	mvn.w	r3, #15
 8012266:	e0df      	b.n	8012428 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	7d1b      	ldrb	r3, [r3, #20]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d009      	beq.n	8012284 <tcp_connect+0x64>
 8012270:	4b6f      	ldr	r3, [pc, #444]	; (8012430 <tcp_connect+0x210>)
 8012272:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8012276:	4972      	ldr	r1, [pc, #456]	; (8012440 <tcp_connect+0x220>)
 8012278:	486f      	ldr	r0, [pc, #444]	; (8012438 <tcp_connect+0x218>)
 801227a:	f008 ff59 	bl	801b130 <iprintf>
 801227e:	f06f 0309 	mvn.w	r3, #9
 8012282:	e0d1      	b.n	8012428 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d002      	beq.n	8012290 <tcp_connect+0x70>
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	e000      	b.n	8012292 <tcp_connect+0x72>
 8012290:	2300      	movs	r3, #0
 8012292:	68fa      	ldr	r2, [r7, #12]
 8012294:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	88fa      	ldrh	r2, [r7, #6]
 801229a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	7a1b      	ldrb	r3, [r3, #8]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d006      	beq.n	80122b2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	7a1b      	ldrb	r3, [r3, #8]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7fe fd41 	bl	8010d30 <netif_get_by_index>
 80122ae:	6278      	str	r0, [r7, #36]	; 0x24
 80122b0:	e005      	b.n	80122be <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	3304      	adds	r3, #4
 80122b6:	4618      	mov	r0, r3
 80122b8:	f006 ff84 	bl	80191c4 <ip4_route>
 80122bc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d102      	bne.n	80122ca <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80122c4:	f06f 0303 	mvn.w	r3, #3
 80122c8:	e0ae      	b.n	8012428 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d003      	beq.n	80122d8 <tcp_connect+0xb8>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d111      	bne.n	80122fc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80122d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d002      	beq.n	80122e4 <tcp_connect+0xc4>
 80122de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e0:	3304      	adds	r3, #4
 80122e2:	e000      	b.n	80122e6 <tcp_connect+0xc6>
 80122e4:	2300      	movs	r3, #0
 80122e6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d102      	bne.n	80122f4 <tcp_connect+0xd4>
      return ERR_RTE;
 80122ee:	f06f 0303 	mvn.w	r3, #3
 80122f2:	e099      	b.n	8012428 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	8adb      	ldrh	r3, [r3, #22]
 8012300:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	8adb      	ldrh	r3, [r3, #22]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10c      	bne.n	8012324 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801230a:	f7ff ff43 	bl	8012194 <tcp_new_port>
 801230e:	4603      	mov	r3, r0
 8012310:	461a      	mov	r2, r3
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	8adb      	ldrh	r3, [r3, #22]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d102      	bne.n	8012324 <tcp_connect+0x104>
      return ERR_BUF;
 801231e:	f06f 0301 	mvn.w	r3, #1
 8012322:	e081      	b.n	8012428 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012324:	68f8      	ldr	r0, [r7, #12]
 8012326:	f001 f84b 	bl	80133c0 <tcp_next_iss>
 801232a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2200      	movs	r2, #0
 8012330:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	697a      	ldr	r2, [r7, #20]
 8012336:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	1e5a      	subs	r2, r3, #1
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	1e5a      	subs	r2, r3, #1
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	1e5a      	subs	r2, r3, #1
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801236e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012378:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	3304      	adds	r3, #4
 8012382:	461a      	mov	r2, r3
 8012384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012386:	f001 f841 	bl	801340c <tcp_eff_send_mss_netif>
 801238a:	4603      	mov	r3, r0
 801238c:	461a      	mov	r2, r3
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2201      	movs	r2, #1
 8012396:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	683a      	ldr	r2, [r7, #0]
 801239e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80123a2:	2102      	movs	r1, #2
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f004 faa5 	bl	80168f4 <tcp_enqueue_flags>
 80123aa:	4603      	mov	r3, r0
 80123ac:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80123ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d136      	bne.n	8012424 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	2202      	movs	r2, #2
 80123ba:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80123bc:	8b7b      	ldrh	r3, [r7, #26]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d021      	beq.n	8012406 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80123c2:	4b20      	ldr	r3, [pc, #128]	; (8012444 <tcp_connect+0x224>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d105      	bne.n	80123d8 <tcp_connect+0x1b8>
 80123cc:	4b1d      	ldr	r3, [pc, #116]	; (8012444 <tcp_connect+0x224>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	4a1c      	ldr	r2, [pc, #112]	; (8012444 <tcp_connect+0x224>)
 80123d4:	6013      	str	r3, [r2, #0]
 80123d6:	e013      	b.n	8012400 <tcp_connect+0x1e0>
 80123d8:	4b1a      	ldr	r3, [pc, #104]	; (8012444 <tcp_connect+0x224>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	623b      	str	r3, [r7, #32]
 80123de:	e00c      	b.n	80123fa <tcp_connect+0x1da>
 80123e0:	6a3b      	ldr	r3, [r7, #32]
 80123e2:	68db      	ldr	r3, [r3, #12]
 80123e4:	68fa      	ldr	r2, [r7, #12]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d104      	bne.n	80123f4 <tcp_connect+0x1d4>
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	68da      	ldr	r2, [r3, #12]
 80123ee:	6a3b      	ldr	r3, [r7, #32]
 80123f0:	60da      	str	r2, [r3, #12]
 80123f2:	e005      	b.n	8012400 <tcp_connect+0x1e0>
 80123f4:	6a3b      	ldr	r3, [r7, #32]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	623b      	str	r3, [r7, #32]
 80123fa:	6a3b      	ldr	r3, [r7, #32]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d1ef      	bne.n	80123e0 <tcp_connect+0x1c0>
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2200      	movs	r2, #0
 8012404:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8012406:	4b10      	ldr	r3, [pc, #64]	; (8012448 <tcp_connect+0x228>)
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	60da      	str	r2, [r3, #12]
 801240e:	4a0e      	ldr	r2, [pc, #56]	; (8012448 <tcp_connect+0x228>)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6013      	str	r3, [r2, #0]
 8012414:	f005 fad2 	bl	80179bc <tcp_timer_needed>
 8012418:	4b0c      	ldr	r3, [pc, #48]	; (801244c <tcp_connect+0x22c>)
 801241a:	2201      	movs	r2, #1
 801241c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f004 fb56 	bl	8016ad0 <tcp_output>
  }
  return ret;
 8012424:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012428:	4618      	mov	r0, r3
 801242a:	3728      	adds	r7, #40	; 0x28
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	0801e6dc 	.word	0x0801e6dc
 8012434:	0801e9b8 	.word	0x0801e9b8
 8012438:	0801e720 	.word	0x0801e720
 801243c:	0801e9d4 	.word	0x0801e9d4
 8012440:	0801e9f0 	.word	0x0801e9f0
 8012444:	200071a0 	.word	0x200071a0
 8012448:	200071a8 	.word	0x200071a8
 801244c:	200071b0 	.word	0x200071b0

08012450 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012450:	b5b0      	push	{r4, r5, r7, lr}
 8012452:	b090      	sub	sp, #64	; 0x40
 8012454:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012456:	2300      	movs	r3, #0
 8012458:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801245c:	4b94      	ldr	r3, [pc, #592]	; (80126b0 <tcp_slowtmr+0x260>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	3301      	adds	r3, #1
 8012462:	4a93      	ldr	r2, [pc, #588]	; (80126b0 <tcp_slowtmr+0x260>)
 8012464:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012466:	4b93      	ldr	r3, [pc, #588]	; (80126b4 <tcp_slowtmr+0x264>)
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	3301      	adds	r3, #1
 801246c:	b2da      	uxtb	r2, r3
 801246e:	4b91      	ldr	r3, [pc, #580]	; (80126b4 <tcp_slowtmr+0x264>)
 8012470:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012472:	2300      	movs	r3, #0
 8012474:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012476:	4b90      	ldr	r3, [pc, #576]	; (80126b8 <tcp_slowtmr+0x268>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801247c:	e29d      	b.n	80129ba <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012480:	7d1b      	ldrb	r3, [r3, #20]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d106      	bne.n	8012494 <tcp_slowtmr+0x44>
 8012486:	4b8d      	ldr	r3, [pc, #564]	; (80126bc <tcp_slowtmr+0x26c>)
 8012488:	f240 42be 	movw	r2, #1214	; 0x4be
 801248c:	498c      	ldr	r1, [pc, #560]	; (80126c0 <tcp_slowtmr+0x270>)
 801248e:	488d      	ldr	r0, [pc, #564]	; (80126c4 <tcp_slowtmr+0x274>)
 8012490:	f008 fe4e 	bl	801b130 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012496:	7d1b      	ldrb	r3, [r3, #20]
 8012498:	2b01      	cmp	r3, #1
 801249a:	d106      	bne.n	80124aa <tcp_slowtmr+0x5a>
 801249c:	4b87      	ldr	r3, [pc, #540]	; (80126bc <tcp_slowtmr+0x26c>)
 801249e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80124a2:	4989      	ldr	r1, [pc, #548]	; (80126c8 <tcp_slowtmr+0x278>)
 80124a4:	4887      	ldr	r0, [pc, #540]	; (80126c4 <tcp_slowtmr+0x274>)
 80124a6:	f008 fe43 	bl	801b130 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80124aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ac:	7d1b      	ldrb	r3, [r3, #20]
 80124ae:	2b0a      	cmp	r3, #10
 80124b0:	d106      	bne.n	80124c0 <tcp_slowtmr+0x70>
 80124b2:	4b82      	ldr	r3, [pc, #520]	; (80126bc <tcp_slowtmr+0x26c>)
 80124b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80124b8:	4984      	ldr	r1, [pc, #528]	; (80126cc <tcp_slowtmr+0x27c>)
 80124ba:	4882      	ldr	r0, [pc, #520]	; (80126c4 <tcp_slowtmr+0x274>)
 80124bc:	f008 fe38 	bl	801b130 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80124c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c2:	7f9a      	ldrb	r2, [r3, #30]
 80124c4:	4b7b      	ldr	r3, [pc, #492]	; (80126b4 <tcp_slowtmr+0x264>)
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d105      	bne.n	80124d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80124cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80124d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80124d6:	e270      	b.n	80129ba <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80124d8:	4b76      	ldr	r3, [pc, #472]	; (80126b4 <tcp_slowtmr+0x264>)
 80124da:	781a      	ldrb	r2, [r3, #0]
 80124dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80124e0:	2300      	movs	r3, #0
 80124e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80124e6:	2300      	movs	r3, #0
 80124e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80124ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ee:	7d1b      	ldrb	r3, [r3, #20]
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d10a      	bne.n	801250a <tcp_slowtmr+0xba>
 80124f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124fa:	2b05      	cmp	r3, #5
 80124fc:	d905      	bls.n	801250a <tcp_slowtmr+0xba>
      ++pcb_remove;
 80124fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012502:	3301      	adds	r3, #1
 8012504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012508:	e11e      	b.n	8012748 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012510:	2b0b      	cmp	r3, #11
 8012512:	d905      	bls.n	8012520 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012518:	3301      	adds	r3, #1
 801251a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801251e:	e113      	b.n	8012748 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012522:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012526:	2b00      	cmp	r3, #0
 8012528:	d075      	beq.n	8012616 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801252e:	2b00      	cmp	r3, #0
 8012530:	d006      	beq.n	8012540 <tcp_slowtmr+0xf0>
 8012532:	4b62      	ldr	r3, [pc, #392]	; (80126bc <tcp_slowtmr+0x26c>)
 8012534:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012538:	4965      	ldr	r1, [pc, #404]	; (80126d0 <tcp_slowtmr+0x280>)
 801253a:	4862      	ldr	r0, [pc, #392]	; (80126c4 <tcp_slowtmr+0x274>)
 801253c:	f008 fdf8 	bl	801b130 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012544:	2b00      	cmp	r3, #0
 8012546:	d106      	bne.n	8012556 <tcp_slowtmr+0x106>
 8012548:	4b5c      	ldr	r3, [pc, #368]	; (80126bc <tcp_slowtmr+0x26c>)
 801254a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801254e:	4961      	ldr	r1, [pc, #388]	; (80126d4 <tcp_slowtmr+0x284>)
 8012550:	485c      	ldr	r0, [pc, #368]	; (80126c4 <tcp_slowtmr+0x274>)
 8012552:	f008 fded 	bl	801b130 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012558:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801255c:	2b0b      	cmp	r3, #11
 801255e:	d905      	bls.n	801256c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012564:	3301      	adds	r3, #1
 8012566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801256a:	e0ed      	b.n	8012748 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012572:	3b01      	subs	r3, #1
 8012574:	4a58      	ldr	r2, [pc, #352]	; (80126d8 <tcp_slowtmr+0x288>)
 8012576:	5cd3      	ldrb	r3, [r2, r3]
 8012578:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012580:	7c7a      	ldrb	r2, [r7, #17]
 8012582:	429a      	cmp	r2, r3
 8012584:	d907      	bls.n	8012596 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012588:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801258c:	3301      	adds	r3, #1
 801258e:	b2da      	uxtb	r2, r3
 8012590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012592:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012598:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801259c:	7c7a      	ldrb	r2, [r7, #17]
 801259e:	429a      	cmp	r2, r3
 80125a0:	f200 80d2 	bhi.w	8012748 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80125a4:	2301      	movs	r3, #1
 80125a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80125a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d108      	bne.n	80125c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80125b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125b4:	f005 f934 	bl	8017820 <tcp_zero_window_probe>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d014      	beq.n	80125e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80125be:	2300      	movs	r3, #0
 80125c0:	623b      	str	r3, [r7, #32]
 80125c2:	e011      	b.n	80125e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80125c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125ca:	4619      	mov	r1, r3
 80125cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125ce:	f003 fff9 	bl	80165c4 <tcp_split_unsent_seg>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d107      	bne.n	80125e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80125d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125da:	f004 fa79 	bl	8016ad0 <tcp_output>
 80125de:	4603      	mov	r3, r0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d101      	bne.n	80125e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80125e4:	2300      	movs	r3, #0
 80125e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80125e8:	6a3b      	ldr	r3, [r7, #32]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f000 80ac 	beq.w	8012748 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80125f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f2:	2200      	movs	r2, #0
 80125f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80125f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80125fe:	2b06      	cmp	r3, #6
 8012600:	f200 80a2 	bhi.w	8012748 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801260a:	3301      	adds	r3, #1
 801260c:	b2da      	uxtb	r2, r3
 801260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012610:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012614:	e098      	b.n	8012748 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012618:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801261c:	2b00      	cmp	r3, #0
 801261e:	db0f      	blt.n	8012640 <tcp_slowtmr+0x1f0>
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012622:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012626:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801262a:	4293      	cmp	r3, r2
 801262c:	d008      	beq.n	8012640 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012630:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012634:	b29b      	uxth	r3, r3
 8012636:	3301      	adds	r3, #1
 8012638:	b29b      	uxth	r3, r3
 801263a:	b21a      	sxth	r2, r3
 801263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801263e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012642:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012648:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801264c:	429a      	cmp	r2, r3
 801264e:	db7b      	blt.n	8012748 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012652:	f004 fd31 	bl	80170b8 <tcp_rexmit_rto_prepare>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d007      	beq.n	801266c <tcp_slowtmr+0x21c>
 801265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012660:	2b00      	cmp	r3, #0
 8012662:	d171      	bne.n	8012748 <tcp_slowtmr+0x2f8>
 8012664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012668:	2b00      	cmp	r3, #0
 801266a:	d06d      	beq.n	8012748 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801266e:	7d1b      	ldrb	r3, [r3, #20]
 8012670:	2b02      	cmp	r3, #2
 8012672:	d03a      	beq.n	80126ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801267a:	2b0c      	cmp	r3, #12
 801267c:	bf28      	it	cs
 801267e:	230c      	movcs	r3, #12
 8012680:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012684:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012688:	10db      	asrs	r3, r3, #3
 801268a:	b21b      	sxth	r3, r3
 801268c:	461a      	mov	r2, r3
 801268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012690:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012694:	4413      	add	r3, r2
 8012696:	7efa      	ldrb	r2, [r7, #27]
 8012698:	4910      	ldr	r1, [pc, #64]	; (80126dc <tcp_slowtmr+0x28c>)
 801269a:	5c8a      	ldrb	r2, [r1, r2]
 801269c:	4093      	lsls	r3, r2
 801269e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80126a6:	4293      	cmp	r3, r2
 80126a8:	dc1a      	bgt.n	80126e0 <tcp_slowtmr+0x290>
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	b21a      	sxth	r2, r3
 80126ae:	e019      	b.n	80126e4 <tcp_slowtmr+0x294>
 80126b0:	2000719c 	.word	0x2000719c
 80126b4:	200071b2 	.word	0x200071b2
 80126b8:	200071a8 	.word	0x200071a8
 80126bc:	0801e6dc 	.word	0x0801e6dc
 80126c0:	0801ea20 	.word	0x0801ea20
 80126c4:	0801e720 	.word	0x0801e720
 80126c8:	0801ea4c 	.word	0x0801ea4c
 80126cc:	0801ea78 	.word	0x0801ea78
 80126d0:	0801eaa8 	.word	0x0801eaa8
 80126d4:	0801eadc 	.word	0x0801eadc
 80126d8:	080206f4 	.word	0x080206f4
 80126dc:	080206e4 	.word	0x080206e4
 80126e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80126e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80126ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ec:	2200      	movs	r2, #0
 80126ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80126f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80126f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80126fc:	4293      	cmp	r3, r2
 80126fe:	bf28      	it	cs
 8012700:	4613      	movcs	r3, r2
 8012702:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012704:	8a7b      	ldrh	r3, [r7, #18]
 8012706:	085b      	lsrs	r3, r3, #1
 8012708:	b29a      	uxth	r2, r3
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012712:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	b29b      	uxth	r3, r3
 801271e:	429a      	cmp	r2, r3
 8012720:	d206      	bcs.n	8012730 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012726:	005b      	lsls	r3, r3, #1
 8012728:	b29a      	uxth	r2, r3
 801272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012732:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273c:	2200      	movs	r2, #0
 801273e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012744:	f004 fd28 	bl	8017198 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274a:	7d1b      	ldrb	r3, [r3, #20]
 801274c:	2b06      	cmp	r3, #6
 801274e:	d111      	bne.n	8012774 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012752:	8b5b      	ldrh	r3, [r3, #26]
 8012754:	f003 0310 	and.w	r3, r3, #16
 8012758:	2b00      	cmp	r3, #0
 801275a:	d00b      	beq.n	8012774 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801275c:	4b9c      	ldr	r3, [pc, #624]	; (80129d0 <tcp_slowtmr+0x580>)
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012762:	6a1b      	ldr	r3, [r3, #32]
 8012764:	1ad3      	subs	r3, r2, r3
 8012766:	2b28      	cmp	r3, #40	; 0x28
 8012768:	d904      	bls.n	8012774 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801276a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801276e:	3301      	adds	r3, #1
 8012770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	7a5b      	ldrb	r3, [r3, #9]
 8012778:	f003 0308 	and.w	r3, r3, #8
 801277c:	2b00      	cmp	r3, #0
 801277e:	d04a      	beq.n	8012816 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012782:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012784:	2b04      	cmp	r3, #4
 8012786:	d003      	beq.n	8012790 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801278c:	2b07      	cmp	r3, #7
 801278e:	d142      	bne.n	8012816 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012790:	4b8f      	ldr	r3, [pc, #572]	; (80129d0 <tcp_slowtmr+0x580>)
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012796:	6a1b      	ldr	r3, [r3, #32]
 8012798:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80127a0:	4b8c      	ldr	r3, [pc, #560]	; (80129d4 <tcp_slowtmr+0x584>)
 80127a2:	440b      	add	r3, r1
 80127a4:	498c      	ldr	r1, [pc, #560]	; (80129d8 <tcp_slowtmr+0x588>)
 80127a6:	fba1 1303 	umull	r1, r3, r1, r3
 80127aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d90a      	bls.n	80127c6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80127b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127b4:	3301      	adds	r3, #1
 80127b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80127ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127be:	3301      	adds	r3, #1
 80127c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80127c4:	e027      	b.n	8012816 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80127c6:	4b82      	ldr	r3, [pc, #520]	; (80129d0 <tcp_slowtmr+0x580>)
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127cc:	6a1b      	ldr	r3, [r3, #32]
 80127ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80127d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80127dc:	4618      	mov	r0, r3
 80127de:	4b7f      	ldr	r3, [pc, #508]	; (80129dc <tcp_slowtmr+0x58c>)
 80127e0:	fb00 f303 	mul.w	r3, r0, r3
 80127e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80127e6:	497c      	ldr	r1, [pc, #496]	; (80129d8 <tcp_slowtmr+0x588>)
 80127e8:	fba1 1303 	umull	r1, r3, r1, r3
 80127ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d911      	bls.n	8012816 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80127f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127f4:	f004 ffd4 	bl	80177a0 <tcp_keepalive>
 80127f8:	4603      	mov	r3, r0
 80127fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80127fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012802:	2b00      	cmp	r3, #0
 8012804:	d107      	bne.n	8012816 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801280c:	3301      	adds	r3, #1
 801280e:	b2da      	uxtb	r2, r3
 8012810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012812:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801281a:	2b00      	cmp	r3, #0
 801281c:	d011      	beq.n	8012842 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801281e:	4b6c      	ldr	r3, [pc, #432]	; (80129d0 <tcp_slowtmr+0x580>)
 8012820:	681a      	ldr	r2, [r3, #0]
 8012822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012824:	6a1b      	ldr	r3, [r3, #32]
 8012826:	1ad2      	subs	r2, r2, r3
 8012828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801282e:	4619      	mov	r1, r3
 8012830:	460b      	mov	r3, r1
 8012832:	005b      	lsls	r3, r3, #1
 8012834:	440b      	add	r3, r1
 8012836:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012838:	429a      	cmp	r2, r3
 801283a:	d302      	bcc.n	8012842 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801283c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801283e:	f000 fe8f 	bl	8013560 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012844:	7d1b      	ldrb	r3, [r3, #20]
 8012846:	2b03      	cmp	r3, #3
 8012848:	d10b      	bne.n	8012862 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801284a:	4b61      	ldr	r3, [pc, #388]	; (80129d0 <tcp_slowtmr+0x580>)
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012850:	6a1b      	ldr	r3, [r3, #32]
 8012852:	1ad3      	subs	r3, r2, r3
 8012854:	2b28      	cmp	r3, #40	; 0x28
 8012856:	d904      	bls.n	8012862 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801285c:	3301      	adds	r3, #1
 801285e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012864:	7d1b      	ldrb	r3, [r3, #20]
 8012866:	2b09      	cmp	r3, #9
 8012868:	d10b      	bne.n	8012882 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801286a:	4b59      	ldr	r3, [pc, #356]	; (80129d0 <tcp_slowtmr+0x580>)
 801286c:	681a      	ldr	r2, [r3, #0]
 801286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012870:	6a1b      	ldr	r3, [r3, #32]
 8012872:	1ad3      	subs	r3, r2, r3
 8012874:	2bf0      	cmp	r3, #240	; 0xf0
 8012876:	d904      	bls.n	8012882 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8012878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801287c:	3301      	adds	r3, #1
 801287e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012886:	2b00      	cmp	r3, #0
 8012888:	d060      	beq.n	801294c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012890:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012894:	f000 fcb0 	bl	80131f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801289a:	2b00      	cmp	r3, #0
 801289c:	d010      	beq.n	80128c0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801289e:	4b50      	ldr	r3, [pc, #320]	; (80129e0 <tcp_slowtmr+0x590>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d106      	bne.n	80128b6 <tcp_slowtmr+0x466>
 80128a8:	4b4e      	ldr	r3, [pc, #312]	; (80129e4 <tcp_slowtmr+0x594>)
 80128aa:	f240 526d 	movw	r2, #1389	; 0x56d
 80128ae:	494e      	ldr	r1, [pc, #312]	; (80129e8 <tcp_slowtmr+0x598>)
 80128b0:	484e      	ldr	r0, [pc, #312]	; (80129ec <tcp_slowtmr+0x59c>)
 80128b2:	f008 fc3d 	bl	801b130 <iprintf>
        prev->next = pcb->next;
 80128b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b8:	68da      	ldr	r2, [r3, #12]
 80128ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128bc:	60da      	str	r2, [r3, #12]
 80128be:	e00f      	b.n	80128e0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80128c0:	4b47      	ldr	r3, [pc, #284]	; (80129e0 <tcp_slowtmr+0x590>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d006      	beq.n	80128d8 <tcp_slowtmr+0x488>
 80128ca:	4b46      	ldr	r3, [pc, #280]	; (80129e4 <tcp_slowtmr+0x594>)
 80128cc:	f240 5271 	movw	r2, #1393	; 0x571
 80128d0:	4947      	ldr	r1, [pc, #284]	; (80129f0 <tcp_slowtmr+0x5a0>)
 80128d2:	4846      	ldr	r0, [pc, #280]	; (80129ec <tcp_slowtmr+0x59c>)
 80128d4:	f008 fc2c 	bl	801b130 <iprintf>
        tcp_active_pcbs = pcb->next;
 80128d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	4a40      	ldr	r2, [pc, #256]	; (80129e0 <tcp_slowtmr+0x590>)
 80128de:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80128e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d013      	beq.n	8012910 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80128e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80128ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80128f0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80128f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f4:	3304      	adds	r3, #4
 80128f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128f8:	8ad2      	ldrh	r2, [r2, #22]
 80128fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128fc:	8b09      	ldrh	r1, [r1, #24]
 80128fe:	9102      	str	r1, [sp, #8]
 8012900:	9201      	str	r2, [sp, #4]
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	462b      	mov	r3, r5
 8012906:	4622      	mov	r2, r4
 8012908:	4601      	mov	r1, r0
 801290a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801290c:	f004 fe94 	bl	8017638 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012912:	691b      	ldr	r3, [r3, #16]
 8012914:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012918:	7d1b      	ldrb	r3, [r3, #20]
 801291a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012926:	6838      	ldr	r0, [r7, #0]
 8012928:	f7ff f894 	bl	8011a54 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801292c:	4b31      	ldr	r3, [pc, #196]	; (80129f4 <tcp_slowtmr+0x5a4>)
 801292e:	2200      	movs	r2, #0
 8012930:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d004      	beq.n	8012942 <tcp_slowtmr+0x4f2>
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	f06f 010c 	mvn.w	r1, #12
 801293e:	68b8      	ldr	r0, [r7, #8]
 8012940:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012942:	4b2c      	ldr	r3, [pc, #176]	; (80129f4 <tcp_slowtmr+0x5a4>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d037      	beq.n	80129ba <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801294a:	e592      	b.n	8012472 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012958:	7f1b      	ldrb	r3, [r3, #28]
 801295a:	3301      	adds	r3, #1
 801295c:	b2da      	uxtb	r2, r3
 801295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012960:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012964:	7f1a      	ldrb	r2, [r3, #28]
 8012966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012968:	7f5b      	ldrb	r3, [r3, #29]
 801296a:	429a      	cmp	r2, r3
 801296c:	d325      	bcc.n	80129ba <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012970:	2200      	movs	r2, #0
 8012972:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012974:	4b1f      	ldr	r3, [pc, #124]	; (80129f4 <tcp_slowtmr+0x5a4>)
 8012976:	2200      	movs	r2, #0
 8012978:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801297c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00b      	beq.n	801299c <tcp_slowtmr+0x54c>
 8012984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801298a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801298c:	6912      	ldr	r2, [r2, #16]
 801298e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012990:	4610      	mov	r0, r2
 8012992:	4798      	blx	r3
 8012994:	4603      	mov	r3, r0
 8012996:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801299a:	e002      	b.n	80129a2 <tcp_slowtmr+0x552>
 801299c:	2300      	movs	r3, #0
 801299e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80129a2:	4b14      	ldr	r3, [pc, #80]	; (80129f4 <tcp_slowtmr+0x5a4>)
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d000      	beq.n	80129ac <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80129aa:	e562      	b.n	8012472 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80129ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80129b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129b6:	f004 f88b 	bl	8016ad0 <tcp_output>
  while (pcb != NULL) {
 80129ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129bc:	2b00      	cmp	r3, #0
 80129be:	f47f ad5e 	bne.w	801247e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80129c2:	2300      	movs	r3, #0
 80129c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80129c6:	4b0c      	ldr	r3, [pc, #48]	; (80129f8 <tcp_slowtmr+0x5a8>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80129cc:	e069      	b.n	8012aa2 <tcp_slowtmr+0x652>
 80129ce:	bf00      	nop
 80129d0:	2000719c 	.word	0x2000719c
 80129d4:	000a4cb8 	.word	0x000a4cb8
 80129d8:	10624dd3 	.word	0x10624dd3
 80129dc:	000124f8 	.word	0x000124f8
 80129e0:	200071a8 	.word	0x200071a8
 80129e4:	0801e6dc 	.word	0x0801e6dc
 80129e8:	0801eb14 	.word	0x0801eb14
 80129ec:	0801e720 	.word	0x0801e720
 80129f0:	0801eb40 	.word	0x0801eb40
 80129f4:	200071b0 	.word	0x200071b0
 80129f8:	200071ac 	.word	0x200071ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80129fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fe:	7d1b      	ldrb	r3, [r3, #20]
 8012a00:	2b0a      	cmp	r3, #10
 8012a02:	d006      	beq.n	8012a12 <tcp_slowtmr+0x5c2>
 8012a04:	4b2b      	ldr	r3, [pc, #172]	; (8012ab4 <tcp_slowtmr+0x664>)
 8012a06:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012a0a:	492b      	ldr	r1, [pc, #172]	; (8012ab8 <tcp_slowtmr+0x668>)
 8012a0c:	482b      	ldr	r0, [pc, #172]	; (8012abc <tcp_slowtmr+0x66c>)
 8012a0e:	f008 fb8f 	bl	801b130 <iprintf>
    pcb_remove = 0;
 8012a12:	2300      	movs	r3, #0
 8012a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012a18:	4b29      	ldr	r3, [pc, #164]	; (8012ac0 <tcp_slowtmr+0x670>)
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1e:	6a1b      	ldr	r3, [r3, #32]
 8012a20:	1ad3      	subs	r3, r2, r3
 8012a22:	2bf0      	cmp	r3, #240	; 0xf0
 8012a24:	d904      	bls.n	8012a30 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d02f      	beq.n	8012a98 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a3a:	f000 fbdd 	bl	80131f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d010      	beq.n	8012a66 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012a44:	4b1f      	ldr	r3, [pc, #124]	; (8012ac4 <tcp_slowtmr+0x674>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d106      	bne.n	8012a5c <tcp_slowtmr+0x60c>
 8012a4e:	4b19      	ldr	r3, [pc, #100]	; (8012ab4 <tcp_slowtmr+0x664>)
 8012a50:	f240 52af 	movw	r2, #1455	; 0x5af
 8012a54:	491c      	ldr	r1, [pc, #112]	; (8012ac8 <tcp_slowtmr+0x678>)
 8012a56:	4819      	ldr	r0, [pc, #100]	; (8012abc <tcp_slowtmr+0x66c>)
 8012a58:	f008 fb6a 	bl	801b130 <iprintf>
        prev->next = pcb->next;
 8012a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5e:	68da      	ldr	r2, [r3, #12]
 8012a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a62:	60da      	str	r2, [r3, #12]
 8012a64:	e00f      	b.n	8012a86 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012a66:	4b17      	ldr	r3, [pc, #92]	; (8012ac4 <tcp_slowtmr+0x674>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d006      	beq.n	8012a7e <tcp_slowtmr+0x62e>
 8012a70:	4b10      	ldr	r3, [pc, #64]	; (8012ab4 <tcp_slowtmr+0x664>)
 8012a72:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012a76:	4915      	ldr	r1, [pc, #84]	; (8012acc <tcp_slowtmr+0x67c>)
 8012a78:	4810      	ldr	r0, [pc, #64]	; (8012abc <tcp_slowtmr+0x66c>)
 8012a7a:	f008 fb59 	bl	801b130 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	4a10      	ldr	r2, [pc, #64]	; (8012ac4 <tcp_slowtmr+0x674>)
 8012a84:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a88:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8c:	68db      	ldr	r3, [r3, #12]
 8012a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012a90:	69f8      	ldr	r0, [r7, #28]
 8012a92:	f7fe ffdf 	bl	8011a54 <tcp_free>
 8012a96:	e004      	b.n	8012aa2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d1a9      	bne.n	80129fc <tcp_slowtmr+0x5ac>
    }
  }
}
 8012aa8:	bf00      	nop
 8012aaa:	bf00      	nop
 8012aac:	3730      	adds	r7, #48	; 0x30
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8012ab2:	bf00      	nop
 8012ab4:	0801e6dc 	.word	0x0801e6dc
 8012ab8:	0801eb6c 	.word	0x0801eb6c
 8012abc:	0801e720 	.word	0x0801e720
 8012ac0:	2000719c 	.word	0x2000719c
 8012ac4:	200071ac 	.word	0x200071ac
 8012ac8:	0801eb9c 	.word	0x0801eb9c
 8012acc:	0801ebc4 	.word	0x0801ebc4

08012ad0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012ad6:	4b2d      	ldr	r3, [pc, #180]	; (8012b8c <tcp_fasttmr+0xbc>)
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	3301      	adds	r3, #1
 8012adc:	b2da      	uxtb	r2, r3
 8012ade:	4b2b      	ldr	r3, [pc, #172]	; (8012b8c <tcp_fasttmr+0xbc>)
 8012ae0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012ae2:	4b2b      	ldr	r3, [pc, #172]	; (8012b90 <tcp_fasttmr+0xc0>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012ae8:	e048      	b.n	8012b7c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	7f9a      	ldrb	r2, [r3, #30]
 8012aee:	4b27      	ldr	r3, [pc, #156]	; (8012b8c <tcp_fasttmr+0xbc>)
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d03f      	beq.n	8012b76 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012af6:	4b25      	ldr	r3, [pc, #148]	; (8012b8c <tcp_fasttmr+0xbc>)
 8012af8:	781a      	ldrb	r2, [r3, #0]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	8b5b      	ldrh	r3, [r3, #26]
 8012b02:	f003 0301 	and.w	r3, r3, #1
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d010      	beq.n	8012b2c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	8b5b      	ldrh	r3, [r3, #26]
 8012b0e:	f043 0302 	orr.w	r3, r3, #2
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f003 ffd9 	bl	8016ad0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	8b5b      	ldrh	r3, [r3, #26]
 8012b22:	f023 0303 	bic.w	r3, r3, #3
 8012b26:	b29a      	uxth	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	8b5b      	ldrh	r3, [r3, #26]
 8012b30:	f003 0308 	and.w	r3, r3, #8
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d009      	beq.n	8012b4c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	8b5b      	ldrh	r3, [r3, #26]
 8012b3c:	f023 0308 	bic.w	r3, r3, #8
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7ff f918 	bl	8011d7c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	68db      	ldr	r3, [r3, #12]
 8012b50:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d00a      	beq.n	8012b70 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012b5a:	4b0e      	ldr	r3, [pc, #56]	; (8012b94 <tcp_fasttmr+0xc4>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 f819 	bl	8012b98 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012b66:	4b0b      	ldr	r3, [pc, #44]	; (8012b94 <tcp_fasttmr+0xc4>)
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d000      	beq.n	8012b70 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012b6e:	e7b8      	b.n	8012ae2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	607b      	str	r3, [r7, #4]
 8012b74:	e002      	b.n	8012b7c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	68db      	ldr	r3, [r3, #12]
 8012b7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d1b3      	bne.n	8012aea <tcp_fasttmr+0x1a>
    }
  }
}
 8012b82:	bf00      	nop
 8012b84:	bf00      	nop
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	200071b2 	.word	0x200071b2
 8012b90:	200071a8 	.word	0x200071a8
 8012b94:	200071b0 	.word	0x200071b0

08012b98 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012b98:	b590      	push	{r4, r7, lr}
 8012b9a:	b085      	sub	sp, #20
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d109      	bne.n	8012bba <tcp_process_refused_data+0x22>
 8012ba6:	4b38      	ldr	r3, [pc, #224]	; (8012c88 <tcp_process_refused_data+0xf0>)
 8012ba8:	f240 6209 	movw	r2, #1545	; 0x609
 8012bac:	4937      	ldr	r1, [pc, #220]	; (8012c8c <tcp_process_refused_data+0xf4>)
 8012bae:	4838      	ldr	r0, [pc, #224]	; (8012c90 <tcp_process_refused_data+0xf8>)
 8012bb0:	f008 fabe 	bl	801b130 <iprintf>
 8012bb4:	f06f 030f 	mvn.w	r3, #15
 8012bb8:	e061      	b.n	8012c7e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bbe:	7b5b      	ldrb	r3, [r3, #13]
 8012bc0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bc6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00b      	beq.n	8012bf0 <tcp_process_refused_data+0x58>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6918      	ldr	r0, [r3, #16]
 8012be2:	2300      	movs	r3, #0
 8012be4:	68ba      	ldr	r2, [r7, #8]
 8012be6:	6879      	ldr	r1, [r7, #4]
 8012be8:	47a0      	blx	r4
 8012bea:	4603      	mov	r3, r0
 8012bec:	73fb      	strb	r3, [r7, #15]
 8012bee:	e007      	b.n	8012c00 <tcp_process_refused_data+0x68>
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	68ba      	ldr	r2, [r7, #8]
 8012bf4:	6879      	ldr	r1, [r7, #4]
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	f000 f8a6 	bl	8012d48 <tcp_recv_null>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d12b      	bne.n	8012c60 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012c08:	7bbb      	ldrb	r3, [r7, #14]
 8012c0a:	f003 0320 	and.w	r3, r3, #32
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d034      	beq.n	8012c7c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c16:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d005      	beq.n	8012c2a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c22:	3301      	adds	r3, #1
 8012c24:	b29a      	uxth	r2, r3
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00b      	beq.n	8012c4c <tcp_process_refused_data+0xb4>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6918      	ldr	r0, [r3, #16]
 8012c3e:	2300      	movs	r3, #0
 8012c40:	2200      	movs	r2, #0
 8012c42:	6879      	ldr	r1, [r7, #4]
 8012c44:	47a0      	blx	r4
 8012c46:	4603      	mov	r3, r0
 8012c48:	73fb      	strb	r3, [r7, #15]
 8012c4a:	e001      	b.n	8012c50 <tcp_process_refused_data+0xb8>
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c54:	f113 0f0d 	cmn.w	r3, #13
 8012c58:	d110      	bne.n	8012c7c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8012c5a:	f06f 030c 	mvn.w	r3, #12
 8012c5e:	e00e      	b.n	8012c7e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c64:	f113 0f0d 	cmn.w	r3, #13
 8012c68:	d102      	bne.n	8012c70 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012c6a:	f06f 030c 	mvn.w	r3, #12
 8012c6e:	e006      	b.n	8012c7e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	68ba      	ldr	r2, [r7, #8]
 8012c74:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012c76:	f06f 0304 	mvn.w	r3, #4
 8012c7a:	e000      	b.n	8012c7e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012c7c:	2300      	movs	r3, #0
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3714      	adds	r7, #20
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd90      	pop	{r4, r7, pc}
 8012c86:	bf00      	nop
 8012c88:	0801e6dc 	.word	0x0801e6dc
 8012c8c:	0801ebec 	.word	0x0801ebec
 8012c90:	0801e720 	.word	0x0801e720

08012c94 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012c9c:	e007      	b.n	8012cae <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f000 f80a 	bl	8012cbe <tcp_seg_free>
    seg = next;
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d1f4      	bne.n	8012c9e <tcp_segs_free+0xa>
  }
}
 8012cb4:	bf00      	nop
 8012cb6:	bf00      	nop
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b082      	sub	sp, #8
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00c      	beq.n	8012ce6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d004      	beq.n	8012cde <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	685b      	ldr	r3, [r3, #4]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7fe fb89 	bl	80113f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012cde:	6879      	ldr	r1, [r7, #4]
 8012ce0:	2003      	movs	r0, #3
 8012ce2:	f7fd fd0f 	bl	8010704 <memp_free>
  }
}
 8012ce6:	bf00      	nop
 8012ce8:	3708      	adds	r7, #8
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
	...

08012cf0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d106      	bne.n	8012d0c <tcp_seg_copy+0x1c>
 8012cfe:	4b0f      	ldr	r3, [pc, #60]	; (8012d3c <tcp_seg_copy+0x4c>)
 8012d00:	f240 6282 	movw	r2, #1666	; 0x682
 8012d04:	490e      	ldr	r1, [pc, #56]	; (8012d40 <tcp_seg_copy+0x50>)
 8012d06:	480f      	ldr	r0, [pc, #60]	; (8012d44 <tcp_seg_copy+0x54>)
 8012d08:	f008 fa12 	bl	801b130 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012d0c:	2003      	movs	r0, #3
 8012d0e:	f7fd fc89 	bl	8010624 <memp_malloc>
 8012d12:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d101      	bne.n	8012d1e <tcp_seg_copy+0x2e>
    return NULL;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	e00a      	b.n	8012d34 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012d1e:	2210      	movs	r2, #16
 8012d20:	6879      	ldr	r1, [r7, #4]
 8012d22:	68f8      	ldr	r0, [r7, #12]
 8012d24:	f008 fbe5 	bl	801b4f2 <memcpy>
  pbuf_ref(cseg->p);
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	685b      	ldr	r3, [r3, #4]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fe fbff 	bl	8011530 <pbuf_ref>
  return cseg;
 8012d32:	68fb      	ldr	r3, [r7, #12]
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	0801e6dc 	.word	0x0801e6dc
 8012d40:	0801ec30 	.word	0x0801ec30
 8012d44:	0801e720 	.word	0x0801e720

08012d48 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	60b9      	str	r1, [r7, #8]
 8012d52:	607a      	str	r2, [r7, #4]
 8012d54:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d109      	bne.n	8012d70 <tcp_recv_null+0x28>
 8012d5c:	4b12      	ldr	r3, [pc, #72]	; (8012da8 <tcp_recv_null+0x60>)
 8012d5e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012d62:	4912      	ldr	r1, [pc, #72]	; (8012dac <tcp_recv_null+0x64>)
 8012d64:	4812      	ldr	r0, [pc, #72]	; (8012db0 <tcp_recv_null+0x68>)
 8012d66:	f008 f9e3 	bl	801b130 <iprintf>
 8012d6a:	f06f 030f 	mvn.w	r3, #15
 8012d6e:	e016      	b.n	8012d9e <tcp_recv_null+0x56>

  if (p != NULL) {
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d009      	beq.n	8012d8a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	891b      	ldrh	r3, [r3, #8]
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	68b8      	ldr	r0, [r7, #8]
 8012d7e:	f7ff f9b7 	bl	80120f0 <tcp_recved>
    pbuf_free(p);
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7fe fb34 	bl	80113f0 <pbuf_free>
 8012d88:	e008      	b.n	8012d9c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d104      	bne.n	8012d9c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012d92:	68b8      	ldr	r0, [r7, #8]
 8012d94:	f7ff f85c 	bl	8011e50 <tcp_close>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	e000      	b.n	8012d9e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012d9c:	2300      	movs	r3, #0
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3710      	adds	r7, #16
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	0801e6dc 	.word	0x0801e6dc
 8012dac:	0801ec4c 	.word	0x0801ec4c
 8012db0:	0801e720 	.word	0x0801e720

08012db4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	4603      	mov	r3, r0
 8012dbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	db01      	blt.n	8012dca <tcp_kill_prio+0x16>
 8012dc6:	79fb      	ldrb	r3, [r7, #7]
 8012dc8:	e000      	b.n	8012dcc <tcp_kill_prio+0x18>
 8012dca:	237f      	movs	r3, #127	; 0x7f
 8012dcc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012dce:	7afb      	ldrb	r3, [r7, #11]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d034      	beq.n	8012e3e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012dd4:	7afb      	ldrb	r3, [r7, #11]
 8012dd6:	3b01      	subs	r3, #1
 8012dd8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012dde:	2300      	movs	r3, #0
 8012de0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012de2:	4b19      	ldr	r3, [pc, #100]	; (8012e48 <tcp_kill_prio+0x94>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	617b      	str	r3, [r7, #20]
 8012de8:	e01f      	b.n	8012e2a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	7d5b      	ldrb	r3, [r3, #21]
 8012dee:	7afa      	ldrb	r2, [r7, #11]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d80c      	bhi.n	8012e0e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012df8:	7afa      	ldrb	r2, [r7, #11]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d112      	bne.n	8012e24 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012dfe:	4b13      	ldr	r3, [pc, #76]	; (8012e4c <tcp_kill_prio+0x98>)
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	6a1b      	ldr	r3, [r3, #32]
 8012e06:	1ad3      	subs	r3, r2, r3
 8012e08:	68fa      	ldr	r2, [r7, #12]
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	d80a      	bhi.n	8012e24 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012e0e:	4b0f      	ldr	r3, [pc, #60]	; (8012e4c <tcp_kill_prio+0x98>)
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	6a1b      	ldr	r3, [r3, #32]
 8012e16:	1ad3      	subs	r3, r2, r3
 8012e18:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	7d5b      	ldrb	r3, [r3, #21]
 8012e22:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	68db      	ldr	r3, [r3, #12]
 8012e28:	617b      	str	r3, [r7, #20]
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d1dc      	bne.n	8012dea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d004      	beq.n	8012e40 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012e36:	6938      	ldr	r0, [r7, #16]
 8012e38:	f7ff f8f4 	bl	8012024 <tcp_abort>
 8012e3c:	e000      	b.n	8012e40 <tcp_kill_prio+0x8c>
    return;
 8012e3e:	bf00      	nop
  }
}
 8012e40:	3718      	adds	r7, #24
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	200071a8 	.word	0x200071a8
 8012e4c:	2000719c 	.word	0x2000719c

08012e50 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	4603      	mov	r3, r0
 8012e58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012e5a:	79fb      	ldrb	r3, [r7, #7]
 8012e5c:	2b08      	cmp	r3, #8
 8012e5e:	d009      	beq.n	8012e74 <tcp_kill_state+0x24>
 8012e60:	79fb      	ldrb	r3, [r7, #7]
 8012e62:	2b09      	cmp	r3, #9
 8012e64:	d006      	beq.n	8012e74 <tcp_kill_state+0x24>
 8012e66:	4b1a      	ldr	r3, [pc, #104]	; (8012ed0 <tcp_kill_state+0x80>)
 8012e68:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012e6c:	4919      	ldr	r1, [pc, #100]	; (8012ed4 <tcp_kill_state+0x84>)
 8012e6e:	481a      	ldr	r0, [pc, #104]	; (8012ed8 <tcp_kill_state+0x88>)
 8012e70:	f008 f95e 	bl	801b130 <iprintf>

  inactivity = 0;
 8012e74:	2300      	movs	r3, #0
 8012e76:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e7c:	4b17      	ldr	r3, [pc, #92]	; (8012edc <tcp_kill_state+0x8c>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	617b      	str	r3, [r7, #20]
 8012e82:	e017      	b.n	8012eb4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	7d1b      	ldrb	r3, [r3, #20]
 8012e88:	79fa      	ldrb	r2, [r7, #7]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d10f      	bne.n	8012eae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012e8e:	4b14      	ldr	r3, [pc, #80]	; (8012ee0 <tcp_kill_state+0x90>)
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	6a1b      	ldr	r3, [r3, #32]
 8012e96:	1ad3      	subs	r3, r2, r3
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d807      	bhi.n	8012eae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012e9e:	4b10      	ldr	r3, [pc, #64]	; (8012ee0 <tcp_kill_state+0x90>)
 8012ea0:	681a      	ldr	r2, [r3, #0]
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	6a1b      	ldr	r3, [r3, #32]
 8012ea6:	1ad3      	subs	r3, r2, r3
 8012ea8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	68db      	ldr	r3, [r3, #12]
 8012eb2:	617b      	str	r3, [r7, #20]
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d1e4      	bne.n	8012e84 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d003      	beq.n	8012ec8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	6938      	ldr	r0, [r7, #16]
 8012ec4:	f7fe fff0 	bl	8011ea8 <tcp_abandon>
  }
}
 8012ec8:	bf00      	nop
 8012eca:	3718      	adds	r7, #24
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	0801e6dc 	.word	0x0801e6dc
 8012ed4:	0801ec68 	.word	0x0801ec68
 8012ed8:	0801e720 	.word	0x0801e720
 8012edc:	200071a8 	.word	0x200071a8
 8012ee0:	2000719c 	.word	0x2000719c

08012ee4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ef2:	4b12      	ldr	r3, [pc, #72]	; (8012f3c <tcp_kill_timewait+0x58>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	60fb      	str	r3, [r7, #12]
 8012ef8:	e012      	b.n	8012f20 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012efa:	4b11      	ldr	r3, [pc, #68]	; (8012f40 <tcp_kill_timewait+0x5c>)
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6a1b      	ldr	r3, [r3, #32]
 8012f02:	1ad3      	subs	r3, r2, r3
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d807      	bhi.n	8012f1a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012f0a:	4b0d      	ldr	r3, [pc, #52]	; (8012f40 <tcp_kill_timewait+0x5c>)
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	6a1b      	ldr	r3, [r3, #32]
 8012f12:	1ad3      	subs	r3, r2, r3
 8012f14:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	68db      	ldr	r3, [r3, #12]
 8012f1e:	60fb      	str	r3, [r7, #12]
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1e9      	bne.n	8012efa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d002      	beq.n	8012f32 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012f2c:	68b8      	ldr	r0, [r7, #8]
 8012f2e:	f7ff f879 	bl	8012024 <tcp_abort>
  }
}
 8012f32:	bf00      	nop
 8012f34:	3710      	adds	r7, #16
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	200071ac 	.word	0x200071ac
 8012f40:	2000719c 	.word	0x2000719c

08012f44 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012f4a:	4b10      	ldr	r3, [pc, #64]	; (8012f8c <tcp_handle_closepend+0x48>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012f50:	e014      	b.n	8012f7c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	8b5b      	ldrh	r3, [r3, #26]
 8012f5c:	f003 0308 	and.w	r3, r3, #8
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d009      	beq.n	8012f78 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	8b5b      	ldrh	r3, [r3, #26]
 8012f68:	f023 0308 	bic.w	r3, r3, #8
 8012f6c:	b29a      	uxth	r2, r3
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7fe ff02 	bl	8011d7c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d1e7      	bne.n	8012f52 <tcp_handle_closepend+0xe>
  }
}
 8012f82:	bf00      	nop
 8012f84:	bf00      	nop
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	200071a8 	.word	0x200071a8

08012f90 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	4603      	mov	r3, r0
 8012f98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012f9a:	2001      	movs	r0, #1
 8012f9c:	f7fd fb42 	bl	8010624 <memp_malloc>
 8012fa0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d126      	bne.n	8012ff6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012fa8:	f7ff ffcc 	bl	8012f44 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012fac:	f7ff ff9a 	bl	8012ee4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012fb0:	2001      	movs	r0, #1
 8012fb2:	f7fd fb37 	bl	8010624 <memp_malloc>
 8012fb6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d11b      	bne.n	8012ff6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012fbe:	2009      	movs	r0, #9
 8012fc0:	f7ff ff46 	bl	8012e50 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012fc4:	2001      	movs	r0, #1
 8012fc6:	f7fd fb2d 	bl	8010624 <memp_malloc>
 8012fca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d111      	bne.n	8012ff6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012fd2:	2008      	movs	r0, #8
 8012fd4:	f7ff ff3c 	bl	8012e50 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012fd8:	2001      	movs	r0, #1
 8012fda:	f7fd fb23 	bl	8010624 <memp_malloc>
 8012fde:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d107      	bne.n	8012ff6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012fe6:	79fb      	ldrb	r3, [r7, #7]
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7ff fee3 	bl	8012db4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012fee:	2001      	movs	r0, #1
 8012ff0:	f7fd fb18 	bl	8010624 <memp_malloc>
 8012ff4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d03f      	beq.n	801307c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012ffc:	229c      	movs	r2, #156	; 0x9c
 8012ffe:	2100      	movs	r1, #0
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f008 f9eb 	bl	801b3dc <memset>
    pcb->prio = prio;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	79fa      	ldrb	r2, [r7, #7]
 801300a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013012:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801301c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	22ff      	movs	r2, #255	; 0xff
 801302a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013032:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	2206      	movs	r2, #6
 8013038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	2206      	movs	r2, #6
 8013040:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013048:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	2201      	movs	r2, #1
 801304e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013052:	4b0d      	ldr	r3, [pc, #52]	; (8013088 <tcp_alloc+0xf8>)
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801305a:	4b0c      	ldr	r3, [pc, #48]	; (801308c <tcp_alloc+0xfc>)
 801305c:	781a      	ldrb	r2, [r3, #0]
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013068:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	4a08      	ldr	r2, [pc, #32]	; (8013090 <tcp_alloc+0x100>)
 8013070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	4a07      	ldr	r2, [pc, #28]	; (8013094 <tcp_alloc+0x104>)
 8013078:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801307c:	68fb      	ldr	r3, [r7, #12]
}
 801307e:	4618      	mov	r0, r3
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	2000719c 	.word	0x2000719c
 801308c:	200071b2 	.word	0x200071b2
 8013090:	08012d49 	.word	0x08012d49
 8013094:	006ddd00 	.word	0x006ddd00

08013098 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 801309c:	2040      	movs	r0, #64	; 0x40
 801309e:	f7ff ff77 	bl	8012f90 <tcp_alloc>
 80130a2:	4603      	mov	r3, r0
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b083      	sub	sp, #12
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d002      	beq.n	80130be <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	683a      	ldr	r2, [r7, #0]
 80130bc:	611a      	str	r2, [r3, #16]
  }
}
 80130be:	bf00      	nop
 80130c0:	370c      	adds	r7, #12
 80130c2:	46bd      	mov	sp, r7
 80130c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c8:	4770      	bx	lr
	...

080130cc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00e      	beq.n	80130fa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	7d1b      	ldrb	r3, [r3, #20]
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	d106      	bne.n	80130f2 <tcp_recv+0x26>
 80130e4:	4b07      	ldr	r3, [pc, #28]	; (8013104 <tcp_recv+0x38>)
 80130e6:	f240 72df 	movw	r2, #2015	; 0x7df
 80130ea:	4907      	ldr	r1, [pc, #28]	; (8013108 <tcp_recv+0x3c>)
 80130ec:	4807      	ldr	r0, [pc, #28]	; (801310c <tcp_recv+0x40>)
 80130ee:	f008 f81f 	bl	801b130 <iprintf>
    pcb->recv = recv;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	683a      	ldr	r2, [r7, #0]
 80130f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80130fa:	bf00      	nop
 80130fc:	3708      	adds	r7, #8
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	0801e6dc 	.word	0x0801e6dc
 8013108:	0801ec78 	.word	0x0801ec78
 801310c:	0801e720 	.word	0x0801e720

08013110 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00e      	beq.n	801313e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	7d1b      	ldrb	r3, [r3, #20]
 8013124:	2b01      	cmp	r3, #1
 8013126:	d106      	bne.n	8013136 <tcp_sent+0x26>
 8013128:	4b07      	ldr	r3, [pc, #28]	; (8013148 <tcp_sent+0x38>)
 801312a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801312e:	4907      	ldr	r1, [pc, #28]	; (801314c <tcp_sent+0x3c>)
 8013130:	4807      	ldr	r0, [pc, #28]	; (8013150 <tcp_sent+0x40>)
 8013132:	f007 fffd 	bl	801b130 <iprintf>
    pcb->sent = sent;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	683a      	ldr	r2, [r7, #0]
 801313a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801313e:	bf00      	nop
 8013140:	3708      	adds	r7, #8
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	0801e6dc 	.word	0x0801e6dc
 801314c:	0801eca0 	.word	0x0801eca0
 8013150:	0801e720 	.word	0x0801e720

08013154 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00e      	beq.n	8013182 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	7d1b      	ldrb	r3, [r3, #20]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d106      	bne.n	801317a <tcp_err+0x26>
 801316c:	4b07      	ldr	r3, [pc, #28]	; (801318c <tcp_err+0x38>)
 801316e:	f640 020d 	movw	r2, #2061	; 0x80d
 8013172:	4907      	ldr	r1, [pc, #28]	; (8013190 <tcp_err+0x3c>)
 8013174:	4807      	ldr	r0, [pc, #28]	; (8013194 <tcp_err+0x40>)
 8013176:	f007 ffdb 	bl	801b130 <iprintf>
    pcb->errf = err;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	683a      	ldr	r2, [r7, #0]
 801317e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013182:	bf00      	nop
 8013184:	3708      	adds	r7, #8
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	0801e6dc 	.word	0x0801e6dc
 8013190:	0801ecc8 	.word	0x0801ecc8
 8013194:	0801e720 	.word	0x0801e720

08013198 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	60f8      	str	r0, [r7, #12]
 80131a0:	60b9      	str	r1, [r7, #8]
 80131a2:	4613      	mov	r3, r2
 80131a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d107      	bne.n	80131bc <tcp_poll+0x24>
 80131ac:	4b0e      	ldr	r3, [pc, #56]	; (80131e8 <tcp_poll+0x50>)
 80131ae:	f640 023d 	movw	r2, #2109	; 0x83d
 80131b2:	490e      	ldr	r1, [pc, #56]	; (80131ec <tcp_poll+0x54>)
 80131b4:	480e      	ldr	r0, [pc, #56]	; (80131f0 <tcp_poll+0x58>)
 80131b6:	f007 ffbb 	bl	801b130 <iprintf>
 80131ba:	e011      	b.n	80131e0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	7d1b      	ldrb	r3, [r3, #20]
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d106      	bne.n	80131d2 <tcp_poll+0x3a>
 80131c4:	4b08      	ldr	r3, [pc, #32]	; (80131e8 <tcp_poll+0x50>)
 80131c6:	f640 023e 	movw	r2, #2110	; 0x83e
 80131ca:	490a      	ldr	r1, [pc, #40]	; (80131f4 <tcp_poll+0x5c>)
 80131cc:	4808      	ldr	r0, [pc, #32]	; (80131f0 <tcp_poll+0x58>)
 80131ce:	f007 ffaf 	bl	801b130 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	68ba      	ldr	r2, [r7, #8]
 80131d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	79fa      	ldrb	r2, [r7, #7]
 80131de:	775a      	strb	r2, [r3, #29]
}
 80131e0:	3710      	adds	r7, #16
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	0801e6dc 	.word	0x0801e6dc
 80131ec:	0801ecf0 	.word	0x0801ecf0
 80131f0:	0801e720 	.word	0x0801e720
 80131f4:	0801ed08 	.word	0x0801ed08

080131f8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d107      	bne.n	8013216 <tcp_pcb_purge+0x1e>
 8013206:	4b21      	ldr	r3, [pc, #132]	; (801328c <tcp_pcb_purge+0x94>)
 8013208:	f640 0251 	movw	r2, #2129	; 0x851
 801320c:	4920      	ldr	r1, [pc, #128]	; (8013290 <tcp_pcb_purge+0x98>)
 801320e:	4821      	ldr	r0, [pc, #132]	; (8013294 <tcp_pcb_purge+0x9c>)
 8013210:	f007 ff8e 	bl	801b130 <iprintf>
 8013214:	e037      	b.n	8013286 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	7d1b      	ldrb	r3, [r3, #20]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d033      	beq.n	8013286 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013222:	2b0a      	cmp	r3, #10
 8013224:	d02f      	beq.n	8013286 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801322a:	2b01      	cmp	r3, #1
 801322c:	d02b      	beq.n	8013286 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013232:	2b00      	cmp	r3, #0
 8013234:	d007      	beq.n	8013246 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801323a:	4618      	mov	r0, r3
 801323c:	f7fe f8d8 	bl	80113f0 <pbuf_free>
      pcb->refused_data = NULL;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2200      	movs	r2, #0
 8013244:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801324a:	2b00      	cmp	r3, #0
 801324c:	d002      	beq.n	8013254 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 f986 	bl	8013560 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801325a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013260:	4618      	mov	r0, r3
 8013262:	f7ff fd17 	bl	8012c94 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801326a:	4618      	mov	r0, r3
 801326c:	f7ff fd12 	bl	8012c94 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	66da      	str	r2, [r3, #108]	; 0x6c
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2200      	movs	r2, #0
 8013282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013286:	3708      	adds	r7, #8
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}
 801328c:	0801e6dc 	.word	0x0801e6dc
 8013290:	0801ed28 	.word	0x0801ed28
 8013294:	0801e720 	.word	0x0801e720

08013298 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d106      	bne.n	80132b6 <tcp_pcb_remove+0x1e>
 80132a8:	4b3e      	ldr	r3, [pc, #248]	; (80133a4 <tcp_pcb_remove+0x10c>)
 80132aa:	f640 0283 	movw	r2, #2179	; 0x883
 80132ae:	493e      	ldr	r1, [pc, #248]	; (80133a8 <tcp_pcb_remove+0x110>)
 80132b0:	483e      	ldr	r0, [pc, #248]	; (80133ac <tcp_pcb_remove+0x114>)
 80132b2:	f007 ff3d 	bl	801b130 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d106      	bne.n	80132ca <tcp_pcb_remove+0x32>
 80132bc:	4b39      	ldr	r3, [pc, #228]	; (80133a4 <tcp_pcb_remove+0x10c>)
 80132be:	f640 0284 	movw	r2, #2180	; 0x884
 80132c2:	493b      	ldr	r1, [pc, #236]	; (80133b0 <tcp_pcb_remove+0x118>)
 80132c4:	4839      	ldr	r0, [pc, #228]	; (80133ac <tcp_pcb_remove+0x114>)
 80132c6:	f007 ff33 	bl	801b130 <iprintf>

  TCP_RMV(pcblist, pcb);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	683a      	ldr	r2, [r7, #0]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d105      	bne.n	80132e0 <tcp_pcb_remove+0x48>
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	68da      	ldr	r2, [r3, #12]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	601a      	str	r2, [r3, #0]
 80132de:	e013      	b.n	8013308 <tcp_pcb_remove+0x70>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	60fb      	str	r3, [r7, #12]
 80132e6:	e00c      	b.n	8013302 <tcp_pcb_remove+0x6a>
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	68db      	ldr	r3, [r3, #12]
 80132ec:	683a      	ldr	r2, [r7, #0]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d104      	bne.n	80132fc <tcp_pcb_remove+0x64>
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	68da      	ldr	r2, [r3, #12]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	60da      	str	r2, [r3, #12]
 80132fa:	e005      	b.n	8013308 <tcp_pcb_remove+0x70>
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	60fb      	str	r3, [r7, #12]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d1ef      	bne.n	80132e8 <tcp_pcb_remove+0x50>
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	2200      	movs	r2, #0
 801330c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801330e:	6838      	ldr	r0, [r7, #0]
 8013310:	f7ff ff72 	bl	80131f8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	7d1b      	ldrb	r3, [r3, #20]
 8013318:	2b0a      	cmp	r3, #10
 801331a:	d013      	beq.n	8013344 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013320:	2b01      	cmp	r3, #1
 8013322:	d00f      	beq.n	8013344 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	8b5b      	ldrh	r3, [r3, #26]
 8013328:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801332c:	2b00      	cmp	r3, #0
 801332e:	d009      	beq.n	8013344 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	8b5b      	ldrh	r3, [r3, #26]
 8013334:	f043 0302 	orr.w	r3, r3, #2
 8013338:	b29a      	uxth	r2, r3
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801333e:	6838      	ldr	r0, [r7, #0]
 8013340:	f003 fbc6 	bl	8016ad0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	7d1b      	ldrb	r3, [r3, #20]
 8013348:	2b01      	cmp	r3, #1
 801334a:	d020      	beq.n	801338e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013350:	2b00      	cmp	r3, #0
 8013352:	d006      	beq.n	8013362 <tcp_pcb_remove+0xca>
 8013354:	4b13      	ldr	r3, [pc, #76]	; (80133a4 <tcp_pcb_remove+0x10c>)
 8013356:	f640 0293 	movw	r2, #2195	; 0x893
 801335a:	4916      	ldr	r1, [pc, #88]	; (80133b4 <tcp_pcb_remove+0x11c>)
 801335c:	4813      	ldr	r0, [pc, #76]	; (80133ac <tcp_pcb_remove+0x114>)
 801335e:	f007 fee7 	bl	801b130 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013366:	2b00      	cmp	r3, #0
 8013368:	d006      	beq.n	8013378 <tcp_pcb_remove+0xe0>
 801336a:	4b0e      	ldr	r3, [pc, #56]	; (80133a4 <tcp_pcb_remove+0x10c>)
 801336c:	f640 0294 	movw	r2, #2196	; 0x894
 8013370:	4911      	ldr	r1, [pc, #68]	; (80133b8 <tcp_pcb_remove+0x120>)
 8013372:	480e      	ldr	r0, [pc, #56]	; (80133ac <tcp_pcb_remove+0x114>)
 8013374:	f007 fedc 	bl	801b130 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801337c:	2b00      	cmp	r3, #0
 801337e:	d006      	beq.n	801338e <tcp_pcb_remove+0xf6>
 8013380:	4b08      	ldr	r3, [pc, #32]	; (80133a4 <tcp_pcb_remove+0x10c>)
 8013382:	f640 0296 	movw	r2, #2198	; 0x896
 8013386:	490d      	ldr	r1, [pc, #52]	; (80133bc <tcp_pcb_remove+0x124>)
 8013388:	4808      	ldr	r0, [pc, #32]	; (80133ac <tcp_pcb_remove+0x114>)
 801338a:	f007 fed1 	bl	801b130 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	2200      	movs	r2, #0
 8013392:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	2200      	movs	r2, #0
 8013398:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801339a:	bf00      	nop
 801339c:	3710      	adds	r7, #16
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	0801e6dc 	.word	0x0801e6dc
 80133a8:	0801ed44 	.word	0x0801ed44
 80133ac:	0801e720 	.word	0x0801e720
 80133b0:	0801ed60 	.word	0x0801ed60
 80133b4:	0801ed80 	.word	0x0801ed80
 80133b8:	0801ed98 	.word	0x0801ed98
 80133bc:	0801edb4 	.word	0x0801edb4

080133c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d106      	bne.n	80133dc <tcp_next_iss+0x1c>
 80133ce:	4b0a      	ldr	r3, [pc, #40]	; (80133f8 <tcp_next_iss+0x38>)
 80133d0:	f640 02af 	movw	r2, #2223	; 0x8af
 80133d4:	4909      	ldr	r1, [pc, #36]	; (80133fc <tcp_next_iss+0x3c>)
 80133d6:	480a      	ldr	r0, [pc, #40]	; (8013400 <tcp_next_iss+0x40>)
 80133d8:	f007 feaa 	bl	801b130 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80133dc:	4b09      	ldr	r3, [pc, #36]	; (8013404 <tcp_next_iss+0x44>)
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	4b09      	ldr	r3, [pc, #36]	; (8013408 <tcp_next_iss+0x48>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	4413      	add	r3, r2
 80133e6:	4a07      	ldr	r2, [pc, #28]	; (8013404 <tcp_next_iss+0x44>)
 80133e8:	6013      	str	r3, [r2, #0]
  return iss;
 80133ea:	4b06      	ldr	r3, [pc, #24]	; (8013404 <tcp_next_iss+0x44>)
 80133ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3708      	adds	r7, #8
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	0801e6dc 	.word	0x0801e6dc
 80133fc:	0801edcc 	.word	0x0801edcc
 8013400:	0801e720 	.word	0x0801e720
 8013404:	20000160 	.word	0x20000160
 8013408:	2000719c 	.word	0x2000719c

0801340c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b086      	sub	sp, #24
 8013410:	af00      	add	r7, sp, #0
 8013412:	4603      	mov	r3, r0
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	607a      	str	r2, [r7, #4]
 8013418:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d106      	bne.n	801342e <tcp_eff_send_mss_netif+0x22>
 8013420:	4b14      	ldr	r3, [pc, #80]	; (8013474 <tcp_eff_send_mss_netif+0x68>)
 8013422:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013426:	4914      	ldr	r1, [pc, #80]	; (8013478 <tcp_eff_send_mss_netif+0x6c>)
 8013428:	4814      	ldr	r0, [pc, #80]	; (801347c <tcp_eff_send_mss_netif+0x70>)
 801342a:	f007 fe81 	bl	801b130 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d101      	bne.n	8013438 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013434:	89fb      	ldrh	r3, [r7, #14]
 8013436:	e019      	b.n	801346c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801343c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801343e:	8afb      	ldrh	r3, [r7, #22]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d012      	beq.n	801346a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013444:	2328      	movs	r3, #40	; 0x28
 8013446:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013448:	8afa      	ldrh	r2, [r7, #22]
 801344a:	8abb      	ldrh	r3, [r7, #20]
 801344c:	429a      	cmp	r2, r3
 801344e:	d904      	bls.n	801345a <tcp_eff_send_mss_netif+0x4e>
 8013450:	8afa      	ldrh	r2, [r7, #22]
 8013452:	8abb      	ldrh	r3, [r7, #20]
 8013454:	1ad3      	subs	r3, r2, r3
 8013456:	b29b      	uxth	r3, r3
 8013458:	e000      	b.n	801345c <tcp_eff_send_mss_netif+0x50>
 801345a:	2300      	movs	r3, #0
 801345c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801345e:	8a7a      	ldrh	r2, [r7, #18]
 8013460:	89fb      	ldrh	r3, [r7, #14]
 8013462:	4293      	cmp	r3, r2
 8013464:	bf28      	it	cs
 8013466:	4613      	movcs	r3, r2
 8013468:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801346a:	89fb      	ldrh	r3, [r7, #14]
}
 801346c:	4618      	mov	r0, r3
 801346e:	3718      	adds	r7, #24
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	0801e6dc 	.word	0x0801e6dc
 8013478:	0801ede8 	.word	0x0801ede8
 801347c:	0801e720 	.word	0x0801e720

08013480 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d119      	bne.n	80134c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013494:	4b10      	ldr	r3, [pc, #64]	; (80134d8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013496:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801349a:	4910      	ldr	r1, [pc, #64]	; (80134dc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801349c:	4810      	ldr	r0, [pc, #64]	; (80134e0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801349e:	f007 fe47 	bl	801b130 <iprintf>

  while (pcb != NULL) {
 80134a2:	e011      	b.n	80134c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681a      	ldr	r2, [r3, #0]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d108      	bne.n	80134c2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	68db      	ldr	r3, [r3, #12]
 80134b4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f7fe fdb4 	bl	8012024 <tcp_abort>
      pcb = next;
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	60fb      	str	r3, [r7, #12]
 80134c0:	e002      	b.n	80134c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d1ea      	bne.n	80134a4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80134ce:	bf00      	nop
 80134d0:	bf00      	nop
 80134d2:	3710      	adds	r7, #16
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	0801e6dc 	.word	0x0801e6dc
 80134dc:	0801ee10 	.word	0x0801ee10
 80134e0:	0801e720 	.word	0x0801e720

080134e4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d02a      	beq.n	801354a <tcp_netif_ip_addr_changed+0x66>
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d026      	beq.n	801354a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80134fc:	4b15      	ldr	r3, [pc, #84]	; (8013554 <tcp_netif_ip_addr_changed+0x70>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4619      	mov	r1, r3
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f7ff ffbc 	bl	8013480 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013508:	4b13      	ldr	r3, [pc, #76]	; (8013558 <tcp_netif_ip_addr_changed+0x74>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	4619      	mov	r1, r3
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f7ff ffb6 	bl	8013480 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d017      	beq.n	801354a <tcp_netif_ip_addr_changed+0x66>
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d013      	beq.n	801354a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013522:	4b0e      	ldr	r3, [pc, #56]	; (801355c <tcp_netif_ip_addr_changed+0x78>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	60fb      	str	r3, [r7, #12]
 8013528:	e00c      	b.n	8013544 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	429a      	cmp	r2, r3
 8013534:	d103      	bne.n	801353e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	60fb      	str	r3, [r7, #12]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d1ef      	bne.n	801352a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801354a:	bf00      	nop
 801354c:	3710      	adds	r7, #16
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	200071a8 	.word	0x200071a8
 8013558:	200071a0 	.word	0x200071a0
 801355c:	200071a4 	.word	0x200071a4

08013560 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801356c:	2b00      	cmp	r3, #0
 801356e:	d007      	beq.n	8013580 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013574:	4618      	mov	r0, r3
 8013576:	f7ff fb8d 	bl	8012c94 <tcp_segs_free>
    pcb->ooseq = NULL;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2200      	movs	r2, #0
 801357e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013580:	bf00      	nop
 8013582:	3708      	adds	r7, #8
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013588:	b590      	push	{r4, r7, lr}
 801358a:	b08d      	sub	sp, #52	; 0x34
 801358c:	af04      	add	r7, sp, #16
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d105      	bne.n	80135a4 <tcp_input+0x1c>
 8013598:	4b9b      	ldr	r3, [pc, #620]	; (8013808 <tcp_input+0x280>)
 801359a:	2283      	movs	r2, #131	; 0x83
 801359c:	499b      	ldr	r1, [pc, #620]	; (801380c <tcp_input+0x284>)
 801359e:	489c      	ldr	r0, [pc, #624]	; (8013810 <tcp_input+0x288>)
 80135a0:	f007 fdc6 	bl	801b130 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	685b      	ldr	r3, [r3, #4]
 80135a8:	4a9a      	ldr	r2, [pc, #616]	; (8013814 <tcp_input+0x28c>)
 80135aa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	895b      	ldrh	r3, [r3, #10]
 80135b0:	2b13      	cmp	r3, #19
 80135b2:	f240 83d1 	bls.w	8013d58 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80135b6:	4b98      	ldr	r3, [pc, #608]	; (8013818 <tcp_input+0x290>)
 80135b8:	695b      	ldr	r3, [r3, #20]
 80135ba:	4a97      	ldr	r2, [pc, #604]	; (8013818 <tcp_input+0x290>)
 80135bc:	6812      	ldr	r2, [r2, #0]
 80135be:	4611      	mov	r1, r2
 80135c0:	4618      	mov	r0, r3
 80135c2:	f006 f895 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	f040 83c7 	bne.w	8013d5c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80135ce:	4b92      	ldr	r3, [pc, #584]	; (8013818 <tcp_input+0x290>)
 80135d0:	695b      	ldr	r3, [r3, #20]
 80135d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80135d6:	2be0      	cmp	r3, #224	; 0xe0
 80135d8:	f000 83c0 	beq.w	8013d5c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80135dc:	4b8d      	ldr	r3, [pc, #564]	; (8013814 <tcp_input+0x28c>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	899b      	ldrh	r3, [r3, #12]
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7fc faff 	bl	800fbe8 <lwip_htons>
 80135ea:	4603      	mov	r3, r0
 80135ec:	0b1b      	lsrs	r3, r3, #12
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80135f6:	7cbb      	ldrb	r3, [r7, #18]
 80135f8:	2b13      	cmp	r3, #19
 80135fa:	f240 83b1 	bls.w	8013d60 <tcp_input+0x7d8>
 80135fe:	7cbb      	ldrb	r3, [r7, #18]
 8013600:	b29a      	uxth	r2, r3
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	891b      	ldrh	r3, [r3, #8]
 8013606:	429a      	cmp	r2, r3
 8013608:	f200 83aa 	bhi.w	8013d60 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801360c:	7cbb      	ldrb	r3, [r7, #18]
 801360e:	b29b      	uxth	r3, r3
 8013610:	3b14      	subs	r3, #20
 8013612:	b29a      	uxth	r2, r3
 8013614:	4b81      	ldr	r3, [pc, #516]	; (801381c <tcp_input+0x294>)
 8013616:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013618:	4b81      	ldr	r3, [pc, #516]	; (8013820 <tcp_input+0x298>)
 801361a:	2200      	movs	r2, #0
 801361c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	895a      	ldrh	r2, [r3, #10]
 8013622:	7cbb      	ldrb	r3, [r7, #18]
 8013624:	b29b      	uxth	r3, r3
 8013626:	429a      	cmp	r2, r3
 8013628:	d309      	bcc.n	801363e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801362a:	4b7c      	ldr	r3, [pc, #496]	; (801381c <tcp_input+0x294>)
 801362c:	881a      	ldrh	r2, [r3, #0]
 801362e:	4b7d      	ldr	r3, [pc, #500]	; (8013824 <tcp_input+0x29c>)
 8013630:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013632:	7cbb      	ldrb	r3, [r7, #18]
 8013634:	4619      	mov	r1, r3
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7fd fe54 	bl	80112e4 <pbuf_remove_header>
 801363c:	e04e      	b.n	80136dc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d105      	bne.n	8013652 <tcp_input+0xca>
 8013646:	4b70      	ldr	r3, [pc, #448]	; (8013808 <tcp_input+0x280>)
 8013648:	22c2      	movs	r2, #194	; 0xc2
 801364a:	4977      	ldr	r1, [pc, #476]	; (8013828 <tcp_input+0x2a0>)
 801364c:	4870      	ldr	r0, [pc, #448]	; (8013810 <tcp_input+0x288>)
 801364e:	f007 fd6f 	bl	801b130 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013652:	2114      	movs	r1, #20
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f7fd fe45 	bl	80112e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	895a      	ldrh	r2, [r3, #10]
 801365e:	4b71      	ldr	r3, [pc, #452]	; (8013824 <tcp_input+0x29c>)
 8013660:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013662:	4b6e      	ldr	r3, [pc, #440]	; (801381c <tcp_input+0x294>)
 8013664:	881a      	ldrh	r2, [r3, #0]
 8013666:	4b6f      	ldr	r3, [pc, #444]	; (8013824 <tcp_input+0x29c>)
 8013668:	881b      	ldrh	r3, [r3, #0]
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801366e:	4b6d      	ldr	r3, [pc, #436]	; (8013824 <tcp_input+0x29c>)
 8013670:	881b      	ldrh	r3, [r3, #0]
 8013672:	4619      	mov	r1, r3
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f7fd fe35 	bl	80112e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	895b      	ldrh	r3, [r3, #10]
 8013680:	8a3a      	ldrh	r2, [r7, #16]
 8013682:	429a      	cmp	r2, r3
 8013684:	f200 836e 	bhi.w	8013d64 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	4a64      	ldr	r2, [pc, #400]	; (8013820 <tcp_input+0x298>)
 8013690:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	8a3a      	ldrh	r2, [r7, #16]
 8013698:	4611      	mov	r1, r2
 801369a:	4618      	mov	r0, r3
 801369c:	f7fd fe22 	bl	80112e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	891a      	ldrh	r2, [r3, #8]
 80136a4:	8a3b      	ldrh	r3, [r7, #16]
 80136a6:	1ad3      	subs	r3, r2, r3
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	895b      	ldrh	r3, [r3, #10]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d005      	beq.n	80136c2 <tcp_input+0x13a>
 80136b6:	4b54      	ldr	r3, [pc, #336]	; (8013808 <tcp_input+0x280>)
 80136b8:	22df      	movs	r2, #223	; 0xdf
 80136ba:	495c      	ldr	r1, [pc, #368]	; (801382c <tcp_input+0x2a4>)
 80136bc:	4854      	ldr	r0, [pc, #336]	; (8013810 <tcp_input+0x288>)
 80136be:	f007 fd37 	bl	801b130 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	891a      	ldrh	r2, [r3, #8]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	891b      	ldrh	r3, [r3, #8]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d005      	beq.n	80136dc <tcp_input+0x154>
 80136d0:	4b4d      	ldr	r3, [pc, #308]	; (8013808 <tcp_input+0x280>)
 80136d2:	22e0      	movs	r2, #224	; 0xe0
 80136d4:	4956      	ldr	r1, [pc, #344]	; (8013830 <tcp_input+0x2a8>)
 80136d6:	484e      	ldr	r0, [pc, #312]	; (8013810 <tcp_input+0x288>)
 80136d8:	f007 fd2a 	bl	801b130 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80136dc:	4b4d      	ldr	r3, [pc, #308]	; (8013814 <tcp_input+0x28c>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	881b      	ldrh	r3, [r3, #0]
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	4a4b      	ldr	r2, [pc, #300]	; (8013814 <tcp_input+0x28c>)
 80136e6:	6814      	ldr	r4, [r2, #0]
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7fc fa7d 	bl	800fbe8 <lwip_htons>
 80136ee:	4603      	mov	r3, r0
 80136f0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80136f2:	4b48      	ldr	r3, [pc, #288]	; (8013814 <tcp_input+0x28c>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	885b      	ldrh	r3, [r3, #2]
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	4a46      	ldr	r2, [pc, #280]	; (8013814 <tcp_input+0x28c>)
 80136fc:	6814      	ldr	r4, [r2, #0]
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fc fa72 	bl	800fbe8 <lwip_htons>
 8013704:	4603      	mov	r3, r0
 8013706:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013708:	4b42      	ldr	r3, [pc, #264]	; (8013814 <tcp_input+0x28c>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	4a41      	ldr	r2, [pc, #260]	; (8013814 <tcp_input+0x28c>)
 8013710:	6814      	ldr	r4, [r2, #0]
 8013712:	4618      	mov	r0, r3
 8013714:	f7fc fa7d 	bl	800fc12 <lwip_htonl>
 8013718:	4603      	mov	r3, r0
 801371a:	6063      	str	r3, [r4, #4]
 801371c:	6863      	ldr	r3, [r4, #4]
 801371e:	4a45      	ldr	r2, [pc, #276]	; (8013834 <tcp_input+0x2ac>)
 8013720:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013722:	4b3c      	ldr	r3, [pc, #240]	; (8013814 <tcp_input+0x28c>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	689b      	ldr	r3, [r3, #8]
 8013728:	4a3a      	ldr	r2, [pc, #232]	; (8013814 <tcp_input+0x28c>)
 801372a:	6814      	ldr	r4, [r2, #0]
 801372c:	4618      	mov	r0, r3
 801372e:	f7fc fa70 	bl	800fc12 <lwip_htonl>
 8013732:	4603      	mov	r3, r0
 8013734:	60a3      	str	r3, [r4, #8]
 8013736:	68a3      	ldr	r3, [r4, #8]
 8013738:	4a3f      	ldr	r2, [pc, #252]	; (8013838 <tcp_input+0x2b0>)
 801373a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801373c:	4b35      	ldr	r3, [pc, #212]	; (8013814 <tcp_input+0x28c>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	89db      	ldrh	r3, [r3, #14]
 8013742:	b29b      	uxth	r3, r3
 8013744:	4a33      	ldr	r2, [pc, #204]	; (8013814 <tcp_input+0x28c>)
 8013746:	6814      	ldr	r4, [r2, #0]
 8013748:	4618      	mov	r0, r3
 801374a:	f7fc fa4d 	bl	800fbe8 <lwip_htons>
 801374e:	4603      	mov	r3, r0
 8013750:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013752:	4b30      	ldr	r3, [pc, #192]	; (8013814 <tcp_input+0x28c>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	899b      	ldrh	r3, [r3, #12]
 8013758:	b29b      	uxth	r3, r3
 801375a:	4618      	mov	r0, r3
 801375c:	f7fc fa44 	bl	800fbe8 <lwip_htons>
 8013760:	4603      	mov	r3, r0
 8013762:	b2db      	uxtb	r3, r3
 8013764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013768:	b2da      	uxtb	r2, r3
 801376a:	4b34      	ldr	r3, [pc, #208]	; (801383c <tcp_input+0x2b4>)
 801376c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	891a      	ldrh	r2, [r3, #8]
 8013772:	4b33      	ldr	r3, [pc, #204]	; (8013840 <tcp_input+0x2b8>)
 8013774:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013776:	4b31      	ldr	r3, [pc, #196]	; (801383c <tcp_input+0x2b4>)
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	f003 0303 	and.w	r3, r3, #3
 801377e:	2b00      	cmp	r3, #0
 8013780:	d00c      	beq.n	801379c <tcp_input+0x214>
    tcplen++;
 8013782:	4b2f      	ldr	r3, [pc, #188]	; (8013840 <tcp_input+0x2b8>)
 8013784:	881b      	ldrh	r3, [r3, #0]
 8013786:	3301      	adds	r3, #1
 8013788:	b29a      	uxth	r2, r3
 801378a:	4b2d      	ldr	r3, [pc, #180]	; (8013840 <tcp_input+0x2b8>)
 801378c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	891a      	ldrh	r2, [r3, #8]
 8013792:	4b2b      	ldr	r3, [pc, #172]	; (8013840 <tcp_input+0x2b8>)
 8013794:	881b      	ldrh	r3, [r3, #0]
 8013796:	429a      	cmp	r2, r3
 8013798:	f200 82e6 	bhi.w	8013d68 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801379c:	2300      	movs	r3, #0
 801379e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80137a0:	4b28      	ldr	r3, [pc, #160]	; (8013844 <tcp_input+0x2bc>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	61fb      	str	r3, [r7, #28]
 80137a6:	e09d      	b.n	80138e4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80137a8:	69fb      	ldr	r3, [r7, #28]
 80137aa:	7d1b      	ldrb	r3, [r3, #20]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d105      	bne.n	80137bc <tcp_input+0x234>
 80137b0:	4b15      	ldr	r3, [pc, #84]	; (8013808 <tcp_input+0x280>)
 80137b2:	22fb      	movs	r2, #251	; 0xfb
 80137b4:	4924      	ldr	r1, [pc, #144]	; (8013848 <tcp_input+0x2c0>)
 80137b6:	4816      	ldr	r0, [pc, #88]	; (8013810 <tcp_input+0x288>)
 80137b8:	f007 fcba 	bl	801b130 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80137bc:	69fb      	ldr	r3, [r7, #28]
 80137be:	7d1b      	ldrb	r3, [r3, #20]
 80137c0:	2b0a      	cmp	r3, #10
 80137c2:	d105      	bne.n	80137d0 <tcp_input+0x248>
 80137c4:	4b10      	ldr	r3, [pc, #64]	; (8013808 <tcp_input+0x280>)
 80137c6:	22fc      	movs	r2, #252	; 0xfc
 80137c8:	4920      	ldr	r1, [pc, #128]	; (801384c <tcp_input+0x2c4>)
 80137ca:	4811      	ldr	r0, [pc, #68]	; (8013810 <tcp_input+0x288>)
 80137cc:	f007 fcb0 	bl	801b130 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	7d1b      	ldrb	r3, [r3, #20]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d105      	bne.n	80137e4 <tcp_input+0x25c>
 80137d8:	4b0b      	ldr	r3, [pc, #44]	; (8013808 <tcp_input+0x280>)
 80137da:	22fd      	movs	r2, #253	; 0xfd
 80137dc:	491c      	ldr	r1, [pc, #112]	; (8013850 <tcp_input+0x2c8>)
 80137de:	480c      	ldr	r0, [pc, #48]	; (8013810 <tcp_input+0x288>)
 80137e0:	f007 fca6 	bl	801b130 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	7a1b      	ldrb	r3, [r3, #8]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d033      	beq.n	8013854 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80137ec:	69fb      	ldr	r3, [r7, #28]
 80137ee:	7a1a      	ldrb	r2, [r3, #8]
 80137f0:	4b09      	ldr	r3, [pc, #36]	; (8013818 <tcp_input+0x290>)
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80137f8:	3301      	adds	r3, #1
 80137fa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d029      	beq.n	8013854 <tcp_input+0x2cc>
      prev = pcb;
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	61bb      	str	r3, [r7, #24]
      continue;
 8013804:	e06b      	b.n	80138de <tcp_input+0x356>
 8013806:	bf00      	nop
 8013808:	0801ee44 	.word	0x0801ee44
 801380c:	0801ee78 	.word	0x0801ee78
 8013810:	0801ee90 	.word	0x0801ee90
 8013814:	200071c4 	.word	0x200071c4
 8013818:	200008c0 	.word	0x200008c0
 801381c:	200071c8 	.word	0x200071c8
 8013820:	200071cc 	.word	0x200071cc
 8013824:	200071ca 	.word	0x200071ca
 8013828:	0801eeb8 	.word	0x0801eeb8
 801382c:	0801eec8 	.word	0x0801eec8
 8013830:	0801eed4 	.word	0x0801eed4
 8013834:	200071d4 	.word	0x200071d4
 8013838:	200071d8 	.word	0x200071d8
 801383c:	200071e0 	.word	0x200071e0
 8013840:	200071de 	.word	0x200071de
 8013844:	200071a8 	.word	0x200071a8
 8013848:	0801eef4 	.word	0x0801eef4
 801384c:	0801ef1c 	.word	0x0801ef1c
 8013850:	0801ef48 	.word	0x0801ef48
    }

    if (pcb->remote_port == tcphdr->src &&
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	8b1a      	ldrh	r2, [r3, #24]
 8013858:	4b72      	ldr	r3, [pc, #456]	; (8013a24 <tcp_input+0x49c>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	b29b      	uxth	r3, r3
 8013860:	429a      	cmp	r2, r3
 8013862:	d13a      	bne.n	80138da <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013864:	69fb      	ldr	r3, [r7, #28]
 8013866:	8ada      	ldrh	r2, [r3, #22]
 8013868:	4b6e      	ldr	r3, [pc, #440]	; (8013a24 <tcp_input+0x49c>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	885b      	ldrh	r3, [r3, #2]
 801386e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013870:	429a      	cmp	r2, r3
 8013872:	d132      	bne.n	80138da <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	685a      	ldr	r2, [r3, #4]
 8013878:	4b6b      	ldr	r3, [pc, #428]	; (8013a28 <tcp_input+0x4a0>)
 801387a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801387c:	429a      	cmp	r2, r3
 801387e:	d12c      	bne.n	80138da <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	4b68      	ldr	r3, [pc, #416]	; (8013a28 <tcp_input+0x4a0>)
 8013886:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013888:	429a      	cmp	r2, r3
 801388a:	d126      	bne.n	80138da <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	69fa      	ldr	r2, [r7, #28]
 8013892:	429a      	cmp	r2, r3
 8013894:	d106      	bne.n	80138a4 <tcp_input+0x31c>
 8013896:	4b65      	ldr	r3, [pc, #404]	; (8013a2c <tcp_input+0x4a4>)
 8013898:	f240 120d 	movw	r2, #269	; 0x10d
 801389c:	4964      	ldr	r1, [pc, #400]	; (8013a30 <tcp_input+0x4a8>)
 801389e:	4865      	ldr	r0, [pc, #404]	; (8013a34 <tcp_input+0x4ac>)
 80138a0:	f007 fc46 	bl	801b130 <iprintf>
      if (prev != NULL) {
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d00a      	beq.n	80138c0 <tcp_input+0x338>
        prev->next = pcb->next;
 80138aa:	69fb      	ldr	r3, [r7, #28]
 80138ac:	68da      	ldr	r2, [r3, #12]
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80138b2:	4b61      	ldr	r3, [pc, #388]	; (8013a38 <tcp_input+0x4b0>)
 80138b4:	681a      	ldr	r2, [r3, #0]
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80138ba:	4a5f      	ldr	r2, [pc, #380]	; (8013a38 <tcp_input+0x4b0>)
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	68db      	ldr	r3, [r3, #12]
 80138c4:	69fa      	ldr	r2, [r7, #28]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d111      	bne.n	80138ee <tcp_input+0x366>
 80138ca:	4b58      	ldr	r3, [pc, #352]	; (8013a2c <tcp_input+0x4a4>)
 80138cc:	f240 1215 	movw	r2, #277	; 0x115
 80138d0:	495a      	ldr	r1, [pc, #360]	; (8013a3c <tcp_input+0x4b4>)
 80138d2:	4858      	ldr	r0, [pc, #352]	; (8013a34 <tcp_input+0x4ac>)
 80138d4:	f007 fc2c 	bl	801b130 <iprintf>
      break;
 80138d8:	e009      	b.n	80138ee <tcp_input+0x366>
    }
    prev = pcb;
 80138da:	69fb      	ldr	r3, [r7, #28]
 80138dc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138de:	69fb      	ldr	r3, [r7, #28]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	61fb      	str	r3, [r7, #28]
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f47f af5e 	bne.w	80137a8 <tcp_input+0x220>
 80138ec:	e000      	b.n	80138f0 <tcp_input+0x368>
      break;
 80138ee:	bf00      	nop
  }

  if (pcb == NULL) {
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f040 80aa 	bne.w	8013a4c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80138f8:	4b51      	ldr	r3, [pc, #324]	; (8013a40 <tcp_input+0x4b8>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	61fb      	str	r3, [r7, #28]
 80138fe:	e03f      	b.n	8013980 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	7d1b      	ldrb	r3, [r3, #20]
 8013904:	2b0a      	cmp	r3, #10
 8013906:	d006      	beq.n	8013916 <tcp_input+0x38e>
 8013908:	4b48      	ldr	r3, [pc, #288]	; (8013a2c <tcp_input+0x4a4>)
 801390a:	f240 121f 	movw	r2, #287	; 0x11f
 801390e:	494d      	ldr	r1, [pc, #308]	; (8013a44 <tcp_input+0x4bc>)
 8013910:	4848      	ldr	r0, [pc, #288]	; (8013a34 <tcp_input+0x4ac>)
 8013912:	f007 fc0d 	bl	801b130 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013916:	69fb      	ldr	r3, [r7, #28]
 8013918:	7a1b      	ldrb	r3, [r3, #8]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d009      	beq.n	8013932 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	7a1a      	ldrb	r2, [r3, #8]
 8013922:	4b41      	ldr	r3, [pc, #260]	; (8013a28 <tcp_input+0x4a0>)
 8013924:	685b      	ldr	r3, [r3, #4]
 8013926:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801392a:	3301      	adds	r3, #1
 801392c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801392e:	429a      	cmp	r2, r3
 8013930:	d122      	bne.n	8013978 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	8b1a      	ldrh	r2, [r3, #24]
 8013936:	4b3b      	ldr	r3, [pc, #236]	; (8013a24 <tcp_input+0x49c>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	881b      	ldrh	r3, [r3, #0]
 801393c:	b29b      	uxth	r3, r3
 801393e:	429a      	cmp	r2, r3
 8013940:	d11b      	bne.n	801397a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	8ada      	ldrh	r2, [r3, #22]
 8013946:	4b37      	ldr	r3, [pc, #220]	; (8013a24 <tcp_input+0x49c>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	885b      	ldrh	r3, [r3, #2]
 801394c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801394e:	429a      	cmp	r2, r3
 8013950:	d113      	bne.n	801397a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	685a      	ldr	r2, [r3, #4]
 8013956:	4b34      	ldr	r3, [pc, #208]	; (8013a28 <tcp_input+0x4a0>)
 8013958:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801395a:	429a      	cmp	r2, r3
 801395c:	d10d      	bne.n	801397a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801395e:	69fb      	ldr	r3, [r7, #28]
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	4b31      	ldr	r3, [pc, #196]	; (8013a28 <tcp_input+0x4a0>)
 8013964:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013966:	429a      	cmp	r2, r3
 8013968:	d107      	bne.n	801397a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801396a:	69f8      	ldr	r0, [r7, #28]
 801396c:	f000 fb56 	bl	801401c <tcp_timewait_input>
        }
        pbuf_free(p);
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f7fd fd3d 	bl	80113f0 <pbuf_free>
        return;
 8013976:	e1fd      	b.n	8013d74 <tcp_input+0x7ec>
        continue;
 8013978:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	68db      	ldr	r3, [r3, #12]
 801397e:	61fb      	str	r3, [r7, #28]
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d1bc      	bne.n	8013900 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013986:	2300      	movs	r3, #0
 8013988:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801398a:	4b2f      	ldr	r3, [pc, #188]	; (8013a48 <tcp_input+0x4c0>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	617b      	str	r3, [r7, #20]
 8013990:	e02a      	b.n	80139e8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	7a1b      	ldrb	r3, [r3, #8]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d00c      	beq.n	80139b4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	7a1a      	ldrb	r2, [r3, #8]
 801399e:	4b22      	ldr	r3, [pc, #136]	; (8013a28 <tcp_input+0x4a0>)
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139a6:	3301      	adds	r3, #1
 80139a8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d002      	beq.n	80139b4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80139ae:	697b      	ldr	r3, [r7, #20]
 80139b0:	61bb      	str	r3, [r7, #24]
        continue;
 80139b2:	e016      	b.n	80139e2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	8ada      	ldrh	r2, [r3, #22]
 80139b8:	4b1a      	ldr	r3, [pc, #104]	; (8013a24 <tcp_input+0x49c>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	885b      	ldrh	r3, [r3, #2]
 80139be:	b29b      	uxth	r3, r3
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d10c      	bne.n	80139de <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	4b17      	ldr	r3, [pc, #92]	; (8013a28 <tcp_input+0x4a0>)
 80139ca:	695b      	ldr	r3, [r3, #20]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d00f      	beq.n	80139f0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d00d      	beq.n	80139f2 <tcp_input+0x46a>
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d009      	beq.n	80139f2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	68db      	ldr	r3, [r3, #12]
 80139e6:	617b      	str	r3, [r7, #20]
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d1d1      	bne.n	8013992 <tcp_input+0x40a>
 80139ee:	e000      	b.n	80139f2 <tcp_input+0x46a>
            break;
 80139f0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d029      	beq.n	8013a4c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80139f8:	69bb      	ldr	r3, [r7, #24]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d00a      	beq.n	8013a14 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	68da      	ldr	r2, [r3, #12]
 8013a02:	69bb      	ldr	r3, [r7, #24]
 8013a04:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013a06:	4b10      	ldr	r3, [pc, #64]	; (8013a48 <tcp_input+0x4c0>)
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013a0e:	4a0e      	ldr	r2, [pc, #56]	; (8013a48 <tcp_input+0x4c0>)
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013a14:	6978      	ldr	r0, [r7, #20]
 8013a16:	f000 fa03 	bl	8013e20 <tcp_listen_input>
      }
      pbuf_free(p);
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f7fd fce8 	bl	80113f0 <pbuf_free>
      return;
 8013a20:	e1a8      	b.n	8013d74 <tcp_input+0x7ec>
 8013a22:	bf00      	nop
 8013a24:	200071c4 	.word	0x200071c4
 8013a28:	200008c0 	.word	0x200008c0
 8013a2c:	0801ee44 	.word	0x0801ee44
 8013a30:	0801ef70 	.word	0x0801ef70
 8013a34:	0801ee90 	.word	0x0801ee90
 8013a38:	200071a8 	.word	0x200071a8
 8013a3c:	0801ef9c 	.word	0x0801ef9c
 8013a40:	200071ac 	.word	0x200071ac
 8013a44:	0801efc8 	.word	0x0801efc8
 8013a48:	200071a4 	.word	0x200071a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013a4c:	69fb      	ldr	r3, [r7, #28]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	f000 8158 	beq.w	8013d04 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013a54:	4b95      	ldr	r3, [pc, #596]	; (8013cac <tcp_input+0x724>)
 8013a56:	2200      	movs	r2, #0
 8013a58:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	891a      	ldrh	r2, [r3, #8]
 8013a5e:	4b93      	ldr	r3, [pc, #588]	; (8013cac <tcp_input+0x724>)
 8013a60:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013a62:	4a92      	ldr	r2, [pc, #584]	; (8013cac <tcp_input+0x724>)
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013a68:	4b91      	ldr	r3, [pc, #580]	; (8013cb0 <tcp_input+0x728>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	4a8f      	ldr	r2, [pc, #572]	; (8013cac <tcp_input+0x724>)
 8013a6e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013a70:	4b90      	ldr	r3, [pc, #576]	; (8013cb4 <tcp_input+0x72c>)
 8013a72:	2200      	movs	r2, #0
 8013a74:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013a76:	4b90      	ldr	r3, [pc, #576]	; (8013cb8 <tcp_input+0x730>)
 8013a78:	2200      	movs	r2, #0
 8013a7a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013a7c:	4b8f      	ldr	r3, [pc, #572]	; (8013cbc <tcp_input+0x734>)
 8013a7e:	2200      	movs	r2, #0
 8013a80:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013a82:	4b8f      	ldr	r3, [pc, #572]	; (8013cc0 <tcp_input+0x738>)
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	f003 0308 	and.w	r3, r3, #8
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d006      	beq.n	8013a9c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	7b5b      	ldrb	r3, [r3, #13]
 8013a92:	f043 0301 	orr.w	r3, r3, #1
 8013a96:	b2da      	uxtb	r2, r3
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d017      	beq.n	8013ad4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013aa4:	69f8      	ldr	r0, [r7, #28]
 8013aa6:	f7ff f877 	bl	8012b98 <tcp_process_refused_data>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	f113 0f0d 	cmn.w	r3, #13
 8013ab0:	d007      	beq.n	8013ac2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013ab2:	69fb      	ldr	r3, [r7, #28]
 8013ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00c      	beq.n	8013ad4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013aba:	4b82      	ldr	r3, [pc, #520]	; (8013cc4 <tcp_input+0x73c>)
 8013abc:	881b      	ldrh	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d008      	beq.n	8013ad4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f040 80e4 	bne.w	8013c94 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013acc:	69f8      	ldr	r0, [r7, #28]
 8013ace:	f003 fe05 	bl	80176dc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013ad2:	e0df      	b.n	8013c94 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013ad4:	4a7c      	ldr	r2, [pc, #496]	; (8013cc8 <tcp_input+0x740>)
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013ada:	69f8      	ldr	r0, [r7, #28]
 8013adc:	f000 fb18 	bl	8014110 <tcp_process>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013ae4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ae8:	f113 0f0d 	cmn.w	r3, #13
 8013aec:	f000 80d4 	beq.w	8013c98 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013af0:	4b71      	ldr	r3, [pc, #452]	; (8013cb8 <tcp_input+0x730>)
 8013af2:	781b      	ldrb	r3, [r3, #0]
 8013af4:	f003 0308 	and.w	r3, r3, #8
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d015      	beq.n	8013b28 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013afc:	69fb      	ldr	r3, [r7, #28]
 8013afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d008      	beq.n	8013b18 <tcp_input+0x590>
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b0c:	69fa      	ldr	r2, [r7, #28]
 8013b0e:	6912      	ldr	r2, [r2, #16]
 8013b10:	f06f 010d 	mvn.w	r1, #13
 8013b14:	4610      	mov	r0, r2
 8013b16:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013b18:	69f9      	ldr	r1, [r7, #28]
 8013b1a:	486c      	ldr	r0, [pc, #432]	; (8013ccc <tcp_input+0x744>)
 8013b1c:	f7ff fbbc 	bl	8013298 <tcp_pcb_remove>
        tcp_free(pcb);
 8013b20:	69f8      	ldr	r0, [r7, #28]
 8013b22:	f7fd ff97 	bl	8011a54 <tcp_free>
 8013b26:	e0da      	b.n	8013cde <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013b2c:	4b63      	ldr	r3, [pc, #396]	; (8013cbc <tcp_input+0x734>)
 8013b2e:	881b      	ldrh	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d01d      	beq.n	8013b70 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013b34:	4b61      	ldr	r3, [pc, #388]	; (8013cbc <tcp_input+0x734>)
 8013b36:	881b      	ldrh	r3, [r3, #0]
 8013b38:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d00a      	beq.n	8013b5a <tcp_input+0x5d2>
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b4a:	69fa      	ldr	r2, [r7, #28]
 8013b4c:	6910      	ldr	r0, [r2, #16]
 8013b4e:	89fa      	ldrh	r2, [r7, #14]
 8013b50:	69f9      	ldr	r1, [r7, #28]
 8013b52:	4798      	blx	r3
 8013b54:	4603      	mov	r3, r0
 8013b56:	74fb      	strb	r3, [r7, #19]
 8013b58:	e001      	b.n	8013b5e <tcp_input+0x5d6>
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013b5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b62:	f113 0f0d 	cmn.w	r3, #13
 8013b66:	f000 8099 	beq.w	8013c9c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013b6a:	4b54      	ldr	r3, [pc, #336]	; (8013cbc <tcp_input+0x734>)
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013b70:	69f8      	ldr	r0, [r7, #28]
 8013b72:	f000 f915 	bl	8013da0 <tcp_input_delayed_close>
 8013b76:	4603      	mov	r3, r0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	f040 8091 	bne.w	8013ca0 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013b7e:	4b4d      	ldr	r3, [pc, #308]	; (8013cb4 <tcp_input+0x72c>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d041      	beq.n	8013c0a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d006      	beq.n	8013b9c <tcp_input+0x614>
 8013b8e:	4b50      	ldr	r3, [pc, #320]	; (8013cd0 <tcp_input+0x748>)
 8013b90:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013b94:	494f      	ldr	r1, [pc, #316]	; (8013cd4 <tcp_input+0x74c>)
 8013b96:	4850      	ldr	r0, [pc, #320]	; (8013cd8 <tcp_input+0x750>)
 8013b98:	f007 faca 	bl	801b130 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	8b5b      	ldrh	r3, [r3, #26]
 8013ba0:	f003 0310 	and.w	r3, r3, #16
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d008      	beq.n	8013bba <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013ba8:	4b42      	ldr	r3, [pc, #264]	; (8013cb4 <tcp_input+0x72c>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7fd fc1f 	bl	80113f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013bb2:	69f8      	ldr	r0, [r7, #28]
 8013bb4:	f7fe fa36 	bl	8012024 <tcp_abort>
            goto aborted;
 8013bb8:	e091      	b.n	8013cde <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d00c      	beq.n	8013bde <tcp_input+0x656>
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	6918      	ldr	r0, [r3, #16]
 8013bce:	4b39      	ldr	r3, [pc, #228]	; (8013cb4 <tcp_input+0x72c>)
 8013bd0:	681a      	ldr	r2, [r3, #0]
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	69f9      	ldr	r1, [r7, #28]
 8013bd6:	47a0      	blx	r4
 8013bd8:	4603      	mov	r3, r0
 8013bda:	74fb      	strb	r3, [r7, #19]
 8013bdc:	e008      	b.n	8013bf0 <tcp_input+0x668>
 8013bde:	4b35      	ldr	r3, [pc, #212]	; (8013cb4 <tcp_input+0x72c>)
 8013be0:	681a      	ldr	r2, [r3, #0]
 8013be2:	2300      	movs	r3, #0
 8013be4:	69f9      	ldr	r1, [r7, #28]
 8013be6:	2000      	movs	r0, #0
 8013be8:	f7ff f8ae 	bl	8012d48 <tcp_recv_null>
 8013bec:	4603      	mov	r3, r0
 8013bee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013bf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013bf4:	f113 0f0d 	cmn.w	r3, #13
 8013bf8:	d054      	beq.n	8013ca4 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013bfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d003      	beq.n	8013c0a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013c02:	4b2c      	ldr	r3, [pc, #176]	; (8013cb4 <tcp_input+0x72c>)
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	69fb      	ldr	r3, [r7, #28]
 8013c08:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013c0a:	4b2b      	ldr	r3, [pc, #172]	; (8013cb8 <tcp_input+0x730>)
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	f003 0320 	and.w	r3, r3, #32
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d031      	beq.n	8013c7a <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013c16:	69fb      	ldr	r3, [r7, #28]
 8013c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d009      	beq.n	8013c32 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013c1e:	69fb      	ldr	r3, [r7, #28]
 8013c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c22:	7b5a      	ldrb	r2, [r3, #13]
 8013c24:	69fb      	ldr	r3, [r7, #28]
 8013c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c28:	f042 0220 	orr.w	r2, r2, #32
 8013c2c:	b2d2      	uxtb	r2, r2
 8013c2e:	735a      	strb	r2, [r3, #13]
 8013c30:	e023      	b.n	8013c7a <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013c32:	69fb      	ldr	r3, [r7, #28]
 8013c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c36:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013c3a:	4293      	cmp	r3, r2
 8013c3c:	d005      	beq.n	8013c4a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c42:	3301      	adds	r3, #1
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d00b      	beq.n	8013c6c <tcp_input+0x6e4>
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	6918      	ldr	r0, [r3, #16]
 8013c5e:	2300      	movs	r3, #0
 8013c60:	2200      	movs	r2, #0
 8013c62:	69f9      	ldr	r1, [r7, #28]
 8013c64:	47a0      	blx	r4
 8013c66:	4603      	mov	r3, r0
 8013c68:	74fb      	strb	r3, [r7, #19]
 8013c6a:	e001      	b.n	8013c70 <tcp_input+0x6e8>
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013c70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c74:	f113 0f0d 	cmn.w	r3, #13
 8013c78:	d016      	beq.n	8013ca8 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013c7a:	4b13      	ldr	r3, [pc, #76]	; (8013cc8 <tcp_input+0x740>)
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013c80:	69f8      	ldr	r0, [r7, #28]
 8013c82:	f000 f88d 	bl	8013da0 <tcp_input_delayed_close>
 8013c86:	4603      	mov	r3, r0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d127      	bne.n	8013cdc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013c8c:	69f8      	ldr	r0, [r7, #28]
 8013c8e:	f002 ff1f 	bl	8016ad0 <tcp_output>
 8013c92:	e024      	b.n	8013cde <tcp_input+0x756>
        goto aborted;
 8013c94:	bf00      	nop
 8013c96:	e022      	b.n	8013cde <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013c98:	bf00      	nop
 8013c9a:	e020      	b.n	8013cde <tcp_input+0x756>
              goto aborted;
 8013c9c:	bf00      	nop
 8013c9e:	e01e      	b.n	8013cde <tcp_input+0x756>
          goto aborted;
 8013ca0:	bf00      	nop
 8013ca2:	e01c      	b.n	8013cde <tcp_input+0x756>
            goto aborted;
 8013ca4:	bf00      	nop
 8013ca6:	e01a      	b.n	8013cde <tcp_input+0x756>
              goto aborted;
 8013ca8:	bf00      	nop
 8013caa:	e018      	b.n	8013cde <tcp_input+0x756>
 8013cac:	200071b4 	.word	0x200071b4
 8013cb0:	200071c4 	.word	0x200071c4
 8013cb4:	200071e4 	.word	0x200071e4
 8013cb8:	200071e1 	.word	0x200071e1
 8013cbc:	200071dc 	.word	0x200071dc
 8013cc0:	200071e0 	.word	0x200071e0
 8013cc4:	200071de 	.word	0x200071de
 8013cc8:	200071e8 	.word	0x200071e8
 8013ccc:	200071a8 	.word	0x200071a8
 8013cd0:	0801ee44 	.word	0x0801ee44
 8013cd4:	0801eff8 	.word	0x0801eff8
 8013cd8:	0801ee90 	.word	0x0801ee90
          goto aborted;
 8013cdc:	bf00      	nop
    tcp_input_pcb = NULL;
 8013cde:	4b27      	ldr	r3, [pc, #156]	; (8013d7c <tcp_input+0x7f4>)
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013ce4:	4b26      	ldr	r3, [pc, #152]	; (8013d80 <tcp_input+0x7f8>)
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013cea:	4b26      	ldr	r3, [pc, #152]	; (8013d84 <tcp_input+0x7fc>)
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d03f      	beq.n	8013d72 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013cf2:	4b24      	ldr	r3, [pc, #144]	; (8013d84 <tcp_input+0x7fc>)
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fd fb7a 	bl	80113f0 <pbuf_free>
      inseg.p = NULL;
 8013cfc:	4b21      	ldr	r3, [pc, #132]	; (8013d84 <tcp_input+0x7fc>)
 8013cfe:	2200      	movs	r2, #0
 8013d00:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013d02:	e036      	b.n	8013d72 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013d04:	4b20      	ldr	r3, [pc, #128]	; (8013d88 <tcp_input+0x800>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	899b      	ldrh	r3, [r3, #12]
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7fb ff6b 	bl	800fbe8 <lwip_htons>
 8013d12:	4603      	mov	r3, r0
 8013d14:	b2db      	uxtb	r3, r3
 8013d16:	f003 0304 	and.w	r3, r3, #4
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d118      	bne.n	8013d50 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d1e:	4b1b      	ldr	r3, [pc, #108]	; (8013d8c <tcp_input+0x804>)
 8013d20:	6819      	ldr	r1, [r3, #0]
 8013d22:	4b1b      	ldr	r3, [pc, #108]	; (8013d90 <tcp_input+0x808>)
 8013d24:	881b      	ldrh	r3, [r3, #0]
 8013d26:	461a      	mov	r2, r3
 8013d28:	4b1a      	ldr	r3, [pc, #104]	; (8013d94 <tcp_input+0x80c>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d2e:	4b16      	ldr	r3, [pc, #88]	; (8013d88 <tcp_input+0x800>)
 8013d30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d32:	885b      	ldrh	r3, [r3, #2]
 8013d34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d36:	4a14      	ldr	r2, [pc, #80]	; (8013d88 <tcp_input+0x800>)
 8013d38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d3a:	8812      	ldrh	r2, [r2, #0]
 8013d3c:	b292      	uxth	r2, r2
 8013d3e:	9202      	str	r2, [sp, #8]
 8013d40:	9301      	str	r3, [sp, #4]
 8013d42:	4b15      	ldr	r3, [pc, #84]	; (8013d98 <tcp_input+0x810>)
 8013d44:	9300      	str	r3, [sp, #0]
 8013d46:	4b15      	ldr	r3, [pc, #84]	; (8013d9c <tcp_input+0x814>)
 8013d48:	4602      	mov	r2, r0
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	f003 fc74 	bl	8017638 <tcp_rst>
    pbuf_free(p);
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7fd fb4d 	bl	80113f0 <pbuf_free>
  return;
 8013d56:	e00c      	b.n	8013d72 <tcp_input+0x7ea>
    goto dropped;
 8013d58:	bf00      	nop
 8013d5a:	e006      	b.n	8013d6a <tcp_input+0x7e2>
    goto dropped;
 8013d5c:	bf00      	nop
 8013d5e:	e004      	b.n	8013d6a <tcp_input+0x7e2>
    goto dropped;
 8013d60:	bf00      	nop
 8013d62:	e002      	b.n	8013d6a <tcp_input+0x7e2>
      goto dropped;
 8013d64:	bf00      	nop
 8013d66:	e000      	b.n	8013d6a <tcp_input+0x7e2>
      goto dropped;
 8013d68:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f7fd fb40 	bl	80113f0 <pbuf_free>
 8013d70:	e000      	b.n	8013d74 <tcp_input+0x7ec>
  return;
 8013d72:	bf00      	nop
}
 8013d74:	3724      	adds	r7, #36	; 0x24
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd90      	pop	{r4, r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	200071e8 	.word	0x200071e8
 8013d80:	200071e4 	.word	0x200071e4
 8013d84:	200071b4 	.word	0x200071b4
 8013d88:	200071c4 	.word	0x200071c4
 8013d8c:	200071d8 	.word	0x200071d8
 8013d90:	200071de 	.word	0x200071de
 8013d94:	200071d4 	.word	0x200071d4
 8013d98:	200008d0 	.word	0x200008d0
 8013d9c:	200008d4 	.word	0x200008d4

08013da0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d106      	bne.n	8013dbc <tcp_input_delayed_close+0x1c>
 8013dae:	4b17      	ldr	r3, [pc, #92]	; (8013e0c <tcp_input_delayed_close+0x6c>)
 8013db0:	f240 225a 	movw	r2, #602	; 0x25a
 8013db4:	4916      	ldr	r1, [pc, #88]	; (8013e10 <tcp_input_delayed_close+0x70>)
 8013db6:	4817      	ldr	r0, [pc, #92]	; (8013e14 <tcp_input_delayed_close+0x74>)
 8013db8:	f007 f9ba 	bl	801b130 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013dbc:	4b16      	ldr	r3, [pc, #88]	; (8013e18 <tcp_input_delayed_close+0x78>)
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	f003 0310 	and.w	r3, r3, #16
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d01c      	beq.n	8013e02 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	8b5b      	ldrh	r3, [r3, #26]
 8013dcc:	f003 0310 	and.w	r3, r3, #16
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d10d      	bne.n	8013df0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d008      	beq.n	8013df0 <tcp_input_delayed_close+0x50>
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	6912      	ldr	r2, [r2, #16]
 8013de8:	f06f 010e 	mvn.w	r1, #14
 8013dec:	4610      	mov	r0, r2
 8013dee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013df0:	6879      	ldr	r1, [r7, #4]
 8013df2:	480a      	ldr	r0, [pc, #40]	; (8013e1c <tcp_input_delayed_close+0x7c>)
 8013df4:	f7ff fa50 	bl	8013298 <tcp_pcb_remove>
    tcp_free(pcb);
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f7fd fe2b 	bl	8011a54 <tcp_free>
    return 1;
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e000      	b.n	8013e04 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013e02:	2300      	movs	r3, #0
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3708      	adds	r7, #8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	0801ee44 	.word	0x0801ee44
 8013e10:	0801f014 	.word	0x0801f014
 8013e14:	0801ee90 	.word	0x0801ee90
 8013e18:	200071e1 	.word	0x200071e1
 8013e1c:	200071a8 	.word	0x200071a8

08013e20 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013e20:	b590      	push	{r4, r7, lr}
 8013e22:	b08b      	sub	sp, #44	; 0x2c
 8013e24:	af04      	add	r7, sp, #16
 8013e26:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013e28:	4b6f      	ldr	r3, [pc, #444]	; (8013fe8 <tcp_listen_input+0x1c8>)
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	f003 0304 	and.w	r3, r3, #4
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f040 80d2 	bne.w	8013fda <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d106      	bne.n	8013e4a <tcp_listen_input+0x2a>
 8013e3c:	4b6b      	ldr	r3, [pc, #428]	; (8013fec <tcp_listen_input+0x1cc>)
 8013e3e:	f240 2281 	movw	r2, #641	; 0x281
 8013e42:	496b      	ldr	r1, [pc, #428]	; (8013ff0 <tcp_listen_input+0x1d0>)
 8013e44:	486b      	ldr	r0, [pc, #428]	; (8013ff4 <tcp_listen_input+0x1d4>)
 8013e46:	f007 f973 	bl	801b130 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013e4a:	4b67      	ldr	r3, [pc, #412]	; (8013fe8 <tcp_listen_input+0x1c8>)
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	f003 0310 	and.w	r3, r3, #16
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d019      	beq.n	8013e8a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e56:	4b68      	ldr	r3, [pc, #416]	; (8013ff8 <tcp_listen_input+0x1d8>)
 8013e58:	6819      	ldr	r1, [r3, #0]
 8013e5a:	4b68      	ldr	r3, [pc, #416]	; (8013ffc <tcp_listen_input+0x1dc>)
 8013e5c:	881b      	ldrh	r3, [r3, #0]
 8013e5e:	461a      	mov	r2, r3
 8013e60:	4b67      	ldr	r3, [pc, #412]	; (8014000 <tcp_listen_input+0x1e0>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e66:	4b67      	ldr	r3, [pc, #412]	; (8014004 <tcp_listen_input+0x1e4>)
 8013e68:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e6a:	885b      	ldrh	r3, [r3, #2]
 8013e6c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e6e:	4a65      	ldr	r2, [pc, #404]	; (8014004 <tcp_listen_input+0x1e4>)
 8013e70:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e72:	8812      	ldrh	r2, [r2, #0]
 8013e74:	b292      	uxth	r2, r2
 8013e76:	9202      	str	r2, [sp, #8]
 8013e78:	9301      	str	r3, [sp, #4]
 8013e7a:	4b63      	ldr	r3, [pc, #396]	; (8014008 <tcp_listen_input+0x1e8>)
 8013e7c:	9300      	str	r3, [sp, #0]
 8013e7e:	4b63      	ldr	r3, [pc, #396]	; (801400c <tcp_listen_input+0x1ec>)
 8013e80:	4602      	mov	r2, r0
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f003 fbd8 	bl	8017638 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013e88:	e0a9      	b.n	8013fde <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013e8a:	4b57      	ldr	r3, [pc, #348]	; (8013fe8 <tcp_listen_input+0x1c8>)
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	f003 0302 	and.w	r3, r3, #2
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	f000 80a3 	beq.w	8013fde <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	7d5b      	ldrb	r3, [r3, #21]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7ff f877 	bl	8012f90 <tcp_alloc>
 8013ea2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d111      	bne.n	8013ece <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	699b      	ldr	r3, [r3, #24]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d00a      	beq.n	8013ec8 <tcp_listen_input+0xa8>
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	699b      	ldr	r3, [r3, #24]
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	6910      	ldr	r0, [r2, #16]
 8013eba:	f04f 32ff 	mov.w	r2, #4294967295
 8013ebe:	2100      	movs	r1, #0
 8013ec0:	4798      	blx	r3
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	73bb      	strb	r3, [r7, #14]
      return;
 8013ec6:	e08b      	b.n	8013fe0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013ec8:	23f0      	movs	r3, #240	; 0xf0
 8013eca:	73bb      	strb	r3, [r7, #14]
      return;
 8013ecc:	e088      	b.n	8013fe0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013ece:	4b50      	ldr	r3, [pc, #320]	; (8014010 <tcp_listen_input+0x1f0>)
 8013ed0:	695a      	ldr	r2, [r3, #20]
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013ed6:	4b4e      	ldr	r3, [pc, #312]	; (8014010 <tcp_listen_input+0x1f0>)
 8013ed8:	691a      	ldr	r2, [r3, #16]
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	8ada      	ldrh	r2, [r3, #22]
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013ee6:	4b47      	ldr	r3, [pc, #284]	; (8014004 <tcp_listen_input+0x1e4>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	881b      	ldrh	r3, [r3, #0]
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	2203      	movs	r2, #3
 8013ef6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013ef8:	4b41      	ldr	r3, [pc, #260]	; (8014000 <tcp_listen_input+0x1e0>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	1c5a      	adds	r2, r3, #1
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013f0a:	6978      	ldr	r0, [r7, #20]
 8013f0c:	f7ff fa58 	bl	80133c0 <tcp_next_iss>
 8013f10:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	693a      	ldr	r2, [r7, #16]
 8013f16:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	693a      	ldr	r2, [r7, #16]
 8013f1c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	693a      	ldr	r2, [r7, #16]
 8013f22:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	693a      	ldr	r2, [r7, #16]
 8013f28:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013f2a:	4b35      	ldr	r3, [pc, #212]	; (8014000 <tcp_listen_input+0x1e0>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	1e5a      	subs	r2, r3, #1
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	691a      	ldr	r2, [r3, #16]
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	7a5b      	ldrb	r3, [r3, #9]
 8013f46:	f003 030c 	and.w	r3, r3, #12
 8013f4a:	b2da      	uxtb	r2, r3
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	7a1a      	ldrb	r2, [r3, #8]
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013f58:	4b2e      	ldr	r3, [pc, #184]	; (8014014 <tcp_listen_input+0x1f4>)
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	60da      	str	r2, [r3, #12]
 8013f60:	4a2c      	ldr	r2, [pc, #176]	; (8014014 <tcp_listen_input+0x1f4>)
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	6013      	str	r3, [r2, #0]
 8013f66:	f003 fd29 	bl	80179bc <tcp_timer_needed>
 8013f6a:	4b2b      	ldr	r3, [pc, #172]	; (8014018 <tcp_listen_input+0x1f8>)
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013f70:	6978      	ldr	r0, [r7, #20]
 8013f72:	f001 fd8f 	bl	8015a94 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013f76:	4b23      	ldr	r3, [pc, #140]	; (8014004 <tcp_listen_input+0x1e4>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	89db      	ldrh	r3, [r3, #14]
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	3304      	adds	r3, #4
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f005 f913 	bl	80191c4 <ip4_route>
 8013f9e:	4601      	mov	r1, r0
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	3304      	adds	r3, #4
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	f7ff fa30 	bl	801340c <tcp_eff_send_mss_netif>
 8013fac:	4603      	mov	r3, r0
 8013fae:	461a      	mov	r2, r3
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013fb4:	2112      	movs	r1, #18
 8013fb6:	6978      	ldr	r0, [r7, #20]
 8013fb8:	f002 fc9c 	bl	80168f4 <tcp_enqueue_flags>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d004      	beq.n	8013fd2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013fc8:	2100      	movs	r1, #0
 8013fca:	6978      	ldr	r0, [r7, #20]
 8013fcc:	f7fd ff6c 	bl	8011ea8 <tcp_abandon>
      return;
 8013fd0:	e006      	b.n	8013fe0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013fd2:	6978      	ldr	r0, [r7, #20]
 8013fd4:	f002 fd7c 	bl	8016ad0 <tcp_output>
  return;
 8013fd8:	e001      	b.n	8013fde <tcp_listen_input+0x1be>
    return;
 8013fda:	bf00      	nop
 8013fdc:	e000      	b.n	8013fe0 <tcp_listen_input+0x1c0>
  return;
 8013fde:	bf00      	nop
}
 8013fe0:	371c      	adds	r7, #28
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd90      	pop	{r4, r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	200071e0 	.word	0x200071e0
 8013fec:	0801ee44 	.word	0x0801ee44
 8013ff0:	0801f03c 	.word	0x0801f03c
 8013ff4:	0801ee90 	.word	0x0801ee90
 8013ff8:	200071d8 	.word	0x200071d8
 8013ffc:	200071de 	.word	0x200071de
 8014000:	200071d4 	.word	0x200071d4
 8014004:	200071c4 	.word	0x200071c4
 8014008:	200008d0 	.word	0x200008d0
 801400c:	200008d4 	.word	0x200008d4
 8014010:	200008c0 	.word	0x200008c0
 8014014:	200071a8 	.word	0x200071a8
 8014018:	200071b0 	.word	0x200071b0

0801401c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b086      	sub	sp, #24
 8014020:	af04      	add	r7, sp, #16
 8014022:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014024:	4b2f      	ldr	r3, [pc, #188]	; (80140e4 <tcp_timewait_input+0xc8>)
 8014026:	781b      	ldrb	r3, [r3, #0]
 8014028:	f003 0304 	and.w	r3, r3, #4
 801402c:	2b00      	cmp	r3, #0
 801402e:	d153      	bne.n	80140d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d106      	bne.n	8014044 <tcp_timewait_input+0x28>
 8014036:	4b2c      	ldr	r3, [pc, #176]	; (80140e8 <tcp_timewait_input+0xcc>)
 8014038:	f240 22ee 	movw	r2, #750	; 0x2ee
 801403c:	492b      	ldr	r1, [pc, #172]	; (80140ec <tcp_timewait_input+0xd0>)
 801403e:	482c      	ldr	r0, [pc, #176]	; (80140f0 <tcp_timewait_input+0xd4>)
 8014040:	f007 f876 	bl	801b130 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014044:	4b27      	ldr	r3, [pc, #156]	; (80140e4 <tcp_timewait_input+0xc8>)
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	f003 0302 	and.w	r3, r3, #2
 801404c:	2b00      	cmp	r3, #0
 801404e:	d02a      	beq.n	80140a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014050:	4b28      	ldr	r3, [pc, #160]	; (80140f4 <tcp_timewait_input+0xd8>)
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	db2d      	blt.n	80140ba <tcp_timewait_input+0x9e>
 801405e:	4b25      	ldr	r3, [pc, #148]	; (80140f4 <tcp_timewait_input+0xd8>)
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014066:	6879      	ldr	r1, [r7, #4]
 8014068:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801406a:	440b      	add	r3, r1
 801406c:	1ad3      	subs	r3, r2, r3
 801406e:	2b00      	cmp	r3, #0
 8014070:	dc23      	bgt.n	80140ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014072:	4b21      	ldr	r3, [pc, #132]	; (80140f8 <tcp_timewait_input+0xdc>)
 8014074:	6819      	ldr	r1, [r3, #0]
 8014076:	4b21      	ldr	r3, [pc, #132]	; (80140fc <tcp_timewait_input+0xe0>)
 8014078:	881b      	ldrh	r3, [r3, #0]
 801407a:	461a      	mov	r2, r3
 801407c:	4b1d      	ldr	r3, [pc, #116]	; (80140f4 <tcp_timewait_input+0xd8>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014082:	4b1f      	ldr	r3, [pc, #124]	; (8014100 <tcp_timewait_input+0xe4>)
 8014084:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014086:	885b      	ldrh	r3, [r3, #2]
 8014088:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801408a:	4a1d      	ldr	r2, [pc, #116]	; (8014100 <tcp_timewait_input+0xe4>)
 801408c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801408e:	8812      	ldrh	r2, [r2, #0]
 8014090:	b292      	uxth	r2, r2
 8014092:	9202      	str	r2, [sp, #8]
 8014094:	9301      	str	r3, [sp, #4]
 8014096:	4b1b      	ldr	r3, [pc, #108]	; (8014104 <tcp_timewait_input+0xe8>)
 8014098:	9300      	str	r3, [sp, #0]
 801409a:	4b1b      	ldr	r3, [pc, #108]	; (8014108 <tcp_timewait_input+0xec>)
 801409c:	4602      	mov	r2, r0
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f003 faca 	bl	8017638 <tcp_rst>
      return;
 80140a4:	e01b      	b.n	80140de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80140a6:	4b0f      	ldr	r3, [pc, #60]	; (80140e4 <tcp_timewait_input+0xc8>)
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	f003 0301 	and.w	r3, r3, #1
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d003      	beq.n	80140ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80140b2:	4b16      	ldr	r3, [pc, #88]	; (801410c <tcp_timewait_input+0xf0>)
 80140b4:	681a      	ldr	r2, [r3, #0]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80140ba:	4b10      	ldr	r3, [pc, #64]	; (80140fc <tcp_timewait_input+0xe0>)
 80140bc:	881b      	ldrh	r3, [r3, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d00c      	beq.n	80140dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	8b5b      	ldrh	r3, [r3, #26]
 80140c6:	f043 0302 	orr.w	r3, r3, #2
 80140ca:	b29a      	uxth	r2, r3
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f002 fcfd 	bl	8016ad0 <tcp_output>
  }
  return;
 80140d6:	e001      	b.n	80140dc <tcp_timewait_input+0xc0>
    return;
 80140d8:	bf00      	nop
 80140da:	e000      	b.n	80140de <tcp_timewait_input+0xc2>
  return;
 80140dc:	bf00      	nop
}
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	200071e0 	.word	0x200071e0
 80140e8:	0801ee44 	.word	0x0801ee44
 80140ec:	0801f05c 	.word	0x0801f05c
 80140f0:	0801ee90 	.word	0x0801ee90
 80140f4:	200071d4 	.word	0x200071d4
 80140f8:	200071d8 	.word	0x200071d8
 80140fc:	200071de 	.word	0x200071de
 8014100:	200071c4 	.word	0x200071c4
 8014104:	200008d0 	.word	0x200008d0
 8014108:	200008d4 	.word	0x200008d4
 801410c:	2000719c 	.word	0x2000719c

08014110 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014110:	b590      	push	{r4, r7, lr}
 8014112:	b08d      	sub	sp, #52	; 0x34
 8014114:	af04      	add	r7, sp, #16
 8014116:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014118:	2300      	movs	r3, #0
 801411a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801411c:	2300      	movs	r3, #0
 801411e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d106      	bne.n	8014134 <tcp_process+0x24>
 8014126:	4b9d      	ldr	r3, [pc, #628]	; (801439c <tcp_process+0x28c>)
 8014128:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801412c:	499c      	ldr	r1, [pc, #624]	; (80143a0 <tcp_process+0x290>)
 801412e:	489d      	ldr	r0, [pc, #628]	; (80143a4 <tcp_process+0x294>)
 8014130:	f006 fffe 	bl	801b130 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014134:	4b9c      	ldr	r3, [pc, #624]	; (80143a8 <tcp_process+0x298>)
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	f003 0304 	and.w	r3, r3, #4
 801413c:	2b00      	cmp	r3, #0
 801413e:	d04e      	beq.n	80141de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	7d1b      	ldrb	r3, [r3, #20]
 8014144:	2b02      	cmp	r3, #2
 8014146:	d108      	bne.n	801415a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801414c:	4b97      	ldr	r3, [pc, #604]	; (80143ac <tcp_process+0x29c>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	429a      	cmp	r2, r3
 8014152:	d123      	bne.n	801419c <tcp_process+0x8c>
        acceptable = 1;
 8014154:	2301      	movs	r3, #1
 8014156:	76fb      	strb	r3, [r7, #27]
 8014158:	e020      	b.n	801419c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801415e:	4b94      	ldr	r3, [pc, #592]	; (80143b0 <tcp_process+0x2a0>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	429a      	cmp	r2, r3
 8014164:	d102      	bne.n	801416c <tcp_process+0x5c>
        acceptable = 1;
 8014166:	2301      	movs	r3, #1
 8014168:	76fb      	strb	r3, [r7, #27]
 801416a:	e017      	b.n	801419c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801416c:	4b90      	ldr	r3, [pc, #576]	; (80143b0 <tcp_process+0x2a0>)
 801416e:	681a      	ldr	r2, [r3, #0]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014174:	1ad3      	subs	r3, r2, r3
 8014176:	2b00      	cmp	r3, #0
 8014178:	db10      	blt.n	801419c <tcp_process+0x8c>
 801417a:	4b8d      	ldr	r3, [pc, #564]	; (80143b0 <tcp_process+0x2a0>)
 801417c:	681a      	ldr	r2, [r3, #0]
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014182:	6879      	ldr	r1, [r7, #4]
 8014184:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014186:	440b      	add	r3, r1
 8014188:	1ad3      	subs	r3, r2, r3
 801418a:	2b00      	cmp	r3, #0
 801418c:	dc06      	bgt.n	801419c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	8b5b      	ldrh	r3, [r3, #26]
 8014192:	f043 0302 	orr.w	r3, r3, #2
 8014196:	b29a      	uxth	r2, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801419c:	7efb      	ldrb	r3, [r7, #27]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d01b      	beq.n	80141da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	7d1b      	ldrb	r3, [r3, #20]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d106      	bne.n	80141b8 <tcp_process+0xa8>
 80141aa:	4b7c      	ldr	r3, [pc, #496]	; (801439c <tcp_process+0x28c>)
 80141ac:	f44f 724e 	mov.w	r2, #824	; 0x338
 80141b0:	4980      	ldr	r1, [pc, #512]	; (80143b4 <tcp_process+0x2a4>)
 80141b2:	487c      	ldr	r0, [pc, #496]	; (80143a4 <tcp_process+0x294>)
 80141b4:	f006 ffbc 	bl	801b130 <iprintf>
      recv_flags |= TF_RESET;
 80141b8:	4b7f      	ldr	r3, [pc, #508]	; (80143b8 <tcp_process+0x2a8>)
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	f043 0308 	orr.w	r3, r3, #8
 80141c0:	b2da      	uxtb	r2, r3
 80141c2:	4b7d      	ldr	r3, [pc, #500]	; (80143b8 <tcp_process+0x2a8>)
 80141c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	8b5b      	ldrh	r3, [r3, #26]
 80141ca:	f023 0301 	bic.w	r3, r3, #1
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80141d4:	f06f 030d 	mvn.w	r3, #13
 80141d8:	e37a      	b.n	80148d0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80141da:	2300      	movs	r3, #0
 80141dc:	e378      	b.n	80148d0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80141de:	4b72      	ldr	r3, [pc, #456]	; (80143a8 <tcp_process+0x298>)
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	f003 0302 	and.w	r3, r3, #2
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d010      	beq.n	801420c <tcp_process+0xfc>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	7d1b      	ldrb	r3, [r3, #20]
 80141ee:	2b02      	cmp	r3, #2
 80141f0:	d00c      	beq.n	801420c <tcp_process+0xfc>
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	7d1b      	ldrb	r3, [r3, #20]
 80141f6:	2b03      	cmp	r3, #3
 80141f8:	d008      	beq.n	801420c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	8b5b      	ldrh	r3, [r3, #26]
 80141fe:	f043 0302 	orr.w	r3, r3, #2
 8014202:	b29a      	uxth	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014208:	2300      	movs	r3, #0
 801420a:	e361      	b.n	80148d0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	8b5b      	ldrh	r3, [r3, #26]
 8014210:	f003 0310 	and.w	r3, r3, #16
 8014214:	2b00      	cmp	r3, #0
 8014216:	d103      	bne.n	8014220 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014218:	4b68      	ldr	r3, [pc, #416]	; (80143bc <tcp_process+0x2ac>)
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2200      	movs	r2, #0
 8014224:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f001 fc2f 	bl	8015a94 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	7d1b      	ldrb	r3, [r3, #20]
 801423a:	3b02      	subs	r3, #2
 801423c:	2b07      	cmp	r3, #7
 801423e:	f200 8337 	bhi.w	80148b0 <tcp_process+0x7a0>
 8014242:	a201      	add	r2, pc, #4	; (adr r2, 8014248 <tcp_process+0x138>)
 8014244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014248:	08014269 	.word	0x08014269
 801424c:	08014499 	.word	0x08014499
 8014250:	08014611 	.word	0x08014611
 8014254:	0801463b 	.word	0x0801463b
 8014258:	0801475f 	.word	0x0801475f
 801425c:	08014611 	.word	0x08014611
 8014260:	080147eb 	.word	0x080147eb
 8014264:	0801487b 	.word	0x0801487b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014268:	4b4f      	ldr	r3, [pc, #316]	; (80143a8 <tcp_process+0x298>)
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	f003 0310 	and.w	r3, r3, #16
 8014270:	2b00      	cmp	r3, #0
 8014272:	f000 80e4 	beq.w	801443e <tcp_process+0x32e>
 8014276:	4b4c      	ldr	r3, [pc, #304]	; (80143a8 <tcp_process+0x298>)
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	f003 0302 	and.w	r3, r3, #2
 801427e:	2b00      	cmp	r3, #0
 8014280:	f000 80dd 	beq.w	801443e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014288:	1c5a      	adds	r2, r3, #1
 801428a:	4b48      	ldr	r3, [pc, #288]	; (80143ac <tcp_process+0x29c>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	429a      	cmp	r2, r3
 8014290:	f040 80d5 	bne.w	801443e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014294:	4b46      	ldr	r3, [pc, #280]	; (80143b0 <tcp_process+0x2a0>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	1c5a      	adds	r2, r3, #1
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80142a6:	4b41      	ldr	r3, [pc, #260]	; (80143ac <tcp_process+0x29c>)
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80142ae:	4b44      	ldr	r3, [pc, #272]	; (80143c0 <tcp_process+0x2b0>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	89db      	ldrh	r3, [r3, #14]
 80142b4:	b29a      	uxth	r2, r3
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80142c8:	4b39      	ldr	r3, [pc, #228]	; (80143b0 <tcp_process+0x2a0>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	1e5a      	subs	r2, r3, #1
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2204      	movs	r2, #4
 80142d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	3304      	adds	r3, #4
 80142e0:	4618      	mov	r0, r3
 80142e2:	f004 ff6f 	bl	80191c4 <ip4_route>
 80142e6:	4601      	mov	r1, r0
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	3304      	adds	r3, #4
 80142ec:	461a      	mov	r2, r3
 80142ee:	4620      	mov	r0, r4
 80142f0:	f7ff f88c 	bl	801340c <tcp_eff_send_mss_netif>
 80142f4:	4603      	mov	r3, r0
 80142f6:	461a      	mov	r2, r3
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014300:	009a      	lsls	r2, r3, #2
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014306:	005b      	lsls	r3, r3, #1
 8014308:	f241 111c 	movw	r1, #4380	; 0x111c
 801430c:	428b      	cmp	r3, r1
 801430e:	bf38      	it	cc
 8014310:	460b      	movcc	r3, r1
 8014312:	429a      	cmp	r2, r3
 8014314:	d204      	bcs.n	8014320 <tcp_process+0x210>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801431a:	009b      	lsls	r3, r3, #2
 801431c:	b29b      	uxth	r3, r3
 801431e:	e00d      	b.n	801433c <tcp_process+0x22c>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	f241 121c 	movw	r2, #4380	; 0x111c
 801432a:	4293      	cmp	r3, r2
 801432c:	d904      	bls.n	8014338 <tcp_process+0x228>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014332:	005b      	lsls	r3, r3, #1
 8014334:	b29b      	uxth	r3, r3
 8014336:	e001      	b.n	801433c <tcp_process+0x22c>
 8014338:	f241 131c 	movw	r3, #4380	; 0x111c
 801433c:	687a      	ldr	r2, [r7, #4]
 801433e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014348:	2b00      	cmp	r3, #0
 801434a:	d106      	bne.n	801435a <tcp_process+0x24a>
 801434c:	4b13      	ldr	r3, [pc, #76]	; (801439c <tcp_process+0x28c>)
 801434e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014352:	491c      	ldr	r1, [pc, #112]	; (80143c4 <tcp_process+0x2b4>)
 8014354:	4813      	ldr	r0, [pc, #76]	; (80143a4 <tcp_process+0x294>)
 8014356:	f006 feeb 	bl	801b130 <iprintf>
        --pcb->snd_queuelen;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014360:	3b01      	subs	r3, #1
 8014362:	b29a      	uxth	r2, r3
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801436e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014370:	69fb      	ldr	r3, [r7, #28]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d12a      	bne.n	80143cc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801437a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801437c:	69fb      	ldr	r3, [r7, #28]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d106      	bne.n	8014390 <tcp_process+0x280>
 8014382:	4b06      	ldr	r3, [pc, #24]	; (801439c <tcp_process+0x28c>)
 8014384:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014388:	490f      	ldr	r1, [pc, #60]	; (80143c8 <tcp_process+0x2b8>)
 801438a:	4806      	ldr	r0, [pc, #24]	; (80143a4 <tcp_process+0x294>)
 801438c:	f006 fed0 	bl	801b130 <iprintf>
          pcb->unsent = rseg->next;
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	681a      	ldr	r2, [r3, #0]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	66da      	str	r2, [r3, #108]	; 0x6c
 8014398:	e01c      	b.n	80143d4 <tcp_process+0x2c4>
 801439a:	bf00      	nop
 801439c:	0801ee44 	.word	0x0801ee44
 80143a0:	0801f07c 	.word	0x0801f07c
 80143a4:	0801ee90 	.word	0x0801ee90
 80143a8:	200071e0 	.word	0x200071e0
 80143ac:	200071d8 	.word	0x200071d8
 80143b0:	200071d4 	.word	0x200071d4
 80143b4:	0801f098 	.word	0x0801f098
 80143b8:	200071e1 	.word	0x200071e1
 80143bc:	2000719c 	.word	0x2000719c
 80143c0:	200071c4 	.word	0x200071c4
 80143c4:	0801f0b8 	.word	0x0801f0b8
 80143c8:	0801f0d0 	.word	0x0801f0d0
        } else {
          pcb->unacked = rseg->next;
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80143d4:	69f8      	ldr	r0, [r7, #28]
 80143d6:	f7fe fc72 	bl	8012cbe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d104      	bne.n	80143ec <tcp_process+0x2dc>
          pcb->rtime = -1;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143e8:	861a      	strh	r2, [r3, #48]	; 0x30
 80143ea:	e006      	b.n	80143fa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2200      	movs	r2, #0
 80143f0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2200      	movs	r2, #0
 80143f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014400:	2b00      	cmp	r3, #0
 8014402:	d00a      	beq.n	801441a <tcp_process+0x30a>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801440a:	687a      	ldr	r2, [r7, #4]
 801440c:	6910      	ldr	r0, [r2, #16]
 801440e:	2200      	movs	r2, #0
 8014410:	6879      	ldr	r1, [r7, #4]
 8014412:	4798      	blx	r3
 8014414:	4603      	mov	r3, r0
 8014416:	76bb      	strb	r3, [r7, #26]
 8014418:	e001      	b.n	801441e <tcp_process+0x30e>
 801441a:	2300      	movs	r3, #0
 801441c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801441e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014422:	f113 0f0d 	cmn.w	r3, #13
 8014426:	d102      	bne.n	801442e <tcp_process+0x31e>
          return ERR_ABRT;
 8014428:	f06f 030c 	mvn.w	r3, #12
 801442c:	e250      	b.n	80148d0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	8b5b      	ldrh	r3, [r3, #26]
 8014432:	f043 0302 	orr.w	r3, r3, #2
 8014436:	b29a      	uxth	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801443c:	e23a      	b.n	80148b4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801443e:	4b98      	ldr	r3, [pc, #608]	; (80146a0 <tcp_process+0x590>)
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	f003 0310 	and.w	r3, r3, #16
 8014446:	2b00      	cmp	r3, #0
 8014448:	f000 8234 	beq.w	80148b4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801444c:	4b95      	ldr	r3, [pc, #596]	; (80146a4 <tcp_process+0x594>)
 801444e:	6819      	ldr	r1, [r3, #0]
 8014450:	4b95      	ldr	r3, [pc, #596]	; (80146a8 <tcp_process+0x598>)
 8014452:	881b      	ldrh	r3, [r3, #0]
 8014454:	461a      	mov	r2, r3
 8014456:	4b95      	ldr	r3, [pc, #596]	; (80146ac <tcp_process+0x59c>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801445c:	4b94      	ldr	r3, [pc, #592]	; (80146b0 <tcp_process+0x5a0>)
 801445e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014460:	885b      	ldrh	r3, [r3, #2]
 8014462:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014464:	4a92      	ldr	r2, [pc, #584]	; (80146b0 <tcp_process+0x5a0>)
 8014466:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014468:	8812      	ldrh	r2, [r2, #0]
 801446a:	b292      	uxth	r2, r2
 801446c:	9202      	str	r2, [sp, #8]
 801446e:	9301      	str	r3, [sp, #4]
 8014470:	4b90      	ldr	r3, [pc, #576]	; (80146b4 <tcp_process+0x5a4>)
 8014472:	9300      	str	r3, [sp, #0]
 8014474:	4b90      	ldr	r3, [pc, #576]	; (80146b8 <tcp_process+0x5a8>)
 8014476:	4602      	mov	r2, r0
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f003 f8dd 	bl	8017638 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014484:	2b05      	cmp	r3, #5
 8014486:	f200 8215 	bhi.w	80148b4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2200      	movs	r2, #0
 801448e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f002 fea9 	bl	80171e8 <tcp_rexmit_rto>
      break;
 8014496:	e20d      	b.n	80148b4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014498:	4b81      	ldr	r3, [pc, #516]	; (80146a0 <tcp_process+0x590>)
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	f003 0310 	and.w	r3, r3, #16
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	f000 80a1 	beq.w	80145e8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80144a6:	4b7f      	ldr	r3, [pc, #508]	; (80146a4 <tcp_process+0x594>)
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144ae:	1ad3      	subs	r3, r2, r3
 80144b0:	3b01      	subs	r3, #1
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	db7e      	blt.n	80145b4 <tcp_process+0x4a4>
 80144b6:	4b7b      	ldr	r3, [pc, #492]	; (80146a4 <tcp_process+0x594>)
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	dc77      	bgt.n	80145b4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2204      	movs	r2, #4
 80144c8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d102      	bne.n	80144d8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80144d2:	23fa      	movs	r3, #250	; 0xfa
 80144d4:	76bb      	strb	r3, [r7, #26]
 80144d6:	e01d      	b.n	8014514 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80144dc:	699b      	ldr	r3, [r3, #24]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d106      	bne.n	80144f0 <tcp_process+0x3e0>
 80144e2:	4b76      	ldr	r3, [pc, #472]	; (80146bc <tcp_process+0x5ac>)
 80144e4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80144e8:	4975      	ldr	r1, [pc, #468]	; (80146c0 <tcp_process+0x5b0>)
 80144ea:	4876      	ldr	r0, [pc, #472]	; (80146c4 <tcp_process+0x5b4>)
 80144ec:	f006 fe20 	bl	801b130 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80144f4:	699b      	ldr	r3, [r3, #24]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d00a      	beq.n	8014510 <tcp_process+0x400>
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80144fe:	699b      	ldr	r3, [r3, #24]
 8014500:	687a      	ldr	r2, [r7, #4]
 8014502:	6910      	ldr	r0, [r2, #16]
 8014504:	2200      	movs	r2, #0
 8014506:	6879      	ldr	r1, [r7, #4]
 8014508:	4798      	blx	r3
 801450a:	4603      	mov	r3, r0
 801450c:	76bb      	strb	r3, [r7, #26]
 801450e:	e001      	b.n	8014514 <tcp_process+0x404>
 8014510:	23f0      	movs	r3, #240	; 0xf0
 8014512:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014514:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d00a      	beq.n	8014532 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801451c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014520:	f113 0f0d 	cmn.w	r3, #13
 8014524:	d002      	beq.n	801452c <tcp_process+0x41c>
              tcp_abort(pcb);
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f7fd fd7c 	bl	8012024 <tcp_abort>
            }
            return ERR_ABRT;
 801452c:	f06f 030c 	mvn.w	r3, #12
 8014530:	e1ce      	b.n	80148d0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f000 fae0 	bl	8014af8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014538:	4b63      	ldr	r3, [pc, #396]	; (80146c8 <tcp_process+0x5b8>)
 801453a:	881b      	ldrh	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d005      	beq.n	801454c <tcp_process+0x43c>
            recv_acked--;
 8014540:	4b61      	ldr	r3, [pc, #388]	; (80146c8 <tcp_process+0x5b8>)
 8014542:	881b      	ldrh	r3, [r3, #0]
 8014544:	3b01      	subs	r3, #1
 8014546:	b29a      	uxth	r2, r3
 8014548:	4b5f      	ldr	r3, [pc, #380]	; (80146c8 <tcp_process+0x5b8>)
 801454a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014550:	009a      	lsls	r2, r3, #2
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014556:	005b      	lsls	r3, r3, #1
 8014558:	f241 111c 	movw	r1, #4380	; 0x111c
 801455c:	428b      	cmp	r3, r1
 801455e:	bf38      	it	cc
 8014560:	460b      	movcc	r3, r1
 8014562:	429a      	cmp	r2, r3
 8014564:	d204      	bcs.n	8014570 <tcp_process+0x460>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801456a:	009b      	lsls	r3, r3, #2
 801456c:	b29b      	uxth	r3, r3
 801456e:	e00d      	b.n	801458c <tcp_process+0x47c>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014574:	005b      	lsls	r3, r3, #1
 8014576:	f241 121c 	movw	r2, #4380	; 0x111c
 801457a:	4293      	cmp	r3, r2
 801457c:	d904      	bls.n	8014588 <tcp_process+0x478>
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014582:	005b      	lsls	r3, r3, #1
 8014584:	b29b      	uxth	r3, r3
 8014586:	e001      	b.n	801458c <tcp_process+0x47c>
 8014588:	f241 131c 	movw	r3, #4380	; 0x111c
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014592:	4b4e      	ldr	r3, [pc, #312]	; (80146cc <tcp_process+0x5bc>)
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	f003 0320 	and.w	r3, r3, #32
 801459a:	2b00      	cmp	r3, #0
 801459c:	d037      	beq.n	801460e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	8b5b      	ldrh	r3, [r3, #26]
 80145a2:	f043 0302 	orr.w	r3, r3, #2
 80145a6:	b29a      	uxth	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2207      	movs	r2, #7
 80145b0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80145b2:	e02c      	b.n	801460e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145b4:	4b3b      	ldr	r3, [pc, #236]	; (80146a4 <tcp_process+0x594>)
 80145b6:	6819      	ldr	r1, [r3, #0]
 80145b8:	4b3b      	ldr	r3, [pc, #236]	; (80146a8 <tcp_process+0x598>)
 80145ba:	881b      	ldrh	r3, [r3, #0]
 80145bc:	461a      	mov	r2, r3
 80145be:	4b3b      	ldr	r3, [pc, #236]	; (80146ac <tcp_process+0x59c>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145c4:	4b3a      	ldr	r3, [pc, #232]	; (80146b0 <tcp_process+0x5a0>)
 80145c6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145c8:	885b      	ldrh	r3, [r3, #2]
 80145ca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145cc:	4a38      	ldr	r2, [pc, #224]	; (80146b0 <tcp_process+0x5a0>)
 80145ce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145d0:	8812      	ldrh	r2, [r2, #0]
 80145d2:	b292      	uxth	r2, r2
 80145d4:	9202      	str	r2, [sp, #8]
 80145d6:	9301      	str	r3, [sp, #4]
 80145d8:	4b36      	ldr	r3, [pc, #216]	; (80146b4 <tcp_process+0x5a4>)
 80145da:	9300      	str	r3, [sp, #0]
 80145dc:	4b36      	ldr	r3, [pc, #216]	; (80146b8 <tcp_process+0x5a8>)
 80145de:	4602      	mov	r2, r0
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f003 f829 	bl	8017638 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80145e6:	e167      	b.n	80148b8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80145e8:	4b2d      	ldr	r3, [pc, #180]	; (80146a0 <tcp_process+0x590>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	f003 0302 	and.w	r3, r3, #2
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f000 8161 	beq.w	80148b8 <tcp_process+0x7a8>
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145fa:	1e5a      	subs	r2, r3, #1
 80145fc:	4b2b      	ldr	r3, [pc, #172]	; (80146ac <tcp_process+0x59c>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	429a      	cmp	r2, r3
 8014602:	f040 8159 	bne.w	80148b8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f002 fe10 	bl	801722c <tcp_rexmit>
      break;
 801460c:	e154      	b.n	80148b8 <tcp_process+0x7a8>
 801460e:	e153      	b.n	80148b8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f000 fa71 	bl	8014af8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014616:	4b2d      	ldr	r3, [pc, #180]	; (80146cc <tcp_process+0x5bc>)
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	f003 0320 	and.w	r3, r3, #32
 801461e:	2b00      	cmp	r3, #0
 8014620:	f000 814c 	beq.w	80148bc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	8b5b      	ldrh	r3, [r3, #26]
 8014628:	f043 0302 	orr.w	r3, r3, #2
 801462c:	b29a      	uxth	r2, r3
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2207      	movs	r2, #7
 8014636:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014638:	e140      	b.n	80148bc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f000 fa5c 	bl	8014af8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014640:	4b22      	ldr	r3, [pc, #136]	; (80146cc <tcp_process+0x5bc>)
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	f003 0320 	and.w	r3, r3, #32
 8014648:	2b00      	cmp	r3, #0
 801464a:	d071      	beq.n	8014730 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801464c:	4b14      	ldr	r3, [pc, #80]	; (80146a0 <tcp_process+0x590>)
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	f003 0310 	and.w	r3, r3, #16
 8014654:	2b00      	cmp	r3, #0
 8014656:	d060      	beq.n	801471a <tcp_process+0x60a>
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801465c:	4b11      	ldr	r3, [pc, #68]	; (80146a4 <tcp_process+0x594>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	429a      	cmp	r2, r3
 8014662:	d15a      	bne.n	801471a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014668:	2b00      	cmp	r3, #0
 801466a:	d156      	bne.n	801471a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	8b5b      	ldrh	r3, [r3, #26]
 8014670:	f043 0302 	orr.w	r3, r3, #2
 8014674:	b29a      	uxth	r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f7fe fdbc 	bl	80131f8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014680:	4b13      	ldr	r3, [pc, #76]	; (80146d0 <tcp_process+0x5c0>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	429a      	cmp	r2, r3
 8014688:	d105      	bne.n	8014696 <tcp_process+0x586>
 801468a:	4b11      	ldr	r3, [pc, #68]	; (80146d0 <tcp_process+0x5c0>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	4a0f      	ldr	r2, [pc, #60]	; (80146d0 <tcp_process+0x5c0>)
 8014692:	6013      	str	r3, [r2, #0]
 8014694:	e02e      	b.n	80146f4 <tcp_process+0x5e4>
 8014696:	4b0e      	ldr	r3, [pc, #56]	; (80146d0 <tcp_process+0x5c0>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	617b      	str	r3, [r7, #20]
 801469c:	e027      	b.n	80146ee <tcp_process+0x5de>
 801469e:	bf00      	nop
 80146a0:	200071e0 	.word	0x200071e0
 80146a4:	200071d8 	.word	0x200071d8
 80146a8:	200071de 	.word	0x200071de
 80146ac:	200071d4 	.word	0x200071d4
 80146b0:	200071c4 	.word	0x200071c4
 80146b4:	200008d0 	.word	0x200008d0
 80146b8:	200008d4 	.word	0x200008d4
 80146bc:	0801ee44 	.word	0x0801ee44
 80146c0:	0801f0e4 	.word	0x0801f0e4
 80146c4:	0801ee90 	.word	0x0801ee90
 80146c8:	200071dc 	.word	0x200071dc
 80146cc:	200071e1 	.word	0x200071e1
 80146d0:	200071a8 	.word	0x200071a8
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d104      	bne.n	80146e8 <tcp_process+0x5d8>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	68da      	ldr	r2, [r3, #12]
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	60da      	str	r2, [r3, #12]
 80146e6:	e005      	b.n	80146f4 <tcp_process+0x5e4>
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	68db      	ldr	r3, [r3, #12]
 80146ec:	617b      	str	r3, [r7, #20]
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d1ef      	bne.n	80146d4 <tcp_process+0x5c4>
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2200      	movs	r2, #0
 80146f8:	60da      	str	r2, [r3, #12]
 80146fa:	4b77      	ldr	r3, [pc, #476]	; (80148d8 <tcp_process+0x7c8>)
 80146fc:	2201      	movs	r2, #1
 80146fe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	220a      	movs	r2, #10
 8014704:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014706:	4b75      	ldr	r3, [pc, #468]	; (80148dc <tcp_process+0x7cc>)
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	60da      	str	r2, [r3, #12]
 801470e:	4a73      	ldr	r2, [pc, #460]	; (80148dc <tcp_process+0x7cc>)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6013      	str	r3, [r2, #0]
 8014714:	f003 f952 	bl	80179bc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014718:	e0d2      	b.n	80148c0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	8b5b      	ldrh	r3, [r3, #26]
 801471e:	f043 0302 	orr.w	r3, r3, #2
 8014722:	b29a      	uxth	r2, r3
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2208      	movs	r2, #8
 801472c:	751a      	strb	r2, [r3, #20]
      break;
 801472e:	e0c7      	b.n	80148c0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014730:	4b6b      	ldr	r3, [pc, #428]	; (80148e0 <tcp_process+0x7d0>)
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	f003 0310 	and.w	r3, r3, #16
 8014738:	2b00      	cmp	r3, #0
 801473a:	f000 80c1 	beq.w	80148c0 <tcp_process+0x7b0>
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014742:	4b68      	ldr	r3, [pc, #416]	; (80148e4 <tcp_process+0x7d4>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	429a      	cmp	r2, r3
 8014748:	f040 80ba 	bne.w	80148c0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014750:	2b00      	cmp	r3, #0
 8014752:	f040 80b5 	bne.w	80148c0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2206      	movs	r2, #6
 801475a:	751a      	strb	r2, [r3, #20]
      break;
 801475c:	e0b0      	b.n	80148c0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f000 f9ca 	bl	8014af8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014764:	4b60      	ldr	r3, [pc, #384]	; (80148e8 <tcp_process+0x7d8>)
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	f003 0320 	and.w	r3, r3, #32
 801476c:	2b00      	cmp	r3, #0
 801476e:	f000 80a9 	beq.w	80148c4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	8b5b      	ldrh	r3, [r3, #26]
 8014776:	f043 0302 	orr.w	r3, r3, #2
 801477a:	b29a      	uxth	r2, r3
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f7fe fd39 	bl	80131f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014786:	4b59      	ldr	r3, [pc, #356]	; (80148ec <tcp_process+0x7dc>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	429a      	cmp	r2, r3
 801478e:	d105      	bne.n	801479c <tcp_process+0x68c>
 8014790:	4b56      	ldr	r3, [pc, #344]	; (80148ec <tcp_process+0x7dc>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	68db      	ldr	r3, [r3, #12]
 8014796:	4a55      	ldr	r2, [pc, #340]	; (80148ec <tcp_process+0x7dc>)
 8014798:	6013      	str	r3, [r2, #0]
 801479a:	e013      	b.n	80147c4 <tcp_process+0x6b4>
 801479c:	4b53      	ldr	r3, [pc, #332]	; (80148ec <tcp_process+0x7dc>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	613b      	str	r3, [r7, #16]
 80147a2:	e00c      	b.n	80147be <tcp_process+0x6ae>
 80147a4:	693b      	ldr	r3, [r7, #16]
 80147a6:	68db      	ldr	r3, [r3, #12]
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d104      	bne.n	80147b8 <tcp_process+0x6a8>
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	68da      	ldr	r2, [r3, #12]
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	60da      	str	r2, [r3, #12]
 80147b6:	e005      	b.n	80147c4 <tcp_process+0x6b4>
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	68db      	ldr	r3, [r3, #12]
 80147bc:	613b      	str	r3, [r7, #16]
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d1ef      	bne.n	80147a4 <tcp_process+0x694>
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2200      	movs	r2, #0
 80147c8:	60da      	str	r2, [r3, #12]
 80147ca:	4b43      	ldr	r3, [pc, #268]	; (80148d8 <tcp_process+0x7c8>)
 80147cc:	2201      	movs	r2, #1
 80147ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	220a      	movs	r2, #10
 80147d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80147d6:	4b41      	ldr	r3, [pc, #260]	; (80148dc <tcp_process+0x7cc>)
 80147d8:	681a      	ldr	r2, [r3, #0]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	60da      	str	r2, [r3, #12]
 80147de:	4a3f      	ldr	r2, [pc, #252]	; (80148dc <tcp_process+0x7cc>)
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6013      	str	r3, [r2, #0]
 80147e4:	f003 f8ea 	bl	80179bc <tcp_timer_needed>
      }
      break;
 80147e8:	e06c      	b.n	80148c4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f000 f984 	bl	8014af8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80147f0:	4b3b      	ldr	r3, [pc, #236]	; (80148e0 <tcp_process+0x7d0>)
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	f003 0310 	and.w	r3, r3, #16
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d065      	beq.n	80148c8 <tcp_process+0x7b8>
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014800:	4b38      	ldr	r3, [pc, #224]	; (80148e4 <tcp_process+0x7d4>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	429a      	cmp	r2, r3
 8014806:	d15f      	bne.n	80148c8 <tcp_process+0x7b8>
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801480c:	2b00      	cmp	r3, #0
 801480e:	d15b      	bne.n	80148c8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7fe fcf1 	bl	80131f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014816:	4b35      	ldr	r3, [pc, #212]	; (80148ec <tcp_process+0x7dc>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	429a      	cmp	r2, r3
 801481e:	d105      	bne.n	801482c <tcp_process+0x71c>
 8014820:	4b32      	ldr	r3, [pc, #200]	; (80148ec <tcp_process+0x7dc>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	4a31      	ldr	r2, [pc, #196]	; (80148ec <tcp_process+0x7dc>)
 8014828:	6013      	str	r3, [r2, #0]
 801482a:	e013      	b.n	8014854 <tcp_process+0x744>
 801482c:	4b2f      	ldr	r3, [pc, #188]	; (80148ec <tcp_process+0x7dc>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	60fb      	str	r3, [r7, #12]
 8014832:	e00c      	b.n	801484e <tcp_process+0x73e>
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	68db      	ldr	r3, [r3, #12]
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	429a      	cmp	r2, r3
 801483c:	d104      	bne.n	8014848 <tcp_process+0x738>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	68da      	ldr	r2, [r3, #12]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	60da      	str	r2, [r3, #12]
 8014846:	e005      	b.n	8014854 <tcp_process+0x744>
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	68db      	ldr	r3, [r3, #12]
 801484c:	60fb      	str	r3, [r7, #12]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d1ef      	bne.n	8014834 <tcp_process+0x724>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2200      	movs	r2, #0
 8014858:	60da      	str	r2, [r3, #12]
 801485a:	4b1f      	ldr	r3, [pc, #124]	; (80148d8 <tcp_process+0x7c8>)
 801485c:	2201      	movs	r2, #1
 801485e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	220a      	movs	r2, #10
 8014864:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014866:	4b1d      	ldr	r3, [pc, #116]	; (80148dc <tcp_process+0x7cc>)
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	60da      	str	r2, [r3, #12]
 801486e:	4a1b      	ldr	r2, [pc, #108]	; (80148dc <tcp_process+0x7cc>)
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6013      	str	r3, [r2, #0]
 8014874:	f003 f8a2 	bl	80179bc <tcp_timer_needed>
      }
      break;
 8014878:	e026      	b.n	80148c8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f000 f93c 	bl	8014af8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014880:	4b17      	ldr	r3, [pc, #92]	; (80148e0 <tcp_process+0x7d0>)
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	f003 0310 	and.w	r3, r3, #16
 8014888:	2b00      	cmp	r3, #0
 801488a:	d01f      	beq.n	80148cc <tcp_process+0x7bc>
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014890:	4b14      	ldr	r3, [pc, #80]	; (80148e4 <tcp_process+0x7d4>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	429a      	cmp	r2, r3
 8014896:	d119      	bne.n	80148cc <tcp_process+0x7bc>
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801489c:	2b00      	cmp	r3, #0
 801489e:	d115      	bne.n	80148cc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80148a0:	4b11      	ldr	r3, [pc, #68]	; (80148e8 <tcp_process+0x7d8>)
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	f043 0310 	orr.w	r3, r3, #16
 80148a8:	b2da      	uxtb	r2, r3
 80148aa:	4b0f      	ldr	r3, [pc, #60]	; (80148e8 <tcp_process+0x7d8>)
 80148ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80148ae:	e00d      	b.n	80148cc <tcp_process+0x7bc>
    default:
      break;
 80148b0:	bf00      	nop
 80148b2:	e00c      	b.n	80148ce <tcp_process+0x7be>
      break;
 80148b4:	bf00      	nop
 80148b6:	e00a      	b.n	80148ce <tcp_process+0x7be>
      break;
 80148b8:	bf00      	nop
 80148ba:	e008      	b.n	80148ce <tcp_process+0x7be>
      break;
 80148bc:	bf00      	nop
 80148be:	e006      	b.n	80148ce <tcp_process+0x7be>
      break;
 80148c0:	bf00      	nop
 80148c2:	e004      	b.n	80148ce <tcp_process+0x7be>
      break;
 80148c4:	bf00      	nop
 80148c6:	e002      	b.n	80148ce <tcp_process+0x7be>
      break;
 80148c8:	bf00      	nop
 80148ca:	e000      	b.n	80148ce <tcp_process+0x7be>
      break;
 80148cc:	bf00      	nop
  }
  return ERR_OK;
 80148ce:	2300      	movs	r3, #0
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3724      	adds	r7, #36	; 0x24
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd90      	pop	{r4, r7, pc}
 80148d8:	200071b0 	.word	0x200071b0
 80148dc:	200071ac 	.word	0x200071ac
 80148e0:	200071e0 	.word	0x200071e0
 80148e4:	200071d8 	.word	0x200071d8
 80148e8:	200071e1 	.word	0x200071e1
 80148ec:	200071a8 	.word	0x200071a8

080148f0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80148f0:	b590      	push	{r4, r7, lr}
 80148f2:	b085      	sub	sp, #20
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d106      	bne.n	801490e <tcp_oos_insert_segment+0x1e>
 8014900:	4b3b      	ldr	r3, [pc, #236]	; (80149f0 <tcp_oos_insert_segment+0x100>)
 8014902:	f240 421f 	movw	r2, #1055	; 0x41f
 8014906:	493b      	ldr	r1, [pc, #236]	; (80149f4 <tcp_oos_insert_segment+0x104>)
 8014908:	483b      	ldr	r0, [pc, #236]	; (80149f8 <tcp_oos_insert_segment+0x108>)
 801490a:	f006 fc11 	bl	801b130 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	68db      	ldr	r3, [r3, #12]
 8014912:	899b      	ldrh	r3, [r3, #12]
 8014914:	b29b      	uxth	r3, r3
 8014916:	4618      	mov	r0, r3
 8014918:	f7fb f966 	bl	800fbe8 <lwip_htons>
 801491c:	4603      	mov	r3, r0
 801491e:	b2db      	uxtb	r3, r3
 8014920:	f003 0301 	and.w	r3, r3, #1
 8014924:	2b00      	cmp	r3, #0
 8014926:	d028      	beq.n	801497a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014928:	6838      	ldr	r0, [r7, #0]
 801492a:	f7fe f9b3 	bl	8012c94 <tcp_segs_free>
    next = NULL;
 801492e:	2300      	movs	r3, #0
 8014930:	603b      	str	r3, [r7, #0]
 8014932:	e056      	b.n	80149e2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	68db      	ldr	r3, [r3, #12]
 8014938:	899b      	ldrh	r3, [r3, #12]
 801493a:	b29b      	uxth	r3, r3
 801493c:	4618      	mov	r0, r3
 801493e:	f7fb f953 	bl	800fbe8 <lwip_htons>
 8014942:	4603      	mov	r3, r0
 8014944:	b2db      	uxtb	r3, r3
 8014946:	f003 0301 	and.w	r3, r3, #1
 801494a:	2b00      	cmp	r3, #0
 801494c:	d00d      	beq.n	801496a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	899b      	ldrh	r3, [r3, #12]
 8014954:	b29c      	uxth	r4, r3
 8014956:	2001      	movs	r0, #1
 8014958:	f7fb f946 	bl	800fbe8 <lwip_htons>
 801495c:	4603      	mov	r3, r0
 801495e:	461a      	mov	r2, r3
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	4322      	orrs	r2, r4
 8014966:	b292      	uxth	r2, r2
 8014968:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014974:	68f8      	ldr	r0, [r7, #12]
 8014976:	f7fe f9a2 	bl	8012cbe <tcp_seg_free>
    while (next &&
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00e      	beq.n	801499e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	891b      	ldrh	r3, [r3, #8]
 8014984:	461a      	mov	r2, r3
 8014986:	4b1d      	ldr	r3, [pc, #116]	; (80149fc <tcp_oos_insert_segment+0x10c>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	441a      	add	r2, r3
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	68db      	ldr	r3, [r3, #12]
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	6839      	ldr	r1, [r7, #0]
 8014994:	8909      	ldrh	r1, [r1, #8]
 8014996:	440b      	add	r3, r1
 8014998:	1ad3      	subs	r3, r2, r3
    while (next &&
 801499a:	2b00      	cmp	r3, #0
 801499c:	daca      	bge.n	8014934 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d01e      	beq.n	80149e2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	891b      	ldrh	r3, [r3, #8]
 80149a8:	461a      	mov	r2, r3
 80149aa:	4b14      	ldr	r3, [pc, #80]	; (80149fc <tcp_oos_insert_segment+0x10c>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	441a      	add	r2, r3
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	68db      	ldr	r3, [r3, #12]
 80149b4:	685b      	ldr	r3, [r3, #4]
 80149b6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	dd12      	ble.n	80149e2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	68db      	ldr	r3, [r3, #12]
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	b29a      	uxth	r2, r3
 80149c4:	4b0d      	ldr	r3, [pc, #52]	; (80149fc <tcp_oos_insert_segment+0x10c>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	b29a      	uxth	r2, r3
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	685a      	ldr	r2, [r3, #4]
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	891b      	ldrh	r3, [r3, #8]
 80149da:	4619      	mov	r1, r3
 80149dc:	4610      	mov	r0, r2
 80149de:	f7fc fb83 	bl	80110e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	683a      	ldr	r2, [r7, #0]
 80149e6:	601a      	str	r2, [r3, #0]
}
 80149e8:	bf00      	nop
 80149ea:	3714      	adds	r7, #20
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd90      	pop	{r4, r7, pc}
 80149f0:	0801ee44 	.word	0x0801ee44
 80149f4:	0801f104 	.word	0x0801f104
 80149f8:	0801ee90 	.word	0x0801ee90
 80149fc:	200071d4 	.word	0x200071d4

08014a00 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014a00:	b5b0      	push	{r4, r5, r7, lr}
 8014a02:	b086      	sub	sp, #24
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	60f8      	str	r0, [r7, #12]
 8014a08:	60b9      	str	r1, [r7, #8]
 8014a0a:	607a      	str	r2, [r7, #4]
 8014a0c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014a0e:	e03e      	b.n	8014a8e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7fc fd6e 	bl	8011500 <pbuf_clen>
 8014a24:	4603      	mov	r3, r0
 8014a26:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014a2e:	8a7a      	ldrh	r2, [r7, #18]
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d906      	bls.n	8014a42 <tcp_free_acked_segments+0x42>
 8014a34:	4b2a      	ldr	r3, [pc, #168]	; (8014ae0 <tcp_free_acked_segments+0xe0>)
 8014a36:	f240 4257 	movw	r2, #1111	; 0x457
 8014a3a:	492a      	ldr	r1, [pc, #168]	; (8014ae4 <tcp_free_acked_segments+0xe4>)
 8014a3c:	482a      	ldr	r0, [pc, #168]	; (8014ae8 <tcp_free_acked_segments+0xe8>)
 8014a3e:	f006 fb77 	bl	801b130 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014a48:	8a7b      	ldrh	r3, [r7, #18]
 8014a4a:	1ad3      	subs	r3, r2, r3
 8014a4c:	b29a      	uxth	r2, r3
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	891a      	ldrh	r2, [r3, #8]
 8014a58:	4b24      	ldr	r3, [pc, #144]	; (8014aec <tcp_free_acked_segments+0xec>)
 8014a5a:	881b      	ldrh	r3, [r3, #0]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	b29a      	uxth	r2, r3
 8014a60:	4b22      	ldr	r3, [pc, #136]	; (8014aec <tcp_free_acked_segments+0xec>)
 8014a62:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014a64:	6978      	ldr	r0, [r7, #20]
 8014a66:	f7fe f92a 	bl	8012cbe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d00c      	beq.n	8014a8e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d109      	bne.n	8014a8e <tcp_free_acked_segments+0x8e>
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d106      	bne.n	8014a8e <tcp_free_acked_segments+0x8e>
 8014a80:	4b17      	ldr	r3, [pc, #92]	; (8014ae0 <tcp_free_acked_segments+0xe0>)
 8014a82:	f240 4261 	movw	r2, #1121	; 0x461
 8014a86:	491a      	ldr	r1, [pc, #104]	; (8014af0 <tcp_free_acked_segments+0xf0>)
 8014a88:	4817      	ldr	r0, [pc, #92]	; (8014ae8 <tcp_free_acked_segments+0xe8>)
 8014a8a:	f006 fb51 	bl	801b130 <iprintf>
  while (seg_list != NULL &&
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d020      	beq.n	8014ad6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	685b      	ldr	r3, [r3, #4]
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7fb f8b9 	bl	800fc12 <lwip_htonl>
 8014aa0:	4604      	mov	r4, r0
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	891b      	ldrh	r3, [r3, #8]
 8014aa6:	461d      	mov	r5, r3
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	899b      	ldrh	r3, [r3, #12]
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fb f899 	bl	800fbe8 <lwip_htons>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	b2db      	uxtb	r3, r3
 8014aba:	f003 0303 	and.w	r3, r3, #3
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d001      	beq.n	8014ac6 <tcp_free_acked_segments+0xc6>
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	e000      	b.n	8014ac8 <tcp_free_acked_segments+0xc8>
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	442b      	add	r3, r5
 8014aca:	18e2      	adds	r2, r4, r3
 8014acc:	4b09      	ldr	r3, [pc, #36]	; (8014af4 <tcp_free_acked_segments+0xf4>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	dd9c      	ble.n	8014a10 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014ad6:	68bb      	ldr	r3, [r7, #8]
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3718      	adds	r7, #24
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bdb0      	pop	{r4, r5, r7, pc}
 8014ae0:	0801ee44 	.word	0x0801ee44
 8014ae4:	0801f12c 	.word	0x0801f12c
 8014ae8:	0801ee90 	.word	0x0801ee90
 8014aec:	200071dc 	.word	0x200071dc
 8014af0:	0801f154 	.word	0x0801f154
 8014af4:	200071d8 	.word	0x200071d8

08014af8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014af8:	b5b0      	push	{r4, r5, r7, lr}
 8014afa:	b094      	sub	sp, #80	; 0x50
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014b00:	2300      	movs	r3, #0
 8014b02:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d106      	bne.n	8014b18 <tcp_receive+0x20>
 8014b0a:	4b91      	ldr	r3, [pc, #580]	; (8014d50 <tcp_receive+0x258>)
 8014b0c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014b10:	4990      	ldr	r1, [pc, #576]	; (8014d54 <tcp_receive+0x25c>)
 8014b12:	4891      	ldr	r0, [pc, #580]	; (8014d58 <tcp_receive+0x260>)
 8014b14:	f006 fb0c 	bl	801b130 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	7d1b      	ldrb	r3, [r3, #20]
 8014b1c:	2b03      	cmp	r3, #3
 8014b1e:	d806      	bhi.n	8014b2e <tcp_receive+0x36>
 8014b20:	4b8b      	ldr	r3, [pc, #556]	; (8014d50 <tcp_receive+0x258>)
 8014b22:	f240 427c 	movw	r2, #1148	; 0x47c
 8014b26:	498d      	ldr	r1, [pc, #564]	; (8014d5c <tcp_receive+0x264>)
 8014b28:	488b      	ldr	r0, [pc, #556]	; (8014d58 <tcp_receive+0x260>)
 8014b2a:	f006 fb01 	bl	801b130 <iprintf>

  if (flags & TCP_ACK) {
 8014b2e:	4b8c      	ldr	r3, [pc, #560]	; (8014d60 <tcp_receive+0x268>)
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	f003 0310 	and.w	r3, r3, #16
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	f000 8264 	beq.w	8015004 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b42:	461a      	mov	r2, r3
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b48:	4413      	add	r3, r2
 8014b4a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b50:	4b84      	ldr	r3, [pc, #528]	; (8014d64 <tcp_receive+0x26c>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	1ad3      	subs	r3, r2, r3
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	db1b      	blt.n	8014b92 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b5e:	4b81      	ldr	r3, [pc, #516]	; (8014d64 <tcp_receive+0x26c>)
 8014b60:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d106      	bne.n	8014b74 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014b6a:	4b7f      	ldr	r3, [pc, #508]	; (8014d68 <tcp_receive+0x270>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	1ad3      	subs	r3, r2, r3
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	db0e      	blt.n	8014b92 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014b78:	4b7b      	ldr	r3, [pc, #492]	; (8014d68 <tcp_receive+0x270>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d125      	bne.n	8014bcc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014b80:	4b7a      	ldr	r3, [pc, #488]	; (8014d6c <tcp_receive+0x274>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	89db      	ldrh	r3, [r3, #14]
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d91c      	bls.n	8014bcc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014b92:	4b76      	ldr	r3, [pc, #472]	; (8014d6c <tcp_receive+0x274>)
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	89db      	ldrh	r3, [r3, #14]
 8014b98:	b29a      	uxth	r2, r3
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d205      	bcs.n	8014bbc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014bbc:	4b69      	ldr	r3, [pc, #420]	; (8014d64 <tcp_receive+0x26c>)
 8014bbe:	681a      	ldr	r2, [r3, #0]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014bc4:	4b68      	ldr	r3, [pc, #416]	; (8014d68 <tcp_receive+0x270>)
 8014bc6:	681a      	ldr	r2, [r3, #0]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014bcc:	4b66      	ldr	r3, [pc, #408]	; (8014d68 <tcp_receive+0x270>)
 8014bce:	681a      	ldr	r2, [r3, #0]
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bd4:	1ad3      	subs	r3, r2, r3
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	dc58      	bgt.n	8014c8c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014bda:	4b65      	ldr	r3, [pc, #404]	; (8014d70 <tcp_receive+0x278>)
 8014bdc:	881b      	ldrh	r3, [r3, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d14b      	bne.n	8014c7a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014bec:	4413      	add	r3, r2
 8014bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d142      	bne.n	8014c7a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	db3d      	blt.n	8014c7a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014c02:	4b59      	ldr	r3, [pc, #356]	; (8014d68 <tcp_receive+0x270>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d137      	bne.n	8014c7a <tcp_receive+0x182>
              found_dupack = 1;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c14:	2bff      	cmp	r3, #255	; 0xff
 8014c16:	d007      	beq.n	8014c28 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c1e:	3301      	adds	r3, #1
 8014c20:	b2da      	uxtb	r2, r3
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c2e:	2b03      	cmp	r3, #3
 8014c30:	d91b      	bls.n	8014c6a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c3c:	4413      	add	r3, r2
 8014c3e:	b29a      	uxth	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d30a      	bcc.n	8014c60 <tcp_receive+0x168>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c54:	4413      	add	r3, r2
 8014c56:	b29a      	uxth	r2, r3
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014c5e:	e004      	b.n	8014c6a <tcp_receive+0x172>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c70:	2b02      	cmp	r3, #2
 8014c72:	d902      	bls.n	8014c7a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f002 fb45 	bl	8017304 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	f040 8161 	bne.w	8014f44 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2200      	movs	r2, #0
 8014c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014c8a:	e15b      	b.n	8014f44 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014c8c:	4b36      	ldr	r3, [pc, #216]	; (8014d68 <tcp_receive+0x270>)
 8014c8e:	681a      	ldr	r2, [r3, #0]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c94:	1ad3      	subs	r3, r2, r3
 8014c96:	3b01      	subs	r3, #1
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	f2c0 814e 	blt.w	8014f3a <tcp_receive+0x442>
 8014c9e:	4b32      	ldr	r3, [pc, #200]	; (8014d68 <tcp_receive+0x270>)
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ca6:	1ad3      	subs	r3, r2, r3
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	f300 8146 	bgt.w	8014f3a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	8b5b      	ldrh	r3, [r3, #26]
 8014cb2:	f003 0304 	and.w	r3, r3, #4
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d010      	beq.n	8014cdc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	8b5b      	ldrh	r3, [r3, #26]
 8014cbe:	f023 0304 	bic.w	r3, r3, #4
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2200      	movs	r2, #0
 8014ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014cea:	10db      	asrs	r3, r3, #3
 8014cec:	b21b      	sxth	r3, r3
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	4413      	add	r3, r2
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	b21a      	sxth	r2, r3
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014d04:	4b18      	ldr	r3, [pc, #96]	; (8014d68 <tcp_receive+0x270>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	b29a      	uxth	r2, r3
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	1ad3      	subs	r3, r2, r3
 8014d12:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2200      	movs	r2, #0
 8014d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014d1c:	4b12      	ldr	r3, [pc, #72]	; (8014d68 <tcp_receive+0x270>)
 8014d1e:	681a      	ldr	r2, [r3, #0]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	7d1b      	ldrb	r3, [r3, #20]
 8014d28:	2b03      	cmp	r3, #3
 8014d2a:	f240 8097 	bls.w	8014e5c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d245      	bcs.n	8014dca <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	8b5b      	ldrh	r3, [r3, #26]
 8014d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d014      	beq.n	8014d74 <tcp_receive+0x27c>
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	e013      	b.n	8014d76 <tcp_receive+0x27e>
 8014d4e:	bf00      	nop
 8014d50:	0801ee44 	.word	0x0801ee44
 8014d54:	0801f174 	.word	0x0801f174
 8014d58:	0801ee90 	.word	0x0801ee90
 8014d5c:	0801f190 	.word	0x0801f190
 8014d60:	200071e0 	.word	0x200071e0
 8014d64:	200071d4 	.word	0x200071d4
 8014d68:	200071d8 	.word	0x200071d8
 8014d6c:	200071c4 	.word	0x200071c4
 8014d70:	200071de 	.word	0x200071de
 8014d74:	2302      	movs	r3, #2
 8014d76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014d7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014d7e:	b29a      	uxth	r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d84:	fb12 f303 	smulbb	r3, r2, r3
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	bf28      	it	cs
 8014d90:	4613      	movcs	r3, r2
 8014d92:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014d9c:	4413      	add	r3, r2
 8014d9e:	b29a      	uxth	r2, r3
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d309      	bcc.n	8014dbe <tcp_receive+0x2c6>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014db0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014db2:	4413      	add	r3, r2
 8014db4:	b29a      	uxth	r2, r3
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014dbc:	e04e      	b.n	8014e5c <tcp_receive+0x364>
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014dc4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014dc8:	e048      	b.n	8014e5c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014dd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014dd2:	4413      	add	r3, r2
 8014dd4:	b29a      	uxth	r2, r3
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d309      	bcc.n	8014df4 <tcp_receive+0x2fc>
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014de6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014de8:	4413      	add	r3, r2
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014df2:	e004      	b.n	8014dfe <tcp_receive+0x306>
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e0a:	429a      	cmp	r2, r3
 8014e0c:	d326      	bcc.n	8014e5c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e1a:	1ad3      	subs	r3, r2, r3
 8014e1c:	b29a      	uxth	r2, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e2e:	4413      	add	r3, r2
 8014e30:	b29a      	uxth	r2, r3
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d30a      	bcc.n	8014e52 <tcp_receive+0x35a>
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e46:	4413      	add	r3, r2
 8014e48:	b29a      	uxth	r2, r3
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014e50:	e004      	b.n	8014e5c <tcp_receive+0x364>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e64:	4a98      	ldr	r2, [pc, #608]	; (80150c8 <tcp_receive+0x5d0>)
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f7ff fdca 	bl	8014a00 <tcp_free_acked_segments>
 8014e6c:	4602      	mov	r2, r0
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e7a:	4a94      	ldr	r2, [pc, #592]	; (80150cc <tcp_receive+0x5d4>)
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7ff fdbf 	bl	8014a00 <tcp_free_acked_segments>
 8014e82:	4602      	mov	r2, r0
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d104      	bne.n	8014e9a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e96:	861a      	strh	r2, [r3, #48]	; 0x30
 8014e98:	e002      	b.n	8014ea0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d103      	bne.n	8014eb6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014ebc:	4b84      	ldr	r3, [pc, #528]	; (80150d0 <tcp_receive+0x5d8>)
 8014ebe:	881b      	ldrh	r3, [r3, #0]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	8b5b      	ldrh	r3, [r3, #26]
 8014ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d035      	beq.n	8014f42 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d118      	bne.n	8014f10 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d00c      	beq.n	8014f00 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014eee:	68db      	ldr	r3, [r3, #12]
 8014ef0:	685b      	ldr	r3, [r3, #4]
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7fa fe8d 	bl	800fc12 <lwip_htonl>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	dc20      	bgt.n	8014f42 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	8b5b      	ldrh	r3, [r3, #26]
 8014f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014f08:	b29a      	uxth	r2, r3
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f0e:	e018      	b.n	8014f42 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f18:	68db      	ldr	r3, [r3, #12]
 8014f1a:	685b      	ldr	r3, [r3, #4]
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f7fa fe78 	bl	800fc12 <lwip_htonl>
 8014f22:	4603      	mov	r3, r0
 8014f24:	1ae3      	subs	r3, r4, r3
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	dc0b      	bgt.n	8014f42 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	8b5b      	ldrh	r3, [r3, #26]
 8014f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f38:	e003      	b.n	8014f42 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f002 fbce 	bl	80176dc <tcp_send_empty_ack>
 8014f40:	e000      	b.n	8014f44 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f42:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d05b      	beq.n	8015004 <tcp_receive+0x50c>
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f50:	4b60      	ldr	r3, [pc, #384]	; (80150d4 <tcp_receive+0x5dc>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	1ad3      	subs	r3, r2, r3
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	da54      	bge.n	8015004 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014f5a:	4b5f      	ldr	r3, [pc, #380]	; (80150d8 <tcp_receive+0x5e0>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f64:	b29b      	uxth	r3, r3
 8014f66:	1ad3      	subs	r3, r2, r3
 8014f68:	b29b      	uxth	r3, r3
 8014f6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014f6e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f78:	10db      	asrs	r3, r3, #3
 8014f7a:	b21b      	sxth	r3, r3
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f8c:	b29a      	uxth	r2, r3
 8014f8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014f92:	4413      	add	r3, r2
 8014f94:	b29b      	uxth	r3, r3
 8014f96:	b21a      	sxth	r2, r3
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014f9c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	da05      	bge.n	8014fb0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014fa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014fa8:	425b      	negs	r3, r3
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014fb0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014fba:	109b      	asrs	r3, r3, #2
 8014fbc:	b21b      	sxth	r3, r3
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	1ad3      	subs	r3, r2, r3
 8014fc2:	b29b      	uxth	r3, r3
 8014fc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014fd4:	4413      	add	r3, r2
 8014fd6:	b29b      	uxth	r3, r3
 8014fd8:	b21a      	sxth	r2, r3
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014fe4:	10db      	asrs	r3, r3, #3
 8014fe6:	b21b      	sxth	r3, r3
 8014fe8:	b29a      	uxth	r2, r3
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014ff0:	b29b      	uxth	r3, r3
 8014ff2:	4413      	add	r3, r2
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	b21a      	sxth	r2, r3
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	2200      	movs	r2, #0
 8015002:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015004:	4b35      	ldr	r3, [pc, #212]	; (80150dc <tcp_receive+0x5e4>)
 8015006:	881b      	ldrh	r3, [r3, #0]
 8015008:	2b00      	cmp	r3, #0
 801500a:	f000 84e2 	beq.w	80159d2 <tcp_receive+0xeda>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	7d1b      	ldrb	r3, [r3, #20]
 8015012:	2b06      	cmp	r3, #6
 8015014:	f200 84dd 	bhi.w	80159d2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801501c:	4b30      	ldr	r3, [pc, #192]	; (80150e0 <tcp_receive+0x5e8>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	1ad3      	subs	r3, r2, r3
 8015022:	3b01      	subs	r3, #1
 8015024:	2b00      	cmp	r3, #0
 8015026:	f2c0 808f 	blt.w	8015148 <tcp_receive+0x650>
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801502e:	4b2b      	ldr	r3, [pc, #172]	; (80150dc <tcp_receive+0x5e4>)
 8015030:	881b      	ldrh	r3, [r3, #0]
 8015032:	4619      	mov	r1, r3
 8015034:	4b2a      	ldr	r3, [pc, #168]	; (80150e0 <tcp_receive+0x5e8>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	440b      	add	r3, r1
 801503a:	1ad3      	subs	r3, r2, r3
 801503c:	3301      	adds	r3, #1
 801503e:	2b00      	cmp	r3, #0
 8015040:	f300 8082 	bgt.w	8015148 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015044:	4b27      	ldr	r3, [pc, #156]	; (80150e4 <tcp_receive+0x5ec>)
 8015046:	685b      	ldr	r3, [r3, #4]
 8015048:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801504e:	4b24      	ldr	r3, [pc, #144]	; (80150e0 <tcp_receive+0x5e8>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015056:	4b23      	ldr	r3, [pc, #140]	; (80150e4 <tcp_receive+0x5ec>)
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d106      	bne.n	801506c <tcp_receive+0x574>
 801505e:	4b22      	ldr	r3, [pc, #136]	; (80150e8 <tcp_receive+0x5f0>)
 8015060:	f240 5294 	movw	r2, #1428	; 0x594
 8015064:	4921      	ldr	r1, [pc, #132]	; (80150ec <tcp_receive+0x5f4>)
 8015066:	4822      	ldr	r0, [pc, #136]	; (80150f0 <tcp_receive+0x5f8>)
 8015068:	f006 f862 	bl	801b130 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015072:	4293      	cmp	r3, r2
 8015074:	d906      	bls.n	8015084 <tcp_receive+0x58c>
 8015076:	4b1c      	ldr	r3, [pc, #112]	; (80150e8 <tcp_receive+0x5f0>)
 8015078:	f240 5295 	movw	r2, #1429	; 0x595
 801507c:	491d      	ldr	r1, [pc, #116]	; (80150f4 <tcp_receive+0x5fc>)
 801507e:	481c      	ldr	r0, [pc, #112]	; (80150f0 <tcp_receive+0x5f8>)
 8015080:	f006 f856 	bl	801b130 <iprintf>
      off = (u16_t)off32;
 8015084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015086:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801508a:	4b16      	ldr	r3, [pc, #88]	; (80150e4 <tcp_receive+0x5ec>)
 801508c:	685b      	ldr	r3, [r3, #4]
 801508e:	891b      	ldrh	r3, [r3, #8]
 8015090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015094:	429a      	cmp	r2, r3
 8015096:	d906      	bls.n	80150a6 <tcp_receive+0x5ae>
 8015098:	4b13      	ldr	r3, [pc, #76]	; (80150e8 <tcp_receive+0x5f0>)
 801509a:	f240 5297 	movw	r2, #1431	; 0x597
 801509e:	4916      	ldr	r1, [pc, #88]	; (80150f8 <tcp_receive+0x600>)
 80150a0:	4813      	ldr	r0, [pc, #76]	; (80150f0 <tcp_receive+0x5f8>)
 80150a2:	f006 f845 	bl	801b130 <iprintf>
      inseg.len -= off;
 80150a6:	4b0f      	ldr	r3, [pc, #60]	; (80150e4 <tcp_receive+0x5ec>)
 80150a8:	891a      	ldrh	r2, [r3, #8]
 80150aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80150ae:	1ad3      	subs	r3, r2, r3
 80150b0:	b29a      	uxth	r2, r3
 80150b2:	4b0c      	ldr	r3, [pc, #48]	; (80150e4 <tcp_receive+0x5ec>)
 80150b4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80150b6:	4b0b      	ldr	r3, [pc, #44]	; (80150e4 <tcp_receive+0x5ec>)
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	891a      	ldrh	r2, [r3, #8]
 80150bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80150c4:	e02a      	b.n	801511c <tcp_receive+0x624>
 80150c6:	bf00      	nop
 80150c8:	0801f1ac 	.word	0x0801f1ac
 80150cc:	0801f1b4 	.word	0x0801f1b4
 80150d0:	200071dc 	.word	0x200071dc
 80150d4:	200071d8 	.word	0x200071d8
 80150d8:	2000719c 	.word	0x2000719c
 80150dc:	200071de 	.word	0x200071de
 80150e0:	200071d4 	.word	0x200071d4
 80150e4:	200071b4 	.word	0x200071b4
 80150e8:	0801ee44 	.word	0x0801ee44
 80150ec:	0801f1bc 	.word	0x0801f1bc
 80150f0:	0801ee90 	.word	0x0801ee90
 80150f4:	0801f1cc 	.word	0x0801f1cc
 80150f8:	0801f1dc 	.word	0x0801f1dc
        off -= p->len;
 80150fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150fe:	895b      	ldrh	r3, [r3, #10]
 8015100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015104:	1ad3      	subs	r3, r2, r3
 8015106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801510a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801510c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801510e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015112:	2200      	movs	r2, #0
 8015114:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801511c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801511e:	895b      	ldrh	r3, [r3, #10]
 8015120:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015124:	429a      	cmp	r2, r3
 8015126:	d8e9      	bhi.n	80150fc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801512c:	4619      	mov	r1, r3
 801512e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015130:	f7fc f8d8 	bl	80112e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015138:	4a91      	ldr	r2, [pc, #580]	; (8015380 <tcp_receive+0x888>)
 801513a:	6013      	str	r3, [r2, #0]
 801513c:	4b91      	ldr	r3, [pc, #580]	; (8015384 <tcp_receive+0x88c>)
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	4a8f      	ldr	r2, [pc, #572]	; (8015380 <tcp_receive+0x888>)
 8015142:	6812      	ldr	r2, [r2, #0]
 8015144:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015146:	e00d      	b.n	8015164 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015148:	4b8d      	ldr	r3, [pc, #564]	; (8015380 <tcp_receive+0x888>)
 801514a:	681a      	ldr	r2, [r3, #0]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015150:	1ad3      	subs	r3, r2, r3
 8015152:	2b00      	cmp	r3, #0
 8015154:	da06      	bge.n	8015164 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	8b5b      	ldrh	r3, [r3, #26]
 801515a:	f043 0302 	orr.w	r3, r3, #2
 801515e:	b29a      	uxth	r2, r3
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015164:	4b86      	ldr	r3, [pc, #536]	; (8015380 <tcp_receive+0x888>)
 8015166:	681a      	ldr	r2, [r3, #0]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801516c:	1ad3      	subs	r3, r2, r3
 801516e:	2b00      	cmp	r3, #0
 8015170:	f2c0 842a 	blt.w	80159c8 <tcp_receive+0xed0>
 8015174:	4b82      	ldr	r3, [pc, #520]	; (8015380 <tcp_receive+0x888>)
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801517c:	6879      	ldr	r1, [r7, #4]
 801517e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015180:	440b      	add	r3, r1
 8015182:	1ad3      	subs	r3, r2, r3
 8015184:	3301      	adds	r3, #1
 8015186:	2b00      	cmp	r3, #0
 8015188:	f300 841e 	bgt.w	80159c8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015190:	4b7b      	ldr	r3, [pc, #492]	; (8015380 <tcp_receive+0x888>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	429a      	cmp	r2, r3
 8015196:	f040 829a 	bne.w	80156ce <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801519a:	4b7a      	ldr	r3, [pc, #488]	; (8015384 <tcp_receive+0x88c>)
 801519c:	891c      	ldrh	r4, [r3, #8]
 801519e:	4b79      	ldr	r3, [pc, #484]	; (8015384 <tcp_receive+0x88c>)
 80151a0:	68db      	ldr	r3, [r3, #12]
 80151a2:	899b      	ldrh	r3, [r3, #12]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7fa fd1e 	bl	800fbe8 <lwip_htons>
 80151ac:	4603      	mov	r3, r0
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	f003 0303 	and.w	r3, r3, #3
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d001      	beq.n	80151bc <tcp_receive+0x6c4>
 80151b8:	2301      	movs	r3, #1
 80151ba:	e000      	b.n	80151be <tcp_receive+0x6c6>
 80151bc:	2300      	movs	r3, #0
 80151be:	4423      	add	r3, r4
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	4b71      	ldr	r3, [pc, #452]	; (8015388 <tcp_receive+0x890>)
 80151c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80151ca:	4b6f      	ldr	r3, [pc, #444]	; (8015388 <tcp_receive+0x890>)
 80151cc:	881b      	ldrh	r3, [r3, #0]
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d275      	bcs.n	80152be <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80151d2:	4b6c      	ldr	r3, [pc, #432]	; (8015384 <tcp_receive+0x88c>)
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	899b      	ldrh	r3, [r3, #12]
 80151d8:	b29b      	uxth	r3, r3
 80151da:	4618      	mov	r0, r3
 80151dc:	f7fa fd04 	bl	800fbe8 <lwip_htons>
 80151e0:	4603      	mov	r3, r0
 80151e2:	b2db      	uxtb	r3, r3
 80151e4:	f003 0301 	and.w	r3, r3, #1
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d01f      	beq.n	801522c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80151ec:	4b65      	ldr	r3, [pc, #404]	; (8015384 <tcp_receive+0x88c>)
 80151ee:	68db      	ldr	r3, [r3, #12]
 80151f0:	899b      	ldrh	r3, [r3, #12]
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	b21b      	sxth	r3, r3
 80151f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80151fa:	b21c      	sxth	r4, r3
 80151fc:	4b61      	ldr	r3, [pc, #388]	; (8015384 <tcp_receive+0x88c>)
 80151fe:	68db      	ldr	r3, [r3, #12]
 8015200:	899b      	ldrh	r3, [r3, #12]
 8015202:	b29b      	uxth	r3, r3
 8015204:	4618      	mov	r0, r3
 8015206:	f7fa fcef 	bl	800fbe8 <lwip_htons>
 801520a:	4603      	mov	r3, r0
 801520c:	b2db      	uxtb	r3, r3
 801520e:	b29b      	uxth	r3, r3
 8015210:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015214:	b29b      	uxth	r3, r3
 8015216:	4618      	mov	r0, r3
 8015218:	f7fa fce6 	bl	800fbe8 <lwip_htons>
 801521c:	4603      	mov	r3, r0
 801521e:	b21b      	sxth	r3, r3
 8015220:	4323      	orrs	r3, r4
 8015222:	b21a      	sxth	r2, r3
 8015224:	4b57      	ldr	r3, [pc, #348]	; (8015384 <tcp_receive+0x88c>)
 8015226:	68db      	ldr	r3, [r3, #12]
 8015228:	b292      	uxth	r2, r2
 801522a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015230:	4b54      	ldr	r3, [pc, #336]	; (8015384 <tcp_receive+0x88c>)
 8015232:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015234:	4b53      	ldr	r3, [pc, #332]	; (8015384 <tcp_receive+0x88c>)
 8015236:	68db      	ldr	r3, [r3, #12]
 8015238:	899b      	ldrh	r3, [r3, #12]
 801523a:	b29b      	uxth	r3, r3
 801523c:	4618      	mov	r0, r3
 801523e:	f7fa fcd3 	bl	800fbe8 <lwip_htons>
 8015242:	4603      	mov	r3, r0
 8015244:	b2db      	uxtb	r3, r3
 8015246:	f003 0302 	and.w	r3, r3, #2
 801524a:	2b00      	cmp	r3, #0
 801524c:	d005      	beq.n	801525a <tcp_receive+0x762>
            inseg.len -= 1;
 801524e:	4b4d      	ldr	r3, [pc, #308]	; (8015384 <tcp_receive+0x88c>)
 8015250:	891b      	ldrh	r3, [r3, #8]
 8015252:	3b01      	subs	r3, #1
 8015254:	b29a      	uxth	r2, r3
 8015256:	4b4b      	ldr	r3, [pc, #300]	; (8015384 <tcp_receive+0x88c>)
 8015258:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801525a:	4b4a      	ldr	r3, [pc, #296]	; (8015384 <tcp_receive+0x88c>)
 801525c:	685b      	ldr	r3, [r3, #4]
 801525e:	4a49      	ldr	r2, [pc, #292]	; (8015384 <tcp_receive+0x88c>)
 8015260:	8912      	ldrh	r2, [r2, #8]
 8015262:	4611      	mov	r1, r2
 8015264:	4618      	mov	r0, r3
 8015266:	f7fb ff3f 	bl	80110e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801526a:	4b46      	ldr	r3, [pc, #280]	; (8015384 <tcp_receive+0x88c>)
 801526c:	891c      	ldrh	r4, [r3, #8]
 801526e:	4b45      	ldr	r3, [pc, #276]	; (8015384 <tcp_receive+0x88c>)
 8015270:	68db      	ldr	r3, [r3, #12]
 8015272:	899b      	ldrh	r3, [r3, #12]
 8015274:	b29b      	uxth	r3, r3
 8015276:	4618      	mov	r0, r3
 8015278:	f7fa fcb6 	bl	800fbe8 <lwip_htons>
 801527c:	4603      	mov	r3, r0
 801527e:	b2db      	uxtb	r3, r3
 8015280:	f003 0303 	and.w	r3, r3, #3
 8015284:	2b00      	cmp	r3, #0
 8015286:	d001      	beq.n	801528c <tcp_receive+0x794>
 8015288:	2301      	movs	r3, #1
 801528a:	e000      	b.n	801528e <tcp_receive+0x796>
 801528c:	2300      	movs	r3, #0
 801528e:	4423      	add	r3, r4
 8015290:	b29a      	uxth	r2, r3
 8015292:	4b3d      	ldr	r3, [pc, #244]	; (8015388 <tcp_receive+0x890>)
 8015294:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015296:	4b3c      	ldr	r3, [pc, #240]	; (8015388 <tcp_receive+0x890>)
 8015298:	881b      	ldrh	r3, [r3, #0]
 801529a:	461a      	mov	r2, r3
 801529c:	4b38      	ldr	r3, [pc, #224]	; (8015380 <tcp_receive+0x888>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	441a      	add	r2, r3
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a6:	6879      	ldr	r1, [r7, #4]
 80152a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80152aa:	440b      	add	r3, r1
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d006      	beq.n	80152be <tcp_receive+0x7c6>
 80152b0:	4b36      	ldr	r3, [pc, #216]	; (801538c <tcp_receive+0x894>)
 80152b2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80152b6:	4936      	ldr	r1, [pc, #216]	; (8015390 <tcp_receive+0x898>)
 80152b8:	4836      	ldr	r0, [pc, #216]	; (8015394 <tcp_receive+0x89c>)
 80152ba:	f005 ff39 	bl	801b130 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	f000 80e7 	beq.w	8015496 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80152c8:	4b2e      	ldr	r3, [pc, #184]	; (8015384 <tcp_receive+0x88c>)
 80152ca:	68db      	ldr	r3, [r3, #12]
 80152cc:	899b      	ldrh	r3, [r3, #12]
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7fa fc89 	bl	800fbe8 <lwip_htons>
 80152d6:	4603      	mov	r3, r0
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	f003 0301 	and.w	r3, r3, #1
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d010      	beq.n	8015304 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80152e2:	e00a      	b.n	80152fa <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152e8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152ee:	681a      	ldr	r2, [r3, #0]
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80152f4:	68f8      	ldr	r0, [r7, #12]
 80152f6:	f7fd fce2 	bl	8012cbe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d1f0      	bne.n	80152e4 <tcp_receive+0x7ec>
 8015302:	e0c8      	b.n	8015496 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015308:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801530a:	e052      	b.n	80153b2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801530e:	68db      	ldr	r3, [r3, #12]
 8015310:	899b      	ldrh	r3, [r3, #12]
 8015312:	b29b      	uxth	r3, r3
 8015314:	4618      	mov	r0, r3
 8015316:	f7fa fc67 	bl	800fbe8 <lwip_htons>
 801531a:	4603      	mov	r3, r0
 801531c:	b2db      	uxtb	r3, r3
 801531e:	f003 0301 	and.w	r3, r3, #1
 8015322:	2b00      	cmp	r3, #0
 8015324:	d03d      	beq.n	80153a2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015326:	4b17      	ldr	r3, [pc, #92]	; (8015384 <tcp_receive+0x88c>)
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	899b      	ldrh	r3, [r3, #12]
 801532c:	b29b      	uxth	r3, r3
 801532e:	4618      	mov	r0, r3
 8015330:	f7fa fc5a 	bl	800fbe8 <lwip_htons>
 8015334:	4603      	mov	r3, r0
 8015336:	b2db      	uxtb	r3, r3
 8015338:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801533c:	2b00      	cmp	r3, #0
 801533e:	d130      	bne.n	80153a2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015340:	4b10      	ldr	r3, [pc, #64]	; (8015384 <tcp_receive+0x88c>)
 8015342:	68db      	ldr	r3, [r3, #12]
 8015344:	899b      	ldrh	r3, [r3, #12]
 8015346:	b29c      	uxth	r4, r3
 8015348:	2001      	movs	r0, #1
 801534a:	f7fa fc4d 	bl	800fbe8 <lwip_htons>
 801534e:	4603      	mov	r3, r0
 8015350:	461a      	mov	r2, r3
 8015352:	4b0c      	ldr	r3, [pc, #48]	; (8015384 <tcp_receive+0x88c>)
 8015354:	68db      	ldr	r3, [r3, #12]
 8015356:	4322      	orrs	r2, r4
 8015358:	b292      	uxth	r2, r2
 801535a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801535c:	4b09      	ldr	r3, [pc, #36]	; (8015384 <tcp_receive+0x88c>)
 801535e:	891c      	ldrh	r4, [r3, #8]
 8015360:	4b08      	ldr	r3, [pc, #32]	; (8015384 <tcp_receive+0x88c>)
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	899b      	ldrh	r3, [r3, #12]
 8015366:	b29b      	uxth	r3, r3
 8015368:	4618      	mov	r0, r3
 801536a:	f7fa fc3d 	bl	800fbe8 <lwip_htons>
 801536e:	4603      	mov	r3, r0
 8015370:	b2db      	uxtb	r3, r3
 8015372:	f003 0303 	and.w	r3, r3, #3
 8015376:	2b00      	cmp	r3, #0
 8015378:	d00e      	beq.n	8015398 <tcp_receive+0x8a0>
 801537a:	2301      	movs	r3, #1
 801537c:	e00d      	b.n	801539a <tcp_receive+0x8a2>
 801537e:	bf00      	nop
 8015380:	200071d4 	.word	0x200071d4
 8015384:	200071b4 	.word	0x200071b4
 8015388:	200071de 	.word	0x200071de
 801538c:	0801ee44 	.word	0x0801ee44
 8015390:	0801f1ec 	.word	0x0801f1ec
 8015394:	0801ee90 	.word	0x0801ee90
 8015398:	2300      	movs	r3, #0
 801539a:	4423      	add	r3, r4
 801539c:	b29a      	uxth	r2, r3
 801539e:	4b98      	ldr	r3, [pc, #608]	; (8015600 <tcp_receive+0xb08>)
 80153a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80153a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80153a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80153ac:	6938      	ldr	r0, [r7, #16]
 80153ae:	f7fd fc86 	bl	8012cbe <tcp_seg_free>
            while (next &&
 80153b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d00e      	beq.n	80153d6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80153b8:	4b91      	ldr	r3, [pc, #580]	; (8015600 <tcp_receive+0xb08>)
 80153ba:	881b      	ldrh	r3, [r3, #0]
 80153bc:	461a      	mov	r2, r3
 80153be:	4b91      	ldr	r3, [pc, #580]	; (8015604 <tcp_receive+0xb0c>)
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	441a      	add	r2, r3
 80153c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	685b      	ldr	r3, [r3, #4]
 80153ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80153cc:	8909      	ldrh	r1, [r1, #8]
 80153ce:	440b      	add	r3, r1
 80153d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	da9a      	bge.n	801530c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80153d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d059      	beq.n	8015490 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80153dc:	4b88      	ldr	r3, [pc, #544]	; (8015600 <tcp_receive+0xb08>)
 80153de:	881b      	ldrh	r3, [r3, #0]
 80153e0:	461a      	mov	r2, r3
 80153e2:	4b88      	ldr	r3, [pc, #544]	; (8015604 <tcp_receive+0xb0c>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	441a      	add	r2, r3
 80153e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	dd4d      	ble.n	8015490 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80153f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153f6:	68db      	ldr	r3, [r3, #12]
 80153f8:	685b      	ldr	r3, [r3, #4]
 80153fa:	b29a      	uxth	r2, r3
 80153fc:	4b81      	ldr	r3, [pc, #516]	; (8015604 <tcp_receive+0xb0c>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	b29b      	uxth	r3, r3
 8015402:	1ad3      	subs	r3, r2, r3
 8015404:	b29a      	uxth	r2, r3
 8015406:	4b80      	ldr	r3, [pc, #512]	; (8015608 <tcp_receive+0xb10>)
 8015408:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801540a:	4b7f      	ldr	r3, [pc, #508]	; (8015608 <tcp_receive+0xb10>)
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	899b      	ldrh	r3, [r3, #12]
 8015410:	b29b      	uxth	r3, r3
 8015412:	4618      	mov	r0, r3
 8015414:	f7fa fbe8 	bl	800fbe8 <lwip_htons>
 8015418:	4603      	mov	r3, r0
 801541a:	b2db      	uxtb	r3, r3
 801541c:	f003 0302 	and.w	r3, r3, #2
 8015420:	2b00      	cmp	r3, #0
 8015422:	d005      	beq.n	8015430 <tcp_receive+0x938>
                inseg.len -= 1;
 8015424:	4b78      	ldr	r3, [pc, #480]	; (8015608 <tcp_receive+0xb10>)
 8015426:	891b      	ldrh	r3, [r3, #8]
 8015428:	3b01      	subs	r3, #1
 801542a:	b29a      	uxth	r2, r3
 801542c:	4b76      	ldr	r3, [pc, #472]	; (8015608 <tcp_receive+0xb10>)
 801542e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015430:	4b75      	ldr	r3, [pc, #468]	; (8015608 <tcp_receive+0xb10>)
 8015432:	685b      	ldr	r3, [r3, #4]
 8015434:	4a74      	ldr	r2, [pc, #464]	; (8015608 <tcp_receive+0xb10>)
 8015436:	8912      	ldrh	r2, [r2, #8]
 8015438:	4611      	mov	r1, r2
 801543a:	4618      	mov	r0, r3
 801543c:	f7fb fe54 	bl	80110e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015440:	4b71      	ldr	r3, [pc, #452]	; (8015608 <tcp_receive+0xb10>)
 8015442:	891c      	ldrh	r4, [r3, #8]
 8015444:	4b70      	ldr	r3, [pc, #448]	; (8015608 <tcp_receive+0xb10>)
 8015446:	68db      	ldr	r3, [r3, #12]
 8015448:	899b      	ldrh	r3, [r3, #12]
 801544a:	b29b      	uxth	r3, r3
 801544c:	4618      	mov	r0, r3
 801544e:	f7fa fbcb 	bl	800fbe8 <lwip_htons>
 8015452:	4603      	mov	r3, r0
 8015454:	b2db      	uxtb	r3, r3
 8015456:	f003 0303 	and.w	r3, r3, #3
 801545a:	2b00      	cmp	r3, #0
 801545c:	d001      	beq.n	8015462 <tcp_receive+0x96a>
 801545e:	2301      	movs	r3, #1
 8015460:	e000      	b.n	8015464 <tcp_receive+0x96c>
 8015462:	2300      	movs	r3, #0
 8015464:	4423      	add	r3, r4
 8015466:	b29a      	uxth	r2, r3
 8015468:	4b65      	ldr	r3, [pc, #404]	; (8015600 <tcp_receive+0xb08>)
 801546a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801546c:	4b64      	ldr	r3, [pc, #400]	; (8015600 <tcp_receive+0xb08>)
 801546e:	881b      	ldrh	r3, [r3, #0]
 8015470:	461a      	mov	r2, r3
 8015472:	4b64      	ldr	r3, [pc, #400]	; (8015604 <tcp_receive+0xb0c>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	441a      	add	r2, r3
 8015478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801547a:	68db      	ldr	r3, [r3, #12]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	429a      	cmp	r2, r3
 8015480:	d006      	beq.n	8015490 <tcp_receive+0x998>
 8015482:	4b62      	ldr	r3, [pc, #392]	; (801560c <tcp_receive+0xb14>)
 8015484:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015488:	4961      	ldr	r1, [pc, #388]	; (8015610 <tcp_receive+0xb18>)
 801548a:	4862      	ldr	r0, [pc, #392]	; (8015614 <tcp_receive+0xb1c>)
 801548c:	f005 fe50 	bl	801b130 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015494:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015496:	4b5a      	ldr	r3, [pc, #360]	; (8015600 <tcp_receive+0xb08>)
 8015498:	881b      	ldrh	r3, [r3, #0]
 801549a:	461a      	mov	r2, r3
 801549c:	4b59      	ldr	r3, [pc, #356]	; (8015604 <tcp_receive+0xb0c>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	441a      	add	r2, r3
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80154aa:	4b55      	ldr	r3, [pc, #340]	; (8015600 <tcp_receive+0xb08>)
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d206      	bcs.n	80154c0 <tcp_receive+0x9c8>
 80154b2:	4b56      	ldr	r3, [pc, #344]	; (801560c <tcp_receive+0xb14>)
 80154b4:	f240 6207 	movw	r2, #1543	; 0x607
 80154b8:	4957      	ldr	r1, [pc, #348]	; (8015618 <tcp_receive+0xb20>)
 80154ba:	4856      	ldr	r0, [pc, #344]	; (8015614 <tcp_receive+0xb1c>)
 80154bc:	f005 fe38 	bl	801b130 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80154c4:	4b4e      	ldr	r3, [pc, #312]	; (8015600 <tcp_receive+0xb08>)
 80154c6:	881b      	ldrh	r3, [r3, #0]
 80154c8:	1ad3      	subs	r3, r2, r3
 80154ca:	b29a      	uxth	r2, r3
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f7fc fdb3 	bl	801203c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80154d6:	4b4c      	ldr	r3, [pc, #304]	; (8015608 <tcp_receive+0xb10>)
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	891b      	ldrh	r3, [r3, #8]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d006      	beq.n	80154ee <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80154e0:	4b49      	ldr	r3, [pc, #292]	; (8015608 <tcp_receive+0xb10>)
 80154e2:	685b      	ldr	r3, [r3, #4]
 80154e4:	4a4d      	ldr	r2, [pc, #308]	; (801561c <tcp_receive+0xb24>)
 80154e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80154e8:	4b47      	ldr	r3, [pc, #284]	; (8015608 <tcp_receive+0xb10>)
 80154ea:	2200      	movs	r2, #0
 80154ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80154ee:	4b46      	ldr	r3, [pc, #280]	; (8015608 <tcp_receive+0xb10>)
 80154f0:	68db      	ldr	r3, [r3, #12]
 80154f2:	899b      	ldrh	r3, [r3, #12]
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7fa fb76 	bl	800fbe8 <lwip_htons>
 80154fc:	4603      	mov	r3, r0
 80154fe:	b2db      	uxtb	r3, r3
 8015500:	f003 0301 	and.w	r3, r3, #1
 8015504:	2b00      	cmp	r3, #0
 8015506:	f000 80b8 	beq.w	801567a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801550a:	4b45      	ldr	r3, [pc, #276]	; (8015620 <tcp_receive+0xb28>)
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	f043 0320 	orr.w	r3, r3, #32
 8015512:	b2da      	uxtb	r2, r3
 8015514:	4b42      	ldr	r3, [pc, #264]	; (8015620 <tcp_receive+0xb28>)
 8015516:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015518:	e0af      	b.n	801567a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801551e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015524:	68db      	ldr	r3, [r3, #12]
 8015526:	685b      	ldr	r3, [r3, #4]
 8015528:	4a36      	ldr	r2, [pc, #216]	; (8015604 <tcp_receive+0xb0c>)
 801552a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	891b      	ldrh	r3, [r3, #8]
 8015530:	461c      	mov	r4, r3
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	68db      	ldr	r3, [r3, #12]
 8015536:	899b      	ldrh	r3, [r3, #12]
 8015538:	b29b      	uxth	r3, r3
 801553a:	4618      	mov	r0, r3
 801553c:	f7fa fb54 	bl	800fbe8 <lwip_htons>
 8015540:	4603      	mov	r3, r0
 8015542:	b2db      	uxtb	r3, r3
 8015544:	f003 0303 	and.w	r3, r3, #3
 8015548:	2b00      	cmp	r3, #0
 801554a:	d001      	beq.n	8015550 <tcp_receive+0xa58>
 801554c:	2301      	movs	r3, #1
 801554e:	e000      	b.n	8015552 <tcp_receive+0xa5a>
 8015550:	2300      	movs	r3, #0
 8015552:	191a      	adds	r2, r3, r4
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015558:	441a      	add	r2, r3
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015562:	461c      	mov	r4, r3
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	891b      	ldrh	r3, [r3, #8]
 8015568:	461d      	mov	r5, r3
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	899b      	ldrh	r3, [r3, #12]
 8015570:	b29b      	uxth	r3, r3
 8015572:	4618      	mov	r0, r3
 8015574:	f7fa fb38 	bl	800fbe8 <lwip_htons>
 8015578:	4603      	mov	r3, r0
 801557a:	b2db      	uxtb	r3, r3
 801557c:	f003 0303 	and.w	r3, r3, #3
 8015580:	2b00      	cmp	r3, #0
 8015582:	d001      	beq.n	8015588 <tcp_receive+0xa90>
 8015584:	2301      	movs	r3, #1
 8015586:	e000      	b.n	801558a <tcp_receive+0xa92>
 8015588:	2300      	movs	r3, #0
 801558a:	442b      	add	r3, r5
 801558c:	429c      	cmp	r4, r3
 801558e:	d206      	bcs.n	801559e <tcp_receive+0xaa6>
 8015590:	4b1e      	ldr	r3, [pc, #120]	; (801560c <tcp_receive+0xb14>)
 8015592:	f240 622b 	movw	r2, #1579	; 0x62b
 8015596:	4923      	ldr	r1, [pc, #140]	; (8015624 <tcp_receive+0xb2c>)
 8015598:	481e      	ldr	r0, [pc, #120]	; (8015614 <tcp_receive+0xb1c>)
 801559a:	f005 fdc9 	bl	801b130 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	891b      	ldrh	r3, [r3, #8]
 80155a2:	461c      	mov	r4, r3
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	68db      	ldr	r3, [r3, #12]
 80155a8:	899b      	ldrh	r3, [r3, #12]
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7fa fb1b 	bl	800fbe8 <lwip_htons>
 80155b2:	4603      	mov	r3, r0
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	f003 0303 	and.w	r3, r3, #3
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d001      	beq.n	80155c2 <tcp_receive+0xaca>
 80155be:	2301      	movs	r3, #1
 80155c0:	e000      	b.n	80155c4 <tcp_receive+0xacc>
 80155c2:	2300      	movs	r3, #0
 80155c4:	1919      	adds	r1, r3, r4
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155ca:	b28b      	uxth	r3, r1
 80155cc:	1ad3      	subs	r3, r2, r3
 80155ce:	b29a      	uxth	r2, r3
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80155d4:	6878      	ldr	r0, [r7, #4]
 80155d6:	f7fc fd31 	bl	801203c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	891b      	ldrh	r3, [r3, #8]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d028      	beq.n	8015636 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80155e4:	4b0d      	ldr	r3, [pc, #52]	; (801561c <tcp_receive+0xb24>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d01d      	beq.n	8015628 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80155ec:	4b0b      	ldr	r3, [pc, #44]	; (801561c <tcp_receive+0xb24>)
 80155ee:	681a      	ldr	r2, [r3, #0]
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	4619      	mov	r1, r3
 80155f6:	4610      	mov	r0, r2
 80155f8:	f7fb ffbc 	bl	8011574 <pbuf_cat>
 80155fc:	e018      	b.n	8015630 <tcp_receive+0xb38>
 80155fe:	bf00      	nop
 8015600:	200071de 	.word	0x200071de
 8015604:	200071d4 	.word	0x200071d4
 8015608:	200071b4 	.word	0x200071b4
 801560c:	0801ee44 	.word	0x0801ee44
 8015610:	0801f224 	.word	0x0801f224
 8015614:	0801ee90 	.word	0x0801ee90
 8015618:	0801f260 	.word	0x0801f260
 801561c:	200071e4 	.word	0x200071e4
 8015620:	200071e1 	.word	0x200071e1
 8015624:	0801f280 	.word	0x0801f280
            } else {
              recv_data = cseg->p;
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	4a70      	ldr	r2, [pc, #448]	; (80157f0 <tcp_receive+0xcf8>)
 801562e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	2200      	movs	r2, #0
 8015634:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	68db      	ldr	r3, [r3, #12]
 801563a:	899b      	ldrh	r3, [r3, #12]
 801563c:	b29b      	uxth	r3, r3
 801563e:	4618      	mov	r0, r3
 8015640:	f7fa fad2 	bl	800fbe8 <lwip_htons>
 8015644:	4603      	mov	r3, r0
 8015646:	b2db      	uxtb	r3, r3
 8015648:	f003 0301 	and.w	r3, r3, #1
 801564c:	2b00      	cmp	r3, #0
 801564e:	d00d      	beq.n	801566c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015650:	4b68      	ldr	r3, [pc, #416]	; (80157f4 <tcp_receive+0xcfc>)
 8015652:	781b      	ldrb	r3, [r3, #0]
 8015654:	f043 0320 	orr.w	r3, r3, #32
 8015658:	b2da      	uxtb	r2, r3
 801565a:	4b66      	ldr	r3, [pc, #408]	; (80157f4 <tcp_receive+0xcfc>)
 801565c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	7d1b      	ldrb	r3, [r3, #20]
 8015662:	2b04      	cmp	r3, #4
 8015664:	d102      	bne.n	801566c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	2207      	movs	r2, #7
 801566a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	681a      	ldr	r2, [r3, #0]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015674:	68b8      	ldr	r0, [r7, #8]
 8015676:	f7fd fb22 	bl	8012cbe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801567e:	2b00      	cmp	r3, #0
 8015680:	d008      	beq.n	8015694 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	685a      	ldr	r2, [r3, #4]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801568e:	429a      	cmp	r2, r3
 8015690:	f43f af43 	beq.w	801551a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	8b5b      	ldrh	r3, [r3, #26]
 8015698:	f003 0301 	and.w	r3, r3, #1
 801569c:	2b00      	cmp	r3, #0
 801569e:	d00e      	beq.n	80156be <tcp_receive+0xbc6>
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	8b5b      	ldrh	r3, [r3, #26]
 80156a4:	f023 0301 	bic.w	r3, r3, #1
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	835a      	strh	r2, [r3, #26]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	8b5b      	ldrh	r3, [r3, #26]
 80156b2:	f043 0302 	orr.w	r3, r3, #2
 80156b6:	b29a      	uxth	r2, r3
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80156bc:	e188      	b.n	80159d0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	8b5b      	ldrh	r3, [r3, #26]
 80156c2:	f043 0301 	orr.w	r3, r3, #1
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80156cc:	e180      	b.n	80159d0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d106      	bne.n	80156e4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80156d6:	4848      	ldr	r0, [pc, #288]	; (80157f8 <tcp_receive+0xd00>)
 80156d8:	f7fd fb0a 	bl	8012cf0 <tcp_seg_copy>
 80156dc:	4602      	mov	r2, r0
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	675a      	str	r2, [r3, #116]	; 0x74
 80156e2:	e16d      	b.n	80159c0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80156e4:	2300      	movs	r3, #0
 80156e6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80156ee:	e157      	b.n	80159a0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80156f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f2:	68db      	ldr	r3, [r3, #12]
 80156f4:	685a      	ldr	r2, [r3, #4]
 80156f6:	4b41      	ldr	r3, [pc, #260]	; (80157fc <tcp_receive+0xd04>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d11d      	bne.n	801573a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80156fe:	4b3e      	ldr	r3, [pc, #248]	; (80157f8 <tcp_receive+0xd00>)
 8015700:	891a      	ldrh	r2, [r3, #8]
 8015702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015704:	891b      	ldrh	r3, [r3, #8]
 8015706:	429a      	cmp	r2, r3
 8015708:	f240 814f 	bls.w	80159aa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801570c:	483a      	ldr	r0, [pc, #232]	; (80157f8 <tcp_receive+0xd00>)
 801570e:	f7fd faef 	bl	8012cf0 <tcp_seg_copy>
 8015712:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	2b00      	cmp	r3, #0
 8015718:	f000 8149 	beq.w	80159ae <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801571e:	2b00      	cmp	r3, #0
 8015720:	d003      	beq.n	801572a <tcp_receive+0xc32>
                    prev->next = cseg;
 8015722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015724:	697a      	ldr	r2, [r7, #20]
 8015726:	601a      	str	r2, [r3, #0]
 8015728:	e002      	b.n	8015730 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	697a      	ldr	r2, [r7, #20]
 801572e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015732:	6978      	ldr	r0, [r7, #20]
 8015734:	f7ff f8dc 	bl	80148f0 <tcp_oos_insert_segment>
                }
                break;
 8015738:	e139      	b.n	80159ae <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801573c:	2b00      	cmp	r3, #0
 801573e:	d117      	bne.n	8015770 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015740:	4b2e      	ldr	r3, [pc, #184]	; (80157fc <tcp_receive+0xd04>)
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015746:	68db      	ldr	r3, [r3, #12]
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	1ad3      	subs	r3, r2, r3
 801574c:	2b00      	cmp	r3, #0
 801574e:	da57      	bge.n	8015800 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015750:	4829      	ldr	r0, [pc, #164]	; (80157f8 <tcp_receive+0xd00>)
 8015752:	f7fd facd 	bl	8012cf0 <tcp_seg_copy>
 8015756:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015758:	69bb      	ldr	r3, [r7, #24]
 801575a:	2b00      	cmp	r3, #0
 801575c:	f000 8129 	beq.w	80159b2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	69ba      	ldr	r2, [r7, #24]
 8015764:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015768:	69b8      	ldr	r0, [r7, #24]
 801576a:	f7ff f8c1 	bl	80148f0 <tcp_oos_insert_segment>
                  }
                  break;
 801576e:	e120      	b.n	80159b2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015770:	4b22      	ldr	r3, [pc, #136]	; (80157fc <tcp_receive+0xd04>)
 8015772:	681a      	ldr	r2, [r3, #0]
 8015774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015776:	68db      	ldr	r3, [r3, #12]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	1ad3      	subs	r3, r2, r3
 801577c:	3b01      	subs	r3, #1
 801577e:	2b00      	cmp	r3, #0
 8015780:	db3e      	blt.n	8015800 <tcp_receive+0xd08>
 8015782:	4b1e      	ldr	r3, [pc, #120]	; (80157fc <tcp_receive+0xd04>)
 8015784:	681a      	ldr	r2, [r3, #0]
 8015786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015788:	68db      	ldr	r3, [r3, #12]
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	1ad3      	subs	r3, r2, r3
 801578e:	3301      	adds	r3, #1
 8015790:	2b00      	cmp	r3, #0
 8015792:	dc35      	bgt.n	8015800 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015794:	4818      	ldr	r0, [pc, #96]	; (80157f8 <tcp_receive+0xd00>)
 8015796:	f7fd faab 	bl	8012cf0 <tcp_seg_copy>
 801579a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801579c:	69fb      	ldr	r3, [r7, #28]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	f000 8109 	beq.w	80159b6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80157a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157a6:	68db      	ldr	r3, [r3, #12]
 80157a8:	685b      	ldr	r3, [r3, #4]
 80157aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157ac:	8912      	ldrh	r2, [r2, #8]
 80157ae:	441a      	add	r2, r3
 80157b0:	4b12      	ldr	r3, [pc, #72]	; (80157fc <tcp_receive+0xd04>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	1ad3      	subs	r3, r2, r3
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	dd12      	ble.n	80157e0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80157ba:	4b10      	ldr	r3, [pc, #64]	; (80157fc <tcp_receive+0xd04>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	b29a      	uxth	r2, r3
 80157c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	685b      	ldr	r3, [r3, #4]
 80157c6:	b29b      	uxth	r3, r3
 80157c8:	1ad3      	subs	r3, r2, r3
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80157d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157d2:	685a      	ldr	r2, [r3, #4]
 80157d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157d6:	891b      	ldrh	r3, [r3, #8]
 80157d8:	4619      	mov	r1, r3
 80157da:	4610      	mov	r0, r2
 80157dc:	f7fb fc84 	bl	80110e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80157e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157e2:	69fa      	ldr	r2, [r7, #28]
 80157e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80157e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80157e8:	69f8      	ldr	r0, [r7, #28]
 80157ea:	f7ff f881 	bl	80148f0 <tcp_oos_insert_segment>
                  }
                  break;
 80157ee:	e0e2      	b.n	80159b6 <tcp_receive+0xebe>
 80157f0:	200071e4 	.word	0x200071e4
 80157f4:	200071e1 	.word	0x200071e1
 80157f8:	200071b4 	.word	0x200071b4
 80157fc:	200071d4 	.word	0x200071d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015802:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	2b00      	cmp	r3, #0
 801580a:	f040 80c6 	bne.w	801599a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801580e:	4b80      	ldr	r3, [pc, #512]	; (8015a10 <tcp_receive+0xf18>)
 8015810:	681a      	ldr	r2, [r3, #0]
 8015812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801581a:	2b00      	cmp	r3, #0
 801581c:	f340 80bd 	ble.w	801599a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	899b      	ldrh	r3, [r3, #12]
 8015826:	b29b      	uxth	r3, r3
 8015828:	4618      	mov	r0, r3
 801582a:	f7fa f9dd 	bl	800fbe8 <lwip_htons>
 801582e:	4603      	mov	r3, r0
 8015830:	b2db      	uxtb	r3, r3
 8015832:	f003 0301 	and.w	r3, r3, #1
 8015836:	2b00      	cmp	r3, #0
 8015838:	f040 80bf 	bne.w	80159ba <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801583c:	4875      	ldr	r0, [pc, #468]	; (8015a14 <tcp_receive+0xf1c>)
 801583e:	f7fd fa57 	bl	8012cf0 <tcp_seg_copy>
 8015842:	4602      	mov	r2, r0
 8015844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015846:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	f000 80b6 	beq.w	80159be <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015854:	68db      	ldr	r3, [r3, #12]
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801585a:	8912      	ldrh	r2, [r2, #8]
 801585c:	441a      	add	r2, r3
 801585e:	4b6c      	ldr	r3, [pc, #432]	; (8015a10 <tcp_receive+0xf18>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	1ad3      	subs	r3, r2, r3
 8015864:	2b00      	cmp	r3, #0
 8015866:	dd12      	ble.n	801588e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015868:	4b69      	ldr	r3, [pc, #420]	; (8015a10 <tcp_receive+0xf18>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	b29a      	uxth	r2, r3
 801586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015870:	68db      	ldr	r3, [r3, #12]
 8015872:	685b      	ldr	r3, [r3, #4]
 8015874:	b29b      	uxth	r3, r3
 8015876:	1ad3      	subs	r3, r2, r3
 8015878:	b29a      	uxth	r2, r3
 801587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801587c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015880:	685a      	ldr	r2, [r3, #4]
 8015882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015884:	891b      	ldrh	r3, [r3, #8]
 8015886:	4619      	mov	r1, r3
 8015888:	4610      	mov	r0, r2
 801588a:	f7fb fc2d 	bl	80110e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801588e:	4b62      	ldr	r3, [pc, #392]	; (8015a18 <tcp_receive+0xf20>)
 8015890:	881b      	ldrh	r3, [r3, #0]
 8015892:	461a      	mov	r2, r3
 8015894:	4b5e      	ldr	r3, [pc, #376]	; (8015a10 <tcp_receive+0xf18>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	441a      	add	r2, r3
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801589e:	6879      	ldr	r1, [r7, #4]
 80158a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80158a2:	440b      	add	r3, r1
 80158a4:	1ad3      	subs	r3, r2, r3
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f340 8089 	ble.w	80159be <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80158ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	68db      	ldr	r3, [r3, #12]
 80158b2:	899b      	ldrh	r3, [r3, #12]
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	4618      	mov	r0, r3
 80158b8:	f7fa f996 	bl	800fbe8 <lwip_htons>
 80158bc:	4603      	mov	r3, r0
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	f003 0301 	and.w	r3, r3, #1
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d022      	beq.n	801590e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80158c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	68db      	ldr	r3, [r3, #12]
 80158ce:	899b      	ldrh	r3, [r3, #12]
 80158d0:	b29b      	uxth	r3, r3
 80158d2:	b21b      	sxth	r3, r3
 80158d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80158d8:	b21c      	sxth	r4, r3
 80158da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	68db      	ldr	r3, [r3, #12]
 80158e0:	899b      	ldrh	r3, [r3, #12]
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7fa f97f 	bl	800fbe8 <lwip_htons>
 80158ea:	4603      	mov	r3, r0
 80158ec:	b2db      	uxtb	r3, r3
 80158ee:	b29b      	uxth	r3, r3
 80158f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80158f4:	b29b      	uxth	r3, r3
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fa f976 	bl	800fbe8 <lwip_htons>
 80158fc:	4603      	mov	r3, r0
 80158fe:	b21b      	sxth	r3, r3
 8015900:	4323      	orrs	r3, r4
 8015902:	b21a      	sxth	r2, r3
 8015904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	b292      	uxth	r2, r2
 801590c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015912:	b29a      	uxth	r2, r3
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015918:	4413      	add	r3, r2
 801591a:	b299      	uxth	r1, r3
 801591c:	4b3c      	ldr	r3, [pc, #240]	; (8015a10 <tcp_receive+0xf18>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	b29a      	uxth	r2, r3
 8015922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	1a8a      	subs	r2, r1, r2
 8015928:	b292      	uxth	r2, r2
 801592a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	685a      	ldr	r2, [r3, #4]
 8015932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	891b      	ldrh	r3, [r3, #8]
 8015938:	4619      	mov	r1, r3
 801593a:	4610      	mov	r0, r2
 801593c:	f7fb fbd4 	bl	80110e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	891c      	ldrh	r4, [r3, #8]
 8015946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	68db      	ldr	r3, [r3, #12]
 801594c:	899b      	ldrh	r3, [r3, #12]
 801594e:	b29b      	uxth	r3, r3
 8015950:	4618      	mov	r0, r3
 8015952:	f7fa f949 	bl	800fbe8 <lwip_htons>
 8015956:	4603      	mov	r3, r0
 8015958:	b2db      	uxtb	r3, r3
 801595a:	f003 0303 	and.w	r3, r3, #3
 801595e:	2b00      	cmp	r3, #0
 8015960:	d001      	beq.n	8015966 <tcp_receive+0xe6e>
 8015962:	2301      	movs	r3, #1
 8015964:	e000      	b.n	8015968 <tcp_receive+0xe70>
 8015966:	2300      	movs	r3, #0
 8015968:	4423      	add	r3, r4
 801596a:	b29a      	uxth	r2, r3
 801596c:	4b2a      	ldr	r3, [pc, #168]	; (8015a18 <tcp_receive+0xf20>)
 801596e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015970:	4b29      	ldr	r3, [pc, #164]	; (8015a18 <tcp_receive+0xf20>)
 8015972:	881b      	ldrh	r3, [r3, #0]
 8015974:	461a      	mov	r2, r3
 8015976:	4b26      	ldr	r3, [pc, #152]	; (8015a10 <tcp_receive+0xf18>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	441a      	add	r2, r3
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015980:	6879      	ldr	r1, [r7, #4]
 8015982:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015984:	440b      	add	r3, r1
 8015986:	429a      	cmp	r2, r3
 8015988:	d019      	beq.n	80159be <tcp_receive+0xec6>
 801598a:	4b24      	ldr	r3, [pc, #144]	; (8015a1c <tcp_receive+0xf24>)
 801598c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015990:	4923      	ldr	r1, [pc, #140]	; (8015a20 <tcp_receive+0xf28>)
 8015992:	4824      	ldr	r0, [pc, #144]	; (8015a24 <tcp_receive+0xf2c>)
 8015994:	f005 fbcc 	bl	801b130 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015998:	e011      	b.n	80159be <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	63bb      	str	r3, [r7, #56]	; 0x38
 80159a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	f47f aea4 	bne.w	80156f0 <tcp_receive+0xbf8>
 80159a8:	e00a      	b.n	80159c0 <tcp_receive+0xec8>
                break;
 80159aa:	bf00      	nop
 80159ac:	e008      	b.n	80159c0 <tcp_receive+0xec8>
                break;
 80159ae:	bf00      	nop
 80159b0:	e006      	b.n	80159c0 <tcp_receive+0xec8>
                  break;
 80159b2:	bf00      	nop
 80159b4:	e004      	b.n	80159c0 <tcp_receive+0xec8>
                  break;
 80159b6:	bf00      	nop
 80159b8:	e002      	b.n	80159c0 <tcp_receive+0xec8>
                  break;
 80159ba:	bf00      	nop
 80159bc:	e000      	b.n	80159c0 <tcp_receive+0xec8>
                break;
 80159be:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f001 fe8b 	bl	80176dc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80159c6:	e003      	b.n	80159d0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f001 fe87 	bl	80176dc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80159ce:	e01a      	b.n	8015a06 <tcp_receive+0xf0e>
 80159d0:	e019      	b.n	8015a06 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80159d2:	4b0f      	ldr	r3, [pc, #60]	; (8015a10 <tcp_receive+0xf18>)
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159da:	1ad3      	subs	r3, r2, r3
 80159dc:	2b00      	cmp	r3, #0
 80159de:	db0a      	blt.n	80159f6 <tcp_receive+0xefe>
 80159e0:	4b0b      	ldr	r3, [pc, #44]	; (8015a10 <tcp_receive+0xf18>)
 80159e2:	681a      	ldr	r2, [r3, #0]
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159e8:	6879      	ldr	r1, [r7, #4]
 80159ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80159ec:	440b      	add	r3, r1
 80159ee:	1ad3      	subs	r3, r2, r3
 80159f0:	3301      	adds	r3, #1
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	dd07      	ble.n	8015a06 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	8b5b      	ldrh	r3, [r3, #26]
 80159fa:	f043 0302 	orr.w	r3, r3, #2
 80159fe:	b29a      	uxth	r2, r3
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015a04:	e7ff      	b.n	8015a06 <tcp_receive+0xf0e>
 8015a06:	bf00      	nop
 8015a08:	3750      	adds	r7, #80	; 0x50
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a0e:	bf00      	nop
 8015a10:	200071d4 	.word	0x200071d4
 8015a14:	200071b4 	.word	0x200071b4
 8015a18:	200071de 	.word	0x200071de
 8015a1c:	0801ee44 	.word	0x0801ee44
 8015a20:	0801f1ec 	.word	0x0801f1ec
 8015a24:	0801ee90 	.word	0x0801ee90

08015a28 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b083      	sub	sp, #12
 8015a2c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015a2e:	4b15      	ldr	r3, [pc, #84]	; (8015a84 <tcp_get_next_optbyte+0x5c>)
 8015a30:	881b      	ldrh	r3, [r3, #0]
 8015a32:	1c5a      	adds	r2, r3, #1
 8015a34:	b291      	uxth	r1, r2
 8015a36:	4a13      	ldr	r2, [pc, #76]	; (8015a84 <tcp_get_next_optbyte+0x5c>)
 8015a38:	8011      	strh	r1, [r2, #0]
 8015a3a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015a3c:	4b12      	ldr	r3, [pc, #72]	; (8015a88 <tcp_get_next_optbyte+0x60>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d004      	beq.n	8015a4e <tcp_get_next_optbyte+0x26>
 8015a44:	4b11      	ldr	r3, [pc, #68]	; (8015a8c <tcp_get_next_optbyte+0x64>)
 8015a46:	881b      	ldrh	r3, [r3, #0]
 8015a48:	88fa      	ldrh	r2, [r7, #6]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d208      	bcs.n	8015a60 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015a4e:	4b10      	ldr	r3, [pc, #64]	; (8015a90 <tcp_get_next_optbyte+0x68>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	3314      	adds	r3, #20
 8015a54:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015a56:	88fb      	ldrh	r3, [r7, #6]
 8015a58:	683a      	ldr	r2, [r7, #0]
 8015a5a:	4413      	add	r3, r2
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	e00b      	b.n	8015a78 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015a60:	88fb      	ldrh	r3, [r7, #6]
 8015a62:	b2da      	uxtb	r2, r3
 8015a64:	4b09      	ldr	r3, [pc, #36]	; (8015a8c <tcp_get_next_optbyte+0x64>)
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	1ad3      	subs	r3, r2, r3
 8015a6c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015a6e:	4b06      	ldr	r3, [pc, #24]	; (8015a88 <tcp_get_next_optbyte+0x60>)
 8015a70:	681a      	ldr	r2, [r3, #0]
 8015a72:	797b      	ldrb	r3, [r7, #5]
 8015a74:	4413      	add	r3, r2
 8015a76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	370c      	adds	r7, #12
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a82:	4770      	bx	lr
 8015a84:	200071d0 	.word	0x200071d0
 8015a88:	200071cc 	.word	0x200071cc
 8015a8c:	200071ca 	.word	0x200071ca
 8015a90:	200071c4 	.word	0x200071c4

08015a94 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b084      	sub	sp, #16
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d106      	bne.n	8015ab0 <tcp_parseopt+0x1c>
 8015aa2:	4b32      	ldr	r3, [pc, #200]	; (8015b6c <tcp_parseopt+0xd8>)
 8015aa4:	f240 727d 	movw	r2, #1917	; 0x77d
 8015aa8:	4931      	ldr	r1, [pc, #196]	; (8015b70 <tcp_parseopt+0xdc>)
 8015aaa:	4832      	ldr	r0, [pc, #200]	; (8015b74 <tcp_parseopt+0xe0>)
 8015aac:	f005 fb40 	bl	801b130 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015ab0:	4b31      	ldr	r3, [pc, #196]	; (8015b78 <tcp_parseopt+0xe4>)
 8015ab2:	881b      	ldrh	r3, [r3, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d056      	beq.n	8015b66 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015ab8:	4b30      	ldr	r3, [pc, #192]	; (8015b7c <tcp_parseopt+0xe8>)
 8015aba:	2200      	movs	r2, #0
 8015abc:	801a      	strh	r2, [r3, #0]
 8015abe:	e046      	b.n	8015b4e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015ac0:	f7ff ffb2 	bl	8015a28 <tcp_get_next_optbyte>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015ac8:	7bfb      	ldrb	r3, [r7, #15]
 8015aca:	2b02      	cmp	r3, #2
 8015acc:	d006      	beq.n	8015adc <tcp_parseopt+0x48>
 8015ace:	2b02      	cmp	r3, #2
 8015ad0:	dc2c      	bgt.n	8015b2c <tcp_parseopt+0x98>
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d042      	beq.n	8015b5c <tcp_parseopt+0xc8>
 8015ad6:	2b01      	cmp	r3, #1
 8015ad8:	d128      	bne.n	8015b2c <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015ada:	e038      	b.n	8015b4e <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015adc:	f7ff ffa4 	bl	8015a28 <tcp_get_next_optbyte>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	2b04      	cmp	r3, #4
 8015ae4:	d13c      	bne.n	8015b60 <tcp_parseopt+0xcc>
 8015ae6:	4b25      	ldr	r3, [pc, #148]	; (8015b7c <tcp_parseopt+0xe8>)
 8015ae8:	881b      	ldrh	r3, [r3, #0]
 8015aea:	3301      	adds	r3, #1
 8015aec:	4a22      	ldr	r2, [pc, #136]	; (8015b78 <tcp_parseopt+0xe4>)
 8015aee:	8812      	ldrh	r2, [r2, #0]
 8015af0:	4293      	cmp	r3, r2
 8015af2:	da35      	bge.n	8015b60 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015af4:	f7ff ff98 	bl	8015a28 <tcp_get_next_optbyte>
 8015af8:	4603      	mov	r3, r0
 8015afa:	b29b      	uxth	r3, r3
 8015afc:	021b      	lsls	r3, r3, #8
 8015afe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015b00:	f7ff ff92 	bl	8015a28 <tcp_get_next_optbyte>
 8015b04:	4603      	mov	r3, r0
 8015b06:	b29a      	uxth	r2, r3
 8015b08:	89bb      	ldrh	r3, [r7, #12]
 8015b0a:	4313      	orrs	r3, r2
 8015b0c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015b0e:	89bb      	ldrh	r3, [r7, #12]
 8015b10:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015b14:	4293      	cmp	r3, r2
 8015b16:	d804      	bhi.n	8015b22 <tcp_parseopt+0x8e>
 8015b18:	89bb      	ldrh	r3, [r7, #12]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d001      	beq.n	8015b22 <tcp_parseopt+0x8e>
 8015b1e:	89ba      	ldrh	r2, [r7, #12]
 8015b20:	e001      	b.n	8015b26 <tcp_parseopt+0x92>
 8015b22:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015b2a:	e010      	b.n	8015b4e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015b2c:	f7ff ff7c 	bl	8015a28 <tcp_get_next_optbyte>
 8015b30:	4603      	mov	r3, r0
 8015b32:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015b34:	7afb      	ldrb	r3, [r7, #11]
 8015b36:	2b01      	cmp	r3, #1
 8015b38:	d914      	bls.n	8015b64 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015b3a:	7afb      	ldrb	r3, [r7, #11]
 8015b3c:	b29a      	uxth	r2, r3
 8015b3e:	4b0f      	ldr	r3, [pc, #60]	; (8015b7c <tcp_parseopt+0xe8>)
 8015b40:	881b      	ldrh	r3, [r3, #0]
 8015b42:	4413      	add	r3, r2
 8015b44:	b29b      	uxth	r3, r3
 8015b46:	3b02      	subs	r3, #2
 8015b48:	b29a      	uxth	r2, r3
 8015b4a:	4b0c      	ldr	r3, [pc, #48]	; (8015b7c <tcp_parseopt+0xe8>)
 8015b4c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015b4e:	4b0b      	ldr	r3, [pc, #44]	; (8015b7c <tcp_parseopt+0xe8>)
 8015b50:	881a      	ldrh	r2, [r3, #0]
 8015b52:	4b09      	ldr	r3, [pc, #36]	; (8015b78 <tcp_parseopt+0xe4>)
 8015b54:	881b      	ldrh	r3, [r3, #0]
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d3b2      	bcc.n	8015ac0 <tcp_parseopt+0x2c>
 8015b5a:	e004      	b.n	8015b66 <tcp_parseopt+0xd2>
          return;
 8015b5c:	bf00      	nop
 8015b5e:	e002      	b.n	8015b66 <tcp_parseopt+0xd2>
            return;
 8015b60:	bf00      	nop
 8015b62:	e000      	b.n	8015b66 <tcp_parseopt+0xd2>
            return;
 8015b64:	bf00      	nop
      }
    }
  }
}
 8015b66:	3710      	adds	r7, #16
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	0801ee44 	.word	0x0801ee44
 8015b70:	0801f2a8 	.word	0x0801f2a8
 8015b74:	0801ee90 	.word	0x0801ee90
 8015b78:	200071c8 	.word	0x200071c8
 8015b7c:	200071d0 	.word	0x200071d0

08015b80 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015b80:	b480      	push	{r7}
 8015b82:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015b84:	4b05      	ldr	r3, [pc, #20]	; (8015b9c <tcp_trigger_input_pcb_close+0x1c>)
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	f043 0310 	orr.w	r3, r3, #16
 8015b8c:	b2da      	uxtb	r2, r3
 8015b8e:	4b03      	ldr	r3, [pc, #12]	; (8015b9c <tcp_trigger_input_pcb_close+0x1c>)
 8015b90:	701a      	strb	r2, [r3, #0]
}
 8015b92:	bf00      	nop
 8015b94:	46bd      	mov	sp, r7
 8015b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9a:	4770      	bx	lr
 8015b9c:	200071e1 	.word	0x200071e1

08015ba0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	60b9      	str	r1, [r7, #8]
 8015baa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d00a      	beq.n	8015bc8 <tcp_route+0x28>
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	7a1b      	ldrb	r3, [r3, #8]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d006      	beq.n	8015bc8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	7a1b      	ldrb	r3, [r3, #8]
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fb f8b6 	bl	8010d30 <netif_get_by_index>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	e003      	b.n	8015bd0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f003 fafb 	bl	80191c4 <ip4_route>
 8015bce:	4603      	mov	r3, r0
  }
}
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	3710      	adds	r7, #16
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}

08015bd8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015bd8:	b590      	push	{r4, r7, lr}
 8015bda:	b087      	sub	sp, #28
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	60f8      	str	r0, [r7, #12]
 8015be0:	60b9      	str	r1, [r7, #8]
 8015be2:	603b      	str	r3, [r7, #0]
 8015be4:	4613      	mov	r3, r2
 8015be6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d105      	bne.n	8015bfa <tcp_create_segment+0x22>
 8015bee:	4b44      	ldr	r3, [pc, #272]	; (8015d00 <tcp_create_segment+0x128>)
 8015bf0:	22a3      	movs	r2, #163	; 0xa3
 8015bf2:	4944      	ldr	r1, [pc, #272]	; (8015d04 <tcp_create_segment+0x12c>)
 8015bf4:	4844      	ldr	r0, [pc, #272]	; (8015d08 <tcp_create_segment+0x130>)
 8015bf6:	f005 fa9b 	bl	801b130 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d105      	bne.n	8015c0c <tcp_create_segment+0x34>
 8015c00:	4b3f      	ldr	r3, [pc, #252]	; (8015d00 <tcp_create_segment+0x128>)
 8015c02:	22a4      	movs	r2, #164	; 0xa4
 8015c04:	4941      	ldr	r1, [pc, #260]	; (8015d0c <tcp_create_segment+0x134>)
 8015c06:	4840      	ldr	r0, [pc, #256]	; (8015d08 <tcp_create_segment+0x130>)
 8015c08:	f005 fa92 	bl	801b130 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015c0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015c10:	009b      	lsls	r3, r3, #2
 8015c12:	b2db      	uxtb	r3, r3
 8015c14:	f003 0304 	and.w	r3, r3, #4
 8015c18:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015c1a:	2003      	movs	r0, #3
 8015c1c:	f7fa fd02 	bl	8010624 <memp_malloc>
 8015c20:	6138      	str	r0, [r7, #16]
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d104      	bne.n	8015c32 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015c28:	68b8      	ldr	r0, [r7, #8]
 8015c2a:	f7fb fbe1 	bl	80113f0 <pbuf_free>
    return NULL;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	e061      	b.n	8015cf6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015c38:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	68ba      	ldr	r2, [r7, #8]
 8015c44:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015c46:	68bb      	ldr	r3, [r7, #8]
 8015c48:	891a      	ldrh	r2, [r3, #8]
 8015c4a:	7dfb      	ldrb	r3, [r7, #23]
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d205      	bcs.n	8015c5e <tcp_create_segment+0x86>
 8015c52:	4b2b      	ldr	r3, [pc, #172]	; (8015d00 <tcp_create_segment+0x128>)
 8015c54:	22b0      	movs	r2, #176	; 0xb0
 8015c56:	492e      	ldr	r1, [pc, #184]	; (8015d10 <tcp_create_segment+0x138>)
 8015c58:	482b      	ldr	r0, [pc, #172]	; (8015d08 <tcp_create_segment+0x130>)
 8015c5a:	f005 fa69 	bl	801b130 <iprintf>
  seg->len = p->tot_len - optlen;
 8015c5e:	68bb      	ldr	r3, [r7, #8]
 8015c60:	891a      	ldrh	r2, [r3, #8]
 8015c62:	7dfb      	ldrb	r3, [r7, #23]
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	1ad3      	subs	r3, r2, r3
 8015c68:	b29a      	uxth	r2, r3
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015c6e:	2114      	movs	r1, #20
 8015c70:	68b8      	ldr	r0, [r7, #8]
 8015c72:	f7fb fb27 	bl	80112c4 <pbuf_add_header>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d004      	beq.n	8015c86 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015c7c:	6938      	ldr	r0, [r7, #16]
 8015c7e:	f7fd f81e 	bl	8012cbe <tcp_seg_free>
    return NULL;
 8015c82:	2300      	movs	r3, #0
 8015c84:	e037      	b.n	8015cf6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	685a      	ldr	r2, [r3, #4]
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	8ada      	ldrh	r2, [r3, #22]
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	68dc      	ldr	r4, [r3, #12]
 8015c98:	4610      	mov	r0, r2
 8015c9a:	f7f9 ffa5 	bl	800fbe8 <lwip_htons>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	8b1a      	ldrh	r2, [r3, #24]
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	68dc      	ldr	r4, [r3, #12]
 8015caa:	4610      	mov	r0, r2
 8015cac:	f7f9 ff9c 	bl	800fbe8 <lwip_htons>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015cb4:	693b      	ldr	r3, [r7, #16]
 8015cb6:	68dc      	ldr	r4, [r3, #12]
 8015cb8:	6838      	ldr	r0, [r7, #0]
 8015cba:	f7f9 ffaa 	bl	800fc12 <lwip_htonl>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015cc2:	7dfb      	ldrb	r3, [r7, #23]
 8015cc4:	089b      	lsrs	r3, r3, #2
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	3305      	adds	r3, #5
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	031b      	lsls	r3, r3, #12
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	79fb      	ldrb	r3, [r7, #7]
 8015cd4:	b29b      	uxth	r3, r3
 8015cd6:	4313      	orrs	r3, r2
 8015cd8:	b29a      	uxth	r2, r3
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	68dc      	ldr	r4, [r3, #12]
 8015cde:	4610      	mov	r0, r2
 8015ce0:	f7f9 ff82 	bl	800fbe8 <lwip_htons>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	68db      	ldr	r3, [r3, #12]
 8015cec:	2200      	movs	r2, #0
 8015cee:	749a      	strb	r2, [r3, #18]
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	74da      	strb	r2, [r3, #19]
  return seg;
 8015cf4:	693b      	ldr	r3, [r7, #16]
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	371c      	adds	r7, #28
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd90      	pop	{r4, r7, pc}
 8015cfe:	bf00      	nop
 8015d00:	0801f2c4 	.word	0x0801f2c4
 8015d04:	0801f2f8 	.word	0x0801f2f8
 8015d08:	0801f318 	.word	0x0801f318
 8015d0c:	0801f340 	.word	0x0801f340
 8015d10:	0801f364 	.word	0x0801f364

08015d14 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b086      	sub	sp, #24
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	607b      	str	r3, [r7, #4]
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	73fb      	strb	r3, [r7, #15]
 8015d20:	460b      	mov	r3, r1
 8015d22:	81bb      	strh	r3, [r7, #12]
 8015d24:	4613      	mov	r3, r2
 8015d26:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015d28:	89bb      	ldrh	r3, [r7, #12]
 8015d2a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d105      	bne.n	8015d3e <tcp_pbuf_prealloc+0x2a>
 8015d32:	4b30      	ldr	r3, [pc, #192]	; (8015df4 <tcp_pbuf_prealloc+0xe0>)
 8015d34:	22e8      	movs	r2, #232	; 0xe8
 8015d36:	4930      	ldr	r1, [pc, #192]	; (8015df8 <tcp_pbuf_prealloc+0xe4>)
 8015d38:	4830      	ldr	r0, [pc, #192]	; (8015dfc <tcp_pbuf_prealloc+0xe8>)
 8015d3a:	f005 f9f9 	bl	801b130 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015d3e:	6a3b      	ldr	r3, [r7, #32]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d105      	bne.n	8015d50 <tcp_pbuf_prealloc+0x3c>
 8015d44:	4b2b      	ldr	r3, [pc, #172]	; (8015df4 <tcp_pbuf_prealloc+0xe0>)
 8015d46:	22e9      	movs	r2, #233	; 0xe9
 8015d48:	492d      	ldr	r1, [pc, #180]	; (8015e00 <tcp_pbuf_prealloc+0xec>)
 8015d4a:	482c      	ldr	r0, [pc, #176]	; (8015dfc <tcp_pbuf_prealloc+0xe8>)
 8015d4c:	f005 f9f0 	bl	801b130 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015d50:	89ba      	ldrh	r2, [r7, #12]
 8015d52:	897b      	ldrh	r3, [r7, #10]
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d221      	bcs.n	8015d9c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015d58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015d5c:	f003 0302 	and.w	r3, r3, #2
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d111      	bne.n	8015d88 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015d64:	6a3b      	ldr	r3, [r7, #32]
 8015d66:	8b5b      	ldrh	r3, [r3, #26]
 8015d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d115      	bne.n	8015d9c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015d70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d007      	beq.n	8015d88 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015d78:	6a3b      	ldr	r3, [r7, #32]
 8015d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d103      	bne.n	8015d88 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015d80:	6a3b      	ldr	r3, [r7, #32]
 8015d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d009      	beq.n	8015d9c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015d88:	89bb      	ldrh	r3, [r7, #12]
 8015d8a:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8015d8e:	f023 0203 	bic.w	r2, r3, #3
 8015d92:	897b      	ldrh	r3, [r7, #10]
 8015d94:	4293      	cmp	r3, r2
 8015d96:	bf28      	it	cs
 8015d98:	4613      	movcs	r3, r2
 8015d9a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015d9c:	8af9      	ldrh	r1, [r7, #22]
 8015d9e:	7bfb      	ldrb	r3, [r7, #15]
 8015da0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7fb f83f 	bl	8010e28 <pbuf_alloc>
 8015daa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d101      	bne.n	8015db6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015db2:	2300      	movs	r3, #0
 8015db4:	e019      	b.n	8015dea <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d006      	beq.n	8015dcc <tcp_pbuf_prealloc+0xb8>
 8015dbe:	4b0d      	ldr	r3, [pc, #52]	; (8015df4 <tcp_pbuf_prealloc+0xe0>)
 8015dc0:	f240 120b 	movw	r2, #267	; 0x10b
 8015dc4:	490f      	ldr	r1, [pc, #60]	; (8015e04 <tcp_pbuf_prealloc+0xf0>)
 8015dc6:	480d      	ldr	r0, [pc, #52]	; (8015dfc <tcp_pbuf_prealloc+0xe8>)
 8015dc8:	f005 f9b2 	bl	801b130 <iprintf>
  *oversize = p->len - length;
 8015dcc:	693b      	ldr	r3, [r7, #16]
 8015dce:	895a      	ldrh	r2, [r3, #10]
 8015dd0:	89bb      	ldrh	r3, [r7, #12]
 8015dd2:	1ad3      	subs	r3, r2, r3
 8015dd4:	b29a      	uxth	r2, r3
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	89ba      	ldrh	r2, [r7, #12]
 8015dde:	811a      	strh	r2, [r3, #8]
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	891a      	ldrh	r2, [r3, #8]
 8015de4:	693b      	ldr	r3, [r7, #16]
 8015de6:	815a      	strh	r2, [r3, #10]
  return p;
 8015de8:	693b      	ldr	r3, [r7, #16]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	3718      	adds	r7, #24
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}
 8015df2:	bf00      	nop
 8015df4:	0801f2c4 	.word	0x0801f2c4
 8015df8:	0801f37c 	.word	0x0801f37c
 8015dfc:	0801f318 	.word	0x0801f318
 8015e00:	0801f3a0 	.word	0x0801f3a0
 8015e04:	0801f3c0 	.word	0x0801f3c0

08015e08 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	460b      	mov	r3, r1
 8015e12:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d106      	bne.n	8015e28 <tcp_write_checks+0x20>
 8015e1a:	4b33      	ldr	r3, [pc, #204]	; (8015ee8 <tcp_write_checks+0xe0>)
 8015e1c:	f240 1233 	movw	r2, #307	; 0x133
 8015e20:	4932      	ldr	r1, [pc, #200]	; (8015eec <tcp_write_checks+0xe4>)
 8015e22:	4833      	ldr	r0, [pc, #204]	; (8015ef0 <tcp_write_checks+0xe8>)
 8015e24:	f005 f984 	bl	801b130 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	7d1b      	ldrb	r3, [r3, #20]
 8015e2c:	2b04      	cmp	r3, #4
 8015e2e:	d00e      	beq.n	8015e4e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015e34:	2b07      	cmp	r3, #7
 8015e36:	d00a      	beq.n	8015e4e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015e3c:	2b02      	cmp	r3, #2
 8015e3e:	d006      	beq.n	8015e4e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015e44:	2b03      	cmp	r3, #3
 8015e46:	d002      	beq.n	8015e4e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015e48:	f06f 030a 	mvn.w	r3, #10
 8015e4c:	e048      	b.n	8015ee0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015e4e:	887b      	ldrh	r3, [r7, #2]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d101      	bne.n	8015e58 <tcp_write_checks+0x50>
    return ERR_OK;
 8015e54:	2300      	movs	r3, #0
 8015e56:	e043      	b.n	8015ee0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015e5e:	887a      	ldrh	r2, [r7, #2]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d909      	bls.n	8015e78 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	8b5b      	ldrh	r3, [r3, #26]
 8015e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e6c:	b29a      	uxth	r2, r3
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015e72:	f04f 33ff 	mov.w	r3, #4294967295
 8015e76:	e033      	b.n	8015ee0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e7e:	2b0f      	cmp	r3, #15
 8015e80:	d909      	bls.n	8015e96 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	8b5b      	ldrh	r3, [r3, #26]
 8015e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e8a:	b29a      	uxth	r2, r3
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015e90:	f04f 33ff 	mov.w	r3, #4294967295
 8015e94:	e024      	b.n	8015ee0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d00f      	beq.n	8015ec0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d11a      	bne.n	8015ede <tcp_write_checks+0xd6>
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d116      	bne.n	8015ede <tcp_write_checks+0xd6>
 8015eb0:	4b0d      	ldr	r3, [pc, #52]	; (8015ee8 <tcp_write_checks+0xe0>)
 8015eb2:	f240 1255 	movw	r2, #341	; 0x155
 8015eb6:	490f      	ldr	r1, [pc, #60]	; (8015ef4 <tcp_write_checks+0xec>)
 8015eb8:	480d      	ldr	r0, [pc, #52]	; (8015ef0 <tcp_write_checks+0xe8>)
 8015eba:	f005 f939 	bl	801b130 <iprintf>
 8015ebe:	e00e      	b.n	8015ede <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d103      	bne.n	8015ed0 <tcp_write_checks+0xc8>
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d006      	beq.n	8015ede <tcp_write_checks+0xd6>
 8015ed0:	4b05      	ldr	r3, [pc, #20]	; (8015ee8 <tcp_write_checks+0xe0>)
 8015ed2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015ed6:	4908      	ldr	r1, [pc, #32]	; (8015ef8 <tcp_write_checks+0xf0>)
 8015ed8:	4805      	ldr	r0, [pc, #20]	; (8015ef0 <tcp_write_checks+0xe8>)
 8015eda:	f005 f929 	bl	801b130 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015ede:	2300      	movs	r3, #0
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	0801f2c4 	.word	0x0801f2c4
 8015eec:	0801f3d4 	.word	0x0801f3d4
 8015ef0:	0801f318 	.word	0x0801f318
 8015ef4:	0801f3f4 	.word	0x0801f3f4
 8015ef8:	0801f430 	.word	0x0801f430

08015efc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015efc:	b590      	push	{r4, r7, lr}
 8015efe:	b09b      	sub	sp, #108	; 0x6c
 8015f00:	af04      	add	r7, sp, #16
 8015f02:	60f8      	str	r0, [r7, #12]
 8015f04:	60b9      	str	r1, [r7, #8]
 8015f06:	4611      	mov	r1, r2
 8015f08:	461a      	mov	r2, r3
 8015f0a:	460b      	mov	r3, r1
 8015f0c:	80fb      	strh	r3, [r7, #6]
 8015f0e:	4613      	mov	r3, r2
 8015f10:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015f12:	2300      	movs	r3, #0
 8015f14:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015f16:	2300      	movs	r3, #0
 8015f18:	653b      	str	r3, [r7, #80]	; 0x50
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f1e:	2300      	movs	r3, #0
 8015f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8015f22:	2300      	movs	r3, #0
 8015f24:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015f26:	2300      	movs	r3, #0
 8015f28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015f32:	2300      	movs	r3, #0
 8015f34:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015f36:	2300      	movs	r3, #0
 8015f38:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d109      	bne.n	8015f58 <tcp_write+0x5c>
 8015f44:	4ba4      	ldr	r3, [pc, #656]	; (80161d8 <tcp_write+0x2dc>)
 8015f46:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015f4a:	49a4      	ldr	r1, [pc, #656]	; (80161dc <tcp_write+0x2e0>)
 8015f4c:	48a4      	ldr	r0, [pc, #656]	; (80161e0 <tcp_write+0x2e4>)
 8015f4e:	f005 f8ef 	bl	801b130 <iprintf>
 8015f52:	f06f 030f 	mvn.w	r3, #15
 8015f56:	e32a      	b.n	80165ae <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015f5e:	085b      	lsrs	r3, r3, #1
 8015f60:	b29a      	uxth	r2, r3
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f66:	4293      	cmp	r3, r2
 8015f68:	bf28      	it	cs
 8015f6a:	4613      	movcs	r3, r2
 8015f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d102      	bne.n	8015f7a <tcp_write+0x7e>
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f78:	e000      	b.n	8015f7c <tcp_write+0x80>
 8015f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015f7e:	68bb      	ldr	r3, [r7, #8]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d109      	bne.n	8015f98 <tcp_write+0x9c>
 8015f84:	4b94      	ldr	r3, [pc, #592]	; (80161d8 <tcp_write+0x2dc>)
 8015f86:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015f8a:	4996      	ldr	r1, [pc, #600]	; (80161e4 <tcp_write+0x2e8>)
 8015f8c:	4894      	ldr	r0, [pc, #592]	; (80161e0 <tcp_write+0x2e4>)
 8015f8e:	f005 f8cf 	bl	801b130 <iprintf>
 8015f92:	f06f 030f 	mvn.w	r3, #15
 8015f96:	e30a      	b.n	80165ae <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015f98:	88fb      	ldrh	r3, [r7, #6]
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	68f8      	ldr	r0, [r7, #12]
 8015f9e:	f7ff ff33 	bl	8015e08 <tcp_write_checks>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015fa8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d002      	beq.n	8015fb6 <tcp_write+0xba>
    return err;
 8015fb0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015fb4:	e2fb      	b.n	80165ae <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fbc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	f000 80f6 	beq.w	80161bc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fd4:	653b      	str	r3, [r7, #80]	; 0x50
 8015fd6:	e002      	b.n	8015fde <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d1f8      	bne.n	8015fd8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fe8:	7a9b      	ldrb	r3, [r3, #10]
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	b29b      	uxth	r3, r3
 8015fee:	f003 0304 	and.w	r3, r3, #4
 8015ff2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015ff4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ff8:	891b      	ldrh	r3, [r3, #8]
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	8c3b      	ldrh	r3, [r7, #32]
 8015ffe:	440b      	add	r3, r1
 8016000:	429a      	cmp	r2, r3
 8016002:	da06      	bge.n	8016012 <tcp_write+0x116>
 8016004:	4b74      	ldr	r3, [pc, #464]	; (80161d8 <tcp_write+0x2dc>)
 8016006:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801600a:	4977      	ldr	r1, [pc, #476]	; (80161e8 <tcp_write+0x2ec>)
 801600c:	4874      	ldr	r0, [pc, #464]	; (80161e0 <tcp_write+0x2e4>)
 801600e:	f005 f88f 	bl	801b130 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016014:	891a      	ldrh	r2, [r3, #8]
 8016016:	8c3b      	ldrh	r3, [r7, #32]
 8016018:	4413      	add	r3, r2
 801601a:	b29b      	uxth	r3, r3
 801601c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801601e:	1ad3      	subs	r3, r2, r3
 8016020:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016028:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801602a:	8a7b      	ldrh	r3, [r7, #18]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d026      	beq.n	801607e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016030:	8a7b      	ldrh	r3, [r7, #18]
 8016032:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016034:	429a      	cmp	r2, r3
 8016036:	d206      	bcs.n	8016046 <tcp_write+0x14a>
 8016038:	4b67      	ldr	r3, [pc, #412]	; (80161d8 <tcp_write+0x2dc>)
 801603a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801603e:	496b      	ldr	r1, [pc, #428]	; (80161ec <tcp_write+0x2f0>)
 8016040:	4867      	ldr	r0, [pc, #412]	; (80161e0 <tcp_write+0x2e4>)
 8016042:	f005 f875 	bl	801b130 <iprintf>
      seg = last_unsent;
 8016046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016048:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801604a:	8a7b      	ldrh	r3, [r7, #18]
 801604c:	88fa      	ldrh	r2, [r7, #6]
 801604e:	4293      	cmp	r3, r2
 8016050:	bf28      	it	cs
 8016052:	4613      	movcs	r3, r2
 8016054:	b29b      	uxth	r3, r3
 8016056:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016058:	4293      	cmp	r3, r2
 801605a:	bf28      	it	cs
 801605c:	4613      	movcs	r3, r2
 801605e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016060:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016064:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016066:	4413      	add	r3, r2
 8016068:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801606c:	8a7a      	ldrh	r2, [r7, #18]
 801606e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016070:	1ad3      	subs	r3, r2, r3
 8016072:	b29b      	uxth	r3, r3
 8016074:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016076:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016078:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801607a:	1ad3      	subs	r3, r2, r3
 801607c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801607e:	8a7b      	ldrh	r3, [r7, #18]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d00b      	beq.n	801609c <tcp_write+0x1a0>
 8016084:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016088:	88fb      	ldrh	r3, [r7, #6]
 801608a:	429a      	cmp	r2, r3
 801608c:	d006      	beq.n	801609c <tcp_write+0x1a0>
 801608e:	4b52      	ldr	r3, [pc, #328]	; (80161d8 <tcp_write+0x2dc>)
 8016090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016094:	4956      	ldr	r1, [pc, #344]	; (80161f0 <tcp_write+0x2f4>)
 8016096:	4852      	ldr	r0, [pc, #328]	; (80161e0 <tcp_write+0x2e4>)
 8016098:	f005 f84a 	bl	801b130 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801609c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80160a0:	88fb      	ldrh	r3, [r7, #6]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	f080 8167 	bcs.w	8016376 <tcp_write+0x47a>
 80160a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	f000 8163 	beq.w	8016376 <tcp_write+0x47a>
 80160b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160b2:	891b      	ldrh	r3, [r3, #8]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	f000 815e 	beq.w	8016376 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80160ba:	88fa      	ldrh	r2, [r7, #6]
 80160bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160c0:	1ad2      	subs	r2, r2, r3
 80160c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160c4:	4293      	cmp	r3, r2
 80160c6:	bfa8      	it	ge
 80160c8:	4613      	movge	r3, r2
 80160ca:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80160cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160ce:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80160d0:	797b      	ldrb	r3, [r7, #5]
 80160d2:	f003 0301 	and.w	r3, r3, #1
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d027      	beq.n	801612a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80160da:	f107 0012 	add.w	r0, r7, #18
 80160de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80160e0:	8bf9      	ldrh	r1, [r7, #30]
 80160e2:	2301      	movs	r3, #1
 80160e4:	9302      	str	r3, [sp, #8]
 80160e6:	797b      	ldrb	r3, [r7, #5]
 80160e8:	9301      	str	r3, [sp, #4]
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	9300      	str	r3, [sp, #0]
 80160ee:	4603      	mov	r3, r0
 80160f0:	2000      	movs	r0, #0
 80160f2:	f7ff fe0f 	bl	8015d14 <tcp_pbuf_prealloc>
 80160f6:	6578      	str	r0, [r7, #84]	; 0x54
 80160f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	f000 8225 	beq.w	801654a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016102:	6858      	ldr	r0, [r3, #4]
 8016104:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016108:	68ba      	ldr	r2, [r7, #8]
 801610a:	4413      	add	r3, r2
 801610c:	8bfa      	ldrh	r2, [r7, #30]
 801610e:	4619      	mov	r1, r3
 8016110:	f005 f9ef 	bl	801b4f2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016114:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016116:	f7fb f9f3 	bl	8011500 <pbuf_clen>
 801611a:	4603      	mov	r3, r0
 801611c:	461a      	mov	r2, r3
 801611e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016122:	4413      	add	r3, r2
 8016124:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016128:	e041      	b.n	80161ae <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801612a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	637b      	str	r3, [r7, #52]	; 0x34
 8016130:	e002      	b.n	8016138 <tcp_write+0x23c>
 8016132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	637b      	str	r3, [r7, #52]	; 0x34
 8016138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1f8      	bne.n	8016132 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016142:	7b1b      	ldrb	r3, [r3, #12]
 8016144:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016148:	2b00      	cmp	r3, #0
 801614a:	d115      	bne.n	8016178 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016152:	8952      	ldrh	r2, [r2, #10]
 8016154:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016156:	68ba      	ldr	r2, [r7, #8]
 8016158:	429a      	cmp	r2, r3
 801615a:	d10d      	bne.n	8016178 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801615c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016160:	2b00      	cmp	r3, #0
 8016162:	d006      	beq.n	8016172 <tcp_write+0x276>
 8016164:	4b1c      	ldr	r3, [pc, #112]	; (80161d8 <tcp_write+0x2dc>)
 8016166:	f240 2231 	movw	r2, #561	; 0x231
 801616a:	4922      	ldr	r1, [pc, #136]	; (80161f4 <tcp_write+0x2f8>)
 801616c:	481c      	ldr	r0, [pc, #112]	; (80161e0 <tcp_write+0x2e4>)
 801616e:	f004 ffdf 	bl	801b130 <iprintf>
          extendlen = seglen;
 8016172:	8bfb      	ldrh	r3, [r7, #30]
 8016174:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016176:	e01a      	b.n	80161ae <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016178:	8bfb      	ldrh	r3, [r7, #30]
 801617a:	2201      	movs	r2, #1
 801617c:	4619      	mov	r1, r3
 801617e:	2000      	movs	r0, #0
 8016180:	f7fa fe52 	bl	8010e28 <pbuf_alloc>
 8016184:	6578      	str	r0, [r7, #84]	; 0x54
 8016186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016188:	2b00      	cmp	r3, #0
 801618a:	f000 81e0 	beq.w	801654e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801618e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016192:	68ba      	ldr	r2, [r7, #8]
 8016194:	441a      	add	r2, r3
 8016196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016198:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801619a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801619c:	f7fb f9b0 	bl	8011500 <pbuf_clen>
 80161a0:	4603      	mov	r3, r0
 80161a2:	461a      	mov	r2, r3
 80161a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80161a8:	4413      	add	r3, r2
 80161aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80161ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161b2:	8bfb      	ldrh	r3, [r7, #30]
 80161b4:	4413      	add	r3, r2
 80161b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80161ba:	e0dc      	b.n	8016376 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	f000 80d7 	beq.w	8016376 <tcp_write+0x47a>
 80161c8:	4b03      	ldr	r3, [pc, #12]	; (80161d8 <tcp_write+0x2dc>)
 80161ca:	f240 224a 	movw	r2, #586	; 0x24a
 80161ce:	490a      	ldr	r1, [pc, #40]	; (80161f8 <tcp_write+0x2fc>)
 80161d0:	4803      	ldr	r0, [pc, #12]	; (80161e0 <tcp_write+0x2e4>)
 80161d2:	f004 ffad 	bl	801b130 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80161d6:	e0ce      	b.n	8016376 <tcp_write+0x47a>
 80161d8:	0801f2c4 	.word	0x0801f2c4
 80161dc:	0801f464 	.word	0x0801f464
 80161e0:	0801f318 	.word	0x0801f318
 80161e4:	0801f47c 	.word	0x0801f47c
 80161e8:	0801f4b0 	.word	0x0801f4b0
 80161ec:	0801f4c8 	.word	0x0801f4c8
 80161f0:	0801f4e8 	.word	0x0801f4e8
 80161f4:	0801f508 	.word	0x0801f508
 80161f8:	0801f534 	.word	0x0801f534
    struct pbuf *p;
    u16_t left = len - pos;
 80161fc:	88fa      	ldrh	r2, [r7, #6]
 80161fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016202:	1ad3      	subs	r3, r2, r3
 8016204:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016206:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801620a:	b29b      	uxth	r3, r3
 801620c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801620e:	1ad3      	subs	r3, r2, r3
 8016210:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016212:	8b7a      	ldrh	r2, [r7, #26]
 8016214:	8bbb      	ldrh	r3, [r7, #28]
 8016216:	4293      	cmp	r3, r2
 8016218:	bf28      	it	cs
 801621a:	4613      	movcs	r3, r2
 801621c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801621e:	797b      	ldrb	r3, [r7, #5]
 8016220:	f003 0301 	and.w	r3, r3, #1
 8016224:	2b00      	cmp	r3, #0
 8016226:	d036      	beq.n	8016296 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016228:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801622c:	b29a      	uxth	r2, r3
 801622e:	8b3b      	ldrh	r3, [r7, #24]
 8016230:	4413      	add	r3, r2
 8016232:	b299      	uxth	r1, r3
 8016234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016236:	2b00      	cmp	r3, #0
 8016238:	bf0c      	ite	eq
 801623a:	2301      	moveq	r3, #1
 801623c:	2300      	movne	r3, #0
 801623e:	b2db      	uxtb	r3, r3
 8016240:	f107 0012 	add.w	r0, r7, #18
 8016244:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016246:	9302      	str	r3, [sp, #8]
 8016248:	797b      	ldrb	r3, [r7, #5]
 801624a:	9301      	str	r3, [sp, #4]
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	9300      	str	r3, [sp, #0]
 8016250:	4603      	mov	r3, r0
 8016252:	2036      	movs	r0, #54	; 0x36
 8016254:	f7ff fd5e 	bl	8015d14 <tcp_pbuf_prealloc>
 8016258:	6338      	str	r0, [r7, #48]	; 0x30
 801625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625c:	2b00      	cmp	r3, #0
 801625e:	f000 8178 	beq.w	8016552 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016264:	895b      	ldrh	r3, [r3, #10]
 8016266:	8b3a      	ldrh	r2, [r7, #24]
 8016268:	429a      	cmp	r2, r3
 801626a:	d906      	bls.n	801627a <tcp_write+0x37e>
 801626c:	4b8c      	ldr	r3, [pc, #560]	; (80164a0 <tcp_write+0x5a4>)
 801626e:	f240 2266 	movw	r2, #614	; 0x266
 8016272:	498c      	ldr	r1, [pc, #560]	; (80164a4 <tcp_write+0x5a8>)
 8016274:	488c      	ldr	r0, [pc, #560]	; (80164a8 <tcp_write+0x5ac>)
 8016276:	f004 ff5b 	bl	801b130 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627c:	685a      	ldr	r2, [r3, #4]
 801627e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016282:	18d0      	adds	r0, r2, r3
 8016284:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016288:	68ba      	ldr	r2, [r7, #8]
 801628a:	4413      	add	r3, r2
 801628c:	8b3a      	ldrh	r2, [r7, #24]
 801628e:	4619      	mov	r1, r3
 8016290:	f005 f92f 	bl	801b4f2 <memcpy>
 8016294:	e02f      	b.n	80162f6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016296:	8a7b      	ldrh	r3, [r7, #18]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d006      	beq.n	80162aa <tcp_write+0x3ae>
 801629c:	4b80      	ldr	r3, [pc, #512]	; (80164a0 <tcp_write+0x5a4>)
 801629e:	f240 2271 	movw	r2, #625	; 0x271
 80162a2:	4982      	ldr	r1, [pc, #520]	; (80164ac <tcp_write+0x5b0>)
 80162a4:	4880      	ldr	r0, [pc, #512]	; (80164a8 <tcp_write+0x5ac>)
 80162a6:	f004 ff43 	bl	801b130 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80162aa:	8b3b      	ldrh	r3, [r7, #24]
 80162ac:	2201      	movs	r2, #1
 80162ae:	4619      	mov	r1, r3
 80162b0:	2036      	movs	r0, #54	; 0x36
 80162b2:	f7fa fdb9 	bl	8010e28 <pbuf_alloc>
 80162b6:	6178      	str	r0, [r7, #20]
 80162b8:	697b      	ldr	r3, [r7, #20]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	f000 814b 	beq.w	8016556 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80162c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162c4:	68ba      	ldr	r2, [r7, #8]
 80162c6:	441a      	add	r2, r3
 80162c8:	697b      	ldr	r3, [r7, #20]
 80162ca:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80162cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162d6:	4619      	mov	r1, r3
 80162d8:	2036      	movs	r0, #54	; 0x36
 80162da:	f7fa fda5 	bl	8010e28 <pbuf_alloc>
 80162de:	6338      	str	r0, [r7, #48]	; 0x30
 80162e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d103      	bne.n	80162ee <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80162e6:	6978      	ldr	r0, [r7, #20]
 80162e8:	f7fb f882 	bl	80113f0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80162ec:	e136      	b.n	801655c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80162ee:	6979      	ldr	r1, [r7, #20]
 80162f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162f2:	f7fb f93f 	bl	8011574 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80162f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162f8:	f7fb f902 	bl	8011500 <pbuf_clen>
 80162fc:	4603      	mov	r3, r0
 80162fe:	461a      	mov	r2, r3
 8016300:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016304:	4413      	add	r3, r2
 8016306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801630a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801630e:	2b10      	cmp	r3, #16
 8016310:	d903      	bls.n	801631a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016314:	f7fb f86c 	bl	80113f0 <pbuf_free>
      goto memerr;
 8016318:	e120      	b.n	801655c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801631e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016322:	441a      	add	r2, r3
 8016324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016328:	9300      	str	r3, [sp, #0]
 801632a:	4613      	mov	r3, r2
 801632c:	2200      	movs	r2, #0
 801632e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016330:	68f8      	ldr	r0, [r7, #12]
 8016332:	f7ff fc51 	bl	8015bd8 <tcp_create_segment>
 8016336:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801633a:	2b00      	cmp	r3, #0
 801633c:	f000 810d 	beq.w	801655a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016342:	2b00      	cmp	r3, #0
 8016344:	d102      	bne.n	801634c <tcp_write+0x450>
      queue = seg;
 8016346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016348:	647b      	str	r3, [r7, #68]	; 0x44
 801634a:	e00c      	b.n	8016366 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801634c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801634e:	2b00      	cmp	r3, #0
 8016350:	d106      	bne.n	8016360 <tcp_write+0x464>
 8016352:	4b53      	ldr	r3, [pc, #332]	; (80164a0 <tcp_write+0x5a4>)
 8016354:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016358:	4955      	ldr	r1, [pc, #340]	; (80164b0 <tcp_write+0x5b4>)
 801635a:	4853      	ldr	r0, [pc, #332]	; (80164a8 <tcp_write+0x5ac>)
 801635c:	f004 fee8 	bl	801b130 <iprintf>
      prev_seg->next = seg;
 8016360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016364:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016368:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801636a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801636e:	8b3b      	ldrh	r3, [r7, #24]
 8016370:	4413      	add	r3, r2
 8016372:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016376:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801637a:	88fb      	ldrh	r3, [r7, #6]
 801637c:	429a      	cmp	r2, r3
 801637e:	f4ff af3d 	bcc.w	80161fc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016382:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016384:	2b00      	cmp	r3, #0
 8016386:	d02c      	beq.n	80163e2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801638e:	e01e      	b.n	80163ce <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016392:	891a      	ldrh	r2, [r3, #8]
 8016394:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016396:	4413      	add	r3, r2
 8016398:	b29a      	uxth	r2, r3
 801639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d110      	bne.n	80163c8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80163a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a8:	685b      	ldr	r3, [r3, #4]
 80163aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163ac:	8952      	ldrh	r2, [r2, #10]
 80163ae:	4413      	add	r3, r2
 80163b0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80163b2:	68b9      	ldr	r1, [r7, #8]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f005 f89c 	bl	801b4f2 <memcpy>
        p->len += oversize_used;
 80163ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163bc:	895a      	ldrh	r2, [r3, #10]
 80163be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80163c0:	4413      	add	r3, r2
 80163c2:	b29a      	uxth	r2, r3
 80163c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80163c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d1dd      	bne.n	8016390 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80163d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163d6:	891a      	ldrh	r2, [r3, #8]
 80163d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80163da:	4413      	add	r3, r2
 80163dc:	b29a      	uxth	r2, r3
 80163de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163e0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80163e2:	8a7a      	ldrh	r2, [r7, #18]
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80163ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d018      	beq.n	8016422 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80163f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d106      	bne.n	8016404 <tcp_write+0x508>
 80163f6:	4b2a      	ldr	r3, [pc, #168]	; (80164a0 <tcp_write+0x5a4>)
 80163f8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80163fc:	492d      	ldr	r1, [pc, #180]	; (80164b4 <tcp_write+0x5b8>)
 80163fe:	482a      	ldr	r0, [pc, #168]	; (80164a8 <tcp_write+0x5ac>)
 8016400:	f004 fe96 	bl	801b130 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801640a:	4618      	mov	r0, r3
 801640c:	f7fb f8b2 	bl	8011574 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016412:	891a      	ldrh	r2, [r3, #8]
 8016414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016416:	891b      	ldrh	r3, [r3, #8]
 8016418:	4413      	add	r3, r2
 801641a:	b29a      	uxth	r2, r3
 801641c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801641e:	811a      	strh	r2, [r3, #8]
 8016420:	e037      	b.n	8016492 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016422:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016424:	2b00      	cmp	r3, #0
 8016426:	d034      	beq.n	8016492 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801642a:	2b00      	cmp	r3, #0
 801642c:	d003      	beq.n	8016436 <tcp_write+0x53a>
 801642e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d106      	bne.n	8016444 <tcp_write+0x548>
 8016436:	4b1a      	ldr	r3, [pc, #104]	; (80164a0 <tcp_write+0x5a4>)
 8016438:	f240 22e6 	movw	r2, #742	; 0x2e6
 801643c:	491e      	ldr	r1, [pc, #120]	; (80164b8 <tcp_write+0x5bc>)
 801643e:	481a      	ldr	r0, [pc, #104]	; (80164a8 <tcp_write+0x5ac>)
 8016440:	f004 fe76 	bl	801b130 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	62bb      	str	r3, [r7, #40]	; 0x28
 801644a:	e009      	b.n	8016460 <tcp_write+0x564>
      p->tot_len += extendlen;
 801644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801644e:	891a      	ldrh	r2, [r3, #8]
 8016450:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016452:	4413      	add	r3, r2
 8016454:	b29a      	uxth	r2, r3
 8016456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016458:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d1f1      	bne.n	801644c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646a:	891a      	ldrh	r2, [r3, #8]
 801646c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801646e:	4413      	add	r3, r2
 8016470:	b29a      	uxth	r2, r3
 8016472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016474:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016478:	895a      	ldrh	r2, [r3, #10]
 801647a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801647c:	4413      	add	r3, r2
 801647e:	b29a      	uxth	r2, r3
 8016480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016482:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016486:	891a      	ldrh	r2, [r3, #8]
 8016488:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801648a:	4413      	add	r3, r2
 801648c:	b29a      	uxth	r2, r3
 801648e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016490:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016494:	2b00      	cmp	r3, #0
 8016496:	d111      	bne.n	80164bc <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801649c:	66da      	str	r2, [r3, #108]	; 0x6c
 801649e:	e010      	b.n	80164c2 <tcp_write+0x5c6>
 80164a0:	0801f2c4 	.word	0x0801f2c4
 80164a4:	0801f564 	.word	0x0801f564
 80164a8:	0801f318 	.word	0x0801f318
 80164ac:	0801f5a4 	.word	0x0801f5a4
 80164b0:	0801f5b4 	.word	0x0801f5b4
 80164b4:	0801f5c8 	.word	0x0801f5c8
 80164b8:	0801f600 	.word	0x0801f600
  } else {
    last_unsent->next = queue;
 80164bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80164c0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80164c6:	88fb      	ldrh	r3, [r7, #6]
 80164c8:	441a      	add	r2, r3
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80164d4:	88fb      	ldrh	r3, [r7, #6]
 80164d6:	1ad3      	subs	r3, r2, r3
 80164d8:	b29a      	uxth	r2, r3
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80164e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d00e      	beq.n	8016512 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d10a      	bne.n	8016512 <tcp_write+0x616>
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016500:	2b00      	cmp	r3, #0
 8016502:	d106      	bne.n	8016512 <tcp_write+0x616>
 8016504:	4b2c      	ldr	r3, [pc, #176]	; (80165b8 <tcp_write+0x6bc>)
 8016506:	f240 3212 	movw	r2, #786	; 0x312
 801650a:	492c      	ldr	r1, [pc, #176]	; (80165bc <tcp_write+0x6c0>)
 801650c:	482c      	ldr	r0, [pc, #176]	; (80165c0 <tcp_write+0x6c4>)
 801650e:	f004 fe0f 	bl	801b130 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016514:	2b00      	cmp	r3, #0
 8016516:	d016      	beq.n	8016546 <tcp_write+0x64a>
 8016518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d012      	beq.n	8016546 <tcp_write+0x64a>
 8016520:	797b      	ldrb	r3, [r7, #5]
 8016522:	f003 0302 	and.w	r3, r3, #2
 8016526:	2b00      	cmp	r3, #0
 8016528:	d10d      	bne.n	8016546 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801652a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801652c:	68db      	ldr	r3, [r3, #12]
 801652e:	899b      	ldrh	r3, [r3, #12]
 8016530:	b29c      	uxth	r4, r3
 8016532:	2008      	movs	r0, #8
 8016534:	f7f9 fb58 	bl	800fbe8 <lwip_htons>
 8016538:	4603      	mov	r3, r0
 801653a:	461a      	mov	r2, r3
 801653c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801653e:	68db      	ldr	r3, [r3, #12]
 8016540:	4322      	orrs	r2, r4
 8016542:	b292      	uxth	r2, r2
 8016544:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016546:	2300      	movs	r3, #0
 8016548:	e031      	b.n	80165ae <tcp_write+0x6b2>
          goto memerr;
 801654a:	bf00      	nop
 801654c:	e006      	b.n	801655c <tcp_write+0x660>
            goto memerr;
 801654e:	bf00      	nop
 8016550:	e004      	b.n	801655c <tcp_write+0x660>
        goto memerr;
 8016552:	bf00      	nop
 8016554:	e002      	b.n	801655c <tcp_write+0x660>
        goto memerr;
 8016556:	bf00      	nop
 8016558:	e000      	b.n	801655c <tcp_write+0x660>
      goto memerr;
 801655a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	8b5b      	ldrh	r3, [r3, #26]
 8016560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016564:	b29a      	uxth	r2, r3
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801656a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801656c:	2b00      	cmp	r3, #0
 801656e:	d002      	beq.n	8016576 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016570:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016572:	f7fa ff3d 	bl	80113f0 <pbuf_free>
  }
  if (queue != NULL) {
 8016576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016578:	2b00      	cmp	r3, #0
 801657a:	d002      	beq.n	8016582 <tcp_write+0x686>
    tcp_segs_free(queue);
 801657c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801657e:	f7fc fb89 	bl	8012c94 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016588:	2b00      	cmp	r3, #0
 801658a:	d00e      	beq.n	80165aa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016590:	2b00      	cmp	r3, #0
 8016592:	d10a      	bne.n	80165aa <tcp_write+0x6ae>
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016598:	2b00      	cmp	r3, #0
 801659a:	d106      	bne.n	80165aa <tcp_write+0x6ae>
 801659c:	4b06      	ldr	r3, [pc, #24]	; (80165b8 <tcp_write+0x6bc>)
 801659e:	f240 3227 	movw	r2, #807	; 0x327
 80165a2:	4906      	ldr	r1, [pc, #24]	; (80165bc <tcp_write+0x6c0>)
 80165a4:	4806      	ldr	r0, [pc, #24]	; (80165c0 <tcp_write+0x6c4>)
 80165a6:	f004 fdc3 	bl	801b130 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80165aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	375c      	adds	r7, #92	; 0x5c
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd90      	pop	{r4, r7, pc}
 80165b6:	bf00      	nop
 80165b8:	0801f2c4 	.word	0x0801f2c4
 80165bc:	0801f638 	.word	0x0801f638
 80165c0:	0801f318 	.word	0x0801f318

080165c4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80165c4:	b590      	push	{r4, r7, lr}
 80165c6:	b08b      	sub	sp, #44	; 0x2c
 80165c8:	af02      	add	r7, sp, #8
 80165ca:	6078      	str	r0, [r7, #4]
 80165cc:	460b      	mov	r3, r1
 80165ce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80165d0:	2300      	movs	r3, #0
 80165d2:	61fb      	str	r3, [r7, #28]
 80165d4:	2300      	movs	r3, #0
 80165d6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80165d8:	2300      	movs	r3, #0
 80165da:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d106      	bne.n	80165f0 <tcp_split_unsent_seg+0x2c>
 80165e2:	4b95      	ldr	r3, [pc, #596]	; (8016838 <tcp_split_unsent_seg+0x274>)
 80165e4:	f240 324b 	movw	r2, #843	; 0x34b
 80165e8:	4994      	ldr	r1, [pc, #592]	; (801683c <tcp_split_unsent_seg+0x278>)
 80165ea:	4895      	ldr	r0, [pc, #596]	; (8016840 <tcp_split_unsent_seg+0x27c>)
 80165ec:	f004 fda0 	bl	801b130 <iprintf>

  useg = pcb->unsent;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165f4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80165f6:	697b      	ldr	r3, [r7, #20]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d102      	bne.n	8016602 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80165fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016600:	e116      	b.n	8016830 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016602:	887b      	ldrh	r3, [r7, #2]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d109      	bne.n	801661c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016608:	4b8b      	ldr	r3, [pc, #556]	; (8016838 <tcp_split_unsent_seg+0x274>)
 801660a:	f240 3253 	movw	r2, #851	; 0x353
 801660e:	498d      	ldr	r1, [pc, #564]	; (8016844 <tcp_split_unsent_seg+0x280>)
 8016610:	488b      	ldr	r0, [pc, #556]	; (8016840 <tcp_split_unsent_seg+0x27c>)
 8016612:	f004 fd8d 	bl	801b130 <iprintf>
    return ERR_VAL;
 8016616:	f06f 0305 	mvn.w	r3, #5
 801661a:	e109      	b.n	8016830 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	891b      	ldrh	r3, [r3, #8]
 8016620:	887a      	ldrh	r2, [r7, #2]
 8016622:	429a      	cmp	r2, r3
 8016624:	d301      	bcc.n	801662a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016626:	2300      	movs	r3, #0
 8016628:	e102      	b.n	8016830 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801662e:	887a      	ldrh	r2, [r7, #2]
 8016630:	429a      	cmp	r2, r3
 8016632:	d906      	bls.n	8016642 <tcp_split_unsent_seg+0x7e>
 8016634:	4b80      	ldr	r3, [pc, #512]	; (8016838 <tcp_split_unsent_seg+0x274>)
 8016636:	f240 325b 	movw	r2, #859	; 0x35b
 801663a:	4983      	ldr	r1, [pc, #524]	; (8016848 <tcp_split_unsent_seg+0x284>)
 801663c:	4880      	ldr	r0, [pc, #512]	; (8016840 <tcp_split_unsent_seg+0x27c>)
 801663e:	f004 fd77 	bl	801b130 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	891b      	ldrh	r3, [r3, #8]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d106      	bne.n	8016658 <tcp_split_unsent_seg+0x94>
 801664a:	4b7b      	ldr	r3, [pc, #492]	; (8016838 <tcp_split_unsent_seg+0x274>)
 801664c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016650:	497e      	ldr	r1, [pc, #504]	; (801684c <tcp_split_unsent_seg+0x288>)
 8016652:	487b      	ldr	r0, [pc, #492]	; (8016840 <tcp_split_unsent_seg+0x27c>)
 8016654:	f004 fd6c 	bl	801b130 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	7a9b      	ldrb	r3, [r3, #10]
 801665c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801665e:	7bfb      	ldrb	r3, [r7, #15]
 8016660:	009b      	lsls	r3, r3, #2
 8016662:	b2db      	uxtb	r3, r3
 8016664:	f003 0304 	and.w	r3, r3, #4
 8016668:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	891a      	ldrh	r2, [r3, #8]
 801666e:	887b      	ldrh	r3, [r7, #2]
 8016670:	1ad3      	subs	r3, r2, r3
 8016672:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016674:	7bbb      	ldrb	r3, [r7, #14]
 8016676:	b29a      	uxth	r2, r3
 8016678:	89bb      	ldrh	r3, [r7, #12]
 801667a:	4413      	add	r3, r2
 801667c:	b29b      	uxth	r3, r3
 801667e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016682:	4619      	mov	r1, r3
 8016684:	2036      	movs	r0, #54	; 0x36
 8016686:	f7fa fbcf 	bl	8010e28 <pbuf_alloc>
 801668a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	2b00      	cmp	r3, #0
 8016690:	f000 80b7 	beq.w	8016802 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	685b      	ldr	r3, [r3, #4]
 8016698:	891a      	ldrh	r2, [r3, #8]
 801669a:	697b      	ldr	r3, [r7, #20]
 801669c:	891b      	ldrh	r3, [r3, #8]
 801669e:	1ad3      	subs	r3, r2, r3
 80166a0:	b29a      	uxth	r2, r3
 80166a2:	887b      	ldrh	r3, [r7, #2]
 80166a4:	4413      	add	r3, r2
 80166a6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80166a8:	697b      	ldr	r3, [r7, #20]
 80166aa:	6858      	ldr	r0, [r3, #4]
 80166ac:	693b      	ldr	r3, [r7, #16]
 80166ae:	685a      	ldr	r2, [r3, #4]
 80166b0:	7bbb      	ldrb	r3, [r7, #14]
 80166b2:	18d1      	adds	r1, r2, r3
 80166b4:	897b      	ldrh	r3, [r7, #10]
 80166b6:	89ba      	ldrh	r2, [r7, #12]
 80166b8:	f7fb f884 	bl	80117c4 <pbuf_copy_partial>
 80166bc:	4603      	mov	r3, r0
 80166be:	461a      	mov	r2, r3
 80166c0:	89bb      	ldrh	r3, [r7, #12]
 80166c2:	4293      	cmp	r3, r2
 80166c4:	f040 809f 	bne.w	8016806 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	68db      	ldr	r3, [r3, #12]
 80166cc:	899b      	ldrh	r3, [r3, #12]
 80166ce:	b29b      	uxth	r3, r3
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7f9 fa89 	bl	800fbe8 <lwip_htons>
 80166d6:	4603      	mov	r3, r0
 80166d8:	b2db      	uxtb	r3, r3
 80166da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80166de:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80166e0:	2300      	movs	r3, #0
 80166e2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80166e4:	7efb      	ldrb	r3, [r7, #27]
 80166e6:	f003 0308 	and.w	r3, r3, #8
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d007      	beq.n	80166fe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80166ee:	7efb      	ldrb	r3, [r7, #27]
 80166f0:	f023 0308 	bic.w	r3, r3, #8
 80166f4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80166f6:	7ebb      	ldrb	r3, [r7, #26]
 80166f8:	f043 0308 	orr.w	r3, r3, #8
 80166fc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80166fe:	7efb      	ldrb	r3, [r7, #27]
 8016700:	f003 0301 	and.w	r3, r3, #1
 8016704:	2b00      	cmp	r3, #0
 8016706:	d007      	beq.n	8016718 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016708:	7efb      	ldrb	r3, [r7, #27]
 801670a:	f023 0301 	bic.w	r3, r3, #1
 801670e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016710:	7ebb      	ldrb	r3, [r7, #26]
 8016712:	f043 0301 	orr.w	r3, r3, #1
 8016716:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	68db      	ldr	r3, [r3, #12]
 801671c:	685b      	ldr	r3, [r3, #4]
 801671e:	4618      	mov	r0, r3
 8016720:	f7f9 fa77 	bl	800fc12 <lwip_htonl>
 8016724:	4602      	mov	r2, r0
 8016726:	887b      	ldrh	r3, [r7, #2]
 8016728:	18d1      	adds	r1, r2, r3
 801672a:	7eba      	ldrb	r2, [r7, #26]
 801672c:	7bfb      	ldrb	r3, [r7, #15]
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	460b      	mov	r3, r1
 8016732:	6939      	ldr	r1, [r7, #16]
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f7ff fa4f 	bl	8015bd8 <tcp_create_segment>
 801673a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801673c:	69fb      	ldr	r3, [r7, #28]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d063      	beq.n	801680a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016742:	697b      	ldr	r3, [r7, #20]
 8016744:	685b      	ldr	r3, [r3, #4]
 8016746:	4618      	mov	r0, r3
 8016748:	f7fa feda 	bl	8011500 <pbuf_clen>
 801674c:	4603      	mov	r3, r0
 801674e:	461a      	mov	r2, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016756:	1a9b      	subs	r3, r3, r2
 8016758:	b29a      	uxth	r2, r3
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016760:	697b      	ldr	r3, [r7, #20]
 8016762:	6858      	ldr	r0, [r3, #4]
 8016764:	697b      	ldr	r3, [r7, #20]
 8016766:	685b      	ldr	r3, [r3, #4]
 8016768:	891a      	ldrh	r2, [r3, #8]
 801676a:	89bb      	ldrh	r3, [r7, #12]
 801676c:	1ad3      	subs	r3, r2, r3
 801676e:	b29b      	uxth	r3, r3
 8016770:	4619      	mov	r1, r3
 8016772:	f7fa fcb9 	bl	80110e8 <pbuf_realloc>
  useg->len -= remainder;
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	891a      	ldrh	r2, [r3, #8]
 801677a:	89bb      	ldrh	r3, [r7, #12]
 801677c:	1ad3      	subs	r3, r2, r3
 801677e:	b29a      	uxth	r2, r3
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016784:	697b      	ldr	r3, [r7, #20]
 8016786:	68db      	ldr	r3, [r3, #12]
 8016788:	899b      	ldrh	r3, [r3, #12]
 801678a:	b29c      	uxth	r4, r3
 801678c:	7efb      	ldrb	r3, [r7, #27]
 801678e:	b29b      	uxth	r3, r3
 8016790:	4618      	mov	r0, r3
 8016792:	f7f9 fa29 	bl	800fbe8 <lwip_htons>
 8016796:	4603      	mov	r3, r0
 8016798:	461a      	mov	r2, r3
 801679a:	697b      	ldr	r3, [r7, #20]
 801679c:	68db      	ldr	r3, [r3, #12]
 801679e:	4322      	orrs	r2, r4
 80167a0:	b292      	uxth	r2, r2
 80167a2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	4618      	mov	r0, r3
 80167aa:	f7fa fea9 	bl	8011500 <pbuf_clen>
 80167ae:	4603      	mov	r3, r0
 80167b0:	461a      	mov	r2, r3
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80167b8:	4413      	add	r3, r2
 80167ba:	b29a      	uxth	r2, r3
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	685b      	ldr	r3, [r3, #4]
 80167c6:	4618      	mov	r0, r3
 80167c8:	f7fa fe9a 	bl	8011500 <pbuf_clen>
 80167cc:	4603      	mov	r3, r0
 80167ce:	461a      	mov	r2, r3
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80167d6:	4413      	add	r3, r2
 80167d8:	b29a      	uxth	r2, r3
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	681a      	ldr	r2, [r3, #0]
 80167e4:	69fb      	ldr	r3, [r7, #28]
 80167e6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80167e8:	697b      	ldr	r3, [r7, #20]
 80167ea:	69fa      	ldr	r2, [r7, #28]
 80167ec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d103      	bne.n	80167fe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	2200      	movs	r2, #0
 80167fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80167fe:	2300      	movs	r3, #0
 8016800:	e016      	b.n	8016830 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016802:	bf00      	nop
 8016804:	e002      	b.n	801680c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016806:	bf00      	nop
 8016808:	e000      	b.n	801680c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801680a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801680c:	69fb      	ldr	r3, [r7, #28]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d006      	beq.n	8016820 <tcp_split_unsent_seg+0x25c>
 8016812:	4b09      	ldr	r3, [pc, #36]	; (8016838 <tcp_split_unsent_seg+0x274>)
 8016814:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016818:	490d      	ldr	r1, [pc, #52]	; (8016850 <tcp_split_unsent_seg+0x28c>)
 801681a:	4809      	ldr	r0, [pc, #36]	; (8016840 <tcp_split_unsent_seg+0x27c>)
 801681c:	f004 fc88 	bl	801b130 <iprintf>
  if (p != NULL) {
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d002      	beq.n	801682c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016826:	6938      	ldr	r0, [r7, #16]
 8016828:	f7fa fde2 	bl	80113f0 <pbuf_free>
  }

  return ERR_MEM;
 801682c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016830:	4618      	mov	r0, r3
 8016832:	3724      	adds	r7, #36	; 0x24
 8016834:	46bd      	mov	sp, r7
 8016836:	bd90      	pop	{r4, r7, pc}
 8016838:	0801f2c4 	.word	0x0801f2c4
 801683c:	0801f658 	.word	0x0801f658
 8016840:	0801f318 	.word	0x0801f318
 8016844:	0801f67c 	.word	0x0801f67c
 8016848:	0801f6a0 	.word	0x0801f6a0
 801684c:	0801f6b0 	.word	0x0801f6b0
 8016850:	0801f6c0 	.word	0x0801f6c0

08016854 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016854:	b590      	push	{r4, r7, lr}
 8016856:	b085      	sub	sp, #20
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d106      	bne.n	8016870 <tcp_send_fin+0x1c>
 8016862:	4b21      	ldr	r3, [pc, #132]	; (80168e8 <tcp_send_fin+0x94>)
 8016864:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016868:	4920      	ldr	r1, [pc, #128]	; (80168ec <tcp_send_fin+0x98>)
 801686a:	4821      	ldr	r0, [pc, #132]	; (80168f0 <tcp_send_fin+0x9c>)
 801686c:	f004 fc60 	bl	801b130 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016874:	2b00      	cmp	r3, #0
 8016876:	d02e      	beq.n	80168d6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801687c:	60fb      	str	r3, [r7, #12]
 801687e:	e002      	b.n	8016886 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d1f8      	bne.n	8016880 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	68db      	ldr	r3, [r3, #12]
 8016892:	899b      	ldrh	r3, [r3, #12]
 8016894:	b29b      	uxth	r3, r3
 8016896:	4618      	mov	r0, r3
 8016898:	f7f9 f9a6 	bl	800fbe8 <lwip_htons>
 801689c:	4603      	mov	r3, r0
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	f003 0307 	and.w	r3, r3, #7
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d116      	bne.n	80168d6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	68db      	ldr	r3, [r3, #12]
 80168ac:	899b      	ldrh	r3, [r3, #12]
 80168ae:	b29c      	uxth	r4, r3
 80168b0:	2001      	movs	r0, #1
 80168b2:	f7f9 f999 	bl	800fbe8 <lwip_htons>
 80168b6:	4603      	mov	r3, r0
 80168b8:	461a      	mov	r2, r3
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	68db      	ldr	r3, [r3, #12]
 80168be:	4322      	orrs	r2, r4
 80168c0:	b292      	uxth	r2, r2
 80168c2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	8b5b      	ldrh	r3, [r3, #26]
 80168c8:	f043 0320 	orr.w	r3, r3, #32
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80168d2:	2300      	movs	r3, #0
 80168d4:	e004      	b.n	80168e0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80168d6:	2101      	movs	r1, #1
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f000 f80b 	bl	80168f4 <tcp_enqueue_flags>
 80168de:	4603      	mov	r3, r0
}
 80168e0:	4618      	mov	r0, r3
 80168e2:	3714      	adds	r7, #20
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd90      	pop	{r4, r7, pc}
 80168e8:	0801f2c4 	.word	0x0801f2c4
 80168ec:	0801f6cc 	.word	0x0801f6cc
 80168f0:	0801f318 	.word	0x0801f318

080168f4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b08a      	sub	sp, #40	; 0x28
 80168f8:	af02      	add	r7, sp, #8
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016900:	2300      	movs	r3, #0
 8016902:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016904:	2300      	movs	r3, #0
 8016906:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016908:	78fb      	ldrb	r3, [r7, #3]
 801690a:	f003 0303 	and.w	r3, r3, #3
 801690e:	2b00      	cmp	r3, #0
 8016910:	d106      	bne.n	8016920 <tcp_enqueue_flags+0x2c>
 8016912:	4b67      	ldr	r3, [pc, #412]	; (8016ab0 <tcp_enqueue_flags+0x1bc>)
 8016914:	f240 4211 	movw	r2, #1041	; 0x411
 8016918:	4966      	ldr	r1, [pc, #408]	; (8016ab4 <tcp_enqueue_flags+0x1c0>)
 801691a:	4867      	ldr	r0, [pc, #412]	; (8016ab8 <tcp_enqueue_flags+0x1c4>)
 801691c:	f004 fc08 	bl	801b130 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d106      	bne.n	8016934 <tcp_enqueue_flags+0x40>
 8016926:	4b62      	ldr	r3, [pc, #392]	; (8016ab0 <tcp_enqueue_flags+0x1bc>)
 8016928:	f240 4213 	movw	r2, #1043	; 0x413
 801692c:	4963      	ldr	r1, [pc, #396]	; (8016abc <tcp_enqueue_flags+0x1c8>)
 801692e:	4862      	ldr	r0, [pc, #392]	; (8016ab8 <tcp_enqueue_flags+0x1c4>)
 8016930:	f004 fbfe 	bl	801b130 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016934:	78fb      	ldrb	r3, [r7, #3]
 8016936:	f003 0302 	and.w	r3, r3, #2
 801693a:	2b00      	cmp	r3, #0
 801693c:	d001      	beq.n	8016942 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801693e:	2301      	movs	r3, #1
 8016940:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016942:	7ffb      	ldrb	r3, [r7, #31]
 8016944:	009b      	lsls	r3, r3, #2
 8016946:	b2db      	uxtb	r3, r3
 8016948:	f003 0304 	and.w	r3, r3, #4
 801694c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801694e:	7dfb      	ldrb	r3, [r7, #23]
 8016950:	b29b      	uxth	r3, r3
 8016952:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016956:	4619      	mov	r1, r3
 8016958:	2036      	movs	r0, #54	; 0x36
 801695a:	f7fa fa65 	bl	8010e28 <pbuf_alloc>
 801695e:	6138      	str	r0, [r7, #16]
 8016960:	693b      	ldr	r3, [r7, #16]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d109      	bne.n	801697a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	8b5b      	ldrh	r3, [r3, #26]
 801696a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801696e:	b29a      	uxth	r2, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016974:	f04f 33ff 	mov.w	r3, #4294967295
 8016978:	e095      	b.n	8016aa6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801697a:	693b      	ldr	r3, [r7, #16]
 801697c:	895a      	ldrh	r2, [r3, #10]
 801697e:	7dfb      	ldrb	r3, [r7, #23]
 8016980:	b29b      	uxth	r3, r3
 8016982:	429a      	cmp	r2, r3
 8016984:	d206      	bcs.n	8016994 <tcp_enqueue_flags+0xa0>
 8016986:	4b4a      	ldr	r3, [pc, #296]	; (8016ab0 <tcp_enqueue_flags+0x1bc>)
 8016988:	f240 4239 	movw	r2, #1081	; 0x439
 801698c:	494c      	ldr	r1, [pc, #304]	; (8016ac0 <tcp_enqueue_flags+0x1cc>)
 801698e:	484a      	ldr	r0, [pc, #296]	; (8016ab8 <tcp_enqueue_flags+0x1c4>)
 8016990:	f004 fbce 	bl	801b130 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016998:	78fa      	ldrb	r2, [r7, #3]
 801699a:	7ffb      	ldrb	r3, [r7, #31]
 801699c:	9300      	str	r3, [sp, #0]
 801699e:	460b      	mov	r3, r1
 80169a0:	6939      	ldr	r1, [r7, #16]
 80169a2:	6878      	ldr	r0, [r7, #4]
 80169a4:	f7ff f918 	bl	8015bd8 <tcp_create_segment>
 80169a8:	60f8      	str	r0, [r7, #12]
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d109      	bne.n	80169c4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	8b5b      	ldrh	r3, [r3, #26]
 80169b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169b8:	b29a      	uxth	r2, r3
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80169be:	f04f 33ff 	mov.w	r3, #4294967295
 80169c2:	e070      	b.n	8016aa6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	f003 0303 	and.w	r3, r3, #3
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d006      	beq.n	80169de <tcp_enqueue_flags+0xea>
 80169d0:	4b37      	ldr	r3, [pc, #220]	; (8016ab0 <tcp_enqueue_flags+0x1bc>)
 80169d2:	f240 4242 	movw	r2, #1090	; 0x442
 80169d6:	493b      	ldr	r1, [pc, #236]	; (8016ac4 <tcp_enqueue_flags+0x1d0>)
 80169d8:	4837      	ldr	r0, [pc, #220]	; (8016ab8 <tcp_enqueue_flags+0x1c4>)
 80169da:	f004 fba9 	bl	801b130 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	891b      	ldrh	r3, [r3, #8]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d006      	beq.n	80169f4 <tcp_enqueue_flags+0x100>
 80169e6:	4b32      	ldr	r3, [pc, #200]	; (8016ab0 <tcp_enqueue_flags+0x1bc>)
 80169e8:	f240 4243 	movw	r2, #1091	; 0x443
 80169ec:	4936      	ldr	r1, [pc, #216]	; (8016ac8 <tcp_enqueue_flags+0x1d4>)
 80169ee:	4832      	ldr	r0, [pc, #200]	; (8016ab8 <tcp_enqueue_flags+0x1c4>)
 80169f0:	f004 fb9e 	bl	801b130 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d103      	bne.n	8016a04 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	68fa      	ldr	r2, [r7, #12]
 8016a00:	66da      	str	r2, [r3, #108]	; 0x6c
 8016a02:	e00d      	b.n	8016a20 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a08:	61bb      	str	r3, [r7, #24]
 8016a0a:	e002      	b.n	8016a12 <tcp_enqueue_flags+0x11e>
 8016a0c:	69bb      	ldr	r3, [r7, #24]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	61bb      	str	r3, [r7, #24]
 8016a12:	69bb      	ldr	r3, [r7, #24]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d1f8      	bne.n	8016a0c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016a1a:	69bb      	ldr	r3, [r7, #24]
 8016a1c:	68fa      	ldr	r2, [r7, #12]
 8016a1e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	2200      	movs	r2, #0
 8016a24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016a28:	78fb      	ldrb	r3, [r7, #3]
 8016a2a:	f003 0302 	and.w	r3, r3, #2
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d104      	bne.n	8016a3c <tcp_enqueue_flags+0x148>
 8016a32:	78fb      	ldrb	r3, [r7, #3]
 8016a34:	f003 0301 	and.w	r3, r3, #1
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d004      	beq.n	8016a46 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a40:	1c5a      	adds	r2, r3, #1
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016a46:	78fb      	ldrb	r3, [r7, #3]
 8016a48:	f003 0301 	and.w	r3, r3, #1
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d006      	beq.n	8016a5e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	8b5b      	ldrh	r3, [r3, #26]
 8016a54:	f043 0320 	orr.w	r3, r3, #32
 8016a58:	b29a      	uxth	r2, r3
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7fa fd4c 	bl	8011500 <pbuf_clen>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	461a      	mov	r2, r3
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a72:	4413      	add	r3, r2
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d00e      	beq.n	8016aa4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d10a      	bne.n	8016aa4 <tcp_enqueue_flags+0x1b0>
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d106      	bne.n	8016aa4 <tcp_enqueue_flags+0x1b0>
 8016a96:	4b06      	ldr	r3, [pc, #24]	; (8016ab0 <tcp_enqueue_flags+0x1bc>)
 8016a98:	f240 4265 	movw	r2, #1125	; 0x465
 8016a9c:	490b      	ldr	r1, [pc, #44]	; (8016acc <tcp_enqueue_flags+0x1d8>)
 8016a9e:	4806      	ldr	r0, [pc, #24]	; (8016ab8 <tcp_enqueue_flags+0x1c4>)
 8016aa0:	f004 fb46 	bl	801b130 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016aa4:	2300      	movs	r3, #0
}
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	3720      	adds	r7, #32
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
 8016aae:	bf00      	nop
 8016ab0:	0801f2c4 	.word	0x0801f2c4
 8016ab4:	0801f6e8 	.word	0x0801f6e8
 8016ab8:	0801f318 	.word	0x0801f318
 8016abc:	0801f740 	.word	0x0801f740
 8016ac0:	0801f760 	.word	0x0801f760
 8016ac4:	0801f79c 	.word	0x0801f79c
 8016ac8:	0801f7b4 	.word	0x0801f7b4
 8016acc:	0801f7e0 	.word	0x0801f7e0

08016ad0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016ad0:	b5b0      	push	{r4, r5, r7, lr}
 8016ad2:	b08a      	sub	sp, #40	; 0x28
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d106      	bne.n	8016aec <tcp_output+0x1c>
 8016ade:	4b8a      	ldr	r3, [pc, #552]	; (8016d08 <tcp_output+0x238>)
 8016ae0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016ae4:	4989      	ldr	r1, [pc, #548]	; (8016d0c <tcp_output+0x23c>)
 8016ae6:	488a      	ldr	r0, [pc, #552]	; (8016d10 <tcp_output+0x240>)
 8016ae8:	f004 fb22 	bl	801b130 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	7d1b      	ldrb	r3, [r3, #20]
 8016af0:	2b01      	cmp	r3, #1
 8016af2:	d106      	bne.n	8016b02 <tcp_output+0x32>
 8016af4:	4b84      	ldr	r3, [pc, #528]	; (8016d08 <tcp_output+0x238>)
 8016af6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016afa:	4986      	ldr	r1, [pc, #536]	; (8016d14 <tcp_output+0x244>)
 8016afc:	4884      	ldr	r0, [pc, #528]	; (8016d10 <tcp_output+0x240>)
 8016afe:	f004 fb17 	bl	801b130 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016b02:	4b85      	ldr	r3, [pc, #532]	; (8016d18 <tcp_output+0x248>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	687a      	ldr	r2, [r7, #4]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	d101      	bne.n	8016b10 <tcp_output+0x40>
    return ERR_OK;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	e1ce      	b.n	8016eae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016b1c:	4293      	cmp	r3, r2
 8016b1e:	bf28      	it	cs
 8016b20:	4613      	movcs	r3, r2
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d10b      	bne.n	8016b4a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	8b5b      	ldrh	r3, [r3, #26]
 8016b36:	f003 0302 	and.w	r3, r3, #2
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	f000 81aa 	beq.w	8016e94 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f000 fdcb 	bl	80176dc <tcp_send_empty_ack>
 8016b46:	4603      	mov	r3, r0
 8016b48:	e1b1      	b.n	8016eae <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016b4a:	6879      	ldr	r1, [r7, #4]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	3304      	adds	r3, #4
 8016b50:	461a      	mov	r2, r3
 8016b52:	6878      	ldr	r0, [r7, #4]
 8016b54:	f7ff f824 	bl	8015ba0 <tcp_route>
 8016b58:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016b5a:	697b      	ldr	r3, [r7, #20]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d102      	bne.n	8016b66 <tcp_output+0x96>
    return ERR_RTE;
 8016b60:	f06f 0303 	mvn.w	r3, #3
 8016b64:	e1a3      	b.n	8016eae <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d003      	beq.n	8016b74 <tcp_output+0xa4>
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d111      	bne.n	8016b98 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d002      	beq.n	8016b80 <tcp_output+0xb0>
 8016b7a:	697b      	ldr	r3, [r7, #20]
 8016b7c:	3304      	adds	r3, #4
 8016b7e:	e000      	b.n	8016b82 <tcp_output+0xb2>
 8016b80:	2300      	movs	r3, #0
 8016b82:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d102      	bne.n	8016b90 <tcp_output+0xc0>
      return ERR_RTE;
 8016b8a:	f06f 0303 	mvn.w	r3, #3
 8016b8e:	e18e      	b.n	8016eae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	681a      	ldr	r2, [r3, #0]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b9a:	68db      	ldr	r3, [r3, #12]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7f9 f837 	bl	800fc12 <lwip_htonl>
 8016ba4:	4602      	mov	r2, r0
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016baa:	1ad3      	subs	r3, r2, r3
 8016bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bae:	8912      	ldrh	r2, [r2, #8]
 8016bb0:	4413      	add	r3, r2
 8016bb2:	69ba      	ldr	r2, [r7, #24]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d227      	bcs.n	8016c08 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	69bb      	ldr	r3, [r7, #24]
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	d114      	bne.n	8016bf0 <tcp_output+0x120>
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d110      	bne.n	8016bf0 <tcp_output+0x120>
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d10b      	bne.n	8016bf0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2200      	movs	r2, #0
 8016bdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2201      	movs	r2, #1
 8016be4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2200      	movs	r2, #0
 8016bec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	8b5b      	ldrh	r3, [r3, #26]
 8016bf4:	f003 0302 	and.w	r3, r3, #2
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f000 814d 	beq.w	8016e98 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016bfe:	6878      	ldr	r0, [r7, #4]
 8016c00:	f000 fd6c 	bl	80176dc <tcp_send_empty_ack>
 8016c04:	4603      	mov	r3, r0
 8016c06:	e152      	b.n	8016eae <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c14:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016c16:	6a3b      	ldr	r3, [r7, #32]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	f000 811c 	beq.w	8016e56 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016c1e:	e002      	b.n	8016c26 <tcp_output+0x156>
 8016c20:	6a3b      	ldr	r3, [r7, #32]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	623b      	str	r3, [r7, #32]
 8016c26:	6a3b      	ldr	r3, [r7, #32]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d1f8      	bne.n	8016c20 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016c2e:	e112      	b.n	8016e56 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c32:	68db      	ldr	r3, [r3, #12]
 8016c34:	899b      	ldrh	r3, [r3, #12]
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f7f8 ffd5 	bl	800fbe8 <lwip_htons>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	b2db      	uxtb	r3, r3
 8016c42:	f003 0304 	and.w	r3, r3, #4
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d006      	beq.n	8016c58 <tcp_output+0x188>
 8016c4a:	4b2f      	ldr	r3, [pc, #188]	; (8016d08 <tcp_output+0x238>)
 8016c4c:	f240 5236 	movw	r2, #1334	; 0x536
 8016c50:	4932      	ldr	r1, [pc, #200]	; (8016d1c <tcp_output+0x24c>)
 8016c52:	482f      	ldr	r0, [pc, #188]	; (8016d10 <tcp_output+0x240>)
 8016c54:	f004 fa6c 	bl	801b130 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d01f      	beq.n	8016ca0 <tcp_output+0x1d0>
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	8b5b      	ldrh	r3, [r3, #26]
 8016c64:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d119      	bne.n	8016ca0 <tcp_output+0x1d0>
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d00b      	beq.n	8016c8c <tcp_output+0x1bc>
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d110      	bne.n	8016ca0 <tcp_output+0x1d0>
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c82:	891a      	ldrh	r2, [r3, #8]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	d209      	bcs.n	8016ca0 <tcp_output+0x1d0>
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d004      	beq.n	8016ca0 <tcp_output+0x1d0>
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016c9c:	2b0f      	cmp	r3, #15
 8016c9e:	d901      	bls.n	8016ca4 <tcp_output+0x1d4>
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	e000      	b.n	8016ca6 <tcp_output+0x1d6>
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d106      	bne.n	8016cb8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	8b5b      	ldrh	r3, [r3, #26]
 8016cae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	f000 80e4 	beq.w	8016e80 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	7d1b      	ldrb	r3, [r3, #20]
 8016cbc:	2b02      	cmp	r3, #2
 8016cbe:	d00d      	beq.n	8016cdc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc2:	68db      	ldr	r3, [r3, #12]
 8016cc4:	899b      	ldrh	r3, [r3, #12]
 8016cc6:	b29c      	uxth	r4, r3
 8016cc8:	2010      	movs	r0, #16
 8016cca:	f7f8 ff8d 	bl	800fbe8 <lwip_htons>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd4:	68db      	ldr	r3, [r3, #12]
 8016cd6:	4322      	orrs	r2, r4
 8016cd8:	b292      	uxth	r2, r2
 8016cda:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016cdc:	697a      	ldr	r2, [r7, #20]
 8016cde:	6879      	ldr	r1, [r7, #4]
 8016ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ce2:	f000 f909 	bl	8016ef8 <tcp_output_segment>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d016      	beq.n	8016d20 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	8b5b      	ldrh	r3, [r3, #26]
 8016cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cfa:	b29a      	uxth	r2, r3
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	835a      	strh	r2, [r3, #26]
      return err;
 8016d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d04:	e0d3      	b.n	8016eae <tcp_output+0x3de>
 8016d06:	bf00      	nop
 8016d08:	0801f2c4 	.word	0x0801f2c4
 8016d0c:	0801f808 	.word	0x0801f808
 8016d10:	0801f318 	.word	0x0801f318
 8016d14:	0801f820 	.word	0x0801f820
 8016d18:	200071e8 	.word	0x200071e8
 8016d1c:	0801f848 	.word	0x0801f848
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d22:	681a      	ldr	r2, [r3, #0]
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	7d1b      	ldrb	r3, [r3, #20]
 8016d2c:	2b02      	cmp	r3, #2
 8016d2e:	d006      	beq.n	8016d3e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	8b5b      	ldrh	r3, [r3, #26]
 8016d34:	f023 0303 	bic.w	r3, r3, #3
 8016d38:	b29a      	uxth	r2, r3
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d40:	68db      	ldr	r3, [r3, #12]
 8016d42:	685b      	ldr	r3, [r3, #4]
 8016d44:	4618      	mov	r0, r3
 8016d46:	f7f8 ff64 	bl	800fc12 <lwip_htonl>
 8016d4a:	4604      	mov	r4, r0
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4e:	891b      	ldrh	r3, [r3, #8]
 8016d50:	461d      	mov	r5, r3
 8016d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d54:	68db      	ldr	r3, [r3, #12]
 8016d56:	899b      	ldrh	r3, [r3, #12]
 8016d58:	b29b      	uxth	r3, r3
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7f8 ff44 	bl	800fbe8 <lwip_htons>
 8016d60:	4603      	mov	r3, r0
 8016d62:	b2db      	uxtb	r3, r3
 8016d64:	f003 0303 	and.w	r3, r3, #3
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d001      	beq.n	8016d70 <tcp_output+0x2a0>
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	e000      	b.n	8016d72 <tcp_output+0x2a2>
 8016d70:	2300      	movs	r3, #0
 8016d72:	442b      	add	r3, r5
 8016d74:	4423      	add	r3, r4
 8016d76:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	1ad3      	subs	r3, r2, r3
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	da02      	bge.n	8016d8a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	68ba      	ldr	r2, [r7, #8]
 8016d88:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8c:	891b      	ldrh	r3, [r3, #8]
 8016d8e:	461c      	mov	r4, r3
 8016d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	899b      	ldrh	r3, [r3, #12]
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7f8 ff25 	bl	800fbe8 <lwip_htons>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	b2db      	uxtb	r3, r3
 8016da2:	f003 0303 	and.w	r3, r3, #3
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d001      	beq.n	8016dae <tcp_output+0x2de>
 8016daa:	2301      	movs	r3, #1
 8016dac:	e000      	b.n	8016db0 <tcp_output+0x2e0>
 8016dae:	2300      	movs	r3, #0
 8016db0:	4423      	add	r3, r4
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d049      	beq.n	8016e4a <tcp_output+0x37a>
      seg->next = NULL;
 8016db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db8:	2200      	movs	r2, #0
 8016dba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d105      	bne.n	8016dd0 <tcp_output+0x300>
        pcb->unacked = seg;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016dc8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dcc:	623b      	str	r3, [r7, #32]
 8016dce:	e03f      	b.n	8016e50 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dd2:	68db      	ldr	r3, [r3, #12]
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7f8 ff1b 	bl	800fc12 <lwip_htonl>
 8016ddc:	4604      	mov	r4, r0
 8016dde:	6a3b      	ldr	r3, [r7, #32]
 8016de0:	68db      	ldr	r3, [r3, #12]
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7f8 ff14 	bl	800fc12 <lwip_htonl>
 8016dea:	4603      	mov	r3, r0
 8016dec:	1ae3      	subs	r3, r4, r3
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	da24      	bge.n	8016e3c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	3370      	adds	r3, #112	; 0x70
 8016df6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016df8:	e002      	b.n	8016e00 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016dfa:	69fb      	ldr	r3, [r7, #28]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016e00:	69fb      	ldr	r3, [r7, #28]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d011      	beq.n	8016e2c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016e08:	69fb      	ldr	r3, [r7, #28]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	68db      	ldr	r3, [r3, #12]
 8016e0e:	685b      	ldr	r3, [r3, #4]
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7f8 fefe 	bl	800fc12 <lwip_htonl>
 8016e16:	4604      	mov	r4, r0
 8016e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1a:	68db      	ldr	r3, [r3, #12]
 8016e1c:	685b      	ldr	r3, [r3, #4]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7f8 fef7 	bl	800fc12 <lwip_htonl>
 8016e24:	4603      	mov	r3, r0
 8016e26:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	dbe6      	blt.n	8016dfa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016e2c:	69fb      	ldr	r3, [r7, #28]
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e32:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016e34:	69fb      	ldr	r3, [r7, #28]
 8016e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e38:	601a      	str	r2, [r3, #0]
 8016e3a:	e009      	b.n	8016e50 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016e3c:	6a3b      	ldr	r3, [r7, #32]
 8016e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e40:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016e42:	6a3b      	ldr	r3, [r7, #32]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	623b      	str	r3, [r7, #32]
 8016e48:	e002      	b.n	8016e50 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e4c:	f7fb ff37 	bl	8012cbe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e54:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d012      	beq.n	8016e82 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e5e:	68db      	ldr	r3, [r3, #12]
 8016e60:	685b      	ldr	r3, [r3, #4]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7f8 fed5 	bl	800fc12 <lwip_htonl>
 8016e68:	4602      	mov	r2, r0
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e72:	8912      	ldrh	r2, [r2, #8]
 8016e74:	4413      	add	r3, r2
  while (seg != NULL &&
 8016e76:	69ba      	ldr	r2, [r7, #24]
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	f4bf aed9 	bcs.w	8016c30 <tcp_output+0x160>
 8016e7e:	e000      	b.n	8016e82 <tcp_output+0x3b2>
      break;
 8016e80:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d108      	bne.n	8016e9c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016e92:	e004      	b.n	8016e9e <tcp_output+0x3ce>
    goto output_done;
 8016e94:	bf00      	nop
 8016e96:	e002      	b.n	8016e9e <tcp_output+0x3ce>
    goto output_done;
 8016e98:	bf00      	nop
 8016e9a:	e000      	b.n	8016e9e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016e9c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	8b5b      	ldrh	r3, [r3, #26]
 8016ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016ea6:	b29a      	uxth	r2, r3
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016eac:	2300      	movs	r3, #0
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3728      	adds	r7, #40	; 0x28
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8016eb6:	bf00      	nop

08016eb8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d106      	bne.n	8016ed4 <tcp_output_segment_busy+0x1c>
 8016ec6:	4b09      	ldr	r3, [pc, #36]	; (8016eec <tcp_output_segment_busy+0x34>)
 8016ec8:	f240 529a 	movw	r2, #1434	; 0x59a
 8016ecc:	4908      	ldr	r1, [pc, #32]	; (8016ef0 <tcp_output_segment_busy+0x38>)
 8016ece:	4809      	ldr	r0, [pc, #36]	; (8016ef4 <tcp_output_segment_busy+0x3c>)
 8016ed0:	f004 f92e 	bl	801b130 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	7b9b      	ldrb	r3, [r3, #14]
 8016eda:	2b01      	cmp	r3, #1
 8016edc:	d001      	beq.n	8016ee2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e000      	b.n	8016ee4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016ee2:	2300      	movs	r3, #0
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3708      	adds	r7, #8
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}
 8016eec:	0801f2c4 	.word	0x0801f2c4
 8016ef0:	0801f860 	.word	0x0801f860
 8016ef4:	0801f318 	.word	0x0801f318

08016ef8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016ef8:	b5b0      	push	{r4, r5, r7, lr}
 8016efa:	b08c      	sub	sp, #48	; 0x30
 8016efc:	af04      	add	r7, sp, #16
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	60b9      	str	r1, [r7, #8]
 8016f02:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d106      	bne.n	8016f18 <tcp_output_segment+0x20>
 8016f0a:	4b64      	ldr	r3, [pc, #400]	; (801709c <tcp_output_segment+0x1a4>)
 8016f0c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016f10:	4963      	ldr	r1, [pc, #396]	; (80170a0 <tcp_output_segment+0x1a8>)
 8016f12:	4864      	ldr	r0, [pc, #400]	; (80170a4 <tcp_output_segment+0x1ac>)
 8016f14:	f004 f90c 	bl	801b130 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d106      	bne.n	8016f2c <tcp_output_segment+0x34>
 8016f1e:	4b5f      	ldr	r3, [pc, #380]	; (801709c <tcp_output_segment+0x1a4>)
 8016f20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016f24:	4960      	ldr	r1, [pc, #384]	; (80170a8 <tcp_output_segment+0x1b0>)
 8016f26:	485f      	ldr	r0, [pc, #380]	; (80170a4 <tcp_output_segment+0x1ac>)
 8016f28:	f004 f902 	bl	801b130 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d106      	bne.n	8016f40 <tcp_output_segment+0x48>
 8016f32:	4b5a      	ldr	r3, [pc, #360]	; (801709c <tcp_output_segment+0x1a4>)
 8016f34:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016f38:	495c      	ldr	r1, [pc, #368]	; (80170ac <tcp_output_segment+0x1b4>)
 8016f3a:	485a      	ldr	r0, [pc, #360]	; (80170a4 <tcp_output_segment+0x1ac>)
 8016f3c:	f004 f8f8 	bl	801b130 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016f40:	68f8      	ldr	r0, [r7, #12]
 8016f42:	f7ff ffb9 	bl	8016eb8 <tcp_output_segment_busy>
 8016f46:	4603      	mov	r3, r0
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d001      	beq.n	8016f50 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	e0a1      	b.n	8017094 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	68dc      	ldr	r4, [r3, #12]
 8016f58:	4610      	mov	r0, r2
 8016f5a:	f7f8 fe5a 	bl	800fc12 <lwip_htonl>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016f62:	68bb      	ldr	r3, [r7, #8]
 8016f64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	68dc      	ldr	r4, [r3, #12]
 8016f6a:	4610      	mov	r0, r2
 8016f6c:	f7f8 fe3c 	bl	800fbe8 <lwip_htons>
 8016f70:	4603      	mov	r3, r0
 8016f72:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016f74:	68bb      	ldr	r3, [r7, #8]
 8016f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f78:	68ba      	ldr	r2, [r7, #8]
 8016f7a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016f7c:	441a      	add	r2, r3
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	68db      	ldr	r3, [r3, #12]
 8016f86:	3314      	adds	r3, #20
 8016f88:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	7a9b      	ldrb	r3, [r3, #10]
 8016f8e:	f003 0301 	and.w	r3, r3, #1
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d015      	beq.n	8016fc2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	3304      	adds	r3, #4
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	6879      	ldr	r1, [r7, #4]
 8016f9e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8016fa2:	f7fc fa33 	bl	801340c <tcp_eff_send_mss_netif>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016faa:	8b7b      	ldrh	r3, [r7, #26]
 8016fac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7f8 fe2e 	bl	800fc12 <lwip_htonl>
 8016fb6:	4602      	mov	r2, r0
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016fbc:	69fb      	ldr	r3, [r7, #28]
 8016fbe:	3304      	adds	r3, #4
 8016fc0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	da02      	bge.n	8016fd2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	2200      	movs	r2, #0
 8016fd0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d10c      	bne.n	8016ff4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016fda:	4b35      	ldr	r3, [pc, #212]	; (80170b0 <tcp_output_segment+0x1b8>)
 8016fdc:	681a      	ldr	r2, [r3, #0]
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	68db      	ldr	r3, [r3, #12]
 8016fe6:	685b      	ldr	r3, [r3, #4]
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7f8 fe12 	bl	800fc12 <lwip_htonl>
 8016fee:	4602      	mov	r2, r0
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	68da      	ldr	r2, [r3, #12]
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	685b      	ldr	r3, [r3, #4]
 8016ffc:	685b      	ldr	r3, [r3, #4]
 8016ffe:	1ad3      	subs	r3, r2, r3
 8017000:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	685b      	ldr	r3, [r3, #4]
 8017006:	8959      	ldrh	r1, [r3, #10]
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	685b      	ldr	r3, [r3, #4]
 801700c:	8b3a      	ldrh	r2, [r7, #24]
 801700e:	1a8a      	subs	r2, r1, r2
 8017010:	b292      	uxth	r2, r2
 8017012:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	8919      	ldrh	r1, [r3, #8]
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	685b      	ldr	r3, [r3, #4]
 801701e:	8b3a      	ldrh	r2, [r7, #24]
 8017020:	1a8a      	subs	r2, r1, r2
 8017022:	b292      	uxth	r2, r2
 8017024:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	685b      	ldr	r3, [r3, #4]
 801702a:	68fa      	ldr	r2, [r7, #12]
 801702c:	68d2      	ldr	r2, [r2, #12]
 801702e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	68db      	ldr	r3, [r3, #12]
 8017034:	2200      	movs	r2, #0
 8017036:	741a      	strb	r2, [r3, #16]
 8017038:	2200      	movs	r2, #0
 801703a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	68da      	ldr	r2, [r3, #12]
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	7a9b      	ldrb	r3, [r3, #10]
 8017044:	f003 0301 	and.w	r3, r3, #1
 8017048:	2b00      	cmp	r3, #0
 801704a:	d001      	beq.n	8017050 <tcp_output_segment+0x158>
 801704c:	2318      	movs	r3, #24
 801704e:	e000      	b.n	8017052 <tcp_output_segment+0x15a>
 8017050:	2314      	movs	r3, #20
 8017052:	4413      	add	r3, r2
 8017054:	69fa      	ldr	r2, [r7, #28]
 8017056:	429a      	cmp	r2, r3
 8017058:	d006      	beq.n	8017068 <tcp_output_segment+0x170>
 801705a:	4b10      	ldr	r3, [pc, #64]	; (801709c <tcp_output_segment+0x1a4>)
 801705c:	f240 621c 	movw	r2, #1564	; 0x61c
 8017060:	4914      	ldr	r1, [pc, #80]	; (80170b4 <tcp_output_segment+0x1bc>)
 8017062:	4810      	ldr	r0, [pc, #64]	; (80170a4 <tcp_output_segment+0x1ac>)
 8017064:	f004 f864 	bl	801b130 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	6858      	ldr	r0, [r3, #4]
 801706c:	68b9      	ldr	r1, [r7, #8]
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	1d1c      	adds	r4, r3, #4
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	7add      	ldrb	r5, [r3, #11]
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	7a9b      	ldrb	r3, [r3, #10]
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	9202      	str	r2, [sp, #8]
 801707e:	2206      	movs	r2, #6
 8017080:	9201      	str	r2, [sp, #4]
 8017082:	9300      	str	r3, [sp, #0]
 8017084:	462b      	mov	r3, r5
 8017086:	4622      	mov	r2, r4
 8017088:	f002 fa5a 	bl	8019540 <ip4_output_if>
 801708c:	4603      	mov	r3, r0
 801708e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017090:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017094:	4618      	mov	r0, r3
 8017096:	3720      	adds	r7, #32
 8017098:	46bd      	mov	sp, r7
 801709a:	bdb0      	pop	{r4, r5, r7, pc}
 801709c:	0801f2c4 	.word	0x0801f2c4
 80170a0:	0801f888 	.word	0x0801f888
 80170a4:	0801f318 	.word	0x0801f318
 80170a8:	0801f8a8 	.word	0x0801f8a8
 80170ac:	0801f8c8 	.word	0x0801f8c8
 80170b0:	2000719c 	.word	0x2000719c
 80170b4:	0801f8ec 	.word	0x0801f8ec

080170b8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80170b8:	b5b0      	push	{r4, r5, r7, lr}
 80170ba:	b084      	sub	sp, #16
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d106      	bne.n	80170d4 <tcp_rexmit_rto_prepare+0x1c>
 80170c6:	4b31      	ldr	r3, [pc, #196]	; (801718c <tcp_rexmit_rto_prepare+0xd4>)
 80170c8:	f240 6263 	movw	r2, #1635	; 0x663
 80170cc:	4930      	ldr	r1, [pc, #192]	; (8017190 <tcp_rexmit_rto_prepare+0xd8>)
 80170ce:	4831      	ldr	r0, [pc, #196]	; (8017194 <tcp_rexmit_rto_prepare+0xdc>)
 80170d0:	f004 f82e 	bl	801b130 <iprintf>

  if (pcb->unacked == NULL) {
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d102      	bne.n	80170e2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80170dc:	f06f 0305 	mvn.w	r3, #5
 80170e0:	e050      	b.n	8017184 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170e6:	60fb      	str	r3, [r7, #12]
 80170e8:	e00b      	b.n	8017102 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80170ea:	68f8      	ldr	r0, [r7, #12]
 80170ec:	f7ff fee4 	bl	8016eb8 <tcp_output_segment_busy>
 80170f0:	4603      	mov	r3, r0
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d002      	beq.n	80170fc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80170f6:	f06f 0305 	mvn.w	r3, #5
 80170fa:	e043      	b.n	8017184 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	60fb      	str	r3, [r7, #12]
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d1ef      	bne.n	80170ea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801710a:	68f8      	ldr	r0, [r7, #12]
 801710c:	f7ff fed4 	bl	8016eb8 <tcp_output_segment_busy>
 8017110:	4603      	mov	r3, r0
 8017112:	2b00      	cmp	r3, #0
 8017114:	d002      	beq.n	801711c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017116:	f06f 0305 	mvn.w	r3, #5
 801711a:	e033      	b.n	8017184 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	2200      	movs	r2, #0
 8017130:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	8b5b      	ldrh	r3, [r3, #26]
 8017136:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801713a:	b29a      	uxth	r2, r3
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	68db      	ldr	r3, [r3, #12]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	4618      	mov	r0, r3
 8017148:	f7f8 fd63 	bl	800fc12 <lwip_htonl>
 801714c:	4604      	mov	r4, r0
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	891b      	ldrh	r3, [r3, #8]
 8017152:	461d      	mov	r5, r3
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	68db      	ldr	r3, [r3, #12]
 8017158:	899b      	ldrh	r3, [r3, #12]
 801715a:	b29b      	uxth	r3, r3
 801715c:	4618      	mov	r0, r3
 801715e:	f7f8 fd43 	bl	800fbe8 <lwip_htons>
 8017162:	4603      	mov	r3, r0
 8017164:	b2db      	uxtb	r3, r3
 8017166:	f003 0303 	and.w	r3, r3, #3
 801716a:	2b00      	cmp	r3, #0
 801716c:	d001      	beq.n	8017172 <tcp_rexmit_rto_prepare+0xba>
 801716e:	2301      	movs	r3, #1
 8017170:	e000      	b.n	8017174 <tcp_rexmit_rto_prepare+0xbc>
 8017172:	2300      	movs	r3, #0
 8017174:	442b      	add	r3, r5
 8017176:	18e2      	adds	r2, r4, r3
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	2200      	movs	r2, #0
 8017180:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017182:	2300      	movs	r3, #0
}
 8017184:	4618      	mov	r0, r3
 8017186:	3710      	adds	r7, #16
 8017188:	46bd      	mov	sp, r7
 801718a:	bdb0      	pop	{r4, r5, r7, pc}
 801718c:	0801f2c4 	.word	0x0801f2c4
 8017190:	0801f900 	.word	0x0801f900
 8017194:	0801f318 	.word	0x0801f318

08017198 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d106      	bne.n	80171b4 <tcp_rexmit_rto_commit+0x1c>
 80171a6:	4b0d      	ldr	r3, [pc, #52]	; (80171dc <tcp_rexmit_rto_commit+0x44>)
 80171a8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80171ac:	490c      	ldr	r1, [pc, #48]	; (80171e0 <tcp_rexmit_rto_commit+0x48>)
 80171ae:	480d      	ldr	r0, [pc, #52]	; (80171e4 <tcp_rexmit_rto_commit+0x4c>)
 80171b0:	f003 ffbe 	bl	801b130 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80171ba:	2bff      	cmp	r3, #255	; 0xff
 80171bc:	d007      	beq.n	80171ce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80171c4:	3301      	adds	r3, #1
 80171c6:	b2da      	uxtb	r2, r3
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f7ff fc7e 	bl	8016ad0 <tcp_output>
}
 80171d4:	bf00      	nop
 80171d6:	3708      	adds	r7, #8
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd80      	pop	{r7, pc}
 80171dc:	0801f2c4 	.word	0x0801f2c4
 80171e0:	0801f924 	.word	0x0801f924
 80171e4:	0801f318 	.word	0x0801f318

080171e8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b082      	sub	sp, #8
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d106      	bne.n	8017204 <tcp_rexmit_rto+0x1c>
 80171f6:	4b0a      	ldr	r3, [pc, #40]	; (8017220 <tcp_rexmit_rto+0x38>)
 80171f8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80171fc:	4909      	ldr	r1, [pc, #36]	; (8017224 <tcp_rexmit_rto+0x3c>)
 80171fe:	480a      	ldr	r0, [pc, #40]	; (8017228 <tcp_rexmit_rto+0x40>)
 8017200:	f003 ff96 	bl	801b130 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017204:	6878      	ldr	r0, [r7, #4]
 8017206:	f7ff ff57 	bl	80170b8 <tcp_rexmit_rto_prepare>
 801720a:	4603      	mov	r3, r0
 801720c:	2b00      	cmp	r3, #0
 801720e:	d102      	bne.n	8017216 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f7ff ffc1 	bl	8017198 <tcp_rexmit_rto_commit>
  }
}
 8017216:	bf00      	nop
 8017218:	3708      	adds	r7, #8
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
 801721e:	bf00      	nop
 8017220:	0801f2c4 	.word	0x0801f2c4
 8017224:	0801f948 	.word	0x0801f948
 8017228:	0801f318 	.word	0x0801f318

0801722c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801722c:	b590      	push	{r4, r7, lr}
 801722e:	b085      	sub	sp, #20
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d106      	bne.n	8017248 <tcp_rexmit+0x1c>
 801723a:	4b2f      	ldr	r3, [pc, #188]	; (80172f8 <tcp_rexmit+0xcc>)
 801723c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017240:	492e      	ldr	r1, [pc, #184]	; (80172fc <tcp_rexmit+0xd0>)
 8017242:	482f      	ldr	r0, [pc, #188]	; (8017300 <tcp_rexmit+0xd4>)
 8017244:	f003 ff74 	bl	801b130 <iprintf>

  if (pcb->unacked == NULL) {
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801724c:	2b00      	cmp	r3, #0
 801724e:	d102      	bne.n	8017256 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017250:	f06f 0305 	mvn.w	r3, #5
 8017254:	e04c      	b.n	80172f0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801725a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801725c:	68b8      	ldr	r0, [r7, #8]
 801725e:	f7ff fe2b 	bl	8016eb8 <tcp_output_segment_busy>
 8017262:	4603      	mov	r3, r0
 8017264:	2b00      	cmp	r3, #0
 8017266:	d002      	beq.n	801726e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017268:	f06f 0305 	mvn.w	r3, #5
 801726c:	e040      	b.n	80172f0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801726e:	68bb      	ldr	r3, [r7, #8]
 8017270:	681a      	ldr	r2, [r3, #0]
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	336c      	adds	r3, #108	; 0x6c
 801727a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801727c:	e002      	b.n	8017284 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d011      	beq.n	80172b0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	68db      	ldr	r3, [r3, #12]
 8017292:	685b      	ldr	r3, [r3, #4]
 8017294:	4618      	mov	r0, r3
 8017296:	f7f8 fcbc 	bl	800fc12 <lwip_htonl>
 801729a:	4604      	mov	r4, r0
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	68db      	ldr	r3, [r3, #12]
 80172a0:	685b      	ldr	r3, [r3, #4]
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7f8 fcb5 	bl	800fc12 <lwip_htonl>
 80172a8:	4603      	mov	r3, r0
 80172aa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	dbe6      	blt.n	801727e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	681a      	ldr	r2, [r3, #0]
 80172b4:	68bb      	ldr	r3, [r7, #8]
 80172b6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	68ba      	ldr	r2, [r7, #8]
 80172bc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d103      	bne.n	80172ce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2200      	movs	r2, #0
 80172ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172d4:	2bff      	cmp	r3, #255	; 0xff
 80172d6:	d007      	beq.n	80172e8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172de:	3301      	adds	r3, #1
 80172e0:	b2da      	uxtb	r2, r3
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2200      	movs	r2, #0
 80172ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80172ee:	2300      	movs	r3, #0
}
 80172f0:	4618      	mov	r0, r3
 80172f2:	3714      	adds	r7, #20
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd90      	pop	{r4, r7, pc}
 80172f8:	0801f2c4 	.word	0x0801f2c4
 80172fc:	0801f964 	.word	0x0801f964
 8017300:	0801f318 	.word	0x0801f318

08017304 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d106      	bne.n	8017320 <tcp_rexmit_fast+0x1c>
 8017312:	4b2a      	ldr	r3, [pc, #168]	; (80173bc <tcp_rexmit_fast+0xb8>)
 8017314:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017318:	4929      	ldr	r1, [pc, #164]	; (80173c0 <tcp_rexmit_fast+0xbc>)
 801731a:	482a      	ldr	r0, [pc, #168]	; (80173c4 <tcp_rexmit_fast+0xc0>)
 801731c:	f003 ff08 	bl	801b130 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017324:	2b00      	cmp	r3, #0
 8017326:	d045      	beq.n	80173b4 <tcp_rexmit_fast+0xb0>
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	8b5b      	ldrh	r3, [r3, #26]
 801732c:	f003 0304 	and.w	r3, r3, #4
 8017330:	2b00      	cmp	r3, #0
 8017332:	d13f      	bne.n	80173b4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f7ff ff79 	bl	801722c <tcp_rexmit>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d139      	bne.n	80173b4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801734c:	4293      	cmp	r3, r2
 801734e:	bf28      	it	cs
 8017350:	4613      	movcs	r3, r2
 8017352:	b29b      	uxth	r3, r3
 8017354:	2b00      	cmp	r3, #0
 8017356:	da00      	bge.n	801735a <tcp_rexmit_fast+0x56>
 8017358:	3301      	adds	r3, #1
 801735a:	105b      	asrs	r3, r3, #1
 801735c:	b29a      	uxth	r2, r3
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801736a:	461a      	mov	r2, r3
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017370:	005b      	lsls	r3, r3, #1
 8017372:	429a      	cmp	r2, r3
 8017374:	d206      	bcs.n	8017384 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801737a:	005b      	lsls	r3, r3, #1
 801737c:	b29a      	uxth	r2, r3
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801738e:	4619      	mov	r1, r3
 8017390:	0049      	lsls	r1, r1, #1
 8017392:	440b      	add	r3, r1
 8017394:	b29b      	uxth	r3, r3
 8017396:	4413      	add	r3, r2
 8017398:	b29a      	uxth	r2, r3
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	8b5b      	ldrh	r3, [r3, #26]
 80173a4:	f043 0304 	orr.w	r3, r3, #4
 80173a8:	b29a      	uxth	r2, r3
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2200      	movs	r2, #0
 80173b2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80173b4:	bf00      	nop
 80173b6:	3708      	adds	r7, #8
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}
 80173bc:	0801f2c4 	.word	0x0801f2c4
 80173c0:	0801f97c 	.word	0x0801f97c
 80173c4:	0801f318 	.word	0x0801f318

080173c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b086      	sub	sp, #24
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	60f8      	str	r0, [r7, #12]
 80173d0:	607b      	str	r3, [r7, #4]
 80173d2:	460b      	mov	r3, r1
 80173d4:	817b      	strh	r3, [r7, #10]
 80173d6:	4613      	mov	r3, r2
 80173d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80173da:	897a      	ldrh	r2, [r7, #10]
 80173dc:	893b      	ldrh	r3, [r7, #8]
 80173de:	4413      	add	r3, r2
 80173e0:	b29b      	uxth	r3, r3
 80173e2:	3314      	adds	r3, #20
 80173e4:	b29b      	uxth	r3, r3
 80173e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173ea:	4619      	mov	r1, r3
 80173ec:	2022      	movs	r0, #34	; 0x22
 80173ee:	f7f9 fd1b 	bl	8010e28 <pbuf_alloc>
 80173f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d04d      	beq.n	8017496 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80173fa:	897b      	ldrh	r3, [r7, #10]
 80173fc:	3313      	adds	r3, #19
 80173fe:	697a      	ldr	r2, [r7, #20]
 8017400:	8952      	ldrh	r2, [r2, #10]
 8017402:	4293      	cmp	r3, r2
 8017404:	db06      	blt.n	8017414 <tcp_output_alloc_header_common+0x4c>
 8017406:	4b26      	ldr	r3, [pc, #152]	; (80174a0 <tcp_output_alloc_header_common+0xd8>)
 8017408:	f240 7223 	movw	r2, #1827	; 0x723
 801740c:	4925      	ldr	r1, [pc, #148]	; (80174a4 <tcp_output_alloc_header_common+0xdc>)
 801740e:	4826      	ldr	r0, [pc, #152]	; (80174a8 <tcp_output_alloc_header_common+0xe0>)
 8017410:	f003 fe8e 	bl	801b130 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	685b      	ldr	r3, [r3, #4]
 8017418:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801741a:	8c3b      	ldrh	r3, [r7, #32]
 801741c:	4618      	mov	r0, r3
 801741e:	f7f8 fbe3 	bl	800fbe8 <lwip_htons>
 8017422:	4603      	mov	r3, r0
 8017424:	461a      	mov	r2, r3
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801742a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801742c:	4618      	mov	r0, r3
 801742e:	f7f8 fbdb 	bl	800fbe8 <lwip_htons>
 8017432:	4603      	mov	r3, r0
 8017434:	461a      	mov	r2, r3
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801743a:	693b      	ldr	r3, [r7, #16]
 801743c:	687a      	ldr	r2, [r7, #4]
 801743e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017440:	68f8      	ldr	r0, [r7, #12]
 8017442:	f7f8 fbe6 	bl	800fc12 <lwip_htonl>
 8017446:	4602      	mov	r2, r0
 8017448:	693b      	ldr	r3, [r7, #16]
 801744a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801744c:	897b      	ldrh	r3, [r7, #10]
 801744e:	089b      	lsrs	r3, r3, #2
 8017450:	b29b      	uxth	r3, r3
 8017452:	3305      	adds	r3, #5
 8017454:	b29b      	uxth	r3, r3
 8017456:	031b      	lsls	r3, r3, #12
 8017458:	b29a      	uxth	r2, r3
 801745a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801745e:	b29b      	uxth	r3, r3
 8017460:	4313      	orrs	r3, r2
 8017462:	b29b      	uxth	r3, r3
 8017464:	4618      	mov	r0, r3
 8017466:	f7f8 fbbf 	bl	800fbe8 <lwip_htons>
 801746a:	4603      	mov	r3, r0
 801746c:	461a      	mov	r2, r3
 801746e:	693b      	ldr	r3, [r7, #16]
 8017470:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017472:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017474:	4618      	mov	r0, r3
 8017476:	f7f8 fbb7 	bl	800fbe8 <lwip_htons>
 801747a:	4603      	mov	r3, r0
 801747c:	461a      	mov	r2, r3
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	2200      	movs	r2, #0
 8017486:	741a      	strb	r2, [r3, #16]
 8017488:	2200      	movs	r2, #0
 801748a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801748c:	693b      	ldr	r3, [r7, #16]
 801748e:	2200      	movs	r2, #0
 8017490:	749a      	strb	r2, [r3, #18]
 8017492:	2200      	movs	r2, #0
 8017494:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017496:	697b      	ldr	r3, [r7, #20]
}
 8017498:	4618      	mov	r0, r3
 801749a:	3718      	adds	r7, #24
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}
 80174a0:	0801f2c4 	.word	0x0801f2c4
 80174a4:	0801f99c 	.word	0x0801f99c
 80174a8:	0801f318 	.word	0x0801f318

080174ac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80174ac:	b5b0      	push	{r4, r5, r7, lr}
 80174ae:	b08a      	sub	sp, #40	; 0x28
 80174b0:	af04      	add	r7, sp, #16
 80174b2:	60f8      	str	r0, [r7, #12]
 80174b4:	607b      	str	r3, [r7, #4]
 80174b6:	460b      	mov	r3, r1
 80174b8:	817b      	strh	r3, [r7, #10]
 80174ba:	4613      	mov	r3, r2
 80174bc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d106      	bne.n	80174d2 <tcp_output_alloc_header+0x26>
 80174c4:	4b15      	ldr	r3, [pc, #84]	; (801751c <tcp_output_alloc_header+0x70>)
 80174c6:	f240 7242 	movw	r2, #1858	; 0x742
 80174ca:	4915      	ldr	r1, [pc, #84]	; (8017520 <tcp_output_alloc_header+0x74>)
 80174cc:	4815      	ldr	r0, [pc, #84]	; (8017524 <tcp_output_alloc_header+0x78>)
 80174ce:	f003 fe2f 	bl	801b130 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	8adb      	ldrh	r3, [r3, #22]
 80174da:	68fa      	ldr	r2, [r7, #12]
 80174dc:	8b12      	ldrh	r2, [r2, #24]
 80174de:	68f9      	ldr	r1, [r7, #12]
 80174e0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80174e2:	893d      	ldrh	r5, [r7, #8]
 80174e4:	897c      	ldrh	r4, [r7, #10]
 80174e6:	9103      	str	r1, [sp, #12]
 80174e8:	2110      	movs	r1, #16
 80174ea:	9102      	str	r1, [sp, #8]
 80174ec:	9201      	str	r2, [sp, #4]
 80174ee:	9300      	str	r3, [sp, #0]
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	462a      	mov	r2, r5
 80174f4:	4621      	mov	r1, r4
 80174f6:	f7ff ff67 	bl	80173c8 <tcp_output_alloc_header_common>
 80174fa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80174fc:	697b      	ldr	r3, [r7, #20]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d006      	beq.n	8017510 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017506:	68fa      	ldr	r2, [r7, #12]
 8017508:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801750a:	441a      	add	r2, r3
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017510:	697b      	ldr	r3, [r7, #20]
}
 8017512:	4618      	mov	r0, r3
 8017514:	3718      	adds	r7, #24
 8017516:	46bd      	mov	sp, r7
 8017518:	bdb0      	pop	{r4, r5, r7, pc}
 801751a:	bf00      	nop
 801751c:	0801f2c4 	.word	0x0801f2c4
 8017520:	0801f9cc 	.word	0x0801f9cc
 8017524:	0801f318 	.word	0x0801f318

08017528 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b088      	sub	sp, #32
 801752c:	af00      	add	r7, sp, #0
 801752e:	60f8      	str	r0, [r7, #12]
 8017530:	60b9      	str	r1, [r7, #8]
 8017532:	4611      	mov	r1, r2
 8017534:	461a      	mov	r2, r3
 8017536:	460b      	mov	r3, r1
 8017538:	71fb      	strb	r3, [r7, #7]
 801753a:	4613      	mov	r3, r2
 801753c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801753e:	2300      	movs	r3, #0
 8017540:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d106      	bne.n	8017556 <tcp_output_fill_options+0x2e>
 8017548:	4b12      	ldr	r3, [pc, #72]	; (8017594 <tcp_output_fill_options+0x6c>)
 801754a:	f240 7256 	movw	r2, #1878	; 0x756
 801754e:	4912      	ldr	r1, [pc, #72]	; (8017598 <tcp_output_fill_options+0x70>)
 8017550:	4812      	ldr	r0, [pc, #72]	; (801759c <tcp_output_fill_options+0x74>)
 8017552:	f003 fded 	bl	801b130 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017556:	68bb      	ldr	r3, [r7, #8]
 8017558:	685b      	ldr	r3, [r3, #4]
 801755a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801755c:	69bb      	ldr	r3, [r7, #24]
 801755e:	3314      	adds	r3, #20
 8017560:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017562:	8bfb      	ldrh	r3, [r7, #30]
 8017564:	009b      	lsls	r3, r3, #2
 8017566:	461a      	mov	r2, r3
 8017568:	79fb      	ldrb	r3, [r7, #7]
 801756a:	009b      	lsls	r3, r3, #2
 801756c:	f003 0304 	and.w	r3, r3, #4
 8017570:	4413      	add	r3, r2
 8017572:	3314      	adds	r3, #20
 8017574:	69ba      	ldr	r2, [r7, #24]
 8017576:	4413      	add	r3, r2
 8017578:	697a      	ldr	r2, [r7, #20]
 801757a:	429a      	cmp	r2, r3
 801757c:	d006      	beq.n	801758c <tcp_output_fill_options+0x64>
 801757e:	4b05      	ldr	r3, [pc, #20]	; (8017594 <tcp_output_fill_options+0x6c>)
 8017580:	f240 7275 	movw	r2, #1909	; 0x775
 8017584:	4906      	ldr	r1, [pc, #24]	; (80175a0 <tcp_output_fill_options+0x78>)
 8017586:	4805      	ldr	r0, [pc, #20]	; (801759c <tcp_output_fill_options+0x74>)
 8017588:	f003 fdd2 	bl	801b130 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801758c:	bf00      	nop
 801758e:	3720      	adds	r7, #32
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	0801f2c4 	.word	0x0801f2c4
 8017598:	0801f9f4 	.word	0x0801f9f4
 801759c:	0801f318 	.word	0x0801f318
 80175a0:	0801f8ec 	.word	0x0801f8ec

080175a4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b08a      	sub	sp, #40	; 0x28
 80175a8:	af04      	add	r7, sp, #16
 80175aa:	60f8      	str	r0, [r7, #12]
 80175ac:	60b9      	str	r1, [r7, #8]
 80175ae:	607a      	str	r2, [r7, #4]
 80175b0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80175b2:	68bb      	ldr	r3, [r7, #8]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d106      	bne.n	80175c6 <tcp_output_control_segment+0x22>
 80175b8:	4b1c      	ldr	r3, [pc, #112]	; (801762c <tcp_output_control_segment+0x88>)
 80175ba:	f240 7287 	movw	r2, #1927	; 0x787
 80175be:	491c      	ldr	r1, [pc, #112]	; (8017630 <tcp_output_control_segment+0x8c>)
 80175c0:	481c      	ldr	r0, [pc, #112]	; (8017634 <tcp_output_control_segment+0x90>)
 80175c2:	f003 fdb5 	bl	801b130 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80175c6:	683a      	ldr	r2, [r7, #0]
 80175c8:	6879      	ldr	r1, [r7, #4]
 80175ca:	68f8      	ldr	r0, [r7, #12]
 80175cc:	f7fe fae8 	bl	8015ba0 <tcp_route>
 80175d0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d102      	bne.n	80175de <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80175d8:	23fc      	movs	r3, #252	; 0xfc
 80175da:	75fb      	strb	r3, [r7, #23]
 80175dc:	e01c      	b.n	8017618 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d006      	beq.n	80175f2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	7adb      	ldrb	r3, [r3, #11]
 80175e8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	7a9b      	ldrb	r3, [r3, #10]
 80175ee:	757b      	strb	r3, [r7, #21]
 80175f0:	e003      	b.n	80175fa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80175f2:	23ff      	movs	r3, #255	; 0xff
 80175f4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80175f6:	2300      	movs	r3, #0
 80175f8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80175fa:	7dba      	ldrb	r2, [r7, #22]
 80175fc:	693b      	ldr	r3, [r7, #16]
 80175fe:	9302      	str	r3, [sp, #8]
 8017600:	2306      	movs	r3, #6
 8017602:	9301      	str	r3, [sp, #4]
 8017604:	7d7b      	ldrb	r3, [r7, #21]
 8017606:	9300      	str	r3, [sp, #0]
 8017608:	4613      	mov	r3, r2
 801760a:	683a      	ldr	r2, [r7, #0]
 801760c:	6879      	ldr	r1, [r7, #4]
 801760e:	68b8      	ldr	r0, [r7, #8]
 8017610:	f001 ff96 	bl	8019540 <ip4_output_if>
 8017614:	4603      	mov	r3, r0
 8017616:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017618:	68b8      	ldr	r0, [r7, #8]
 801761a:	f7f9 fee9 	bl	80113f0 <pbuf_free>
  return err;
 801761e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017622:	4618      	mov	r0, r3
 8017624:	3718      	adds	r7, #24
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}
 801762a:	bf00      	nop
 801762c:	0801f2c4 	.word	0x0801f2c4
 8017630:	0801fa1c 	.word	0x0801fa1c
 8017634:	0801f318 	.word	0x0801f318

08017638 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017638:	b590      	push	{r4, r7, lr}
 801763a:	b08b      	sub	sp, #44	; 0x2c
 801763c:	af04      	add	r7, sp, #16
 801763e:	60f8      	str	r0, [r7, #12]
 8017640:	60b9      	str	r1, [r7, #8]
 8017642:	607a      	str	r2, [r7, #4]
 8017644:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d106      	bne.n	801765a <tcp_rst+0x22>
 801764c:	4b1f      	ldr	r3, [pc, #124]	; (80176cc <tcp_rst+0x94>)
 801764e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017652:	491f      	ldr	r1, [pc, #124]	; (80176d0 <tcp_rst+0x98>)
 8017654:	481f      	ldr	r0, [pc, #124]	; (80176d4 <tcp_rst+0x9c>)
 8017656:	f003 fd6b 	bl	801b130 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801765c:	2b00      	cmp	r3, #0
 801765e:	d106      	bne.n	801766e <tcp_rst+0x36>
 8017660:	4b1a      	ldr	r3, [pc, #104]	; (80176cc <tcp_rst+0x94>)
 8017662:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8017666:	491c      	ldr	r1, [pc, #112]	; (80176d8 <tcp_rst+0xa0>)
 8017668:	481a      	ldr	r0, [pc, #104]	; (80176d4 <tcp_rst+0x9c>)
 801766a:	f003 fd61 	bl	801b130 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801766e:	2300      	movs	r3, #0
 8017670:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017672:	f24d 0316 	movw	r3, #53270	; 0xd016
 8017676:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017678:	7dfb      	ldrb	r3, [r7, #23]
 801767a:	b29c      	uxth	r4, r3
 801767c:	68b8      	ldr	r0, [r7, #8]
 801767e:	f7f8 fac8 	bl	800fc12 <lwip_htonl>
 8017682:	4602      	mov	r2, r0
 8017684:	8abb      	ldrh	r3, [r7, #20]
 8017686:	9303      	str	r3, [sp, #12]
 8017688:	2314      	movs	r3, #20
 801768a:	9302      	str	r3, [sp, #8]
 801768c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801768e:	9301      	str	r3, [sp, #4]
 8017690:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017692:	9300      	str	r3, [sp, #0]
 8017694:	4613      	mov	r3, r2
 8017696:	2200      	movs	r2, #0
 8017698:	4621      	mov	r1, r4
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f7ff fe94 	bl	80173c8 <tcp_output_alloc_header_common>
 80176a0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80176a2:	693b      	ldr	r3, [r7, #16]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d00c      	beq.n	80176c2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80176a8:	7dfb      	ldrb	r3, [r7, #23]
 80176aa:	2200      	movs	r2, #0
 80176ac:	6939      	ldr	r1, [r7, #16]
 80176ae:	68f8      	ldr	r0, [r7, #12]
 80176b0:	f7ff ff3a 	bl	8017528 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80176b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176b6:	683a      	ldr	r2, [r7, #0]
 80176b8:	6939      	ldr	r1, [r7, #16]
 80176ba:	68f8      	ldr	r0, [r7, #12]
 80176bc:	f7ff ff72 	bl	80175a4 <tcp_output_control_segment>
 80176c0:	e000      	b.n	80176c4 <tcp_rst+0x8c>
    return;
 80176c2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80176c4:	371c      	adds	r7, #28
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd90      	pop	{r4, r7, pc}
 80176ca:	bf00      	nop
 80176cc:	0801f2c4 	.word	0x0801f2c4
 80176d0:	0801fa48 	.word	0x0801fa48
 80176d4:	0801f318 	.word	0x0801f318
 80176d8:	0801fa64 	.word	0x0801fa64

080176dc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80176dc:	b590      	push	{r4, r7, lr}
 80176de:	b087      	sub	sp, #28
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80176e4:	2300      	movs	r3, #0
 80176e6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80176e8:	2300      	movs	r3, #0
 80176ea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d106      	bne.n	8017700 <tcp_send_empty_ack+0x24>
 80176f2:	4b28      	ldr	r3, [pc, #160]	; (8017794 <tcp_send_empty_ack+0xb8>)
 80176f4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80176f8:	4927      	ldr	r1, [pc, #156]	; (8017798 <tcp_send_empty_ack+0xbc>)
 80176fa:	4828      	ldr	r0, [pc, #160]	; (801779c <tcp_send_empty_ack+0xc0>)
 80176fc:	f003 fd18 	bl	801b130 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017700:	7dfb      	ldrb	r3, [r7, #23]
 8017702:	009b      	lsls	r3, r3, #2
 8017704:	b2db      	uxtb	r3, r3
 8017706:	f003 0304 	and.w	r3, r3, #4
 801770a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801770c:	7d7b      	ldrb	r3, [r7, #21]
 801770e:	b29c      	uxth	r4, r3
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017714:	4618      	mov	r0, r3
 8017716:	f7f8 fa7c 	bl	800fc12 <lwip_htonl>
 801771a:	4603      	mov	r3, r0
 801771c:	2200      	movs	r2, #0
 801771e:	4621      	mov	r1, r4
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f7ff fec3 	bl	80174ac <tcp_output_alloc_header>
 8017726:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d109      	bne.n	8017742 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	8b5b      	ldrh	r3, [r3, #26]
 8017732:	f043 0303 	orr.w	r3, r3, #3
 8017736:	b29a      	uxth	r2, r3
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801773c:	f06f 0301 	mvn.w	r3, #1
 8017740:	e023      	b.n	801778a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017742:	7dbb      	ldrb	r3, [r7, #22]
 8017744:	7dfa      	ldrb	r2, [r7, #23]
 8017746:	6939      	ldr	r1, [r7, #16]
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	f7ff feed 	bl	8017528 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801774e:	687a      	ldr	r2, [r7, #4]
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	3304      	adds	r3, #4
 8017754:	6939      	ldr	r1, [r7, #16]
 8017756:	6878      	ldr	r0, [r7, #4]
 8017758:	f7ff ff24 	bl	80175a4 <tcp_output_control_segment>
 801775c:	4603      	mov	r3, r0
 801775e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d007      	beq.n	8017778 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	8b5b      	ldrh	r3, [r3, #26]
 801776c:	f043 0303 	orr.w	r3, r3, #3
 8017770:	b29a      	uxth	r2, r3
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	835a      	strh	r2, [r3, #26]
 8017776:	e006      	b.n	8017786 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	8b5b      	ldrh	r3, [r3, #26]
 801777c:	f023 0303 	bic.w	r3, r3, #3
 8017780:	b29a      	uxth	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017786:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801778a:	4618      	mov	r0, r3
 801778c:	371c      	adds	r7, #28
 801778e:	46bd      	mov	sp, r7
 8017790:	bd90      	pop	{r4, r7, pc}
 8017792:	bf00      	nop
 8017794:	0801f2c4 	.word	0x0801f2c4
 8017798:	0801fa80 	.word	0x0801fa80
 801779c:	0801f318 	.word	0x0801f318

080177a0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80177a0:	b590      	push	{r4, r7, lr}
 80177a2:	b087      	sub	sp, #28
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80177a8:	2300      	movs	r3, #0
 80177aa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d106      	bne.n	80177c0 <tcp_keepalive+0x20>
 80177b2:	4b18      	ldr	r3, [pc, #96]	; (8017814 <tcp_keepalive+0x74>)
 80177b4:	f640 0224 	movw	r2, #2084	; 0x824
 80177b8:	4917      	ldr	r1, [pc, #92]	; (8017818 <tcp_keepalive+0x78>)
 80177ba:	4818      	ldr	r0, [pc, #96]	; (801781c <tcp_keepalive+0x7c>)
 80177bc:	f003 fcb8 	bl	801b130 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80177c0:	7dfb      	ldrb	r3, [r7, #23]
 80177c2:	b29c      	uxth	r4, r3
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80177c8:	3b01      	subs	r3, #1
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7f8 fa21 	bl	800fc12 <lwip_htonl>
 80177d0:	4603      	mov	r3, r0
 80177d2:	2200      	movs	r2, #0
 80177d4:	4621      	mov	r1, r4
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f7ff fe68 	bl	80174ac <tcp_output_alloc_header>
 80177dc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d102      	bne.n	80177ea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80177e4:	f04f 33ff 	mov.w	r3, #4294967295
 80177e8:	e010      	b.n	801780c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80177ea:	7dfb      	ldrb	r3, [r7, #23]
 80177ec:	2200      	movs	r2, #0
 80177ee:	6939      	ldr	r1, [r7, #16]
 80177f0:	6878      	ldr	r0, [r7, #4]
 80177f2:	f7ff fe99 	bl	8017528 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80177f6:	687a      	ldr	r2, [r7, #4]
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	3304      	adds	r3, #4
 80177fc:	6939      	ldr	r1, [r7, #16]
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f7ff fed0 	bl	80175a4 <tcp_output_control_segment>
 8017804:	4603      	mov	r3, r0
 8017806:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017808:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801780c:	4618      	mov	r0, r3
 801780e:	371c      	adds	r7, #28
 8017810:	46bd      	mov	sp, r7
 8017812:	bd90      	pop	{r4, r7, pc}
 8017814:	0801f2c4 	.word	0x0801f2c4
 8017818:	0801faa0 	.word	0x0801faa0
 801781c:	0801f318 	.word	0x0801f318

08017820 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017820:	b590      	push	{r4, r7, lr}
 8017822:	b08b      	sub	sp, #44	; 0x2c
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017828:	2300      	movs	r3, #0
 801782a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d106      	bne.n	8017842 <tcp_zero_window_probe+0x22>
 8017834:	4b4c      	ldr	r3, [pc, #304]	; (8017968 <tcp_zero_window_probe+0x148>)
 8017836:	f640 024f 	movw	r2, #2127	; 0x84f
 801783a:	494c      	ldr	r1, [pc, #304]	; (801796c <tcp_zero_window_probe+0x14c>)
 801783c:	484c      	ldr	r0, [pc, #304]	; (8017970 <tcp_zero_window_probe+0x150>)
 801783e:	f003 fc77 	bl	801b130 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017846:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017848:	6a3b      	ldr	r3, [r7, #32]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d101      	bne.n	8017852 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801784e:	2300      	movs	r3, #0
 8017850:	e086      	b.n	8017960 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017858:	2bff      	cmp	r3, #255	; 0xff
 801785a:	d007      	beq.n	801786c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017862:	3301      	adds	r3, #1
 8017864:	b2da      	uxtb	r2, r3
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801786c:	6a3b      	ldr	r3, [r7, #32]
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	899b      	ldrh	r3, [r3, #12]
 8017872:	b29b      	uxth	r3, r3
 8017874:	4618      	mov	r0, r3
 8017876:	f7f8 f9b7 	bl	800fbe8 <lwip_htons>
 801787a:	4603      	mov	r3, r0
 801787c:	b2db      	uxtb	r3, r3
 801787e:	f003 0301 	and.w	r3, r3, #1
 8017882:	2b00      	cmp	r3, #0
 8017884:	d005      	beq.n	8017892 <tcp_zero_window_probe+0x72>
 8017886:	6a3b      	ldr	r3, [r7, #32]
 8017888:	891b      	ldrh	r3, [r3, #8]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d101      	bne.n	8017892 <tcp_zero_window_probe+0x72>
 801788e:	2301      	movs	r3, #1
 8017890:	e000      	b.n	8017894 <tcp_zero_window_probe+0x74>
 8017892:	2300      	movs	r3, #0
 8017894:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017896:	7ffb      	ldrb	r3, [r7, #31]
 8017898:	2b00      	cmp	r3, #0
 801789a:	bf0c      	ite	eq
 801789c:	2301      	moveq	r3, #1
 801789e:	2300      	movne	r3, #0
 80178a0:	b2db      	uxtb	r3, r3
 80178a2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80178a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80178a8:	b299      	uxth	r1, r3
 80178aa:	6a3b      	ldr	r3, [r7, #32]
 80178ac:	68db      	ldr	r3, [r3, #12]
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	8bba      	ldrh	r2, [r7, #28]
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7ff fdfa 	bl	80174ac <tcp_output_alloc_header>
 80178b8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80178ba:	69bb      	ldr	r3, [r7, #24]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d102      	bne.n	80178c6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80178c0:	f04f 33ff 	mov.w	r3, #4294967295
 80178c4:	e04c      	b.n	8017960 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80178c6:	69bb      	ldr	r3, [r7, #24]
 80178c8:	685b      	ldr	r3, [r3, #4]
 80178ca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80178cc:	7ffb      	ldrb	r3, [r7, #31]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d011      	beq.n	80178f6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80178d2:	697b      	ldr	r3, [r7, #20]
 80178d4:	899b      	ldrh	r3, [r3, #12]
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	b21b      	sxth	r3, r3
 80178da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80178de:	b21c      	sxth	r4, r3
 80178e0:	2011      	movs	r0, #17
 80178e2:	f7f8 f981 	bl	800fbe8 <lwip_htons>
 80178e6:	4603      	mov	r3, r0
 80178e8:	b21b      	sxth	r3, r3
 80178ea:	4323      	orrs	r3, r4
 80178ec:	b21b      	sxth	r3, r3
 80178ee:	b29a      	uxth	r2, r3
 80178f0:	697b      	ldr	r3, [r7, #20]
 80178f2:	819a      	strh	r2, [r3, #12]
 80178f4:	e010      	b.n	8017918 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80178f6:	69bb      	ldr	r3, [r7, #24]
 80178f8:	685b      	ldr	r3, [r3, #4]
 80178fa:	3314      	adds	r3, #20
 80178fc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80178fe:	6a3b      	ldr	r3, [r7, #32]
 8017900:	6858      	ldr	r0, [r3, #4]
 8017902:	6a3b      	ldr	r3, [r7, #32]
 8017904:	685b      	ldr	r3, [r3, #4]
 8017906:	891a      	ldrh	r2, [r3, #8]
 8017908:	6a3b      	ldr	r3, [r7, #32]
 801790a:	891b      	ldrh	r3, [r3, #8]
 801790c:	1ad3      	subs	r3, r2, r3
 801790e:	b29b      	uxth	r3, r3
 8017910:	2201      	movs	r2, #1
 8017912:	6939      	ldr	r1, [r7, #16]
 8017914:	f7f9 ff56 	bl	80117c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017918:	6a3b      	ldr	r3, [r7, #32]
 801791a:	68db      	ldr	r3, [r3, #12]
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	4618      	mov	r0, r3
 8017920:	f7f8 f977 	bl	800fc12 <lwip_htonl>
 8017924:	4603      	mov	r3, r0
 8017926:	3301      	adds	r3, #1
 8017928:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	1ad3      	subs	r3, r2, r3
 8017932:	2b00      	cmp	r3, #0
 8017934:	da02      	bge.n	801793c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	68fa      	ldr	r2, [r7, #12]
 801793a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801793c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017940:	2200      	movs	r2, #0
 8017942:	69b9      	ldr	r1, [r7, #24]
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	f7ff fdef 	bl	8017528 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801794a:	687a      	ldr	r2, [r7, #4]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	3304      	adds	r3, #4
 8017950:	69b9      	ldr	r1, [r7, #24]
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f7ff fe26 	bl	80175a4 <tcp_output_control_segment>
 8017958:	4603      	mov	r3, r0
 801795a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801795c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017960:	4618      	mov	r0, r3
 8017962:	372c      	adds	r7, #44	; 0x2c
 8017964:	46bd      	mov	sp, r7
 8017966:	bd90      	pop	{r4, r7, pc}
 8017968:	0801f2c4 	.word	0x0801f2c4
 801796c:	0801fabc 	.word	0x0801fabc
 8017970:	0801f318 	.word	0x0801f318

08017974 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b082      	sub	sp, #8
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801797c:	f7fa f8a2 	bl	8011ac4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017980:	4b0a      	ldr	r3, [pc, #40]	; (80179ac <tcpip_tcp_timer+0x38>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d103      	bne.n	8017990 <tcpip_tcp_timer+0x1c>
 8017988:	4b09      	ldr	r3, [pc, #36]	; (80179b0 <tcpip_tcp_timer+0x3c>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d005      	beq.n	801799c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017990:	2200      	movs	r2, #0
 8017992:	4908      	ldr	r1, [pc, #32]	; (80179b4 <tcpip_tcp_timer+0x40>)
 8017994:	20fa      	movs	r0, #250	; 0xfa
 8017996:	f000 f8f3 	bl	8017b80 <sys_timeout>
 801799a:	e003      	b.n	80179a4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801799c:	4b06      	ldr	r3, [pc, #24]	; (80179b8 <tcpip_tcp_timer+0x44>)
 801799e:	2200      	movs	r2, #0
 80179a0:	601a      	str	r2, [r3, #0]
  }
}
 80179a2:	bf00      	nop
 80179a4:	bf00      	nop
 80179a6:	3708      	adds	r7, #8
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}
 80179ac:	200071a8 	.word	0x200071a8
 80179b0:	200071ac 	.word	0x200071ac
 80179b4:	08017975 	.word	0x08017975
 80179b8:	200071f4 	.word	0x200071f4

080179bc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80179c0:	4b0a      	ldr	r3, [pc, #40]	; (80179ec <tcp_timer_needed+0x30>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d10f      	bne.n	80179e8 <tcp_timer_needed+0x2c>
 80179c8:	4b09      	ldr	r3, [pc, #36]	; (80179f0 <tcp_timer_needed+0x34>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d103      	bne.n	80179d8 <tcp_timer_needed+0x1c>
 80179d0:	4b08      	ldr	r3, [pc, #32]	; (80179f4 <tcp_timer_needed+0x38>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d007      	beq.n	80179e8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80179d8:	4b04      	ldr	r3, [pc, #16]	; (80179ec <tcp_timer_needed+0x30>)
 80179da:	2201      	movs	r2, #1
 80179dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80179de:	2200      	movs	r2, #0
 80179e0:	4905      	ldr	r1, [pc, #20]	; (80179f8 <tcp_timer_needed+0x3c>)
 80179e2:	20fa      	movs	r0, #250	; 0xfa
 80179e4:	f000 f8cc 	bl	8017b80 <sys_timeout>
  }
}
 80179e8:	bf00      	nop
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	200071f4 	.word	0x200071f4
 80179f0:	200071a8 	.word	0x200071a8
 80179f4:	200071ac 	.word	0x200071ac
 80179f8:	08017975 	.word	0x08017975

080179fc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b086      	sub	sp, #24
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	60f8      	str	r0, [r7, #12]
 8017a04:	60b9      	str	r1, [r7, #8]
 8017a06:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017a08:	2006      	movs	r0, #6
 8017a0a:	f7f8 fe0b 	bl	8010624 <memp_malloc>
 8017a0e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017a10:	693b      	ldr	r3, [r7, #16]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d109      	bne.n	8017a2a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017a16:	693b      	ldr	r3, [r7, #16]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d151      	bne.n	8017ac0 <sys_timeout_abs+0xc4>
 8017a1c:	4b2a      	ldr	r3, [pc, #168]	; (8017ac8 <sys_timeout_abs+0xcc>)
 8017a1e:	22be      	movs	r2, #190	; 0xbe
 8017a20:	492a      	ldr	r1, [pc, #168]	; (8017acc <sys_timeout_abs+0xd0>)
 8017a22:	482b      	ldr	r0, [pc, #172]	; (8017ad0 <sys_timeout_abs+0xd4>)
 8017a24:	f003 fb84 	bl	801b130 <iprintf>
    return;
 8017a28:	e04a      	b.n	8017ac0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017a2a:	693b      	ldr	r3, [r7, #16]
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017a30:	693b      	ldr	r3, [r7, #16]
 8017a32:	68ba      	ldr	r2, [r7, #8]
 8017a34:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017a36:	693b      	ldr	r3, [r7, #16]
 8017a38:	687a      	ldr	r2, [r7, #4]
 8017a3a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017a3c:	693b      	ldr	r3, [r7, #16]
 8017a3e:	68fa      	ldr	r2, [r7, #12]
 8017a40:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017a42:	4b24      	ldr	r3, [pc, #144]	; (8017ad4 <sys_timeout_abs+0xd8>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d103      	bne.n	8017a52 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017a4a:	4a22      	ldr	r2, [pc, #136]	; (8017ad4 <sys_timeout_abs+0xd8>)
 8017a4c:	693b      	ldr	r3, [r7, #16]
 8017a4e:	6013      	str	r3, [r2, #0]
    return;
 8017a50:	e037      	b.n	8017ac2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	685a      	ldr	r2, [r3, #4]
 8017a56:	4b1f      	ldr	r3, [pc, #124]	; (8017ad4 <sys_timeout_abs+0xd8>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	685b      	ldr	r3, [r3, #4]
 8017a5c:	1ad3      	subs	r3, r2, r3
 8017a5e:	0fdb      	lsrs	r3, r3, #31
 8017a60:	f003 0301 	and.w	r3, r3, #1
 8017a64:	b2db      	uxtb	r3, r3
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d007      	beq.n	8017a7a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017a6a:	4b1a      	ldr	r3, [pc, #104]	; (8017ad4 <sys_timeout_abs+0xd8>)
 8017a6c:	681a      	ldr	r2, [r3, #0]
 8017a6e:	693b      	ldr	r3, [r7, #16]
 8017a70:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017a72:	4a18      	ldr	r2, [pc, #96]	; (8017ad4 <sys_timeout_abs+0xd8>)
 8017a74:	693b      	ldr	r3, [r7, #16]
 8017a76:	6013      	str	r3, [r2, #0]
 8017a78:	e023      	b.n	8017ac2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017a7a:	4b16      	ldr	r3, [pc, #88]	; (8017ad4 <sys_timeout_abs+0xd8>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	617b      	str	r3, [r7, #20]
 8017a80:	e01a      	b.n	8017ab8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017a82:	697b      	ldr	r3, [r7, #20]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d00b      	beq.n	8017aa2 <sys_timeout_abs+0xa6>
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	685a      	ldr	r2, [r3, #4]
 8017a8e:	697b      	ldr	r3, [r7, #20]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	685b      	ldr	r3, [r3, #4]
 8017a94:	1ad3      	subs	r3, r2, r3
 8017a96:	0fdb      	lsrs	r3, r3, #31
 8017a98:	f003 0301 	and.w	r3, r3, #1
 8017a9c:	b2db      	uxtb	r3, r3
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d007      	beq.n	8017ab2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017aa2:	697b      	ldr	r3, [r7, #20]
 8017aa4:	681a      	ldr	r2, [r3, #0]
 8017aa6:	693b      	ldr	r3, [r7, #16]
 8017aa8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017aaa:	697b      	ldr	r3, [r7, #20]
 8017aac:	693a      	ldr	r2, [r7, #16]
 8017aae:	601a      	str	r2, [r3, #0]
        break;
 8017ab0:	e007      	b.n	8017ac2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017ab2:	697b      	ldr	r3, [r7, #20]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	617b      	str	r3, [r7, #20]
 8017ab8:	697b      	ldr	r3, [r7, #20]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d1e1      	bne.n	8017a82 <sys_timeout_abs+0x86>
 8017abe:	e000      	b.n	8017ac2 <sys_timeout_abs+0xc6>
    return;
 8017ac0:	bf00      	nop
      }
    }
  }
}
 8017ac2:	3718      	adds	r7, #24
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}
 8017ac8:	0801fae0 	.word	0x0801fae0
 8017acc:	0801fb14 	.word	0x0801fb14
 8017ad0:	0801fb54 	.word	0x0801fb54
 8017ad4:	200071ec 	.word	0x200071ec

08017ad8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b086      	sub	sp, #24
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017ae4:	697b      	ldr	r3, [r7, #20]
 8017ae6:	685b      	ldr	r3, [r3, #4]
 8017ae8:	4798      	blx	r3

  now = sys_now();
 8017aea:	f7f7 fe35 	bl	800f758 <sys_now>
 8017aee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	681a      	ldr	r2, [r3, #0]
 8017af4:	4b0f      	ldr	r3, [pc, #60]	; (8017b34 <lwip_cyclic_timer+0x5c>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	4413      	add	r3, r2
 8017afa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017afc:	68fa      	ldr	r2, [r7, #12]
 8017afe:	693b      	ldr	r3, [r7, #16]
 8017b00:	1ad3      	subs	r3, r2, r3
 8017b02:	0fdb      	lsrs	r3, r3, #31
 8017b04:	f003 0301 	and.w	r3, r3, #1
 8017b08:	b2db      	uxtb	r3, r3
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d009      	beq.n	8017b22 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017b0e:	697b      	ldr	r3, [r7, #20]
 8017b10:	681a      	ldr	r2, [r3, #0]
 8017b12:	693b      	ldr	r3, [r7, #16]
 8017b14:	4413      	add	r3, r2
 8017b16:	687a      	ldr	r2, [r7, #4]
 8017b18:	4907      	ldr	r1, [pc, #28]	; (8017b38 <lwip_cyclic_timer+0x60>)
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	f7ff ff6e 	bl	80179fc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017b20:	e004      	b.n	8017b2c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017b22:	687a      	ldr	r2, [r7, #4]
 8017b24:	4904      	ldr	r1, [pc, #16]	; (8017b38 <lwip_cyclic_timer+0x60>)
 8017b26:	68f8      	ldr	r0, [r7, #12]
 8017b28:	f7ff ff68 	bl	80179fc <sys_timeout_abs>
}
 8017b2c:	bf00      	nop
 8017b2e:	3718      	adds	r7, #24
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bd80      	pop	{r7, pc}
 8017b34:	200071f0 	.word	0x200071f0
 8017b38:	08017ad9 	.word	0x08017ad9

08017b3c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b082      	sub	sp, #8
 8017b40:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017b42:	2301      	movs	r3, #1
 8017b44:	607b      	str	r3, [r7, #4]
 8017b46:	e00e      	b.n	8017b66 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017b48:	4a0b      	ldr	r2, [pc, #44]	; (8017b78 <sys_timeouts_init+0x3c>)
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	00db      	lsls	r3, r3, #3
 8017b54:	4a08      	ldr	r2, [pc, #32]	; (8017b78 <sys_timeouts_init+0x3c>)
 8017b56:	4413      	add	r3, r2
 8017b58:	461a      	mov	r2, r3
 8017b5a:	4908      	ldr	r1, [pc, #32]	; (8017b7c <sys_timeouts_init+0x40>)
 8017b5c:	f000 f810 	bl	8017b80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	3301      	adds	r3, #1
 8017b64:	607b      	str	r3, [r7, #4]
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	2b02      	cmp	r3, #2
 8017b6a:	d9ed      	bls.n	8017b48 <sys_timeouts_init+0xc>
  }
}
 8017b6c:	bf00      	nop
 8017b6e:	bf00      	nop
 8017b70:	3708      	adds	r7, #8
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}
 8017b76:	bf00      	nop
 8017b78:	0802070c 	.word	0x0802070c
 8017b7c:	08017ad9 	.word	0x08017ad9

08017b80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b086      	sub	sp, #24
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	60f8      	str	r0, [r7, #12]
 8017b88:	60b9      	str	r1, [r7, #8]
 8017b8a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017b92:	d306      	bcc.n	8017ba2 <sys_timeout+0x22>
 8017b94:	4b0a      	ldr	r3, [pc, #40]	; (8017bc0 <sys_timeout+0x40>)
 8017b96:	f240 1229 	movw	r2, #297	; 0x129
 8017b9a:	490a      	ldr	r1, [pc, #40]	; (8017bc4 <sys_timeout+0x44>)
 8017b9c:	480a      	ldr	r0, [pc, #40]	; (8017bc8 <sys_timeout+0x48>)
 8017b9e:	f003 fac7 	bl	801b130 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017ba2:	f7f7 fdd9 	bl	800f758 <sys_now>
 8017ba6:	4602      	mov	r2, r0
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	4413      	add	r3, r2
 8017bac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	68b9      	ldr	r1, [r7, #8]
 8017bb2:	6978      	ldr	r0, [r7, #20]
 8017bb4:	f7ff ff22 	bl	80179fc <sys_timeout_abs>
#endif
}
 8017bb8:	bf00      	nop
 8017bba:	3718      	adds	r7, #24
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}
 8017bc0:	0801fae0 	.word	0x0801fae0
 8017bc4:	0801fb7c 	.word	0x0801fb7c
 8017bc8:	0801fb54 	.word	0x0801fb54

08017bcc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b084      	sub	sp, #16
 8017bd0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017bd2:	f7f7 fdc1 	bl	800f758 <sys_now>
 8017bd6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017bd8:	4b1a      	ldr	r3, [pc, #104]	; (8017c44 <sys_check_timeouts+0x78>)
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	b2db      	uxtb	r3, r3
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d001      	beq.n	8017be6 <sys_check_timeouts+0x1a>
 8017be2:	f7f9 f8cb 	bl	8010d7c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017be6:	4b18      	ldr	r3, [pc, #96]	; (8017c48 <sys_check_timeouts+0x7c>)
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017bec:	68bb      	ldr	r3, [r7, #8]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d022      	beq.n	8017c38 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	685b      	ldr	r3, [r3, #4]
 8017bf6:	68fa      	ldr	r2, [r7, #12]
 8017bf8:	1ad3      	subs	r3, r2, r3
 8017bfa:	0fdb      	lsrs	r3, r3, #31
 8017bfc:	f003 0301 	and.w	r3, r3, #1
 8017c00:	b2db      	uxtb	r3, r3
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d11a      	bne.n	8017c3c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017c06:	68bb      	ldr	r3, [r7, #8]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	4a0f      	ldr	r2, [pc, #60]	; (8017c48 <sys_check_timeouts+0x7c>)
 8017c0c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017c0e:	68bb      	ldr	r3, [r7, #8]
 8017c10:	689b      	ldr	r3, [r3, #8]
 8017c12:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	68db      	ldr	r3, [r3, #12]
 8017c18:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017c1a:	68bb      	ldr	r3, [r7, #8]
 8017c1c:	685b      	ldr	r3, [r3, #4]
 8017c1e:	4a0b      	ldr	r2, [pc, #44]	; (8017c4c <sys_check_timeouts+0x80>)
 8017c20:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017c22:	68b9      	ldr	r1, [r7, #8]
 8017c24:	2006      	movs	r0, #6
 8017c26:	f7f8 fd6d 	bl	8010704 <memp_free>
    if (handler != NULL) {
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d0d3      	beq.n	8017bd8 <sys_check_timeouts+0xc>
      handler(arg);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6838      	ldr	r0, [r7, #0]
 8017c34:	4798      	blx	r3
  do {
 8017c36:	e7cf      	b.n	8017bd8 <sys_check_timeouts+0xc>
      return;
 8017c38:	bf00      	nop
 8017c3a:	e000      	b.n	8017c3e <sys_check_timeouts+0x72>
      return;
 8017c3c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017c3e:	3710      	adds	r7, #16
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}
 8017c44:	20007199 	.word	0x20007199
 8017c48:	200071ec 	.word	0x200071ec
 8017c4c:	200071f0 	.word	0x200071f0

08017c50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017c54:	f002 fd32 	bl	801a6bc <rand>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017c60:	b29b      	uxth	r3, r3
 8017c62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	4b01      	ldr	r3, [pc, #4]	; (8017c70 <udp_init+0x20>)
 8017c6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017c6c:	bf00      	nop
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	20000164 	.word	0x20000164

08017c74 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b084      	sub	sp, #16
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	60f8      	str	r0, [r7, #12]
 8017c7c:	60b9      	str	r1, [r7, #8]
 8017c7e:	4613      	mov	r3, r2
 8017c80:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d105      	bne.n	8017c94 <udp_input_local_match+0x20>
 8017c88:	4b27      	ldr	r3, [pc, #156]	; (8017d28 <udp_input_local_match+0xb4>)
 8017c8a:	2287      	movs	r2, #135	; 0x87
 8017c8c:	4927      	ldr	r1, [pc, #156]	; (8017d2c <udp_input_local_match+0xb8>)
 8017c8e:	4828      	ldr	r0, [pc, #160]	; (8017d30 <udp_input_local_match+0xbc>)
 8017c90:	f003 fa4e 	bl	801b130 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d105      	bne.n	8017ca6 <udp_input_local_match+0x32>
 8017c9a:	4b23      	ldr	r3, [pc, #140]	; (8017d28 <udp_input_local_match+0xb4>)
 8017c9c:	2288      	movs	r2, #136	; 0x88
 8017c9e:	4925      	ldr	r1, [pc, #148]	; (8017d34 <udp_input_local_match+0xc0>)
 8017ca0:	4823      	ldr	r0, [pc, #140]	; (8017d30 <udp_input_local_match+0xbc>)
 8017ca2:	f003 fa45 	bl	801b130 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	7a1b      	ldrb	r3, [r3, #8]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d00b      	beq.n	8017cc6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	7a1a      	ldrb	r2, [r3, #8]
 8017cb2:	4b21      	ldr	r3, [pc, #132]	; (8017d38 <udp_input_local_match+0xc4>)
 8017cb4:	685b      	ldr	r3, [r3, #4]
 8017cb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017cba:	3301      	adds	r3, #1
 8017cbc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017cbe:	429a      	cmp	r2, r3
 8017cc0:	d001      	beq.n	8017cc6 <udp_input_local_match+0x52>
    return 0;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	e02b      	b.n	8017d1e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017cc6:	79fb      	ldrb	r3, [r7, #7]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d018      	beq.n	8017cfe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d013      	beq.n	8017cfa <udp_input_local_match+0x86>
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d00f      	beq.n	8017cfa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017cda:	4b17      	ldr	r3, [pc, #92]	; (8017d38 <udp_input_local_match+0xc4>)
 8017cdc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ce2:	d00a      	beq.n	8017cfa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	681a      	ldr	r2, [r3, #0]
 8017ce8:	4b13      	ldr	r3, [pc, #76]	; (8017d38 <udp_input_local_match+0xc4>)
 8017cea:	695b      	ldr	r3, [r3, #20]
 8017cec:	405a      	eors	r2, r3
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	3308      	adds	r3, #8
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d110      	bne.n	8017d1c <udp_input_local_match+0xa8>
          return 1;
 8017cfa:	2301      	movs	r3, #1
 8017cfc:	e00f      	b.n	8017d1e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d009      	beq.n	8017d18 <udp_input_local_match+0xa4>
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d005      	beq.n	8017d18 <udp_input_local_match+0xa4>
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	681a      	ldr	r2, [r3, #0]
 8017d10:	4b09      	ldr	r3, [pc, #36]	; (8017d38 <udp_input_local_match+0xc4>)
 8017d12:	695b      	ldr	r3, [r3, #20]
 8017d14:	429a      	cmp	r2, r3
 8017d16:	d101      	bne.n	8017d1c <udp_input_local_match+0xa8>
        return 1;
 8017d18:	2301      	movs	r3, #1
 8017d1a:	e000      	b.n	8017d1e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017d1c:	2300      	movs	r3, #0
}
 8017d1e:	4618      	mov	r0, r3
 8017d20:	3710      	adds	r7, #16
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}
 8017d26:	bf00      	nop
 8017d28:	0801fbc8 	.word	0x0801fbc8
 8017d2c:	0801fbf8 	.word	0x0801fbf8
 8017d30:	0801fc1c 	.word	0x0801fc1c
 8017d34:	0801fc44 	.word	0x0801fc44
 8017d38:	200008c0 	.word	0x200008c0

08017d3c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017d3c:	b590      	push	{r4, r7, lr}
 8017d3e:	b08d      	sub	sp, #52	; 0x34
 8017d40:	af02      	add	r7, sp, #8
 8017d42:	6078      	str	r0, [r7, #4]
 8017d44:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017d46:	2300      	movs	r3, #0
 8017d48:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d105      	bne.n	8017d5c <udp_input+0x20>
 8017d50:	4b7c      	ldr	r3, [pc, #496]	; (8017f44 <udp_input+0x208>)
 8017d52:	22cf      	movs	r2, #207	; 0xcf
 8017d54:	497c      	ldr	r1, [pc, #496]	; (8017f48 <udp_input+0x20c>)
 8017d56:	487d      	ldr	r0, [pc, #500]	; (8017f4c <udp_input+0x210>)
 8017d58:	f003 f9ea 	bl	801b130 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d105      	bne.n	8017d6e <udp_input+0x32>
 8017d62:	4b78      	ldr	r3, [pc, #480]	; (8017f44 <udp_input+0x208>)
 8017d64:	22d0      	movs	r2, #208	; 0xd0
 8017d66:	497a      	ldr	r1, [pc, #488]	; (8017f50 <udp_input+0x214>)
 8017d68:	4878      	ldr	r0, [pc, #480]	; (8017f4c <udp_input+0x210>)
 8017d6a:	f003 f9e1 	bl	801b130 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	895b      	ldrh	r3, [r3, #10]
 8017d72:	2b07      	cmp	r3, #7
 8017d74:	d803      	bhi.n	8017d7e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	f7f9 fb3a 	bl	80113f0 <pbuf_free>
    goto end;
 8017d7c:	e0de      	b.n	8017f3c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017d84:	4b73      	ldr	r3, [pc, #460]	; (8017f54 <udp_input+0x218>)
 8017d86:	695b      	ldr	r3, [r3, #20]
 8017d88:	4a72      	ldr	r2, [pc, #456]	; (8017f54 <udp_input+0x218>)
 8017d8a:	6812      	ldr	r2, [r2, #0]
 8017d8c:	4611      	mov	r1, r2
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f001 fcae 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 8017d94:	4603      	mov	r3, r0
 8017d96:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017d98:	697b      	ldr	r3, [r7, #20]
 8017d9a:	881b      	ldrh	r3, [r3, #0]
 8017d9c:	b29b      	uxth	r3, r3
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7f7 ff22 	bl	800fbe8 <lwip_htons>
 8017da4:	4603      	mov	r3, r0
 8017da6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	885b      	ldrh	r3, [r3, #2]
 8017dac:	b29b      	uxth	r3, r3
 8017dae:	4618      	mov	r0, r3
 8017db0:	f7f7 ff1a 	bl	800fbe8 <lwip_htons>
 8017db4:	4603      	mov	r3, r0
 8017db6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017db8:	2300      	movs	r3, #0
 8017dba:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017dc4:	4b64      	ldr	r3, [pc, #400]	; (8017f58 <udp_input+0x21c>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8017dca:	e054      	b.n	8017e76 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dce:	8a5b      	ldrh	r3, [r3, #18]
 8017dd0:	89fa      	ldrh	r2, [r7, #14]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d14a      	bne.n	8017e6c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017dd6:	7cfb      	ldrb	r3, [r7, #19]
 8017dd8:	461a      	mov	r2, r3
 8017dda:	6839      	ldr	r1, [r7, #0]
 8017ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017dde:	f7ff ff49 	bl	8017c74 <udp_input_local_match>
 8017de2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d041      	beq.n	8017e6c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dea:	7c1b      	ldrb	r3, [r3, #16]
 8017dec:	f003 0304 	and.w	r3, r3, #4
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d11d      	bne.n	8017e30 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017df4:	69fb      	ldr	r3, [r7, #28]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d102      	bne.n	8017e00 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfc:	61fb      	str	r3, [r7, #28]
 8017dfe:	e017      	b.n	8017e30 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017e00:	7cfb      	ldrb	r3, [r7, #19]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d014      	beq.n	8017e30 <udp_input+0xf4>
 8017e06:	4b53      	ldr	r3, [pc, #332]	; (8017f54 <udp_input+0x218>)
 8017e08:	695b      	ldr	r3, [r3, #20]
 8017e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e0e:	d10f      	bne.n	8017e30 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	681a      	ldr	r2, [r3, #0]
 8017e14:	683b      	ldr	r3, [r7, #0]
 8017e16:	3304      	adds	r3, #4
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	d008      	beq.n	8017e30 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e20:	681a      	ldr	r2, [r3, #0]
 8017e22:	683b      	ldr	r3, [r7, #0]
 8017e24:	3304      	adds	r3, #4
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	d101      	bne.n	8017e30 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e32:	8a9b      	ldrh	r3, [r3, #20]
 8017e34:	8a3a      	ldrh	r2, [r7, #16]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d118      	bne.n	8017e6c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d005      	beq.n	8017e4e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e44:	685a      	ldr	r2, [r3, #4]
 8017e46:	4b43      	ldr	r3, [pc, #268]	; (8017f54 <udp_input+0x218>)
 8017e48:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d10e      	bne.n	8017e6c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017e4e:	6a3b      	ldr	r3, [r7, #32]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d014      	beq.n	8017e7e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e56:	68da      	ldr	r2, [r3, #12]
 8017e58:	6a3b      	ldr	r3, [r7, #32]
 8017e5a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017e5c:	4b3e      	ldr	r3, [pc, #248]	; (8017f58 <udp_input+0x21c>)
 8017e5e:	681a      	ldr	r2, [r3, #0]
 8017e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e62:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017e64:	4a3c      	ldr	r2, [pc, #240]	; (8017f58 <udp_input+0x21c>)
 8017e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e68:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017e6a:	e008      	b.n	8017e7e <udp_input+0x142>
      }
    }

    prev = pcb;
 8017e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e72:	68db      	ldr	r3, [r3, #12]
 8017e74:	627b      	str	r3, [r7, #36]	; 0x24
 8017e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d1a7      	bne.n	8017dcc <udp_input+0x90>
 8017e7c:	e000      	b.n	8017e80 <udp_input+0x144>
        break;
 8017e7e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d101      	bne.n	8017e8a <udp_input+0x14e>
    pcb = uncon_pcb;
 8017e86:	69fb      	ldr	r3, [r7, #28]
 8017e88:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d002      	beq.n	8017e96 <udp_input+0x15a>
    for_us = 1;
 8017e90:	2301      	movs	r3, #1
 8017e92:	76fb      	strb	r3, [r7, #27]
 8017e94:	e00a      	b.n	8017eac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017e96:	683b      	ldr	r3, [r7, #0]
 8017e98:	3304      	adds	r3, #4
 8017e9a:	681a      	ldr	r2, [r3, #0]
 8017e9c:	4b2d      	ldr	r3, [pc, #180]	; (8017f54 <udp_input+0x218>)
 8017e9e:	695b      	ldr	r3, [r3, #20]
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	bf0c      	ite	eq
 8017ea4:	2301      	moveq	r3, #1
 8017ea6:	2300      	movne	r3, #0
 8017ea8:	b2db      	uxtb	r3, r3
 8017eaa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017eac:	7efb      	ldrb	r3, [r7, #27]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d041      	beq.n	8017f36 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017eb2:	2108      	movs	r1, #8
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f7f9 fa15 	bl	80112e4 <pbuf_remove_header>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d00a      	beq.n	8017ed6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017ec0:	4b20      	ldr	r3, [pc, #128]	; (8017f44 <udp_input+0x208>)
 8017ec2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017ec6:	4925      	ldr	r1, [pc, #148]	; (8017f5c <udp_input+0x220>)
 8017ec8:	4820      	ldr	r0, [pc, #128]	; (8017f4c <udp_input+0x210>)
 8017eca:	f003 f931 	bl	801b130 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	f7f9 fa8e 	bl	80113f0 <pbuf_free>
      goto end;
 8017ed4:	e032      	b.n	8017f3c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d012      	beq.n	8017f02 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ede:	699b      	ldr	r3, [r3, #24]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d00a      	beq.n	8017efa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee6:	699c      	ldr	r4, [r3, #24]
 8017ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eea:	69d8      	ldr	r0, [r3, #28]
 8017eec:	8a3b      	ldrh	r3, [r7, #16]
 8017eee:	9300      	str	r3, [sp, #0]
 8017ef0:	4b1b      	ldr	r3, [pc, #108]	; (8017f60 <udp_input+0x224>)
 8017ef2:	687a      	ldr	r2, [r7, #4]
 8017ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ef6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017ef8:	e021      	b.n	8017f3e <udp_input+0x202>
        pbuf_free(p);
 8017efa:	6878      	ldr	r0, [r7, #4]
 8017efc:	f7f9 fa78 	bl	80113f0 <pbuf_free>
        goto end;
 8017f00:	e01c      	b.n	8017f3c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017f02:	7cfb      	ldrb	r3, [r7, #19]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d112      	bne.n	8017f2e <udp_input+0x1f2>
 8017f08:	4b12      	ldr	r3, [pc, #72]	; (8017f54 <udp_input+0x218>)
 8017f0a:	695b      	ldr	r3, [r3, #20]
 8017f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f10:	2be0      	cmp	r3, #224	; 0xe0
 8017f12:	d00c      	beq.n	8017f2e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017f14:	4b0f      	ldr	r3, [pc, #60]	; (8017f54 <udp_input+0x218>)
 8017f16:	899b      	ldrh	r3, [r3, #12]
 8017f18:	3308      	adds	r3, #8
 8017f1a:	b29b      	uxth	r3, r3
 8017f1c:	b21b      	sxth	r3, r3
 8017f1e:	4619      	mov	r1, r3
 8017f20:	6878      	ldr	r0, [r7, #4]
 8017f22:	f7f9 fa52 	bl	80113ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017f26:	2103      	movs	r1, #3
 8017f28:	6878      	ldr	r0, [r7, #4]
 8017f2a:	f001 f8b7 	bl	801909c <icmp_dest_unreach>
      pbuf_free(p);
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f7f9 fa5e 	bl	80113f0 <pbuf_free>
  return;
 8017f34:	e003      	b.n	8017f3e <udp_input+0x202>
    pbuf_free(p);
 8017f36:	6878      	ldr	r0, [r7, #4]
 8017f38:	f7f9 fa5a 	bl	80113f0 <pbuf_free>
  return;
 8017f3c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017f3e:	372c      	adds	r7, #44	; 0x2c
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd90      	pop	{r4, r7, pc}
 8017f44:	0801fbc8 	.word	0x0801fbc8
 8017f48:	0801fc6c 	.word	0x0801fc6c
 8017f4c:	0801fc1c 	.word	0x0801fc1c
 8017f50:	0801fc84 	.word	0x0801fc84
 8017f54:	200008c0 	.word	0x200008c0
 8017f58:	200071f8 	.word	0x200071f8
 8017f5c:	0801fca0 	.word	0x0801fca0
 8017f60:	200008d0 	.word	0x200008d0

08017f64 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017f64:	b480      	push	{r7}
 8017f66:	b085      	sub	sp, #20
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
 8017f6c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d01e      	beq.n	8017fb2 <udp_netif_ip_addr_changed+0x4e>
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d01a      	beq.n	8017fb2 <udp_netif_ip_addr_changed+0x4e>
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d017      	beq.n	8017fb2 <udp_netif_ip_addr_changed+0x4e>
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d013      	beq.n	8017fb2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017f8a:	4b0d      	ldr	r3, [pc, #52]	; (8017fc0 <udp_netif_ip_addr_changed+0x5c>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	60fb      	str	r3, [r7, #12]
 8017f90:	e00c      	b.n	8017fac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	681a      	ldr	r2, [r3, #0]
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d103      	bne.n	8017fa6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017f9e:	683b      	ldr	r3, [r7, #0]
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	68db      	ldr	r3, [r3, #12]
 8017faa:	60fb      	str	r3, [r7, #12]
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d1ef      	bne.n	8017f92 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017fb2:	bf00      	nop
 8017fb4:	3714      	adds	r7, #20
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fbc:	4770      	bx	lr
 8017fbe:	bf00      	nop
 8017fc0:	200071f8 	.word	0x200071f8

08017fc4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b082      	sub	sp, #8
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017fcc:	4915      	ldr	r1, [pc, #84]	; (8018024 <etharp_free_entry+0x60>)
 8017fce:	687a      	ldr	r2, [r7, #4]
 8017fd0:	4613      	mov	r3, r2
 8017fd2:	005b      	lsls	r3, r3, #1
 8017fd4:	4413      	add	r3, r2
 8017fd6:	00db      	lsls	r3, r3, #3
 8017fd8:	440b      	add	r3, r1
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d013      	beq.n	8018008 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017fe0:	4910      	ldr	r1, [pc, #64]	; (8018024 <etharp_free_entry+0x60>)
 8017fe2:	687a      	ldr	r2, [r7, #4]
 8017fe4:	4613      	mov	r3, r2
 8017fe6:	005b      	lsls	r3, r3, #1
 8017fe8:	4413      	add	r3, r2
 8017fea:	00db      	lsls	r3, r3, #3
 8017fec:	440b      	add	r3, r1
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7f9 f9fd 	bl	80113f0 <pbuf_free>
    arp_table[i].q = NULL;
 8017ff6:	490b      	ldr	r1, [pc, #44]	; (8018024 <etharp_free_entry+0x60>)
 8017ff8:	687a      	ldr	r2, [r7, #4]
 8017ffa:	4613      	mov	r3, r2
 8017ffc:	005b      	lsls	r3, r3, #1
 8017ffe:	4413      	add	r3, r2
 8018000:	00db      	lsls	r3, r3, #3
 8018002:	440b      	add	r3, r1
 8018004:	2200      	movs	r2, #0
 8018006:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018008:	4906      	ldr	r1, [pc, #24]	; (8018024 <etharp_free_entry+0x60>)
 801800a:	687a      	ldr	r2, [r7, #4]
 801800c:	4613      	mov	r3, r2
 801800e:	005b      	lsls	r3, r3, #1
 8018010:	4413      	add	r3, r2
 8018012:	00db      	lsls	r3, r3, #3
 8018014:	440b      	add	r3, r1
 8018016:	3314      	adds	r3, #20
 8018018:	2200      	movs	r2, #0
 801801a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801801c:	bf00      	nop
 801801e:	3708      	adds	r7, #8
 8018020:	46bd      	mov	sp, r7
 8018022:	bd80      	pop	{r7, pc}
 8018024:	200071fc 	.word	0x200071fc

08018028 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b082      	sub	sp, #8
 801802c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801802e:	2300      	movs	r3, #0
 8018030:	607b      	str	r3, [r7, #4]
 8018032:	e096      	b.n	8018162 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018034:	494f      	ldr	r1, [pc, #316]	; (8018174 <etharp_tmr+0x14c>)
 8018036:	687a      	ldr	r2, [r7, #4]
 8018038:	4613      	mov	r3, r2
 801803a:	005b      	lsls	r3, r3, #1
 801803c:	4413      	add	r3, r2
 801803e:	00db      	lsls	r3, r3, #3
 8018040:	440b      	add	r3, r1
 8018042:	3314      	adds	r3, #20
 8018044:	781b      	ldrb	r3, [r3, #0]
 8018046:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018048:	78fb      	ldrb	r3, [r7, #3]
 801804a:	2b00      	cmp	r3, #0
 801804c:	f000 8086 	beq.w	801815c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018050:	4948      	ldr	r1, [pc, #288]	; (8018174 <etharp_tmr+0x14c>)
 8018052:	687a      	ldr	r2, [r7, #4]
 8018054:	4613      	mov	r3, r2
 8018056:	005b      	lsls	r3, r3, #1
 8018058:	4413      	add	r3, r2
 801805a:	00db      	lsls	r3, r3, #3
 801805c:	440b      	add	r3, r1
 801805e:	3312      	adds	r3, #18
 8018060:	881b      	ldrh	r3, [r3, #0]
 8018062:	3301      	adds	r3, #1
 8018064:	b298      	uxth	r0, r3
 8018066:	4943      	ldr	r1, [pc, #268]	; (8018174 <etharp_tmr+0x14c>)
 8018068:	687a      	ldr	r2, [r7, #4]
 801806a:	4613      	mov	r3, r2
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	4413      	add	r3, r2
 8018070:	00db      	lsls	r3, r3, #3
 8018072:	440b      	add	r3, r1
 8018074:	3312      	adds	r3, #18
 8018076:	4602      	mov	r2, r0
 8018078:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801807a:	493e      	ldr	r1, [pc, #248]	; (8018174 <etharp_tmr+0x14c>)
 801807c:	687a      	ldr	r2, [r7, #4]
 801807e:	4613      	mov	r3, r2
 8018080:	005b      	lsls	r3, r3, #1
 8018082:	4413      	add	r3, r2
 8018084:	00db      	lsls	r3, r3, #3
 8018086:	440b      	add	r3, r1
 8018088:	3312      	adds	r3, #18
 801808a:	881b      	ldrh	r3, [r3, #0]
 801808c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018090:	d215      	bcs.n	80180be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018092:	4938      	ldr	r1, [pc, #224]	; (8018174 <etharp_tmr+0x14c>)
 8018094:	687a      	ldr	r2, [r7, #4]
 8018096:	4613      	mov	r3, r2
 8018098:	005b      	lsls	r3, r3, #1
 801809a:	4413      	add	r3, r2
 801809c:	00db      	lsls	r3, r3, #3
 801809e:	440b      	add	r3, r1
 80180a0:	3314      	adds	r3, #20
 80180a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80180a4:	2b01      	cmp	r3, #1
 80180a6:	d10e      	bne.n	80180c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80180a8:	4932      	ldr	r1, [pc, #200]	; (8018174 <etharp_tmr+0x14c>)
 80180aa:	687a      	ldr	r2, [r7, #4]
 80180ac:	4613      	mov	r3, r2
 80180ae:	005b      	lsls	r3, r3, #1
 80180b0:	4413      	add	r3, r2
 80180b2:	00db      	lsls	r3, r3, #3
 80180b4:	440b      	add	r3, r1
 80180b6:	3312      	adds	r3, #18
 80180b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80180ba:	2b04      	cmp	r3, #4
 80180bc:	d903      	bls.n	80180c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	f7ff ff80 	bl	8017fc4 <etharp_free_entry>
 80180c4:	e04a      	b.n	801815c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80180c6:	492b      	ldr	r1, [pc, #172]	; (8018174 <etharp_tmr+0x14c>)
 80180c8:	687a      	ldr	r2, [r7, #4]
 80180ca:	4613      	mov	r3, r2
 80180cc:	005b      	lsls	r3, r3, #1
 80180ce:	4413      	add	r3, r2
 80180d0:	00db      	lsls	r3, r3, #3
 80180d2:	440b      	add	r3, r1
 80180d4:	3314      	adds	r3, #20
 80180d6:	781b      	ldrb	r3, [r3, #0]
 80180d8:	2b03      	cmp	r3, #3
 80180da:	d10a      	bne.n	80180f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80180dc:	4925      	ldr	r1, [pc, #148]	; (8018174 <etharp_tmr+0x14c>)
 80180de:	687a      	ldr	r2, [r7, #4]
 80180e0:	4613      	mov	r3, r2
 80180e2:	005b      	lsls	r3, r3, #1
 80180e4:	4413      	add	r3, r2
 80180e6:	00db      	lsls	r3, r3, #3
 80180e8:	440b      	add	r3, r1
 80180ea:	3314      	adds	r3, #20
 80180ec:	2204      	movs	r2, #4
 80180ee:	701a      	strb	r2, [r3, #0]
 80180f0:	e034      	b.n	801815c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80180f2:	4920      	ldr	r1, [pc, #128]	; (8018174 <etharp_tmr+0x14c>)
 80180f4:	687a      	ldr	r2, [r7, #4]
 80180f6:	4613      	mov	r3, r2
 80180f8:	005b      	lsls	r3, r3, #1
 80180fa:	4413      	add	r3, r2
 80180fc:	00db      	lsls	r3, r3, #3
 80180fe:	440b      	add	r3, r1
 8018100:	3314      	adds	r3, #20
 8018102:	781b      	ldrb	r3, [r3, #0]
 8018104:	2b04      	cmp	r3, #4
 8018106:	d10a      	bne.n	801811e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018108:	491a      	ldr	r1, [pc, #104]	; (8018174 <etharp_tmr+0x14c>)
 801810a:	687a      	ldr	r2, [r7, #4]
 801810c:	4613      	mov	r3, r2
 801810e:	005b      	lsls	r3, r3, #1
 8018110:	4413      	add	r3, r2
 8018112:	00db      	lsls	r3, r3, #3
 8018114:	440b      	add	r3, r1
 8018116:	3314      	adds	r3, #20
 8018118:	2202      	movs	r2, #2
 801811a:	701a      	strb	r2, [r3, #0]
 801811c:	e01e      	b.n	801815c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801811e:	4915      	ldr	r1, [pc, #84]	; (8018174 <etharp_tmr+0x14c>)
 8018120:	687a      	ldr	r2, [r7, #4]
 8018122:	4613      	mov	r3, r2
 8018124:	005b      	lsls	r3, r3, #1
 8018126:	4413      	add	r3, r2
 8018128:	00db      	lsls	r3, r3, #3
 801812a:	440b      	add	r3, r1
 801812c:	3314      	adds	r3, #20
 801812e:	781b      	ldrb	r3, [r3, #0]
 8018130:	2b01      	cmp	r3, #1
 8018132:	d113      	bne.n	801815c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018134:	490f      	ldr	r1, [pc, #60]	; (8018174 <etharp_tmr+0x14c>)
 8018136:	687a      	ldr	r2, [r7, #4]
 8018138:	4613      	mov	r3, r2
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	4413      	add	r3, r2
 801813e:	00db      	lsls	r3, r3, #3
 8018140:	440b      	add	r3, r1
 8018142:	3308      	adds	r3, #8
 8018144:	6818      	ldr	r0, [r3, #0]
 8018146:	687a      	ldr	r2, [r7, #4]
 8018148:	4613      	mov	r3, r2
 801814a:	005b      	lsls	r3, r3, #1
 801814c:	4413      	add	r3, r2
 801814e:	00db      	lsls	r3, r3, #3
 8018150:	4a08      	ldr	r2, [pc, #32]	; (8018174 <etharp_tmr+0x14c>)
 8018152:	4413      	add	r3, r2
 8018154:	3304      	adds	r3, #4
 8018156:	4619      	mov	r1, r3
 8018158:	f000 fe6e 	bl	8018e38 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	3301      	adds	r3, #1
 8018160:	607b      	str	r3, [r7, #4]
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	2b09      	cmp	r3, #9
 8018166:	f77f af65 	ble.w	8018034 <etharp_tmr+0xc>
      }
    }
  }
}
 801816a:	bf00      	nop
 801816c:	bf00      	nop
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}
 8018174:	200071fc 	.word	0x200071fc

08018178 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b08a      	sub	sp, #40	; 0x28
 801817c:	af00      	add	r7, sp, #0
 801817e:	60f8      	str	r0, [r7, #12]
 8018180:	460b      	mov	r3, r1
 8018182:	607a      	str	r2, [r7, #4]
 8018184:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018186:	230a      	movs	r3, #10
 8018188:	84fb      	strh	r3, [r7, #38]	; 0x26
 801818a:	230a      	movs	r3, #10
 801818c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801818e:	230a      	movs	r3, #10
 8018190:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018192:	2300      	movs	r3, #0
 8018194:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018196:	230a      	movs	r3, #10
 8018198:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801819a:	2300      	movs	r3, #0
 801819c:	83bb      	strh	r3, [r7, #28]
 801819e:	2300      	movs	r3, #0
 80181a0:	837b      	strh	r3, [r7, #26]
 80181a2:	2300      	movs	r3, #0
 80181a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181a6:	2300      	movs	r3, #0
 80181a8:	843b      	strh	r3, [r7, #32]
 80181aa:	e0ae      	b.n	801830a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80181ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181b0:	49a6      	ldr	r1, [pc, #664]	; (801844c <etharp_find_entry+0x2d4>)
 80181b2:	4613      	mov	r3, r2
 80181b4:	005b      	lsls	r3, r3, #1
 80181b6:	4413      	add	r3, r2
 80181b8:	00db      	lsls	r3, r3, #3
 80181ba:	440b      	add	r3, r1
 80181bc:	3314      	adds	r3, #20
 80181be:	781b      	ldrb	r3, [r3, #0]
 80181c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80181c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80181c6:	2b0a      	cmp	r3, #10
 80181c8:	d105      	bne.n	80181d6 <etharp_find_entry+0x5e>
 80181ca:	7dfb      	ldrb	r3, [r7, #23]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d102      	bne.n	80181d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80181d0:	8c3b      	ldrh	r3, [r7, #32]
 80181d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80181d4:	e095      	b.n	8018302 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80181d6:	7dfb      	ldrb	r3, [r7, #23]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	f000 8092 	beq.w	8018302 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80181de:	7dfb      	ldrb	r3, [r7, #23]
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d009      	beq.n	80181f8 <etharp_find_entry+0x80>
 80181e4:	7dfb      	ldrb	r3, [r7, #23]
 80181e6:	2b01      	cmp	r3, #1
 80181e8:	d806      	bhi.n	80181f8 <etharp_find_entry+0x80>
 80181ea:	4b99      	ldr	r3, [pc, #612]	; (8018450 <etharp_find_entry+0x2d8>)
 80181ec:	f240 1223 	movw	r2, #291	; 0x123
 80181f0:	4998      	ldr	r1, [pc, #608]	; (8018454 <etharp_find_entry+0x2dc>)
 80181f2:	4899      	ldr	r0, [pc, #612]	; (8018458 <etharp_find_entry+0x2e0>)
 80181f4:	f002 ff9c 	bl	801b130 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d020      	beq.n	8018240 <etharp_find_entry+0xc8>
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	6819      	ldr	r1, [r3, #0]
 8018202:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018206:	4891      	ldr	r0, [pc, #580]	; (801844c <etharp_find_entry+0x2d4>)
 8018208:	4613      	mov	r3, r2
 801820a:	005b      	lsls	r3, r3, #1
 801820c:	4413      	add	r3, r2
 801820e:	00db      	lsls	r3, r3, #3
 8018210:	4403      	add	r3, r0
 8018212:	3304      	adds	r3, #4
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	4299      	cmp	r1, r3
 8018218:	d112      	bne.n	8018240 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d00c      	beq.n	801823a <etharp_find_entry+0xc2>
 8018220:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018224:	4989      	ldr	r1, [pc, #548]	; (801844c <etharp_find_entry+0x2d4>)
 8018226:	4613      	mov	r3, r2
 8018228:	005b      	lsls	r3, r3, #1
 801822a:	4413      	add	r3, r2
 801822c:	00db      	lsls	r3, r3, #3
 801822e:	440b      	add	r3, r1
 8018230:	3308      	adds	r3, #8
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	429a      	cmp	r2, r3
 8018238:	d102      	bne.n	8018240 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801823a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801823e:	e100      	b.n	8018442 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018240:	7dfb      	ldrb	r3, [r7, #23]
 8018242:	2b01      	cmp	r3, #1
 8018244:	d140      	bne.n	80182c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018246:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801824a:	4980      	ldr	r1, [pc, #512]	; (801844c <etharp_find_entry+0x2d4>)
 801824c:	4613      	mov	r3, r2
 801824e:	005b      	lsls	r3, r3, #1
 8018250:	4413      	add	r3, r2
 8018252:	00db      	lsls	r3, r3, #3
 8018254:	440b      	add	r3, r1
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d01a      	beq.n	8018292 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801825c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018260:	497a      	ldr	r1, [pc, #488]	; (801844c <etharp_find_entry+0x2d4>)
 8018262:	4613      	mov	r3, r2
 8018264:	005b      	lsls	r3, r3, #1
 8018266:	4413      	add	r3, r2
 8018268:	00db      	lsls	r3, r3, #3
 801826a:	440b      	add	r3, r1
 801826c:	3312      	adds	r3, #18
 801826e:	881b      	ldrh	r3, [r3, #0]
 8018270:	8bba      	ldrh	r2, [r7, #28]
 8018272:	429a      	cmp	r2, r3
 8018274:	d845      	bhi.n	8018302 <etharp_find_entry+0x18a>
            old_queue = i;
 8018276:	8c3b      	ldrh	r3, [r7, #32]
 8018278:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801827a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801827e:	4973      	ldr	r1, [pc, #460]	; (801844c <etharp_find_entry+0x2d4>)
 8018280:	4613      	mov	r3, r2
 8018282:	005b      	lsls	r3, r3, #1
 8018284:	4413      	add	r3, r2
 8018286:	00db      	lsls	r3, r3, #3
 8018288:	440b      	add	r3, r1
 801828a:	3312      	adds	r3, #18
 801828c:	881b      	ldrh	r3, [r3, #0]
 801828e:	83bb      	strh	r3, [r7, #28]
 8018290:	e037      	b.n	8018302 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018296:	496d      	ldr	r1, [pc, #436]	; (801844c <etharp_find_entry+0x2d4>)
 8018298:	4613      	mov	r3, r2
 801829a:	005b      	lsls	r3, r3, #1
 801829c:	4413      	add	r3, r2
 801829e:	00db      	lsls	r3, r3, #3
 80182a0:	440b      	add	r3, r1
 80182a2:	3312      	adds	r3, #18
 80182a4:	881b      	ldrh	r3, [r3, #0]
 80182a6:	8b7a      	ldrh	r2, [r7, #26]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d82a      	bhi.n	8018302 <etharp_find_entry+0x18a>
            old_pending = i;
 80182ac:	8c3b      	ldrh	r3, [r7, #32]
 80182ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80182b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182b4:	4965      	ldr	r1, [pc, #404]	; (801844c <etharp_find_entry+0x2d4>)
 80182b6:	4613      	mov	r3, r2
 80182b8:	005b      	lsls	r3, r3, #1
 80182ba:	4413      	add	r3, r2
 80182bc:	00db      	lsls	r3, r3, #3
 80182be:	440b      	add	r3, r1
 80182c0:	3312      	adds	r3, #18
 80182c2:	881b      	ldrh	r3, [r3, #0]
 80182c4:	837b      	strh	r3, [r7, #26]
 80182c6:	e01c      	b.n	8018302 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80182c8:	7dfb      	ldrb	r3, [r7, #23]
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d919      	bls.n	8018302 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80182ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182d2:	495e      	ldr	r1, [pc, #376]	; (801844c <etharp_find_entry+0x2d4>)
 80182d4:	4613      	mov	r3, r2
 80182d6:	005b      	lsls	r3, r3, #1
 80182d8:	4413      	add	r3, r2
 80182da:	00db      	lsls	r3, r3, #3
 80182dc:	440b      	add	r3, r1
 80182de:	3312      	adds	r3, #18
 80182e0:	881b      	ldrh	r3, [r3, #0]
 80182e2:	8b3a      	ldrh	r2, [r7, #24]
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d80c      	bhi.n	8018302 <etharp_find_entry+0x18a>
            old_stable = i;
 80182e8:	8c3b      	ldrh	r3, [r7, #32]
 80182ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80182ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182f0:	4956      	ldr	r1, [pc, #344]	; (801844c <etharp_find_entry+0x2d4>)
 80182f2:	4613      	mov	r3, r2
 80182f4:	005b      	lsls	r3, r3, #1
 80182f6:	4413      	add	r3, r2
 80182f8:	00db      	lsls	r3, r3, #3
 80182fa:	440b      	add	r3, r1
 80182fc:	3312      	adds	r3, #18
 80182fe:	881b      	ldrh	r3, [r3, #0]
 8018300:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018302:	8c3b      	ldrh	r3, [r7, #32]
 8018304:	3301      	adds	r3, #1
 8018306:	b29b      	uxth	r3, r3
 8018308:	843b      	strh	r3, [r7, #32]
 801830a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801830e:	2b09      	cmp	r3, #9
 8018310:	f77f af4c 	ble.w	80181ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018314:	7afb      	ldrb	r3, [r7, #11]
 8018316:	f003 0302 	and.w	r3, r3, #2
 801831a:	2b00      	cmp	r3, #0
 801831c:	d108      	bne.n	8018330 <etharp_find_entry+0x1b8>
 801831e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018322:	2b0a      	cmp	r3, #10
 8018324:	d107      	bne.n	8018336 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018326:	7afb      	ldrb	r3, [r7, #11]
 8018328:	f003 0301 	and.w	r3, r3, #1
 801832c:	2b00      	cmp	r3, #0
 801832e:	d102      	bne.n	8018336 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018330:	f04f 33ff 	mov.w	r3, #4294967295
 8018334:	e085      	b.n	8018442 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018336:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801833a:	2b09      	cmp	r3, #9
 801833c:	dc02      	bgt.n	8018344 <etharp_find_entry+0x1cc>
    i = empty;
 801833e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018340:	843b      	strh	r3, [r7, #32]
 8018342:	e039      	b.n	80183b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018344:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018348:	2b09      	cmp	r3, #9
 801834a:	dc14      	bgt.n	8018376 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801834c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801834e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018350:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018354:	493d      	ldr	r1, [pc, #244]	; (801844c <etharp_find_entry+0x2d4>)
 8018356:	4613      	mov	r3, r2
 8018358:	005b      	lsls	r3, r3, #1
 801835a:	4413      	add	r3, r2
 801835c:	00db      	lsls	r3, r3, #3
 801835e:	440b      	add	r3, r1
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d018      	beq.n	8018398 <etharp_find_entry+0x220>
 8018366:	4b3a      	ldr	r3, [pc, #232]	; (8018450 <etharp_find_entry+0x2d8>)
 8018368:	f240 126d 	movw	r2, #365	; 0x16d
 801836c:	493b      	ldr	r1, [pc, #236]	; (801845c <etharp_find_entry+0x2e4>)
 801836e:	483a      	ldr	r0, [pc, #232]	; (8018458 <etharp_find_entry+0x2e0>)
 8018370:	f002 fede 	bl	801b130 <iprintf>
 8018374:	e010      	b.n	8018398 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018376:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801837a:	2b09      	cmp	r3, #9
 801837c:	dc02      	bgt.n	8018384 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801837e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018380:	843b      	strh	r3, [r7, #32]
 8018382:	e009      	b.n	8018398 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018384:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018388:	2b09      	cmp	r3, #9
 801838a:	dc02      	bgt.n	8018392 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801838c:	8bfb      	ldrh	r3, [r7, #30]
 801838e:	843b      	strh	r3, [r7, #32]
 8018390:	e002      	b.n	8018398 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018392:	f04f 33ff 	mov.w	r3, #4294967295
 8018396:	e054      	b.n	8018442 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018398:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801839c:	2b09      	cmp	r3, #9
 801839e:	dd06      	ble.n	80183ae <etharp_find_entry+0x236>
 80183a0:	4b2b      	ldr	r3, [pc, #172]	; (8018450 <etharp_find_entry+0x2d8>)
 80183a2:	f240 127f 	movw	r2, #383	; 0x17f
 80183a6:	492e      	ldr	r1, [pc, #184]	; (8018460 <etharp_find_entry+0x2e8>)
 80183a8:	482b      	ldr	r0, [pc, #172]	; (8018458 <etharp_find_entry+0x2e0>)
 80183aa:	f002 fec1 	bl	801b130 <iprintf>
    etharp_free_entry(i);
 80183ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183b2:	4618      	mov	r0, r3
 80183b4:	f7ff fe06 	bl	8017fc4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80183b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183bc:	2b09      	cmp	r3, #9
 80183be:	dd06      	ble.n	80183ce <etharp_find_entry+0x256>
 80183c0:	4b23      	ldr	r3, [pc, #140]	; (8018450 <etharp_find_entry+0x2d8>)
 80183c2:	f240 1283 	movw	r2, #387	; 0x183
 80183c6:	4926      	ldr	r1, [pc, #152]	; (8018460 <etharp_find_entry+0x2e8>)
 80183c8:	4823      	ldr	r0, [pc, #140]	; (8018458 <etharp_find_entry+0x2e0>)
 80183ca:	f002 feb1 	bl	801b130 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80183ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183d2:	491e      	ldr	r1, [pc, #120]	; (801844c <etharp_find_entry+0x2d4>)
 80183d4:	4613      	mov	r3, r2
 80183d6:	005b      	lsls	r3, r3, #1
 80183d8:	4413      	add	r3, r2
 80183da:	00db      	lsls	r3, r3, #3
 80183dc:	440b      	add	r3, r1
 80183de:	3314      	adds	r3, #20
 80183e0:	781b      	ldrb	r3, [r3, #0]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d006      	beq.n	80183f4 <etharp_find_entry+0x27c>
 80183e6:	4b1a      	ldr	r3, [pc, #104]	; (8018450 <etharp_find_entry+0x2d8>)
 80183e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80183ec:	491d      	ldr	r1, [pc, #116]	; (8018464 <etharp_find_entry+0x2ec>)
 80183ee:	481a      	ldr	r0, [pc, #104]	; (8018458 <etharp_find_entry+0x2e0>)
 80183f0:	f002 fe9e 	bl	801b130 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d00b      	beq.n	8018412 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80183fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	6819      	ldr	r1, [r3, #0]
 8018402:	4812      	ldr	r0, [pc, #72]	; (801844c <etharp_find_entry+0x2d4>)
 8018404:	4613      	mov	r3, r2
 8018406:	005b      	lsls	r3, r3, #1
 8018408:	4413      	add	r3, r2
 801840a:	00db      	lsls	r3, r3, #3
 801840c:	4403      	add	r3, r0
 801840e:	3304      	adds	r3, #4
 8018410:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018412:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018416:	490d      	ldr	r1, [pc, #52]	; (801844c <etharp_find_entry+0x2d4>)
 8018418:	4613      	mov	r3, r2
 801841a:	005b      	lsls	r3, r3, #1
 801841c:	4413      	add	r3, r2
 801841e:	00db      	lsls	r3, r3, #3
 8018420:	440b      	add	r3, r1
 8018422:	3312      	adds	r3, #18
 8018424:	2200      	movs	r2, #0
 8018426:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018428:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801842c:	4907      	ldr	r1, [pc, #28]	; (801844c <etharp_find_entry+0x2d4>)
 801842e:	4613      	mov	r3, r2
 8018430:	005b      	lsls	r3, r3, #1
 8018432:	4413      	add	r3, r2
 8018434:	00db      	lsls	r3, r3, #3
 8018436:	440b      	add	r3, r1
 8018438:	3308      	adds	r3, #8
 801843a:	687a      	ldr	r2, [r7, #4]
 801843c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801843e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018442:	4618      	mov	r0, r3
 8018444:	3728      	adds	r7, #40	; 0x28
 8018446:	46bd      	mov	sp, r7
 8018448:	bd80      	pop	{r7, pc}
 801844a:	bf00      	nop
 801844c:	200071fc 	.word	0x200071fc
 8018450:	0801ff2c 	.word	0x0801ff2c
 8018454:	0801ff64 	.word	0x0801ff64
 8018458:	0801ffa4 	.word	0x0801ffa4
 801845c:	0801ffcc 	.word	0x0801ffcc
 8018460:	0801ffe4 	.word	0x0801ffe4
 8018464:	0801fff8 	.word	0x0801fff8

08018468 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018468:	b580      	push	{r7, lr}
 801846a:	b088      	sub	sp, #32
 801846c:	af02      	add	r7, sp, #8
 801846e:	60f8      	str	r0, [r7, #12]
 8018470:	60b9      	str	r1, [r7, #8]
 8018472:	607a      	str	r2, [r7, #4]
 8018474:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801847c:	2b06      	cmp	r3, #6
 801847e:	d006      	beq.n	801848e <etharp_update_arp_entry+0x26>
 8018480:	4b48      	ldr	r3, [pc, #288]	; (80185a4 <etharp_update_arp_entry+0x13c>)
 8018482:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018486:	4948      	ldr	r1, [pc, #288]	; (80185a8 <etharp_update_arp_entry+0x140>)
 8018488:	4848      	ldr	r0, [pc, #288]	; (80185ac <etharp_update_arp_entry+0x144>)
 801848a:	f002 fe51 	bl	801b130 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d012      	beq.n	80184ba <etharp_update_arp_entry+0x52>
 8018494:	68bb      	ldr	r3, [r7, #8]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d00e      	beq.n	80184ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	68f9      	ldr	r1, [r7, #12]
 80184a2:	4618      	mov	r0, r3
 80184a4:	f001 f924 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 80184a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d105      	bne.n	80184ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80184b6:	2be0      	cmp	r3, #224	; 0xe0
 80184b8:	d102      	bne.n	80184c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80184ba:	f06f 030f 	mvn.w	r3, #15
 80184be:	e06c      	b.n	801859a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80184c0:	78fb      	ldrb	r3, [r7, #3]
 80184c2:	68fa      	ldr	r2, [r7, #12]
 80184c4:	4619      	mov	r1, r3
 80184c6:	68b8      	ldr	r0, [r7, #8]
 80184c8:	f7ff fe56 	bl	8018178 <etharp_find_entry>
 80184cc:	4603      	mov	r3, r0
 80184ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80184d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	da02      	bge.n	80184de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80184d8:	8afb      	ldrh	r3, [r7, #22]
 80184da:	b25b      	sxtb	r3, r3
 80184dc:	e05d      	b.n	801859a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80184de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80184e2:	4933      	ldr	r1, [pc, #204]	; (80185b0 <etharp_update_arp_entry+0x148>)
 80184e4:	4613      	mov	r3, r2
 80184e6:	005b      	lsls	r3, r3, #1
 80184e8:	4413      	add	r3, r2
 80184ea:	00db      	lsls	r3, r3, #3
 80184ec:	440b      	add	r3, r1
 80184ee:	3314      	adds	r3, #20
 80184f0:	2202      	movs	r2, #2
 80184f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80184f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80184f8:	492d      	ldr	r1, [pc, #180]	; (80185b0 <etharp_update_arp_entry+0x148>)
 80184fa:	4613      	mov	r3, r2
 80184fc:	005b      	lsls	r3, r3, #1
 80184fe:	4413      	add	r3, r2
 8018500:	00db      	lsls	r3, r3, #3
 8018502:	440b      	add	r3, r1
 8018504:	3308      	adds	r3, #8
 8018506:	68fa      	ldr	r2, [r7, #12]
 8018508:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801850a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801850e:	4613      	mov	r3, r2
 8018510:	005b      	lsls	r3, r3, #1
 8018512:	4413      	add	r3, r2
 8018514:	00db      	lsls	r3, r3, #3
 8018516:	3308      	adds	r3, #8
 8018518:	4a25      	ldr	r2, [pc, #148]	; (80185b0 <etharp_update_arp_entry+0x148>)
 801851a:	4413      	add	r3, r2
 801851c:	3304      	adds	r3, #4
 801851e:	2206      	movs	r2, #6
 8018520:	6879      	ldr	r1, [r7, #4]
 8018522:	4618      	mov	r0, r3
 8018524:	f002 ffe5 	bl	801b4f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018528:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801852c:	4920      	ldr	r1, [pc, #128]	; (80185b0 <etharp_update_arp_entry+0x148>)
 801852e:	4613      	mov	r3, r2
 8018530:	005b      	lsls	r3, r3, #1
 8018532:	4413      	add	r3, r2
 8018534:	00db      	lsls	r3, r3, #3
 8018536:	440b      	add	r3, r1
 8018538:	3312      	adds	r3, #18
 801853a:	2200      	movs	r2, #0
 801853c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801853e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018542:	491b      	ldr	r1, [pc, #108]	; (80185b0 <etharp_update_arp_entry+0x148>)
 8018544:	4613      	mov	r3, r2
 8018546:	005b      	lsls	r3, r3, #1
 8018548:	4413      	add	r3, r2
 801854a:	00db      	lsls	r3, r3, #3
 801854c:	440b      	add	r3, r1
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d021      	beq.n	8018598 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018554:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018558:	4915      	ldr	r1, [pc, #84]	; (80185b0 <etharp_update_arp_entry+0x148>)
 801855a:	4613      	mov	r3, r2
 801855c:	005b      	lsls	r3, r3, #1
 801855e:	4413      	add	r3, r2
 8018560:	00db      	lsls	r3, r3, #3
 8018562:	440b      	add	r3, r1
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018568:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801856c:	4910      	ldr	r1, [pc, #64]	; (80185b0 <etharp_update_arp_entry+0x148>)
 801856e:	4613      	mov	r3, r2
 8018570:	005b      	lsls	r3, r3, #1
 8018572:	4413      	add	r3, r2
 8018574:	00db      	lsls	r3, r3, #3
 8018576:	440b      	add	r3, r1
 8018578:	2200      	movs	r2, #0
 801857a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018586:	9300      	str	r3, [sp, #0]
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	6939      	ldr	r1, [r7, #16]
 801858c:	68f8      	ldr	r0, [r7, #12]
 801858e:	f002 f84d 	bl	801a62c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018592:	6938      	ldr	r0, [r7, #16]
 8018594:	f7f8 ff2c 	bl	80113f0 <pbuf_free>
  }
  return ERR_OK;
 8018598:	2300      	movs	r3, #0
}
 801859a:	4618      	mov	r0, r3
 801859c:	3718      	adds	r7, #24
 801859e:	46bd      	mov	sp, r7
 80185a0:	bd80      	pop	{r7, pc}
 80185a2:	bf00      	nop
 80185a4:	0801ff2c 	.word	0x0801ff2c
 80185a8:	08020024 	.word	0x08020024
 80185ac:	0801ffa4 	.word	0x0801ffa4
 80185b0:	200071fc 	.word	0x200071fc

080185b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b084      	sub	sp, #16
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185bc:	2300      	movs	r3, #0
 80185be:	60fb      	str	r3, [r7, #12]
 80185c0:	e01e      	b.n	8018600 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80185c2:	4913      	ldr	r1, [pc, #76]	; (8018610 <etharp_cleanup_netif+0x5c>)
 80185c4:	68fa      	ldr	r2, [r7, #12]
 80185c6:	4613      	mov	r3, r2
 80185c8:	005b      	lsls	r3, r3, #1
 80185ca:	4413      	add	r3, r2
 80185cc:	00db      	lsls	r3, r3, #3
 80185ce:	440b      	add	r3, r1
 80185d0:	3314      	adds	r3, #20
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80185d6:	7afb      	ldrb	r3, [r7, #11]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d00e      	beq.n	80185fa <etharp_cleanup_netif+0x46>
 80185dc:	490c      	ldr	r1, [pc, #48]	; (8018610 <etharp_cleanup_netif+0x5c>)
 80185de:	68fa      	ldr	r2, [r7, #12]
 80185e0:	4613      	mov	r3, r2
 80185e2:	005b      	lsls	r3, r3, #1
 80185e4:	4413      	add	r3, r2
 80185e6:	00db      	lsls	r3, r3, #3
 80185e8:	440b      	add	r3, r1
 80185ea:	3308      	adds	r3, #8
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	687a      	ldr	r2, [r7, #4]
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d102      	bne.n	80185fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80185f4:	68f8      	ldr	r0, [r7, #12]
 80185f6:	f7ff fce5 	bl	8017fc4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	3301      	adds	r3, #1
 80185fe:	60fb      	str	r3, [r7, #12]
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	2b09      	cmp	r3, #9
 8018604:	dddd      	ble.n	80185c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018606:	bf00      	nop
 8018608:	bf00      	nop
 801860a:	3710      	adds	r7, #16
 801860c:	46bd      	mov	sp, r7
 801860e:	bd80      	pop	{r7, pc}
 8018610:	200071fc 	.word	0x200071fc

08018614 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018614:	b5b0      	push	{r4, r5, r7, lr}
 8018616:	b08a      	sub	sp, #40	; 0x28
 8018618:	af04      	add	r7, sp, #16
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d107      	bne.n	8018634 <etharp_input+0x20>
 8018624:	4b3d      	ldr	r3, [pc, #244]	; (801871c <etharp_input+0x108>)
 8018626:	f240 228a 	movw	r2, #650	; 0x28a
 801862a:	493d      	ldr	r1, [pc, #244]	; (8018720 <etharp_input+0x10c>)
 801862c:	483d      	ldr	r0, [pc, #244]	; (8018724 <etharp_input+0x110>)
 801862e:	f002 fd7f 	bl	801b130 <iprintf>
 8018632:	e06f      	b.n	8018714 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	685b      	ldr	r3, [r3, #4]
 8018638:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	881b      	ldrh	r3, [r3, #0]
 801863e:	b29b      	uxth	r3, r3
 8018640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018644:	d10c      	bne.n	8018660 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801864a:	2b06      	cmp	r3, #6
 801864c:	d108      	bne.n	8018660 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801864e:	693b      	ldr	r3, [r7, #16]
 8018650:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018652:	2b04      	cmp	r3, #4
 8018654:	d104      	bne.n	8018660 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018656:	693b      	ldr	r3, [r7, #16]
 8018658:	885b      	ldrh	r3, [r3, #2]
 801865a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801865c:	2b08      	cmp	r3, #8
 801865e:	d003      	beq.n	8018668 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f7f8 fec5 	bl	80113f0 <pbuf_free>
    return;
 8018666:	e055      	b.n	8018714 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018668:	693b      	ldr	r3, [r7, #16]
 801866a:	330e      	adds	r3, #14
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018670:	693b      	ldr	r3, [r7, #16]
 8018672:	3318      	adds	r3, #24
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	3304      	adds	r3, #4
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d102      	bne.n	8018688 <etharp_input+0x74>
    for_us = 0;
 8018682:	2300      	movs	r3, #0
 8018684:	75fb      	strb	r3, [r7, #23]
 8018686:	e009      	b.n	801869c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018688:	68ba      	ldr	r2, [r7, #8]
 801868a:	683b      	ldr	r3, [r7, #0]
 801868c:	3304      	adds	r3, #4
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	429a      	cmp	r2, r3
 8018692:	bf0c      	ite	eq
 8018694:	2301      	moveq	r3, #1
 8018696:	2300      	movne	r3, #0
 8018698:	b2db      	uxtb	r3, r3
 801869a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801869c:	693b      	ldr	r3, [r7, #16]
 801869e:	f103 0208 	add.w	r2, r3, #8
 80186a2:	7dfb      	ldrb	r3, [r7, #23]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d001      	beq.n	80186ac <etharp_input+0x98>
 80186a8:	2301      	movs	r3, #1
 80186aa:	e000      	b.n	80186ae <etharp_input+0x9a>
 80186ac:	2302      	movs	r3, #2
 80186ae:	f107 010c 	add.w	r1, r7, #12
 80186b2:	6838      	ldr	r0, [r7, #0]
 80186b4:	f7ff fed8 	bl	8018468 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80186b8:	693b      	ldr	r3, [r7, #16]
 80186ba:	88db      	ldrh	r3, [r3, #6]
 80186bc:	b29b      	uxth	r3, r3
 80186be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80186c2:	d003      	beq.n	80186cc <etharp_input+0xb8>
 80186c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80186c8:	d01e      	beq.n	8018708 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80186ca:	e020      	b.n	801870e <etharp_input+0xfa>
      if (for_us) {
 80186cc:	7dfb      	ldrb	r3, [r7, #23]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d01c      	beq.n	801870c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80186de:	683b      	ldr	r3, [r7, #0]
 80186e0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80186e8:	693a      	ldr	r2, [r7, #16]
 80186ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80186ec:	2102      	movs	r1, #2
 80186ee:	9103      	str	r1, [sp, #12]
 80186f0:	f107 010c 	add.w	r1, r7, #12
 80186f4:	9102      	str	r1, [sp, #8]
 80186f6:	9201      	str	r2, [sp, #4]
 80186f8:	9300      	str	r3, [sp, #0]
 80186fa:	462b      	mov	r3, r5
 80186fc:	4622      	mov	r2, r4
 80186fe:	4601      	mov	r1, r0
 8018700:	6838      	ldr	r0, [r7, #0]
 8018702:	f000 faeb 	bl	8018cdc <etharp_raw>
      break;
 8018706:	e001      	b.n	801870c <etharp_input+0xf8>
      break;
 8018708:	bf00      	nop
 801870a:	e000      	b.n	801870e <etharp_input+0xfa>
      break;
 801870c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801870e:	6878      	ldr	r0, [r7, #4]
 8018710:	f7f8 fe6e 	bl	80113f0 <pbuf_free>
}
 8018714:	3718      	adds	r7, #24
 8018716:	46bd      	mov	sp, r7
 8018718:	bdb0      	pop	{r4, r5, r7, pc}
 801871a:	bf00      	nop
 801871c:	0801ff2c 	.word	0x0801ff2c
 8018720:	0802007c 	.word	0x0802007c
 8018724:	0801ffa4 	.word	0x0801ffa4

08018728 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b086      	sub	sp, #24
 801872c:	af02      	add	r7, sp, #8
 801872e:	60f8      	str	r0, [r7, #12]
 8018730:	60b9      	str	r1, [r7, #8]
 8018732:	4613      	mov	r3, r2
 8018734:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018736:	79fa      	ldrb	r2, [r7, #7]
 8018738:	4944      	ldr	r1, [pc, #272]	; (801884c <etharp_output_to_arp_index+0x124>)
 801873a:	4613      	mov	r3, r2
 801873c:	005b      	lsls	r3, r3, #1
 801873e:	4413      	add	r3, r2
 8018740:	00db      	lsls	r3, r3, #3
 8018742:	440b      	add	r3, r1
 8018744:	3314      	adds	r3, #20
 8018746:	781b      	ldrb	r3, [r3, #0]
 8018748:	2b01      	cmp	r3, #1
 801874a:	d806      	bhi.n	801875a <etharp_output_to_arp_index+0x32>
 801874c:	4b40      	ldr	r3, [pc, #256]	; (8018850 <etharp_output_to_arp_index+0x128>)
 801874e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018752:	4940      	ldr	r1, [pc, #256]	; (8018854 <etharp_output_to_arp_index+0x12c>)
 8018754:	4840      	ldr	r0, [pc, #256]	; (8018858 <etharp_output_to_arp_index+0x130>)
 8018756:	f002 fceb 	bl	801b130 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801875a:	79fa      	ldrb	r2, [r7, #7]
 801875c:	493b      	ldr	r1, [pc, #236]	; (801884c <etharp_output_to_arp_index+0x124>)
 801875e:	4613      	mov	r3, r2
 8018760:	005b      	lsls	r3, r3, #1
 8018762:	4413      	add	r3, r2
 8018764:	00db      	lsls	r3, r3, #3
 8018766:	440b      	add	r3, r1
 8018768:	3314      	adds	r3, #20
 801876a:	781b      	ldrb	r3, [r3, #0]
 801876c:	2b02      	cmp	r3, #2
 801876e:	d153      	bne.n	8018818 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018770:	79fa      	ldrb	r2, [r7, #7]
 8018772:	4936      	ldr	r1, [pc, #216]	; (801884c <etharp_output_to_arp_index+0x124>)
 8018774:	4613      	mov	r3, r2
 8018776:	005b      	lsls	r3, r3, #1
 8018778:	4413      	add	r3, r2
 801877a:	00db      	lsls	r3, r3, #3
 801877c:	440b      	add	r3, r1
 801877e:	3312      	adds	r3, #18
 8018780:	881b      	ldrh	r3, [r3, #0]
 8018782:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018786:	d919      	bls.n	80187bc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018788:	79fa      	ldrb	r2, [r7, #7]
 801878a:	4613      	mov	r3, r2
 801878c:	005b      	lsls	r3, r3, #1
 801878e:	4413      	add	r3, r2
 8018790:	00db      	lsls	r3, r3, #3
 8018792:	4a2e      	ldr	r2, [pc, #184]	; (801884c <etharp_output_to_arp_index+0x124>)
 8018794:	4413      	add	r3, r2
 8018796:	3304      	adds	r3, #4
 8018798:	4619      	mov	r1, r3
 801879a:	68f8      	ldr	r0, [r7, #12]
 801879c:	f000 fb4c 	bl	8018e38 <etharp_request>
 80187a0:	4603      	mov	r3, r0
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d138      	bne.n	8018818 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80187a6:	79fa      	ldrb	r2, [r7, #7]
 80187a8:	4928      	ldr	r1, [pc, #160]	; (801884c <etharp_output_to_arp_index+0x124>)
 80187aa:	4613      	mov	r3, r2
 80187ac:	005b      	lsls	r3, r3, #1
 80187ae:	4413      	add	r3, r2
 80187b0:	00db      	lsls	r3, r3, #3
 80187b2:	440b      	add	r3, r1
 80187b4:	3314      	adds	r3, #20
 80187b6:	2203      	movs	r2, #3
 80187b8:	701a      	strb	r2, [r3, #0]
 80187ba:	e02d      	b.n	8018818 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80187bc:	79fa      	ldrb	r2, [r7, #7]
 80187be:	4923      	ldr	r1, [pc, #140]	; (801884c <etharp_output_to_arp_index+0x124>)
 80187c0:	4613      	mov	r3, r2
 80187c2:	005b      	lsls	r3, r3, #1
 80187c4:	4413      	add	r3, r2
 80187c6:	00db      	lsls	r3, r3, #3
 80187c8:	440b      	add	r3, r1
 80187ca:	3312      	adds	r3, #18
 80187cc:	881b      	ldrh	r3, [r3, #0]
 80187ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80187d2:	d321      	bcc.n	8018818 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80187d4:	79fa      	ldrb	r2, [r7, #7]
 80187d6:	4613      	mov	r3, r2
 80187d8:	005b      	lsls	r3, r3, #1
 80187da:	4413      	add	r3, r2
 80187dc:	00db      	lsls	r3, r3, #3
 80187de:	4a1b      	ldr	r2, [pc, #108]	; (801884c <etharp_output_to_arp_index+0x124>)
 80187e0:	4413      	add	r3, r2
 80187e2:	1d19      	adds	r1, r3, #4
 80187e4:	79fa      	ldrb	r2, [r7, #7]
 80187e6:	4613      	mov	r3, r2
 80187e8:	005b      	lsls	r3, r3, #1
 80187ea:	4413      	add	r3, r2
 80187ec:	00db      	lsls	r3, r3, #3
 80187ee:	3308      	adds	r3, #8
 80187f0:	4a16      	ldr	r2, [pc, #88]	; (801884c <etharp_output_to_arp_index+0x124>)
 80187f2:	4413      	add	r3, r2
 80187f4:	3304      	adds	r3, #4
 80187f6:	461a      	mov	r2, r3
 80187f8:	68f8      	ldr	r0, [r7, #12]
 80187fa:	f000 fafb 	bl	8018df4 <etharp_request_dst>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b00      	cmp	r3, #0
 8018802:	d109      	bne.n	8018818 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018804:	79fa      	ldrb	r2, [r7, #7]
 8018806:	4911      	ldr	r1, [pc, #68]	; (801884c <etharp_output_to_arp_index+0x124>)
 8018808:	4613      	mov	r3, r2
 801880a:	005b      	lsls	r3, r3, #1
 801880c:	4413      	add	r3, r2
 801880e:	00db      	lsls	r3, r3, #3
 8018810:	440b      	add	r3, r1
 8018812:	3314      	adds	r3, #20
 8018814:	2203      	movs	r2, #3
 8018816:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801881e:	79fa      	ldrb	r2, [r7, #7]
 8018820:	4613      	mov	r3, r2
 8018822:	005b      	lsls	r3, r3, #1
 8018824:	4413      	add	r3, r2
 8018826:	00db      	lsls	r3, r3, #3
 8018828:	3308      	adds	r3, #8
 801882a:	4a08      	ldr	r2, [pc, #32]	; (801884c <etharp_output_to_arp_index+0x124>)
 801882c:	4413      	add	r3, r2
 801882e:	3304      	adds	r3, #4
 8018830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018834:	9200      	str	r2, [sp, #0]
 8018836:	460a      	mov	r2, r1
 8018838:	68b9      	ldr	r1, [r7, #8]
 801883a:	68f8      	ldr	r0, [r7, #12]
 801883c:	f001 fef6 	bl	801a62c <ethernet_output>
 8018840:	4603      	mov	r3, r0
}
 8018842:	4618      	mov	r0, r3
 8018844:	3710      	adds	r7, #16
 8018846:	46bd      	mov	sp, r7
 8018848:	bd80      	pop	{r7, pc}
 801884a:	bf00      	nop
 801884c:	200071fc 	.word	0x200071fc
 8018850:	0801ff2c 	.word	0x0801ff2c
 8018854:	0802009c 	.word	0x0802009c
 8018858:	0801ffa4 	.word	0x0801ffa4

0801885c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b08a      	sub	sp, #40	; 0x28
 8018860:	af02      	add	r7, sp, #8
 8018862:	60f8      	str	r0, [r7, #12]
 8018864:	60b9      	str	r1, [r7, #8]
 8018866:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d106      	bne.n	8018880 <etharp_output+0x24>
 8018872:	4b73      	ldr	r3, [pc, #460]	; (8018a40 <etharp_output+0x1e4>)
 8018874:	f240 321e 	movw	r2, #798	; 0x31e
 8018878:	4972      	ldr	r1, [pc, #456]	; (8018a44 <etharp_output+0x1e8>)
 801887a:	4873      	ldr	r0, [pc, #460]	; (8018a48 <etharp_output+0x1ec>)
 801887c:	f002 fc58 	bl	801b130 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018880:	68bb      	ldr	r3, [r7, #8]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d106      	bne.n	8018894 <etharp_output+0x38>
 8018886:	4b6e      	ldr	r3, [pc, #440]	; (8018a40 <etharp_output+0x1e4>)
 8018888:	f240 321f 	movw	r2, #799	; 0x31f
 801888c:	496f      	ldr	r1, [pc, #444]	; (8018a4c <etharp_output+0x1f0>)
 801888e:	486e      	ldr	r0, [pc, #440]	; (8018a48 <etharp_output+0x1ec>)
 8018890:	f002 fc4e 	bl	801b130 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d106      	bne.n	80188a8 <etharp_output+0x4c>
 801889a:	4b69      	ldr	r3, [pc, #420]	; (8018a40 <etharp_output+0x1e4>)
 801889c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80188a0:	496b      	ldr	r1, [pc, #428]	; (8018a50 <etharp_output+0x1f4>)
 80188a2:	4869      	ldr	r0, [pc, #420]	; (8018a48 <etharp_output+0x1ec>)
 80188a4:	f002 fc44 	bl	801b130 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	68f9      	ldr	r1, [r7, #12]
 80188ae:	4618      	mov	r0, r3
 80188b0:	f000 ff1e 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 80188b4:	4603      	mov	r3, r0
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d002      	beq.n	80188c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80188ba:	4b66      	ldr	r3, [pc, #408]	; (8018a54 <etharp_output+0x1f8>)
 80188bc:	61fb      	str	r3, [r7, #28]
 80188be:	e0af      	b.n	8018a20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80188c8:	2be0      	cmp	r3, #224	; 0xe0
 80188ca:	d118      	bne.n	80188fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80188cc:	2301      	movs	r3, #1
 80188ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80188d0:	2300      	movs	r3, #0
 80188d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80188d4:	235e      	movs	r3, #94	; 0x5e
 80188d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	3301      	adds	r3, #1
 80188dc:	781b      	ldrb	r3, [r3, #0]
 80188de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188e2:	b2db      	uxtb	r3, r3
 80188e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	3302      	adds	r3, #2
 80188ea:	781b      	ldrb	r3, [r3, #0]
 80188ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	3303      	adds	r3, #3
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80188f6:	f107 0310 	add.w	r3, r7, #16
 80188fa:	61fb      	str	r3, [r7, #28]
 80188fc:	e090      	b.n	8018a20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681a      	ldr	r2, [r3, #0]
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	3304      	adds	r3, #4
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	405a      	eors	r2, r3
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	3308      	adds	r3, #8
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	4013      	ands	r3, r2
 8018912:	2b00      	cmp	r3, #0
 8018914:	d012      	beq.n	801893c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801891c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018920:	4293      	cmp	r3, r2
 8018922:	d00b      	beq.n	801893c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	330c      	adds	r3, #12
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d003      	beq.n	8018936 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	330c      	adds	r3, #12
 8018932:	61bb      	str	r3, [r7, #24]
 8018934:	e002      	b.n	801893c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018936:	f06f 0303 	mvn.w	r3, #3
 801893a:	e07d      	b.n	8018a38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801893c:	4b46      	ldr	r3, [pc, #280]	; (8018a58 <etharp_output+0x1fc>)
 801893e:	781b      	ldrb	r3, [r3, #0]
 8018940:	4619      	mov	r1, r3
 8018942:	4a46      	ldr	r2, [pc, #280]	; (8018a5c <etharp_output+0x200>)
 8018944:	460b      	mov	r3, r1
 8018946:	005b      	lsls	r3, r3, #1
 8018948:	440b      	add	r3, r1
 801894a:	00db      	lsls	r3, r3, #3
 801894c:	4413      	add	r3, r2
 801894e:	3314      	adds	r3, #20
 8018950:	781b      	ldrb	r3, [r3, #0]
 8018952:	2b01      	cmp	r3, #1
 8018954:	d925      	bls.n	80189a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018956:	4b40      	ldr	r3, [pc, #256]	; (8018a58 <etharp_output+0x1fc>)
 8018958:	781b      	ldrb	r3, [r3, #0]
 801895a:	4619      	mov	r1, r3
 801895c:	4a3f      	ldr	r2, [pc, #252]	; (8018a5c <etharp_output+0x200>)
 801895e:	460b      	mov	r3, r1
 8018960:	005b      	lsls	r3, r3, #1
 8018962:	440b      	add	r3, r1
 8018964:	00db      	lsls	r3, r3, #3
 8018966:	4413      	add	r3, r2
 8018968:	3308      	adds	r3, #8
 801896a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801896c:	68fa      	ldr	r2, [r7, #12]
 801896e:	429a      	cmp	r2, r3
 8018970:	d117      	bne.n	80189a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018972:	69bb      	ldr	r3, [r7, #24]
 8018974:	681a      	ldr	r2, [r3, #0]
 8018976:	4b38      	ldr	r3, [pc, #224]	; (8018a58 <etharp_output+0x1fc>)
 8018978:	781b      	ldrb	r3, [r3, #0]
 801897a:	4618      	mov	r0, r3
 801897c:	4937      	ldr	r1, [pc, #220]	; (8018a5c <etharp_output+0x200>)
 801897e:	4603      	mov	r3, r0
 8018980:	005b      	lsls	r3, r3, #1
 8018982:	4403      	add	r3, r0
 8018984:	00db      	lsls	r3, r3, #3
 8018986:	440b      	add	r3, r1
 8018988:	3304      	adds	r3, #4
 801898a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801898c:	429a      	cmp	r2, r3
 801898e:	d108      	bne.n	80189a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018990:	4b31      	ldr	r3, [pc, #196]	; (8018a58 <etharp_output+0x1fc>)
 8018992:	781b      	ldrb	r3, [r3, #0]
 8018994:	461a      	mov	r2, r3
 8018996:	68b9      	ldr	r1, [r7, #8]
 8018998:	68f8      	ldr	r0, [r7, #12]
 801899a:	f7ff fec5 	bl	8018728 <etharp_output_to_arp_index>
 801899e:	4603      	mov	r3, r0
 80189a0:	e04a      	b.n	8018a38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80189a2:	2300      	movs	r3, #0
 80189a4:	75fb      	strb	r3, [r7, #23]
 80189a6:	e031      	b.n	8018a0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80189a8:	7dfa      	ldrb	r2, [r7, #23]
 80189aa:	492c      	ldr	r1, [pc, #176]	; (8018a5c <etharp_output+0x200>)
 80189ac:	4613      	mov	r3, r2
 80189ae:	005b      	lsls	r3, r3, #1
 80189b0:	4413      	add	r3, r2
 80189b2:	00db      	lsls	r3, r3, #3
 80189b4:	440b      	add	r3, r1
 80189b6:	3314      	adds	r3, #20
 80189b8:	781b      	ldrb	r3, [r3, #0]
 80189ba:	2b01      	cmp	r3, #1
 80189bc:	d923      	bls.n	8018a06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80189be:	7dfa      	ldrb	r2, [r7, #23]
 80189c0:	4926      	ldr	r1, [pc, #152]	; (8018a5c <etharp_output+0x200>)
 80189c2:	4613      	mov	r3, r2
 80189c4:	005b      	lsls	r3, r3, #1
 80189c6:	4413      	add	r3, r2
 80189c8:	00db      	lsls	r3, r3, #3
 80189ca:	440b      	add	r3, r1
 80189cc:	3308      	adds	r3, #8
 80189ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80189d0:	68fa      	ldr	r2, [r7, #12]
 80189d2:	429a      	cmp	r2, r3
 80189d4:	d117      	bne.n	8018a06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80189d6:	69bb      	ldr	r3, [r7, #24]
 80189d8:	6819      	ldr	r1, [r3, #0]
 80189da:	7dfa      	ldrb	r2, [r7, #23]
 80189dc:	481f      	ldr	r0, [pc, #124]	; (8018a5c <etharp_output+0x200>)
 80189de:	4613      	mov	r3, r2
 80189e0:	005b      	lsls	r3, r3, #1
 80189e2:	4413      	add	r3, r2
 80189e4:	00db      	lsls	r3, r3, #3
 80189e6:	4403      	add	r3, r0
 80189e8:	3304      	adds	r3, #4
 80189ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80189ec:	4299      	cmp	r1, r3
 80189ee:	d10a      	bne.n	8018a06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80189f0:	4a19      	ldr	r2, [pc, #100]	; (8018a58 <etharp_output+0x1fc>)
 80189f2:	7dfb      	ldrb	r3, [r7, #23]
 80189f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80189f6:	7dfb      	ldrb	r3, [r7, #23]
 80189f8:	461a      	mov	r2, r3
 80189fa:	68b9      	ldr	r1, [r7, #8]
 80189fc:	68f8      	ldr	r0, [r7, #12]
 80189fe:	f7ff fe93 	bl	8018728 <etharp_output_to_arp_index>
 8018a02:	4603      	mov	r3, r0
 8018a04:	e018      	b.n	8018a38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018a06:	7dfb      	ldrb	r3, [r7, #23]
 8018a08:	3301      	adds	r3, #1
 8018a0a:	75fb      	strb	r3, [r7, #23]
 8018a0c:	7dfb      	ldrb	r3, [r7, #23]
 8018a0e:	2b09      	cmp	r3, #9
 8018a10:	d9ca      	bls.n	80189a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018a12:	68ba      	ldr	r2, [r7, #8]
 8018a14:	69b9      	ldr	r1, [r7, #24]
 8018a16:	68f8      	ldr	r0, [r7, #12]
 8018a18:	f000 f822 	bl	8018a60 <etharp_query>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	e00b      	b.n	8018a38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018a2a:	9300      	str	r3, [sp, #0]
 8018a2c:	69fb      	ldr	r3, [r7, #28]
 8018a2e:	68b9      	ldr	r1, [r7, #8]
 8018a30:	68f8      	ldr	r0, [r7, #12]
 8018a32:	f001 fdfb 	bl	801a62c <ethernet_output>
 8018a36:	4603      	mov	r3, r0
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	3720      	adds	r7, #32
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bd80      	pop	{r7, pc}
 8018a40:	0801ff2c 	.word	0x0801ff2c
 8018a44:	0802007c 	.word	0x0802007c
 8018a48:	0801ffa4 	.word	0x0801ffa4
 8018a4c:	080200cc 	.word	0x080200cc
 8018a50:	0802006c 	.word	0x0802006c
 8018a54:	08020728 	.word	0x08020728
 8018a58:	200072ec 	.word	0x200072ec
 8018a5c:	200071fc 	.word	0x200071fc

08018a60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b08c      	sub	sp, #48	; 0x30
 8018a64:	af02      	add	r7, sp, #8
 8018a66:	60f8      	str	r0, [r7, #12]
 8018a68:	60b9      	str	r1, [r7, #8]
 8018a6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	3326      	adds	r3, #38	; 0x26
 8018a70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018a72:	23ff      	movs	r3, #255	; 0xff
 8018a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018a78:	2300      	movs	r3, #0
 8018a7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018a7c:	68bb      	ldr	r3, [r7, #8]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	68f9      	ldr	r1, [r7, #12]
 8018a82:	4618      	mov	r0, r3
 8018a84:	f000 fe34 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d10c      	bne.n	8018aa8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018a8e:	68bb      	ldr	r3, [r7, #8]
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018a96:	2be0      	cmp	r3, #224	; 0xe0
 8018a98:	d006      	beq.n	8018aa8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018a9a:	68bb      	ldr	r3, [r7, #8]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d003      	beq.n	8018aa8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d102      	bne.n	8018aae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018aa8:	f06f 030f 	mvn.w	r3, #15
 8018aac:	e101      	b.n	8018cb2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018aae:	68fa      	ldr	r2, [r7, #12]
 8018ab0:	2101      	movs	r1, #1
 8018ab2:	68b8      	ldr	r0, [r7, #8]
 8018ab4:	f7ff fb60 	bl	8018178 <etharp_find_entry>
 8018ab8:	4603      	mov	r3, r0
 8018aba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018abc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	da02      	bge.n	8018aca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018ac4:	8a7b      	ldrh	r3, [r7, #18]
 8018ac6:	b25b      	sxtb	r3, r3
 8018ac8:	e0f3      	b.n	8018cb2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018aca:	8a7b      	ldrh	r3, [r7, #18]
 8018acc:	2b7e      	cmp	r3, #126	; 0x7e
 8018ace:	d906      	bls.n	8018ade <etharp_query+0x7e>
 8018ad0:	4b7a      	ldr	r3, [pc, #488]	; (8018cbc <etharp_query+0x25c>)
 8018ad2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018ad6:	497a      	ldr	r1, [pc, #488]	; (8018cc0 <etharp_query+0x260>)
 8018ad8:	487a      	ldr	r0, [pc, #488]	; (8018cc4 <etharp_query+0x264>)
 8018ada:	f002 fb29 	bl	801b130 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018ade:	8a7b      	ldrh	r3, [r7, #18]
 8018ae0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018ae2:	7c7a      	ldrb	r2, [r7, #17]
 8018ae4:	4978      	ldr	r1, [pc, #480]	; (8018cc8 <etharp_query+0x268>)
 8018ae6:	4613      	mov	r3, r2
 8018ae8:	005b      	lsls	r3, r3, #1
 8018aea:	4413      	add	r3, r2
 8018aec:	00db      	lsls	r3, r3, #3
 8018aee:	440b      	add	r3, r1
 8018af0:	3314      	adds	r3, #20
 8018af2:	781b      	ldrb	r3, [r3, #0]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d115      	bne.n	8018b24 <etharp_query+0xc4>
    is_new_entry = 1;
 8018af8:	2301      	movs	r3, #1
 8018afa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018afc:	7c7a      	ldrb	r2, [r7, #17]
 8018afe:	4972      	ldr	r1, [pc, #456]	; (8018cc8 <etharp_query+0x268>)
 8018b00:	4613      	mov	r3, r2
 8018b02:	005b      	lsls	r3, r3, #1
 8018b04:	4413      	add	r3, r2
 8018b06:	00db      	lsls	r3, r3, #3
 8018b08:	440b      	add	r3, r1
 8018b0a:	3314      	adds	r3, #20
 8018b0c:	2201      	movs	r2, #1
 8018b0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018b10:	7c7a      	ldrb	r2, [r7, #17]
 8018b12:	496d      	ldr	r1, [pc, #436]	; (8018cc8 <etharp_query+0x268>)
 8018b14:	4613      	mov	r3, r2
 8018b16:	005b      	lsls	r3, r3, #1
 8018b18:	4413      	add	r3, r2
 8018b1a:	00db      	lsls	r3, r3, #3
 8018b1c:	440b      	add	r3, r1
 8018b1e:	3308      	adds	r3, #8
 8018b20:	68fa      	ldr	r2, [r7, #12]
 8018b22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018b24:	7c7a      	ldrb	r2, [r7, #17]
 8018b26:	4968      	ldr	r1, [pc, #416]	; (8018cc8 <etharp_query+0x268>)
 8018b28:	4613      	mov	r3, r2
 8018b2a:	005b      	lsls	r3, r3, #1
 8018b2c:	4413      	add	r3, r2
 8018b2e:	00db      	lsls	r3, r3, #3
 8018b30:	440b      	add	r3, r1
 8018b32:	3314      	adds	r3, #20
 8018b34:	781b      	ldrb	r3, [r3, #0]
 8018b36:	2b01      	cmp	r3, #1
 8018b38:	d011      	beq.n	8018b5e <etharp_query+0xfe>
 8018b3a:	7c7a      	ldrb	r2, [r7, #17]
 8018b3c:	4962      	ldr	r1, [pc, #392]	; (8018cc8 <etharp_query+0x268>)
 8018b3e:	4613      	mov	r3, r2
 8018b40:	005b      	lsls	r3, r3, #1
 8018b42:	4413      	add	r3, r2
 8018b44:	00db      	lsls	r3, r3, #3
 8018b46:	440b      	add	r3, r1
 8018b48:	3314      	adds	r3, #20
 8018b4a:	781b      	ldrb	r3, [r3, #0]
 8018b4c:	2b01      	cmp	r3, #1
 8018b4e:	d806      	bhi.n	8018b5e <etharp_query+0xfe>
 8018b50:	4b5a      	ldr	r3, [pc, #360]	; (8018cbc <etharp_query+0x25c>)
 8018b52:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018b56:	495d      	ldr	r1, [pc, #372]	; (8018ccc <etharp_query+0x26c>)
 8018b58:	485a      	ldr	r0, [pc, #360]	; (8018cc4 <etharp_query+0x264>)
 8018b5a:	f002 fae9 	bl	801b130 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018b5e:	6a3b      	ldr	r3, [r7, #32]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d102      	bne.n	8018b6a <etharp_query+0x10a>
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d10c      	bne.n	8018b84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018b6a:	68b9      	ldr	r1, [r7, #8]
 8018b6c:	68f8      	ldr	r0, [r7, #12]
 8018b6e:	f000 f963 	bl	8018e38 <etharp_request>
 8018b72:	4603      	mov	r3, r0
 8018b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d102      	bne.n	8018b84 <etharp_query+0x124>
      return result;
 8018b7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018b82:	e096      	b.n	8018cb2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d106      	bne.n	8018b98 <etharp_query+0x138>
 8018b8a:	4b4c      	ldr	r3, [pc, #304]	; (8018cbc <etharp_query+0x25c>)
 8018b8c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018b90:	494f      	ldr	r1, [pc, #316]	; (8018cd0 <etharp_query+0x270>)
 8018b92:	484c      	ldr	r0, [pc, #304]	; (8018cc4 <etharp_query+0x264>)
 8018b94:	f002 facc 	bl	801b130 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018b98:	7c7a      	ldrb	r2, [r7, #17]
 8018b9a:	494b      	ldr	r1, [pc, #300]	; (8018cc8 <etharp_query+0x268>)
 8018b9c:	4613      	mov	r3, r2
 8018b9e:	005b      	lsls	r3, r3, #1
 8018ba0:	4413      	add	r3, r2
 8018ba2:	00db      	lsls	r3, r3, #3
 8018ba4:	440b      	add	r3, r1
 8018ba6:	3314      	adds	r3, #20
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	2b01      	cmp	r3, #1
 8018bac:	d917      	bls.n	8018bde <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018bae:	4a49      	ldr	r2, [pc, #292]	; (8018cd4 <etharp_query+0x274>)
 8018bb0:	7c7b      	ldrb	r3, [r7, #17]
 8018bb2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018bb4:	7c7a      	ldrb	r2, [r7, #17]
 8018bb6:	4613      	mov	r3, r2
 8018bb8:	005b      	lsls	r3, r3, #1
 8018bba:	4413      	add	r3, r2
 8018bbc:	00db      	lsls	r3, r3, #3
 8018bbe:	3308      	adds	r3, #8
 8018bc0:	4a41      	ldr	r2, [pc, #260]	; (8018cc8 <etharp_query+0x268>)
 8018bc2:	4413      	add	r3, r2
 8018bc4:	3304      	adds	r3, #4
 8018bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018bca:	9200      	str	r2, [sp, #0]
 8018bcc:	697a      	ldr	r2, [r7, #20]
 8018bce:	6879      	ldr	r1, [r7, #4]
 8018bd0:	68f8      	ldr	r0, [r7, #12]
 8018bd2:	f001 fd2b 	bl	801a62c <ethernet_output>
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018bdc:	e067      	b.n	8018cae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018bde:	7c7a      	ldrb	r2, [r7, #17]
 8018be0:	4939      	ldr	r1, [pc, #228]	; (8018cc8 <etharp_query+0x268>)
 8018be2:	4613      	mov	r3, r2
 8018be4:	005b      	lsls	r3, r3, #1
 8018be6:	4413      	add	r3, r2
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	440b      	add	r3, r1
 8018bec:	3314      	adds	r3, #20
 8018bee:	781b      	ldrb	r3, [r3, #0]
 8018bf0:	2b01      	cmp	r3, #1
 8018bf2:	d15c      	bne.n	8018cae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018bfc:	e01c      	b.n	8018c38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018bfe:	69fb      	ldr	r3, [r7, #28]
 8018c00:	895a      	ldrh	r2, [r3, #10]
 8018c02:	69fb      	ldr	r3, [r7, #28]
 8018c04:	891b      	ldrh	r3, [r3, #8]
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d10a      	bne.n	8018c20 <etharp_query+0x1c0>
 8018c0a:	69fb      	ldr	r3, [r7, #28]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d006      	beq.n	8018c20 <etharp_query+0x1c0>
 8018c12:	4b2a      	ldr	r3, [pc, #168]	; (8018cbc <etharp_query+0x25c>)
 8018c14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018c18:	492f      	ldr	r1, [pc, #188]	; (8018cd8 <etharp_query+0x278>)
 8018c1a:	482a      	ldr	r0, [pc, #168]	; (8018cc4 <etharp_query+0x264>)
 8018c1c:	f002 fa88 	bl	801b130 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018c20:	69fb      	ldr	r3, [r7, #28]
 8018c22:	7b1b      	ldrb	r3, [r3, #12]
 8018c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d002      	beq.n	8018c32 <etharp_query+0x1d2>
        copy_needed = 1;
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	61bb      	str	r3, [r7, #24]
        break;
 8018c30:	e005      	b.n	8018c3e <etharp_query+0x1de>
      }
      p = p->next;
 8018c32:	69fb      	ldr	r3, [r7, #28]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018c38:	69fb      	ldr	r3, [r7, #28]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d1df      	bne.n	8018bfe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018c3e:	69bb      	ldr	r3, [r7, #24]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d007      	beq.n	8018c54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018c44:	687a      	ldr	r2, [r7, #4]
 8018c46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018c4a:	200e      	movs	r0, #14
 8018c4c:	f7f8 febe 	bl	80119cc <pbuf_clone>
 8018c50:	61f8      	str	r0, [r7, #28]
 8018c52:	e004      	b.n	8018c5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018c58:	69f8      	ldr	r0, [r7, #28]
 8018c5a:	f7f8 fc69 	bl	8011530 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018c5e:	69fb      	ldr	r3, [r7, #28]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d021      	beq.n	8018ca8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018c64:	7c7a      	ldrb	r2, [r7, #17]
 8018c66:	4918      	ldr	r1, [pc, #96]	; (8018cc8 <etharp_query+0x268>)
 8018c68:	4613      	mov	r3, r2
 8018c6a:	005b      	lsls	r3, r3, #1
 8018c6c:	4413      	add	r3, r2
 8018c6e:	00db      	lsls	r3, r3, #3
 8018c70:	440b      	add	r3, r1
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d00a      	beq.n	8018c8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018c78:	7c7a      	ldrb	r2, [r7, #17]
 8018c7a:	4913      	ldr	r1, [pc, #76]	; (8018cc8 <etharp_query+0x268>)
 8018c7c:	4613      	mov	r3, r2
 8018c7e:	005b      	lsls	r3, r3, #1
 8018c80:	4413      	add	r3, r2
 8018c82:	00db      	lsls	r3, r3, #3
 8018c84:	440b      	add	r3, r1
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f7f8 fbb1 	bl	80113f0 <pbuf_free>
      }
      arp_table[i].q = p;
 8018c8e:	7c7a      	ldrb	r2, [r7, #17]
 8018c90:	490d      	ldr	r1, [pc, #52]	; (8018cc8 <etharp_query+0x268>)
 8018c92:	4613      	mov	r3, r2
 8018c94:	005b      	lsls	r3, r3, #1
 8018c96:	4413      	add	r3, r2
 8018c98:	00db      	lsls	r3, r3, #3
 8018c9a:	440b      	add	r3, r1
 8018c9c:	69fa      	ldr	r2, [r7, #28]
 8018c9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ca6:	e002      	b.n	8018cae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018ca8:	23ff      	movs	r3, #255	; 0xff
 8018caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018cae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3728      	adds	r7, #40	; 0x28
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	0801ff2c 	.word	0x0801ff2c
 8018cc0:	080200d8 	.word	0x080200d8
 8018cc4:	0801ffa4 	.word	0x0801ffa4
 8018cc8:	200071fc 	.word	0x200071fc
 8018ccc:	080200e8 	.word	0x080200e8
 8018cd0:	080200cc 	.word	0x080200cc
 8018cd4:	200072ec 	.word	0x200072ec
 8018cd8:	08020110 	.word	0x08020110

08018cdc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b08a      	sub	sp, #40	; 0x28
 8018ce0:	af02      	add	r7, sp, #8
 8018ce2:	60f8      	str	r0, [r7, #12]
 8018ce4:	60b9      	str	r1, [r7, #8]
 8018ce6:	607a      	str	r2, [r7, #4]
 8018ce8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018cea:	2300      	movs	r3, #0
 8018cec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d106      	bne.n	8018d02 <etharp_raw+0x26>
 8018cf4:	4b3a      	ldr	r3, [pc, #232]	; (8018de0 <etharp_raw+0x104>)
 8018cf6:	f240 4257 	movw	r2, #1111	; 0x457
 8018cfa:	493a      	ldr	r1, [pc, #232]	; (8018de4 <etharp_raw+0x108>)
 8018cfc:	483a      	ldr	r0, [pc, #232]	; (8018de8 <etharp_raw+0x10c>)
 8018cfe:	f002 fa17 	bl	801b130 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018d02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d06:	211c      	movs	r1, #28
 8018d08:	200e      	movs	r0, #14
 8018d0a:	f7f8 f88d 	bl	8010e28 <pbuf_alloc>
 8018d0e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018d10:	69bb      	ldr	r3, [r7, #24]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d102      	bne.n	8018d1c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018d16:	f04f 33ff 	mov.w	r3, #4294967295
 8018d1a:	e05d      	b.n	8018dd8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018d1c:	69bb      	ldr	r3, [r7, #24]
 8018d1e:	895b      	ldrh	r3, [r3, #10]
 8018d20:	2b1b      	cmp	r3, #27
 8018d22:	d806      	bhi.n	8018d32 <etharp_raw+0x56>
 8018d24:	4b2e      	ldr	r3, [pc, #184]	; (8018de0 <etharp_raw+0x104>)
 8018d26:	f240 4262 	movw	r2, #1122	; 0x462
 8018d2a:	4930      	ldr	r1, [pc, #192]	; (8018dec <etharp_raw+0x110>)
 8018d2c:	482e      	ldr	r0, [pc, #184]	; (8018de8 <etharp_raw+0x10c>)
 8018d2e:	f002 f9ff 	bl	801b130 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018d32:	69bb      	ldr	r3, [r7, #24]
 8018d34:	685b      	ldr	r3, [r3, #4]
 8018d36:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018d38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	f7f6 ff54 	bl	800fbe8 <lwip_htons>
 8018d40:	4603      	mov	r3, r0
 8018d42:	461a      	mov	r2, r3
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018d4e:	2b06      	cmp	r3, #6
 8018d50:	d006      	beq.n	8018d60 <etharp_raw+0x84>
 8018d52:	4b23      	ldr	r3, [pc, #140]	; (8018de0 <etharp_raw+0x104>)
 8018d54:	f240 4269 	movw	r2, #1129	; 0x469
 8018d58:	4925      	ldr	r1, [pc, #148]	; (8018df0 <etharp_raw+0x114>)
 8018d5a:	4823      	ldr	r0, [pc, #140]	; (8018de8 <etharp_raw+0x10c>)
 8018d5c:	f002 f9e8 	bl	801b130 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	3308      	adds	r3, #8
 8018d64:	2206      	movs	r2, #6
 8018d66:	6839      	ldr	r1, [r7, #0]
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f002 fbc2 	bl	801b4f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	3312      	adds	r3, #18
 8018d72:	2206      	movs	r2, #6
 8018d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018d76:	4618      	mov	r0, r3
 8018d78:	f002 fbbb 	bl	801b4f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018d7c:	697b      	ldr	r3, [r7, #20]
 8018d7e:	330e      	adds	r3, #14
 8018d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d82:	6812      	ldr	r2, [r2, #0]
 8018d84:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018d86:	697b      	ldr	r3, [r7, #20]
 8018d88:	3318      	adds	r3, #24
 8018d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d8c:	6812      	ldr	r2, [r2, #0]
 8018d8e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018d90:	697b      	ldr	r3, [r7, #20]
 8018d92:	2200      	movs	r2, #0
 8018d94:	701a      	strb	r2, [r3, #0]
 8018d96:	2200      	movs	r2, #0
 8018d98:	f042 0201 	orr.w	r2, r2, #1
 8018d9c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	2200      	movs	r2, #0
 8018da2:	f042 0208 	orr.w	r2, r2, #8
 8018da6:	709a      	strb	r2, [r3, #2]
 8018da8:	2200      	movs	r2, #0
 8018daa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018dac:	697b      	ldr	r3, [r7, #20]
 8018dae:	2206      	movs	r2, #6
 8018db0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018db2:	697b      	ldr	r3, [r7, #20]
 8018db4:	2204      	movs	r2, #4
 8018db6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018db8:	f640 0306 	movw	r3, #2054	; 0x806
 8018dbc:	9300      	str	r3, [sp, #0]
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	68ba      	ldr	r2, [r7, #8]
 8018dc2:	69b9      	ldr	r1, [r7, #24]
 8018dc4:	68f8      	ldr	r0, [r7, #12]
 8018dc6:	f001 fc31 	bl	801a62c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018dca:	69b8      	ldr	r0, [r7, #24]
 8018dcc:	f7f8 fb10 	bl	80113f0 <pbuf_free>
  p = NULL;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018dd8:	4618      	mov	r0, r3
 8018dda:	3720      	adds	r7, #32
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}
 8018de0:	0801ff2c 	.word	0x0801ff2c
 8018de4:	0802007c 	.word	0x0802007c
 8018de8:	0801ffa4 	.word	0x0801ffa4
 8018dec:	0802012c 	.word	0x0802012c
 8018df0:	08020160 	.word	0x08020160

08018df4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b088      	sub	sp, #32
 8018df8:	af04      	add	r7, sp, #16
 8018dfa:	60f8      	str	r0, [r7, #12]
 8018dfc:	60b9      	str	r1, [r7, #8]
 8018dfe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018e10:	2201      	movs	r2, #1
 8018e12:	9203      	str	r2, [sp, #12]
 8018e14:	68ba      	ldr	r2, [r7, #8]
 8018e16:	9202      	str	r2, [sp, #8]
 8018e18:	4a06      	ldr	r2, [pc, #24]	; (8018e34 <etharp_request_dst+0x40>)
 8018e1a:	9201      	str	r2, [sp, #4]
 8018e1c:	9300      	str	r3, [sp, #0]
 8018e1e:	4603      	mov	r3, r0
 8018e20:	687a      	ldr	r2, [r7, #4]
 8018e22:	68f8      	ldr	r0, [r7, #12]
 8018e24:	f7ff ff5a 	bl	8018cdc <etharp_raw>
 8018e28:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	3710      	adds	r7, #16
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}
 8018e32:	bf00      	nop
 8018e34:	08020730 	.word	0x08020730

08018e38 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b082      	sub	sp, #8
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
 8018e40:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018e42:	4a05      	ldr	r2, [pc, #20]	; (8018e58 <etharp_request+0x20>)
 8018e44:	6839      	ldr	r1, [r7, #0]
 8018e46:	6878      	ldr	r0, [r7, #4]
 8018e48:	f7ff ffd4 	bl	8018df4 <etharp_request_dst>
 8018e4c:	4603      	mov	r3, r0
}
 8018e4e:	4618      	mov	r0, r3
 8018e50:	3708      	adds	r7, #8
 8018e52:	46bd      	mov	sp, r7
 8018e54:	bd80      	pop	{r7, pc}
 8018e56:	bf00      	nop
 8018e58:	08020728 	.word	0x08020728

08018e5c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b08e      	sub	sp, #56	; 0x38
 8018e60:	af04      	add	r7, sp, #16
 8018e62:	6078      	str	r0, [r7, #4]
 8018e64:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018e66:	4b87      	ldr	r3, [pc, #540]	; (8019084 <icmp_input+0x228>)
 8018e68:	689b      	ldr	r3, [r3, #8]
 8018e6a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e6e:	781b      	ldrb	r3, [r3, #0]
 8018e70:	f003 030f 	and.w	r3, r3, #15
 8018e74:	b2db      	uxtb	r3, r3
 8018e76:	009b      	lsls	r3, r3, #2
 8018e78:	b2db      	uxtb	r3, r3
 8018e7a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018e7e:	2b13      	cmp	r3, #19
 8018e80:	f240 80e8 	bls.w	8019054 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	895b      	ldrh	r3, [r3, #10]
 8018e88:	2b03      	cmp	r3, #3
 8018e8a:	f240 80e5 	bls.w	8019058 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	685b      	ldr	r3, [r3, #4]
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018e98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	f000 80d2 	beq.w	8019046 <icmp_input+0x1ea>
 8018ea2:	2b08      	cmp	r3, #8
 8018ea4:	f040 80d2 	bne.w	801904c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018ea8:	4b77      	ldr	r3, [pc, #476]	; (8019088 <icmp_input+0x22c>)
 8018eaa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018eac:	4b75      	ldr	r3, [pc, #468]	; (8019084 <icmp_input+0x228>)
 8018eae:	695b      	ldr	r3, [r3, #20]
 8018eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018eb4:	2be0      	cmp	r3, #224	; 0xe0
 8018eb6:	f000 80d6 	beq.w	8019066 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018eba:	4b72      	ldr	r3, [pc, #456]	; (8019084 <icmp_input+0x228>)
 8018ebc:	695b      	ldr	r3, [r3, #20]
 8018ebe:	4a71      	ldr	r2, [pc, #452]	; (8019084 <icmp_input+0x228>)
 8018ec0:	6812      	ldr	r2, [r2, #0]
 8018ec2:	4611      	mov	r1, r2
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f000 fc13 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 8018eca:	4603      	mov	r3, r0
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	f040 80cc 	bne.w	801906a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	891b      	ldrh	r3, [r3, #8]
 8018ed6:	2b07      	cmp	r3, #7
 8018ed8:	f240 80c0 	bls.w	801905c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018edc:	6878      	ldr	r0, [r7, #4]
 8018ede:	f7f6 ff20 	bl	800fd22 <inet_chksum_pbuf>
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d003      	beq.n	8018ef0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018ee8:	6878      	ldr	r0, [r7, #4]
 8018eea:	f7f8 fa81 	bl	80113f0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018eee:	e0c5      	b.n	801907c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ef2:	330e      	adds	r3, #14
 8018ef4:	4619      	mov	r1, r3
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	f7f8 f9e4 	bl	80112c4 <pbuf_add_header>
 8018efc:	4603      	mov	r3, r0
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d04b      	beq.n	8018f9a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	891a      	ldrh	r2, [r3, #8]
 8018f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f08:	4413      	add	r3, r2
 8018f0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	891b      	ldrh	r3, [r3, #8]
 8018f10:	8b7a      	ldrh	r2, [r7, #26]
 8018f12:	429a      	cmp	r2, r3
 8018f14:	f0c0 80ab 	bcc.w	801906e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018f18:	8b7b      	ldrh	r3, [r7, #26]
 8018f1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f1e:	4619      	mov	r1, r3
 8018f20:	200e      	movs	r0, #14
 8018f22:	f7f7 ff81 	bl	8010e28 <pbuf_alloc>
 8018f26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	f000 80a1 	beq.w	8019072 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	895b      	ldrh	r3, [r3, #10]
 8018f34:	461a      	mov	r2, r3
 8018f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f38:	3308      	adds	r3, #8
 8018f3a:	429a      	cmp	r2, r3
 8018f3c:	d203      	bcs.n	8018f46 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018f3e:	6978      	ldr	r0, [r7, #20]
 8018f40:	f7f8 fa56 	bl	80113f0 <pbuf_free>
          goto icmperr;
 8018f44:	e096      	b.n	8019074 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018f46:	697b      	ldr	r3, [r7, #20]
 8018f48:	685b      	ldr	r3, [r3, #4]
 8018f4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f002 facf 	bl	801b4f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f56:	4619      	mov	r1, r3
 8018f58:	6978      	ldr	r0, [r7, #20]
 8018f5a:	f7f8 f9c3 	bl	80112e4 <pbuf_remove_header>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d009      	beq.n	8018f78 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018f64:	4b49      	ldr	r3, [pc, #292]	; (801908c <icmp_input+0x230>)
 8018f66:	22b6      	movs	r2, #182	; 0xb6
 8018f68:	4949      	ldr	r1, [pc, #292]	; (8019090 <icmp_input+0x234>)
 8018f6a:	484a      	ldr	r0, [pc, #296]	; (8019094 <icmp_input+0x238>)
 8018f6c:	f002 f8e0 	bl	801b130 <iprintf>
          pbuf_free(r);
 8018f70:	6978      	ldr	r0, [r7, #20]
 8018f72:	f7f8 fa3d 	bl	80113f0 <pbuf_free>
          goto icmperr;
 8018f76:	e07d      	b.n	8019074 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018f78:	6879      	ldr	r1, [r7, #4]
 8018f7a:	6978      	ldr	r0, [r7, #20]
 8018f7c:	f7f8 fb50 	bl	8011620 <pbuf_copy>
 8018f80:	4603      	mov	r3, r0
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d003      	beq.n	8018f8e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018f86:	6978      	ldr	r0, [r7, #20]
 8018f88:	f7f8 fa32 	bl	80113f0 <pbuf_free>
          goto icmperr;
 8018f8c:	e072      	b.n	8019074 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f7f8 fa2e 	bl	80113f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	607b      	str	r3, [r7, #4]
 8018f98:	e00f      	b.n	8018fba <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f9c:	330e      	adds	r3, #14
 8018f9e:	4619      	mov	r1, r3
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	f7f8 f99f 	bl	80112e4 <pbuf_remove_header>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d006      	beq.n	8018fba <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018fac:	4b37      	ldr	r3, [pc, #220]	; (801908c <icmp_input+0x230>)
 8018fae:	22c7      	movs	r2, #199	; 0xc7
 8018fb0:	4939      	ldr	r1, [pc, #228]	; (8019098 <icmp_input+0x23c>)
 8018fb2:	4838      	ldr	r0, [pc, #224]	; (8019094 <icmp_input+0x238>)
 8018fb4:	f002 f8bc 	bl	801b130 <iprintf>
          goto icmperr;
 8018fb8:	e05c      	b.n	8019074 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	685b      	ldr	r3, [r3, #4]
 8018fbe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018fc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	f7f8 f97d 	bl	80112c4 <pbuf_add_header>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d13c      	bne.n	801904a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	685b      	ldr	r3, [r3, #4]
 8018fd4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018fd6:	69fb      	ldr	r3, [r7, #28]
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018fde:	4b29      	ldr	r3, [pc, #164]	; (8019084 <icmp_input+0x228>)
 8018fe0:	691a      	ldr	r2, [r3, #16]
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018fe6:	693b      	ldr	r3, [r7, #16]
 8018fe8:	2200      	movs	r2, #0
 8018fea:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8018fec:	693b      	ldr	r3, [r7, #16]
 8018fee:	885b      	ldrh	r3, [r3, #2]
 8018ff0:	b29b      	uxth	r3, r3
 8018ff2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018ff6:	4293      	cmp	r3, r2
 8018ff8:	d907      	bls.n	801900a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8018ffa:	693b      	ldr	r3, [r7, #16]
 8018ffc:	885b      	ldrh	r3, [r3, #2]
 8018ffe:	b29b      	uxth	r3, r3
 8019000:	3309      	adds	r3, #9
 8019002:	b29a      	uxth	r2, r3
 8019004:	693b      	ldr	r3, [r7, #16]
 8019006:	805a      	strh	r2, [r3, #2]
 8019008:	e006      	b.n	8019018 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801900a:	693b      	ldr	r3, [r7, #16]
 801900c:	885b      	ldrh	r3, [r3, #2]
 801900e:	b29b      	uxth	r3, r3
 8019010:	3308      	adds	r3, #8
 8019012:	b29a      	uxth	r2, r3
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	22ff      	movs	r2, #255	; 0xff
 801901c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	2200      	movs	r2, #0
 8019022:	729a      	strb	r2, [r3, #10]
 8019024:	2200      	movs	r2, #0
 8019026:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019028:	683b      	ldr	r3, [r7, #0]
 801902a:	9302      	str	r3, [sp, #8]
 801902c:	2301      	movs	r3, #1
 801902e:	9301      	str	r3, [sp, #4]
 8019030:	2300      	movs	r3, #0
 8019032:	9300      	str	r3, [sp, #0]
 8019034:	23ff      	movs	r3, #255	; 0xff
 8019036:	2200      	movs	r2, #0
 8019038:	69f9      	ldr	r1, [r7, #28]
 801903a:	6878      	ldr	r0, [r7, #4]
 801903c:	f000 fa80 	bl	8019540 <ip4_output_if>
 8019040:	4603      	mov	r3, r0
 8019042:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019044:	e001      	b.n	801904a <icmp_input+0x1ee>
      break;
 8019046:	bf00      	nop
 8019048:	e000      	b.n	801904c <icmp_input+0x1f0>
      break;
 801904a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f7f8 f9cf 	bl	80113f0 <pbuf_free>
  return;
 8019052:	e013      	b.n	801907c <icmp_input+0x220>
    goto lenerr;
 8019054:	bf00      	nop
 8019056:	e002      	b.n	801905e <icmp_input+0x202>
    goto lenerr;
 8019058:	bf00      	nop
 801905a:	e000      	b.n	801905e <icmp_input+0x202>
        goto lenerr;
 801905c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801905e:	6878      	ldr	r0, [r7, #4]
 8019060:	f7f8 f9c6 	bl	80113f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019064:	e00a      	b.n	801907c <icmp_input+0x220>
        goto icmperr;
 8019066:	bf00      	nop
 8019068:	e004      	b.n	8019074 <icmp_input+0x218>
        goto icmperr;
 801906a:	bf00      	nop
 801906c:	e002      	b.n	8019074 <icmp_input+0x218>
          goto icmperr;
 801906e:	bf00      	nop
 8019070:	e000      	b.n	8019074 <icmp_input+0x218>
          goto icmperr;
 8019072:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019074:	6878      	ldr	r0, [r7, #4]
 8019076:	f7f8 f9bb 	bl	80113f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801907a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801907c:	3728      	adds	r7, #40	; 0x28
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}
 8019082:	bf00      	nop
 8019084:	200008c0 	.word	0x200008c0
 8019088:	200008d4 	.word	0x200008d4
 801908c:	080201a4 	.word	0x080201a4
 8019090:	080201dc 	.word	0x080201dc
 8019094:	08020214 	.word	0x08020214
 8019098:	0802023c 	.word	0x0802023c

0801909c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b082      	sub	sp, #8
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	460b      	mov	r3, r1
 80190a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80190a8:	78fb      	ldrb	r3, [r7, #3]
 80190aa:	461a      	mov	r2, r3
 80190ac:	2103      	movs	r1, #3
 80190ae:	6878      	ldr	r0, [r7, #4]
 80190b0:	f000 f814 	bl	80190dc <icmp_send_response>
}
 80190b4:	bf00      	nop
 80190b6:	3708      	adds	r7, #8
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bd80      	pop	{r7, pc}

080190bc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b082      	sub	sp, #8
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
 80190c4:	460b      	mov	r3, r1
 80190c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80190c8:	78fb      	ldrb	r3, [r7, #3]
 80190ca:	461a      	mov	r2, r3
 80190cc:	210b      	movs	r1, #11
 80190ce:	6878      	ldr	r0, [r7, #4]
 80190d0:	f000 f804 	bl	80190dc <icmp_send_response>
}
 80190d4:	bf00      	nop
 80190d6:	3708      	adds	r7, #8
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}

080190dc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b08c      	sub	sp, #48	; 0x30
 80190e0:	af04      	add	r7, sp, #16
 80190e2:	6078      	str	r0, [r7, #4]
 80190e4:	460b      	mov	r3, r1
 80190e6:	70fb      	strb	r3, [r7, #3]
 80190e8:	4613      	mov	r3, r2
 80190ea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80190ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190f0:	2124      	movs	r1, #36	; 0x24
 80190f2:	2022      	movs	r0, #34	; 0x22
 80190f4:	f7f7 fe98 	bl	8010e28 <pbuf_alloc>
 80190f8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80190fa:	69fb      	ldr	r3, [r7, #28]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d056      	beq.n	80191ae <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019100:	69fb      	ldr	r3, [r7, #28]
 8019102:	895b      	ldrh	r3, [r3, #10]
 8019104:	2b23      	cmp	r3, #35	; 0x23
 8019106:	d806      	bhi.n	8019116 <icmp_send_response+0x3a>
 8019108:	4b2b      	ldr	r3, [pc, #172]	; (80191b8 <icmp_send_response+0xdc>)
 801910a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801910e:	492b      	ldr	r1, [pc, #172]	; (80191bc <icmp_send_response+0xe0>)
 8019110:	482b      	ldr	r0, [pc, #172]	; (80191c0 <icmp_send_response+0xe4>)
 8019112:	f002 f80d 	bl	801b130 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	685b      	ldr	r3, [r3, #4]
 801911a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801911c:	69fb      	ldr	r3, [r7, #28]
 801911e:	685b      	ldr	r3, [r3, #4]
 8019120:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019122:	697b      	ldr	r3, [r7, #20]
 8019124:	78fa      	ldrb	r2, [r7, #3]
 8019126:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	78ba      	ldrb	r2, [r7, #2]
 801912c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801912e:	697b      	ldr	r3, [r7, #20]
 8019130:	2200      	movs	r2, #0
 8019132:	711a      	strb	r2, [r3, #4]
 8019134:	2200      	movs	r2, #0
 8019136:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	2200      	movs	r2, #0
 801913c:	719a      	strb	r2, [r3, #6]
 801913e:	2200      	movs	r2, #0
 8019140:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019142:	69fb      	ldr	r3, [r7, #28]
 8019144:	685b      	ldr	r3, [r3, #4]
 8019146:	f103 0008 	add.w	r0, r3, #8
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	221c      	movs	r2, #28
 8019150:	4619      	mov	r1, r3
 8019152:	f002 f9ce 	bl	801b4f2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019156:	69bb      	ldr	r3, [r7, #24]
 8019158:	68db      	ldr	r3, [r3, #12]
 801915a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801915c:	f107 030c 	add.w	r3, r7, #12
 8019160:	4618      	mov	r0, r3
 8019162:	f000 f82f 	bl	80191c4 <ip4_route>
 8019166:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019168:	693b      	ldr	r3, [r7, #16]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d01b      	beq.n	80191a6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801916e:	697b      	ldr	r3, [r7, #20]
 8019170:	2200      	movs	r2, #0
 8019172:	709a      	strb	r2, [r3, #2]
 8019174:	2200      	movs	r2, #0
 8019176:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019178:	69fb      	ldr	r3, [r7, #28]
 801917a:	895b      	ldrh	r3, [r3, #10]
 801917c:	4619      	mov	r1, r3
 801917e:	6978      	ldr	r0, [r7, #20]
 8019180:	f7f6 fdbd 	bl	800fcfe <inet_chksum>
 8019184:	4603      	mov	r3, r0
 8019186:	461a      	mov	r2, r3
 8019188:	697b      	ldr	r3, [r7, #20]
 801918a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801918c:	f107 020c 	add.w	r2, r7, #12
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	9302      	str	r3, [sp, #8]
 8019194:	2301      	movs	r3, #1
 8019196:	9301      	str	r3, [sp, #4]
 8019198:	2300      	movs	r3, #0
 801919a:	9300      	str	r3, [sp, #0]
 801919c:	23ff      	movs	r3, #255	; 0xff
 801919e:	2100      	movs	r1, #0
 80191a0:	69f8      	ldr	r0, [r7, #28]
 80191a2:	f000 f9cd 	bl	8019540 <ip4_output_if>
  }
  pbuf_free(q);
 80191a6:	69f8      	ldr	r0, [r7, #28]
 80191a8:	f7f8 f922 	bl	80113f0 <pbuf_free>
 80191ac:	e000      	b.n	80191b0 <icmp_send_response+0xd4>
    return;
 80191ae:	bf00      	nop
}
 80191b0:	3720      	adds	r7, #32
 80191b2:	46bd      	mov	sp, r7
 80191b4:	bd80      	pop	{r7, pc}
 80191b6:	bf00      	nop
 80191b8:	080201a4 	.word	0x080201a4
 80191bc:	08020270 	.word	0x08020270
 80191c0:	08020214 	.word	0x08020214

080191c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80191c4:	b480      	push	{r7}
 80191c6:	b085      	sub	sp, #20
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80191cc:	4b33      	ldr	r3, [pc, #204]	; (801929c <ip4_route+0xd8>)
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	60fb      	str	r3, [r7, #12]
 80191d2:	e036      	b.n	8019242 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80191da:	f003 0301 	and.w	r3, r3, #1
 80191de:	b2db      	uxtb	r3, r3
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d02b      	beq.n	801923c <ip4_route+0x78>
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80191ea:	089b      	lsrs	r3, r3, #2
 80191ec:	f003 0301 	and.w	r3, r3, #1
 80191f0:	b2db      	uxtb	r3, r3
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d022      	beq.n	801923c <ip4_route+0x78>
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	3304      	adds	r3, #4
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d01d      	beq.n	801923c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681a      	ldr	r2, [r3, #0]
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	3304      	adds	r3, #4
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	405a      	eors	r2, r3
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	3308      	adds	r3, #8
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	4013      	ands	r3, r2
 8019214:	2b00      	cmp	r3, #0
 8019216:	d101      	bne.n	801921c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	e038      	b.n	801928e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019222:	f003 0302 	and.w	r3, r3, #2
 8019226:	2b00      	cmp	r3, #0
 8019228:	d108      	bne.n	801923c <ip4_route+0x78>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681a      	ldr	r2, [r3, #0]
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	330c      	adds	r3, #12
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	429a      	cmp	r2, r3
 8019236:	d101      	bne.n	801923c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	e028      	b.n	801928e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	60fb      	str	r3, [r7, #12]
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d1c5      	bne.n	80191d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019248:	4b15      	ldr	r3, [pc, #84]	; (80192a0 <ip4_route+0xdc>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d01a      	beq.n	8019286 <ip4_route+0xc2>
 8019250:	4b13      	ldr	r3, [pc, #76]	; (80192a0 <ip4_route+0xdc>)
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019258:	f003 0301 	and.w	r3, r3, #1
 801925c:	2b00      	cmp	r3, #0
 801925e:	d012      	beq.n	8019286 <ip4_route+0xc2>
 8019260:	4b0f      	ldr	r3, [pc, #60]	; (80192a0 <ip4_route+0xdc>)
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019268:	f003 0304 	and.w	r3, r3, #4
 801926c:	2b00      	cmp	r3, #0
 801926e:	d00a      	beq.n	8019286 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019270:	4b0b      	ldr	r3, [pc, #44]	; (80192a0 <ip4_route+0xdc>)
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	3304      	adds	r3, #4
 8019276:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019278:	2b00      	cmp	r3, #0
 801927a:	d004      	beq.n	8019286 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	b2db      	uxtb	r3, r3
 8019282:	2b7f      	cmp	r3, #127	; 0x7f
 8019284:	d101      	bne.n	801928a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019286:	2300      	movs	r3, #0
 8019288:	e001      	b.n	801928e <ip4_route+0xca>
  }

  return netif_default;
 801928a:	4b05      	ldr	r3, [pc, #20]	; (80192a0 <ip4_route+0xdc>)
 801928c:	681b      	ldr	r3, [r3, #0]
}
 801928e:	4618      	mov	r0, r3
 8019290:	3714      	adds	r7, #20
 8019292:	46bd      	mov	sp, r7
 8019294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019298:	4770      	bx	lr
 801929a:	bf00      	nop
 801929c:	20007190 	.word	0x20007190
 80192a0:	20007194 	.word	0x20007194

080192a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b082      	sub	sp, #8
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80192b2:	f003 0301 	and.w	r3, r3, #1
 80192b6:	b2db      	uxtb	r3, r3
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d016      	beq.n	80192ea <ip4_input_accept+0x46>
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	3304      	adds	r3, #4
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d011      	beq.n	80192ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80192c6:	4b0b      	ldr	r3, [pc, #44]	; (80192f4 <ip4_input_accept+0x50>)
 80192c8:	695a      	ldr	r2, [r3, #20]
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	3304      	adds	r3, #4
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d008      	beq.n	80192e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80192d4:	4b07      	ldr	r3, [pc, #28]	; (80192f4 <ip4_input_accept+0x50>)
 80192d6:	695b      	ldr	r3, [r3, #20]
 80192d8:	6879      	ldr	r1, [r7, #4]
 80192da:	4618      	mov	r0, r3
 80192dc:	f000 fa08 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 80192e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d001      	beq.n	80192ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80192e6:	2301      	movs	r3, #1
 80192e8:	e000      	b.n	80192ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80192ea:	2300      	movs	r3, #0
}
 80192ec:	4618      	mov	r0, r3
 80192ee:	3708      	adds	r7, #8
 80192f0:	46bd      	mov	sp, r7
 80192f2:	bd80      	pop	{r7, pc}
 80192f4:	200008c0 	.word	0x200008c0

080192f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b086      	sub	sp, #24
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
 8019300:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	685b      	ldr	r3, [r3, #4]
 8019306:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	781b      	ldrb	r3, [r3, #0]
 801930c:	091b      	lsrs	r3, r3, #4
 801930e:	b2db      	uxtb	r3, r3
 8019310:	2b04      	cmp	r3, #4
 8019312:	d004      	beq.n	801931e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	f7f8 f86b 	bl	80113f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801931a:	2300      	movs	r3, #0
 801931c:	e107      	b.n	801952e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801931e:	697b      	ldr	r3, [r7, #20]
 8019320:	781b      	ldrb	r3, [r3, #0]
 8019322:	f003 030f 	and.w	r3, r3, #15
 8019326:	b2db      	uxtb	r3, r3
 8019328:	009b      	lsls	r3, r3, #2
 801932a:	b2db      	uxtb	r3, r3
 801932c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801932e:	697b      	ldr	r3, [r7, #20]
 8019330:	885b      	ldrh	r3, [r3, #2]
 8019332:	b29b      	uxth	r3, r3
 8019334:	4618      	mov	r0, r3
 8019336:	f7f6 fc57 	bl	800fbe8 <lwip_htons>
 801933a:	4603      	mov	r3, r0
 801933c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	891b      	ldrh	r3, [r3, #8]
 8019342:	89ba      	ldrh	r2, [r7, #12]
 8019344:	429a      	cmp	r2, r3
 8019346:	d204      	bcs.n	8019352 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019348:	89bb      	ldrh	r3, [r7, #12]
 801934a:	4619      	mov	r1, r3
 801934c:	6878      	ldr	r0, [r7, #4]
 801934e:	f7f7 fecb 	bl	80110e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	895b      	ldrh	r3, [r3, #10]
 8019356:	89fa      	ldrh	r2, [r7, #14]
 8019358:	429a      	cmp	r2, r3
 801935a:	d807      	bhi.n	801936c <ip4_input+0x74>
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	891b      	ldrh	r3, [r3, #8]
 8019360:	89ba      	ldrh	r2, [r7, #12]
 8019362:	429a      	cmp	r2, r3
 8019364:	d802      	bhi.n	801936c <ip4_input+0x74>
 8019366:	89fb      	ldrh	r3, [r7, #14]
 8019368:	2b13      	cmp	r3, #19
 801936a:	d804      	bhi.n	8019376 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801936c:	6878      	ldr	r0, [r7, #4]
 801936e:	f7f8 f83f 	bl	80113f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019372:	2300      	movs	r3, #0
 8019374:	e0db      	b.n	801952e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019376:	697b      	ldr	r3, [r7, #20]
 8019378:	691b      	ldr	r3, [r3, #16]
 801937a:	4a6f      	ldr	r2, [pc, #444]	; (8019538 <ip4_input+0x240>)
 801937c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801937e:	697b      	ldr	r3, [r7, #20]
 8019380:	68db      	ldr	r3, [r3, #12]
 8019382:	4a6d      	ldr	r2, [pc, #436]	; (8019538 <ip4_input+0x240>)
 8019384:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019386:	4b6c      	ldr	r3, [pc, #432]	; (8019538 <ip4_input+0x240>)
 8019388:	695b      	ldr	r3, [r3, #20]
 801938a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801938e:	2be0      	cmp	r3, #224	; 0xe0
 8019390:	d112      	bne.n	80193b8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019392:	683b      	ldr	r3, [r7, #0]
 8019394:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019398:	f003 0301 	and.w	r3, r3, #1
 801939c:	b2db      	uxtb	r3, r3
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d007      	beq.n	80193b2 <ip4_input+0xba>
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	3304      	adds	r3, #4
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d002      	beq.n	80193b2 <ip4_input+0xba>
      netif = inp;
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	613b      	str	r3, [r7, #16]
 80193b0:	e02a      	b.n	8019408 <ip4_input+0x110>
    } else {
      netif = NULL;
 80193b2:	2300      	movs	r3, #0
 80193b4:	613b      	str	r3, [r7, #16]
 80193b6:	e027      	b.n	8019408 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80193b8:	6838      	ldr	r0, [r7, #0]
 80193ba:	f7ff ff73 	bl	80192a4 <ip4_input_accept>
 80193be:	4603      	mov	r3, r0
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d002      	beq.n	80193ca <ip4_input+0xd2>
      netif = inp;
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	613b      	str	r3, [r7, #16]
 80193c8:	e01e      	b.n	8019408 <ip4_input+0x110>
    } else {
      netif = NULL;
 80193ca:	2300      	movs	r3, #0
 80193cc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80193ce:	4b5a      	ldr	r3, [pc, #360]	; (8019538 <ip4_input+0x240>)
 80193d0:	695b      	ldr	r3, [r3, #20]
 80193d2:	b2db      	uxtb	r3, r3
 80193d4:	2b7f      	cmp	r3, #127	; 0x7f
 80193d6:	d017      	beq.n	8019408 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80193d8:	4b58      	ldr	r3, [pc, #352]	; (801953c <ip4_input+0x244>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	613b      	str	r3, [r7, #16]
 80193de:	e00e      	b.n	80193fe <ip4_input+0x106>
          if (netif == inp) {
 80193e0:	693a      	ldr	r2, [r7, #16]
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d006      	beq.n	80193f6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80193e8:	6938      	ldr	r0, [r7, #16]
 80193ea:	f7ff ff5b 	bl	80192a4 <ip4_input_accept>
 80193ee:	4603      	mov	r3, r0
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d108      	bne.n	8019406 <ip4_input+0x10e>
 80193f4:	e000      	b.n	80193f8 <ip4_input+0x100>
            continue;
 80193f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80193f8:	693b      	ldr	r3, [r7, #16]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	613b      	str	r3, [r7, #16]
 80193fe:	693b      	ldr	r3, [r7, #16]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d1ed      	bne.n	80193e0 <ip4_input+0xe8>
 8019404:	e000      	b.n	8019408 <ip4_input+0x110>
            break;
 8019406:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019408:	4b4b      	ldr	r3, [pc, #300]	; (8019538 <ip4_input+0x240>)
 801940a:	691b      	ldr	r3, [r3, #16]
 801940c:	6839      	ldr	r1, [r7, #0]
 801940e:	4618      	mov	r0, r3
 8019410:	f000 f96e 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 8019414:	4603      	mov	r3, r0
 8019416:	2b00      	cmp	r3, #0
 8019418:	d105      	bne.n	8019426 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801941a:	4b47      	ldr	r3, [pc, #284]	; (8019538 <ip4_input+0x240>)
 801941c:	691b      	ldr	r3, [r3, #16]
 801941e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019422:	2be0      	cmp	r3, #224	; 0xe0
 8019424:	d104      	bne.n	8019430 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019426:	6878      	ldr	r0, [r7, #4]
 8019428:	f7f7 ffe2 	bl	80113f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801942c:	2300      	movs	r3, #0
 801942e:	e07e      	b.n	801952e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019430:	693b      	ldr	r3, [r7, #16]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d104      	bne.n	8019440 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019436:	6878      	ldr	r0, [r7, #4]
 8019438:	f7f7 ffda 	bl	80113f0 <pbuf_free>
    return ERR_OK;
 801943c:	2300      	movs	r3, #0
 801943e:	e076      	b.n	801952e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019440:	697b      	ldr	r3, [r7, #20]
 8019442:	88db      	ldrh	r3, [r3, #6]
 8019444:	b29b      	uxth	r3, r3
 8019446:	461a      	mov	r2, r3
 8019448:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801944c:	4013      	ands	r3, r2
 801944e:	2b00      	cmp	r3, #0
 8019450:	d00b      	beq.n	801946a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019452:	6878      	ldr	r0, [r7, #4]
 8019454:	f000 fd22 	bl	8019e9c <ip4_reass>
 8019458:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d101      	bne.n	8019464 <ip4_input+0x16c>
      return ERR_OK;
 8019460:	2300      	movs	r3, #0
 8019462:	e064      	b.n	801952e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	685b      	ldr	r3, [r3, #4]
 8019468:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801946a:	4a33      	ldr	r2, [pc, #204]	; (8019538 <ip4_input+0x240>)
 801946c:	693b      	ldr	r3, [r7, #16]
 801946e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019470:	4a31      	ldr	r2, [pc, #196]	; (8019538 <ip4_input+0x240>)
 8019472:	683b      	ldr	r3, [r7, #0]
 8019474:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019476:	4a30      	ldr	r2, [pc, #192]	; (8019538 <ip4_input+0x240>)
 8019478:	697b      	ldr	r3, [r7, #20]
 801947a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	781b      	ldrb	r3, [r3, #0]
 8019480:	f003 030f 	and.w	r3, r3, #15
 8019484:	b2db      	uxtb	r3, r3
 8019486:	009b      	lsls	r3, r3, #2
 8019488:	b2db      	uxtb	r3, r3
 801948a:	b29a      	uxth	r2, r3
 801948c:	4b2a      	ldr	r3, [pc, #168]	; (8019538 <ip4_input+0x240>)
 801948e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019490:	89fb      	ldrh	r3, [r7, #14]
 8019492:	4619      	mov	r1, r3
 8019494:	6878      	ldr	r0, [r7, #4]
 8019496:	f7f7 ff25 	bl	80112e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801949a:	697b      	ldr	r3, [r7, #20]
 801949c:	7a5b      	ldrb	r3, [r3, #9]
 801949e:	2b11      	cmp	r3, #17
 80194a0:	d006      	beq.n	80194b0 <ip4_input+0x1b8>
 80194a2:	2b11      	cmp	r3, #17
 80194a4:	dc13      	bgt.n	80194ce <ip4_input+0x1d6>
 80194a6:	2b01      	cmp	r3, #1
 80194a8:	d00c      	beq.n	80194c4 <ip4_input+0x1cc>
 80194aa:	2b06      	cmp	r3, #6
 80194ac:	d005      	beq.n	80194ba <ip4_input+0x1c2>
 80194ae:	e00e      	b.n	80194ce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80194b0:	6839      	ldr	r1, [r7, #0]
 80194b2:	6878      	ldr	r0, [r7, #4]
 80194b4:	f7fe fc42 	bl	8017d3c <udp_input>
        break;
 80194b8:	e026      	b.n	8019508 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80194ba:	6839      	ldr	r1, [r7, #0]
 80194bc:	6878      	ldr	r0, [r7, #4]
 80194be:	f7fa f863 	bl	8013588 <tcp_input>
        break;
 80194c2:	e021      	b.n	8019508 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80194c4:	6839      	ldr	r1, [r7, #0]
 80194c6:	6878      	ldr	r0, [r7, #4]
 80194c8:	f7ff fcc8 	bl	8018e5c <icmp_input>
        break;
 80194cc:	e01c      	b.n	8019508 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80194ce:	4b1a      	ldr	r3, [pc, #104]	; (8019538 <ip4_input+0x240>)
 80194d0:	695b      	ldr	r3, [r3, #20]
 80194d2:	6939      	ldr	r1, [r7, #16]
 80194d4:	4618      	mov	r0, r3
 80194d6:	f000 f90b 	bl	80196f0 <ip4_addr_isbroadcast_u32>
 80194da:	4603      	mov	r3, r0
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d10f      	bne.n	8019500 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80194e0:	4b15      	ldr	r3, [pc, #84]	; (8019538 <ip4_input+0x240>)
 80194e2:	695b      	ldr	r3, [r3, #20]
 80194e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80194e8:	2be0      	cmp	r3, #224	; 0xe0
 80194ea:	d009      	beq.n	8019500 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80194ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80194f0:	4619      	mov	r1, r3
 80194f2:	6878      	ldr	r0, [r7, #4]
 80194f4:	f7f7 ff69 	bl	80113ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80194f8:	2102      	movs	r1, #2
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f7ff fdce 	bl	801909c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019500:	6878      	ldr	r0, [r7, #4]
 8019502:	f7f7 ff75 	bl	80113f0 <pbuf_free>
        break;
 8019506:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019508:	4b0b      	ldr	r3, [pc, #44]	; (8019538 <ip4_input+0x240>)
 801950a:	2200      	movs	r2, #0
 801950c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801950e:	4b0a      	ldr	r3, [pc, #40]	; (8019538 <ip4_input+0x240>)
 8019510:	2200      	movs	r2, #0
 8019512:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019514:	4b08      	ldr	r3, [pc, #32]	; (8019538 <ip4_input+0x240>)
 8019516:	2200      	movs	r2, #0
 8019518:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801951a:	4b07      	ldr	r3, [pc, #28]	; (8019538 <ip4_input+0x240>)
 801951c:	2200      	movs	r2, #0
 801951e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019520:	4b05      	ldr	r3, [pc, #20]	; (8019538 <ip4_input+0x240>)
 8019522:	2200      	movs	r2, #0
 8019524:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019526:	4b04      	ldr	r3, [pc, #16]	; (8019538 <ip4_input+0x240>)
 8019528:	2200      	movs	r2, #0
 801952a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801952c:	2300      	movs	r3, #0
}
 801952e:	4618      	mov	r0, r3
 8019530:	3718      	adds	r7, #24
 8019532:	46bd      	mov	sp, r7
 8019534:	bd80      	pop	{r7, pc}
 8019536:	bf00      	nop
 8019538:	200008c0 	.word	0x200008c0
 801953c:	20007190 	.word	0x20007190

08019540 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b08a      	sub	sp, #40	; 0x28
 8019544:	af04      	add	r7, sp, #16
 8019546:	60f8      	str	r0, [r7, #12]
 8019548:	60b9      	str	r1, [r7, #8]
 801954a:	607a      	str	r2, [r7, #4]
 801954c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801954e:	68bb      	ldr	r3, [r7, #8]
 8019550:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d009      	beq.n	801956c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d003      	beq.n	8019566 <ip4_output_if+0x26>
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d102      	bne.n	801956c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019568:	3304      	adds	r3, #4
 801956a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801956c:	78fa      	ldrb	r2, [r7, #3]
 801956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019570:	9302      	str	r3, [sp, #8]
 8019572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019576:	9301      	str	r3, [sp, #4]
 8019578:	f897 3020 	ldrb.w	r3, [r7, #32]
 801957c:	9300      	str	r3, [sp, #0]
 801957e:	4613      	mov	r3, r2
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	6979      	ldr	r1, [r7, #20]
 8019584:	68f8      	ldr	r0, [r7, #12]
 8019586:	f000 f805 	bl	8019594 <ip4_output_if_src>
 801958a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801958c:	4618      	mov	r0, r3
 801958e:	3718      	adds	r7, #24
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}

08019594 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b088      	sub	sp, #32
 8019598:	af00      	add	r7, sp, #0
 801959a:	60f8      	str	r0, [r7, #12]
 801959c:	60b9      	str	r1, [r7, #8]
 801959e:	607a      	str	r2, [r7, #4]
 80195a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	7b9b      	ldrb	r3, [r3, #14]
 80195a6:	2b01      	cmp	r3, #1
 80195a8:	d006      	beq.n	80195b8 <ip4_output_if_src+0x24>
 80195aa:	4b4b      	ldr	r3, [pc, #300]	; (80196d8 <ip4_output_if_src+0x144>)
 80195ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 80195b0:	494a      	ldr	r1, [pc, #296]	; (80196dc <ip4_output_if_src+0x148>)
 80195b2:	484b      	ldr	r0, [pc, #300]	; (80196e0 <ip4_output_if_src+0x14c>)
 80195b4:	f001 fdbc 	bl	801b130 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d060      	beq.n	8019680 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80195be:	2314      	movs	r3, #20
 80195c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80195c2:	2114      	movs	r1, #20
 80195c4:	68f8      	ldr	r0, [r7, #12]
 80195c6:	f7f7 fe7d 	bl	80112c4 <pbuf_add_header>
 80195ca:	4603      	mov	r3, r0
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d002      	beq.n	80195d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80195d0:	f06f 0301 	mvn.w	r3, #1
 80195d4:	e07c      	b.n	80196d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	685b      	ldr	r3, [r3, #4]
 80195da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	895b      	ldrh	r3, [r3, #10]
 80195e0:	2b13      	cmp	r3, #19
 80195e2:	d806      	bhi.n	80195f2 <ip4_output_if_src+0x5e>
 80195e4:	4b3c      	ldr	r3, [pc, #240]	; (80196d8 <ip4_output_if_src+0x144>)
 80195e6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80195ea:	493e      	ldr	r1, [pc, #248]	; (80196e4 <ip4_output_if_src+0x150>)
 80195ec:	483c      	ldr	r0, [pc, #240]	; (80196e0 <ip4_output_if_src+0x14c>)
 80195ee:	f001 fd9f 	bl	801b130 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80195f2:	69fb      	ldr	r3, [r7, #28]
 80195f4:	78fa      	ldrb	r2, [r7, #3]
 80195f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80195f8:	69fb      	ldr	r3, [r7, #28]
 80195fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80195fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	681a      	ldr	r2, [r3, #0]
 8019604:	69fb      	ldr	r3, [r7, #28]
 8019606:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019608:	8b7b      	ldrh	r3, [r7, #26]
 801960a:	089b      	lsrs	r3, r3, #2
 801960c:	b29b      	uxth	r3, r3
 801960e:	b2db      	uxtb	r3, r3
 8019610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019614:	b2da      	uxtb	r2, r3
 8019616:	69fb      	ldr	r3, [r7, #28]
 8019618:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801961a:	69fb      	ldr	r3, [r7, #28]
 801961c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019620:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	891b      	ldrh	r3, [r3, #8]
 8019626:	4618      	mov	r0, r3
 8019628:	f7f6 fade 	bl	800fbe8 <lwip_htons>
 801962c:	4603      	mov	r3, r0
 801962e:	461a      	mov	r2, r3
 8019630:	69fb      	ldr	r3, [r7, #28]
 8019632:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019634:	69fb      	ldr	r3, [r7, #28]
 8019636:	2200      	movs	r2, #0
 8019638:	719a      	strb	r2, [r3, #6]
 801963a:	2200      	movs	r2, #0
 801963c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801963e:	4b2a      	ldr	r3, [pc, #168]	; (80196e8 <ip4_output_if_src+0x154>)
 8019640:	881b      	ldrh	r3, [r3, #0]
 8019642:	4618      	mov	r0, r3
 8019644:	f7f6 fad0 	bl	800fbe8 <lwip_htons>
 8019648:	4603      	mov	r3, r0
 801964a:	461a      	mov	r2, r3
 801964c:	69fb      	ldr	r3, [r7, #28]
 801964e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019650:	4b25      	ldr	r3, [pc, #148]	; (80196e8 <ip4_output_if_src+0x154>)
 8019652:	881b      	ldrh	r3, [r3, #0]
 8019654:	3301      	adds	r3, #1
 8019656:	b29a      	uxth	r2, r3
 8019658:	4b23      	ldr	r3, [pc, #140]	; (80196e8 <ip4_output_if_src+0x154>)
 801965a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801965c:	68bb      	ldr	r3, [r7, #8]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d104      	bne.n	801966c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019662:	4b22      	ldr	r3, [pc, #136]	; (80196ec <ip4_output_if_src+0x158>)
 8019664:	681a      	ldr	r2, [r3, #0]
 8019666:	69fb      	ldr	r3, [r7, #28]
 8019668:	60da      	str	r2, [r3, #12]
 801966a:	e003      	b.n	8019674 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801966c:	68bb      	ldr	r3, [r7, #8]
 801966e:	681a      	ldr	r2, [r3, #0]
 8019670:	69fb      	ldr	r3, [r7, #28]
 8019672:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019674:	69fb      	ldr	r3, [r7, #28]
 8019676:	2200      	movs	r2, #0
 8019678:	729a      	strb	r2, [r3, #10]
 801967a:	2200      	movs	r2, #0
 801967c:	72da      	strb	r2, [r3, #11]
 801967e:	e00f      	b.n	80196a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	895b      	ldrh	r3, [r3, #10]
 8019684:	2b13      	cmp	r3, #19
 8019686:	d802      	bhi.n	801968e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019688:	f06f 0301 	mvn.w	r3, #1
 801968c:	e020      	b.n	80196d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	685b      	ldr	r3, [r3, #4]
 8019692:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019694:	69fb      	ldr	r3, [r7, #28]
 8019696:	691b      	ldr	r3, [r3, #16]
 8019698:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801969a:	f107 0314 	add.w	r3, r7, #20
 801969e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80196a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d00c      	beq.n	80196c2 <ip4_output_if_src+0x12e>
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	891a      	ldrh	r2, [r3, #8]
 80196ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d906      	bls.n	80196c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80196b4:	687a      	ldr	r2, [r7, #4]
 80196b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80196b8:	68f8      	ldr	r0, [r7, #12]
 80196ba:	f000 fde3 	bl	801a284 <ip4_frag>
 80196be:	4603      	mov	r3, r0
 80196c0:	e006      	b.n	80196d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80196c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196c4:	695b      	ldr	r3, [r3, #20]
 80196c6:	687a      	ldr	r2, [r7, #4]
 80196c8:	68f9      	ldr	r1, [r7, #12]
 80196ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80196cc:	4798      	blx	r3
 80196ce:	4603      	mov	r3, r0
}
 80196d0:	4618      	mov	r0, r3
 80196d2:	3720      	adds	r7, #32
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd80      	pop	{r7, pc}
 80196d8:	0802029c 	.word	0x0802029c
 80196dc:	080202d0 	.word	0x080202d0
 80196e0:	080202dc 	.word	0x080202dc
 80196e4:	08020304 	.word	0x08020304
 80196e8:	200072ee 	.word	0x200072ee
 80196ec:	08020724 	.word	0x08020724

080196f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80196f0:	b480      	push	{r7}
 80196f2:	b085      	sub	sp, #20
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	6078      	str	r0, [r7, #4]
 80196f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019704:	d002      	beq.n	801970c <ip4_addr_isbroadcast_u32+0x1c>
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d101      	bne.n	8019710 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801970c:	2301      	movs	r3, #1
 801970e:	e02a      	b.n	8019766 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019716:	f003 0302 	and.w	r3, r3, #2
 801971a:	2b00      	cmp	r3, #0
 801971c:	d101      	bne.n	8019722 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801971e:	2300      	movs	r3, #0
 8019720:	e021      	b.n	8019766 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	3304      	adds	r3, #4
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	687a      	ldr	r2, [r7, #4]
 801972a:	429a      	cmp	r2, r3
 801972c:	d101      	bne.n	8019732 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801972e:	2300      	movs	r3, #0
 8019730:	e019      	b.n	8019766 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019732:	68fa      	ldr	r2, [r7, #12]
 8019734:	683b      	ldr	r3, [r7, #0]
 8019736:	3304      	adds	r3, #4
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	405a      	eors	r2, r3
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	3308      	adds	r3, #8
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	4013      	ands	r3, r2
 8019744:	2b00      	cmp	r3, #0
 8019746:	d10d      	bne.n	8019764 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019748:	683b      	ldr	r3, [r7, #0]
 801974a:	3308      	adds	r3, #8
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	43da      	mvns	r2, r3
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019754:	683b      	ldr	r3, [r7, #0]
 8019756:	3308      	adds	r3, #8
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801975c:	429a      	cmp	r2, r3
 801975e:	d101      	bne.n	8019764 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019760:	2301      	movs	r3, #1
 8019762:	e000      	b.n	8019766 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019764:	2300      	movs	r3, #0
  }
}
 8019766:	4618      	mov	r0, r3
 8019768:	3714      	adds	r7, #20
 801976a:	46bd      	mov	sp, r7
 801976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019770:	4770      	bx	lr
	...

08019774 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b082      	sub	sp, #8
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801977c:	2210      	movs	r2, #16
 801977e:	4904      	ldr	r1, [pc, #16]	; (8019790 <ip4addr_ntoa+0x1c>)
 8019780:	6878      	ldr	r0, [r7, #4]
 8019782:	f000 f807 	bl	8019794 <ip4addr_ntoa_r>
 8019786:	4603      	mov	r3, r0
}
 8019788:	4618      	mov	r0, r3
 801978a:	3708      	adds	r7, #8
 801978c:	46bd      	mov	sp, r7
 801978e:	bd80      	pop	{r7, pc}
 8019790:	200072f0 	.word	0x200072f0

08019794 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019794:	b480      	push	{r7}
 8019796:	b08d      	sub	sp, #52	; 0x34
 8019798:	af00      	add	r7, sp, #0
 801979a:	60f8      	str	r0, [r7, #12]
 801979c:	60b9      	str	r1, [r7, #8]
 801979e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80197a0:	2300      	movs	r3, #0
 80197a2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80197aa:	68bb      	ldr	r3, [r7, #8]
 80197ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80197ae:	f107 0318 	add.w	r3, r7, #24
 80197b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80197b4:	2300      	movs	r3, #0
 80197b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80197ba:	e058      	b.n	801986e <ip4addr_ntoa_r+0xda>
    i = 0;
 80197bc:	2300      	movs	r3, #0
 80197be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80197c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c4:	781a      	ldrb	r2, [r3, #0]
 80197c6:	4b32      	ldr	r3, [pc, #200]	; (8019890 <ip4addr_ntoa_r+0xfc>)
 80197c8:	fba3 1302 	umull	r1, r3, r3, r2
 80197cc:	08d9      	lsrs	r1, r3, #3
 80197ce:	460b      	mov	r3, r1
 80197d0:	009b      	lsls	r3, r3, #2
 80197d2:	440b      	add	r3, r1
 80197d4:	005b      	lsls	r3, r3, #1
 80197d6:	1ad3      	subs	r3, r2, r3
 80197d8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80197da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197dc:	781b      	ldrb	r3, [r3, #0]
 80197de:	4a2c      	ldr	r2, [pc, #176]	; (8019890 <ip4addr_ntoa_r+0xfc>)
 80197e0:	fba2 2303 	umull	r2, r3, r2, r3
 80197e4:	08db      	lsrs	r3, r3, #3
 80197e6:	b2da      	uxtb	r2, r3
 80197e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ea:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80197ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80197f0:	1c5a      	adds	r2, r3, #1
 80197f2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80197f6:	4619      	mov	r1, r3
 80197f8:	7ffb      	ldrb	r3, [r7, #31]
 80197fa:	3330      	adds	r3, #48	; 0x30
 80197fc:	b2da      	uxtb	r2, r3
 80197fe:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8019802:	443b      	add	r3, r7
 8019804:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8019808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801980a:	781b      	ldrb	r3, [r3, #0]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d1d8      	bne.n	80197c2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8019810:	e011      	b.n	8019836 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8019812:	6a3b      	ldr	r3, [r7, #32]
 8019814:	1c5a      	adds	r2, r3, #1
 8019816:	623a      	str	r2, [r7, #32]
 8019818:	687a      	ldr	r2, [r7, #4]
 801981a:	429a      	cmp	r2, r3
 801981c:	dc01      	bgt.n	8019822 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801981e:	2300      	movs	r3, #0
 8019820:	e030      	b.n	8019884 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8019822:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8019826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019828:	1c59      	adds	r1, r3, #1
 801982a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801982c:	3230      	adds	r2, #48	; 0x30
 801982e:	443a      	add	r2, r7
 8019830:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8019834:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8019836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801983a:	1e5a      	subs	r2, r3, #1
 801983c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8019840:	2b00      	cmp	r3, #0
 8019842:	d1e6      	bne.n	8019812 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8019844:	6a3b      	ldr	r3, [r7, #32]
 8019846:	1c5a      	adds	r2, r3, #1
 8019848:	623a      	str	r2, [r7, #32]
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	429a      	cmp	r2, r3
 801984e:	dc01      	bgt.n	8019854 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8019850:	2300      	movs	r3, #0
 8019852:	e017      	b.n	8019884 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8019854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019856:	1c5a      	adds	r2, r3, #1
 8019858:	62fa      	str	r2, [r7, #44]	; 0x2c
 801985a:	222e      	movs	r2, #46	; 0x2e
 801985c:	701a      	strb	r2, [r3, #0]
    ap++;
 801985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019860:	3301      	adds	r3, #1
 8019862:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019868:	3301      	adds	r3, #1
 801986a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801986e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019872:	2b03      	cmp	r3, #3
 8019874:	d9a2      	bls.n	80197bc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8019876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019878:	3b01      	subs	r3, #1
 801987a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801987e:	2200      	movs	r2, #0
 8019880:	701a      	strb	r2, [r3, #0]
  return buf;
 8019882:	68bb      	ldr	r3, [r7, #8]
}
 8019884:	4618      	mov	r0, r3
 8019886:	3734      	adds	r7, #52	; 0x34
 8019888:	46bd      	mov	sp, r7
 801988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988e:	4770      	bx	lr
 8019890:	cccccccd 	.word	0xcccccccd

08019894 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019894:	b580      	push	{r7, lr}
 8019896:	b084      	sub	sp, #16
 8019898:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801989a:	2300      	movs	r3, #0
 801989c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801989e:	4b12      	ldr	r3, [pc, #72]	; (80198e8 <ip_reass_tmr+0x54>)
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80198a4:	e018      	b.n	80198d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	7fdb      	ldrb	r3, [r3, #31]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d00b      	beq.n	80198c6 <ip_reass_tmr+0x32>
      r->timer--;
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	7fdb      	ldrb	r3, [r3, #31]
 80198b2:	3b01      	subs	r3, #1
 80198b4:	b2da      	uxtb	r2, r3
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	60fb      	str	r3, [r7, #12]
 80198c4:	e008      	b.n	80198d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80198d0:	68b9      	ldr	r1, [r7, #8]
 80198d2:	6878      	ldr	r0, [r7, #4]
 80198d4:	f000 f80a 	bl	80198ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d1e3      	bne.n	80198a6 <ip_reass_tmr+0x12>
    }
  }
}
 80198de:	bf00      	nop
 80198e0:	bf00      	nop
 80198e2:	3710      	adds	r7, #16
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd80      	pop	{r7, pc}
 80198e8:	20007300 	.word	0x20007300

080198ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b088      	sub	sp, #32
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80198f6:	2300      	movs	r3, #0
 80198f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80198fa:	683a      	ldr	r2, [r7, #0]
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	429a      	cmp	r2, r3
 8019900:	d105      	bne.n	801990e <ip_reass_free_complete_datagram+0x22>
 8019902:	4b45      	ldr	r3, [pc, #276]	; (8019a18 <ip_reass_free_complete_datagram+0x12c>)
 8019904:	22ab      	movs	r2, #171	; 0xab
 8019906:	4945      	ldr	r1, [pc, #276]	; (8019a1c <ip_reass_free_complete_datagram+0x130>)
 8019908:	4845      	ldr	r0, [pc, #276]	; (8019a20 <ip_reass_free_complete_datagram+0x134>)
 801990a:	f001 fc11 	bl	801b130 <iprintf>
  if (prev != NULL) {
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d00a      	beq.n	801992a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	687a      	ldr	r2, [r7, #4]
 801991a:	429a      	cmp	r2, r3
 801991c:	d005      	beq.n	801992a <ip_reass_free_complete_datagram+0x3e>
 801991e:	4b3e      	ldr	r3, [pc, #248]	; (8019a18 <ip_reass_free_complete_datagram+0x12c>)
 8019920:	22ad      	movs	r2, #173	; 0xad
 8019922:	4940      	ldr	r1, [pc, #256]	; (8019a24 <ip_reass_free_complete_datagram+0x138>)
 8019924:	483e      	ldr	r0, [pc, #248]	; (8019a20 <ip_reass_free_complete_datagram+0x134>)
 8019926:	f001 fc03 	bl	801b130 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	685b      	ldr	r3, [r3, #4]
 801992e:	685b      	ldr	r3, [r3, #4]
 8019930:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019932:	697b      	ldr	r3, [r7, #20]
 8019934:	889b      	ldrh	r3, [r3, #4]
 8019936:	b29b      	uxth	r3, r3
 8019938:	2b00      	cmp	r3, #0
 801993a:	d12a      	bne.n	8019992 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	685b      	ldr	r3, [r3, #4]
 8019940:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019942:	697b      	ldr	r3, [r7, #20]
 8019944:	681a      	ldr	r2, [r3, #0]
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801994a:	69bb      	ldr	r3, [r7, #24]
 801994c:	6858      	ldr	r0, [r3, #4]
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	3308      	adds	r3, #8
 8019952:	2214      	movs	r2, #20
 8019954:	4619      	mov	r1, r3
 8019956:	f001 fdcc 	bl	801b4f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801995a:	2101      	movs	r1, #1
 801995c:	69b8      	ldr	r0, [r7, #24]
 801995e:	f7ff fbad 	bl	80190bc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019962:	69b8      	ldr	r0, [r7, #24]
 8019964:	f7f7 fdcc 	bl	8011500 <pbuf_clen>
 8019968:	4603      	mov	r3, r0
 801996a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801996c:	8bfa      	ldrh	r2, [r7, #30]
 801996e:	8a7b      	ldrh	r3, [r7, #18]
 8019970:	4413      	add	r3, r2
 8019972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019976:	db05      	blt.n	8019984 <ip_reass_free_complete_datagram+0x98>
 8019978:	4b27      	ldr	r3, [pc, #156]	; (8019a18 <ip_reass_free_complete_datagram+0x12c>)
 801997a:	22bc      	movs	r2, #188	; 0xbc
 801997c:	492a      	ldr	r1, [pc, #168]	; (8019a28 <ip_reass_free_complete_datagram+0x13c>)
 801997e:	4828      	ldr	r0, [pc, #160]	; (8019a20 <ip_reass_free_complete_datagram+0x134>)
 8019980:	f001 fbd6 	bl	801b130 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019984:	8bfa      	ldrh	r2, [r7, #30]
 8019986:	8a7b      	ldrh	r3, [r7, #18]
 8019988:	4413      	add	r3, r2
 801998a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801998c:	69b8      	ldr	r0, [r7, #24]
 801998e:	f7f7 fd2f 	bl	80113f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	685b      	ldr	r3, [r3, #4]
 8019996:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019998:	e01f      	b.n	80199da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801999a:	69bb      	ldr	r3, [r7, #24]
 801999c:	685b      	ldr	r3, [r3, #4]
 801999e:	617b      	str	r3, [r7, #20]
    pcur = p;
 80199a0:	69bb      	ldr	r3, [r7, #24]
 80199a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80199aa:	68f8      	ldr	r0, [r7, #12]
 80199ac:	f7f7 fda8 	bl	8011500 <pbuf_clen>
 80199b0:	4603      	mov	r3, r0
 80199b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80199b4:	8bfa      	ldrh	r2, [r7, #30]
 80199b6:	8a7b      	ldrh	r3, [r7, #18]
 80199b8:	4413      	add	r3, r2
 80199ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80199be:	db05      	blt.n	80199cc <ip_reass_free_complete_datagram+0xe0>
 80199c0:	4b15      	ldr	r3, [pc, #84]	; (8019a18 <ip_reass_free_complete_datagram+0x12c>)
 80199c2:	22cc      	movs	r2, #204	; 0xcc
 80199c4:	4918      	ldr	r1, [pc, #96]	; (8019a28 <ip_reass_free_complete_datagram+0x13c>)
 80199c6:	4816      	ldr	r0, [pc, #88]	; (8019a20 <ip_reass_free_complete_datagram+0x134>)
 80199c8:	f001 fbb2 	bl	801b130 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80199cc:	8bfa      	ldrh	r2, [r7, #30]
 80199ce:	8a7b      	ldrh	r3, [r7, #18]
 80199d0:	4413      	add	r3, r2
 80199d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80199d4:	68f8      	ldr	r0, [r7, #12]
 80199d6:	f7f7 fd0b 	bl	80113f0 <pbuf_free>
  while (p != NULL) {
 80199da:	69bb      	ldr	r3, [r7, #24]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d1dc      	bne.n	801999a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80199e0:	6839      	ldr	r1, [r7, #0]
 80199e2:	6878      	ldr	r0, [r7, #4]
 80199e4:	f000 f8c2 	bl	8019b6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80199e8:	4b10      	ldr	r3, [pc, #64]	; (8019a2c <ip_reass_free_complete_datagram+0x140>)
 80199ea:	881b      	ldrh	r3, [r3, #0]
 80199ec:	8bfa      	ldrh	r2, [r7, #30]
 80199ee:	429a      	cmp	r2, r3
 80199f0:	d905      	bls.n	80199fe <ip_reass_free_complete_datagram+0x112>
 80199f2:	4b09      	ldr	r3, [pc, #36]	; (8019a18 <ip_reass_free_complete_datagram+0x12c>)
 80199f4:	22d2      	movs	r2, #210	; 0xd2
 80199f6:	490e      	ldr	r1, [pc, #56]	; (8019a30 <ip_reass_free_complete_datagram+0x144>)
 80199f8:	4809      	ldr	r0, [pc, #36]	; (8019a20 <ip_reass_free_complete_datagram+0x134>)
 80199fa:	f001 fb99 	bl	801b130 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80199fe:	4b0b      	ldr	r3, [pc, #44]	; (8019a2c <ip_reass_free_complete_datagram+0x140>)
 8019a00:	881a      	ldrh	r2, [r3, #0]
 8019a02:	8bfb      	ldrh	r3, [r7, #30]
 8019a04:	1ad3      	subs	r3, r2, r3
 8019a06:	b29a      	uxth	r2, r3
 8019a08:	4b08      	ldr	r3, [pc, #32]	; (8019a2c <ip_reass_free_complete_datagram+0x140>)
 8019a0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019a0c:	8bfb      	ldrh	r3, [r7, #30]
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	3720      	adds	r7, #32
 8019a12:	46bd      	mov	sp, r7
 8019a14:	bd80      	pop	{r7, pc}
 8019a16:	bf00      	nop
 8019a18:	08020334 	.word	0x08020334
 8019a1c:	08020370 	.word	0x08020370
 8019a20:	0802037c 	.word	0x0802037c
 8019a24:	080203a4 	.word	0x080203a4
 8019a28:	080203b8 	.word	0x080203b8
 8019a2c:	20007304 	.word	0x20007304
 8019a30:	080203d8 	.word	0x080203d8

08019a34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019a34:	b580      	push	{r7, lr}
 8019a36:	b08a      	sub	sp, #40	; 0x28
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	6078      	str	r0, [r7, #4]
 8019a3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019a3e:	2300      	movs	r3, #0
 8019a40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019a42:	2300      	movs	r3, #0
 8019a44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019a46:	2300      	movs	r3, #0
 8019a48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019a4e:	2300      	movs	r3, #0
 8019a50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019a52:	4b28      	ldr	r3, [pc, #160]	; (8019af4 <ip_reass_remove_oldest_datagram+0xc0>)
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019a58:	e030      	b.n	8019abc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5c:	695a      	ldr	r2, [r3, #20]
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	68db      	ldr	r3, [r3, #12]
 8019a62:	429a      	cmp	r2, r3
 8019a64:	d10c      	bne.n	8019a80 <ip_reass_remove_oldest_datagram+0x4c>
 8019a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a68:	699a      	ldr	r2, [r3, #24]
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	691b      	ldr	r3, [r3, #16]
 8019a6e:	429a      	cmp	r2, r3
 8019a70:	d106      	bne.n	8019a80 <ip_reass_remove_oldest_datagram+0x4c>
 8019a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a74:	899a      	ldrh	r2, [r3, #12]
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	889b      	ldrh	r3, [r3, #4]
 8019a7a:	b29b      	uxth	r3, r3
 8019a7c:	429a      	cmp	r2, r3
 8019a7e:	d014      	beq.n	8019aaa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019a80:	693b      	ldr	r3, [r7, #16]
 8019a82:	3301      	adds	r3, #1
 8019a84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019a86:	6a3b      	ldr	r3, [r7, #32]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d104      	bne.n	8019a96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019a90:	69fb      	ldr	r3, [r7, #28]
 8019a92:	61bb      	str	r3, [r7, #24]
 8019a94:	e009      	b.n	8019aaa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a98:	7fda      	ldrb	r2, [r3, #31]
 8019a9a:	6a3b      	ldr	r3, [r7, #32]
 8019a9c:	7fdb      	ldrb	r3, [r3, #31]
 8019a9e:	429a      	cmp	r2, r3
 8019aa0:	d803      	bhi.n	8019aaa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aa4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019aa6:	69fb      	ldr	r3, [r7, #28]
 8019aa8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d001      	beq.n	8019ab6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d1cb      	bne.n	8019a5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019ac2:	6a3b      	ldr	r3, [r7, #32]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d008      	beq.n	8019ada <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019ac8:	69b9      	ldr	r1, [r7, #24]
 8019aca:	6a38      	ldr	r0, [r7, #32]
 8019acc:	f7ff ff0e 	bl	80198ec <ip_reass_free_complete_datagram>
 8019ad0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019ad2:	697a      	ldr	r2, [r7, #20]
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	4413      	add	r3, r2
 8019ad8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019ada:	697a      	ldr	r2, [r7, #20]
 8019adc:	683b      	ldr	r3, [r7, #0]
 8019ade:	429a      	cmp	r2, r3
 8019ae0:	da02      	bge.n	8019ae8 <ip_reass_remove_oldest_datagram+0xb4>
 8019ae2:	693b      	ldr	r3, [r7, #16]
 8019ae4:	2b01      	cmp	r3, #1
 8019ae6:	dcac      	bgt.n	8019a42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019ae8:	697b      	ldr	r3, [r7, #20]
}
 8019aea:	4618      	mov	r0, r3
 8019aec:	3728      	adds	r7, #40	; 0x28
 8019aee:	46bd      	mov	sp, r7
 8019af0:	bd80      	pop	{r7, pc}
 8019af2:	bf00      	nop
 8019af4:	20007300 	.word	0x20007300

08019af8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b084      	sub	sp, #16
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]
 8019b00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019b02:	2004      	movs	r0, #4
 8019b04:	f7f6 fd8e 	bl	8010624 <memp_malloc>
 8019b08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d110      	bne.n	8019b32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019b10:	6839      	ldr	r1, [r7, #0]
 8019b12:	6878      	ldr	r0, [r7, #4]
 8019b14:	f7ff ff8e 	bl	8019a34 <ip_reass_remove_oldest_datagram>
 8019b18:	4602      	mov	r2, r0
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	4293      	cmp	r3, r2
 8019b1e:	dc03      	bgt.n	8019b28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019b20:	2004      	movs	r0, #4
 8019b22:	f7f6 fd7f 	bl	8010624 <memp_malloc>
 8019b26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d101      	bne.n	8019b32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019b2e:	2300      	movs	r3, #0
 8019b30:	e016      	b.n	8019b60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019b32:	2220      	movs	r2, #32
 8019b34:	2100      	movs	r1, #0
 8019b36:	68f8      	ldr	r0, [r7, #12]
 8019b38:	f001 fc50 	bl	801b3dc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	220f      	movs	r2, #15
 8019b40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019b42:	4b09      	ldr	r3, [pc, #36]	; (8019b68 <ip_reass_enqueue_new_datagram+0x70>)
 8019b44:	681a      	ldr	r2, [r3, #0]
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019b4a:	4a07      	ldr	r2, [pc, #28]	; (8019b68 <ip_reass_enqueue_new_datagram+0x70>)
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	3308      	adds	r3, #8
 8019b54:	2214      	movs	r2, #20
 8019b56:	6879      	ldr	r1, [r7, #4]
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f001 fcca 	bl	801b4f2 <memcpy>
  return ipr;
 8019b5e:	68fb      	ldr	r3, [r7, #12]
}
 8019b60:	4618      	mov	r0, r3
 8019b62:	3710      	adds	r7, #16
 8019b64:	46bd      	mov	sp, r7
 8019b66:	bd80      	pop	{r7, pc}
 8019b68:	20007300 	.word	0x20007300

08019b6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b082      	sub	sp, #8
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
 8019b74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019b76:	4b10      	ldr	r3, [pc, #64]	; (8019bb8 <ip_reass_dequeue_datagram+0x4c>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	687a      	ldr	r2, [r7, #4]
 8019b7c:	429a      	cmp	r2, r3
 8019b7e:	d104      	bne.n	8019b8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	4a0c      	ldr	r2, [pc, #48]	; (8019bb8 <ip_reass_dequeue_datagram+0x4c>)
 8019b86:	6013      	str	r3, [r2, #0]
 8019b88:	e00d      	b.n	8019ba6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d106      	bne.n	8019b9e <ip_reass_dequeue_datagram+0x32>
 8019b90:	4b0a      	ldr	r3, [pc, #40]	; (8019bbc <ip_reass_dequeue_datagram+0x50>)
 8019b92:	f240 1245 	movw	r2, #325	; 0x145
 8019b96:	490a      	ldr	r1, [pc, #40]	; (8019bc0 <ip_reass_dequeue_datagram+0x54>)
 8019b98:	480a      	ldr	r0, [pc, #40]	; (8019bc4 <ip_reass_dequeue_datagram+0x58>)
 8019b9a:	f001 fac9 	bl	801b130 <iprintf>
    prev->next = ipr->next;
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	681a      	ldr	r2, [r3, #0]
 8019ba2:	683b      	ldr	r3, [r7, #0]
 8019ba4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019ba6:	6879      	ldr	r1, [r7, #4]
 8019ba8:	2004      	movs	r0, #4
 8019baa:	f7f6 fdab 	bl	8010704 <memp_free>
}
 8019bae:	bf00      	nop
 8019bb0:	3708      	adds	r7, #8
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	bd80      	pop	{r7, pc}
 8019bb6:	bf00      	nop
 8019bb8:	20007300 	.word	0x20007300
 8019bbc:	08020334 	.word	0x08020334
 8019bc0:	080203fc 	.word	0x080203fc
 8019bc4:	0802037c 	.word	0x0802037c

08019bc8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b08c      	sub	sp, #48	; 0x30
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	60f8      	str	r0, [r7, #12]
 8019bd0:	60b9      	str	r1, [r7, #8]
 8019bd2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019bd8:	2301      	movs	r3, #1
 8019bda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	685b      	ldr	r3, [r3, #4]
 8019be0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019be2:	69fb      	ldr	r3, [r7, #28]
 8019be4:	885b      	ldrh	r3, [r3, #2]
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	4618      	mov	r0, r3
 8019bea:	f7f5 fffd 	bl	800fbe8 <lwip_htons>
 8019bee:	4603      	mov	r3, r0
 8019bf0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019bf2:	69fb      	ldr	r3, [r7, #28]
 8019bf4:	781b      	ldrb	r3, [r3, #0]
 8019bf6:	f003 030f 	and.w	r3, r3, #15
 8019bfa:	b2db      	uxtb	r3, r3
 8019bfc:	009b      	lsls	r3, r3, #2
 8019bfe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019c00:	7e7b      	ldrb	r3, [r7, #25]
 8019c02:	b29b      	uxth	r3, r3
 8019c04:	8b7a      	ldrh	r2, [r7, #26]
 8019c06:	429a      	cmp	r2, r3
 8019c08:	d202      	bcs.n	8019c10 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c0e:	e135      	b.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019c10:	7e7b      	ldrb	r3, [r7, #25]
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	8b7a      	ldrh	r2, [r7, #26]
 8019c16:	1ad3      	subs	r3, r2, r3
 8019c18:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019c1a:	69fb      	ldr	r3, [r7, #28]
 8019c1c:	88db      	ldrh	r3, [r3, #6]
 8019c1e:	b29b      	uxth	r3, r3
 8019c20:	4618      	mov	r0, r3
 8019c22:	f7f5 ffe1 	bl	800fbe8 <lwip_htons>
 8019c26:	4603      	mov	r3, r0
 8019c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019c2c:	b29b      	uxth	r3, r3
 8019c2e:	00db      	lsls	r3, r3, #3
 8019c30:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019c32:	68bb      	ldr	r3, [r7, #8]
 8019c34:	685b      	ldr	r3, [r3, #4]
 8019c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c3a:	2200      	movs	r2, #0
 8019c3c:	701a      	strb	r2, [r3, #0]
 8019c3e:	2200      	movs	r2, #0
 8019c40:	705a      	strb	r2, [r3, #1]
 8019c42:	2200      	movs	r2, #0
 8019c44:	709a      	strb	r2, [r3, #2]
 8019c46:	2200      	movs	r2, #0
 8019c48:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c4c:	8afa      	ldrh	r2, [r7, #22]
 8019c4e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019c50:	8afa      	ldrh	r2, [r7, #22]
 8019c52:	8b7b      	ldrh	r3, [r7, #26]
 8019c54:	4413      	add	r3, r2
 8019c56:	b29a      	uxth	r2, r3
 8019c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c5a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c5e:	88db      	ldrh	r3, [r3, #6]
 8019c60:	b29b      	uxth	r3, r3
 8019c62:	8afa      	ldrh	r2, [r7, #22]
 8019c64:	429a      	cmp	r2, r3
 8019c66:	d902      	bls.n	8019c6e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019c68:	f04f 33ff 	mov.w	r3, #4294967295
 8019c6c:	e106      	b.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	685b      	ldr	r3, [r3, #4]
 8019c72:	627b      	str	r3, [r7, #36]	; 0x24
 8019c74:	e068      	b.n	8019d48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c78:	685b      	ldr	r3, [r3, #4]
 8019c7a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c7e:	889b      	ldrh	r3, [r3, #4]
 8019c80:	b29a      	uxth	r2, r3
 8019c82:	693b      	ldr	r3, [r7, #16]
 8019c84:	889b      	ldrh	r3, [r3, #4]
 8019c86:	b29b      	uxth	r3, r3
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d235      	bcs.n	8019cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c90:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d020      	beq.n	8019cda <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c9a:	889b      	ldrh	r3, [r3, #4]
 8019c9c:	b29a      	uxth	r2, r3
 8019c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ca0:	88db      	ldrh	r3, [r3, #6]
 8019ca2:	b29b      	uxth	r3, r3
 8019ca4:	429a      	cmp	r2, r3
 8019ca6:	d307      	bcc.n	8019cb8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019caa:	88db      	ldrh	r3, [r3, #6]
 8019cac:	b29a      	uxth	r2, r3
 8019cae:	693b      	ldr	r3, [r7, #16]
 8019cb0:	889b      	ldrh	r3, [r3, #4]
 8019cb2:	b29b      	uxth	r3, r3
 8019cb4:	429a      	cmp	r2, r3
 8019cb6:	d902      	bls.n	8019cbe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8019cbc:	e0de      	b.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc0:	68ba      	ldr	r2, [r7, #8]
 8019cc2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc6:	88db      	ldrh	r3, [r3, #6]
 8019cc8:	b29a      	uxth	r2, r3
 8019cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ccc:	889b      	ldrh	r3, [r3, #4]
 8019cce:	b29b      	uxth	r3, r3
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	d03d      	beq.n	8019d50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019cd8:	e03a      	b.n	8019d50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cdc:	88db      	ldrh	r3, [r3, #6]
 8019cde:	b29a      	uxth	r2, r3
 8019ce0:	693b      	ldr	r3, [r7, #16]
 8019ce2:	889b      	ldrh	r3, [r3, #4]
 8019ce4:	b29b      	uxth	r3, r3
 8019ce6:	429a      	cmp	r2, r3
 8019ce8:	d902      	bls.n	8019cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019cea:	f04f 33ff 	mov.w	r3, #4294967295
 8019cee:	e0c5      	b.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	68ba      	ldr	r2, [r7, #8]
 8019cf4:	605a      	str	r2, [r3, #4]
      break;
 8019cf6:	e02b      	b.n	8019d50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cfa:	889b      	ldrh	r3, [r3, #4]
 8019cfc:	b29a      	uxth	r2, r3
 8019cfe:	693b      	ldr	r3, [r7, #16]
 8019d00:	889b      	ldrh	r3, [r3, #4]
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	429a      	cmp	r2, r3
 8019d06:	d102      	bne.n	8019d0e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d08:	f04f 33ff 	mov.w	r3, #4294967295
 8019d0c:	e0b6      	b.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d10:	889b      	ldrh	r3, [r3, #4]
 8019d12:	b29a      	uxth	r2, r3
 8019d14:	693b      	ldr	r3, [r7, #16]
 8019d16:	88db      	ldrh	r3, [r3, #6]
 8019d18:	b29b      	uxth	r3, r3
 8019d1a:	429a      	cmp	r2, r3
 8019d1c:	d202      	bcs.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d22:	e0ab      	b.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d009      	beq.n	8019d3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d2c:	88db      	ldrh	r3, [r3, #6]
 8019d2e:	b29a      	uxth	r2, r3
 8019d30:	693b      	ldr	r3, [r7, #16]
 8019d32:	889b      	ldrh	r3, [r3, #4]
 8019d34:	b29b      	uxth	r3, r3
 8019d36:	429a      	cmp	r2, r3
 8019d38:	d001      	beq.n	8019d3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019d3e:	693b      	ldr	r3, [r7, #16]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019d44:	693b      	ldr	r3, [r7, #16]
 8019d46:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d193      	bne.n	8019c76 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019d4e:	e000      	b.n	8019d52 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019d50:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d12d      	bne.n	8019db4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d01c      	beq.n	8019d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d60:	88db      	ldrh	r3, [r3, #6]
 8019d62:	b29a      	uxth	r2, r3
 8019d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d66:	889b      	ldrh	r3, [r3, #4]
 8019d68:	b29b      	uxth	r3, r3
 8019d6a:	429a      	cmp	r2, r3
 8019d6c:	d906      	bls.n	8019d7c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019d6e:	4b45      	ldr	r3, [pc, #276]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019d70:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019d74:	4944      	ldr	r1, [pc, #272]	; (8019e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019d76:	4845      	ldr	r0, [pc, #276]	; (8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019d78:	f001 f9da 	bl	801b130 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d7e:	68ba      	ldr	r2, [r7, #8]
 8019d80:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d84:	88db      	ldrh	r3, [r3, #6]
 8019d86:	b29a      	uxth	r2, r3
 8019d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d8a:	889b      	ldrh	r3, [r3, #4]
 8019d8c:	b29b      	uxth	r3, r3
 8019d8e:	429a      	cmp	r2, r3
 8019d90:	d010      	beq.n	8019db4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019d92:	2300      	movs	r3, #0
 8019d94:	623b      	str	r3, [r7, #32]
 8019d96:	e00d      	b.n	8019db4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	685b      	ldr	r3, [r3, #4]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d006      	beq.n	8019dae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019da0:	4b38      	ldr	r3, [pc, #224]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019da2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019da6:	493a      	ldr	r1, [pc, #232]	; (8019e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019da8:	4838      	ldr	r0, [pc, #224]	; (8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019daa:	f001 f9c1 	bl	801b130 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	68ba      	ldr	r2, [r7, #8]
 8019db2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d105      	bne.n	8019dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	7f9b      	ldrb	r3, [r3, #30]
 8019dbe:	f003 0301 	and.w	r3, r3, #1
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d059      	beq.n	8019e7a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019dc6:	6a3b      	ldr	r3, [r7, #32]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d04f      	beq.n	8019e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	685b      	ldr	r3, [r3, #4]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d006      	beq.n	8019de2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	685b      	ldr	r3, [r3, #4]
 8019dd8:	685b      	ldr	r3, [r3, #4]
 8019dda:	889b      	ldrh	r3, [r3, #4]
 8019ddc:	b29b      	uxth	r3, r3
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d002      	beq.n	8019de8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019de2:	2300      	movs	r3, #0
 8019de4:	623b      	str	r3, [r7, #32]
 8019de6:	e041      	b.n	8019e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019df2:	e012      	b.n	8019e1a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df6:	685b      	ldr	r3, [r3, #4]
 8019df8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dfc:	88db      	ldrh	r3, [r3, #6]
 8019dfe:	b29a      	uxth	r2, r3
 8019e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e02:	889b      	ldrh	r3, [r3, #4]
 8019e04:	b29b      	uxth	r3, r3
 8019e06:	429a      	cmp	r2, r3
 8019e08:	d002      	beq.n	8019e10 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	623b      	str	r3, [r7, #32]
            break;
 8019e0e:	e007      	b.n	8019e20 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e12:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d1e9      	bne.n	8019df4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019e20:	6a3b      	ldr	r3, [r7, #32]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d022      	beq.n	8019e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	685b      	ldr	r3, [r3, #4]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d106      	bne.n	8019e3c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019e2e:	4b15      	ldr	r3, [pc, #84]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e30:	f240 12df 	movw	r2, #479	; 0x1df
 8019e34:	4917      	ldr	r1, [pc, #92]	; (8019e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019e36:	4815      	ldr	r0, [pc, #84]	; (8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e38:	f001 f97a 	bl	801b130 <iprintf>
          LWIP_ASSERT("sanity check",
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	685b      	ldr	r3, [r3, #4]
 8019e40:	685b      	ldr	r3, [r3, #4]
 8019e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e44:	429a      	cmp	r2, r3
 8019e46:	d106      	bne.n	8019e56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019e48:	4b0e      	ldr	r3, [pc, #56]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019e4e:	4911      	ldr	r1, [pc, #68]	; (8019e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019e50:	480e      	ldr	r0, [pc, #56]	; (8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e52:	f001 f96d 	bl	801b130 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d006      	beq.n	8019e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019e5e:	4b09      	ldr	r3, [pc, #36]	; (8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e60:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019e64:	490c      	ldr	r1, [pc, #48]	; (8019e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019e66:	4809      	ldr	r0, [pc, #36]	; (8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e68:	f001 f962 	bl	801b130 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019e6c:	6a3b      	ldr	r3, [r7, #32]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	bf14      	ite	ne
 8019e72:	2301      	movne	r3, #1
 8019e74:	2300      	moveq	r3, #0
 8019e76:	b2db      	uxtb	r3, r3
 8019e78:	e000      	b.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019e7a:	2300      	movs	r3, #0
}
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	3730      	adds	r7, #48	; 0x30
 8019e80:	46bd      	mov	sp, r7
 8019e82:	bd80      	pop	{r7, pc}
 8019e84:	08020334 	.word	0x08020334
 8019e88:	08020418 	.word	0x08020418
 8019e8c:	0802037c 	.word	0x0802037c
 8019e90:	08020438 	.word	0x08020438
 8019e94:	08020470 	.word	0x08020470
 8019e98:	08020480 	.word	0x08020480

08019e9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b08e      	sub	sp, #56	; 0x38
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	685b      	ldr	r3, [r3, #4]
 8019ea8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eac:	781b      	ldrb	r3, [r3, #0]
 8019eae:	f003 030f 	and.w	r3, r3, #15
 8019eb2:	b2db      	uxtb	r3, r3
 8019eb4:	009b      	lsls	r3, r3, #2
 8019eb6:	b2db      	uxtb	r3, r3
 8019eb8:	2b14      	cmp	r3, #20
 8019eba:	f040 8171 	bne.w	801a1a0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ec0:	88db      	ldrh	r3, [r3, #6]
 8019ec2:	b29b      	uxth	r3, r3
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f7f5 fe8f 	bl	800fbe8 <lwip_htons>
 8019eca:	4603      	mov	r3, r0
 8019ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	00db      	lsls	r3, r3, #3
 8019ed4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed8:	885b      	ldrh	r3, [r3, #2]
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	4618      	mov	r0, r3
 8019ede:	f7f5 fe83 	bl	800fbe8 <lwip_htons>
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ee8:	781b      	ldrb	r3, [r3, #0]
 8019eea:	f003 030f 	and.w	r3, r3, #15
 8019eee:	b2db      	uxtb	r3, r3
 8019ef0:	009b      	lsls	r3, r3, #2
 8019ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019efe:	429a      	cmp	r2, r3
 8019f00:	f0c0 8150 	bcc.w	801a1a4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019f08:	b29b      	uxth	r3, r3
 8019f0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019f0c:	1ad3      	subs	r3, r2, r3
 8019f0e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019f10:	6878      	ldr	r0, [r7, #4]
 8019f12:	f7f7 faf5 	bl	8011500 <pbuf_clen>
 8019f16:	4603      	mov	r3, r0
 8019f18:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019f1a:	4b8c      	ldr	r3, [pc, #560]	; (801a14c <ip4_reass+0x2b0>)
 8019f1c:	881b      	ldrh	r3, [r3, #0]
 8019f1e:	461a      	mov	r2, r3
 8019f20:	8c3b      	ldrh	r3, [r7, #32]
 8019f22:	4413      	add	r3, r2
 8019f24:	2b0a      	cmp	r3, #10
 8019f26:	dd10      	ble.n	8019f4a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019f28:	8c3b      	ldrh	r3, [r7, #32]
 8019f2a:	4619      	mov	r1, r3
 8019f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f2e:	f7ff fd81 	bl	8019a34 <ip_reass_remove_oldest_datagram>
 8019f32:	4603      	mov	r3, r0
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	f000 8137 	beq.w	801a1a8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019f3a:	4b84      	ldr	r3, [pc, #528]	; (801a14c <ip4_reass+0x2b0>)
 8019f3c:	881b      	ldrh	r3, [r3, #0]
 8019f3e:	461a      	mov	r2, r3
 8019f40:	8c3b      	ldrh	r3, [r7, #32]
 8019f42:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019f44:	2b0a      	cmp	r3, #10
 8019f46:	f300 812f 	bgt.w	801a1a8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019f4a:	4b81      	ldr	r3, [pc, #516]	; (801a150 <ip4_reass+0x2b4>)
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8019f50:	e015      	b.n	8019f7e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f54:	695a      	ldr	r2, [r3, #20]
 8019f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f58:	68db      	ldr	r3, [r3, #12]
 8019f5a:	429a      	cmp	r2, r3
 8019f5c:	d10c      	bne.n	8019f78 <ip4_reass+0xdc>
 8019f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f60:	699a      	ldr	r2, [r3, #24]
 8019f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f64:	691b      	ldr	r3, [r3, #16]
 8019f66:	429a      	cmp	r2, r3
 8019f68:	d106      	bne.n	8019f78 <ip4_reass+0xdc>
 8019f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f6c:	899a      	ldrh	r2, [r3, #12]
 8019f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f70:	889b      	ldrh	r3, [r3, #4]
 8019f72:	b29b      	uxth	r3, r3
 8019f74:	429a      	cmp	r2, r3
 8019f76:	d006      	beq.n	8019f86 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8019f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d1e6      	bne.n	8019f52 <ip4_reass+0xb6>
 8019f84:	e000      	b.n	8019f88 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019f86:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d109      	bne.n	8019fa2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019f8e:	8c3b      	ldrh	r3, [r7, #32]
 8019f90:	4619      	mov	r1, r3
 8019f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f94:	f7ff fdb0 	bl	8019af8 <ip_reass_enqueue_new_datagram>
 8019f98:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d11c      	bne.n	8019fda <ip4_reass+0x13e>
      goto nullreturn;
 8019fa0:	e105      	b.n	801a1ae <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fa4:	88db      	ldrh	r3, [r3, #6]
 8019fa6:	b29b      	uxth	r3, r3
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7f5 fe1d 	bl	800fbe8 <lwip_htons>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d110      	bne.n	8019fda <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fba:	89db      	ldrh	r3, [r3, #14]
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	f7f5 fe13 	bl	800fbe8 <lwip_htons>
 8019fc2:	4603      	mov	r3, r0
 8019fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d006      	beq.n	8019fda <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fce:	3308      	adds	r3, #8
 8019fd0:	2214      	movs	r2, #20
 8019fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	f001 fa8c 	bl	801b4f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fdc:	88db      	ldrh	r3, [r3, #6]
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	f003 0320 	and.w	r3, r3, #32
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	bf0c      	ite	eq
 8019fe8:	2301      	moveq	r3, #1
 8019fea:	2300      	movne	r3, #0
 8019fec:	b2db      	uxtb	r3, r3
 8019fee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019ff0:	69fb      	ldr	r3, [r7, #28]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d00e      	beq.n	801a014 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019ff6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ffa:	4413      	add	r3, r2
 8019ffc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019ffe:	8b7a      	ldrh	r2, [r7, #26]
 801a000:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a002:	429a      	cmp	r2, r3
 801a004:	f0c0 80a0 	bcc.w	801a148 <ip4_reass+0x2ac>
 801a008:	8b7b      	ldrh	r3, [r7, #26]
 801a00a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a00e:	4293      	cmp	r3, r2
 801a010:	f200 809a 	bhi.w	801a148 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a014:	69fa      	ldr	r2, [r7, #28]
 801a016:	6879      	ldr	r1, [r7, #4]
 801a018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a01a:	f7ff fdd5 	bl	8019bc8 <ip_reass_chain_frag_into_datagram_and_validate>
 801a01e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a020:	697b      	ldr	r3, [r7, #20]
 801a022:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a026:	f000 809b 	beq.w	801a160 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a02a:	4b48      	ldr	r3, [pc, #288]	; (801a14c <ip4_reass+0x2b0>)
 801a02c:	881a      	ldrh	r2, [r3, #0]
 801a02e:	8c3b      	ldrh	r3, [r7, #32]
 801a030:	4413      	add	r3, r2
 801a032:	b29a      	uxth	r2, r3
 801a034:	4b45      	ldr	r3, [pc, #276]	; (801a14c <ip4_reass+0x2b0>)
 801a036:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a038:	69fb      	ldr	r3, [r7, #28]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d00d      	beq.n	801a05a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a03e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a042:	4413      	add	r3, r2
 801a044:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a048:	8a7a      	ldrh	r2, [r7, #18]
 801a04a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a04e:	7f9b      	ldrb	r3, [r3, #30]
 801a050:	f043 0301 	orr.w	r3, r3, #1
 801a054:	b2da      	uxtb	r2, r3
 801a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a058:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a05a:	697b      	ldr	r3, [r7, #20]
 801a05c:	2b01      	cmp	r3, #1
 801a05e:	d171      	bne.n	801a144 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a062:	8b9b      	ldrh	r3, [r3, #28]
 801a064:	3314      	adds	r3, #20
 801a066:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a06a:	685b      	ldr	r3, [r3, #4]
 801a06c:	685b      	ldr	r3, [r3, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a074:	685b      	ldr	r3, [r3, #4]
 801a076:	685b      	ldr	r3, [r3, #4]
 801a078:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a07c:	3308      	adds	r3, #8
 801a07e:	2214      	movs	r2, #20
 801a080:	4619      	mov	r1, r3
 801a082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a084:	f001 fa35 	bl	801b4f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a088:	8a3b      	ldrh	r3, [r7, #16]
 801a08a:	4618      	mov	r0, r3
 801a08c:	f7f5 fdac 	bl	800fbe8 <lwip_htons>
 801a090:	4603      	mov	r3, r0
 801a092:	461a      	mov	r2, r3
 801a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a096:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a09a:	2200      	movs	r2, #0
 801a09c:	719a      	strb	r2, [r3, #6]
 801a09e:	2200      	movs	r2, #0
 801a0a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	729a      	strb	r2, [r3, #10]
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ae:	685b      	ldr	r3, [r3, #4]
 801a0b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a0b2:	e00d      	b.n	801a0d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0b6:	685b      	ldr	r3, [r3, #4]
 801a0b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a0ba:	2114      	movs	r1, #20
 801a0bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a0be:	f7f7 f911 	bl	80112e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a0c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a0c4:	6878      	ldr	r0, [r7, #4]
 801a0c6:	f7f7 fa55 	bl	8011574 <pbuf_cat>
      r = iprh->next_pbuf;
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d1ee      	bne.n	801a0b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a0d6:	4b1e      	ldr	r3, [pc, #120]	; (801a150 <ip4_reass+0x2b4>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a0dc:	429a      	cmp	r2, r3
 801a0de:	d102      	bne.n	801a0e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a0e4:	e010      	b.n	801a108 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a0e6:	4b1a      	ldr	r3, [pc, #104]	; (801a150 <ip4_reass+0x2b4>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a0ec:	e007      	b.n	801a0fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a0f4:	429a      	cmp	r2, r3
 801a0f6:	d006      	beq.n	801a106 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a100:	2b00      	cmp	r3, #0
 801a102:	d1f4      	bne.n	801a0ee <ip4_reass+0x252>
 801a104:	e000      	b.n	801a108 <ip4_reass+0x26c>
          break;
 801a106:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a10a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a10c:	f7ff fd2e 	bl	8019b6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a110:	6878      	ldr	r0, [r7, #4]
 801a112:	f7f7 f9f5 	bl	8011500 <pbuf_clen>
 801a116:	4603      	mov	r3, r0
 801a118:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a11a:	4b0c      	ldr	r3, [pc, #48]	; (801a14c <ip4_reass+0x2b0>)
 801a11c:	881b      	ldrh	r3, [r3, #0]
 801a11e:	8c3a      	ldrh	r2, [r7, #32]
 801a120:	429a      	cmp	r2, r3
 801a122:	d906      	bls.n	801a132 <ip4_reass+0x296>
 801a124:	4b0b      	ldr	r3, [pc, #44]	; (801a154 <ip4_reass+0x2b8>)
 801a126:	f240 229b 	movw	r2, #667	; 0x29b
 801a12a:	490b      	ldr	r1, [pc, #44]	; (801a158 <ip4_reass+0x2bc>)
 801a12c:	480b      	ldr	r0, [pc, #44]	; (801a15c <ip4_reass+0x2c0>)
 801a12e:	f000 ffff 	bl	801b130 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a132:	4b06      	ldr	r3, [pc, #24]	; (801a14c <ip4_reass+0x2b0>)
 801a134:	881a      	ldrh	r2, [r3, #0]
 801a136:	8c3b      	ldrh	r3, [r7, #32]
 801a138:	1ad3      	subs	r3, r2, r3
 801a13a:	b29a      	uxth	r2, r3
 801a13c:	4b03      	ldr	r3, [pc, #12]	; (801a14c <ip4_reass+0x2b0>)
 801a13e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	e038      	b.n	801a1b6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a144:	2300      	movs	r3, #0
 801a146:	e036      	b.n	801a1b6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a148:	bf00      	nop
 801a14a:	e00a      	b.n	801a162 <ip4_reass+0x2c6>
 801a14c:	20007304 	.word	0x20007304
 801a150:	20007300 	.word	0x20007300
 801a154:	08020334 	.word	0x08020334
 801a158:	080204a4 	.word	0x080204a4
 801a15c:	0802037c 	.word	0x0802037c
    goto nullreturn_ipr;
 801a160:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a164:	2b00      	cmp	r3, #0
 801a166:	d106      	bne.n	801a176 <ip4_reass+0x2da>
 801a168:	4b15      	ldr	r3, [pc, #84]	; (801a1c0 <ip4_reass+0x324>)
 801a16a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a16e:	4915      	ldr	r1, [pc, #84]	; (801a1c4 <ip4_reass+0x328>)
 801a170:	4815      	ldr	r0, [pc, #84]	; (801a1c8 <ip4_reass+0x32c>)
 801a172:	f000 ffdd 	bl	801b130 <iprintf>
  if (ipr->p == NULL) {
 801a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a178:	685b      	ldr	r3, [r3, #4]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d116      	bne.n	801a1ac <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a17e:	4b13      	ldr	r3, [pc, #76]	; (801a1cc <ip4_reass+0x330>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a184:	429a      	cmp	r2, r3
 801a186:	d006      	beq.n	801a196 <ip4_reass+0x2fa>
 801a188:	4b0d      	ldr	r3, [pc, #52]	; (801a1c0 <ip4_reass+0x324>)
 801a18a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a18e:	4910      	ldr	r1, [pc, #64]	; (801a1d0 <ip4_reass+0x334>)
 801a190:	480d      	ldr	r0, [pc, #52]	; (801a1c8 <ip4_reass+0x32c>)
 801a192:	f000 ffcd 	bl	801b130 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a196:	2100      	movs	r1, #0
 801a198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a19a:	f7ff fce7 	bl	8019b6c <ip_reass_dequeue_datagram>
 801a19e:	e006      	b.n	801a1ae <ip4_reass+0x312>
    goto nullreturn;
 801a1a0:	bf00      	nop
 801a1a2:	e004      	b.n	801a1ae <ip4_reass+0x312>
    goto nullreturn;
 801a1a4:	bf00      	nop
 801a1a6:	e002      	b.n	801a1ae <ip4_reass+0x312>
      goto nullreturn;
 801a1a8:	bf00      	nop
 801a1aa:	e000      	b.n	801a1ae <ip4_reass+0x312>
  }

nullreturn:
 801a1ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a1ae:	6878      	ldr	r0, [r7, #4]
 801a1b0:	f7f7 f91e 	bl	80113f0 <pbuf_free>
  return NULL;
 801a1b4:	2300      	movs	r3, #0
}
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	3738      	adds	r7, #56	; 0x38
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	bd80      	pop	{r7, pc}
 801a1be:	bf00      	nop
 801a1c0:	08020334 	.word	0x08020334
 801a1c4:	080204c0 	.word	0x080204c0
 801a1c8:	0802037c 	.word	0x0802037c
 801a1cc:	20007300 	.word	0x20007300
 801a1d0:	080204cc 	.word	0x080204cc

0801a1d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a1d8:	2005      	movs	r0, #5
 801a1da:	f7f6 fa23 	bl	8010624 <memp_malloc>
 801a1de:	4603      	mov	r3, r0
}
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	bd80      	pop	{r7, pc}

0801a1e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a1e4:	b580      	push	{r7, lr}
 801a1e6:	b082      	sub	sp, #8
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d106      	bne.n	801a200 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a1f2:	4b07      	ldr	r3, [pc, #28]	; (801a210 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a1f4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a1f8:	4906      	ldr	r1, [pc, #24]	; (801a214 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a1fa:	4807      	ldr	r0, [pc, #28]	; (801a218 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a1fc:	f000 ff98 	bl	801b130 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a200:	6879      	ldr	r1, [r7, #4]
 801a202:	2005      	movs	r0, #5
 801a204:	f7f6 fa7e 	bl	8010704 <memp_free>
}
 801a208:	bf00      	nop
 801a20a:	3708      	adds	r7, #8
 801a20c:	46bd      	mov	sp, r7
 801a20e:	bd80      	pop	{r7, pc}
 801a210:	08020334 	.word	0x08020334
 801a214:	080204ec 	.word	0x080204ec
 801a218:	0802037c 	.word	0x0802037c

0801a21c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b084      	sub	sp, #16
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d106      	bne.n	801a23c <ipfrag_free_pbuf_custom+0x20>
 801a22e:	4b11      	ldr	r3, [pc, #68]	; (801a274 <ipfrag_free_pbuf_custom+0x58>)
 801a230:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a234:	4910      	ldr	r1, [pc, #64]	; (801a278 <ipfrag_free_pbuf_custom+0x5c>)
 801a236:	4811      	ldr	r0, [pc, #68]	; (801a27c <ipfrag_free_pbuf_custom+0x60>)
 801a238:	f000 ff7a 	bl	801b130 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a23c:	68fa      	ldr	r2, [r7, #12]
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	429a      	cmp	r2, r3
 801a242:	d006      	beq.n	801a252 <ipfrag_free_pbuf_custom+0x36>
 801a244:	4b0b      	ldr	r3, [pc, #44]	; (801a274 <ipfrag_free_pbuf_custom+0x58>)
 801a246:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a24a:	490d      	ldr	r1, [pc, #52]	; (801a280 <ipfrag_free_pbuf_custom+0x64>)
 801a24c:	480b      	ldr	r0, [pc, #44]	; (801a27c <ipfrag_free_pbuf_custom+0x60>)
 801a24e:	f000 ff6f 	bl	801b130 <iprintf>
  if (pcr->original != NULL) {
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	695b      	ldr	r3, [r3, #20]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d004      	beq.n	801a264 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	695b      	ldr	r3, [r3, #20]
 801a25e:	4618      	mov	r0, r3
 801a260:	f7f7 f8c6 	bl	80113f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a264:	68f8      	ldr	r0, [r7, #12]
 801a266:	f7ff ffbd 	bl	801a1e4 <ip_frag_free_pbuf_custom_ref>
}
 801a26a:	bf00      	nop
 801a26c:	3710      	adds	r7, #16
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}
 801a272:	bf00      	nop
 801a274:	08020334 	.word	0x08020334
 801a278:	080204f8 	.word	0x080204f8
 801a27c:	0802037c 	.word	0x0802037c
 801a280:	08020504 	.word	0x08020504

0801a284 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b094      	sub	sp, #80	; 0x50
 801a288:	af02      	add	r7, sp, #8
 801a28a:	60f8      	str	r0, [r7, #12]
 801a28c:	60b9      	str	r1, [r7, #8]
 801a28e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a290:	2300      	movs	r3, #0
 801a292:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a296:	68bb      	ldr	r3, [r7, #8]
 801a298:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a29a:	3b14      	subs	r3, #20
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	da00      	bge.n	801a2a2 <ip4_frag+0x1e>
 801a2a0:	3307      	adds	r3, #7
 801a2a2:	10db      	asrs	r3, r3, #3
 801a2a4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a2a6:	2314      	movs	r3, #20
 801a2a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	685b      	ldr	r3, [r3, #4]
 801a2ae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	f003 030f 	and.w	r3, r3, #15
 801a2bc:	b2db      	uxtb	r3, r3
 801a2be:	009b      	lsls	r3, r3, #2
 801a2c0:	b2db      	uxtb	r3, r3
 801a2c2:	2b14      	cmp	r3, #20
 801a2c4:	d002      	beq.n	801a2cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a2c6:	f06f 0305 	mvn.w	r3, #5
 801a2ca:	e110      	b.n	801a4ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	895b      	ldrh	r3, [r3, #10]
 801a2d0:	2b13      	cmp	r3, #19
 801a2d2:	d809      	bhi.n	801a2e8 <ip4_frag+0x64>
 801a2d4:	4b88      	ldr	r3, [pc, #544]	; (801a4f8 <ip4_frag+0x274>)
 801a2d6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a2da:	4988      	ldr	r1, [pc, #544]	; (801a4fc <ip4_frag+0x278>)
 801a2dc:	4888      	ldr	r0, [pc, #544]	; (801a500 <ip4_frag+0x27c>)
 801a2de:	f000 ff27 	bl	801b130 <iprintf>
 801a2e2:	f06f 0305 	mvn.w	r3, #5
 801a2e6:	e102      	b.n	801a4ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ea:	88db      	ldrh	r3, [r3, #6]
 801a2ec:	b29b      	uxth	r3, r3
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f7f5 fc7a 	bl	800fbe8 <lwip_htons>
 801a2f4:	4603      	mov	r3, r0
 801a2f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a2f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a2fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a2fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a302:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a308:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	891b      	ldrh	r3, [r3, #8]
 801a30e:	3b14      	subs	r3, #20
 801a310:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a314:	e0e1      	b.n	801a4da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a316:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a318:	00db      	lsls	r3, r3, #3
 801a31a:	b29b      	uxth	r3, r3
 801a31c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a320:	4293      	cmp	r3, r2
 801a322:	bf28      	it	cs
 801a324:	4613      	movcs	r3, r2
 801a326:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a328:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a32c:	2114      	movs	r1, #20
 801a32e:	200e      	movs	r0, #14
 801a330:	f7f6 fd7a 	bl	8010e28 <pbuf_alloc>
 801a334:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a338:	2b00      	cmp	r3, #0
 801a33a:	f000 80d5 	beq.w	801a4e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a340:	895b      	ldrh	r3, [r3, #10]
 801a342:	2b13      	cmp	r3, #19
 801a344:	d806      	bhi.n	801a354 <ip4_frag+0xd0>
 801a346:	4b6c      	ldr	r3, [pc, #432]	; (801a4f8 <ip4_frag+0x274>)
 801a348:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a34c:	496d      	ldr	r1, [pc, #436]	; (801a504 <ip4_frag+0x280>)
 801a34e:	486c      	ldr	r0, [pc, #432]	; (801a500 <ip4_frag+0x27c>)
 801a350:	f000 feee 	bl	801b130 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a356:	685b      	ldr	r3, [r3, #4]
 801a358:	2214      	movs	r2, #20
 801a35a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a35c:	4618      	mov	r0, r3
 801a35e:	f001 f8c8 	bl	801b4f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a364:	685b      	ldr	r3, [r3, #4]
 801a366:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a368:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a36a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a36e:	e064      	b.n	801a43a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	895a      	ldrh	r2, [r3, #10]
 801a374:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a376:	1ad3      	subs	r3, r2, r3
 801a378:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	895b      	ldrh	r3, [r3, #10]
 801a37e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a380:	429a      	cmp	r2, r3
 801a382:	d906      	bls.n	801a392 <ip4_frag+0x10e>
 801a384:	4b5c      	ldr	r3, [pc, #368]	; (801a4f8 <ip4_frag+0x274>)
 801a386:	f240 322d 	movw	r2, #813	; 0x32d
 801a38a:	495f      	ldr	r1, [pc, #380]	; (801a508 <ip4_frag+0x284>)
 801a38c:	485c      	ldr	r0, [pc, #368]	; (801a500 <ip4_frag+0x27c>)
 801a38e:	f000 fecf 	bl	801b130 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a392:	8bfa      	ldrh	r2, [r7, #30]
 801a394:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a398:	4293      	cmp	r3, r2
 801a39a:	bf28      	it	cs
 801a39c:	4613      	movcs	r3, r2
 801a39e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a3a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d105      	bne.n	801a3b6 <ip4_frag+0x132>
        poff = 0;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	60fb      	str	r3, [r7, #12]
        continue;
 801a3b4:	e041      	b.n	801a43a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a3b6:	f7ff ff0d 	bl	801a1d4 <ip_frag_alloc_pbuf_custom_ref>
 801a3ba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a3bc:	69bb      	ldr	r3, [r7, #24]
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	d103      	bne.n	801a3ca <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a3c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a3c4:	f7f7 f814 	bl	80113f0 <pbuf_free>
        goto memerr;
 801a3c8:	e08f      	b.n	801a4ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a3ca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a3d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a3d2:	4413      	add	r3, r2
 801a3d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a3d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a3dc:	9201      	str	r2, [sp, #4]
 801a3de:	9300      	str	r3, [sp, #0]
 801a3e0:	4603      	mov	r3, r0
 801a3e2:	2241      	movs	r2, #65	; 0x41
 801a3e4:	2000      	movs	r0, #0
 801a3e6:	f7f6 fe4b 	bl	8011080 <pbuf_alloced_custom>
 801a3ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a3ec:	697b      	ldr	r3, [r7, #20]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d106      	bne.n	801a400 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a3f2:	69b8      	ldr	r0, [r7, #24]
 801a3f4:	f7ff fef6 	bl	801a1e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a3f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a3fa:	f7f6 fff9 	bl	80113f0 <pbuf_free>
        goto memerr;
 801a3fe:	e074      	b.n	801a4ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a400:	68f8      	ldr	r0, [r7, #12]
 801a402:	f7f7 f895 	bl	8011530 <pbuf_ref>
      pcr->original = p;
 801a406:	69bb      	ldr	r3, [r7, #24]
 801a408:	68fa      	ldr	r2, [r7, #12]
 801a40a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a40c:	69bb      	ldr	r3, [r7, #24]
 801a40e:	4a3f      	ldr	r2, [pc, #252]	; (801a50c <ip4_frag+0x288>)
 801a410:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a412:	6979      	ldr	r1, [r7, #20]
 801a414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a416:	f7f7 f8ad 	bl	8011574 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a41a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a41e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a422:	1ad3      	subs	r3, r2, r3
 801a424:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a428:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d004      	beq.n	801a43a <ip4_frag+0x1b6>
        poff = 0;
 801a430:	2300      	movs	r3, #0
 801a432:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a43a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d196      	bne.n	801a370 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a442:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a444:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a448:	4413      	add	r3, r2
 801a44a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a44c:	68bb      	ldr	r3, [r7, #8]
 801a44e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a450:	f1a3 0213 	sub.w	r2, r3, #19
 801a454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a458:	429a      	cmp	r2, r3
 801a45a:	bfcc      	ite	gt
 801a45c:	2301      	movgt	r3, #1
 801a45e:	2300      	movle	r3, #0
 801a460:	b2db      	uxtb	r3, r3
 801a462:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a464:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a46c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a46e:	6a3b      	ldr	r3, [r7, #32]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d002      	beq.n	801a47a <ip4_frag+0x1f6>
 801a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a476:	2b00      	cmp	r3, #0
 801a478:	d003      	beq.n	801a482 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a47a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a47c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a480:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a482:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a484:	4618      	mov	r0, r3
 801a486:	f7f5 fbaf 	bl	800fbe8 <lwip_htons>
 801a48a:	4603      	mov	r3, r0
 801a48c:	461a      	mov	r2, r3
 801a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a490:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a492:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a494:	3314      	adds	r3, #20
 801a496:	b29b      	uxth	r3, r3
 801a498:	4618      	mov	r0, r3
 801a49a:	f7f5 fba5 	bl	800fbe8 <lwip_htons>
 801a49e:	4603      	mov	r3, r0
 801a4a0:	461a      	mov	r2, r3
 801a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	729a      	strb	r2, [r3, #10]
 801a4ac:	2200      	movs	r2, #0
 801a4ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a4b0:	68bb      	ldr	r3, [r7, #8]
 801a4b2:	695b      	ldr	r3, [r3, #20]
 801a4b4:	687a      	ldr	r2, [r7, #4]
 801a4b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4b8:	68b8      	ldr	r0, [r7, #8]
 801a4ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a4bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a4be:	f7f6 ff97 	bl	80113f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a4c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a4c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a4c8:	1ad3      	subs	r3, r2, r3
 801a4ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a4ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a4d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a4d4:	4413      	add	r3, r2
 801a4d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a4da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	f47f af19 	bne.w	801a316 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	e002      	b.n	801a4ee <ip4_frag+0x26a>
      goto memerr;
 801a4e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a4ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	3748      	adds	r7, #72	; 0x48
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	bd80      	pop	{r7, pc}
 801a4f6:	bf00      	nop
 801a4f8:	08020334 	.word	0x08020334
 801a4fc:	08020510 	.word	0x08020510
 801a500:	0802037c 	.word	0x0802037c
 801a504:	0802052c 	.word	0x0802052c
 801a508:	0802054c 	.word	0x0802054c
 801a50c:	0801a21d 	.word	0x0801a21d

0801a510 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a510:	b580      	push	{r7, lr}
 801a512:	b086      	sub	sp, #24
 801a514:	af00      	add	r7, sp, #0
 801a516:	6078      	str	r0, [r7, #4]
 801a518:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a51a:	230e      	movs	r3, #14
 801a51c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	895b      	ldrh	r3, [r3, #10]
 801a522:	2b0e      	cmp	r3, #14
 801a524:	d96e      	bls.n	801a604 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	7bdb      	ldrb	r3, [r3, #15]
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d106      	bne.n	801a53c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a534:	3301      	adds	r3, #1
 801a536:	b2da      	uxtb	r2, r3
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	685b      	ldr	r3, [r3, #4]
 801a540:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a542:	693b      	ldr	r3, [r7, #16]
 801a544:	7b1a      	ldrb	r2, [r3, #12]
 801a546:	7b5b      	ldrb	r3, [r3, #13]
 801a548:	021b      	lsls	r3, r3, #8
 801a54a:	4313      	orrs	r3, r2
 801a54c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a54e:	693b      	ldr	r3, [r7, #16]
 801a550:	781b      	ldrb	r3, [r3, #0]
 801a552:	f003 0301 	and.w	r3, r3, #1
 801a556:	2b00      	cmp	r3, #0
 801a558:	d023      	beq.n	801a5a2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a55a:	693b      	ldr	r3, [r7, #16]
 801a55c:	781b      	ldrb	r3, [r3, #0]
 801a55e:	2b01      	cmp	r3, #1
 801a560:	d10f      	bne.n	801a582 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a562:	693b      	ldr	r3, [r7, #16]
 801a564:	785b      	ldrb	r3, [r3, #1]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d11b      	bne.n	801a5a2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a56a:	693b      	ldr	r3, [r7, #16]
 801a56c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a56e:	2b5e      	cmp	r3, #94	; 0x5e
 801a570:	d117      	bne.n	801a5a2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	7b5b      	ldrb	r3, [r3, #13]
 801a576:	f043 0310 	orr.w	r3, r3, #16
 801a57a:	b2da      	uxtb	r2, r3
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	735a      	strb	r2, [r3, #13]
 801a580:	e00f      	b.n	801a5a2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a582:	693b      	ldr	r3, [r7, #16]
 801a584:	2206      	movs	r2, #6
 801a586:	4928      	ldr	r1, [pc, #160]	; (801a628 <ethernet_input+0x118>)
 801a588:	4618      	mov	r0, r3
 801a58a:	f000 ff17 	bl	801b3bc <memcmp>
 801a58e:	4603      	mov	r3, r0
 801a590:	2b00      	cmp	r3, #0
 801a592:	d106      	bne.n	801a5a2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	7b5b      	ldrb	r3, [r3, #13]
 801a598:	f043 0308 	orr.w	r3, r3, #8
 801a59c:	b2da      	uxtb	r2, r3
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a5a2:	89fb      	ldrh	r3, [r7, #14]
 801a5a4:	2b08      	cmp	r3, #8
 801a5a6:	d003      	beq.n	801a5b0 <ethernet_input+0xa0>
 801a5a8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a5ac:	d014      	beq.n	801a5d8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a5ae:	e032      	b.n	801a616 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a5b0:	683b      	ldr	r3, [r7, #0]
 801a5b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a5b6:	f003 0308 	and.w	r3, r3, #8
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d024      	beq.n	801a608 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a5be:	8afb      	ldrh	r3, [r7, #22]
 801a5c0:	4619      	mov	r1, r3
 801a5c2:	6878      	ldr	r0, [r7, #4]
 801a5c4:	f7f6 fe8e 	bl	80112e4 <pbuf_remove_header>
 801a5c8:	4603      	mov	r3, r0
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d11e      	bne.n	801a60c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a5ce:	6839      	ldr	r1, [r7, #0]
 801a5d0:	6878      	ldr	r0, [r7, #4]
 801a5d2:	f7fe fe91 	bl	80192f8 <ip4_input>
      break;
 801a5d6:	e013      	b.n	801a600 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a5d8:	683b      	ldr	r3, [r7, #0]
 801a5da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a5de:	f003 0308 	and.w	r3, r3, #8
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d014      	beq.n	801a610 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a5e6:	8afb      	ldrh	r3, [r7, #22]
 801a5e8:	4619      	mov	r1, r3
 801a5ea:	6878      	ldr	r0, [r7, #4]
 801a5ec:	f7f6 fe7a 	bl	80112e4 <pbuf_remove_header>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d10e      	bne.n	801a614 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a5f6:	6839      	ldr	r1, [r7, #0]
 801a5f8:	6878      	ldr	r0, [r7, #4]
 801a5fa:	f7fe f80b 	bl	8018614 <etharp_input>
      break;
 801a5fe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a600:	2300      	movs	r3, #0
 801a602:	e00c      	b.n	801a61e <ethernet_input+0x10e>
    goto free_and_return;
 801a604:	bf00      	nop
 801a606:	e006      	b.n	801a616 <ethernet_input+0x106>
        goto free_and_return;
 801a608:	bf00      	nop
 801a60a:	e004      	b.n	801a616 <ethernet_input+0x106>
        goto free_and_return;
 801a60c:	bf00      	nop
 801a60e:	e002      	b.n	801a616 <ethernet_input+0x106>
        goto free_and_return;
 801a610:	bf00      	nop
 801a612:	e000      	b.n	801a616 <ethernet_input+0x106>
        goto free_and_return;
 801a614:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a616:	6878      	ldr	r0, [r7, #4]
 801a618:	f7f6 feea 	bl	80113f0 <pbuf_free>
  return ERR_OK;
 801a61c:	2300      	movs	r3, #0
}
 801a61e:	4618      	mov	r0, r3
 801a620:	3718      	adds	r7, #24
 801a622:	46bd      	mov	sp, r7
 801a624:	bd80      	pop	{r7, pc}
 801a626:	bf00      	nop
 801a628:	08020728 	.word	0x08020728

0801a62c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b086      	sub	sp, #24
 801a630:	af00      	add	r7, sp, #0
 801a632:	60f8      	str	r0, [r7, #12]
 801a634:	60b9      	str	r1, [r7, #8]
 801a636:	607a      	str	r2, [r7, #4]
 801a638:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a63a:	8c3b      	ldrh	r3, [r7, #32]
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7f5 fad3 	bl	800fbe8 <lwip_htons>
 801a642:	4603      	mov	r3, r0
 801a644:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a646:	210e      	movs	r1, #14
 801a648:	68b8      	ldr	r0, [r7, #8]
 801a64a:	f7f6 fe3b 	bl	80112c4 <pbuf_add_header>
 801a64e:	4603      	mov	r3, r0
 801a650:	2b00      	cmp	r3, #0
 801a652:	d125      	bne.n	801a6a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a654:	68bb      	ldr	r3, [r7, #8]
 801a656:	685b      	ldr	r3, [r3, #4]
 801a658:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a65a:	693b      	ldr	r3, [r7, #16]
 801a65c:	8afa      	ldrh	r2, [r7, #22]
 801a65e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a660:	693b      	ldr	r3, [r7, #16]
 801a662:	2206      	movs	r2, #6
 801a664:	6839      	ldr	r1, [r7, #0]
 801a666:	4618      	mov	r0, r3
 801a668:	f000 ff43 	bl	801b4f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a66c:	693b      	ldr	r3, [r7, #16]
 801a66e:	3306      	adds	r3, #6
 801a670:	2206      	movs	r2, #6
 801a672:	6879      	ldr	r1, [r7, #4]
 801a674:	4618      	mov	r0, r3
 801a676:	f000 ff3c 	bl	801b4f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a680:	2b06      	cmp	r3, #6
 801a682:	d006      	beq.n	801a692 <ethernet_output+0x66>
 801a684:	4b0a      	ldr	r3, [pc, #40]	; (801a6b0 <ethernet_output+0x84>)
 801a686:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a68a:	490a      	ldr	r1, [pc, #40]	; (801a6b4 <ethernet_output+0x88>)
 801a68c:	480a      	ldr	r0, [pc, #40]	; (801a6b8 <ethernet_output+0x8c>)
 801a68e:	f000 fd4f 	bl	801b130 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	699b      	ldr	r3, [r3, #24]
 801a696:	68b9      	ldr	r1, [r7, #8]
 801a698:	68f8      	ldr	r0, [r7, #12]
 801a69a:	4798      	blx	r3
 801a69c:	4603      	mov	r3, r0
 801a69e:	e002      	b.n	801a6a6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a6a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a6a2:	f06f 0301 	mvn.w	r3, #1
}
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	3718      	adds	r7, #24
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	bd80      	pop	{r7, pc}
 801a6ae:	bf00      	nop
 801a6b0:	0802055c 	.word	0x0802055c
 801a6b4:	08020594 	.word	0x08020594
 801a6b8:	080205c8 	.word	0x080205c8

0801a6bc <rand>:
 801a6bc:	4b16      	ldr	r3, [pc, #88]	; (801a718 <rand+0x5c>)
 801a6be:	b510      	push	{r4, lr}
 801a6c0:	681c      	ldr	r4, [r3, #0]
 801a6c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a6c4:	b9b3      	cbnz	r3, 801a6f4 <rand+0x38>
 801a6c6:	2018      	movs	r0, #24
 801a6c8:	f001 fd82 	bl	801c1d0 <malloc>
 801a6cc:	4602      	mov	r2, r0
 801a6ce:	6320      	str	r0, [r4, #48]	; 0x30
 801a6d0:	b920      	cbnz	r0, 801a6dc <rand+0x20>
 801a6d2:	4b12      	ldr	r3, [pc, #72]	; (801a71c <rand+0x60>)
 801a6d4:	4812      	ldr	r0, [pc, #72]	; (801a720 <rand+0x64>)
 801a6d6:	2152      	movs	r1, #82	; 0x52
 801a6d8:	f000 ff1a 	bl	801b510 <__assert_func>
 801a6dc:	4911      	ldr	r1, [pc, #68]	; (801a724 <rand+0x68>)
 801a6de:	4b12      	ldr	r3, [pc, #72]	; (801a728 <rand+0x6c>)
 801a6e0:	e9c0 1300 	strd	r1, r3, [r0]
 801a6e4:	4b11      	ldr	r3, [pc, #68]	; (801a72c <rand+0x70>)
 801a6e6:	6083      	str	r3, [r0, #8]
 801a6e8:	230b      	movs	r3, #11
 801a6ea:	8183      	strh	r3, [r0, #12]
 801a6ec:	2100      	movs	r1, #0
 801a6ee:	2001      	movs	r0, #1
 801a6f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a6f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a6f6:	480e      	ldr	r0, [pc, #56]	; (801a730 <rand+0x74>)
 801a6f8:	690b      	ldr	r3, [r1, #16]
 801a6fa:	694c      	ldr	r4, [r1, #20]
 801a6fc:	4a0d      	ldr	r2, [pc, #52]	; (801a734 <rand+0x78>)
 801a6fe:	4358      	muls	r0, r3
 801a700:	fb02 0004 	mla	r0, r2, r4, r0
 801a704:	fba3 3202 	umull	r3, r2, r3, r2
 801a708:	3301      	adds	r3, #1
 801a70a:	eb40 0002 	adc.w	r0, r0, r2
 801a70e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a712:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a716:	bd10      	pop	{r4, pc}
 801a718:	200001c0 	.word	0x200001c0
 801a71c:	08020736 	.word	0x08020736
 801a720:	0802074d 	.word	0x0802074d
 801a724:	abcd330e 	.word	0xabcd330e
 801a728:	e66d1234 	.word	0xe66d1234
 801a72c:	0005deec 	.word	0x0005deec
 801a730:	5851f42d 	.word	0x5851f42d
 801a734:	4c957f2d 	.word	0x4c957f2d

0801a738 <__cvt>:
 801a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a73a:	ed2d 8b02 	vpush	{d8}
 801a73e:	eeb0 8b40 	vmov.f64	d8, d0
 801a742:	b085      	sub	sp, #20
 801a744:	4617      	mov	r7, r2
 801a746:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a748:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a74a:	ee18 2a90 	vmov	r2, s17
 801a74e:	f025 0520 	bic.w	r5, r5, #32
 801a752:	2a00      	cmp	r2, #0
 801a754:	bfb6      	itet	lt
 801a756:	222d      	movlt	r2, #45	; 0x2d
 801a758:	2200      	movge	r2, #0
 801a75a:	eeb1 8b40 	vneglt.f64	d8, d0
 801a75e:	2d46      	cmp	r5, #70	; 0x46
 801a760:	460c      	mov	r4, r1
 801a762:	701a      	strb	r2, [r3, #0]
 801a764:	d004      	beq.n	801a770 <__cvt+0x38>
 801a766:	2d45      	cmp	r5, #69	; 0x45
 801a768:	d100      	bne.n	801a76c <__cvt+0x34>
 801a76a:	3401      	adds	r4, #1
 801a76c:	2102      	movs	r1, #2
 801a76e:	e000      	b.n	801a772 <__cvt+0x3a>
 801a770:	2103      	movs	r1, #3
 801a772:	ab03      	add	r3, sp, #12
 801a774:	9301      	str	r3, [sp, #4]
 801a776:	ab02      	add	r3, sp, #8
 801a778:	9300      	str	r3, [sp, #0]
 801a77a:	4622      	mov	r2, r4
 801a77c:	4633      	mov	r3, r6
 801a77e:	eeb0 0b48 	vmov.f64	d0, d8
 801a782:	f000 ff6d 	bl	801b660 <_dtoa_r>
 801a786:	2d47      	cmp	r5, #71	; 0x47
 801a788:	d101      	bne.n	801a78e <__cvt+0x56>
 801a78a:	07fb      	lsls	r3, r7, #31
 801a78c:	d51a      	bpl.n	801a7c4 <__cvt+0x8c>
 801a78e:	2d46      	cmp	r5, #70	; 0x46
 801a790:	eb00 0204 	add.w	r2, r0, r4
 801a794:	d10c      	bne.n	801a7b0 <__cvt+0x78>
 801a796:	7803      	ldrb	r3, [r0, #0]
 801a798:	2b30      	cmp	r3, #48	; 0x30
 801a79a:	d107      	bne.n	801a7ac <__cvt+0x74>
 801a79c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7a4:	bf1c      	itt	ne
 801a7a6:	f1c4 0401 	rsbne	r4, r4, #1
 801a7aa:	6034      	strne	r4, [r6, #0]
 801a7ac:	6833      	ldr	r3, [r6, #0]
 801a7ae:	441a      	add	r2, r3
 801a7b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b8:	bf08      	it	eq
 801a7ba:	9203      	streq	r2, [sp, #12]
 801a7bc:	2130      	movs	r1, #48	; 0x30
 801a7be:	9b03      	ldr	r3, [sp, #12]
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d307      	bcc.n	801a7d4 <__cvt+0x9c>
 801a7c4:	9b03      	ldr	r3, [sp, #12]
 801a7c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a7c8:	1a1b      	subs	r3, r3, r0
 801a7ca:	6013      	str	r3, [r2, #0]
 801a7cc:	b005      	add	sp, #20
 801a7ce:	ecbd 8b02 	vpop	{d8}
 801a7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7d4:	1c5c      	adds	r4, r3, #1
 801a7d6:	9403      	str	r4, [sp, #12]
 801a7d8:	7019      	strb	r1, [r3, #0]
 801a7da:	e7f0      	b.n	801a7be <__cvt+0x86>

0801a7dc <__exponent>:
 801a7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a7de:	4603      	mov	r3, r0
 801a7e0:	2900      	cmp	r1, #0
 801a7e2:	bfb8      	it	lt
 801a7e4:	4249      	neglt	r1, r1
 801a7e6:	f803 2b02 	strb.w	r2, [r3], #2
 801a7ea:	bfb4      	ite	lt
 801a7ec:	222d      	movlt	r2, #45	; 0x2d
 801a7ee:	222b      	movge	r2, #43	; 0x2b
 801a7f0:	2909      	cmp	r1, #9
 801a7f2:	7042      	strb	r2, [r0, #1]
 801a7f4:	dd2a      	ble.n	801a84c <__exponent+0x70>
 801a7f6:	f10d 0207 	add.w	r2, sp, #7
 801a7fa:	4617      	mov	r7, r2
 801a7fc:	260a      	movs	r6, #10
 801a7fe:	4694      	mov	ip, r2
 801a800:	fb91 f5f6 	sdiv	r5, r1, r6
 801a804:	fb06 1415 	mls	r4, r6, r5, r1
 801a808:	3430      	adds	r4, #48	; 0x30
 801a80a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a80e:	460c      	mov	r4, r1
 801a810:	2c63      	cmp	r4, #99	; 0x63
 801a812:	f102 32ff 	add.w	r2, r2, #4294967295
 801a816:	4629      	mov	r1, r5
 801a818:	dcf1      	bgt.n	801a7fe <__exponent+0x22>
 801a81a:	3130      	adds	r1, #48	; 0x30
 801a81c:	f1ac 0402 	sub.w	r4, ip, #2
 801a820:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a824:	1c41      	adds	r1, r0, #1
 801a826:	4622      	mov	r2, r4
 801a828:	42ba      	cmp	r2, r7
 801a82a:	d30a      	bcc.n	801a842 <__exponent+0x66>
 801a82c:	f10d 0209 	add.w	r2, sp, #9
 801a830:	eba2 020c 	sub.w	r2, r2, ip
 801a834:	42bc      	cmp	r4, r7
 801a836:	bf88      	it	hi
 801a838:	2200      	movhi	r2, #0
 801a83a:	4413      	add	r3, r2
 801a83c:	1a18      	subs	r0, r3, r0
 801a83e:	b003      	add	sp, #12
 801a840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a842:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a846:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a84a:	e7ed      	b.n	801a828 <__exponent+0x4c>
 801a84c:	2330      	movs	r3, #48	; 0x30
 801a84e:	3130      	adds	r1, #48	; 0x30
 801a850:	7083      	strb	r3, [r0, #2]
 801a852:	70c1      	strb	r1, [r0, #3]
 801a854:	1d03      	adds	r3, r0, #4
 801a856:	e7f1      	b.n	801a83c <__exponent+0x60>

0801a858 <_printf_float>:
 801a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a85c:	b08b      	sub	sp, #44	; 0x2c
 801a85e:	460c      	mov	r4, r1
 801a860:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a864:	4616      	mov	r6, r2
 801a866:	461f      	mov	r7, r3
 801a868:	4605      	mov	r5, r0
 801a86a:	f000 fdd1 	bl	801b410 <_localeconv_r>
 801a86e:	f8d0 b000 	ldr.w	fp, [r0]
 801a872:	4658      	mov	r0, fp
 801a874:	f7e7 fb3c 	bl	8001ef0 <strlen>
 801a878:	2300      	movs	r3, #0
 801a87a:	9308      	str	r3, [sp, #32]
 801a87c:	f8d8 3000 	ldr.w	r3, [r8]
 801a880:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a884:	6822      	ldr	r2, [r4, #0]
 801a886:	3307      	adds	r3, #7
 801a888:	f023 0307 	bic.w	r3, r3, #7
 801a88c:	f103 0108 	add.w	r1, r3, #8
 801a890:	f8c8 1000 	str.w	r1, [r8]
 801a894:	ed93 0b00 	vldr	d0, [r3]
 801a898:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801aaf8 <_printf_float+0x2a0>
 801a89c:	eeb0 7bc0 	vabs.f64	d7, d0
 801a8a0:	eeb4 7b46 	vcmp.f64	d7, d6
 801a8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801a8ac:	4682      	mov	sl, r0
 801a8ae:	dd24      	ble.n	801a8fa <_printf_float+0xa2>
 801a8b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b8:	d502      	bpl.n	801a8c0 <_printf_float+0x68>
 801a8ba:	232d      	movs	r3, #45	; 0x2d
 801a8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8c0:	498f      	ldr	r1, [pc, #572]	; (801ab00 <_printf_float+0x2a8>)
 801a8c2:	4b90      	ldr	r3, [pc, #576]	; (801ab04 <_printf_float+0x2ac>)
 801a8c4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801a8c8:	bf94      	ite	ls
 801a8ca:	4688      	movls	r8, r1
 801a8cc:	4698      	movhi	r8, r3
 801a8ce:	2303      	movs	r3, #3
 801a8d0:	6123      	str	r3, [r4, #16]
 801a8d2:	f022 0204 	bic.w	r2, r2, #4
 801a8d6:	2300      	movs	r3, #0
 801a8d8:	6022      	str	r2, [r4, #0]
 801a8da:	9304      	str	r3, [sp, #16]
 801a8dc:	9700      	str	r7, [sp, #0]
 801a8de:	4633      	mov	r3, r6
 801a8e0:	aa09      	add	r2, sp, #36	; 0x24
 801a8e2:	4621      	mov	r1, r4
 801a8e4:	4628      	mov	r0, r5
 801a8e6:	f000 f9d1 	bl	801ac8c <_printf_common>
 801a8ea:	3001      	adds	r0, #1
 801a8ec:	f040 808a 	bne.w	801aa04 <_printf_float+0x1ac>
 801a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 801a8f4:	b00b      	add	sp, #44	; 0x2c
 801a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8fa:	eeb4 0b40 	vcmp.f64	d0, d0
 801a8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a902:	d709      	bvc.n	801a918 <_printf_float+0xc0>
 801a904:	ee10 3a90 	vmov	r3, s1
 801a908:	2b00      	cmp	r3, #0
 801a90a:	bfbc      	itt	lt
 801a90c:	232d      	movlt	r3, #45	; 0x2d
 801a90e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a912:	497d      	ldr	r1, [pc, #500]	; (801ab08 <_printf_float+0x2b0>)
 801a914:	4b7d      	ldr	r3, [pc, #500]	; (801ab0c <_printf_float+0x2b4>)
 801a916:	e7d5      	b.n	801a8c4 <_printf_float+0x6c>
 801a918:	6863      	ldr	r3, [r4, #4]
 801a91a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801a91e:	9104      	str	r1, [sp, #16]
 801a920:	1c59      	adds	r1, r3, #1
 801a922:	d13c      	bne.n	801a99e <_printf_float+0x146>
 801a924:	2306      	movs	r3, #6
 801a926:	6063      	str	r3, [r4, #4]
 801a928:	2300      	movs	r3, #0
 801a92a:	9303      	str	r3, [sp, #12]
 801a92c:	ab08      	add	r3, sp, #32
 801a92e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801a932:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a936:	ab07      	add	r3, sp, #28
 801a938:	6861      	ldr	r1, [r4, #4]
 801a93a:	9300      	str	r3, [sp, #0]
 801a93c:	6022      	str	r2, [r4, #0]
 801a93e:	f10d 031b 	add.w	r3, sp, #27
 801a942:	4628      	mov	r0, r5
 801a944:	f7ff fef8 	bl	801a738 <__cvt>
 801a948:	9b04      	ldr	r3, [sp, #16]
 801a94a:	9907      	ldr	r1, [sp, #28]
 801a94c:	2b47      	cmp	r3, #71	; 0x47
 801a94e:	4680      	mov	r8, r0
 801a950:	d108      	bne.n	801a964 <_printf_float+0x10c>
 801a952:	1cc8      	adds	r0, r1, #3
 801a954:	db02      	blt.n	801a95c <_printf_float+0x104>
 801a956:	6863      	ldr	r3, [r4, #4]
 801a958:	4299      	cmp	r1, r3
 801a95a:	dd41      	ble.n	801a9e0 <_printf_float+0x188>
 801a95c:	f1a9 0902 	sub.w	r9, r9, #2
 801a960:	fa5f f989 	uxtb.w	r9, r9
 801a964:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801a968:	d820      	bhi.n	801a9ac <_printf_float+0x154>
 801a96a:	3901      	subs	r1, #1
 801a96c:	464a      	mov	r2, r9
 801a96e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a972:	9107      	str	r1, [sp, #28]
 801a974:	f7ff ff32 	bl	801a7dc <__exponent>
 801a978:	9a08      	ldr	r2, [sp, #32]
 801a97a:	9004      	str	r0, [sp, #16]
 801a97c:	1813      	adds	r3, r2, r0
 801a97e:	2a01      	cmp	r2, #1
 801a980:	6123      	str	r3, [r4, #16]
 801a982:	dc02      	bgt.n	801a98a <_printf_float+0x132>
 801a984:	6822      	ldr	r2, [r4, #0]
 801a986:	07d2      	lsls	r2, r2, #31
 801a988:	d501      	bpl.n	801a98e <_printf_float+0x136>
 801a98a:	3301      	adds	r3, #1
 801a98c:	6123      	str	r3, [r4, #16]
 801a98e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d0a2      	beq.n	801a8dc <_printf_float+0x84>
 801a996:	232d      	movs	r3, #45	; 0x2d
 801a998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a99c:	e79e      	b.n	801a8dc <_printf_float+0x84>
 801a99e:	9904      	ldr	r1, [sp, #16]
 801a9a0:	2947      	cmp	r1, #71	; 0x47
 801a9a2:	d1c1      	bne.n	801a928 <_printf_float+0xd0>
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d1bf      	bne.n	801a928 <_printf_float+0xd0>
 801a9a8:	2301      	movs	r3, #1
 801a9aa:	e7bc      	b.n	801a926 <_printf_float+0xce>
 801a9ac:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801a9b0:	d118      	bne.n	801a9e4 <_printf_float+0x18c>
 801a9b2:	2900      	cmp	r1, #0
 801a9b4:	6863      	ldr	r3, [r4, #4]
 801a9b6:	dd0b      	ble.n	801a9d0 <_printf_float+0x178>
 801a9b8:	6121      	str	r1, [r4, #16]
 801a9ba:	b913      	cbnz	r3, 801a9c2 <_printf_float+0x16a>
 801a9bc:	6822      	ldr	r2, [r4, #0]
 801a9be:	07d0      	lsls	r0, r2, #31
 801a9c0:	d502      	bpl.n	801a9c8 <_printf_float+0x170>
 801a9c2:	3301      	adds	r3, #1
 801a9c4:	440b      	add	r3, r1
 801a9c6:	6123      	str	r3, [r4, #16]
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	65a1      	str	r1, [r4, #88]	; 0x58
 801a9cc:	9304      	str	r3, [sp, #16]
 801a9ce:	e7de      	b.n	801a98e <_printf_float+0x136>
 801a9d0:	b913      	cbnz	r3, 801a9d8 <_printf_float+0x180>
 801a9d2:	6822      	ldr	r2, [r4, #0]
 801a9d4:	07d2      	lsls	r2, r2, #31
 801a9d6:	d501      	bpl.n	801a9dc <_printf_float+0x184>
 801a9d8:	3302      	adds	r3, #2
 801a9da:	e7f4      	b.n	801a9c6 <_printf_float+0x16e>
 801a9dc:	2301      	movs	r3, #1
 801a9de:	e7f2      	b.n	801a9c6 <_printf_float+0x16e>
 801a9e0:	f04f 0967 	mov.w	r9, #103	; 0x67
 801a9e4:	9b08      	ldr	r3, [sp, #32]
 801a9e6:	4299      	cmp	r1, r3
 801a9e8:	db05      	blt.n	801a9f6 <_printf_float+0x19e>
 801a9ea:	6823      	ldr	r3, [r4, #0]
 801a9ec:	6121      	str	r1, [r4, #16]
 801a9ee:	07d8      	lsls	r0, r3, #31
 801a9f0:	d5ea      	bpl.n	801a9c8 <_printf_float+0x170>
 801a9f2:	1c4b      	adds	r3, r1, #1
 801a9f4:	e7e7      	b.n	801a9c6 <_printf_float+0x16e>
 801a9f6:	2900      	cmp	r1, #0
 801a9f8:	bfd4      	ite	le
 801a9fa:	f1c1 0202 	rsble	r2, r1, #2
 801a9fe:	2201      	movgt	r2, #1
 801aa00:	4413      	add	r3, r2
 801aa02:	e7e0      	b.n	801a9c6 <_printf_float+0x16e>
 801aa04:	6823      	ldr	r3, [r4, #0]
 801aa06:	055a      	lsls	r2, r3, #21
 801aa08:	d407      	bmi.n	801aa1a <_printf_float+0x1c2>
 801aa0a:	6923      	ldr	r3, [r4, #16]
 801aa0c:	4642      	mov	r2, r8
 801aa0e:	4631      	mov	r1, r6
 801aa10:	4628      	mov	r0, r5
 801aa12:	47b8      	blx	r7
 801aa14:	3001      	adds	r0, #1
 801aa16:	d12a      	bne.n	801aa6e <_printf_float+0x216>
 801aa18:	e76a      	b.n	801a8f0 <_printf_float+0x98>
 801aa1a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aa1e:	f240 80e0 	bls.w	801abe2 <_printf_float+0x38a>
 801aa22:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801aa26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801aa2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa2e:	d133      	bne.n	801aa98 <_printf_float+0x240>
 801aa30:	4a37      	ldr	r2, [pc, #220]	; (801ab10 <_printf_float+0x2b8>)
 801aa32:	2301      	movs	r3, #1
 801aa34:	4631      	mov	r1, r6
 801aa36:	4628      	mov	r0, r5
 801aa38:	47b8      	blx	r7
 801aa3a:	3001      	adds	r0, #1
 801aa3c:	f43f af58 	beq.w	801a8f0 <_printf_float+0x98>
 801aa40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801aa44:	429a      	cmp	r2, r3
 801aa46:	db02      	blt.n	801aa4e <_printf_float+0x1f6>
 801aa48:	6823      	ldr	r3, [r4, #0]
 801aa4a:	07d8      	lsls	r0, r3, #31
 801aa4c:	d50f      	bpl.n	801aa6e <_printf_float+0x216>
 801aa4e:	4653      	mov	r3, sl
 801aa50:	465a      	mov	r2, fp
 801aa52:	4631      	mov	r1, r6
 801aa54:	4628      	mov	r0, r5
 801aa56:	47b8      	blx	r7
 801aa58:	3001      	adds	r0, #1
 801aa5a:	f43f af49 	beq.w	801a8f0 <_printf_float+0x98>
 801aa5e:	f04f 0800 	mov.w	r8, #0
 801aa62:	f104 091a 	add.w	r9, r4, #26
 801aa66:	9b08      	ldr	r3, [sp, #32]
 801aa68:	3b01      	subs	r3, #1
 801aa6a:	4543      	cmp	r3, r8
 801aa6c:	dc09      	bgt.n	801aa82 <_printf_float+0x22a>
 801aa6e:	6823      	ldr	r3, [r4, #0]
 801aa70:	079b      	lsls	r3, r3, #30
 801aa72:	f100 8106 	bmi.w	801ac82 <_printf_float+0x42a>
 801aa76:	68e0      	ldr	r0, [r4, #12]
 801aa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa7a:	4298      	cmp	r0, r3
 801aa7c:	bfb8      	it	lt
 801aa7e:	4618      	movlt	r0, r3
 801aa80:	e738      	b.n	801a8f4 <_printf_float+0x9c>
 801aa82:	2301      	movs	r3, #1
 801aa84:	464a      	mov	r2, r9
 801aa86:	4631      	mov	r1, r6
 801aa88:	4628      	mov	r0, r5
 801aa8a:	47b8      	blx	r7
 801aa8c:	3001      	adds	r0, #1
 801aa8e:	f43f af2f 	beq.w	801a8f0 <_printf_float+0x98>
 801aa92:	f108 0801 	add.w	r8, r8, #1
 801aa96:	e7e6      	b.n	801aa66 <_printf_float+0x20e>
 801aa98:	9b07      	ldr	r3, [sp, #28]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	dc3a      	bgt.n	801ab14 <_printf_float+0x2bc>
 801aa9e:	4a1c      	ldr	r2, [pc, #112]	; (801ab10 <_printf_float+0x2b8>)
 801aaa0:	2301      	movs	r3, #1
 801aaa2:	4631      	mov	r1, r6
 801aaa4:	4628      	mov	r0, r5
 801aaa6:	47b8      	blx	r7
 801aaa8:	3001      	adds	r0, #1
 801aaaa:	f43f af21 	beq.w	801a8f0 <_printf_float+0x98>
 801aaae:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801aab2:	4313      	orrs	r3, r2
 801aab4:	d102      	bne.n	801aabc <_printf_float+0x264>
 801aab6:	6823      	ldr	r3, [r4, #0]
 801aab8:	07d9      	lsls	r1, r3, #31
 801aaba:	d5d8      	bpl.n	801aa6e <_printf_float+0x216>
 801aabc:	4653      	mov	r3, sl
 801aabe:	465a      	mov	r2, fp
 801aac0:	4631      	mov	r1, r6
 801aac2:	4628      	mov	r0, r5
 801aac4:	47b8      	blx	r7
 801aac6:	3001      	adds	r0, #1
 801aac8:	f43f af12 	beq.w	801a8f0 <_printf_float+0x98>
 801aacc:	f04f 0900 	mov.w	r9, #0
 801aad0:	f104 0a1a 	add.w	sl, r4, #26
 801aad4:	9b07      	ldr	r3, [sp, #28]
 801aad6:	425b      	negs	r3, r3
 801aad8:	454b      	cmp	r3, r9
 801aada:	dc01      	bgt.n	801aae0 <_printf_float+0x288>
 801aadc:	9b08      	ldr	r3, [sp, #32]
 801aade:	e795      	b.n	801aa0c <_printf_float+0x1b4>
 801aae0:	2301      	movs	r3, #1
 801aae2:	4652      	mov	r2, sl
 801aae4:	4631      	mov	r1, r6
 801aae6:	4628      	mov	r0, r5
 801aae8:	47b8      	blx	r7
 801aaea:	3001      	adds	r0, #1
 801aaec:	f43f af00 	beq.w	801a8f0 <_printf_float+0x98>
 801aaf0:	f109 0901 	add.w	r9, r9, #1
 801aaf4:	e7ee      	b.n	801aad4 <_printf_float+0x27c>
 801aaf6:	bf00      	nop
 801aaf8:	ffffffff 	.word	0xffffffff
 801aafc:	7fefffff 	.word	0x7fefffff
 801ab00:	080208a6 	.word	0x080208a6
 801ab04:	080208aa 	.word	0x080208aa
 801ab08:	080208ae 	.word	0x080208ae
 801ab0c:	080208b2 	.word	0x080208b2
 801ab10:	080208b6 	.word	0x080208b6
 801ab14:	9a08      	ldr	r2, [sp, #32]
 801ab16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ab18:	429a      	cmp	r2, r3
 801ab1a:	bfa8      	it	ge
 801ab1c:	461a      	movge	r2, r3
 801ab1e:	2a00      	cmp	r2, #0
 801ab20:	4691      	mov	r9, r2
 801ab22:	dc38      	bgt.n	801ab96 <_printf_float+0x33e>
 801ab24:	2300      	movs	r3, #0
 801ab26:	9305      	str	r3, [sp, #20]
 801ab28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ab2c:	f104 021a 	add.w	r2, r4, #26
 801ab30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ab32:	9905      	ldr	r1, [sp, #20]
 801ab34:	9304      	str	r3, [sp, #16]
 801ab36:	eba3 0309 	sub.w	r3, r3, r9
 801ab3a:	428b      	cmp	r3, r1
 801ab3c:	dc33      	bgt.n	801aba6 <_printf_float+0x34e>
 801ab3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ab42:	429a      	cmp	r2, r3
 801ab44:	db3c      	blt.n	801abc0 <_printf_float+0x368>
 801ab46:	6823      	ldr	r3, [r4, #0]
 801ab48:	07da      	lsls	r2, r3, #31
 801ab4a:	d439      	bmi.n	801abc0 <_printf_float+0x368>
 801ab4c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ab50:	eba2 0903 	sub.w	r9, r2, r3
 801ab54:	9b04      	ldr	r3, [sp, #16]
 801ab56:	1ad2      	subs	r2, r2, r3
 801ab58:	4591      	cmp	r9, r2
 801ab5a:	bfa8      	it	ge
 801ab5c:	4691      	movge	r9, r2
 801ab5e:	f1b9 0f00 	cmp.w	r9, #0
 801ab62:	dc35      	bgt.n	801abd0 <_printf_float+0x378>
 801ab64:	f04f 0800 	mov.w	r8, #0
 801ab68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ab6c:	f104 0a1a 	add.w	sl, r4, #26
 801ab70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ab74:	1a9b      	subs	r3, r3, r2
 801ab76:	eba3 0309 	sub.w	r3, r3, r9
 801ab7a:	4543      	cmp	r3, r8
 801ab7c:	f77f af77 	ble.w	801aa6e <_printf_float+0x216>
 801ab80:	2301      	movs	r3, #1
 801ab82:	4652      	mov	r2, sl
 801ab84:	4631      	mov	r1, r6
 801ab86:	4628      	mov	r0, r5
 801ab88:	47b8      	blx	r7
 801ab8a:	3001      	adds	r0, #1
 801ab8c:	f43f aeb0 	beq.w	801a8f0 <_printf_float+0x98>
 801ab90:	f108 0801 	add.w	r8, r8, #1
 801ab94:	e7ec      	b.n	801ab70 <_printf_float+0x318>
 801ab96:	4613      	mov	r3, r2
 801ab98:	4631      	mov	r1, r6
 801ab9a:	4642      	mov	r2, r8
 801ab9c:	4628      	mov	r0, r5
 801ab9e:	47b8      	blx	r7
 801aba0:	3001      	adds	r0, #1
 801aba2:	d1bf      	bne.n	801ab24 <_printf_float+0x2cc>
 801aba4:	e6a4      	b.n	801a8f0 <_printf_float+0x98>
 801aba6:	2301      	movs	r3, #1
 801aba8:	4631      	mov	r1, r6
 801abaa:	4628      	mov	r0, r5
 801abac:	9204      	str	r2, [sp, #16]
 801abae:	47b8      	blx	r7
 801abb0:	3001      	adds	r0, #1
 801abb2:	f43f ae9d 	beq.w	801a8f0 <_printf_float+0x98>
 801abb6:	9b05      	ldr	r3, [sp, #20]
 801abb8:	9a04      	ldr	r2, [sp, #16]
 801abba:	3301      	adds	r3, #1
 801abbc:	9305      	str	r3, [sp, #20]
 801abbe:	e7b7      	b.n	801ab30 <_printf_float+0x2d8>
 801abc0:	4653      	mov	r3, sl
 801abc2:	465a      	mov	r2, fp
 801abc4:	4631      	mov	r1, r6
 801abc6:	4628      	mov	r0, r5
 801abc8:	47b8      	blx	r7
 801abca:	3001      	adds	r0, #1
 801abcc:	d1be      	bne.n	801ab4c <_printf_float+0x2f4>
 801abce:	e68f      	b.n	801a8f0 <_printf_float+0x98>
 801abd0:	9a04      	ldr	r2, [sp, #16]
 801abd2:	464b      	mov	r3, r9
 801abd4:	4442      	add	r2, r8
 801abd6:	4631      	mov	r1, r6
 801abd8:	4628      	mov	r0, r5
 801abda:	47b8      	blx	r7
 801abdc:	3001      	adds	r0, #1
 801abde:	d1c1      	bne.n	801ab64 <_printf_float+0x30c>
 801abe0:	e686      	b.n	801a8f0 <_printf_float+0x98>
 801abe2:	9a08      	ldr	r2, [sp, #32]
 801abe4:	2a01      	cmp	r2, #1
 801abe6:	dc01      	bgt.n	801abec <_printf_float+0x394>
 801abe8:	07db      	lsls	r3, r3, #31
 801abea:	d537      	bpl.n	801ac5c <_printf_float+0x404>
 801abec:	2301      	movs	r3, #1
 801abee:	4642      	mov	r2, r8
 801abf0:	4631      	mov	r1, r6
 801abf2:	4628      	mov	r0, r5
 801abf4:	47b8      	blx	r7
 801abf6:	3001      	adds	r0, #1
 801abf8:	f43f ae7a 	beq.w	801a8f0 <_printf_float+0x98>
 801abfc:	4653      	mov	r3, sl
 801abfe:	465a      	mov	r2, fp
 801ac00:	4631      	mov	r1, r6
 801ac02:	4628      	mov	r0, r5
 801ac04:	47b8      	blx	r7
 801ac06:	3001      	adds	r0, #1
 801ac08:	f43f ae72 	beq.w	801a8f0 <_printf_float+0x98>
 801ac0c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ac10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ac14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac18:	9b08      	ldr	r3, [sp, #32]
 801ac1a:	d01a      	beq.n	801ac52 <_printf_float+0x3fa>
 801ac1c:	3b01      	subs	r3, #1
 801ac1e:	f108 0201 	add.w	r2, r8, #1
 801ac22:	4631      	mov	r1, r6
 801ac24:	4628      	mov	r0, r5
 801ac26:	47b8      	blx	r7
 801ac28:	3001      	adds	r0, #1
 801ac2a:	d10e      	bne.n	801ac4a <_printf_float+0x3f2>
 801ac2c:	e660      	b.n	801a8f0 <_printf_float+0x98>
 801ac2e:	2301      	movs	r3, #1
 801ac30:	464a      	mov	r2, r9
 801ac32:	4631      	mov	r1, r6
 801ac34:	4628      	mov	r0, r5
 801ac36:	47b8      	blx	r7
 801ac38:	3001      	adds	r0, #1
 801ac3a:	f43f ae59 	beq.w	801a8f0 <_printf_float+0x98>
 801ac3e:	f108 0801 	add.w	r8, r8, #1
 801ac42:	9b08      	ldr	r3, [sp, #32]
 801ac44:	3b01      	subs	r3, #1
 801ac46:	4543      	cmp	r3, r8
 801ac48:	dcf1      	bgt.n	801ac2e <_printf_float+0x3d6>
 801ac4a:	9b04      	ldr	r3, [sp, #16]
 801ac4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ac50:	e6dd      	b.n	801aa0e <_printf_float+0x1b6>
 801ac52:	f04f 0800 	mov.w	r8, #0
 801ac56:	f104 091a 	add.w	r9, r4, #26
 801ac5a:	e7f2      	b.n	801ac42 <_printf_float+0x3ea>
 801ac5c:	2301      	movs	r3, #1
 801ac5e:	4642      	mov	r2, r8
 801ac60:	e7df      	b.n	801ac22 <_printf_float+0x3ca>
 801ac62:	2301      	movs	r3, #1
 801ac64:	464a      	mov	r2, r9
 801ac66:	4631      	mov	r1, r6
 801ac68:	4628      	mov	r0, r5
 801ac6a:	47b8      	blx	r7
 801ac6c:	3001      	adds	r0, #1
 801ac6e:	f43f ae3f 	beq.w	801a8f0 <_printf_float+0x98>
 801ac72:	f108 0801 	add.w	r8, r8, #1
 801ac76:	68e3      	ldr	r3, [r4, #12]
 801ac78:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac7a:	1a5b      	subs	r3, r3, r1
 801ac7c:	4543      	cmp	r3, r8
 801ac7e:	dcf0      	bgt.n	801ac62 <_printf_float+0x40a>
 801ac80:	e6f9      	b.n	801aa76 <_printf_float+0x21e>
 801ac82:	f04f 0800 	mov.w	r8, #0
 801ac86:	f104 0919 	add.w	r9, r4, #25
 801ac8a:	e7f4      	b.n	801ac76 <_printf_float+0x41e>

0801ac8c <_printf_common>:
 801ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac90:	4616      	mov	r6, r2
 801ac92:	4699      	mov	r9, r3
 801ac94:	688a      	ldr	r2, [r1, #8]
 801ac96:	690b      	ldr	r3, [r1, #16]
 801ac98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ac9c:	4293      	cmp	r3, r2
 801ac9e:	bfb8      	it	lt
 801aca0:	4613      	movlt	r3, r2
 801aca2:	6033      	str	r3, [r6, #0]
 801aca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aca8:	4607      	mov	r7, r0
 801acaa:	460c      	mov	r4, r1
 801acac:	b10a      	cbz	r2, 801acb2 <_printf_common+0x26>
 801acae:	3301      	adds	r3, #1
 801acb0:	6033      	str	r3, [r6, #0]
 801acb2:	6823      	ldr	r3, [r4, #0]
 801acb4:	0699      	lsls	r1, r3, #26
 801acb6:	bf42      	ittt	mi
 801acb8:	6833      	ldrmi	r3, [r6, #0]
 801acba:	3302      	addmi	r3, #2
 801acbc:	6033      	strmi	r3, [r6, #0]
 801acbe:	6825      	ldr	r5, [r4, #0]
 801acc0:	f015 0506 	ands.w	r5, r5, #6
 801acc4:	d106      	bne.n	801acd4 <_printf_common+0x48>
 801acc6:	f104 0a19 	add.w	sl, r4, #25
 801acca:	68e3      	ldr	r3, [r4, #12]
 801accc:	6832      	ldr	r2, [r6, #0]
 801acce:	1a9b      	subs	r3, r3, r2
 801acd0:	42ab      	cmp	r3, r5
 801acd2:	dc26      	bgt.n	801ad22 <_printf_common+0x96>
 801acd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801acd8:	1e13      	subs	r3, r2, #0
 801acda:	6822      	ldr	r2, [r4, #0]
 801acdc:	bf18      	it	ne
 801acde:	2301      	movne	r3, #1
 801ace0:	0692      	lsls	r2, r2, #26
 801ace2:	d42b      	bmi.n	801ad3c <_printf_common+0xb0>
 801ace4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ace8:	4649      	mov	r1, r9
 801acea:	4638      	mov	r0, r7
 801acec:	47c0      	blx	r8
 801acee:	3001      	adds	r0, #1
 801acf0:	d01e      	beq.n	801ad30 <_printf_common+0xa4>
 801acf2:	6823      	ldr	r3, [r4, #0]
 801acf4:	6922      	ldr	r2, [r4, #16]
 801acf6:	f003 0306 	and.w	r3, r3, #6
 801acfa:	2b04      	cmp	r3, #4
 801acfc:	bf02      	ittt	eq
 801acfe:	68e5      	ldreq	r5, [r4, #12]
 801ad00:	6833      	ldreq	r3, [r6, #0]
 801ad02:	1aed      	subeq	r5, r5, r3
 801ad04:	68a3      	ldr	r3, [r4, #8]
 801ad06:	bf0c      	ite	eq
 801ad08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ad0c:	2500      	movne	r5, #0
 801ad0e:	4293      	cmp	r3, r2
 801ad10:	bfc4      	itt	gt
 801ad12:	1a9b      	subgt	r3, r3, r2
 801ad14:	18ed      	addgt	r5, r5, r3
 801ad16:	2600      	movs	r6, #0
 801ad18:	341a      	adds	r4, #26
 801ad1a:	42b5      	cmp	r5, r6
 801ad1c:	d11a      	bne.n	801ad54 <_printf_common+0xc8>
 801ad1e:	2000      	movs	r0, #0
 801ad20:	e008      	b.n	801ad34 <_printf_common+0xa8>
 801ad22:	2301      	movs	r3, #1
 801ad24:	4652      	mov	r2, sl
 801ad26:	4649      	mov	r1, r9
 801ad28:	4638      	mov	r0, r7
 801ad2a:	47c0      	blx	r8
 801ad2c:	3001      	adds	r0, #1
 801ad2e:	d103      	bne.n	801ad38 <_printf_common+0xac>
 801ad30:	f04f 30ff 	mov.w	r0, #4294967295
 801ad34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad38:	3501      	adds	r5, #1
 801ad3a:	e7c6      	b.n	801acca <_printf_common+0x3e>
 801ad3c:	18e1      	adds	r1, r4, r3
 801ad3e:	1c5a      	adds	r2, r3, #1
 801ad40:	2030      	movs	r0, #48	; 0x30
 801ad42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ad46:	4422      	add	r2, r4
 801ad48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ad4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ad50:	3302      	adds	r3, #2
 801ad52:	e7c7      	b.n	801ace4 <_printf_common+0x58>
 801ad54:	2301      	movs	r3, #1
 801ad56:	4622      	mov	r2, r4
 801ad58:	4649      	mov	r1, r9
 801ad5a:	4638      	mov	r0, r7
 801ad5c:	47c0      	blx	r8
 801ad5e:	3001      	adds	r0, #1
 801ad60:	d0e6      	beq.n	801ad30 <_printf_common+0xa4>
 801ad62:	3601      	adds	r6, #1
 801ad64:	e7d9      	b.n	801ad1a <_printf_common+0x8e>
	...

0801ad68 <_printf_i>:
 801ad68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ad6c:	7e0f      	ldrb	r7, [r1, #24]
 801ad6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ad70:	2f78      	cmp	r7, #120	; 0x78
 801ad72:	4691      	mov	r9, r2
 801ad74:	4680      	mov	r8, r0
 801ad76:	460c      	mov	r4, r1
 801ad78:	469a      	mov	sl, r3
 801ad7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ad7e:	d807      	bhi.n	801ad90 <_printf_i+0x28>
 801ad80:	2f62      	cmp	r7, #98	; 0x62
 801ad82:	d80a      	bhi.n	801ad9a <_printf_i+0x32>
 801ad84:	2f00      	cmp	r7, #0
 801ad86:	f000 80d4 	beq.w	801af32 <_printf_i+0x1ca>
 801ad8a:	2f58      	cmp	r7, #88	; 0x58
 801ad8c:	f000 80c0 	beq.w	801af10 <_printf_i+0x1a8>
 801ad90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ad94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ad98:	e03a      	b.n	801ae10 <_printf_i+0xa8>
 801ad9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ad9e:	2b15      	cmp	r3, #21
 801ada0:	d8f6      	bhi.n	801ad90 <_printf_i+0x28>
 801ada2:	a101      	add	r1, pc, #4	; (adr r1, 801ada8 <_printf_i+0x40>)
 801ada4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ada8:	0801ae01 	.word	0x0801ae01
 801adac:	0801ae15 	.word	0x0801ae15
 801adb0:	0801ad91 	.word	0x0801ad91
 801adb4:	0801ad91 	.word	0x0801ad91
 801adb8:	0801ad91 	.word	0x0801ad91
 801adbc:	0801ad91 	.word	0x0801ad91
 801adc0:	0801ae15 	.word	0x0801ae15
 801adc4:	0801ad91 	.word	0x0801ad91
 801adc8:	0801ad91 	.word	0x0801ad91
 801adcc:	0801ad91 	.word	0x0801ad91
 801add0:	0801ad91 	.word	0x0801ad91
 801add4:	0801af19 	.word	0x0801af19
 801add8:	0801ae41 	.word	0x0801ae41
 801addc:	0801aed3 	.word	0x0801aed3
 801ade0:	0801ad91 	.word	0x0801ad91
 801ade4:	0801ad91 	.word	0x0801ad91
 801ade8:	0801af3b 	.word	0x0801af3b
 801adec:	0801ad91 	.word	0x0801ad91
 801adf0:	0801ae41 	.word	0x0801ae41
 801adf4:	0801ad91 	.word	0x0801ad91
 801adf8:	0801ad91 	.word	0x0801ad91
 801adfc:	0801aedb 	.word	0x0801aedb
 801ae00:	682b      	ldr	r3, [r5, #0]
 801ae02:	1d1a      	adds	r2, r3, #4
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	602a      	str	r2, [r5, #0]
 801ae08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ae10:	2301      	movs	r3, #1
 801ae12:	e09f      	b.n	801af54 <_printf_i+0x1ec>
 801ae14:	6820      	ldr	r0, [r4, #0]
 801ae16:	682b      	ldr	r3, [r5, #0]
 801ae18:	0607      	lsls	r7, r0, #24
 801ae1a:	f103 0104 	add.w	r1, r3, #4
 801ae1e:	6029      	str	r1, [r5, #0]
 801ae20:	d501      	bpl.n	801ae26 <_printf_i+0xbe>
 801ae22:	681e      	ldr	r6, [r3, #0]
 801ae24:	e003      	b.n	801ae2e <_printf_i+0xc6>
 801ae26:	0646      	lsls	r6, r0, #25
 801ae28:	d5fb      	bpl.n	801ae22 <_printf_i+0xba>
 801ae2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ae2e:	2e00      	cmp	r6, #0
 801ae30:	da03      	bge.n	801ae3a <_printf_i+0xd2>
 801ae32:	232d      	movs	r3, #45	; 0x2d
 801ae34:	4276      	negs	r6, r6
 801ae36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae3a:	485a      	ldr	r0, [pc, #360]	; (801afa4 <_printf_i+0x23c>)
 801ae3c:	230a      	movs	r3, #10
 801ae3e:	e012      	b.n	801ae66 <_printf_i+0xfe>
 801ae40:	682b      	ldr	r3, [r5, #0]
 801ae42:	6820      	ldr	r0, [r4, #0]
 801ae44:	1d19      	adds	r1, r3, #4
 801ae46:	6029      	str	r1, [r5, #0]
 801ae48:	0605      	lsls	r5, r0, #24
 801ae4a:	d501      	bpl.n	801ae50 <_printf_i+0xe8>
 801ae4c:	681e      	ldr	r6, [r3, #0]
 801ae4e:	e002      	b.n	801ae56 <_printf_i+0xee>
 801ae50:	0641      	lsls	r1, r0, #25
 801ae52:	d5fb      	bpl.n	801ae4c <_printf_i+0xe4>
 801ae54:	881e      	ldrh	r6, [r3, #0]
 801ae56:	4853      	ldr	r0, [pc, #332]	; (801afa4 <_printf_i+0x23c>)
 801ae58:	2f6f      	cmp	r7, #111	; 0x6f
 801ae5a:	bf0c      	ite	eq
 801ae5c:	2308      	moveq	r3, #8
 801ae5e:	230a      	movne	r3, #10
 801ae60:	2100      	movs	r1, #0
 801ae62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ae66:	6865      	ldr	r5, [r4, #4]
 801ae68:	60a5      	str	r5, [r4, #8]
 801ae6a:	2d00      	cmp	r5, #0
 801ae6c:	bfa2      	ittt	ge
 801ae6e:	6821      	ldrge	r1, [r4, #0]
 801ae70:	f021 0104 	bicge.w	r1, r1, #4
 801ae74:	6021      	strge	r1, [r4, #0]
 801ae76:	b90e      	cbnz	r6, 801ae7c <_printf_i+0x114>
 801ae78:	2d00      	cmp	r5, #0
 801ae7a:	d04b      	beq.n	801af14 <_printf_i+0x1ac>
 801ae7c:	4615      	mov	r5, r2
 801ae7e:	fbb6 f1f3 	udiv	r1, r6, r3
 801ae82:	fb03 6711 	mls	r7, r3, r1, r6
 801ae86:	5dc7      	ldrb	r7, [r0, r7]
 801ae88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ae8c:	4637      	mov	r7, r6
 801ae8e:	42bb      	cmp	r3, r7
 801ae90:	460e      	mov	r6, r1
 801ae92:	d9f4      	bls.n	801ae7e <_printf_i+0x116>
 801ae94:	2b08      	cmp	r3, #8
 801ae96:	d10b      	bne.n	801aeb0 <_printf_i+0x148>
 801ae98:	6823      	ldr	r3, [r4, #0]
 801ae9a:	07de      	lsls	r6, r3, #31
 801ae9c:	d508      	bpl.n	801aeb0 <_printf_i+0x148>
 801ae9e:	6923      	ldr	r3, [r4, #16]
 801aea0:	6861      	ldr	r1, [r4, #4]
 801aea2:	4299      	cmp	r1, r3
 801aea4:	bfde      	ittt	le
 801aea6:	2330      	movle	r3, #48	; 0x30
 801aea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801aeac:	f105 35ff 	addle.w	r5, r5, #4294967295
 801aeb0:	1b52      	subs	r2, r2, r5
 801aeb2:	6122      	str	r2, [r4, #16]
 801aeb4:	f8cd a000 	str.w	sl, [sp]
 801aeb8:	464b      	mov	r3, r9
 801aeba:	aa03      	add	r2, sp, #12
 801aebc:	4621      	mov	r1, r4
 801aebe:	4640      	mov	r0, r8
 801aec0:	f7ff fee4 	bl	801ac8c <_printf_common>
 801aec4:	3001      	adds	r0, #1
 801aec6:	d14a      	bne.n	801af5e <_printf_i+0x1f6>
 801aec8:	f04f 30ff 	mov.w	r0, #4294967295
 801aecc:	b004      	add	sp, #16
 801aece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aed2:	6823      	ldr	r3, [r4, #0]
 801aed4:	f043 0320 	orr.w	r3, r3, #32
 801aed8:	6023      	str	r3, [r4, #0]
 801aeda:	4833      	ldr	r0, [pc, #204]	; (801afa8 <_printf_i+0x240>)
 801aedc:	2778      	movs	r7, #120	; 0x78
 801aede:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801aee2:	6823      	ldr	r3, [r4, #0]
 801aee4:	6829      	ldr	r1, [r5, #0]
 801aee6:	061f      	lsls	r7, r3, #24
 801aee8:	f851 6b04 	ldr.w	r6, [r1], #4
 801aeec:	d402      	bmi.n	801aef4 <_printf_i+0x18c>
 801aeee:	065f      	lsls	r7, r3, #25
 801aef0:	bf48      	it	mi
 801aef2:	b2b6      	uxthmi	r6, r6
 801aef4:	07df      	lsls	r7, r3, #31
 801aef6:	bf48      	it	mi
 801aef8:	f043 0320 	orrmi.w	r3, r3, #32
 801aefc:	6029      	str	r1, [r5, #0]
 801aefe:	bf48      	it	mi
 801af00:	6023      	strmi	r3, [r4, #0]
 801af02:	b91e      	cbnz	r6, 801af0c <_printf_i+0x1a4>
 801af04:	6823      	ldr	r3, [r4, #0]
 801af06:	f023 0320 	bic.w	r3, r3, #32
 801af0a:	6023      	str	r3, [r4, #0]
 801af0c:	2310      	movs	r3, #16
 801af0e:	e7a7      	b.n	801ae60 <_printf_i+0xf8>
 801af10:	4824      	ldr	r0, [pc, #144]	; (801afa4 <_printf_i+0x23c>)
 801af12:	e7e4      	b.n	801aede <_printf_i+0x176>
 801af14:	4615      	mov	r5, r2
 801af16:	e7bd      	b.n	801ae94 <_printf_i+0x12c>
 801af18:	682b      	ldr	r3, [r5, #0]
 801af1a:	6826      	ldr	r6, [r4, #0]
 801af1c:	6961      	ldr	r1, [r4, #20]
 801af1e:	1d18      	adds	r0, r3, #4
 801af20:	6028      	str	r0, [r5, #0]
 801af22:	0635      	lsls	r5, r6, #24
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	d501      	bpl.n	801af2c <_printf_i+0x1c4>
 801af28:	6019      	str	r1, [r3, #0]
 801af2a:	e002      	b.n	801af32 <_printf_i+0x1ca>
 801af2c:	0670      	lsls	r0, r6, #25
 801af2e:	d5fb      	bpl.n	801af28 <_printf_i+0x1c0>
 801af30:	8019      	strh	r1, [r3, #0]
 801af32:	2300      	movs	r3, #0
 801af34:	6123      	str	r3, [r4, #16]
 801af36:	4615      	mov	r5, r2
 801af38:	e7bc      	b.n	801aeb4 <_printf_i+0x14c>
 801af3a:	682b      	ldr	r3, [r5, #0]
 801af3c:	1d1a      	adds	r2, r3, #4
 801af3e:	602a      	str	r2, [r5, #0]
 801af40:	681d      	ldr	r5, [r3, #0]
 801af42:	6862      	ldr	r2, [r4, #4]
 801af44:	2100      	movs	r1, #0
 801af46:	4628      	mov	r0, r5
 801af48:	f7e6 ff82 	bl	8001e50 <memchr>
 801af4c:	b108      	cbz	r0, 801af52 <_printf_i+0x1ea>
 801af4e:	1b40      	subs	r0, r0, r5
 801af50:	6060      	str	r0, [r4, #4]
 801af52:	6863      	ldr	r3, [r4, #4]
 801af54:	6123      	str	r3, [r4, #16]
 801af56:	2300      	movs	r3, #0
 801af58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af5c:	e7aa      	b.n	801aeb4 <_printf_i+0x14c>
 801af5e:	6923      	ldr	r3, [r4, #16]
 801af60:	462a      	mov	r2, r5
 801af62:	4649      	mov	r1, r9
 801af64:	4640      	mov	r0, r8
 801af66:	47d0      	blx	sl
 801af68:	3001      	adds	r0, #1
 801af6a:	d0ad      	beq.n	801aec8 <_printf_i+0x160>
 801af6c:	6823      	ldr	r3, [r4, #0]
 801af6e:	079b      	lsls	r3, r3, #30
 801af70:	d413      	bmi.n	801af9a <_printf_i+0x232>
 801af72:	68e0      	ldr	r0, [r4, #12]
 801af74:	9b03      	ldr	r3, [sp, #12]
 801af76:	4298      	cmp	r0, r3
 801af78:	bfb8      	it	lt
 801af7a:	4618      	movlt	r0, r3
 801af7c:	e7a6      	b.n	801aecc <_printf_i+0x164>
 801af7e:	2301      	movs	r3, #1
 801af80:	4632      	mov	r2, r6
 801af82:	4649      	mov	r1, r9
 801af84:	4640      	mov	r0, r8
 801af86:	47d0      	blx	sl
 801af88:	3001      	adds	r0, #1
 801af8a:	d09d      	beq.n	801aec8 <_printf_i+0x160>
 801af8c:	3501      	adds	r5, #1
 801af8e:	68e3      	ldr	r3, [r4, #12]
 801af90:	9903      	ldr	r1, [sp, #12]
 801af92:	1a5b      	subs	r3, r3, r1
 801af94:	42ab      	cmp	r3, r5
 801af96:	dcf2      	bgt.n	801af7e <_printf_i+0x216>
 801af98:	e7eb      	b.n	801af72 <_printf_i+0x20a>
 801af9a:	2500      	movs	r5, #0
 801af9c:	f104 0619 	add.w	r6, r4, #25
 801afa0:	e7f5      	b.n	801af8e <_printf_i+0x226>
 801afa2:	bf00      	nop
 801afa4:	080208b8 	.word	0x080208b8
 801afa8:	080208c9 	.word	0x080208c9

0801afac <std>:
 801afac:	2300      	movs	r3, #0
 801afae:	b510      	push	{r4, lr}
 801afb0:	4604      	mov	r4, r0
 801afb2:	e9c0 3300 	strd	r3, r3, [r0]
 801afb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801afba:	6083      	str	r3, [r0, #8]
 801afbc:	8181      	strh	r1, [r0, #12]
 801afbe:	6643      	str	r3, [r0, #100]	; 0x64
 801afc0:	81c2      	strh	r2, [r0, #14]
 801afc2:	6183      	str	r3, [r0, #24]
 801afc4:	4619      	mov	r1, r3
 801afc6:	2208      	movs	r2, #8
 801afc8:	305c      	adds	r0, #92	; 0x5c
 801afca:	f000 fa07 	bl	801b3dc <memset>
 801afce:	4b0d      	ldr	r3, [pc, #52]	; (801b004 <std+0x58>)
 801afd0:	6263      	str	r3, [r4, #36]	; 0x24
 801afd2:	4b0d      	ldr	r3, [pc, #52]	; (801b008 <std+0x5c>)
 801afd4:	62a3      	str	r3, [r4, #40]	; 0x28
 801afd6:	4b0d      	ldr	r3, [pc, #52]	; (801b00c <std+0x60>)
 801afd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801afda:	4b0d      	ldr	r3, [pc, #52]	; (801b010 <std+0x64>)
 801afdc:	6323      	str	r3, [r4, #48]	; 0x30
 801afde:	4b0d      	ldr	r3, [pc, #52]	; (801b014 <std+0x68>)
 801afe0:	6224      	str	r4, [r4, #32]
 801afe2:	429c      	cmp	r4, r3
 801afe4:	d006      	beq.n	801aff4 <std+0x48>
 801afe6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801afea:	4294      	cmp	r4, r2
 801afec:	d002      	beq.n	801aff4 <std+0x48>
 801afee:	33d0      	adds	r3, #208	; 0xd0
 801aff0:	429c      	cmp	r4, r3
 801aff2:	d105      	bne.n	801b000 <std+0x54>
 801aff4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801affc:	f000 ba76 	b.w	801b4ec <__retarget_lock_init_recursive>
 801b000:	bd10      	pop	{r4, pc}
 801b002:	bf00      	nop
 801b004:	0801b20d 	.word	0x0801b20d
 801b008:	0801b22f 	.word	0x0801b22f
 801b00c:	0801b267 	.word	0x0801b267
 801b010:	0801b28b 	.word	0x0801b28b
 801b014:	20007308 	.word	0x20007308

0801b018 <stdio_exit_handler>:
 801b018:	4a02      	ldr	r2, [pc, #8]	; (801b024 <stdio_exit_handler+0xc>)
 801b01a:	4903      	ldr	r1, [pc, #12]	; (801b028 <stdio_exit_handler+0x10>)
 801b01c:	4803      	ldr	r0, [pc, #12]	; (801b02c <stdio_exit_handler+0x14>)
 801b01e:	f000 b869 	b.w	801b0f4 <_fwalk_sglue>
 801b022:	bf00      	nop
 801b024:	20000168 	.word	0x20000168
 801b028:	0801cdc5 	.word	0x0801cdc5
 801b02c:	20000174 	.word	0x20000174

0801b030 <cleanup_stdio>:
 801b030:	6841      	ldr	r1, [r0, #4]
 801b032:	4b0c      	ldr	r3, [pc, #48]	; (801b064 <cleanup_stdio+0x34>)
 801b034:	4299      	cmp	r1, r3
 801b036:	b510      	push	{r4, lr}
 801b038:	4604      	mov	r4, r0
 801b03a:	d001      	beq.n	801b040 <cleanup_stdio+0x10>
 801b03c:	f001 fec2 	bl	801cdc4 <_fflush_r>
 801b040:	68a1      	ldr	r1, [r4, #8]
 801b042:	4b09      	ldr	r3, [pc, #36]	; (801b068 <cleanup_stdio+0x38>)
 801b044:	4299      	cmp	r1, r3
 801b046:	d002      	beq.n	801b04e <cleanup_stdio+0x1e>
 801b048:	4620      	mov	r0, r4
 801b04a:	f001 febb 	bl	801cdc4 <_fflush_r>
 801b04e:	68e1      	ldr	r1, [r4, #12]
 801b050:	4b06      	ldr	r3, [pc, #24]	; (801b06c <cleanup_stdio+0x3c>)
 801b052:	4299      	cmp	r1, r3
 801b054:	d004      	beq.n	801b060 <cleanup_stdio+0x30>
 801b056:	4620      	mov	r0, r4
 801b058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b05c:	f001 beb2 	b.w	801cdc4 <_fflush_r>
 801b060:	bd10      	pop	{r4, pc}
 801b062:	bf00      	nop
 801b064:	20007308 	.word	0x20007308
 801b068:	20007370 	.word	0x20007370
 801b06c:	200073d8 	.word	0x200073d8

0801b070 <global_stdio_init.part.0>:
 801b070:	b510      	push	{r4, lr}
 801b072:	4b0b      	ldr	r3, [pc, #44]	; (801b0a0 <global_stdio_init.part.0+0x30>)
 801b074:	4c0b      	ldr	r4, [pc, #44]	; (801b0a4 <global_stdio_init.part.0+0x34>)
 801b076:	4a0c      	ldr	r2, [pc, #48]	; (801b0a8 <global_stdio_init.part.0+0x38>)
 801b078:	601a      	str	r2, [r3, #0]
 801b07a:	4620      	mov	r0, r4
 801b07c:	2200      	movs	r2, #0
 801b07e:	2104      	movs	r1, #4
 801b080:	f7ff ff94 	bl	801afac <std>
 801b084:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b088:	2201      	movs	r2, #1
 801b08a:	2109      	movs	r1, #9
 801b08c:	f7ff ff8e 	bl	801afac <std>
 801b090:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b094:	2202      	movs	r2, #2
 801b096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b09a:	2112      	movs	r1, #18
 801b09c:	f7ff bf86 	b.w	801afac <std>
 801b0a0:	20007440 	.word	0x20007440
 801b0a4:	20007308 	.word	0x20007308
 801b0a8:	0801b019 	.word	0x0801b019

0801b0ac <__sfp_lock_acquire>:
 801b0ac:	4801      	ldr	r0, [pc, #4]	; (801b0b4 <__sfp_lock_acquire+0x8>)
 801b0ae:	f000 ba1e 	b.w	801b4ee <__retarget_lock_acquire_recursive>
 801b0b2:	bf00      	nop
 801b0b4:	20007449 	.word	0x20007449

0801b0b8 <__sfp_lock_release>:
 801b0b8:	4801      	ldr	r0, [pc, #4]	; (801b0c0 <__sfp_lock_release+0x8>)
 801b0ba:	f000 ba19 	b.w	801b4f0 <__retarget_lock_release_recursive>
 801b0be:	bf00      	nop
 801b0c0:	20007449 	.word	0x20007449

0801b0c4 <__sinit>:
 801b0c4:	b510      	push	{r4, lr}
 801b0c6:	4604      	mov	r4, r0
 801b0c8:	f7ff fff0 	bl	801b0ac <__sfp_lock_acquire>
 801b0cc:	6a23      	ldr	r3, [r4, #32]
 801b0ce:	b11b      	cbz	r3, 801b0d8 <__sinit+0x14>
 801b0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0d4:	f7ff bff0 	b.w	801b0b8 <__sfp_lock_release>
 801b0d8:	4b04      	ldr	r3, [pc, #16]	; (801b0ec <__sinit+0x28>)
 801b0da:	6223      	str	r3, [r4, #32]
 801b0dc:	4b04      	ldr	r3, [pc, #16]	; (801b0f0 <__sinit+0x2c>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d1f5      	bne.n	801b0d0 <__sinit+0xc>
 801b0e4:	f7ff ffc4 	bl	801b070 <global_stdio_init.part.0>
 801b0e8:	e7f2      	b.n	801b0d0 <__sinit+0xc>
 801b0ea:	bf00      	nop
 801b0ec:	0801b031 	.word	0x0801b031
 801b0f0:	20007440 	.word	0x20007440

0801b0f4 <_fwalk_sglue>:
 801b0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0f8:	4607      	mov	r7, r0
 801b0fa:	4688      	mov	r8, r1
 801b0fc:	4614      	mov	r4, r2
 801b0fe:	2600      	movs	r6, #0
 801b100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b104:	f1b9 0901 	subs.w	r9, r9, #1
 801b108:	d505      	bpl.n	801b116 <_fwalk_sglue+0x22>
 801b10a:	6824      	ldr	r4, [r4, #0]
 801b10c:	2c00      	cmp	r4, #0
 801b10e:	d1f7      	bne.n	801b100 <_fwalk_sglue+0xc>
 801b110:	4630      	mov	r0, r6
 801b112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b116:	89ab      	ldrh	r3, [r5, #12]
 801b118:	2b01      	cmp	r3, #1
 801b11a:	d907      	bls.n	801b12c <_fwalk_sglue+0x38>
 801b11c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b120:	3301      	adds	r3, #1
 801b122:	d003      	beq.n	801b12c <_fwalk_sglue+0x38>
 801b124:	4629      	mov	r1, r5
 801b126:	4638      	mov	r0, r7
 801b128:	47c0      	blx	r8
 801b12a:	4306      	orrs	r6, r0
 801b12c:	3568      	adds	r5, #104	; 0x68
 801b12e:	e7e9      	b.n	801b104 <_fwalk_sglue+0x10>

0801b130 <iprintf>:
 801b130:	b40f      	push	{r0, r1, r2, r3}
 801b132:	b507      	push	{r0, r1, r2, lr}
 801b134:	4906      	ldr	r1, [pc, #24]	; (801b150 <iprintf+0x20>)
 801b136:	ab04      	add	r3, sp, #16
 801b138:	6808      	ldr	r0, [r1, #0]
 801b13a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b13e:	6881      	ldr	r1, [r0, #8]
 801b140:	9301      	str	r3, [sp, #4]
 801b142:	f001 fc9f 	bl	801ca84 <_vfiprintf_r>
 801b146:	b003      	add	sp, #12
 801b148:	f85d eb04 	ldr.w	lr, [sp], #4
 801b14c:	b004      	add	sp, #16
 801b14e:	4770      	bx	lr
 801b150:	200001c0 	.word	0x200001c0

0801b154 <_puts_r>:
 801b154:	6a03      	ldr	r3, [r0, #32]
 801b156:	b570      	push	{r4, r5, r6, lr}
 801b158:	6884      	ldr	r4, [r0, #8]
 801b15a:	4605      	mov	r5, r0
 801b15c:	460e      	mov	r6, r1
 801b15e:	b90b      	cbnz	r3, 801b164 <_puts_r+0x10>
 801b160:	f7ff ffb0 	bl	801b0c4 <__sinit>
 801b164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b166:	07db      	lsls	r3, r3, #31
 801b168:	d405      	bmi.n	801b176 <_puts_r+0x22>
 801b16a:	89a3      	ldrh	r3, [r4, #12]
 801b16c:	0598      	lsls	r0, r3, #22
 801b16e:	d402      	bmi.n	801b176 <_puts_r+0x22>
 801b170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b172:	f000 f9bc 	bl	801b4ee <__retarget_lock_acquire_recursive>
 801b176:	89a3      	ldrh	r3, [r4, #12]
 801b178:	0719      	lsls	r1, r3, #28
 801b17a:	d513      	bpl.n	801b1a4 <_puts_r+0x50>
 801b17c:	6923      	ldr	r3, [r4, #16]
 801b17e:	b18b      	cbz	r3, 801b1a4 <_puts_r+0x50>
 801b180:	3e01      	subs	r6, #1
 801b182:	68a3      	ldr	r3, [r4, #8]
 801b184:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b188:	3b01      	subs	r3, #1
 801b18a:	60a3      	str	r3, [r4, #8]
 801b18c:	b9e9      	cbnz	r1, 801b1ca <_puts_r+0x76>
 801b18e:	2b00      	cmp	r3, #0
 801b190:	da2e      	bge.n	801b1f0 <_puts_r+0x9c>
 801b192:	4622      	mov	r2, r4
 801b194:	210a      	movs	r1, #10
 801b196:	4628      	mov	r0, r5
 801b198:	f000 f87b 	bl	801b292 <__swbuf_r>
 801b19c:	3001      	adds	r0, #1
 801b19e:	d007      	beq.n	801b1b0 <_puts_r+0x5c>
 801b1a0:	250a      	movs	r5, #10
 801b1a2:	e007      	b.n	801b1b4 <_puts_r+0x60>
 801b1a4:	4621      	mov	r1, r4
 801b1a6:	4628      	mov	r0, r5
 801b1a8:	f000 f8b0 	bl	801b30c <__swsetup_r>
 801b1ac:	2800      	cmp	r0, #0
 801b1ae:	d0e7      	beq.n	801b180 <_puts_r+0x2c>
 801b1b0:	f04f 35ff 	mov.w	r5, #4294967295
 801b1b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1b6:	07da      	lsls	r2, r3, #31
 801b1b8:	d405      	bmi.n	801b1c6 <_puts_r+0x72>
 801b1ba:	89a3      	ldrh	r3, [r4, #12]
 801b1bc:	059b      	lsls	r3, r3, #22
 801b1be:	d402      	bmi.n	801b1c6 <_puts_r+0x72>
 801b1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1c2:	f000 f995 	bl	801b4f0 <__retarget_lock_release_recursive>
 801b1c6:	4628      	mov	r0, r5
 801b1c8:	bd70      	pop	{r4, r5, r6, pc}
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	da04      	bge.n	801b1d8 <_puts_r+0x84>
 801b1ce:	69a2      	ldr	r2, [r4, #24]
 801b1d0:	429a      	cmp	r2, r3
 801b1d2:	dc06      	bgt.n	801b1e2 <_puts_r+0x8e>
 801b1d4:	290a      	cmp	r1, #10
 801b1d6:	d004      	beq.n	801b1e2 <_puts_r+0x8e>
 801b1d8:	6823      	ldr	r3, [r4, #0]
 801b1da:	1c5a      	adds	r2, r3, #1
 801b1dc:	6022      	str	r2, [r4, #0]
 801b1de:	7019      	strb	r1, [r3, #0]
 801b1e0:	e7cf      	b.n	801b182 <_puts_r+0x2e>
 801b1e2:	4622      	mov	r2, r4
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	f000 f854 	bl	801b292 <__swbuf_r>
 801b1ea:	3001      	adds	r0, #1
 801b1ec:	d1c9      	bne.n	801b182 <_puts_r+0x2e>
 801b1ee:	e7df      	b.n	801b1b0 <_puts_r+0x5c>
 801b1f0:	6823      	ldr	r3, [r4, #0]
 801b1f2:	250a      	movs	r5, #10
 801b1f4:	1c5a      	adds	r2, r3, #1
 801b1f6:	6022      	str	r2, [r4, #0]
 801b1f8:	701d      	strb	r5, [r3, #0]
 801b1fa:	e7db      	b.n	801b1b4 <_puts_r+0x60>

0801b1fc <puts>:
 801b1fc:	4b02      	ldr	r3, [pc, #8]	; (801b208 <puts+0xc>)
 801b1fe:	4601      	mov	r1, r0
 801b200:	6818      	ldr	r0, [r3, #0]
 801b202:	f7ff bfa7 	b.w	801b154 <_puts_r>
 801b206:	bf00      	nop
 801b208:	200001c0 	.word	0x200001c0

0801b20c <__sread>:
 801b20c:	b510      	push	{r4, lr}
 801b20e:	460c      	mov	r4, r1
 801b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b214:	f000 f922 	bl	801b45c <_read_r>
 801b218:	2800      	cmp	r0, #0
 801b21a:	bfab      	itete	ge
 801b21c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b21e:	89a3      	ldrhlt	r3, [r4, #12]
 801b220:	181b      	addge	r3, r3, r0
 801b222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b226:	bfac      	ite	ge
 801b228:	6563      	strge	r3, [r4, #84]	; 0x54
 801b22a:	81a3      	strhlt	r3, [r4, #12]
 801b22c:	bd10      	pop	{r4, pc}

0801b22e <__swrite>:
 801b22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b232:	461f      	mov	r7, r3
 801b234:	898b      	ldrh	r3, [r1, #12]
 801b236:	05db      	lsls	r3, r3, #23
 801b238:	4605      	mov	r5, r0
 801b23a:	460c      	mov	r4, r1
 801b23c:	4616      	mov	r6, r2
 801b23e:	d505      	bpl.n	801b24c <__swrite+0x1e>
 801b240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b244:	2302      	movs	r3, #2
 801b246:	2200      	movs	r2, #0
 801b248:	f000 f8f6 	bl	801b438 <_lseek_r>
 801b24c:	89a3      	ldrh	r3, [r4, #12]
 801b24e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b256:	81a3      	strh	r3, [r4, #12]
 801b258:	4632      	mov	r2, r6
 801b25a:	463b      	mov	r3, r7
 801b25c:	4628      	mov	r0, r5
 801b25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b262:	f000 b90d 	b.w	801b480 <_write_r>

0801b266 <__sseek>:
 801b266:	b510      	push	{r4, lr}
 801b268:	460c      	mov	r4, r1
 801b26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b26e:	f000 f8e3 	bl	801b438 <_lseek_r>
 801b272:	1c43      	adds	r3, r0, #1
 801b274:	89a3      	ldrh	r3, [r4, #12]
 801b276:	bf15      	itete	ne
 801b278:	6560      	strne	r0, [r4, #84]	; 0x54
 801b27a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b27e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b282:	81a3      	strheq	r3, [r4, #12]
 801b284:	bf18      	it	ne
 801b286:	81a3      	strhne	r3, [r4, #12]
 801b288:	bd10      	pop	{r4, pc}

0801b28a <__sclose>:
 801b28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b28e:	f000 b8c3 	b.w	801b418 <_close_r>

0801b292 <__swbuf_r>:
 801b292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b294:	460e      	mov	r6, r1
 801b296:	4614      	mov	r4, r2
 801b298:	4605      	mov	r5, r0
 801b29a:	b118      	cbz	r0, 801b2a4 <__swbuf_r+0x12>
 801b29c:	6a03      	ldr	r3, [r0, #32]
 801b29e:	b90b      	cbnz	r3, 801b2a4 <__swbuf_r+0x12>
 801b2a0:	f7ff ff10 	bl	801b0c4 <__sinit>
 801b2a4:	69a3      	ldr	r3, [r4, #24]
 801b2a6:	60a3      	str	r3, [r4, #8]
 801b2a8:	89a3      	ldrh	r3, [r4, #12]
 801b2aa:	071a      	lsls	r2, r3, #28
 801b2ac:	d525      	bpl.n	801b2fa <__swbuf_r+0x68>
 801b2ae:	6923      	ldr	r3, [r4, #16]
 801b2b0:	b31b      	cbz	r3, 801b2fa <__swbuf_r+0x68>
 801b2b2:	6823      	ldr	r3, [r4, #0]
 801b2b4:	6922      	ldr	r2, [r4, #16]
 801b2b6:	1a98      	subs	r0, r3, r2
 801b2b8:	6963      	ldr	r3, [r4, #20]
 801b2ba:	b2f6      	uxtb	r6, r6
 801b2bc:	4283      	cmp	r3, r0
 801b2be:	4637      	mov	r7, r6
 801b2c0:	dc04      	bgt.n	801b2cc <__swbuf_r+0x3a>
 801b2c2:	4621      	mov	r1, r4
 801b2c4:	4628      	mov	r0, r5
 801b2c6:	f001 fd7d 	bl	801cdc4 <_fflush_r>
 801b2ca:	b9e0      	cbnz	r0, 801b306 <__swbuf_r+0x74>
 801b2cc:	68a3      	ldr	r3, [r4, #8]
 801b2ce:	3b01      	subs	r3, #1
 801b2d0:	60a3      	str	r3, [r4, #8]
 801b2d2:	6823      	ldr	r3, [r4, #0]
 801b2d4:	1c5a      	adds	r2, r3, #1
 801b2d6:	6022      	str	r2, [r4, #0]
 801b2d8:	701e      	strb	r6, [r3, #0]
 801b2da:	6962      	ldr	r2, [r4, #20]
 801b2dc:	1c43      	adds	r3, r0, #1
 801b2de:	429a      	cmp	r2, r3
 801b2e0:	d004      	beq.n	801b2ec <__swbuf_r+0x5a>
 801b2e2:	89a3      	ldrh	r3, [r4, #12]
 801b2e4:	07db      	lsls	r3, r3, #31
 801b2e6:	d506      	bpl.n	801b2f6 <__swbuf_r+0x64>
 801b2e8:	2e0a      	cmp	r6, #10
 801b2ea:	d104      	bne.n	801b2f6 <__swbuf_r+0x64>
 801b2ec:	4621      	mov	r1, r4
 801b2ee:	4628      	mov	r0, r5
 801b2f0:	f001 fd68 	bl	801cdc4 <_fflush_r>
 801b2f4:	b938      	cbnz	r0, 801b306 <__swbuf_r+0x74>
 801b2f6:	4638      	mov	r0, r7
 801b2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2fa:	4621      	mov	r1, r4
 801b2fc:	4628      	mov	r0, r5
 801b2fe:	f000 f805 	bl	801b30c <__swsetup_r>
 801b302:	2800      	cmp	r0, #0
 801b304:	d0d5      	beq.n	801b2b2 <__swbuf_r+0x20>
 801b306:	f04f 37ff 	mov.w	r7, #4294967295
 801b30a:	e7f4      	b.n	801b2f6 <__swbuf_r+0x64>

0801b30c <__swsetup_r>:
 801b30c:	b538      	push	{r3, r4, r5, lr}
 801b30e:	4b2a      	ldr	r3, [pc, #168]	; (801b3b8 <__swsetup_r+0xac>)
 801b310:	4605      	mov	r5, r0
 801b312:	6818      	ldr	r0, [r3, #0]
 801b314:	460c      	mov	r4, r1
 801b316:	b118      	cbz	r0, 801b320 <__swsetup_r+0x14>
 801b318:	6a03      	ldr	r3, [r0, #32]
 801b31a:	b90b      	cbnz	r3, 801b320 <__swsetup_r+0x14>
 801b31c:	f7ff fed2 	bl	801b0c4 <__sinit>
 801b320:	89a3      	ldrh	r3, [r4, #12]
 801b322:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b326:	0718      	lsls	r0, r3, #28
 801b328:	d422      	bmi.n	801b370 <__swsetup_r+0x64>
 801b32a:	06d9      	lsls	r1, r3, #27
 801b32c:	d407      	bmi.n	801b33e <__swsetup_r+0x32>
 801b32e:	2309      	movs	r3, #9
 801b330:	602b      	str	r3, [r5, #0]
 801b332:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b336:	81a3      	strh	r3, [r4, #12]
 801b338:	f04f 30ff 	mov.w	r0, #4294967295
 801b33c:	e034      	b.n	801b3a8 <__swsetup_r+0x9c>
 801b33e:	0758      	lsls	r0, r3, #29
 801b340:	d512      	bpl.n	801b368 <__swsetup_r+0x5c>
 801b342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b344:	b141      	cbz	r1, 801b358 <__swsetup_r+0x4c>
 801b346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b34a:	4299      	cmp	r1, r3
 801b34c:	d002      	beq.n	801b354 <__swsetup_r+0x48>
 801b34e:	4628      	mov	r0, r5
 801b350:	f000 fef2 	bl	801c138 <_free_r>
 801b354:	2300      	movs	r3, #0
 801b356:	6363      	str	r3, [r4, #52]	; 0x34
 801b358:	89a3      	ldrh	r3, [r4, #12]
 801b35a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b35e:	81a3      	strh	r3, [r4, #12]
 801b360:	2300      	movs	r3, #0
 801b362:	6063      	str	r3, [r4, #4]
 801b364:	6923      	ldr	r3, [r4, #16]
 801b366:	6023      	str	r3, [r4, #0]
 801b368:	89a3      	ldrh	r3, [r4, #12]
 801b36a:	f043 0308 	orr.w	r3, r3, #8
 801b36e:	81a3      	strh	r3, [r4, #12]
 801b370:	6923      	ldr	r3, [r4, #16]
 801b372:	b94b      	cbnz	r3, 801b388 <__swsetup_r+0x7c>
 801b374:	89a3      	ldrh	r3, [r4, #12]
 801b376:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b37a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b37e:	d003      	beq.n	801b388 <__swsetup_r+0x7c>
 801b380:	4621      	mov	r1, r4
 801b382:	4628      	mov	r0, r5
 801b384:	f001 fd7e 	bl	801ce84 <__smakebuf_r>
 801b388:	89a0      	ldrh	r0, [r4, #12]
 801b38a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b38e:	f010 0301 	ands.w	r3, r0, #1
 801b392:	d00a      	beq.n	801b3aa <__swsetup_r+0x9e>
 801b394:	2300      	movs	r3, #0
 801b396:	60a3      	str	r3, [r4, #8]
 801b398:	6963      	ldr	r3, [r4, #20]
 801b39a:	425b      	negs	r3, r3
 801b39c:	61a3      	str	r3, [r4, #24]
 801b39e:	6923      	ldr	r3, [r4, #16]
 801b3a0:	b943      	cbnz	r3, 801b3b4 <__swsetup_r+0xa8>
 801b3a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b3a6:	d1c4      	bne.n	801b332 <__swsetup_r+0x26>
 801b3a8:	bd38      	pop	{r3, r4, r5, pc}
 801b3aa:	0781      	lsls	r1, r0, #30
 801b3ac:	bf58      	it	pl
 801b3ae:	6963      	ldrpl	r3, [r4, #20]
 801b3b0:	60a3      	str	r3, [r4, #8]
 801b3b2:	e7f4      	b.n	801b39e <__swsetup_r+0x92>
 801b3b4:	2000      	movs	r0, #0
 801b3b6:	e7f7      	b.n	801b3a8 <__swsetup_r+0x9c>
 801b3b8:	200001c0 	.word	0x200001c0

0801b3bc <memcmp>:
 801b3bc:	b510      	push	{r4, lr}
 801b3be:	3901      	subs	r1, #1
 801b3c0:	4402      	add	r2, r0
 801b3c2:	4290      	cmp	r0, r2
 801b3c4:	d101      	bne.n	801b3ca <memcmp+0xe>
 801b3c6:	2000      	movs	r0, #0
 801b3c8:	e005      	b.n	801b3d6 <memcmp+0x1a>
 801b3ca:	7803      	ldrb	r3, [r0, #0]
 801b3cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b3d0:	42a3      	cmp	r3, r4
 801b3d2:	d001      	beq.n	801b3d8 <memcmp+0x1c>
 801b3d4:	1b18      	subs	r0, r3, r4
 801b3d6:	bd10      	pop	{r4, pc}
 801b3d8:	3001      	adds	r0, #1
 801b3da:	e7f2      	b.n	801b3c2 <memcmp+0x6>

0801b3dc <memset>:
 801b3dc:	4402      	add	r2, r0
 801b3de:	4603      	mov	r3, r0
 801b3e0:	4293      	cmp	r3, r2
 801b3e2:	d100      	bne.n	801b3e6 <memset+0xa>
 801b3e4:	4770      	bx	lr
 801b3e6:	f803 1b01 	strb.w	r1, [r3], #1
 801b3ea:	e7f9      	b.n	801b3e0 <memset+0x4>

0801b3ec <strncmp>:
 801b3ec:	b510      	push	{r4, lr}
 801b3ee:	b16a      	cbz	r2, 801b40c <strncmp+0x20>
 801b3f0:	3901      	subs	r1, #1
 801b3f2:	1884      	adds	r4, r0, r2
 801b3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b3f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b3fc:	429a      	cmp	r2, r3
 801b3fe:	d103      	bne.n	801b408 <strncmp+0x1c>
 801b400:	42a0      	cmp	r0, r4
 801b402:	d001      	beq.n	801b408 <strncmp+0x1c>
 801b404:	2a00      	cmp	r2, #0
 801b406:	d1f5      	bne.n	801b3f4 <strncmp+0x8>
 801b408:	1ad0      	subs	r0, r2, r3
 801b40a:	bd10      	pop	{r4, pc}
 801b40c:	4610      	mov	r0, r2
 801b40e:	e7fc      	b.n	801b40a <strncmp+0x1e>

0801b410 <_localeconv_r>:
 801b410:	4800      	ldr	r0, [pc, #0]	; (801b414 <_localeconv_r+0x4>)
 801b412:	4770      	bx	lr
 801b414:	200002b4 	.word	0x200002b4

0801b418 <_close_r>:
 801b418:	b538      	push	{r3, r4, r5, lr}
 801b41a:	4d06      	ldr	r5, [pc, #24]	; (801b434 <_close_r+0x1c>)
 801b41c:	2300      	movs	r3, #0
 801b41e:	4604      	mov	r4, r0
 801b420:	4608      	mov	r0, r1
 801b422:	602b      	str	r3, [r5, #0]
 801b424:	f7e8 fad7 	bl	80039d6 <_close>
 801b428:	1c43      	adds	r3, r0, #1
 801b42a:	d102      	bne.n	801b432 <_close_r+0x1a>
 801b42c:	682b      	ldr	r3, [r5, #0]
 801b42e:	b103      	cbz	r3, 801b432 <_close_r+0x1a>
 801b430:	6023      	str	r3, [r4, #0]
 801b432:	bd38      	pop	{r3, r4, r5, pc}
 801b434:	20007444 	.word	0x20007444

0801b438 <_lseek_r>:
 801b438:	b538      	push	{r3, r4, r5, lr}
 801b43a:	4d07      	ldr	r5, [pc, #28]	; (801b458 <_lseek_r+0x20>)
 801b43c:	4604      	mov	r4, r0
 801b43e:	4608      	mov	r0, r1
 801b440:	4611      	mov	r1, r2
 801b442:	2200      	movs	r2, #0
 801b444:	602a      	str	r2, [r5, #0]
 801b446:	461a      	mov	r2, r3
 801b448:	f7e8 faec 	bl	8003a24 <_lseek>
 801b44c:	1c43      	adds	r3, r0, #1
 801b44e:	d102      	bne.n	801b456 <_lseek_r+0x1e>
 801b450:	682b      	ldr	r3, [r5, #0]
 801b452:	b103      	cbz	r3, 801b456 <_lseek_r+0x1e>
 801b454:	6023      	str	r3, [r4, #0]
 801b456:	bd38      	pop	{r3, r4, r5, pc}
 801b458:	20007444 	.word	0x20007444

0801b45c <_read_r>:
 801b45c:	b538      	push	{r3, r4, r5, lr}
 801b45e:	4d07      	ldr	r5, [pc, #28]	; (801b47c <_read_r+0x20>)
 801b460:	4604      	mov	r4, r0
 801b462:	4608      	mov	r0, r1
 801b464:	4611      	mov	r1, r2
 801b466:	2200      	movs	r2, #0
 801b468:	602a      	str	r2, [r5, #0]
 801b46a:	461a      	mov	r2, r3
 801b46c:	f7e8 fa7a 	bl	8003964 <_read>
 801b470:	1c43      	adds	r3, r0, #1
 801b472:	d102      	bne.n	801b47a <_read_r+0x1e>
 801b474:	682b      	ldr	r3, [r5, #0]
 801b476:	b103      	cbz	r3, 801b47a <_read_r+0x1e>
 801b478:	6023      	str	r3, [r4, #0]
 801b47a:	bd38      	pop	{r3, r4, r5, pc}
 801b47c:	20007444 	.word	0x20007444

0801b480 <_write_r>:
 801b480:	b538      	push	{r3, r4, r5, lr}
 801b482:	4d07      	ldr	r5, [pc, #28]	; (801b4a0 <_write_r+0x20>)
 801b484:	4604      	mov	r4, r0
 801b486:	4608      	mov	r0, r1
 801b488:	4611      	mov	r1, r2
 801b48a:	2200      	movs	r2, #0
 801b48c:	602a      	str	r2, [r5, #0]
 801b48e:	461a      	mov	r2, r3
 801b490:	f7e8 fa85 	bl	800399e <_write>
 801b494:	1c43      	adds	r3, r0, #1
 801b496:	d102      	bne.n	801b49e <_write_r+0x1e>
 801b498:	682b      	ldr	r3, [r5, #0]
 801b49a:	b103      	cbz	r3, 801b49e <_write_r+0x1e>
 801b49c:	6023      	str	r3, [r4, #0]
 801b49e:	bd38      	pop	{r3, r4, r5, pc}
 801b4a0:	20007444 	.word	0x20007444

0801b4a4 <__libc_init_array>:
 801b4a4:	b570      	push	{r4, r5, r6, lr}
 801b4a6:	4d0d      	ldr	r5, [pc, #52]	; (801b4dc <__libc_init_array+0x38>)
 801b4a8:	4c0d      	ldr	r4, [pc, #52]	; (801b4e0 <__libc_init_array+0x3c>)
 801b4aa:	1b64      	subs	r4, r4, r5
 801b4ac:	10a4      	asrs	r4, r4, #2
 801b4ae:	2600      	movs	r6, #0
 801b4b0:	42a6      	cmp	r6, r4
 801b4b2:	d109      	bne.n	801b4c8 <__libc_init_array+0x24>
 801b4b4:	4d0b      	ldr	r5, [pc, #44]	; (801b4e4 <__libc_init_array+0x40>)
 801b4b6:	4c0c      	ldr	r4, [pc, #48]	; (801b4e8 <__libc_init_array+0x44>)
 801b4b8:	f001 fdd2 	bl	801d060 <_init>
 801b4bc:	1b64      	subs	r4, r4, r5
 801b4be:	10a4      	asrs	r4, r4, #2
 801b4c0:	2600      	movs	r6, #0
 801b4c2:	42a6      	cmp	r6, r4
 801b4c4:	d105      	bne.n	801b4d2 <__libc_init_array+0x2e>
 801b4c6:	bd70      	pop	{r4, r5, r6, pc}
 801b4c8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4cc:	4798      	blx	r3
 801b4ce:	3601      	adds	r6, #1
 801b4d0:	e7ee      	b.n	801b4b0 <__libc_init_array+0xc>
 801b4d2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4d6:	4798      	blx	r3
 801b4d8:	3601      	adds	r6, #1
 801b4da:	e7f2      	b.n	801b4c2 <__libc_init_array+0x1e>
 801b4dc:	08020b08 	.word	0x08020b08
 801b4e0:	08020b08 	.word	0x08020b08
 801b4e4:	08020b08 	.word	0x08020b08
 801b4e8:	08020b0c 	.word	0x08020b0c

0801b4ec <__retarget_lock_init_recursive>:
 801b4ec:	4770      	bx	lr

0801b4ee <__retarget_lock_acquire_recursive>:
 801b4ee:	4770      	bx	lr

0801b4f0 <__retarget_lock_release_recursive>:
 801b4f0:	4770      	bx	lr

0801b4f2 <memcpy>:
 801b4f2:	440a      	add	r2, r1
 801b4f4:	4291      	cmp	r1, r2
 801b4f6:	f100 33ff 	add.w	r3, r0, #4294967295
 801b4fa:	d100      	bne.n	801b4fe <memcpy+0xc>
 801b4fc:	4770      	bx	lr
 801b4fe:	b510      	push	{r4, lr}
 801b500:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b504:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b508:	4291      	cmp	r1, r2
 801b50a:	d1f9      	bne.n	801b500 <memcpy+0xe>
 801b50c:	bd10      	pop	{r4, pc}
	...

0801b510 <__assert_func>:
 801b510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b512:	4614      	mov	r4, r2
 801b514:	461a      	mov	r2, r3
 801b516:	4b09      	ldr	r3, [pc, #36]	; (801b53c <__assert_func+0x2c>)
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	4605      	mov	r5, r0
 801b51c:	68d8      	ldr	r0, [r3, #12]
 801b51e:	b14c      	cbz	r4, 801b534 <__assert_func+0x24>
 801b520:	4b07      	ldr	r3, [pc, #28]	; (801b540 <__assert_func+0x30>)
 801b522:	9100      	str	r1, [sp, #0]
 801b524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b528:	4906      	ldr	r1, [pc, #24]	; (801b544 <__assert_func+0x34>)
 801b52a:	462b      	mov	r3, r5
 801b52c:	f001 fc72 	bl	801ce14 <fiprintf>
 801b530:	f001 fd16 	bl	801cf60 <abort>
 801b534:	4b04      	ldr	r3, [pc, #16]	; (801b548 <__assert_func+0x38>)
 801b536:	461c      	mov	r4, r3
 801b538:	e7f3      	b.n	801b522 <__assert_func+0x12>
 801b53a:	bf00      	nop
 801b53c:	200001c0 	.word	0x200001c0
 801b540:	080208da 	.word	0x080208da
 801b544:	080208e7 	.word	0x080208e7
 801b548:	08020915 	.word	0x08020915

0801b54c <quorem>:
 801b54c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b550:	6903      	ldr	r3, [r0, #16]
 801b552:	690c      	ldr	r4, [r1, #16]
 801b554:	42a3      	cmp	r3, r4
 801b556:	4607      	mov	r7, r0
 801b558:	db7e      	blt.n	801b658 <quorem+0x10c>
 801b55a:	3c01      	subs	r4, #1
 801b55c:	f101 0814 	add.w	r8, r1, #20
 801b560:	f100 0514 	add.w	r5, r0, #20
 801b564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b568:	9301      	str	r3, [sp, #4]
 801b56a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b56e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b572:	3301      	adds	r3, #1
 801b574:	429a      	cmp	r2, r3
 801b576:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b57a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b57e:	fbb2 f6f3 	udiv	r6, r2, r3
 801b582:	d331      	bcc.n	801b5e8 <quorem+0x9c>
 801b584:	f04f 0e00 	mov.w	lr, #0
 801b588:	4640      	mov	r0, r8
 801b58a:	46ac      	mov	ip, r5
 801b58c:	46f2      	mov	sl, lr
 801b58e:	f850 2b04 	ldr.w	r2, [r0], #4
 801b592:	b293      	uxth	r3, r2
 801b594:	fb06 e303 	mla	r3, r6, r3, lr
 801b598:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b59c:	0c1a      	lsrs	r2, r3, #16
 801b59e:	b29b      	uxth	r3, r3
 801b5a0:	ebaa 0303 	sub.w	r3, sl, r3
 801b5a4:	f8dc a000 	ldr.w	sl, [ip]
 801b5a8:	fa13 f38a 	uxtah	r3, r3, sl
 801b5ac:	fb06 220e 	mla	r2, r6, lr, r2
 801b5b0:	9300      	str	r3, [sp, #0]
 801b5b2:	9b00      	ldr	r3, [sp, #0]
 801b5b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b5b8:	b292      	uxth	r2, r2
 801b5ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b5be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b5c2:	f8bd 3000 	ldrh.w	r3, [sp]
 801b5c6:	4581      	cmp	r9, r0
 801b5c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5cc:	f84c 3b04 	str.w	r3, [ip], #4
 801b5d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b5d4:	d2db      	bcs.n	801b58e <quorem+0x42>
 801b5d6:	f855 300b 	ldr.w	r3, [r5, fp]
 801b5da:	b92b      	cbnz	r3, 801b5e8 <quorem+0x9c>
 801b5dc:	9b01      	ldr	r3, [sp, #4]
 801b5de:	3b04      	subs	r3, #4
 801b5e0:	429d      	cmp	r5, r3
 801b5e2:	461a      	mov	r2, r3
 801b5e4:	d32c      	bcc.n	801b640 <quorem+0xf4>
 801b5e6:	613c      	str	r4, [r7, #16]
 801b5e8:	4638      	mov	r0, r7
 801b5ea:	f001 f921 	bl	801c830 <__mcmp>
 801b5ee:	2800      	cmp	r0, #0
 801b5f0:	db22      	blt.n	801b638 <quorem+0xec>
 801b5f2:	3601      	adds	r6, #1
 801b5f4:	4629      	mov	r1, r5
 801b5f6:	2000      	movs	r0, #0
 801b5f8:	f858 2b04 	ldr.w	r2, [r8], #4
 801b5fc:	f8d1 c000 	ldr.w	ip, [r1]
 801b600:	b293      	uxth	r3, r2
 801b602:	1ac3      	subs	r3, r0, r3
 801b604:	0c12      	lsrs	r2, r2, #16
 801b606:	fa13 f38c 	uxtah	r3, r3, ip
 801b60a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b60e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b612:	b29b      	uxth	r3, r3
 801b614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b618:	45c1      	cmp	r9, r8
 801b61a:	f841 3b04 	str.w	r3, [r1], #4
 801b61e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b622:	d2e9      	bcs.n	801b5f8 <quorem+0xac>
 801b624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b62c:	b922      	cbnz	r2, 801b638 <quorem+0xec>
 801b62e:	3b04      	subs	r3, #4
 801b630:	429d      	cmp	r5, r3
 801b632:	461a      	mov	r2, r3
 801b634:	d30a      	bcc.n	801b64c <quorem+0x100>
 801b636:	613c      	str	r4, [r7, #16]
 801b638:	4630      	mov	r0, r6
 801b63a:	b003      	add	sp, #12
 801b63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b640:	6812      	ldr	r2, [r2, #0]
 801b642:	3b04      	subs	r3, #4
 801b644:	2a00      	cmp	r2, #0
 801b646:	d1ce      	bne.n	801b5e6 <quorem+0x9a>
 801b648:	3c01      	subs	r4, #1
 801b64a:	e7c9      	b.n	801b5e0 <quorem+0x94>
 801b64c:	6812      	ldr	r2, [r2, #0]
 801b64e:	3b04      	subs	r3, #4
 801b650:	2a00      	cmp	r2, #0
 801b652:	d1f0      	bne.n	801b636 <quorem+0xea>
 801b654:	3c01      	subs	r4, #1
 801b656:	e7eb      	b.n	801b630 <quorem+0xe4>
 801b658:	2000      	movs	r0, #0
 801b65a:	e7ee      	b.n	801b63a <quorem+0xee>
 801b65c:	0000      	movs	r0, r0
	...

0801b660 <_dtoa_r>:
 801b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b664:	ed2d 8b02 	vpush	{d8}
 801b668:	69c5      	ldr	r5, [r0, #28]
 801b66a:	b091      	sub	sp, #68	; 0x44
 801b66c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b670:	ec59 8b10 	vmov	r8, r9, d0
 801b674:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801b676:	9106      	str	r1, [sp, #24]
 801b678:	4606      	mov	r6, r0
 801b67a:	9208      	str	r2, [sp, #32]
 801b67c:	930c      	str	r3, [sp, #48]	; 0x30
 801b67e:	b975      	cbnz	r5, 801b69e <_dtoa_r+0x3e>
 801b680:	2010      	movs	r0, #16
 801b682:	f000 fda5 	bl	801c1d0 <malloc>
 801b686:	4602      	mov	r2, r0
 801b688:	61f0      	str	r0, [r6, #28]
 801b68a:	b920      	cbnz	r0, 801b696 <_dtoa_r+0x36>
 801b68c:	4ba6      	ldr	r3, [pc, #664]	; (801b928 <_dtoa_r+0x2c8>)
 801b68e:	21ef      	movs	r1, #239	; 0xef
 801b690:	48a6      	ldr	r0, [pc, #664]	; (801b92c <_dtoa_r+0x2cc>)
 801b692:	f7ff ff3d 	bl	801b510 <__assert_func>
 801b696:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b69a:	6005      	str	r5, [r0, #0]
 801b69c:	60c5      	str	r5, [r0, #12]
 801b69e:	69f3      	ldr	r3, [r6, #28]
 801b6a0:	6819      	ldr	r1, [r3, #0]
 801b6a2:	b151      	cbz	r1, 801b6ba <_dtoa_r+0x5a>
 801b6a4:	685a      	ldr	r2, [r3, #4]
 801b6a6:	604a      	str	r2, [r1, #4]
 801b6a8:	2301      	movs	r3, #1
 801b6aa:	4093      	lsls	r3, r2
 801b6ac:	608b      	str	r3, [r1, #8]
 801b6ae:	4630      	mov	r0, r6
 801b6b0:	f000 fe82 	bl	801c3b8 <_Bfree>
 801b6b4:	69f3      	ldr	r3, [r6, #28]
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	601a      	str	r2, [r3, #0]
 801b6ba:	f1b9 0300 	subs.w	r3, r9, #0
 801b6be:	bfbb      	ittet	lt
 801b6c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b6c4:	9303      	strlt	r3, [sp, #12]
 801b6c6:	2300      	movge	r3, #0
 801b6c8:	2201      	movlt	r2, #1
 801b6ca:	bfac      	ite	ge
 801b6cc:	6023      	strge	r3, [r4, #0]
 801b6ce:	6022      	strlt	r2, [r4, #0]
 801b6d0:	4b97      	ldr	r3, [pc, #604]	; (801b930 <_dtoa_r+0x2d0>)
 801b6d2:	9c03      	ldr	r4, [sp, #12]
 801b6d4:	43a3      	bics	r3, r4
 801b6d6:	d11c      	bne.n	801b712 <_dtoa_r+0xb2>
 801b6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b6da:	f242 730f 	movw	r3, #9999	; 0x270f
 801b6de:	6013      	str	r3, [r2, #0]
 801b6e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801b6e4:	ea53 0308 	orrs.w	r3, r3, r8
 801b6e8:	f000 84fb 	beq.w	801c0e2 <_dtoa_r+0xa82>
 801b6ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b6ee:	b963      	cbnz	r3, 801b70a <_dtoa_r+0xaa>
 801b6f0:	4b90      	ldr	r3, [pc, #576]	; (801b934 <_dtoa_r+0x2d4>)
 801b6f2:	e020      	b.n	801b736 <_dtoa_r+0xd6>
 801b6f4:	4b90      	ldr	r3, [pc, #576]	; (801b938 <_dtoa_r+0x2d8>)
 801b6f6:	9301      	str	r3, [sp, #4]
 801b6f8:	3308      	adds	r3, #8
 801b6fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b6fc:	6013      	str	r3, [r2, #0]
 801b6fe:	9801      	ldr	r0, [sp, #4]
 801b700:	b011      	add	sp, #68	; 0x44
 801b702:	ecbd 8b02 	vpop	{d8}
 801b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b70a:	4b8a      	ldr	r3, [pc, #552]	; (801b934 <_dtoa_r+0x2d4>)
 801b70c:	9301      	str	r3, [sp, #4]
 801b70e:	3303      	adds	r3, #3
 801b710:	e7f3      	b.n	801b6fa <_dtoa_r+0x9a>
 801b712:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b716:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b71e:	d10c      	bne.n	801b73a <_dtoa_r+0xda>
 801b720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b722:	2301      	movs	r3, #1
 801b724:	6013      	str	r3, [r2, #0]
 801b726:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b728:	2b00      	cmp	r3, #0
 801b72a:	f000 84d7 	beq.w	801c0dc <_dtoa_r+0xa7c>
 801b72e:	4b83      	ldr	r3, [pc, #524]	; (801b93c <_dtoa_r+0x2dc>)
 801b730:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b732:	6013      	str	r3, [r2, #0]
 801b734:	3b01      	subs	r3, #1
 801b736:	9301      	str	r3, [sp, #4]
 801b738:	e7e1      	b.n	801b6fe <_dtoa_r+0x9e>
 801b73a:	aa0e      	add	r2, sp, #56	; 0x38
 801b73c:	a90f      	add	r1, sp, #60	; 0x3c
 801b73e:	4630      	mov	r0, r6
 801b740:	eeb0 0b48 	vmov.f64	d0, d8
 801b744:	f001 f91a 	bl	801c97c <__d2b>
 801b748:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801b74c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b74e:	4605      	mov	r5, r0
 801b750:	2b00      	cmp	r3, #0
 801b752:	d046      	beq.n	801b7e2 <_dtoa_r+0x182>
 801b754:	eeb0 7b48 	vmov.f64	d7, d8
 801b758:	ee18 1a90 	vmov	r1, s17
 801b75c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b760:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b764:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b76c:	2000      	movs	r0, #0
 801b76e:	ee07 1a90 	vmov	s15, r1
 801b772:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801b776:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801b910 <_dtoa_r+0x2b0>
 801b77a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b77e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801b918 <_dtoa_r+0x2b8>
 801b782:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b786:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801b920 <_dtoa_r+0x2c0>
 801b78a:	ee07 3a90 	vmov	s15, r3
 801b78e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b792:	eeb0 7b46 	vmov.f64	d7, d6
 801b796:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b79a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b79e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7a6:	ee16 ba90 	vmov	fp, s13
 801b7aa:	9009      	str	r0, [sp, #36]	; 0x24
 801b7ac:	d508      	bpl.n	801b7c0 <_dtoa_r+0x160>
 801b7ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b7b2:	eeb4 6b47 	vcmp.f64	d6, d7
 801b7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ba:	bf18      	it	ne
 801b7bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801b7c0:	f1bb 0f16 	cmp.w	fp, #22
 801b7c4:	d82b      	bhi.n	801b81e <_dtoa_r+0x1be>
 801b7c6:	495e      	ldr	r1, [pc, #376]	; (801b940 <_dtoa_r+0x2e0>)
 801b7c8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801b7cc:	ed91 7b00 	vldr	d7, [r1]
 801b7d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7d8:	d501      	bpl.n	801b7de <_dtoa_r+0x17e>
 801b7da:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b7de:	2100      	movs	r1, #0
 801b7e0:	e01e      	b.n	801b820 <_dtoa_r+0x1c0>
 801b7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7e4:	4413      	add	r3, r2
 801b7e6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801b7ea:	2920      	cmp	r1, #32
 801b7ec:	bfc1      	itttt	gt
 801b7ee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801b7f2:	408c      	lslgt	r4, r1
 801b7f4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801b7f8:	fa28 f101 	lsrgt.w	r1, r8, r1
 801b7fc:	bfd6      	itet	le
 801b7fe:	f1c1 0120 	rsble	r1, r1, #32
 801b802:	4321      	orrgt	r1, r4
 801b804:	fa08 f101 	lslle.w	r1, r8, r1
 801b808:	ee07 1a90 	vmov	s15, r1
 801b80c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b810:	3b01      	subs	r3, #1
 801b812:	ee17 1a90 	vmov	r1, s15
 801b816:	2001      	movs	r0, #1
 801b818:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801b81c:	e7a7      	b.n	801b76e <_dtoa_r+0x10e>
 801b81e:	2101      	movs	r1, #1
 801b820:	1ad2      	subs	r2, r2, r3
 801b822:	1e53      	subs	r3, r2, #1
 801b824:	9305      	str	r3, [sp, #20]
 801b826:	bf45      	ittet	mi
 801b828:	f1c2 0301 	rsbmi	r3, r2, #1
 801b82c:	9304      	strmi	r3, [sp, #16]
 801b82e:	2300      	movpl	r3, #0
 801b830:	2300      	movmi	r3, #0
 801b832:	bf4c      	ite	mi
 801b834:	9305      	strmi	r3, [sp, #20]
 801b836:	9304      	strpl	r3, [sp, #16]
 801b838:	f1bb 0f00 	cmp.w	fp, #0
 801b83c:	910b      	str	r1, [sp, #44]	; 0x2c
 801b83e:	db18      	blt.n	801b872 <_dtoa_r+0x212>
 801b840:	9b05      	ldr	r3, [sp, #20]
 801b842:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b846:	445b      	add	r3, fp
 801b848:	9305      	str	r3, [sp, #20]
 801b84a:	2300      	movs	r3, #0
 801b84c:	9a06      	ldr	r2, [sp, #24]
 801b84e:	2a09      	cmp	r2, #9
 801b850:	d848      	bhi.n	801b8e4 <_dtoa_r+0x284>
 801b852:	2a05      	cmp	r2, #5
 801b854:	bfc4      	itt	gt
 801b856:	3a04      	subgt	r2, #4
 801b858:	9206      	strgt	r2, [sp, #24]
 801b85a:	9a06      	ldr	r2, [sp, #24]
 801b85c:	f1a2 0202 	sub.w	r2, r2, #2
 801b860:	bfcc      	ite	gt
 801b862:	2400      	movgt	r4, #0
 801b864:	2401      	movle	r4, #1
 801b866:	2a03      	cmp	r2, #3
 801b868:	d847      	bhi.n	801b8fa <_dtoa_r+0x29a>
 801b86a:	e8df f002 	tbb	[pc, r2]
 801b86e:	2d0b      	.short	0x2d0b
 801b870:	392b      	.short	0x392b
 801b872:	9b04      	ldr	r3, [sp, #16]
 801b874:	2200      	movs	r2, #0
 801b876:	eba3 030b 	sub.w	r3, r3, fp
 801b87a:	9304      	str	r3, [sp, #16]
 801b87c:	920a      	str	r2, [sp, #40]	; 0x28
 801b87e:	f1cb 0300 	rsb	r3, fp, #0
 801b882:	e7e3      	b.n	801b84c <_dtoa_r+0x1ec>
 801b884:	2200      	movs	r2, #0
 801b886:	9207      	str	r2, [sp, #28]
 801b888:	9a08      	ldr	r2, [sp, #32]
 801b88a:	2a00      	cmp	r2, #0
 801b88c:	dc38      	bgt.n	801b900 <_dtoa_r+0x2a0>
 801b88e:	f04f 0a01 	mov.w	sl, #1
 801b892:	46d1      	mov	r9, sl
 801b894:	4652      	mov	r2, sl
 801b896:	f8cd a020 	str.w	sl, [sp, #32]
 801b89a:	69f7      	ldr	r7, [r6, #28]
 801b89c:	2100      	movs	r1, #0
 801b89e:	2004      	movs	r0, #4
 801b8a0:	f100 0c14 	add.w	ip, r0, #20
 801b8a4:	4594      	cmp	ip, r2
 801b8a6:	d930      	bls.n	801b90a <_dtoa_r+0x2aa>
 801b8a8:	6079      	str	r1, [r7, #4]
 801b8aa:	4630      	mov	r0, r6
 801b8ac:	930d      	str	r3, [sp, #52]	; 0x34
 801b8ae:	f000 fd43 	bl	801c338 <_Balloc>
 801b8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b8b4:	9001      	str	r0, [sp, #4]
 801b8b6:	4602      	mov	r2, r0
 801b8b8:	2800      	cmp	r0, #0
 801b8ba:	d145      	bne.n	801b948 <_dtoa_r+0x2e8>
 801b8bc:	4b21      	ldr	r3, [pc, #132]	; (801b944 <_dtoa_r+0x2e4>)
 801b8be:	f240 11af 	movw	r1, #431	; 0x1af
 801b8c2:	e6e5      	b.n	801b690 <_dtoa_r+0x30>
 801b8c4:	2201      	movs	r2, #1
 801b8c6:	e7de      	b.n	801b886 <_dtoa_r+0x226>
 801b8c8:	2200      	movs	r2, #0
 801b8ca:	9207      	str	r2, [sp, #28]
 801b8cc:	9a08      	ldr	r2, [sp, #32]
 801b8ce:	eb0b 0a02 	add.w	sl, fp, r2
 801b8d2:	f10a 0901 	add.w	r9, sl, #1
 801b8d6:	464a      	mov	r2, r9
 801b8d8:	2a01      	cmp	r2, #1
 801b8da:	bfb8      	it	lt
 801b8dc:	2201      	movlt	r2, #1
 801b8de:	e7dc      	b.n	801b89a <_dtoa_r+0x23a>
 801b8e0:	2201      	movs	r2, #1
 801b8e2:	e7f2      	b.n	801b8ca <_dtoa_r+0x26a>
 801b8e4:	2401      	movs	r4, #1
 801b8e6:	2200      	movs	r2, #0
 801b8e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801b8ec:	f04f 3aff 	mov.w	sl, #4294967295
 801b8f0:	2100      	movs	r1, #0
 801b8f2:	46d1      	mov	r9, sl
 801b8f4:	2212      	movs	r2, #18
 801b8f6:	9108      	str	r1, [sp, #32]
 801b8f8:	e7cf      	b.n	801b89a <_dtoa_r+0x23a>
 801b8fa:	2201      	movs	r2, #1
 801b8fc:	9207      	str	r2, [sp, #28]
 801b8fe:	e7f5      	b.n	801b8ec <_dtoa_r+0x28c>
 801b900:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b904:	46d1      	mov	r9, sl
 801b906:	4652      	mov	r2, sl
 801b908:	e7c7      	b.n	801b89a <_dtoa_r+0x23a>
 801b90a:	3101      	adds	r1, #1
 801b90c:	0040      	lsls	r0, r0, #1
 801b90e:	e7c7      	b.n	801b8a0 <_dtoa_r+0x240>
 801b910:	636f4361 	.word	0x636f4361
 801b914:	3fd287a7 	.word	0x3fd287a7
 801b918:	8b60c8b3 	.word	0x8b60c8b3
 801b91c:	3fc68a28 	.word	0x3fc68a28
 801b920:	509f79fb 	.word	0x509f79fb
 801b924:	3fd34413 	.word	0x3fd34413
 801b928:	08020736 	.word	0x08020736
 801b92c:	08020923 	.word	0x08020923
 801b930:	7ff00000 	.word	0x7ff00000
 801b934:	0802091f 	.word	0x0802091f
 801b938:	08020916 	.word	0x08020916
 801b93c:	080208b7 	.word	0x080208b7
 801b940:	08020a10 	.word	0x08020a10
 801b944:	0802097b 	.word	0x0802097b
 801b948:	69f2      	ldr	r2, [r6, #28]
 801b94a:	9901      	ldr	r1, [sp, #4]
 801b94c:	6011      	str	r1, [r2, #0]
 801b94e:	f1b9 0f0e 	cmp.w	r9, #14
 801b952:	d86c      	bhi.n	801ba2e <_dtoa_r+0x3ce>
 801b954:	2c00      	cmp	r4, #0
 801b956:	d06a      	beq.n	801ba2e <_dtoa_r+0x3ce>
 801b958:	f1bb 0f00 	cmp.w	fp, #0
 801b95c:	f340 80a0 	ble.w	801baa0 <_dtoa_r+0x440>
 801b960:	4ac1      	ldr	r2, [pc, #772]	; (801bc68 <_dtoa_r+0x608>)
 801b962:	f00b 010f 	and.w	r1, fp, #15
 801b966:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801b96a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801b96e:	ed92 7b00 	vldr	d7, [r2]
 801b972:	ea4f 122b 	mov.w	r2, fp, asr #4
 801b976:	f000 8087 	beq.w	801ba88 <_dtoa_r+0x428>
 801b97a:	49bc      	ldr	r1, [pc, #752]	; (801bc6c <_dtoa_r+0x60c>)
 801b97c:	ed91 6b08 	vldr	d6, [r1, #32]
 801b980:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801b984:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b988:	f002 020f 	and.w	r2, r2, #15
 801b98c:	2103      	movs	r1, #3
 801b98e:	48b7      	ldr	r0, [pc, #732]	; (801bc6c <_dtoa_r+0x60c>)
 801b990:	2a00      	cmp	r2, #0
 801b992:	d17b      	bne.n	801ba8c <_dtoa_r+0x42c>
 801b994:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b998:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b99c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b9a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b9a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b9a6:	2a00      	cmp	r2, #0
 801b9a8:	f000 80a0 	beq.w	801baec <_dtoa_r+0x48c>
 801b9ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b9b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9b8:	f140 8098 	bpl.w	801baec <_dtoa_r+0x48c>
 801b9bc:	f1b9 0f00 	cmp.w	r9, #0
 801b9c0:	f000 8094 	beq.w	801baec <_dtoa_r+0x48c>
 801b9c4:	f1ba 0f00 	cmp.w	sl, #0
 801b9c8:	dd2f      	ble.n	801ba2a <_dtoa_r+0x3ca>
 801b9ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801b9ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b9d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b9d6:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b9da:	3101      	adds	r1, #1
 801b9dc:	4654      	mov	r4, sl
 801b9de:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b9e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801b9e6:	ee07 1a90 	vmov	s15, r1
 801b9ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b9ee:	eea7 5b06 	vfma.f64	d5, d7, d6
 801b9f2:	ee15 7a90 	vmov	r7, s11
 801b9f6:	ec51 0b15 	vmov	r0, r1, d5
 801b9fa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801b9fe:	2c00      	cmp	r4, #0
 801ba00:	d177      	bne.n	801baf2 <_dtoa_r+0x492>
 801ba02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ba06:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ba0a:	ec41 0b17 	vmov	d7, r0, r1
 801ba0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ba12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba16:	f300 826a 	bgt.w	801beee <_dtoa_r+0x88e>
 801ba1a:	eeb1 7b47 	vneg.f64	d7, d7
 801ba1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba26:	f100 8260 	bmi.w	801beea <_dtoa_r+0x88a>
 801ba2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ba2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba30:	2a00      	cmp	r2, #0
 801ba32:	f2c0 811d 	blt.w	801bc70 <_dtoa_r+0x610>
 801ba36:	f1bb 0f0e 	cmp.w	fp, #14
 801ba3a:	f300 8119 	bgt.w	801bc70 <_dtoa_r+0x610>
 801ba3e:	4b8a      	ldr	r3, [pc, #552]	; (801bc68 <_dtoa_r+0x608>)
 801ba40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ba44:	ed93 6b00 	vldr	d6, [r3]
 801ba48:	9b08      	ldr	r3, [sp, #32]
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	f280 80b7 	bge.w	801bbbe <_dtoa_r+0x55e>
 801ba50:	f1b9 0f00 	cmp.w	r9, #0
 801ba54:	f300 80b3 	bgt.w	801bbbe <_dtoa_r+0x55e>
 801ba58:	f040 8246 	bne.w	801bee8 <_dtoa_r+0x888>
 801ba5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ba60:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ba64:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ba68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ba6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba70:	464c      	mov	r4, r9
 801ba72:	464f      	mov	r7, r9
 801ba74:	f280 821c 	bge.w	801beb0 <_dtoa_r+0x850>
 801ba78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ba7c:	2331      	movs	r3, #49	; 0x31
 801ba7e:	f808 3b01 	strb.w	r3, [r8], #1
 801ba82:	f10b 0b01 	add.w	fp, fp, #1
 801ba86:	e218      	b.n	801beba <_dtoa_r+0x85a>
 801ba88:	2102      	movs	r1, #2
 801ba8a:	e780      	b.n	801b98e <_dtoa_r+0x32e>
 801ba8c:	07d4      	lsls	r4, r2, #31
 801ba8e:	d504      	bpl.n	801ba9a <_dtoa_r+0x43a>
 801ba90:	ed90 6b00 	vldr	d6, [r0]
 801ba94:	3101      	adds	r1, #1
 801ba96:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ba9a:	1052      	asrs	r2, r2, #1
 801ba9c:	3008      	adds	r0, #8
 801ba9e:	e777      	b.n	801b990 <_dtoa_r+0x330>
 801baa0:	d022      	beq.n	801bae8 <_dtoa_r+0x488>
 801baa2:	f1cb 0200 	rsb	r2, fp, #0
 801baa6:	4970      	ldr	r1, [pc, #448]	; (801bc68 <_dtoa_r+0x608>)
 801baa8:	f002 000f 	and.w	r0, r2, #15
 801baac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bab0:	ed91 7b00 	vldr	d7, [r1]
 801bab4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801bab8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801babc:	486b      	ldr	r0, [pc, #428]	; (801bc6c <_dtoa_r+0x60c>)
 801babe:	1112      	asrs	r2, r2, #4
 801bac0:	2400      	movs	r4, #0
 801bac2:	2102      	movs	r1, #2
 801bac4:	b92a      	cbnz	r2, 801bad2 <_dtoa_r+0x472>
 801bac6:	2c00      	cmp	r4, #0
 801bac8:	f43f af6a 	beq.w	801b9a0 <_dtoa_r+0x340>
 801bacc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bad0:	e766      	b.n	801b9a0 <_dtoa_r+0x340>
 801bad2:	07d7      	lsls	r7, r2, #31
 801bad4:	d505      	bpl.n	801bae2 <_dtoa_r+0x482>
 801bad6:	ed90 6b00 	vldr	d6, [r0]
 801bada:	3101      	adds	r1, #1
 801badc:	2401      	movs	r4, #1
 801bade:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bae2:	1052      	asrs	r2, r2, #1
 801bae4:	3008      	adds	r0, #8
 801bae6:	e7ed      	b.n	801bac4 <_dtoa_r+0x464>
 801bae8:	2102      	movs	r1, #2
 801baea:	e759      	b.n	801b9a0 <_dtoa_r+0x340>
 801baec:	465a      	mov	r2, fp
 801baee:	464c      	mov	r4, r9
 801baf0:	e775      	b.n	801b9de <_dtoa_r+0x37e>
 801baf2:	ec41 0b17 	vmov	d7, r0, r1
 801baf6:	495c      	ldr	r1, [pc, #368]	; (801bc68 <_dtoa_r+0x608>)
 801baf8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801bafc:	ed11 4b02 	vldr	d4, [r1, #-8]
 801bb00:	9901      	ldr	r1, [sp, #4]
 801bb02:	440c      	add	r4, r1
 801bb04:	9907      	ldr	r1, [sp, #28]
 801bb06:	b351      	cbz	r1, 801bb5e <_dtoa_r+0x4fe>
 801bb08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801bb0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801bb10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bb14:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801bb18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bb1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bb20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bb24:	ee14 1a90 	vmov	r1, s9
 801bb28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bb2c:	3130      	adds	r1, #48	; 0x30
 801bb2e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bb32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb3a:	f808 1b01 	strb.w	r1, [r8], #1
 801bb3e:	d439      	bmi.n	801bbb4 <_dtoa_r+0x554>
 801bb40:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bb44:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb4c:	d472      	bmi.n	801bc34 <_dtoa_r+0x5d4>
 801bb4e:	45a0      	cmp	r8, r4
 801bb50:	f43f af6b 	beq.w	801ba2a <_dtoa_r+0x3ca>
 801bb54:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bb58:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bb5c:	e7e0      	b.n	801bb20 <_dtoa_r+0x4c0>
 801bb5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bb62:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bb66:	4620      	mov	r0, r4
 801bb68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bb6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bb70:	ee14 1a90 	vmov	r1, s9
 801bb74:	3130      	adds	r1, #48	; 0x30
 801bb76:	f808 1b01 	strb.w	r1, [r8], #1
 801bb7a:	45a0      	cmp	r8, r4
 801bb7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bb80:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bb84:	d118      	bne.n	801bbb8 <_dtoa_r+0x558>
 801bb86:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801bb8a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bb8e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb96:	dc4d      	bgt.n	801bc34 <_dtoa_r+0x5d4>
 801bb98:	ee35 5b47 	vsub.f64	d5, d5, d7
 801bb9c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801bba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bba4:	f57f af41 	bpl.w	801ba2a <_dtoa_r+0x3ca>
 801bba8:	4680      	mov	r8, r0
 801bbaa:	3801      	subs	r0, #1
 801bbac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801bbb0:	2b30      	cmp	r3, #48	; 0x30
 801bbb2:	d0f9      	beq.n	801bba8 <_dtoa_r+0x548>
 801bbb4:	4693      	mov	fp, r2
 801bbb6:	e02a      	b.n	801bc0e <_dtoa_r+0x5ae>
 801bbb8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bbbc:	e7d6      	b.n	801bb6c <_dtoa_r+0x50c>
 801bbbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bbc2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801bbc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bbca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bbce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bbd2:	ee15 3a10 	vmov	r3, s10
 801bbd6:	3330      	adds	r3, #48	; 0x30
 801bbd8:	f808 3b01 	strb.w	r3, [r8], #1
 801bbdc:	9b01      	ldr	r3, [sp, #4]
 801bbde:	eba8 0303 	sub.w	r3, r8, r3
 801bbe2:	4599      	cmp	r9, r3
 801bbe4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bbe8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bbec:	d133      	bne.n	801bc56 <_dtoa_r+0x5f6>
 801bbee:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bbf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbfa:	dc1a      	bgt.n	801bc32 <_dtoa_r+0x5d2>
 801bbfc:	eeb4 7b46 	vcmp.f64	d7, d6
 801bc00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc04:	d103      	bne.n	801bc0e <_dtoa_r+0x5ae>
 801bc06:	ee15 3a10 	vmov	r3, s10
 801bc0a:	07d9      	lsls	r1, r3, #31
 801bc0c:	d411      	bmi.n	801bc32 <_dtoa_r+0x5d2>
 801bc0e:	4629      	mov	r1, r5
 801bc10:	4630      	mov	r0, r6
 801bc12:	f000 fbd1 	bl	801c3b8 <_Bfree>
 801bc16:	2300      	movs	r3, #0
 801bc18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc1a:	f888 3000 	strb.w	r3, [r8]
 801bc1e:	f10b 0301 	add.w	r3, fp, #1
 801bc22:	6013      	str	r3, [r2, #0]
 801bc24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	f43f ad69 	beq.w	801b6fe <_dtoa_r+0x9e>
 801bc2c:	f8c3 8000 	str.w	r8, [r3]
 801bc30:	e565      	b.n	801b6fe <_dtoa_r+0x9e>
 801bc32:	465a      	mov	r2, fp
 801bc34:	4643      	mov	r3, r8
 801bc36:	4698      	mov	r8, r3
 801bc38:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801bc3c:	2939      	cmp	r1, #57	; 0x39
 801bc3e:	d106      	bne.n	801bc4e <_dtoa_r+0x5ee>
 801bc40:	9901      	ldr	r1, [sp, #4]
 801bc42:	4299      	cmp	r1, r3
 801bc44:	d1f7      	bne.n	801bc36 <_dtoa_r+0x5d6>
 801bc46:	9801      	ldr	r0, [sp, #4]
 801bc48:	2130      	movs	r1, #48	; 0x30
 801bc4a:	3201      	adds	r2, #1
 801bc4c:	7001      	strb	r1, [r0, #0]
 801bc4e:	7819      	ldrb	r1, [r3, #0]
 801bc50:	3101      	adds	r1, #1
 801bc52:	7019      	strb	r1, [r3, #0]
 801bc54:	e7ae      	b.n	801bbb4 <_dtoa_r+0x554>
 801bc56:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bc5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc62:	d1b2      	bne.n	801bbca <_dtoa_r+0x56a>
 801bc64:	e7d3      	b.n	801bc0e <_dtoa_r+0x5ae>
 801bc66:	bf00      	nop
 801bc68:	08020a10 	.word	0x08020a10
 801bc6c:	080209e8 	.word	0x080209e8
 801bc70:	9907      	ldr	r1, [sp, #28]
 801bc72:	2900      	cmp	r1, #0
 801bc74:	f000 80d0 	beq.w	801be18 <_dtoa_r+0x7b8>
 801bc78:	9906      	ldr	r1, [sp, #24]
 801bc7a:	2901      	cmp	r1, #1
 801bc7c:	f300 80b4 	bgt.w	801bde8 <_dtoa_r+0x788>
 801bc80:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc82:	2900      	cmp	r1, #0
 801bc84:	f000 80ac 	beq.w	801bde0 <_dtoa_r+0x780>
 801bc88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bc8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bc90:	461c      	mov	r4, r3
 801bc92:	9309      	str	r3, [sp, #36]	; 0x24
 801bc94:	9b04      	ldr	r3, [sp, #16]
 801bc96:	4413      	add	r3, r2
 801bc98:	9304      	str	r3, [sp, #16]
 801bc9a:	9b05      	ldr	r3, [sp, #20]
 801bc9c:	2101      	movs	r1, #1
 801bc9e:	4413      	add	r3, r2
 801bca0:	4630      	mov	r0, r6
 801bca2:	9305      	str	r3, [sp, #20]
 801bca4:	f000 fc3e 	bl	801c524 <__i2b>
 801bca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcaa:	4607      	mov	r7, r0
 801bcac:	f1b8 0f00 	cmp.w	r8, #0
 801bcb0:	d00d      	beq.n	801bcce <_dtoa_r+0x66e>
 801bcb2:	9a05      	ldr	r2, [sp, #20]
 801bcb4:	2a00      	cmp	r2, #0
 801bcb6:	dd0a      	ble.n	801bcce <_dtoa_r+0x66e>
 801bcb8:	4542      	cmp	r2, r8
 801bcba:	9904      	ldr	r1, [sp, #16]
 801bcbc:	bfa8      	it	ge
 801bcbe:	4642      	movge	r2, r8
 801bcc0:	1a89      	subs	r1, r1, r2
 801bcc2:	9104      	str	r1, [sp, #16]
 801bcc4:	9905      	ldr	r1, [sp, #20]
 801bcc6:	eba8 0802 	sub.w	r8, r8, r2
 801bcca:	1a8a      	subs	r2, r1, r2
 801bccc:	9205      	str	r2, [sp, #20]
 801bcce:	b303      	cbz	r3, 801bd12 <_dtoa_r+0x6b2>
 801bcd0:	9a07      	ldr	r2, [sp, #28]
 801bcd2:	2a00      	cmp	r2, #0
 801bcd4:	f000 80a5 	beq.w	801be22 <_dtoa_r+0x7c2>
 801bcd8:	2c00      	cmp	r4, #0
 801bcda:	dd13      	ble.n	801bd04 <_dtoa_r+0x6a4>
 801bcdc:	4639      	mov	r1, r7
 801bcde:	4622      	mov	r2, r4
 801bce0:	4630      	mov	r0, r6
 801bce2:	930d      	str	r3, [sp, #52]	; 0x34
 801bce4:	f000 fcde 	bl	801c6a4 <__pow5mult>
 801bce8:	462a      	mov	r2, r5
 801bcea:	4601      	mov	r1, r0
 801bcec:	4607      	mov	r7, r0
 801bcee:	4630      	mov	r0, r6
 801bcf0:	f000 fc2e 	bl	801c550 <__multiply>
 801bcf4:	4629      	mov	r1, r5
 801bcf6:	9009      	str	r0, [sp, #36]	; 0x24
 801bcf8:	4630      	mov	r0, r6
 801bcfa:	f000 fb5d 	bl	801c3b8 <_Bfree>
 801bcfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd02:	4615      	mov	r5, r2
 801bd04:	1b1a      	subs	r2, r3, r4
 801bd06:	d004      	beq.n	801bd12 <_dtoa_r+0x6b2>
 801bd08:	4629      	mov	r1, r5
 801bd0a:	4630      	mov	r0, r6
 801bd0c:	f000 fcca 	bl	801c6a4 <__pow5mult>
 801bd10:	4605      	mov	r5, r0
 801bd12:	2101      	movs	r1, #1
 801bd14:	4630      	mov	r0, r6
 801bd16:	f000 fc05 	bl	801c524 <__i2b>
 801bd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	4604      	mov	r4, r0
 801bd20:	f340 8081 	ble.w	801be26 <_dtoa_r+0x7c6>
 801bd24:	461a      	mov	r2, r3
 801bd26:	4601      	mov	r1, r0
 801bd28:	4630      	mov	r0, r6
 801bd2a:	f000 fcbb 	bl	801c6a4 <__pow5mult>
 801bd2e:	9b06      	ldr	r3, [sp, #24]
 801bd30:	2b01      	cmp	r3, #1
 801bd32:	4604      	mov	r4, r0
 801bd34:	dd7a      	ble.n	801be2c <_dtoa_r+0x7cc>
 801bd36:	2300      	movs	r3, #0
 801bd38:	9309      	str	r3, [sp, #36]	; 0x24
 801bd3a:	6922      	ldr	r2, [r4, #16]
 801bd3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bd40:	6910      	ldr	r0, [r2, #16]
 801bd42:	f000 fba1 	bl	801c488 <__hi0bits>
 801bd46:	f1c0 0020 	rsb	r0, r0, #32
 801bd4a:	9b05      	ldr	r3, [sp, #20]
 801bd4c:	4418      	add	r0, r3
 801bd4e:	f010 001f 	ands.w	r0, r0, #31
 801bd52:	f000 8093 	beq.w	801be7c <_dtoa_r+0x81c>
 801bd56:	f1c0 0220 	rsb	r2, r0, #32
 801bd5a:	2a04      	cmp	r2, #4
 801bd5c:	f340 8085 	ble.w	801be6a <_dtoa_r+0x80a>
 801bd60:	9b04      	ldr	r3, [sp, #16]
 801bd62:	f1c0 001c 	rsb	r0, r0, #28
 801bd66:	4403      	add	r3, r0
 801bd68:	9304      	str	r3, [sp, #16]
 801bd6a:	9b05      	ldr	r3, [sp, #20]
 801bd6c:	4480      	add	r8, r0
 801bd6e:	4403      	add	r3, r0
 801bd70:	9305      	str	r3, [sp, #20]
 801bd72:	9b04      	ldr	r3, [sp, #16]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	dd05      	ble.n	801bd84 <_dtoa_r+0x724>
 801bd78:	4629      	mov	r1, r5
 801bd7a:	461a      	mov	r2, r3
 801bd7c:	4630      	mov	r0, r6
 801bd7e:	f000 fceb 	bl	801c758 <__lshift>
 801bd82:	4605      	mov	r5, r0
 801bd84:	9b05      	ldr	r3, [sp, #20]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	dd05      	ble.n	801bd96 <_dtoa_r+0x736>
 801bd8a:	4621      	mov	r1, r4
 801bd8c:	461a      	mov	r2, r3
 801bd8e:	4630      	mov	r0, r6
 801bd90:	f000 fce2 	bl	801c758 <__lshift>
 801bd94:	4604      	mov	r4, r0
 801bd96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d071      	beq.n	801be80 <_dtoa_r+0x820>
 801bd9c:	4621      	mov	r1, r4
 801bd9e:	4628      	mov	r0, r5
 801bda0:	f000 fd46 	bl	801c830 <__mcmp>
 801bda4:	2800      	cmp	r0, #0
 801bda6:	da6b      	bge.n	801be80 <_dtoa_r+0x820>
 801bda8:	2300      	movs	r3, #0
 801bdaa:	4629      	mov	r1, r5
 801bdac:	220a      	movs	r2, #10
 801bdae:	4630      	mov	r0, r6
 801bdb0:	f000 fb24 	bl	801c3fc <__multadd>
 801bdb4:	9b07      	ldr	r3, [sp, #28]
 801bdb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bdba:	4605      	mov	r5, r0
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	f000 8197 	beq.w	801c0f0 <_dtoa_r+0xa90>
 801bdc2:	4639      	mov	r1, r7
 801bdc4:	2300      	movs	r3, #0
 801bdc6:	220a      	movs	r2, #10
 801bdc8:	4630      	mov	r0, r6
 801bdca:	f000 fb17 	bl	801c3fc <__multadd>
 801bdce:	f1ba 0f00 	cmp.w	sl, #0
 801bdd2:	4607      	mov	r7, r0
 801bdd4:	f300 8093 	bgt.w	801befe <_dtoa_r+0x89e>
 801bdd8:	9b06      	ldr	r3, [sp, #24]
 801bdda:	2b02      	cmp	r3, #2
 801bddc:	dc57      	bgt.n	801be8e <_dtoa_r+0x82e>
 801bdde:	e08e      	b.n	801befe <_dtoa_r+0x89e>
 801bde0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bde2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bde6:	e751      	b.n	801bc8c <_dtoa_r+0x62c>
 801bde8:	f109 34ff 	add.w	r4, r9, #4294967295
 801bdec:	42a3      	cmp	r3, r4
 801bdee:	bfbf      	itttt	lt
 801bdf0:	1ae2      	sublt	r2, r4, r3
 801bdf2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bdf4:	189b      	addlt	r3, r3, r2
 801bdf6:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bdf8:	bfae      	itee	ge
 801bdfa:	1b1c      	subge	r4, r3, r4
 801bdfc:	4623      	movlt	r3, r4
 801bdfe:	2400      	movlt	r4, #0
 801be00:	f1b9 0f00 	cmp.w	r9, #0
 801be04:	bfb5      	itete	lt
 801be06:	9a04      	ldrlt	r2, [sp, #16]
 801be08:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801be0c:	eba2 0809 	sublt.w	r8, r2, r9
 801be10:	464a      	movge	r2, r9
 801be12:	bfb8      	it	lt
 801be14:	2200      	movlt	r2, #0
 801be16:	e73c      	b.n	801bc92 <_dtoa_r+0x632>
 801be18:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801be1c:	9f07      	ldr	r7, [sp, #28]
 801be1e:	461c      	mov	r4, r3
 801be20:	e744      	b.n	801bcac <_dtoa_r+0x64c>
 801be22:	461a      	mov	r2, r3
 801be24:	e770      	b.n	801bd08 <_dtoa_r+0x6a8>
 801be26:	9b06      	ldr	r3, [sp, #24]
 801be28:	2b01      	cmp	r3, #1
 801be2a:	dc18      	bgt.n	801be5e <_dtoa_r+0x7fe>
 801be2c:	9b02      	ldr	r3, [sp, #8]
 801be2e:	b9b3      	cbnz	r3, 801be5e <_dtoa_r+0x7fe>
 801be30:	9b03      	ldr	r3, [sp, #12]
 801be32:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801be36:	b9a2      	cbnz	r2, 801be62 <_dtoa_r+0x802>
 801be38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801be3c:	0d12      	lsrs	r2, r2, #20
 801be3e:	0512      	lsls	r2, r2, #20
 801be40:	b18a      	cbz	r2, 801be66 <_dtoa_r+0x806>
 801be42:	9b04      	ldr	r3, [sp, #16]
 801be44:	3301      	adds	r3, #1
 801be46:	9304      	str	r3, [sp, #16]
 801be48:	9b05      	ldr	r3, [sp, #20]
 801be4a:	3301      	adds	r3, #1
 801be4c:	9305      	str	r3, [sp, #20]
 801be4e:	2301      	movs	r3, #1
 801be50:	9309      	str	r3, [sp, #36]	; 0x24
 801be52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be54:	2b00      	cmp	r3, #0
 801be56:	f47f af70 	bne.w	801bd3a <_dtoa_r+0x6da>
 801be5a:	2001      	movs	r0, #1
 801be5c:	e775      	b.n	801bd4a <_dtoa_r+0x6ea>
 801be5e:	2300      	movs	r3, #0
 801be60:	e7f6      	b.n	801be50 <_dtoa_r+0x7f0>
 801be62:	9b02      	ldr	r3, [sp, #8]
 801be64:	e7f4      	b.n	801be50 <_dtoa_r+0x7f0>
 801be66:	9209      	str	r2, [sp, #36]	; 0x24
 801be68:	e7f3      	b.n	801be52 <_dtoa_r+0x7f2>
 801be6a:	d082      	beq.n	801bd72 <_dtoa_r+0x712>
 801be6c:	9b04      	ldr	r3, [sp, #16]
 801be6e:	321c      	adds	r2, #28
 801be70:	4413      	add	r3, r2
 801be72:	9304      	str	r3, [sp, #16]
 801be74:	9b05      	ldr	r3, [sp, #20]
 801be76:	4490      	add	r8, r2
 801be78:	4413      	add	r3, r2
 801be7a:	e779      	b.n	801bd70 <_dtoa_r+0x710>
 801be7c:	4602      	mov	r2, r0
 801be7e:	e7f5      	b.n	801be6c <_dtoa_r+0x80c>
 801be80:	f1b9 0f00 	cmp.w	r9, #0
 801be84:	dc36      	bgt.n	801bef4 <_dtoa_r+0x894>
 801be86:	9b06      	ldr	r3, [sp, #24]
 801be88:	2b02      	cmp	r3, #2
 801be8a:	dd33      	ble.n	801bef4 <_dtoa_r+0x894>
 801be8c:	46ca      	mov	sl, r9
 801be8e:	f1ba 0f00 	cmp.w	sl, #0
 801be92:	d10d      	bne.n	801beb0 <_dtoa_r+0x850>
 801be94:	4621      	mov	r1, r4
 801be96:	4653      	mov	r3, sl
 801be98:	2205      	movs	r2, #5
 801be9a:	4630      	mov	r0, r6
 801be9c:	f000 faae 	bl	801c3fc <__multadd>
 801bea0:	4601      	mov	r1, r0
 801bea2:	4604      	mov	r4, r0
 801bea4:	4628      	mov	r0, r5
 801bea6:	f000 fcc3 	bl	801c830 <__mcmp>
 801beaa:	2800      	cmp	r0, #0
 801beac:	f73f ade4 	bgt.w	801ba78 <_dtoa_r+0x418>
 801beb0:	9b08      	ldr	r3, [sp, #32]
 801beb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801beb6:	ea6f 0b03 	mvn.w	fp, r3
 801beba:	f04f 0900 	mov.w	r9, #0
 801bebe:	4621      	mov	r1, r4
 801bec0:	4630      	mov	r0, r6
 801bec2:	f000 fa79 	bl	801c3b8 <_Bfree>
 801bec6:	2f00      	cmp	r7, #0
 801bec8:	f43f aea1 	beq.w	801bc0e <_dtoa_r+0x5ae>
 801becc:	f1b9 0f00 	cmp.w	r9, #0
 801bed0:	d005      	beq.n	801bede <_dtoa_r+0x87e>
 801bed2:	45b9      	cmp	r9, r7
 801bed4:	d003      	beq.n	801bede <_dtoa_r+0x87e>
 801bed6:	4649      	mov	r1, r9
 801bed8:	4630      	mov	r0, r6
 801beda:	f000 fa6d 	bl	801c3b8 <_Bfree>
 801bede:	4639      	mov	r1, r7
 801bee0:	4630      	mov	r0, r6
 801bee2:	f000 fa69 	bl	801c3b8 <_Bfree>
 801bee6:	e692      	b.n	801bc0e <_dtoa_r+0x5ae>
 801bee8:	2400      	movs	r4, #0
 801beea:	4627      	mov	r7, r4
 801beec:	e7e0      	b.n	801beb0 <_dtoa_r+0x850>
 801beee:	4693      	mov	fp, r2
 801bef0:	4627      	mov	r7, r4
 801bef2:	e5c1      	b.n	801ba78 <_dtoa_r+0x418>
 801bef4:	9b07      	ldr	r3, [sp, #28]
 801bef6:	46ca      	mov	sl, r9
 801bef8:	2b00      	cmp	r3, #0
 801befa:	f000 8100 	beq.w	801c0fe <_dtoa_r+0xa9e>
 801befe:	f1b8 0f00 	cmp.w	r8, #0
 801bf02:	dd05      	ble.n	801bf10 <_dtoa_r+0x8b0>
 801bf04:	4639      	mov	r1, r7
 801bf06:	4642      	mov	r2, r8
 801bf08:	4630      	mov	r0, r6
 801bf0a:	f000 fc25 	bl	801c758 <__lshift>
 801bf0e:	4607      	mov	r7, r0
 801bf10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d05d      	beq.n	801bfd2 <_dtoa_r+0x972>
 801bf16:	6879      	ldr	r1, [r7, #4]
 801bf18:	4630      	mov	r0, r6
 801bf1a:	f000 fa0d 	bl	801c338 <_Balloc>
 801bf1e:	4680      	mov	r8, r0
 801bf20:	b928      	cbnz	r0, 801bf2e <_dtoa_r+0x8ce>
 801bf22:	4b82      	ldr	r3, [pc, #520]	; (801c12c <_dtoa_r+0xacc>)
 801bf24:	4602      	mov	r2, r0
 801bf26:	f240 21ef 	movw	r1, #751	; 0x2ef
 801bf2a:	f7ff bbb1 	b.w	801b690 <_dtoa_r+0x30>
 801bf2e:	693a      	ldr	r2, [r7, #16]
 801bf30:	3202      	adds	r2, #2
 801bf32:	0092      	lsls	r2, r2, #2
 801bf34:	f107 010c 	add.w	r1, r7, #12
 801bf38:	300c      	adds	r0, #12
 801bf3a:	f7ff fada 	bl	801b4f2 <memcpy>
 801bf3e:	2201      	movs	r2, #1
 801bf40:	4641      	mov	r1, r8
 801bf42:	4630      	mov	r0, r6
 801bf44:	f000 fc08 	bl	801c758 <__lshift>
 801bf48:	9b01      	ldr	r3, [sp, #4]
 801bf4a:	3301      	adds	r3, #1
 801bf4c:	9304      	str	r3, [sp, #16]
 801bf4e:	9b01      	ldr	r3, [sp, #4]
 801bf50:	4453      	add	r3, sl
 801bf52:	9308      	str	r3, [sp, #32]
 801bf54:	9b02      	ldr	r3, [sp, #8]
 801bf56:	f003 0301 	and.w	r3, r3, #1
 801bf5a:	46b9      	mov	r9, r7
 801bf5c:	9307      	str	r3, [sp, #28]
 801bf5e:	4607      	mov	r7, r0
 801bf60:	9b04      	ldr	r3, [sp, #16]
 801bf62:	4621      	mov	r1, r4
 801bf64:	3b01      	subs	r3, #1
 801bf66:	4628      	mov	r0, r5
 801bf68:	9302      	str	r3, [sp, #8]
 801bf6a:	f7ff faef 	bl	801b54c <quorem>
 801bf6e:	4603      	mov	r3, r0
 801bf70:	3330      	adds	r3, #48	; 0x30
 801bf72:	9005      	str	r0, [sp, #20]
 801bf74:	4649      	mov	r1, r9
 801bf76:	4628      	mov	r0, r5
 801bf78:	9309      	str	r3, [sp, #36]	; 0x24
 801bf7a:	f000 fc59 	bl	801c830 <__mcmp>
 801bf7e:	463a      	mov	r2, r7
 801bf80:	4682      	mov	sl, r0
 801bf82:	4621      	mov	r1, r4
 801bf84:	4630      	mov	r0, r6
 801bf86:	f000 fc6f 	bl	801c868 <__mdiff>
 801bf8a:	68c2      	ldr	r2, [r0, #12]
 801bf8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf8e:	4680      	mov	r8, r0
 801bf90:	bb0a      	cbnz	r2, 801bfd6 <_dtoa_r+0x976>
 801bf92:	4601      	mov	r1, r0
 801bf94:	4628      	mov	r0, r5
 801bf96:	f000 fc4b 	bl	801c830 <__mcmp>
 801bf9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf9c:	4602      	mov	r2, r0
 801bf9e:	4641      	mov	r1, r8
 801bfa0:	4630      	mov	r0, r6
 801bfa2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801bfa6:	f000 fa07 	bl	801c3b8 <_Bfree>
 801bfaa:	9b06      	ldr	r3, [sp, #24]
 801bfac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bfae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bfb2:	ea43 0102 	orr.w	r1, r3, r2
 801bfb6:	9b07      	ldr	r3, [sp, #28]
 801bfb8:	4319      	orrs	r1, r3
 801bfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfbc:	d10d      	bne.n	801bfda <_dtoa_r+0x97a>
 801bfbe:	2b39      	cmp	r3, #57	; 0x39
 801bfc0:	d029      	beq.n	801c016 <_dtoa_r+0x9b6>
 801bfc2:	f1ba 0f00 	cmp.w	sl, #0
 801bfc6:	dd01      	ble.n	801bfcc <_dtoa_r+0x96c>
 801bfc8:	9b05      	ldr	r3, [sp, #20]
 801bfca:	3331      	adds	r3, #49	; 0x31
 801bfcc:	9a02      	ldr	r2, [sp, #8]
 801bfce:	7013      	strb	r3, [r2, #0]
 801bfd0:	e775      	b.n	801bebe <_dtoa_r+0x85e>
 801bfd2:	4638      	mov	r0, r7
 801bfd4:	e7b8      	b.n	801bf48 <_dtoa_r+0x8e8>
 801bfd6:	2201      	movs	r2, #1
 801bfd8:	e7e1      	b.n	801bf9e <_dtoa_r+0x93e>
 801bfda:	f1ba 0f00 	cmp.w	sl, #0
 801bfde:	db06      	blt.n	801bfee <_dtoa_r+0x98e>
 801bfe0:	9906      	ldr	r1, [sp, #24]
 801bfe2:	ea41 0a0a 	orr.w	sl, r1, sl
 801bfe6:	9907      	ldr	r1, [sp, #28]
 801bfe8:	ea5a 0a01 	orrs.w	sl, sl, r1
 801bfec:	d120      	bne.n	801c030 <_dtoa_r+0x9d0>
 801bfee:	2a00      	cmp	r2, #0
 801bff0:	ddec      	ble.n	801bfcc <_dtoa_r+0x96c>
 801bff2:	4629      	mov	r1, r5
 801bff4:	2201      	movs	r2, #1
 801bff6:	4630      	mov	r0, r6
 801bff8:	9304      	str	r3, [sp, #16]
 801bffa:	f000 fbad 	bl	801c758 <__lshift>
 801bffe:	4621      	mov	r1, r4
 801c000:	4605      	mov	r5, r0
 801c002:	f000 fc15 	bl	801c830 <__mcmp>
 801c006:	2800      	cmp	r0, #0
 801c008:	9b04      	ldr	r3, [sp, #16]
 801c00a:	dc02      	bgt.n	801c012 <_dtoa_r+0x9b2>
 801c00c:	d1de      	bne.n	801bfcc <_dtoa_r+0x96c>
 801c00e:	07da      	lsls	r2, r3, #31
 801c010:	d5dc      	bpl.n	801bfcc <_dtoa_r+0x96c>
 801c012:	2b39      	cmp	r3, #57	; 0x39
 801c014:	d1d8      	bne.n	801bfc8 <_dtoa_r+0x968>
 801c016:	9a02      	ldr	r2, [sp, #8]
 801c018:	2339      	movs	r3, #57	; 0x39
 801c01a:	7013      	strb	r3, [r2, #0]
 801c01c:	4643      	mov	r3, r8
 801c01e:	4698      	mov	r8, r3
 801c020:	3b01      	subs	r3, #1
 801c022:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801c026:	2a39      	cmp	r2, #57	; 0x39
 801c028:	d051      	beq.n	801c0ce <_dtoa_r+0xa6e>
 801c02a:	3201      	adds	r2, #1
 801c02c:	701a      	strb	r2, [r3, #0]
 801c02e:	e746      	b.n	801bebe <_dtoa_r+0x85e>
 801c030:	2a00      	cmp	r2, #0
 801c032:	dd03      	ble.n	801c03c <_dtoa_r+0x9dc>
 801c034:	2b39      	cmp	r3, #57	; 0x39
 801c036:	d0ee      	beq.n	801c016 <_dtoa_r+0x9b6>
 801c038:	3301      	adds	r3, #1
 801c03a:	e7c7      	b.n	801bfcc <_dtoa_r+0x96c>
 801c03c:	9a04      	ldr	r2, [sp, #16]
 801c03e:	9908      	ldr	r1, [sp, #32]
 801c040:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c044:	428a      	cmp	r2, r1
 801c046:	d02b      	beq.n	801c0a0 <_dtoa_r+0xa40>
 801c048:	4629      	mov	r1, r5
 801c04a:	2300      	movs	r3, #0
 801c04c:	220a      	movs	r2, #10
 801c04e:	4630      	mov	r0, r6
 801c050:	f000 f9d4 	bl	801c3fc <__multadd>
 801c054:	45b9      	cmp	r9, r7
 801c056:	4605      	mov	r5, r0
 801c058:	f04f 0300 	mov.w	r3, #0
 801c05c:	f04f 020a 	mov.w	r2, #10
 801c060:	4649      	mov	r1, r9
 801c062:	4630      	mov	r0, r6
 801c064:	d107      	bne.n	801c076 <_dtoa_r+0xa16>
 801c066:	f000 f9c9 	bl	801c3fc <__multadd>
 801c06a:	4681      	mov	r9, r0
 801c06c:	4607      	mov	r7, r0
 801c06e:	9b04      	ldr	r3, [sp, #16]
 801c070:	3301      	adds	r3, #1
 801c072:	9304      	str	r3, [sp, #16]
 801c074:	e774      	b.n	801bf60 <_dtoa_r+0x900>
 801c076:	f000 f9c1 	bl	801c3fc <__multadd>
 801c07a:	4639      	mov	r1, r7
 801c07c:	4681      	mov	r9, r0
 801c07e:	2300      	movs	r3, #0
 801c080:	220a      	movs	r2, #10
 801c082:	4630      	mov	r0, r6
 801c084:	f000 f9ba 	bl	801c3fc <__multadd>
 801c088:	4607      	mov	r7, r0
 801c08a:	e7f0      	b.n	801c06e <_dtoa_r+0xa0e>
 801c08c:	f1ba 0f00 	cmp.w	sl, #0
 801c090:	9a01      	ldr	r2, [sp, #4]
 801c092:	bfcc      	ite	gt
 801c094:	46d0      	movgt	r8, sl
 801c096:	f04f 0801 	movle.w	r8, #1
 801c09a:	4490      	add	r8, r2
 801c09c:	f04f 0900 	mov.w	r9, #0
 801c0a0:	4629      	mov	r1, r5
 801c0a2:	2201      	movs	r2, #1
 801c0a4:	4630      	mov	r0, r6
 801c0a6:	9302      	str	r3, [sp, #8]
 801c0a8:	f000 fb56 	bl	801c758 <__lshift>
 801c0ac:	4621      	mov	r1, r4
 801c0ae:	4605      	mov	r5, r0
 801c0b0:	f000 fbbe 	bl	801c830 <__mcmp>
 801c0b4:	2800      	cmp	r0, #0
 801c0b6:	dcb1      	bgt.n	801c01c <_dtoa_r+0x9bc>
 801c0b8:	d102      	bne.n	801c0c0 <_dtoa_r+0xa60>
 801c0ba:	9b02      	ldr	r3, [sp, #8]
 801c0bc:	07db      	lsls	r3, r3, #31
 801c0be:	d4ad      	bmi.n	801c01c <_dtoa_r+0x9bc>
 801c0c0:	4643      	mov	r3, r8
 801c0c2:	4698      	mov	r8, r3
 801c0c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c0c8:	2a30      	cmp	r2, #48	; 0x30
 801c0ca:	d0fa      	beq.n	801c0c2 <_dtoa_r+0xa62>
 801c0cc:	e6f7      	b.n	801bebe <_dtoa_r+0x85e>
 801c0ce:	9a01      	ldr	r2, [sp, #4]
 801c0d0:	429a      	cmp	r2, r3
 801c0d2:	d1a4      	bne.n	801c01e <_dtoa_r+0x9be>
 801c0d4:	f10b 0b01 	add.w	fp, fp, #1
 801c0d8:	2331      	movs	r3, #49	; 0x31
 801c0da:	e778      	b.n	801bfce <_dtoa_r+0x96e>
 801c0dc:	4b14      	ldr	r3, [pc, #80]	; (801c130 <_dtoa_r+0xad0>)
 801c0de:	f7ff bb2a 	b.w	801b736 <_dtoa_r+0xd6>
 801c0e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	f47f ab05 	bne.w	801b6f4 <_dtoa_r+0x94>
 801c0ea:	4b12      	ldr	r3, [pc, #72]	; (801c134 <_dtoa_r+0xad4>)
 801c0ec:	f7ff bb23 	b.w	801b736 <_dtoa_r+0xd6>
 801c0f0:	f1ba 0f00 	cmp.w	sl, #0
 801c0f4:	dc03      	bgt.n	801c0fe <_dtoa_r+0xa9e>
 801c0f6:	9b06      	ldr	r3, [sp, #24]
 801c0f8:	2b02      	cmp	r3, #2
 801c0fa:	f73f aec8 	bgt.w	801be8e <_dtoa_r+0x82e>
 801c0fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c102:	4621      	mov	r1, r4
 801c104:	4628      	mov	r0, r5
 801c106:	f7ff fa21 	bl	801b54c <quorem>
 801c10a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c10e:	f808 3b01 	strb.w	r3, [r8], #1
 801c112:	9a01      	ldr	r2, [sp, #4]
 801c114:	eba8 0202 	sub.w	r2, r8, r2
 801c118:	4592      	cmp	sl, r2
 801c11a:	ddb7      	ble.n	801c08c <_dtoa_r+0xa2c>
 801c11c:	4629      	mov	r1, r5
 801c11e:	2300      	movs	r3, #0
 801c120:	220a      	movs	r2, #10
 801c122:	4630      	mov	r0, r6
 801c124:	f000 f96a 	bl	801c3fc <__multadd>
 801c128:	4605      	mov	r5, r0
 801c12a:	e7ea      	b.n	801c102 <_dtoa_r+0xaa2>
 801c12c:	0802097b 	.word	0x0802097b
 801c130:	080208b6 	.word	0x080208b6
 801c134:	08020916 	.word	0x08020916

0801c138 <_free_r>:
 801c138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c13a:	2900      	cmp	r1, #0
 801c13c:	d044      	beq.n	801c1c8 <_free_r+0x90>
 801c13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c142:	9001      	str	r0, [sp, #4]
 801c144:	2b00      	cmp	r3, #0
 801c146:	f1a1 0404 	sub.w	r4, r1, #4
 801c14a:	bfb8      	it	lt
 801c14c:	18e4      	addlt	r4, r4, r3
 801c14e:	f000 f8e7 	bl	801c320 <__malloc_lock>
 801c152:	4a1e      	ldr	r2, [pc, #120]	; (801c1cc <_free_r+0x94>)
 801c154:	9801      	ldr	r0, [sp, #4]
 801c156:	6813      	ldr	r3, [r2, #0]
 801c158:	b933      	cbnz	r3, 801c168 <_free_r+0x30>
 801c15a:	6063      	str	r3, [r4, #4]
 801c15c:	6014      	str	r4, [r2, #0]
 801c15e:	b003      	add	sp, #12
 801c160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c164:	f000 b8e2 	b.w	801c32c <__malloc_unlock>
 801c168:	42a3      	cmp	r3, r4
 801c16a:	d908      	bls.n	801c17e <_free_r+0x46>
 801c16c:	6825      	ldr	r5, [r4, #0]
 801c16e:	1961      	adds	r1, r4, r5
 801c170:	428b      	cmp	r3, r1
 801c172:	bf01      	itttt	eq
 801c174:	6819      	ldreq	r1, [r3, #0]
 801c176:	685b      	ldreq	r3, [r3, #4]
 801c178:	1949      	addeq	r1, r1, r5
 801c17a:	6021      	streq	r1, [r4, #0]
 801c17c:	e7ed      	b.n	801c15a <_free_r+0x22>
 801c17e:	461a      	mov	r2, r3
 801c180:	685b      	ldr	r3, [r3, #4]
 801c182:	b10b      	cbz	r3, 801c188 <_free_r+0x50>
 801c184:	42a3      	cmp	r3, r4
 801c186:	d9fa      	bls.n	801c17e <_free_r+0x46>
 801c188:	6811      	ldr	r1, [r2, #0]
 801c18a:	1855      	adds	r5, r2, r1
 801c18c:	42a5      	cmp	r5, r4
 801c18e:	d10b      	bne.n	801c1a8 <_free_r+0x70>
 801c190:	6824      	ldr	r4, [r4, #0]
 801c192:	4421      	add	r1, r4
 801c194:	1854      	adds	r4, r2, r1
 801c196:	42a3      	cmp	r3, r4
 801c198:	6011      	str	r1, [r2, #0]
 801c19a:	d1e0      	bne.n	801c15e <_free_r+0x26>
 801c19c:	681c      	ldr	r4, [r3, #0]
 801c19e:	685b      	ldr	r3, [r3, #4]
 801c1a0:	6053      	str	r3, [r2, #4]
 801c1a2:	440c      	add	r4, r1
 801c1a4:	6014      	str	r4, [r2, #0]
 801c1a6:	e7da      	b.n	801c15e <_free_r+0x26>
 801c1a8:	d902      	bls.n	801c1b0 <_free_r+0x78>
 801c1aa:	230c      	movs	r3, #12
 801c1ac:	6003      	str	r3, [r0, #0]
 801c1ae:	e7d6      	b.n	801c15e <_free_r+0x26>
 801c1b0:	6825      	ldr	r5, [r4, #0]
 801c1b2:	1961      	adds	r1, r4, r5
 801c1b4:	428b      	cmp	r3, r1
 801c1b6:	bf04      	itt	eq
 801c1b8:	6819      	ldreq	r1, [r3, #0]
 801c1ba:	685b      	ldreq	r3, [r3, #4]
 801c1bc:	6063      	str	r3, [r4, #4]
 801c1be:	bf04      	itt	eq
 801c1c0:	1949      	addeq	r1, r1, r5
 801c1c2:	6021      	streq	r1, [r4, #0]
 801c1c4:	6054      	str	r4, [r2, #4]
 801c1c6:	e7ca      	b.n	801c15e <_free_r+0x26>
 801c1c8:	b003      	add	sp, #12
 801c1ca:	bd30      	pop	{r4, r5, pc}
 801c1cc:	2000744c 	.word	0x2000744c

0801c1d0 <malloc>:
 801c1d0:	4b02      	ldr	r3, [pc, #8]	; (801c1dc <malloc+0xc>)
 801c1d2:	4601      	mov	r1, r0
 801c1d4:	6818      	ldr	r0, [r3, #0]
 801c1d6:	f000 b823 	b.w	801c220 <_malloc_r>
 801c1da:	bf00      	nop
 801c1dc:	200001c0 	.word	0x200001c0

0801c1e0 <sbrk_aligned>:
 801c1e0:	b570      	push	{r4, r5, r6, lr}
 801c1e2:	4e0e      	ldr	r6, [pc, #56]	; (801c21c <sbrk_aligned+0x3c>)
 801c1e4:	460c      	mov	r4, r1
 801c1e6:	6831      	ldr	r1, [r6, #0]
 801c1e8:	4605      	mov	r5, r0
 801c1ea:	b911      	cbnz	r1, 801c1f2 <sbrk_aligned+0x12>
 801c1ec:	f000 fea8 	bl	801cf40 <_sbrk_r>
 801c1f0:	6030      	str	r0, [r6, #0]
 801c1f2:	4621      	mov	r1, r4
 801c1f4:	4628      	mov	r0, r5
 801c1f6:	f000 fea3 	bl	801cf40 <_sbrk_r>
 801c1fa:	1c43      	adds	r3, r0, #1
 801c1fc:	d00a      	beq.n	801c214 <sbrk_aligned+0x34>
 801c1fe:	1cc4      	adds	r4, r0, #3
 801c200:	f024 0403 	bic.w	r4, r4, #3
 801c204:	42a0      	cmp	r0, r4
 801c206:	d007      	beq.n	801c218 <sbrk_aligned+0x38>
 801c208:	1a21      	subs	r1, r4, r0
 801c20a:	4628      	mov	r0, r5
 801c20c:	f000 fe98 	bl	801cf40 <_sbrk_r>
 801c210:	3001      	adds	r0, #1
 801c212:	d101      	bne.n	801c218 <sbrk_aligned+0x38>
 801c214:	f04f 34ff 	mov.w	r4, #4294967295
 801c218:	4620      	mov	r0, r4
 801c21a:	bd70      	pop	{r4, r5, r6, pc}
 801c21c:	20007450 	.word	0x20007450

0801c220 <_malloc_r>:
 801c220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c224:	1ccd      	adds	r5, r1, #3
 801c226:	f025 0503 	bic.w	r5, r5, #3
 801c22a:	3508      	adds	r5, #8
 801c22c:	2d0c      	cmp	r5, #12
 801c22e:	bf38      	it	cc
 801c230:	250c      	movcc	r5, #12
 801c232:	2d00      	cmp	r5, #0
 801c234:	4607      	mov	r7, r0
 801c236:	db01      	blt.n	801c23c <_malloc_r+0x1c>
 801c238:	42a9      	cmp	r1, r5
 801c23a:	d905      	bls.n	801c248 <_malloc_r+0x28>
 801c23c:	230c      	movs	r3, #12
 801c23e:	603b      	str	r3, [r7, #0]
 801c240:	2600      	movs	r6, #0
 801c242:	4630      	mov	r0, r6
 801c244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c248:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c31c <_malloc_r+0xfc>
 801c24c:	f000 f868 	bl	801c320 <__malloc_lock>
 801c250:	f8d8 3000 	ldr.w	r3, [r8]
 801c254:	461c      	mov	r4, r3
 801c256:	bb5c      	cbnz	r4, 801c2b0 <_malloc_r+0x90>
 801c258:	4629      	mov	r1, r5
 801c25a:	4638      	mov	r0, r7
 801c25c:	f7ff ffc0 	bl	801c1e0 <sbrk_aligned>
 801c260:	1c43      	adds	r3, r0, #1
 801c262:	4604      	mov	r4, r0
 801c264:	d155      	bne.n	801c312 <_malloc_r+0xf2>
 801c266:	f8d8 4000 	ldr.w	r4, [r8]
 801c26a:	4626      	mov	r6, r4
 801c26c:	2e00      	cmp	r6, #0
 801c26e:	d145      	bne.n	801c2fc <_malloc_r+0xdc>
 801c270:	2c00      	cmp	r4, #0
 801c272:	d048      	beq.n	801c306 <_malloc_r+0xe6>
 801c274:	6823      	ldr	r3, [r4, #0]
 801c276:	4631      	mov	r1, r6
 801c278:	4638      	mov	r0, r7
 801c27a:	eb04 0903 	add.w	r9, r4, r3
 801c27e:	f000 fe5f 	bl	801cf40 <_sbrk_r>
 801c282:	4581      	cmp	r9, r0
 801c284:	d13f      	bne.n	801c306 <_malloc_r+0xe6>
 801c286:	6821      	ldr	r1, [r4, #0]
 801c288:	1a6d      	subs	r5, r5, r1
 801c28a:	4629      	mov	r1, r5
 801c28c:	4638      	mov	r0, r7
 801c28e:	f7ff ffa7 	bl	801c1e0 <sbrk_aligned>
 801c292:	3001      	adds	r0, #1
 801c294:	d037      	beq.n	801c306 <_malloc_r+0xe6>
 801c296:	6823      	ldr	r3, [r4, #0]
 801c298:	442b      	add	r3, r5
 801c29a:	6023      	str	r3, [r4, #0]
 801c29c:	f8d8 3000 	ldr.w	r3, [r8]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d038      	beq.n	801c316 <_malloc_r+0xf6>
 801c2a4:	685a      	ldr	r2, [r3, #4]
 801c2a6:	42a2      	cmp	r2, r4
 801c2a8:	d12b      	bne.n	801c302 <_malloc_r+0xe2>
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	605a      	str	r2, [r3, #4]
 801c2ae:	e00f      	b.n	801c2d0 <_malloc_r+0xb0>
 801c2b0:	6822      	ldr	r2, [r4, #0]
 801c2b2:	1b52      	subs	r2, r2, r5
 801c2b4:	d41f      	bmi.n	801c2f6 <_malloc_r+0xd6>
 801c2b6:	2a0b      	cmp	r2, #11
 801c2b8:	d917      	bls.n	801c2ea <_malloc_r+0xca>
 801c2ba:	1961      	adds	r1, r4, r5
 801c2bc:	42a3      	cmp	r3, r4
 801c2be:	6025      	str	r5, [r4, #0]
 801c2c0:	bf18      	it	ne
 801c2c2:	6059      	strne	r1, [r3, #4]
 801c2c4:	6863      	ldr	r3, [r4, #4]
 801c2c6:	bf08      	it	eq
 801c2c8:	f8c8 1000 	streq.w	r1, [r8]
 801c2cc:	5162      	str	r2, [r4, r5]
 801c2ce:	604b      	str	r3, [r1, #4]
 801c2d0:	4638      	mov	r0, r7
 801c2d2:	f104 060b 	add.w	r6, r4, #11
 801c2d6:	f000 f829 	bl	801c32c <__malloc_unlock>
 801c2da:	f026 0607 	bic.w	r6, r6, #7
 801c2de:	1d23      	adds	r3, r4, #4
 801c2e0:	1af2      	subs	r2, r6, r3
 801c2e2:	d0ae      	beq.n	801c242 <_malloc_r+0x22>
 801c2e4:	1b9b      	subs	r3, r3, r6
 801c2e6:	50a3      	str	r3, [r4, r2]
 801c2e8:	e7ab      	b.n	801c242 <_malloc_r+0x22>
 801c2ea:	42a3      	cmp	r3, r4
 801c2ec:	6862      	ldr	r2, [r4, #4]
 801c2ee:	d1dd      	bne.n	801c2ac <_malloc_r+0x8c>
 801c2f0:	f8c8 2000 	str.w	r2, [r8]
 801c2f4:	e7ec      	b.n	801c2d0 <_malloc_r+0xb0>
 801c2f6:	4623      	mov	r3, r4
 801c2f8:	6864      	ldr	r4, [r4, #4]
 801c2fa:	e7ac      	b.n	801c256 <_malloc_r+0x36>
 801c2fc:	4634      	mov	r4, r6
 801c2fe:	6876      	ldr	r6, [r6, #4]
 801c300:	e7b4      	b.n	801c26c <_malloc_r+0x4c>
 801c302:	4613      	mov	r3, r2
 801c304:	e7cc      	b.n	801c2a0 <_malloc_r+0x80>
 801c306:	230c      	movs	r3, #12
 801c308:	603b      	str	r3, [r7, #0]
 801c30a:	4638      	mov	r0, r7
 801c30c:	f000 f80e 	bl	801c32c <__malloc_unlock>
 801c310:	e797      	b.n	801c242 <_malloc_r+0x22>
 801c312:	6025      	str	r5, [r4, #0]
 801c314:	e7dc      	b.n	801c2d0 <_malloc_r+0xb0>
 801c316:	605b      	str	r3, [r3, #4]
 801c318:	deff      	udf	#255	; 0xff
 801c31a:	bf00      	nop
 801c31c:	2000744c 	.word	0x2000744c

0801c320 <__malloc_lock>:
 801c320:	4801      	ldr	r0, [pc, #4]	; (801c328 <__malloc_lock+0x8>)
 801c322:	f7ff b8e4 	b.w	801b4ee <__retarget_lock_acquire_recursive>
 801c326:	bf00      	nop
 801c328:	20007448 	.word	0x20007448

0801c32c <__malloc_unlock>:
 801c32c:	4801      	ldr	r0, [pc, #4]	; (801c334 <__malloc_unlock+0x8>)
 801c32e:	f7ff b8df 	b.w	801b4f0 <__retarget_lock_release_recursive>
 801c332:	bf00      	nop
 801c334:	20007448 	.word	0x20007448

0801c338 <_Balloc>:
 801c338:	b570      	push	{r4, r5, r6, lr}
 801c33a:	69c6      	ldr	r6, [r0, #28]
 801c33c:	4604      	mov	r4, r0
 801c33e:	460d      	mov	r5, r1
 801c340:	b976      	cbnz	r6, 801c360 <_Balloc+0x28>
 801c342:	2010      	movs	r0, #16
 801c344:	f7ff ff44 	bl	801c1d0 <malloc>
 801c348:	4602      	mov	r2, r0
 801c34a:	61e0      	str	r0, [r4, #28]
 801c34c:	b920      	cbnz	r0, 801c358 <_Balloc+0x20>
 801c34e:	4b18      	ldr	r3, [pc, #96]	; (801c3b0 <_Balloc+0x78>)
 801c350:	4818      	ldr	r0, [pc, #96]	; (801c3b4 <_Balloc+0x7c>)
 801c352:	216b      	movs	r1, #107	; 0x6b
 801c354:	f7ff f8dc 	bl	801b510 <__assert_func>
 801c358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c35c:	6006      	str	r6, [r0, #0]
 801c35e:	60c6      	str	r6, [r0, #12]
 801c360:	69e6      	ldr	r6, [r4, #28]
 801c362:	68f3      	ldr	r3, [r6, #12]
 801c364:	b183      	cbz	r3, 801c388 <_Balloc+0x50>
 801c366:	69e3      	ldr	r3, [r4, #28]
 801c368:	68db      	ldr	r3, [r3, #12]
 801c36a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c36e:	b9b8      	cbnz	r0, 801c3a0 <_Balloc+0x68>
 801c370:	2101      	movs	r1, #1
 801c372:	fa01 f605 	lsl.w	r6, r1, r5
 801c376:	1d72      	adds	r2, r6, #5
 801c378:	0092      	lsls	r2, r2, #2
 801c37a:	4620      	mov	r0, r4
 801c37c:	f000 fdf7 	bl	801cf6e <_calloc_r>
 801c380:	b160      	cbz	r0, 801c39c <_Balloc+0x64>
 801c382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c386:	e00e      	b.n	801c3a6 <_Balloc+0x6e>
 801c388:	2221      	movs	r2, #33	; 0x21
 801c38a:	2104      	movs	r1, #4
 801c38c:	4620      	mov	r0, r4
 801c38e:	f000 fdee 	bl	801cf6e <_calloc_r>
 801c392:	69e3      	ldr	r3, [r4, #28]
 801c394:	60f0      	str	r0, [r6, #12]
 801c396:	68db      	ldr	r3, [r3, #12]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d1e4      	bne.n	801c366 <_Balloc+0x2e>
 801c39c:	2000      	movs	r0, #0
 801c39e:	bd70      	pop	{r4, r5, r6, pc}
 801c3a0:	6802      	ldr	r2, [r0, #0]
 801c3a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c3ac:	e7f7      	b.n	801c39e <_Balloc+0x66>
 801c3ae:	bf00      	nop
 801c3b0:	08020736 	.word	0x08020736
 801c3b4:	0802098c 	.word	0x0802098c

0801c3b8 <_Bfree>:
 801c3b8:	b570      	push	{r4, r5, r6, lr}
 801c3ba:	69c6      	ldr	r6, [r0, #28]
 801c3bc:	4605      	mov	r5, r0
 801c3be:	460c      	mov	r4, r1
 801c3c0:	b976      	cbnz	r6, 801c3e0 <_Bfree+0x28>
 801c3c2:	2010      	movs	r0, #16
 801c3c4:	f7ff ff04 	bl	801c1d0 <malloc>
 801c3c8:	4602      	mov	r2, r0
 801c3ca:	61e8      	str	r0, [r5, #28]
 801c3cc:	b920      	cbnz	r0, 801c3d8 <_Bfree+0x20>
 801c3ce:	4b09      	ldr	r3, [pc, #36]	; (801c3f4 <_Bfree+0x3c>)
 801c3d0:	4809      	ldr	r0, [pc, #36]	; (801c3f8 <_Bfree+0x40>)
 801c3d2:	218f      	movs	r1, #143	; 0x8f
 801c3d4:	f7ff f89c 	bl	801b510 <__assert_func>
 801c3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c3dc:	6006      	str	r6, [r0, #0]
 801c3de:	60c6      	str	r6, [r0, #12]
 801c3e0:	b13c      	cbz	r4, 801c3f2 <_Bfree+0x3a>
 801c3e2:	69eb      	ldr	r3, [r5, #28]
 801c3e4:	6862      	ldr	r2, [r4, #4]
 801c3e6:	68db      	ldr	r3, [r3, #12]
 801c3e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c3ec:	6021      	str	r1, [r4, #0]
 801c3ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c3f2:	bd70      	pop	{r4, r5, r6, pc}
 801c3f4:	08020736 	.word	0x08020736
 801c3f8:	0802098c 	.word	0x0802098c

0801c3fc <__multadd>:
 801c3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c400:	690d      	ldr	r5, [r1, #16]
 801c402:	4607      	mov	r7, r0
 801c404:	460c      	mov	r4, r1
 801c406:	461e      	mov	r6, r3
 801c408:	f101 0c14 	add.w	ip, r1, #20
 801c40c:	2000      	movs	r0, #0
 801c40e:	f8dc 3000 	ldr.w	r3, [ip]
 801c412:	b299      	uxth	r1, r3
 801c414:	fb02 6101 	mla	r1, r2, r1, r6
 801c418:	0c1e      	lsrs	r6, r3, #16
 801c41a:	0c0b      	lsrs	r3, r1, #16
 801c41c:	fb02 3306 	mla	r3, r2, r6, r3
 801c420:	b289      	uxth	r1, r1
 801c422:	3001      	adds	r0, #1
 801c424:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c428:	4285      	cmp	r5, r0
 801c42a:	f84c 1b04 	str.w	r1, [ip], #4
 801c42e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c432:	dcec      	bgt.n	801c40e <__multadd+0x12>
 801c434:	b30e      	cbz	r6, 801c47a <__multadd+0x7e>
 801c436:	68a3      	ldr	r3, [r4, #8]
 801c438:	42ab      	cmp	r3, r5
 801c43a:	dc19      	bgt.n	801c470 <__multadd+0x74>
 801c43c:	6861      	ldr	r1, [r4, #4]
 801c43e:	4638      	mov	r0, r7
 801c440:	3101      	adds	r1, #1
 801c442:	f7ff ff79 	bl	801c338 <_Balloc>
 801c446:	4680      	mov	r8, r0
 801c448:	b928      	cbnz	r0, 801c456 <__multadd+0x5a>
 801c44a:	4602      	mov	r2, r0
 801c44c:	4b0c      	ldr	r3, [pc, #48]	; (801c480 <__multadd+0x84>)
 801c44e:	480d      	ldr	r0, [pc, #52]	; (801c484 <__multadd+0x88>)
 801c450:	21ba      	movs	r1, #186	; 0xba
 801c452:	f7ff f85d 	bl	801b510 <__assert_func>
 801c456:	6922      	ldr	r2, [r4, #16]
 801c458:	3202      	adds	r2, #2
 801c45a:	f104 010c 	add.w	r1, r4, #12
 801c45e:	0092      	lsls	r2, r2, #2
 801c460:	300c      	adds	r0, #12
 801c462:	f7ff f846 	bl	801b4f2 <memcpy>
 801c466:	4621      	mov	r1, r4
 801c468:	4638      	mov	r0, r7
 801c46a:	f7ff ffa5 	bl	801c3b8 <_Bfree>
 801c46e:	4644      	mov	r4, r8
 801c470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c474:	3501      	adds	r5, #1
 801c476:	615e      	str	r6, [r3, #20]
 801c478:	6125      	str	r5, [r4, #16]
 801c47a:	4620      	mov	r0, r4
 801c47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c480:	0802097b 	.word	0x0802097b
 801c484:	0802098c 	.word	0x0802098c

0801c488 <__hi0bits>:
 801c488:	0c03      	lsrs	r3, r0, #16
 801c48a:	041b      	lsls	r3, r3, #16
 801c48c:	b9d3      	cbnz	r3, 801c4c4 <__hi0bits+0x3c>
 801c48e:	0400      	lsls	r0, r0, #16
 801c490:	2310      	movs	r3, #16
 801c492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c496:	bf04      	itt	eq
 801c498:	0200      	lsleq	r0, r0, #8
 801c49a:	3308      	addeq	r3, #8
 801c49c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c4a0:	bf04      	itt	eq
 801c4a2:	0100      	lsleq	r0, r0, #4
 801c4a4:	3304      	addeq	r3, #4
 801c4a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c4aa:	bf04      	itt	eq
 801c4ac:	0080      	lsleq	r0, r0, #2
 801c4ae:	3302      	addeq	r3, #2
 801c4b0:	2800      	cmp	r0, #0
 801c4b2:	db05      	blt.n	801c4c0 <__hi0bits+0x38>
 801c4b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c4b8:	f103 0301 	add.w	r3, r3, #1
 801c4bc:	bf08      	it	eq
 801c4be:	2320      	moveq	r3, #32
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	4770      	bx	lr
 801c4c4:	2300      	movs	r3, #0
 801c4c6:	e7e4      	b.n	801c492 <__hi0bits+0xa>

0801c4c8 <__lo0bits>:
 801c4c8:	6803      	ldr	r3, [r0, #0]
 801c4ca:	f013 0207 	ands.w	r2, r3, #7
 801c4ce:	d00c      	beq.n	801c4ea <__lo0bits+0x22>
 801c4d0:	07d9      	lsls	r1, r3, #31
 801c4d2:	d422      	bmi.n	801c51a <__lo0bits+0x52>
 801c4d4:	079a      	lsls	r2, r3, #30
 801c4d6:	bf49      	itett	mi
 801c4d8:	085b      	lsrmi	r3, r3, #1
 801c4da:	089b      	lsrpl	r3, r3, #2
 801c4dc:	6003      	strmi	r3, [r0, #0]
 801c4de:	2201      	movmi	r2, #1
 801c4e0:	bf5c      	itt	pl
 801c4e2:	6003      	strpl	r3, [r0, #0]
 801c4e4:	2202      	movpl	r2, #2
 801c4e6:	4610      	mov	r0, r2
 801c4e8:	4770      	bx	lr
 801c4ea:	b299      	uxth	r1, r3
 801c4ec:	b909      	cbnz	r1, 801c4f2 <__lo0bits+0x2a>
 801c4ee:	0c1b      	lsrs	r3, r3, #16
 801c4f0:	2210      	movs	r2, #16
 801c4f2:	b2d9      	uxtb	r1, r3
 801c4f4:	b909      	cbnz	r1, 801c4fa <__lo0bits+0x32>
 801c4f6:	3208      	adds	r2, #8
 801c4f8:	0a1b      	lsrs	r3, r3, #8
 801c4fa:	0719      	lsls	r1, r3, #28
 801c4fc:	bf04      	itt	eq
 801c4fe:	091b      	lsreq	r3, r3, #4
 801c500:	3204      	addeq	r2, #4
 801c502:	0799      	lsls	r1, r3, #30
 801c504:	bf04      	itt	eq
 801c506:	089b      	lsreq	r3, r3, #2
 801c508:	3202      	addeq	r2, #2
 801c50a:	07d9      	lsls	r1, r3, #31
 801c50c:	d403      	bmi.n	801c516 <__lo0bits+0x4e>
 801c50e:	085b      	lsrs	r3, r3, #1
 801c510:	f102 0201 	add.w	r2, r2, #1
 801c514:	d003      	beq.n	801c51e <__lo0bits+0x56>
 801c516:	6003      	str	r3, [r0, #0]
 801c518:	e7e5      	b.n	801c4e6 <__lo0bits+0x1e>
 801c51a:	2200      	movs	r2, #0
 801c51c:	e7e3      	b.n	801c4e6 <__lo0bits+0x1e>
 801c51e:	2220      	movs	r2, #32
 801c520:	e7e1      	b.n	801c4e6 <__lo0bits+0x1e>
	...

0801c524 <__i2b>:
 801c524:	b510      	push	{r4, lr}
 801c526:	460c      	mov	r4, r1
 801c528:	2101      	movs	r1, #1
 801c52a:	f7ff ff05 	bl	801c338 <_Balloc>
 801c52e:	4602      	mov	r2, r0
 801c530:	b928      	cbnz	r0, 801c53e <__i2b+0x1a>
 801c532:	4b05      	ldr	r3, [pc, #20]	; (801c548 <__i2b+0x24>)
 801c534:	4805      	ldr	r0, [pc, #20]	; (801c54c <__i2b+0x28>)
 801c536:	f240 1145 	movw	r1, #325	; 0x145
 801c53a:	f7fe ffe9 	bl	801b510 <__assert_func>
 801c53e:	2301      	movs	r3, #1
 801c540:	6144      	str	r4, [r0, #20]
 801c542:	6103      	str	r3, [r0, #16]
 801c544:	bd10      	pop	{r4, pc}
 801c546:	bf00      	nop
 801c548:	0802097b 	.word	0x0802097b
 801c54c:	0802098c 	.word	0x0802098c

0801c550 <__multiply>:
 801c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c554:	4691      	mov	r9, r2
 801c556:	690a      	ldr	r2, [r1, #16]
 801c558:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c55c:	429a      	cmp	r2, r3
 801c55e:	bfb8      	it	lt
 801c560:	460b      	movlt	r3, r1
 801c562:	460c      	mov	r4, r1
 801c564:	bfbc      	itt	lt
 801c566:	464c      	movlt	r4, r9
 801c568:	4699      	movlt	r9, r3
 801c56a:	6927      	ldr	r7, [r4, #16]
 801c56c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c570:	68a3      	ldr	r3, [r4, #8]
 801c572:	6861      	ldr	r1, [r4, #4]
 801c574:	eb07 060a 	add.w	r6, r7, sl
 801c578:	42b3      	cmp	r3, r6
 801c57a:	b085      	sub	sp, #20
 801c57c:	bfb8      	it	lt
 801c57e:	3101      	addlt	r1, #1
 801c580:	f7ff feda 	bl	801c338 <_Balloc>
 801c584:	b930      	cbnz	r0, 801c594 <__multiply+0x44>
 801c586:	4602      	mov	r2, r0
 801c588:	4b44      	ldr	r3, [pc, #272]	; (801c69c <__multiply+0x14c>)
 801c58a:	4845      	ldr	r0, [pc, #276]	; (801c6a0 <__multiply+0x150>)
 801c58c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c590:	f7fe ffbe 	bl	801b510 <__assert_func>
 801c594:	f100 0514 	add.w	r5, r0, #20
 801c598:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c59c:	462b      	mov	r3, r5
 801c59e:	2200      	movs	r2, #0
 801c5a0:	4543      	cmp	r3, r8
 801c5a2:	d321      	bcc.n	801c5e8 <__multiply+0x98>
 801c5a4:	f104 0314 	add.w	r3, r4, #20
 801c5a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c5ac:	f109 0314 	add.w	r3, r9, #20
 801c5b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c5b4:	9202      	str	r2, [sp, #8]
 801c5b6:	1b3a      	subs	r2, r7, r4
 801c5b8:	3a15      	subs	r2, #21
 801c5ba:	f022 0203 	bic.w	r2, r2, #3
 801c5be:	3204      	adds	r2, #4
 801c5c0:	f104 0115 	add.w	r1, r4, #21
 801c5c4:	428f      	cmp	r7, r1
 801c5c6:	bf38      	it	cc
 801c5c8:	2204      	movcc	r2, #4
 801c5ca:	9201      	str	r2, [sp, #4]
 801c5cc:	9a02      	ldr	r2, [sp, #8]
 801c5ce:	9303      	str	r3, [sp, #12]
 801c5d0:	429a      	cmp	r2, r3
 801c5d2:	d80c      	bhi.n	801c5ee <__multiply+0x9e>
 801c5d4:	2e00      	cmp	r6, #0
 801c5d6:	dd03      	ble.n	801c5e0 <__multiply+0x90>
 801c5d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d05b      	beq.n	801c698 <__multiply+0x148>
 801c5e0:	6106      	str	r6, [r0, #16]
 801c5e2:	b005      	add	sp, #20
 801c5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5e8:	f843 2b04 	str.w	r2, [r3], #4
 801c5ec:	e7d8      	b.n	801c5a0 <__multiply+0x50>
 801c5ee:	f8b3 a000 	ldrh.w	sl, [r3]
 801c5f2:	f1ba 0f00 	cmp.w	sl, #0
 801c5f6:	d024      	beq.n	801c642 <__multiply+0xf2>
 801c5f8:	f104 0e14 	add.w	lr, r4, #20
 801c5fc:	46a9      	mov	r9, r5
 801c5fe:	f04f 0c00 	mov.w	ip, #0
 801c602:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c606:	f8d9 1000 	ldr.w	r1, [r9]
 801c60a:	fa1f fb82 	uxth.w	fp, r2
 801c60e:	b289      	uxth	r1, r1
 801c610:	fb0a 110b 	mla	r1, sl, fp, r1
 801c614:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c618:	f8d9 2000 	ldr.w	r2, [r9]
 801c61c:	4461      	add	r1, ip
 801c61e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c622:	fb0a c20b 	mla	r2, sl, fp, ip
 801c626:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c62a:	b289      	uxth	r1, r1
 801c62c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c630:	4577      	cmp	r7, lr
 801c632:	f849 1b04 	str.w	r1, [r9], #4
 801c636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c63a:	d8e2      	bhi.n	801c602 <__multiply+0xb2>
 801c63c:	9a01      	ldr	r2, [sp, #4]
 801c63e:	f845 c002 	str.w	ip, [r5, r2]
 801c642:	9a03      	ldr	r2, [sp, #12]
 801c644:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c648:	3304      	adds	r3, #4
 801c64a:	f1b9 0f00 	cmp.w	r9, #0
 801c64e:	d021      	beq.n	801c694 <__multiply+0x144>
 801c650:	6829      	ldr	r1, [r5, #0]
 801c652:	f104 0c14 	add.w	ip, r4, #20
 801c656:	46ae      	mov	lr, r5
 801c658:	f04f 0a00 	mov.w	sl, #0
 801c65c:	f8bc b000 	ldrh.w	fp, [ip]
 801c660:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c664:	fb09 220b 	mla	r2, r9, fp, r2
 801c668:	4452      	add	r2, sl
 801c66a:	b289      	uxth	r1, r1
 801c66c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c670:	f84e 1b04 	str.w	r1, [lr], #4
 801c674:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c678:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c67c:	f8be 1000 	ldrh.w	r1, [lr]
 801c680:	fb09 110a 	mla	r1, r9, sl, r1
 801c684:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c688:	4567      	cmp	r7, ip
 801c68a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c68e:	d8e5      	bhi.n	801c65c <__multiply+0x10c>
 801c690:	9a01      	ldr	r2, [sp, #4]
 801c692:	50a9      	str	r1, [r5, r2]
 801c694:	3504      	adds	r5, #4
 801c696:	e799      	b.n	801c5cc <__multiply+0x7c>
 801c698:	3e01      	subs	r6, #1
 801c69a:	e79b      	b.n	801c5d4 <__multiply+0x84>
 801c69c:	0802097b 	.word	0x0802097b
 801c6a0:	0802098c 	.word	0x0802098c

0801c6a4 <__pow5mult>:
 801c6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6a8:	4615      	mov	r5, r2
 801c6aa:	f012 0203 	ands.w	r2, r2, #3
 801c6ae:	4606      	mov	r6, r0
 801c6b0:	460f      	mov	r7, r1
 801c6b2:	d007      	beq.n	801c6c4 <__pow5mult+0x20>
 801c6b4:	4c25      	ldr	r4, [pc, #148]	; (801c74c <__pow5mult+0xa8>)
 801c6b6:	3a01      	subs	r2, #1
 801c6b8:	2300      	movs	r3, #0
 801c6ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c6be:	f7ff fe9d 	bl	801c3fc <__multadd>
 801c6c2:	4607      	mov	r7, r0
 801c6c4:	10ad      	asrs	r5, r5, #2
 801c6c6:	d03d      	beq.n	801c744 <__pow5mult+0xa0>
 801c6c8:	69f4      	ldr	r4, [r6, #28]
 801c6ca:	b97c      	cbnz	r4, 801c6ec <__pow5mult+0x48>
 801c6cc:	2010      	movs	r0, #16
 801c6ce:	f7ff fd7f 	bl	801c1d0 <malloc>
 801c6d2:	4602      	mov	r2, r0
 801c6d4:	61f0      	str	r0, [r6, #28]
 801c6d6:	b928      	cbnz	r0, 801c6e4 <__pow5mult+0x40>
 801c6d8:	4b1d      	ldr	r3, [pc, #116]	; (801c750 <__pow5mult+0xac>)
 801c6da:	481e      	ldr	r0, [pc, #120]	; (801c754 <__pow5mult+0xb0>)
 801c6dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c6e0:	f7fe ff16 	bl	801b510 <__assert_func>
 801c6e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c6e8:	6004      	str	r4, [r0, #0]
 801c6ea:	60c4      	str	r4, [r0, #12]
 801c6ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c6f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c6f4:	b94c      	cbnz	r4, 801c70a <__pow5mult+0x66>
 801c6f6:	f240 2171 	movw	r1, #625	; 0x271
 801c6fa:	4630      	mov	r0, r6
 801c6fc:	f7ff ff12 	bl	801c524 <__i2b>
 801c700:	2300      	movs	r3, #0
 801c702:	f8c8 0008 	str.w	r0, [r8, #8]
 801c706:	4604      	mov	r4, r0
 801c708:	6003      	str	r3, [r0, #0]
 801c70a:	f04f 0900 	mov.w	r9, #0
 801c70e:	07eb      	lsls	r3, r5, #31
 801c710:	d50a      	bpl.n	801c728 <__pow5mult+0x84>
 801c712:	4639      	mov	r1, r7
 801c714:	4622      	mov	r2, r4
 801c716:	4630      	mov	r0, r6
 801c718:	f7ff ff1a 	bl	801c550 <__multiply>
 801c71c:	4639      	mov	r1, r7
 801c71e:	4680      	mov	r8, r0
 801c720:	4630      	mov	r0, r6
 801c722:	f7ff fe49 	bl	801c3b8 <_Bfree>
 801c726:	4647      	mov	r7, r8
 801c728:	106d      	asrs	r5, r5, #1
 801c72a:	d00b      	beq.n	801c744 <__pow5mult+0xa0>
 801c72c:	6820      	ldr	r0, [r4, #0]
 801c72e:	b938      	cbnz	r0, 801c740 <__pow5mult+0x9c>
 801c730:	4622      	mov	r2, r4
 801c732:	4621      	mov	r1, r4
 801c734:	4630      	mov	r0, r6
 801c736:	f7ff ff0b 	bl	801c550 <__multiply>
 801c73a:	6020      	str	r0, [r4, #0]
 801c73c:	f8c0 9000 	str.w	r9, [r0]
 801c740:	4604      	mov	r4, r0
 801c742:	e7e4      	b.n	801c70e <__pow5mult+0x6a>
 801c744:	4638      	mov	r0, r7
 801c746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c74a:	bf00      	nop
 801c74c:	08020ad8 	.word	0x08020ad8
 801c750:	08020736 	.word	0x08020736
 801c754:	0802098c 	.word	0x0802098c

0801c758 <__lshift>:
 801c758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c75c:	460c      	mov	r4, r1
 801c75e:	6849      	ldr	r1, [r1, #4]
 801c760:	6923      	ldr	r3, [r4, #16]
 801c762:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c766:	68a3      	ldr	r3, [r4, #8]
 801c768:	4607      	mov	r7, r0
 801c76a:	4691      	mov	r9, r2
 801c76c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c770:	f108 0601 	add.w	r6, r8, #1
 801c774:	42b3      	cmp	r3, r6
 801c776:	db0b      	blt.n	801c790 <__lshift+0x38>
 801c778:	4638      	mov	r0, r7
 801c77a:	f7ff fddd 	bl	801c338 <_Balloc>
 801c77e:	4605      	mov	r5, r0
 801c780:	b948      	cbnz	r0, 801c796 <__lshift+0x3e>
 801c782:	4602      	mov	r2, r0
 801c784:	4b28      	ldr	r3, [pc, #160]	; (801c828 <__lshift+0xd0>)
 801c786:	4829      	ldr	r0, [pc, #164]	; (801c82c <__lshift+0xd4>)
 801c788:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c78c:	f7fe fec0 	bl	801b510 <__assert_func>
 801c790:	3101      	adds	r1, #1
 801c792:	005b      	lsls	r3, r3, #1
 801c794:	e7ee      	b.n	801c774 <__lshift+0x1c>
 801c796:	2300      	movs	r3, #0
 801c798:	f100 0114 	add.w	r1, r0, #20
 801c79c:	f100 0210 	add.w	r2, r0, #16
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	4553      	cmp	r3, sl
 801c7a4:	db33      	blt.n	801c80e <__lshift+0xb6>
 801c7a6:	6920      	ldr	r0, [r4, #16]
 801c7a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c7ac:	f104 0314 	add.w	r3, r4, #20
 801c7b0:	f019 091f 	ands.w	r9, r9, #31
 801c7b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c7b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c7bc:	d02b      	beq.n	801c816 <__lshift+0xbe>
 801c7be:	f1c9 0e20 	rsb	lr, r9, #32
 801c7c2:	468a      	mov	sl, r1
 801c7c4:	2200      	movs	r2, #0
 801c7c6:	6818      	ldr	r0, [r3, #0]
 801c7c8:	fa00 f009 	lsl.w	r0, r0, r9
 801c7cc:	4310      	orrs	r0, r2
 801c7ce:	f84a 0b04 	str.w	r0, [sl], #4
 801c7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7d6:	459c      	cmp	ip, r3
 801c7d8:	fa22 f20e 	lsr.w	r2, r2, lr
 801c7dc:	d8f3      	bhi.n	801c7c6 <__lshift+0x6e>
 801c7de:	ebac 0304 	sub.w	r3, ip, r4
 801c7e2:	3b15      	subs	r3, #21
 801c7e4:	f023 0303 	bic.w	r3, r3, #3
 801c7e8:	3304      	adds	r3, #4
 801c7ea:	f104 0015 	add.w	r0, r4, #21
 801c7ee:	4584      	cmp	ip, r0
 801c7f0:	bf38      	it	cc
 801c7f2:	2304      	movcc	r3, #4
 801c7f4:	50ca      	str	r2, [r1, r3]
 801c7f6:	b10a      	cbz	r2, 801c7fc <__lshift+0xa4>
 801c7f8:	f108 0602 	add.w	r6, r8, #2
 801c7fc:	3e01      	subs	r6, #1
 801c7fe:	4638      	mov	r0, r7
 801c800:	612e      	str	r6, [r5, #16]
 801c802:	4621      	mov	r1, r4
 801c804:	f7ff fdd8 	bl	801c3b8 <_Bfree>
 801c808:	4628      	mov	r0, r5
 801c80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c80e:	f842 0f04 	str.w	r0, [r2, #4]!
 801c812:	3301      	adds	r3, #1
 801c814:	e7c5      	b.n	801c7a2 <__lshift+0x4a>
 801c816:	3904      	subs	r1, #4
 801c818:	f853 2b04 	ldr.w	r2, [r3], #4
 801c81c:	f841 2f04 	str.w	r2, [r1, #4]!
 801c820:	459c      	cmp	ip, r3
 801c822:	d8f9      	bhi.n	801c818 <__lshift+0xc0>
 801c824:	e7ea      	b.n	801c7fc <__lshift+0xa4>
 801c826:	bf00      	nop
 801c828:	0802097b 	.word	0x0802097b
 801c82c:	0802098c 	.word	0x0802098c

0801c830 <__mcmp>:
 801c830:	b530      	push	{r4, r5, lr}
 801c832:	6902      	ldr	r2, [r0, #16]
 801c834:	690c      	ldr	r4, [r1, #16]
 801c836:	1b12      	subs	r2, r2, r4
 801c838:	d10e      	bne.n	801c858 <__mcmp+0x28>
 801c83a:	f100 0314 	add.w	r3, r0, #20
 801c83e:	3114      	adds	r1, #20
 801c840:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c844:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c848:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c84c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c850:	42a5      	cmp	r5, r4
 801c852:	d003      	beq.n	801c85c <__mcmp+0x2c>
 801c854:	d305      	bcc.n	801c862 <__mcmp+0x32>
 801c856:	2201      	movs	r2, #1
 801c858:	4610      	mov	r0, r2
 801c85a:	bd30      	pop	{r4, r5, pc}
 801c85c:	4283      	cmp	r3, r0
 801c85e:	d3f3      	bcc.n	801c848 <__mcmp+0x18>
 801c860:	e7fa      	b.n	801c858 <__mcmp+0x28>
 801c862:	f04f 32ff 	mov.w	r2, #4294967295
 801c866:	e7f7      	b.n	801c858 <__mcmp+0x28>

0801c868 <__mdiff>:
 801c868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c86c:	460c      	mov	r4, r1
 801c86e:	4606      	mov	r6, r0
 801c870:	4611      	mov	r1, r2
 801c872:	4620      	mov	r0, r4
 801c874:	4690      	mov	r8, r2
 801c876:	f7ff ffdb 	bl	801c830 <__mcmp>
 801c87a:	1e05      	subs	r5, r0, #0
 801c87c:	d110      	bne.n	801c8a0 <__mdiff+0x38>
 801c87e:	4629      	mov	r1, r5
 801c880:	4630      	mov	r0, r6
 801c882:	f7ff fd59 	bl	801c338 <_Balloc>
 801c886:	b930      	cbnz	r0, 801c896 <__mdiff+0x2e>
 801c888:	4b3a      	ldr	r3, [pc, #232]	; (801c974 <__mdiff+0x10c>)
 801c88a:	4602      	mov	r2, r0
 801c88c:	f240 2137 	movw	r1, #567	; 0x237
 801c890:	4839      	ldr	r0, [pc, #228]	; (801c978 <__mdiff+0x110>)
 801c892:	f7fe fe3d 	bl	801b510 <__assert_func>
 801c896:	2301      	movs	r3, #1
 801c898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c89c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8a0:	bfa4      	itt	ge
 801c8a2:	4643      	movge	r3, r8
 801c8a4:	46a0      	movge	r8, r4
 801c8a6:	4630      	mov	r0, r6
 801c8a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c8ac:	bfa6      	itte	ge
 801c8ae:	461c      	movge	r4, r3
 801c8b0:	2500      	movge	r5, #0
 801c8b2:	2501      	movlt	r5, #1
 801c8b4:	f7ff fd40 	bl	801c338 <_Balloc>
 801c8b8:	b920      	cbnz	r0, 801c8c4 <__mdiff+0x5c>
 801c8ba:	4b2e      	ldr	r3, [pc, #184]	; (801c974 <__mdiff+0x10c>)
 801c8bc:	4602      	mov	r2, r0
 801c8be:	f240 2145 	movw	r1, #581	; 0x245
 801c8c2:	e7e5      	b.n	801c890 <__mdiff+0x28>
 801c8c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c8c8:	6926      	ldr	r6, [r4, #16]
 801c8ca:	60c5      	str	r5, [r0, #12]
 801c8cc:	f104 0914 	add.w	r9, r4, #20
 801c8d0:	f108 0514 	add.w	r5, r8, #20
 801c8d4:	f100 0e14 	add.w	lr, r0, #20
 801c8d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c8dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c8e0:	f108 0210 	add.w	r2, r8, #16
 801c8e4:	46f2      	mov	sl, lr
 801c8e6:	2100      	movs	r1, #0
 801c8e8:	f859 3b04 	ldr.w	r3, [r9], #4
 801c8ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c8f0:	fa11 f88b 	uxtah	r8, r1, fp
 801c8f4:	b299      	uxth	r1, r3
 801c8f6:	0c1b      	lsrs	r3, r3, #16
 801c8f8:	eba8 0801 	sub.w	r8, r8, r1
 801c8fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c900:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c904:	fa1f f888 	uxth.w	r8, r8
 801c908:	1419      	asrs	r1, r3, #16
 801c90a:	454e      	cmp	r6, r9
 801c90c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c910:	f84a 3b04 	str.w	r3, [sl], #4
 801c914:	d8e8      	bhi.n	801c8e8 <__mdiff+0x80>
 801c916:	1b33      	subs	r3, r6, r4
 801c918:	3b15      	subs	r3, #21
 801c91a:	f023 0303 	bic.w	r3, r3, #3
 801c91e:	3304      	adds	r3, #4
 801c920:	3415      	adds	r4, #21
 801c922:	42a6      	cmp	r6, r4
 801c924:	bf38      	it	cc
 801c926:	2304      	movcc	r3, #4
 801c928:	441d      	add	r5, r3
 801c92a:	4473      	add	r3, lr
 801c92c:	469e      	mov	lr, r3
 801c92e:	462e      	mov	r6, r5
 801c930:	4566      	cmp	r6, ip
 801c932:	d30e      	bcc.n	801c952 <__mdiff+0xea>
 801c934:	f10c 0203 	add.w	r2, ip, #3
 801c938:	1b52      	subs	r2, r2, r5
 801c93a:	f022 0203 	bic.w	r2, r2, #3
 801c93e:	3d03      	subs	r5, #3
 801c940:	45ac      	cmp	ip, r5
 801c942:	bf38      	it	cc
 801c944:	2200      	movcc	r2, #0
 801c946:	4413      	add	r3, r2
 801c948:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c94c:	b17a      	cbz	r2, 801c96e <__mdiff+0x106>
 801c94e:	6107      	str	r7, [r0, #16]
 801c950:	e7a4      	b.n	801c89c <__mdiff+0x34>
 801c952:	f856 8b04 	ldr.w	r8, [r6], #4
 801c956:	fa11 f288 	uxtah	r2, r1, r8
 801c95a:	1414      	asrs	r4, r2, #16
 801c95c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c960:	b292      	uxth	r2, r2
 801c962:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c966:	f84e 2b04 	str.w	r2, [lr], #4
 801c96a:	1421      	asrs	r1, r4, #16
 801c96c:	e7e0      	b.n	801c930 <__mdiff+0xc8>
 801c96e:	3f01      	subs	r7, #1
 801c970:	e7ea      	b.n	801c948 <__mdiff+0xe0>
 801c972:	bf00      	nop
 801c974:	0802097b 	.word	0x0802097b
 801c978:	0802098c 	.word	0x0802098c

0801c97c <__d2b>:
 801c97c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c980:	460f      	mov	r7, r1
 801c982:	2101      	movs	r1, #1
 801c984:	ec59 8b10 	vmov	r8, r9, d0
 801c988:	4616      	mov	r6, r2
 801c98a:	f7ff fcd5 	bl	801c338 <_Balloc>
 801c98e:	4604      	mov	r4, r0
 801c990:	b930      	cbnz	r0, 801c9a0 <__d2b+0x24>
 801c992:	4602      	mov	r2, r0
 801c994:	4b24      	ldr	r3, [pc, #144]	; (801ca28 <__d2b+0xac>)
 801c996:	4825      	ldr	r0, [pc, #148]	; (801ca2c <__d2b+0xb0>)
 801c998:	f240 310f 	movw	r1, #783	; 0x30f
 801c99c:	f7fe fdb8 	bl	801b510 <__assert_func>
 801c9a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c9a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c9a8:	bb2d      	cbnz	r5, 801c9f6 <__d2b+0x7a>
 801c9aa:	9301      	str	r3, [sp, #4]
 801c9ac:	f1b8 0300 	subs.w	r3, r8, #0
 801c9b0:	d026      	beq.n	801ca00 <__d2b+0x84>
 801c9b2:	4668      	mov	r0, sp
 801c9b4:	9300      	str	r3, [sp, #0]
 801c9b6:	f7ff fd87 	bl	801c4c8 <__lo0bits>
 801c9ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c9be:	b1e8      	cbz	r0, 801c9fc <__d2b+0x80>
 801c9c0:	f1c0 0320 	rsb	r3, r0, #32
 801c9c4:	fa02 f303 	lsl.w	r3, r2, r3
 801c9c8:	430b      	orrs	r3, r1
 801c9ca:	40c2      	lsrs	r2, r0
 801c9cc:	6163      	str	r3, [r4, #20]
 801c9ce:	9201      	str	r2, [sp, #4]
 801c9d0:	9b01      	ldr	r3, [sp, #4]
 801c9d2:	61a3      	str	r3, [r4, #24]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	bf14      	ite	ne
 801c9d8:	2202      	movne	r2, #2
 801c9da:	2201      	moveq	r2, #1
 801c9dc:	6122      	str	r2, [r4, #16]
 801c9de:	b1bd      	cbz	r5, 801ca10 <__d2b+0x94>
 801c9e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c9e4:	4405      	add	r5, r0
 801c9e6:	603d      	str	r5, [r7, #0]
 801c9e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c9ec:	6030      	str	r0, [r6, #0]
 801c9ee:	4620      	mov	r0, r4
 801c9f0:	b003      	add	sp, #12
 801c9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c9f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c9fa:	e7d6      	b.n	801c9aa <__d2b+0x2e>
 801c9fc:	6161      	str	r1, [r4, #20]
 801c9fe:	e7e7      	b.n	801c9d0 <__d2b+0x54>
 801ca00:	a801      	add	r0, sp, #4
 801ca02:	f7ff fd61 	bl	801c4c8 <__lo0bits>
 801ca06:	9b01      	ldr	r3, [sp, #4]
 801ca08:	6163      	str	r3, [r4, #20]
 801ca0a:	3020      	adds	r0, #32
 801ca0c:	2201      	movs	r2, #1
 801ca0e:	e7e5      	b.n	801c9dc <__d2b+0x60>
 801ca10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ca14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ca18:	6038      	str	r0, [r7, #0]
 801ca1a:	6918      	ldr	r0, [r3, #16]
 801ca1c:	f7ff fd34 	bl	801c488 <__hi0bits>
 801ca20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ca24:	e7e2      	b.n	801c9ec <__d2b+0x70>
 801ca26:	bf00      	nop
 801ca28:	0802097b 	.word	0x0802097b
 801ca2c:	0802098c 	.word	0x0802098c

0801ca30 <__sfputc_r>:
 801ca30:	6893      	ldr	r3, [r2, #8]
 801ca32:	3b01      	subs	r3, #1
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	b410      	push	{r4}
 801ca38:	6093      	str	r3, [r2, #8]
 801ca3a:	da08      	bge.n	801ca4e <__sfputc_r+0x1e>
 801ca3c:	6994      	ldr	r4, [r2, #24]
 801ca3e:	42a3      	cmp	r3, r4
 801ca40:	db01      	blt.n	801ca46 <__sfputc_r+0x16>
 801ca42:	290a      	cmp	r1, #10
 801ca44:	d103      	bne.n	801ca4e <__sfputc_r+0x1e>
 801ca46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca4a:	f7fe bc22 	b.w	801b292 <__swbuf_r>
 801ca4e:	6813      	ldr	r3, [r2, #0]
 801ca50:	1c58      	adds	r0, r3, #1
 801ca52:	6010      	str	r0, [r2, #0]
 801ca54:	7019      	strb	r1, [r3, #0]
 801ca56:	4608      	mov	r0, r1
 801ca58:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca5c:	4770      	bx	lr

0801ca5e <__sfputs_r>:
 801ca5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca60:	4606      	mov	r6, r0
 801ca62:	460f      	mov	r7, r1
 801ca64:	4614      	mov	r4, r2
 801ca66:	18d5      	adds	r5, r2, r3
 801ca68:	42ac      	cmp	r4, r5
 801ca6a:	d101      	bne.n	801ca70 <__sfputs_r+0x12>
 801ca6c:	2000      	movs	r0, #0
 801ca6e:	e007      	b.n	801ca80 <__sfputs_r+0x22>
 801ca70:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca74:	463a      	mov	r2, r7
 801ca76:	4630      	mov	r0, r6
 801ca78:	f7ff ffda 	bl	801ca30 <__sfputc_r>
 801ca7c:	1c43      	adds	r3, r0, #1
 801ca7e:	d1f3      	bne.n	801ca68 <__sfputs_r+0xa>
 801ca80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ca84 <_vfiprintf_r>:
 801ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca88:	460d      	mov	r5, r1
 801ca8a:	b09d      	sub	sp, #116	; 0x74
 801ca8c:	4614      	mov	r4, r2
 801ca8e:	4698      	mov	r8, r3
 801ca90:	4606      	mov	r6, r0
 801ca92:	b118      	cbz	r0, 801ca9c <_vfiprintf_r+0x18>
 801ca94:	6a03      	ldr	r3, [r0, #32]
 801ca96:	b90b      	cbnz	r3, 801ca9c <_vfiprintf_r+0x18>
 801ca98:	f7fe fb14 	bl	801b0c4 <__sinit>
 801ca9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca9e:	07d9      	lsls	r1, r3, #31
 801caa0:	d405      	bmi.n	801caae <_vfiprintf_r+0x2a>
 801caa2:	89ab      	ldrh	r3, [r5, #12]
 801caa4:	059a      	lsls	r2, r3, #22
 801caa6:	d402      	bmi.n	801caae <_vfiprintf_r+0x2a>
 801caa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801caaa:	f7fe fd20 	bl	801b4ee <__retarget_lock_acquire_recursive>
 801caae:	89ab      	ldrh	r3, [r5, #12]
 801cab0:	071b      	lsls	r3, r3, #28
 801cab2:	d501      	bpl.n	801cab8 <_vfiprintf_r+0x34>
 801cab4:	692b      	ldr	r3, [r5, #16]
 801cab6:	b99b      	cbnz	r3, 801cae0 <_vfiprintf_r+0x5c>
 801cab8:	4629      	mov	r1, r5
 801caba:	4630      	mov	r0, r6
 801cabc:	f7fe fc26 	bl	801b30c <__swsetup_r>
 801cac0:	b170      	cbz	r0, 801cae0 <_vfiprintf_r+0x5c>
 801cac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cac4:	07dc      	lsls	r4, r3, #31
 801cac6:	d504      	bpl.n	801cad2 <_vfiprintf_r+0x4e>
 801cac8:	f04f 30ff 	mov.w	r0, #4294967295
 801cacc:	b01d      	add	sp, #116	; 0x74
 801cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cad2:	89ab      	ldrh	r3, [r5, #12]
 801cad4:	0598      	lsls	r0, r3, #22
 801cad6:	d4f7      	bmi.n	801cac8 <_vfiprintf_r+0x44>
 801cad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cada:	f7fe fd09 	bl	801b4f0 <__retarget_lock_release_recursive>
 801cade:	e7f3      	b.n	801cac8 <_vfiprintf_r+0x44>
 801cae0:	2300      	movs	r3, #0
 801cae2:	9309      	str	r3, [sp, #36]	; 0x24
 801cae4:	2320      	movs	r3, #32
 801cae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801caea:	f8cd 800c 	str.w	r8, [sp, #12]
 801caee:	2330      	movs	r3, #48	; 0x30
 801caf0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801cca4 <_vfiprintf_r+0x220>
 801caf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801caf8:	f04f 0901 	mov.w	r9, #1
 801cafc:	4623      	mov	r3, r4
 801cafe:	469a      	mov	sl, r3
 801cb00:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb04:	b10a      	cbz	r2, 801cb0a <_vfiprintf_r+0x86>
 801cb06:	2a25      	cmp	r2, #37	; 0x25
 801cb08:	d1f9      	bne.n	801cafe <_vfiprintf_r+0x7a>
 801cb0a:	ebba 0b04 	subs.w	fp, sl, r4
 801cb0e:	d00b      	beq.n	801cb28 <_vfiprintf_r+0xa4>
 801cb10:	465b      	mov	r3, fp
 801cb12:	4622      	mov	r2, r4
 801cb14:	4629      	mov	r1, r5
 801cb16:	4630      	mov	r0, r6
 801cb18:	f7ff ffa1 	bl	801ca5e <__sfputs_r>
 801cb1c:	3001      	adds	r0, #1
 801cb1e:	f000 80a9 	beq.w	801cc74 <_vfiprintf_r+0x1f0>
 801cb22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb24:	445a      	add	r2, fp
 801cb26:	9209      	str	r2, [sp, #36]	; 0x24
 801cb28:	f89a 3000 	ldrb.w	r3, [sl]
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	f000 80a1 	beq.w	801cc74 <_vfiprintf_r+0x1f0>
 801cb32:	2300      	movs	r3, #0
 801cb34:	f04f 32ff 	mov.w	r2, #4294967295
 801cb38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cb3c:	f10a 0a01 	add.w	sl, sl, #1
 801cb40:	9304      	str	r3, [sp, #16]
 801cb42:	9307      	str	r3, [sp, #28]
 801cb44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cb48:	931a      	str	r3, [sp, #104]	; 0x68
 801cb4a:	4654      	mov	r4, sl
 801cb4c:	2205      	movs	r2, #5
 801cb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb52:	4854      	ldr	r0, [pc, #336]	; (801cca4 <_vfiprintf_r+0x220>)
 801cb54:	f7e5 f97c 	bl	8001e50 <memchr>
 801cb58:	9a04      	ldr	r2, [sp, #16]
 801cb5a:	b9d8      	cbnz	r0, 801cb94 <_vfiprintf_r+0x110>
 801cb5c:	06d1      	lsls	r1, r2, #27
 801cb5e:	bf44      	itt	mi
 801cb60:	2320      	movmi	r3, #32
 801cb62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cb66:	0713      	lsls	r3, r2, #28
 801cb68:	bf44      	itt	mi
 801cb6a:	232b      	movmi	r3, #43	; 0x2b
 801cb6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cb70:	f89a 3000 	ldrb.w	r3, [sl]
 801cb74:	2b2a      	cmp	r3, #42	; 0x2a
 801cb76:	d015      	beq.n	801cba4 <_vfiprintf_r+0x120>
 801cb78:	9a07      	ldr	r2, [sp, #28]
 801cb7a:	4654      	mov	r4, sl
 801cb7c:	2000      	movs	r0, #0
 801cb7e:	f04f 0c0a 	mov.w	ip, #10
 801cb82:	4621      	mov	r1, r4
 801cb84:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cb88:	3b30      	subs	r3, #48	; 0x30
 801cb8a:	2b09      	cmp	r3, #9
 801cb8c:	d94d      	bls.n	801cc2a <_vfiprintf_r+0x1a6>
 801cb8e:	b1b0      	cbz	r0, 801cbbe <_vfiprintf_r+0x13a>
 801cb90:	9207      	str	r2, [sp, #28]
 801cb92:	e014      	b.n	801cbbe <_vfiprintf_r+0x13a>
 801cb94:	eba0 0308 	sub.w	r3, r0, r8
 801cb98:	fa09 f303 	lsl.w	r3, r9, r3
 801cb9c:	4313      	orrs	r3, r2
 801cb9e:	9304      	str	r3, [sp, #16]
 801cba0:	46a2      	mov	sl, r4
 801cba2:	e7d2      	b.n	801cb4a <_vfiprintf_r+0xc6>
 801cba4:	9b03      	ldr	r3, [sp, #12]
 801cba6:	1d19      	adds	r1, r3, #4
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	9103      	str	r1, [sp, #12]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	bfbb      	ittet	lt
 801cbb0:	425b      	neglt	r3, r3
 801cbb2:	f042 0202 	orrlt.w	r2, r2, #2
 801cbb6:	9307      	strge	r3, [sp, #28]
 801cbb8:	9307      	strlt	r3, [sp, #28]
 801cbba:	bfb8      	it	lt
 801cbbc:	9204      	strlt	r2, [sp, #16]
 801cbbe:	7823      	ldrb	r3, [r4, #0]
 801cbc0:	2b2e      	cmp	r3, #46	; 0x2e
 801cbc2:	d10c      	bne.n	801cbde <_vfiprintf_r+0x15a>
 801cbc4:	7863      	ldrb	r3, [r4, #1]
 801cbc6:	2b2a      	cmp	r3, #42	; 0x2a
 801cbc8:	d134      	bne.n	801cc34 <_vfiprintf_r+0x1b0>
 801cbca:	9b03      	ldr	r3, [sp, #12]
 801cbcc:	1d1a      	adds	r2, r3, #4
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	9203      	str	r2, [sp, #12]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	bfb8      	it	lt
 801cbd6:	f04f 33ff 	movlt.w	r3, #4294967295
 801cbda:	3402      	adds	r4, #2
 801cbdc:	9305      	str	r3, [sp, #20]
 801cbde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ccb4 <_vfiprintf_r+0x230>
 801cbe2:	7821      	ldrb	r1, [r4, #0]
 801cbe4:	2203      	movs	r2, #3
 801cbe6:	4650      	mov	r0, sl
 801cbe8:	f7e5 f932 	bl	8001e50 <memchr>
 801cbec:	b138      	cbz	r0, 801cbfe <_vfiprintf_r+0x17a>
 801cbee:	9b04      	ldr	r3, [sp, #16]
 801cbf0:	eba0 000a 	sub.w	r0, r0, sl
 801cbf4:	2240      	movs	r2, #64	; 0x40
 801cbf6:	4082      	lsls	r2, r0
 801cbf8:	4313      	orrs	r3, r2
 801cbfa:	3401      	adds	r4, #1
 801cbfc:	9304      	str	r3, [sp, #16]
 801cbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc02:	4829      	ldr	r0, [pc, #164]	; (801cca8 <_vfiprintf_r+0x224>)
 801cc04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cc08:	2206      	movs	r2, #6
 801cc0a:	f7e5 f921 	bl	8001e50 <memchr>
 801cc0e:	2800      	cmp	r0, #0
 801cc10:	d03f      	beq.n	801cc92 <_vfiprintf_r+0x20e>
 801cc12:	4b26      	ldr	r3, [pc, #152]	; (801ccac <_vfiprintf_r+0x228>)
 801cc14:	bb1b      	cbnz	r3, 801cc5e <_vfiprintf_r+0x1da>
 801cc16:	9b03      	ldr	r3, [sp, #12]
 801cc18:	3307      	adds	r3, #7
 801cc1a:	f023 0307 	bic.w	r3, r3, #7
 801cc1e:	3308      	adds	r3, #8
 801cc20:	9303      	str	r3, [sp, #12]
 801cc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc24:	443b      	add	r3, r7
 801cc26:	9309      	str	r3, [sp, #36]	; 0x24
 801cc28:	e768      	b.n	801cafc <_vfiprintf_r+0x78>
 801cc2a:	fb0c 3202 	mla	r2, ip, r2, r3
 801cc2e:	460c      	mov	r4, r1
 801cc30:	2001      	movs	r0, #1
 801cc32:	e7a6      	b.n	801cb82 <_vfiprintf_r+0xfe>
 801cc34:	2300      	movs	r3, #0
 801cc36:	3401      	adds	r4, #1
 801cc38:	9305      	str	r3, [sp, #20]
 801cc3a:	4619      	mov	r1, r3
 801cc3c:	f04f 0c0a 	mov.w	ip, #10
 801cc40:	4620      	mov	r0, r4
 801cc42:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cc46:	3a30      	subs	r2, #48	; 0x30
 801cc48:	2a09      	cmp	r2, #9
 801cc4a:	d903      	bls.n	801cc54 <_vfiprintf_r+0x1d0>
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d0c6      	beq.n	801cbde <_vfiprintf_r+0x15a>
 801cc50:	9105      	str	r1, [sp, #20]
 801cc52:	e7c4      	b.n	801cbde <_vfiprintf_r+0x15a>
 801cc54:	fb0c 2101 	mla	r1, ip, r1, r2
 801cc58:	4604      	mov	r4, r0
 801cc5a:	2301      	movs	r3, #1
 801cc5c:	e7f0      	b.n	801cc40 <_vfiprintf_r+0x1bc>
 801cc5e:	ab03      	add	r3, sp, #12
 801cc60:	9300      	str	r3, [sp, #0]
 801cc62:	462a      	mov	r2, r5
 801cc64:	4b12      	ldr	r3, [pc, #72]	; (801ccb0 <_vfiprintf_r+0x22c>)
 801cc66:	a904      	add	r1, sp, #16
 801cc68:	4630      	mov	r0, r6
 801cc6a:	f7fd fdf5 	bl	801a858 <_printf_float>
 801cc6e:	4607      	mov	r7, r0
 801cc70:	1c78      	adds	r0, r7, #1
 801cc72:	d1d6      	bne.n	801cc22 <_vfiprintf_r+0x19e>
 801cc74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cc76:	07d9      	lsls	r1, r3, #31
 801cc78:	d405      	bmi.n	801cc86 <_vfiprintf_r+0x202>
 801cc7a:	89ab      	ldrh	r3, [r5, #12]
 801cc7c:	059a      	lsls	r2, r3, #22
 801cc7e:	d402      	bmi.n	801cc86 <_vfiprintf_r+0x202>
 801cc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cc82:	f7fe fc35 	bl	801b4f0 <__retarget_lock_release_recursive>
 801cc86:	89ab      	ldrh	r3, [r5, #12]
 801cc88:	065b      	lsls	r3, r3, #25
 801cc8a:	f53f af1d 	bmi.w	801cac8 <_vfiprintf_r+0x44>
 801cc8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cc90:	e71c      	b.n	801cacc <_vfiprintf_r+0x48>
 801cc92:	ab03      	add	r3, sp, #12
 801cc94:	9300      	str	r3, [sp, #0]
 801cc96:	462a      	mov	r2, r5
 801cc98:	4b05      	ldr	r3, [pc, #20]	; (801ccb0 <_vfiprintf_r+0x22c>)
 801cc9a:	a904      	add	r1, sp, #16
 801cc9c:	4630      	mov	r0, r6
 801cc9e:	f7fe f863 	bl	801ad68 <_printf_i>
 801cca2:	e7e4      	b.n	801cc6e <_vfiprintf_r+0x1ea>
 801cca4:	08020ae4 	.word	0x08020ae4
 801cca8:	08020aee 	.word	0x08020aee
 801ccac:	0801a859 	.word	0x0801a859
 801ccb0:	0801ca5f 	.word	0x0801ca5f
 801ccb4:	08020aea 	.word	0x08020aea

0801ccb8 <__sflush_r>:
 801ccb8:	898a      	ldrh	r2, [r1, #12]
 801ccba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccbe:	4605      	mov	r5, r0
 801ccc0:	0710      	lsls	r0, r2, #28
 801ccc2:	460c      	mov	r4, r1
 801ccc4:	d458      	bmi.n	801cd78 <__sflush_r+0xc0>
 801ccc6:	684b      	ldr	r3, [r1, #4]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	dc05      	bgt.n	801ccd8 <__sflush_r+0x20>
 801cccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	dc02      	bgt.n	801ccd8 <__sflush_r+0x20>
 801ccd2:	2000      	movs	r0, #0
 801ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ccda:	2e00      	cmp	r6, #0
 801ccdc:	d0f9      	beq.n	801ccd2 <__sflush_r+0x1a>
 801ccde:	2300      	movs	r3, #0
 801cce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cce4:	682f      	ldr	r7, [r5, #0]
 801cce6:	6a21      	ldr	r1, [r4, #32]
 801cce8:	602b      	str	r3, [r5, #0]
 801ccea:	d032      	beq.n	801cd52 <__sflush_r+0x9a>
 801ccec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ccee:	89a3      	ldrh	r3, [r4, #12]
 801ccf0:	075a      	lsls	r2, r3, #29
 801ccf2:	d505      	bpl.n	801cd00 <__sflush_r+0x48>
 801ccf4:	6863      	ldr	r3, [r4, #4]
 801ccf6:	1ac0      	subs	r0, r0, r3
 801ccf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ccfa:	b10b      	cbz	r3, 801cd00 <__sflush_r+0x48>
 801ccfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ccfe:	1ac0      	subs	r0, r0, r3
 801cd00:	2300      	movs	r3, #0
 801cd02:	4602      	mov	r2, r0
 801cd04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd06:	6a21      	ldr	r1, [r4, #32]
 801cd08:	4628      	mov	r0, r5
 801cd0a:	47b0      	blx	r6
 801cd0c:	1c43      	adds	r3, r0, #1
 801cd0e:	89a3      	ldrh	r3, [r4, #12]
 801cd10:	d106      	bne.n	801cd20 <__sflush_r+0x68>
 801cd12:	6829      	ldr	r1, [r5, #0]
 801cd14:	291d      	cmp	r1, #29
 801cd16:	d82b      	bhi.n	801cd70 <__sflush_r+0xb8>
 801cd18:	4a29      	ldr	r2, [pc, #164]	; (801cdc0 <__sflush_r+0x108>)
 801cd1a:	410a      	asrs	r2, r1
 801cd1c:	07d6      	lsls	r6, r2, #31
 801cd1e:	d427      	bmi.n	801cd70 <__sflush_r+0xb8>
 801cd20:	2200      	movs	r2, #0
 801cd22:	6062      	str	r2, [r4, #4]
 801cd24:	04d9      	lsls	r1, r3, #19
 801cd26:	6922      	ldr	r2, [r4, #16]
 801cd28:	6022      	str	r2, [r4, #0]
 801cd2a:	d504      	bpl.n	801cd36 <__sflush_r+0x7e>
 801cd2c:	1c42      	adds	r2, r0, #1
 801cd2e:	d101      	bne.n	801cd34 <__sflush_r+0x7c>
 801cd30:	682b      	ldr	r3, [r5, #0]
 801cd32:	b903      	cbnz	r3, 801cd36 <__sflush_r+0x7e>
 801cd34:	6560      	str	r0, [r4, #84]	; 0x54
 801cd36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cd38:	602f      	str	r7, [r5, #0]
 801cd3a:	2900      	cmp	r1, #0
 801cd3c:	d0c9      	beq.n	801ccd2 <__sflush_r+0x1a>
 801cd3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cd42:	4299      	cmp	r1, r3
 801cd44:	d002      	beq.n	801cd4c <__sflush_r+0x94>
 801cd46:	4628      	mov	r0, r5
 801cd48:	f7ff f9f6 	bl	801c138 <_free_r>
 801cd4c:	2000      	movs	r0, #0
 801cd4e:	6360      	str	r0, [r4, #52]	; 0x34
 801cd50:	e7c0      	b.n	801ccd4 <__sflush_r+0x1c>
 801cd52:	2301      	movs	r3, #1
 801cd54:	4628      	mov	r0, r5
 801cd56:	47b0      	blx	r6
 801cd58:	1c41      	adds	r1, r0, #1
 801cd5a:	d1c8      	bne.n	801ccee <__sflush_r+0x36>
 801cd5c:	682b      	ldr	r3, [r5, #0]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d0c5      	beq.n	801ccee <__sflush_r+0x36>
 801cd62:	2b1d      	cmp	r3, #29
 801cd64:	d001      	beq.n	801cd6a <__sflush_r+0xb2>
 801cd66:	2b16      	cmp	r3, #22
 801cd68:	d101      	bne.n	801cd6e <__sflush_r+0xb6>
 801cd6a:	602f      	str	r7, [r5, #0]
 801cd6c:	e7b1      	b.n	801ccd2 <__sflush_r+0x1a>
 801cd6e:	89a3      	ldrh	r3, [r4, #12]
 801cd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd74:	81a3      	strh	r3, [r4, #12]
 801cd76:	e7ad      	b.n	801ccd4 <__sflush_r+0x1c>
 801cd78:	690f      	ldr	r7, [r1, #16]
 801cd7a:	2f00      	cmp	r7, #0
 801cd7c:	d0a9      	beq.n	801ccd2 <__sflush_r+0x1a>
 801cd7e:	0793      	lsls	r3, r2, #30
 801cd80:	680e      	ldr	r6, [r1, #0]
 801cd82:	bf08      	it	eq
 801cd84:	694b      	ldreq	r3, [r1, #20]
 801cd86:	600f      	str	r7, [r1, #0]
 801cd88:	bf18      	it	ne
 801cd8a:	2300      	movne	r3, #0
 801cd8c:	eba6 0807 	sub.w	r8, r6, r7
 801cd90:	608b      	str	r3, [r1, #8]
 801cd92:	f1b8 0f00 	cmp.w	r8, #0
 801cd96:	dd9c      	ble.n	801ccd2 <__sflush_r+0x1a>
 801cd98:	6a21      	ldr	r1, [r4, #32]
 801cd9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cd9c:	4643      	mov	r3, r8
 801cd9e:	463a      	mov	r2, r7
 801cda0:	4628      	mov	r0, r5
 801cda2:	47b0      	blx	r6
 801cda4:	2800      	cmp	r0, #0
 801cda6:	dc06      	bgt.n	801cdb6 <__sflush_r+0xfe>
 801cda8:	89a3      	ldrh	r3, [r4, #12]
 801cdaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cdae:	81a3      	strh	r3, [r4, #12]
 801cdb0:	f04f 30ff 	mov.w	r0, #4294967295
 801cdb4:	e78e      	b.n	801ccd4 <__sflush_r+0x1c>
 801cdb6:	4407      	add	r7, r0
 801cdb8:	eba8 0800 	sub.w	r8, r8, r0
 801cdbc:	e7e9      	b.n	801cd92 <__sflush_r+0xda>
 801cdbe:	bf00      	nop
 801cdc0:	dfbffffe 	.word	0xdfbffffe

0801cdc4 <_fflush_r>:
 801cdc4:	b538      	push	{r3, r4, r5, lr}
 801cdc6:	690b      	ldr	r3, [r1, #16]
 801cdc8:	4605      	mov	r5, r0
 801cdca:	460c      	mov	r4, r1
 801cdcc:	b913      	cbnz	r3, 801cdd4 <_fflush_r+0x10>
 801cdce:	2500      	movs	r5, #0
 801cdd0:	4628      	mov	r0, r5
 801cdd2:	bd38      	pop	{r3, r4, r5, pc}
 801cdd4:	b118      	cbz	r0, 801cdde <_fflush_r+0x1a>
 801cdd6:	6a03      	ldr	r3, [r0, #32]
 801cdd8:	b90b      	cbnz	r3, 801cdde <_fflush_r+0x1a>
 801cdda:	f7fe f973 	bl	801b0c4 <__sinit>
 801cdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d0f3      	beq.n	801cdce <_fflush_r+0xa>
 801cde6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cde8:	07d0      	lsls	r0, r2, #31
 801cdea:	d404      	bmi.n	801cdf6 <_fflush_r+0x32>
 801cdec:	0599      	lsls	r1, r3, #22
 801cdee:	d402      	bmi.n	801cdf6 <_fflush_r+0x32>
 801cdf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cdf2:	f7fe fb7c 	bl	801b4ee <__retarget_lock_acquire_recursive>
 801cdf6:	4628      	mov	r0, r5
 801cdf8:	4621      	mov	r1, r4
 801cdfa:	f7ff ff5d 	bl	801ccb8 <__sflush_r>
 801cdfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ce00:	07da      	lsls	r2, r3, #31
 801ce02:	4605      	mov	r5, r0
 801ce04:	d4e4      	bmi.n	801cdd0 <_fflush_r+0xc>
 801ce06:	89a3      	ldrh	r3, [r4, #12]
 801ce08:	059b      	lsls	r3, r3, #22
 801ce0a:	d4e1      	bmi.n	801cdd0 <_fflush_r+0xc>
 801ce0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce0e:	f7fe fb6f 	bl	801b4f0 <__retarget_lock_release_recursive>
 801ce12:	e7dd      	b.n	801cdd0 <_fflush_r+0xc>

0801ce14 <fiprintf>:
 801ce14:	b40e      	push	{r1, r2, r3}
 801ce16:	b503      	push	{r0, r1, lr}
 801ce18:	4601      	mov	r1, r0
 801ce1a:	ab03      	add	r3, sp, #12
 801ce1c:	4805      	ldr	r0, [pc, #20]	; (801ce34 <fiprintf+0x20>)
 801ce1e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce22:	6800      	ldr	r0, [r0, #0]
 801ce24:	9301      	str	r3, [sp, #4]
 801ce26:	f7ff fe2d 	bl	801ca84 <_vfiprintf_r>
 801ce2a:	b002      	add	sp, #8
 801ce2c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce30:	b003      	add	sp, #12
 801ce32:	4770      	bx	lr
 801ce34:	200001c0 	.word	0x200001c0

0801ce38 <__swhatbuf_r>:
 801ce38:	b570      	push	{r4, r5, r6, lr}
 801ce3a:	460c      	mov	r4, r1
 801ce3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce40:	2900      	cmp	r1, #0
 801ce42:	b096      	sub	sp, #88	; 0x58
 801ce44:	4615      	mov	r5, r2
 801ce46:	461e      	mov	r6, r3
 801ce48:	da0d      	bge.n	801ce66 <__swhatbuf_r+0x2e>
 801ce4a:	89a3      	ldrh	r3, [r4, #12]
 801ce4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ce50:	f04f 0100 	mov.w	r1, #0
 801ce54:	bf0c      	ite	eq
 801ce56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ce5a:	2340      	movne	r3, #64	; 0x40
 801ce5c:	2000      	movs	r0, #0
 801ce5e:	6031      	str	r1, [r6, #0]
 801ce60:	602b      	str	r3, [r5, #0]
 801ce62:	b016      	add	sp, #88	; 0x58
 801ce64:	bd70      	pop	{r4, r5, r6, pc}
 801ce66:	466a      	mov	r2, sp
 801ce68:	f000 f848 	bl	801cefc <_fstat_r>
 801ce6c:	2800      	cmp	r0, #0
 801ce6e:	dbec      	blt.n	801ce4a <__swhatbuf_r+0x12>
 801ce70:	9901      	ldr	r1, [sp, #4]
 801ce72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801ce76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ce7a:	4259      	negs	r1, r3
 801ce7c:	4159      	adcs	r1, r3
 801ce7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce82:	e7eb      	b.n	801ce5c <__swhatbuf_r+0x24>

0801ce84 <__smakebuf_r>:
 801ce84:	898b      	ldrh	r3, [r1, #12]
 801ce86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ce88:	079d      	lsls	r5, r3, #30
 801ce8a:	4606      	mov	r6, r0
 801ce8c:	460c      	mov	r4, r1
 801ce8e:	d507      	bpl.n	801cea0 <__smakebuf_r+0x1c>
 801ce90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ce94:	6023      	str	r3, [r4, #0]
 801ce96:	6123      	str	r3, [r4, #16]
 801ce98:	2301      	movs	r3, #1
 801ce9a:	6163      	str	r3, [r4, #20]
 801ce9c:	b002      	add	sp, #8
 801ce9e:	bd70      	pop	{r4, r5, r6, pc}
 801cea0:	ab01      	add	r3, sp, #4
 801cea2:	466a      	mov	r2, sp
 801cea4:	f7ff ffc8 	bl	801ce38 <__swhatbuf_r>
 801cea8:	9900      	ldr	r1, [sp, #0]
 801ceaa:	4605      	mov	r5, r0
 801ceac:	4630      	mov	r0, r6
 801ceae:	f7ff f9b7 	bl	801c220 <_malloc_r>
 801ceb2:	b948      	cbnz	r0, 801cec8 <__smakebuf_r+0x44>
 801ceb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ceb8:	059a      	lsls	r2, r3, #22
 801ceba:	d4ef      	bmi.n	801ce9c <__smakebuf_r+0x18>
 801cebc:	f023 0303 	bic.w	r3, r3, #3
 801cec0:	f043 0302 	orr.w	r3, r3, #2
 801cec4:	81a3      	strh	r3, [r4, #12]
 801cec6:	e7e3      	b.n	801ce90 <__smakebuf_r+0xc>
 801cec8:	89a3      	ldrh	r3, [r4, #12]
 801ceca:	6020      	str	r0, [r4, #0]
 801cecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ced0:	81a3      	strh	r3, [r4, #12]
 801ced2:	9b00      	ldr	r3, [sp, #0]
 801ced4:	6163      	str	r3, [r4, #20]
 801ced6:	9b01      	ldr	r3, [sp, #4]
 801ced8:	6120      	str	r0, [r4, #16]
 801ceda:	b15b      	cbz	r3, 801cef4 <__smakebuf_r+0x70>
 801cedc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cee0:	4630      	mov	r0, r6
 801cee2:	f000 f81d 	bl	801cf20 <_isatty_r>
 801cee6:	b128      	cbz	r0, 801cef4 <__smakebuf_r+0x70>
 801cee8:	89a3      	ldrh	r3, [r4, #12]
 801ceea:	f023 0303 	bic.w	r3, r3, #3
 801ceee:	f043 0301 	orr.w	r3, r3, #1
 801cef2:	81a3      	strh	r3, [r4, #12]
 801cef4:	89a3      	ldrh	r3, [r4, #12]
 801cef6:	431d      	orrs	r5, r3
 801cef8:	81a5      	strh	r5, [r4, #12]
 801cefa:	e7cf      	b.n	801ce9c <__smakebuf_r+0x18>

0801cefc <_fstat_r>:
 801cefc:	b538      	push	{r3, r4, r5, lr}
 801cefe:	4d07      	ldr	r5, [pc, #28]	; (801cf1c <_fstat_r+0x20>)
 801cf00:	2300      	movs	r3, #0
 801cf02:	4604      	mov	r4, r0
 801cf04:	4608      	mov	r0, r1
 801cf06:	4611      	mov	r1, r2
 801cf08:	602b      	str	r3, [r5, #0]
 801cf0a:	f7e6 fd70 	bl	80039ee <_fstat>
 801cf0e:	1c43      	adds	r3, r0, #1
 801cf10:	d102      	bne.n	801cf18 <_fstat_r+0x1c>
 801cf12:	682b      	ldr	r3, [r5, #0]
 801cf14:	b103      	cbz	r3, 801cf18 <_fstat_r+0x1c>
 801cf16:	6023      	str	r3, [r4, #0]
 801cf18:	bd38      	pop	{r3, r4, r5, pc}
 801cf1a:	bf00      	nop
 801cf1c:	20007444 	.word	0x20007444

0801cf20 <_isatty_r>:
 801cf20:	b538      	push	{r3, r4, r5, lr}
 801cf22:	4d06      	ldr	r5, [pc, #24]	; (801cf3c <_isatty_r+0x1c>)
 801cf24:	2300      	movs	r3, #0
 801cf26:	4604      	mov	r4, r0
 801cf28:	4608      	mov	r0, r1
 801cf2a:	602b      	str	r3, [r5, #0]
 801cf2c:	f7e6 fd6f 	bl	8003a0e <_isatty>
 801cf30:	1c43      	adds	r3, r0, #1
 801cf32:	d102      	bne.n	801cf3a <_isatty_r+0x1a>
 801cf34:	682b      	ldr	r3, [r5, #0]
 801cf36:	b103      	cbz	r3, 801cf3a <_isatty_r+0x1a>
 801cf38:	6023      	str	r3, [r4, #0]
 801cf3a:	bd38      	pop	{r3, r4, r5, pc}
 801cf3c:	20007444 	.word	0x20007444

0801cf40 <_sbrk_r>:
 801cf40:	b538      	push	{r3, r4, r5, lr}
 801cf42:	4d06      	ldr	r5, [pc, #24]	; (801cf5c <_sbrk_r+0x1c>)
 801cf44:	2300      	movs	r3, #0
 801cf46:	4604      	mov	r4, r0
 801cf48:	4608      	mov	r0, r1
 801cf4a:	602b      	str	r3, [r5, #0]
 801cf4c:	f7e6 fd78 	bl	8003a40 <_sbrk>
 801cf50:	1c43      	adds	r3, r0, #1
 801cf52:	d102      	bne.n	801cf5a <_sbrk_r+0x1a>
 801cf54:	682b      	ldr	r3, [r5, #0]
 801cf56:	b103      	cbz	r3, 801cf5a <_sbrk_r+0x1a>
 801cf58:	6023      	str	r3, [r4, #0]
 801cf5a:	bd38      	pop	{r3, r4, r5, pc}
 801cf5c:	20007444 	.word	0x20007444

0801cf60 <abort>:
 801cf60:	b508      	push	{r3, lr}
 801cf62:	2006      	movs	r0, #6
 801cf64:	f000 f860 	bl	801d028 <raise>
 801cf68:	2001      	movs	r0, #1
 801cf6a:	f7e6 fcf1 	bl	8003950 <_exit>

0801cf6e <_calloc_r>:
 801cf6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf70:	fba1 2402 	umull	r2, r4, r1, r2
 801cf74:	b94c      	cbnz	r4, 801cf8a <_calloc_r+0x1c>
 801cf76:	4611      	mov	r1, r2
 801cf78:	9201      	str	r2, [sp, #4]
 801cf7a:	f7ff f951 	bl	801c220 <_malloc_r>
 801cf7e:	9a01      	ldr	r2, [sp, #4]
 801cf80:	4605      	mov	r5, r0
 801cf82:	b930      	cbnz	r0, 801cf92 <_calloc_r+0x24>
 801cf84:	4628      	mov	r0, r5
 801cf86:	b003      	add	sp, #12
 801cf88:	bd30      	pop	{r4, r5, pc}
 801cf8a:	220c      	movs	r2, #12
 801cf8c:	6002      	str	r2, [r0, #0]
 801cf8e:	2500      	movs	r5, #0
 801cf90:	e7f8      	b.n	801cf84 <_calloc_r+0x16>
 801cf92:	4621      	mov	r1, r4
 801cf94:	f7fe fa22 	bl	801b3dc <memset>
 801cf98:	e7f4      	b.n	801cf84 <_calloc_r+0x16>

0801cf9a <__ascii_mbtowc>:
 801cf9a:	b082      	sub	sp, #8
 801cf9c:	b901      	cbnz	r1, 801cfa0 <__ascii_mbtowc+0x6>
 801cf9e:	a901      	add	r1, sp, #4
 801cfa0:	b142      	cbz	r2, 801cfb4 <__ascii_mbtowc+0x1a>
 801cfa2:	b14b      	cbz	r3, 801cfb8 <__ascii_mbtowc+0x1e>
 801cfa4:	7813      	ldrb	r3, [r2, #0]
 801cfa6:	600b      	str	r3, [r1, #0]
 801cfa8:	7812      	ldrb	r2, [r2, #0]
 801cfaa:	1e10      	subs	r0, r2, #0
 801cfac:	bf18      	it	ne
 801cfae:	2001      	movne	r0, #1
 801cfb0:	b002      	add	sp, #8
 801cfb2:	4770      	bx	lr
 801cfb4:	4610      	mov	r0, r2
 801cfb6:	e7fb      	b.n	801cfb0 <__ascii_mbtowc+0x16>
 801cfb8:	f06f 0001 	mvn.w	r0, #1
 801cfbc:	e7f8      	b.n	801cfb0 <__ascii_mbtowc+0x16>

0801cfbe <__ascii_wctomb>:
 801cfbe:	b149      	cbz	r1, 801cfd4 <__ascii_wctomb+0x16>
 801cfc0:	2aff      	cmp	r2, #255	; 0xff
 801cfc2:	bf85      	ittet	hi
 801cfc4:	238a      	movhi	r3, #138	; 0x8a
 801cfc6:	6003      	strhi	r3, [r0, #0]
 801cfc8:	700a      	strbls	r2, [r1, #0]
 801cfca:	f04f 30ff 	movhi.w	r0, #4294967295
 801cfce:	bf98      	it	ls
 801cfd0:	2001      	movls	r0, #1
 801cfd2:	4770      	bx	lr
 801cfd4:	4608      	mov	r0, r1
 801cfd6:	4770      	bx	lr

0801cfd8 <_raise_r>:
 801cfd8:	291f      	cmp	r1, #31
 801cfda:	b538      	push	{r3, r4, r5, lr}
 801cfdc:	4604      	mov	r4, r0
 801cfde:	460d      	mov	r5, r1
 801cfe0:	d904      	bls.n	801cfec <_raise_r+0x14>
 801cfe2:	2316      	movs	r3, #22
 801cfe4:	6003      	str	r3, [r0, #0]
 801cfe6:	f04f 30ff 	mov.w	r0, #4294967295
 801cfea:	bd38      	pop	{r3, r4, r5, pc}
 801cfec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801cfee:	b112      	cbz	r2, 801cff6 <_raise_r+0x1e>
 801cff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cff4:	b94b      	cbnz	r3, 801d00a <_raise_r+0x32>
 801cff6:	4620      	mov	r0, r4
 801cff8:	f000 f830 	bl	801d05c <_getpid_r>
 801cffc:	462a      	mov	r2, r5
 801cffe:	4601      	mov	r1, r0
 801d000:	4620      	mov	r0, r4
 801d002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d006:	f000 b817 	b.w	801d038 <_kill_r>
 801d00a:	2b01      	cmp	r3, #1
 801d00c:	d00a      	beq.n	801d024 <_raise_r+0x4c>
 801d00e:	1c59      	adds	r1, r3, #1
 801d010:	d103      	bne.n	801d01a <_raise_r+0x42>
 801d012:	2316      	movs	r3, #22
 801d014:	6003      	str	r3, [r0, #0]
 801d016:	2001      	movs	r0, #1
 801d018:	e7e7      	b.n	801cfea <_raise_r+0x12>
 801d01a:	2400      	movs	r4, #0
 801d01c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d020:	4628      	mov	r0, r5
 801d022:	4798      	blx	r3
 801d024:	2000      	movs	r0, #0
 801d026:	e7e0      	b.n	801cfea <_raise_r+0x12>

0801d028 <raise>:
 801d028:	4b02      	ldr	r3, [pc, #8]	; (801d034 <raise+0xc>)
 801d02a:	4601      	mov	r1, r0
 801d02c:	6818      	ldr	r0, [r3, #0]
 801d02e:	f7ff bfd3 	b.w	801cfd8 <_raise_r>
 801d032:	bf00      	nop
 801d034:	200001c0 	.word	0x200001c0

0801d038 <_kill_r>:
 801d038:	b538      	push	{r3, r4, r5, lr}
 801d03a:	4d07      	ldr	r5, [pc, #28]	; (801d058 <_kill_r+0x20>)
 801d03c:	2300      	movs	r3, #0
 801d03e:	4604      	mov	r4, r0
 801d040:	4608      	mov	r0, r1
 801d042:	4611      	mov	r1, r2
 801d044:	602b      	str	r3, [r5, #0]
 801d046:	f7e6 fc71 	bl	800392c <_kill>
 801d04a:	1c43      	adds	r3, r0, #1
 801d04c:	d102      	bne.n	801d054 <_kill_r+0x1c>
 801d04e:	682b      	ldr	r3, [r5, #0]
 801d050:	b103      	cbz	r3, 801d054 <_kill_r+0x1c>
 801d052:	6023      	str	r3, [r4, #0]
 801d054:	bd38      	pop	{r3, r4, r5, pc}
 801d056:	bf00      	nop
 801d058:	20007444 	.word	0x20007444

0801d05c <_getpid_r>:
 801d05c:	f7e6 bc5e 	b.w	800391c <_getpid>

0801d060 <_init>:
 801d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d062:	bf00      	nop
 801d064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d066:	bc08      	pop	{r3}
 801d068:	469e      	mov	lr, r3
 801d06a:	4770      	bx	lr

0801d06c <_fini>:
 801d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d06e:	bf00      	nop
 801d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d072:	bc08      	pop	{r3}
 801d074:	469e      	mov	lr, r3
 801d076:	4770      	bx	lr

0801d078 <__init_ldc_comms_veneer>:
 801d078:	f85f f000 	ldr.w	pc, [pc]	; 801d07c <__init_ldc_comms_veneer+0x4>
 801d07c:	00000001 	.word	0x00000001

0801d080 <__timer_delay_veneer>:
 801d080:	f85f f000 	ldr.w	pc, [pc]	; 801d084 <__timer_delay_veneer+0x4>
 801d084:	000018ad 	.word	0x000018ad

0801d088 <__start_pop_veneer>:
 801d088:	f85f f000 	ldr.w	pc, [pc]	; 801d08c <__start_pop_veneer+0x4>
 801d08c:	0000199d 	.word	0x0000199d

0801d090 <__start_timer_veneer>:
 801d090:	f85f f000 	ldr.w	pc, [pc]	; 801d094 <__start_timer_veneer+0x4>
 801d094:	00001835 	.word	0x00001835

0801d098 <__MW_update_veneer>:
 801d098:	f85f f000 	ldr.w	pc, [pc]	; 801d09c <__MW_update_veneer+0x4>
 801d09c:	0000138d 	.word	0x0000138d

0801d0a0 <__check_timer_veneer>:
 801d0a0:	f85f f000 	ldr.w	pc, [pc]	; 801d0a4 <__check_timer_veneer+0x4>
 801d0a4:	00001895 	.word	0x00001895

0801d0a8 <__calc_fixed_time_MW_sweep_veneer>:
 801d0a8:	f85f f000 	ldr.w	pc, [pc]	; 801d0ac <__calc_fixed_time_MW_sweep_veneer+0x4>
 801d0ac:	00000df9 	.word	0x00000df9

0801d0b0 <__stop_timer_veneer>:
 801d0b0:	f85f f000 	ldr.w	pc, [pc]	; 801d0b4 <__stop_timer_veneer+0x4>
 801d0b4:	00001871 	.word	0x00001871

0801d0b8 <__start_POP_calibration_veneer>:
 801d0b8:	f85f f000 	ldr.w	pc, [pc]	; 801d0bc <__start_POP_calibration_veneer+0x4>
 801d0bc:	00001271 	.word	0x00001271

0801d0c0 <__stop_pop_veneer>:
 801d0c0:	f85f f000 	ldr.w	pc, [pc]	; 801d0c4 <__stop_pop_veneer+0x4>
 801d0c4:	000019f9 	.word	0x000019f9
