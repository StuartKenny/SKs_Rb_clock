
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000f40  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019bd0  080011e0  080011e0  000211e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000402e8  2**0
                  CONTENTS
  4 .rodata       000035b8  0801adb0  0801adb0  0003adb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801e368  0801e368  0003e368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801e370  0801e370  0003e370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e374  0801e374  0003e374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0801e378  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  20000228  0801e5a0  00040228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  20000288  0801e600  00040288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007fb8  200002e8  0801e660  000402e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200082a0  0801e660  000482a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040316  2**0
                  CONTENTS, READONLY
 15 .debug_info   000389c5  00000000  00000000  00040359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000748d  00000000  00000000  00078d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002980  00000000  00000000  000801b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002100  00000000  00000000  00082b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00011b73  00000000  00000000  00084c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00040463  00000000  00000000  000967a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a920b  00000000  00000000  000d6c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000bf10  00000000  00000000  0027fe14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  0028bd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
   0:	b580      	push	{r7, lr}
   2:	b08a      	sub	sp, #40	; 0x28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
   a:	607a      	str	r2, [r7, #4]
   c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
   e:	2300      	movs	r3, #0
  10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
  12:	68fb      	ldr	r3, [r7, #12]
  14:	021a      	lsls	r2, r3, #8
  16:	68bb      	ldr	r3, [r7, #8]
  18:	00db      	lsls	r3, r3, #3
  1a:	4313      	orrs	r3, r2
  1c:	687a      	ldr	r2, [r7, #4]
  1e:	4313      	orrs	r3, r2
  20:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  22:	2200      	movs	r2, #0
  24:	f44f 7180 	mov.w	r1, #256	; 0x100
  28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
  2a:	f000 ff7d 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
  2e:	2200      	movs	r2, #0
  30:	f44f 6100 	mov.w	r1, #2048	; 0x800
  34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
  36:	f000 ff77 	bl	f28 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  3a:	2300      	movs	r3, #0
  3c:	623b      	str	r3, [r7, #32]
  3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
  40:	2220      	movs	r2, #32
  42:	6a3b      	ldr	r3, [r7, #32]
  44:	1ad3      	subs	r3, r2, r3
  46:	3b01      	subs	r3, #1
  48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
  4a:	2201      	movs	r2, #1
  4c:	697b      	ldr	r3, [r7, #20]
  4e:	fa02 f303 	lsl.w	r3, r2, r3
  52:	461a      	mov	r2, r3
  54:	69fb      	ldr	r3, [r7, #28]
  56:	4013      	ands	r3, r2
  58:	2b00      	cmp	r3, #0
  5a:	bf14      	ite	ne
  5c:	2301      	movne	r3, #1
  5e:	2300      	moveq	r3, #0
  60:	b2db      	uxtb	r3, r3
  62:	461a      	mov	r2, r3
  64:	f44f 7100 	mov.w	r1, #512	; 0x200
  68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
  6a:	f000 ff5d 	bl	f28 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
  6e:	2201      	movs	r2, #1
  70:	f44f 7180 	mov.w	r1, #256	; 0x100
  74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
  76:	f000 ff57 	bl	f28 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  7a:	2200      	movs	r2, #0
  7c:	f44f 7180 	mov.w	r1, #256	; 0x100
  80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
  82:	f000 ff51 	bl	f28 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
  86:	f44f 6180 	mov.w	r1, #1024	; 0x400
  8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
  8c:	f000 ff40 	bl	f10 <__HAL_GPIO_ReadPin_veneer>
  90:	4603      	mov	r3, r0
  92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
  94:	2220      	movs	r2, #32
  96:	6a3b      	ldr	r3, [r7, #32]
  98:	1ad3      	subs	r3, r2, r3
  9a:	3b01      	subs	r3, #1
  9c:	fa01 f303 	lsl.w	r3, r1, r3
  a0:	461a      	mov	r2, r3
		read_data = read_data
  a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  a4:	4313      	orrs	r3, r2
  a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  a8:	6a3b      	ldr	r3, [r7, #32]
  aa:	3301      	adds	r3, #1
  ac:	623b      	str	r3, [r7, #32]
  ae:	2220      	movs	r2, #32
  b0:	6a3b      	ldr	r3, [r7, #32]
  b2:	4293      	cmp	r3, r2
  b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
  b6:	2201      	movs	r2, #1
  b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
  be:	f000 ff33 	bl	f28 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
  c2:	78fb      	ldrb	r3, [r7, #3]
  c4:	2b00      	cmp	r3, #0
  c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
  c8:	68b8      	ldr	r0, [r7, #8]
  ca:	f000 f813 	bl	f4 <synth_readreg>
  ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
  d0:	69ba      	ldr	r2, [r7, #24]
  d2:	68fb      	ldr	r3, [r7, #12]
  d4:	429a      	cmp	r2, r3
  d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
  d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
  da:	f000 ff2d 	bl	f38 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
  de:	f000 ff0f 	bl	f00 <__Error_Handler_veneer>
		}
	}

	return read_data;
  e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  e4:	4618      	mov	r0, r3
  e6:	3728      	adds	r7, #40	; 0x28
  e8:	46bd      	mov	sp, r7
  ea:	bd80      	pop	{r7, pc}
  ec:	58020800 	.word	0x58020800
  f0:	0801b000 	.word	0x0801b000

000000f4 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
  f4:	b580      	push	{r7, lr}
  f6:	b084      	sub	sp, #16
  f8:	af00      	add	r7, sp, #0
  fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
  fc:	2300      	movs	r3, #0
  fe:	2200      	movs	r2, #0
 100:	2100      	movs	r1, #0
 102:	6878      	ldr	r0, [r7, #4]
 104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
 108:	2300      	movs	r3, #0
 10a:	2200      	movs	r2, #0
 10c:	2100      	movs	r1, #0
 10e:	6878      	ldr	r0, [r7, #4]
 110:	f7ff ff76 	bl	0 <synth_writereg>
 114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 116:	68fb      	ldr	r3, [r7, #12]
 118:	0a1b      	lsrs	r3, r3, #8

}
 11a:	4618      	mov	r0, r3
 11c:	3710      	adds	r7, #16
 11e:	46bd      	mov	sp, r7
 120:	bd80      	pop	{r7, pc}

00000122 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
 122:	b580      	push	{r7, lr}
 124:	b084      	sub	sp, #16
 126:	af00      	add	r7, sp, #0
 128:	4603      	mov	r3, r0
 12a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 12c:	79fb      	ldrb	r3, [r7, #7]
 12e:	2b03      	cmp	r3, #3
 130:	d904      	bls.n	13c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 132:	4811      	ldr	r0, [pc, #68]	; (178 <set_MW_power+0x56>)
 134:	f000 ff00 	bl	f38 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 138:	f000 fee2 	bl	f00 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 13c:	2016      	movs	r0, #22
 13e:	f7ff ffd9 	bl	f4 <synth_readreg>
 142:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 144:	68fb      	ldr	r3, [r7, #12]
 146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 14a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 14c:	79fb      	ldrb	r3, [r7, #7]
 14e:	021b      	lsls	r3, r3, #8
 150:	461a      	mov	r2, r3
 152:	68fb      	ldr	r3, [r7, #12]
 154:	4313      	orrs	r3, r2
 156:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 158:	2301      	movs	r3, #1
 15a:	2200      	movs	r2, #0
 15c:	2116      	movs	r1, #22
 15e:	68f8      	ldr	r0, [r7, #12]
 160:	f7ff ff4e 	bl	0 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
 164:	79fb      	ldrb	r3, [r7, #7]
 166:	4619      	mov	r1, r3
 168:	4804      	ldr	r0, [pc, #16]	; (17c <set_MW_power+0x5a>)
 16a:	f000 fecd 	bl	f08 <__printf_veneer>
	return SUCCESS;
 16e:	2300      	movs	r3, #0
}
 170:	4618      	mov	r0, r3
 172:	3710      	adds	r7, #16
 174:	46bd      	mov	sp, r7
 176:	bd80      	pop	{r7, pc}
 178:	0801b018 	.word	0x0801b018
 17c:	0801b04c 	.word	0x0801b04c

00000180 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
 180:	b580      	push	{r7, lr}
 182:	b084      	sub	sp, #16
 184:	af00      	add	r7, sp, #0
 186:	4603      	mov	r3, r0
 188:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
 18a:	2200      	movs	r2, #0
 18c:	2102      	movs	r1, #2
 18e:	4856      	ldr	r0, [pc, #344]	; (2e8 <_Min_Heap_Size+0xe8>)
 190:	f000 feca 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 194:	2201      	movs	r2, #1
 196:	2101      	movs	r1, #1
 198:	4854      	ldr	r0, [pc, #336]	; (2ec <_Min_Heap_Size+0xec>)
 19a:	f000 fec5 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 19e:	2200      	movs	r2, #0
 1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 1a4:	4852      	ldr	r0, [pc, #328]	; (2f0 <_Min_Heap_Size+0xf0>)
 1a6:	f000 febf 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 1aa:	2201      	movs	r2, #1
 1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 1b0:	484f      	ldr	r0, [pc, #316]	; (2f0 <_Min_Heap_Size+0xf0>)
 1b2:	f000 feb9 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 1b6:	2201      	movs	r2, #1
 1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 1bc:	484c      	ldr	r0, [pc, #304]	; (2f0 <_Min_Heap_Size+0xf0>)
 1be:	f000 feb3 	bl	f28 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 1c2:	2064      	movs	r0, #100	; 0x64
 1c4:	f000 fe98 	bl	ef8 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
 1c8:	2300      	movs	r3, #0
 1ca:	2200      	movs	r2, #0
 1cc:	2100      	movs	r1, #0
 1ce:	2020      	movs	r0, #32
 1d0:	f7ff ff16 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
 1d4:	2301      	movs	r3, #1
 1d6:	2200      	movs	r2, #0
 1d8:	2108      	movs	r1, #8
 1da:	4846      	ldr	r0, [pc, #280]	; (2f4 <_Min_Heap_Size+0xf4>)
 1dc:	f7ff ff10 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
 1e0:	2000      	movs	r0, #0
 1e2:	f7ff ff87 	bl	f4 <synth_readreg>
 1e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 1e8:	4a43      	ldr	r2, [pc, #268]	; (2f8 <_Min_Heap_Size+0xf8>)
 1ea:	68fb      	ldr	r3, [r7, #12]
 1ec:	4293      	cmp	r3, r2
 1ee:	d00a      	beq.n	206 <_Min_Heap_Size+0x6>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 1f0:	2200      	movs	r2, #0
 1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 1f6:	483e      	ldr	r0, [pc, #248]	; (2f0 <_Min_Heap_Size+0xf0>)
 1f8:	f000 fe96 	bl	f28 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 1fc:	483f      	ldr	r0, [pc, #252]	; (2fc <_Min_Heap_Size+0xfc>)
 1fe:	f000 fe9b 	bl	f38 <__puts_veneer>
		return ERROR;
 202:	2301      	movs	r3, #1
 204:	e065      	b.n	2d2 <_Min_Heap_Size+0xd2>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 206:	483e      	ldr	r0, [pc, #248]	; (300 <_Min_Heap_Size+0x100>)
 208:	f000 fe96 	bl	f38 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
 20c:	2017      	movs	r0, #23
 20e:	f7ff ff71 	bl	f4 <synth_readreg>
 212:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 214:	68fb      	ldr	r3, [r7, #12]
 216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 21a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
 21c:	2301      	movs	r3, #1
 21e:	f083 0301 	eor.w	r3, r3, #1
 222:	b2db      	uxtb	r3, r3
 224:	01db      	lsls	r3, r3, #7
 226:	43db      	mvns	r3, r3
 228:	461a      	mov	r2, r3
 22a:	68fb      	ldr	r3, [r7, #12]
 22c:	4013      	ands	r3, r2
 22e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 230:	2301      	movs	r3, #1
 232:	2200      	movs	r2, #0
 234:	2117      	movs	r1, #23
 236:	68f8      	ldr	r0, [r7, #12]
 238:	f7ff fee2 	bl	0 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
 23c:	2301      	movs	r3, #1
 23e:	2200      	movs	r2, #0
 240:	2102      	movs	r1, #2
 242:	2001      	movs	r0, #1
 244:	f7ff fedc 	bl	0 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
 248:	2007      	movs	r0, #7
 24a:	f7ff ff53 	bl	f4 <synth_readreg>
 24e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 250:	68fb      	ldr	r3, [r7, #12]
 252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 256:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 258:	68fb      	ldr	r3, [r7, #12]
 25a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 25e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 260:	68fb      	ldr	r3, [r7, #12]
 262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 266:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
 268:	2301      	movs	r3, #1
 26a:	2200      	movs	r2, #0
 26c:	2107      	movs	r1, #7
 26e:	68f8      	ldr	r0, [r7, #12]
 270:	f7ff fec6 	bl	0 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 274:	200a      	movs	r0, #10
 276:	f000 fe3f 	bl	ef8 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 27a:	79fb      	ldrb	r3, [r7, #7]
 27c:	2b03      	cmp	r3, #3
 27e:	d904      	bls.n	28a <_Min_Heap_Size+0x8a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 280:	4820      	ldr	r0, [pc, #128]	; (304 <_Min_Heap_Size+0x104>)
 282:	f000 fe59 	bl	f38 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 286:	f000 fe3b 	bl	f00 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 28a:	2016      	movs	r0, #22
 28c:	f7ff ff32 	bl	f4 <synth_readreg>
 290:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 298:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 29a:	79fb      	ldrb	r3, [r7, #7]
 29c:	021b      	lsls	r3, r3, #8
 29e:	461a      	mov	r2, r3
 2a0:	68fb      	ldr	r3, [r7, #12]
 2a2:	4313      	orrs	r3, r2
 2a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 2a6:	2301      	movs	r3, #1
 2a8:	2200      	movs	r2, #0
 2aa:	2116      	movs	r1, #22
 2ac:	68f8      	ldr	r0, [r7, #12]
 2ae:	f7ff fea7 	bl	0 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
 2b2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 2e0 <_Min_Heap_Size+0xe0>
 2b6:	eeb0 0b47 	vmov.f64	d0, d7
 2ba:	f000 f8b3 	bl	424 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
 2be:	a308      	add	r3, pc, #32	; (adr r3, 2e0 <_Min_Heap_Size+0xe0>)
 2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 2c4:	4810      	ldr	r0, [pc, #64]	; (308 <_Min_Heap_Size+0x108>)
 2c6:	f000 fe1f 	bl	f08 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
 2ca:	4b10      	ldr	r3, [pc, #64]	; (30c <_Min_Heap_Size+0x10c>)
 2cc:	2201      	movs	r2, #1
 2ce:	701a      	strb	r2, [r3, #0]
	return SUCCESS;
 2d0:	2300      	movs	r3, #0
}
 2d2:	4618      	mov	r0, r3
 2d4:	3710      	adds	r7, #16
 2d6:	46bd      	mov	sp, r7
 2d8:	bd80      	pop	{r7, pc}
 2da:	bf00      	nop
 2dc:	f3af 8000 	nop.w
 2e0:	6d600000 	.word	0x6d600000
 2e4:	41e69e35 	.word	0x41e69e35
 2e8:	58021000 	.word	0x58021000
 2ec:	58021800 	.word	0x58021800
 2f0:	58020800 	.word	0x58020800
 2f4:	0041bfff 	.word	0x0041bfff
 2f8:	00c7701a 	.word	0x00c7701a
 2fc:	0801b064 	.word	0x0801b064
 300:	0801b080 	.word	0x0801b080
 304:	0801b018 	.word	0x0801b018
 308:	0801b094 	.word	0x0801b094
 30c:	200005c8 	.word	0x200005c8

00000310 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
 310:	b580      	push	{r7, lr}
 312:	b082      	sub	sp, #8
 314:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 316:	2012      	movs	r0, #18
 318:	f7ff feec 	bl	f4 <synth_readreg>
 31c:	4603      	mov	r3, r0
 31e:	f003 0302 	and.w	r3, r3, #2
 322:	2b00      	cmp	r3, #0
 324:	bf14      	ite	ne
 326:	2301      	movne	r3, #1
 328:	2300      	moveq	r3, #0
 32a:	71fb      	strb	r3, [r7, #7]
	return locked;
 32c:	79fb      	ldrb	r3, [r7, #7]

}
 32e:	4618      	mov	r0, r3
 330:	3708      	adds	r7, #8
 332:	46bd      	mov	sp, r7
 334:	bd80      	pop	{r7, pc}

00000336 <mute_mw_outputs>:
/**
  * @brief  Mute MW output
  * @param  None
  * @retval None
  */
static void mute_mw_outputs() {
 336:	b580      	push	{r7, lr}
 338:	b082      	sub	sp, #8
 33a:	af00      	add	r7, sp, #0
	uint32_t read_data = 0x0;
 33c:	2300      	movs	r3, #0
 33e:	607b      	str	r3, [r7, #4]

	/* Mute the outputs by setting k value to zero */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 340:	2016      	movs	r0, #22
 342:	f7ff fed7 	bl	f4 <synth_readreg>
 346:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 348:	687b      	ldr	r3, [r7, #4]
 34a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 34e:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 350:	2301      	movs	r3, #1
 352:	2200      	movs	r2, #0
 354:	2116      	movs	r1, #22
 356:	6878      	ldr	r0, [r7, #4]
 358:	f7ff fe52 	bl	0 <synth_writereg>
}
 35c:	bf00      	nop
 35e:	3708      	adds	r7, #8
 360:	46bd      	mov	sp, r7
 362:	bd80      	pop	{r7, pc}

00000364 <set_frequency>:
  * @param  Fractional frequency
  * @param  VCO divider value
  * @param  Manually mute whilst changing frequency
  * @retval None
  */
static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 364:	b580      	push	{r7, lr}
 366:	b086      	sub	sp, #24
 368:	af00      	add	r7, sp, #0
 36a:	60f8      	str	r0, [r7, #12]
 36c:	60b9      	str	r1, [r7, #8]
 36e:	607a      	str	r2, [r7, #4]
 370:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 372:	2300      	movs	r3, #0
 374:	617b      	str	r3, [r7, #20]

	if (mute) {
 376:	78fb      	ldrb	r3, [r7, #3]
 378:	2b00      	cmp	r3, #0
 37a:	d001      	beq.n	380 <set_frequency+0x1c>
		mute_mw_outputs();
 37c:	f7ff ffdb 	bl	336 <mute_mw_outputs>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 380:	4b25      	ldr	r3, [pc, #148]	; (418 <_Min_Stack_Size+0x18>)
 382:	681b      	ldr	r3, [r3, #0]
 384:	f1b3 3fff 	cmp.w	r3, #4294967295
 388:	d004      	beq.n	394 <set_frequency+0x30>
 38a:	4b23      	ldr	r3, [pc, #140]	; (418 <_Min_Stack_Size+0x18>)
 38c:	681b      	ldr	r3, [r3, #0]
 38e:	68fa      	ldr	r2, [r7, #12]
 390:	429a      	cmp	r2, r3
 392:	d008      	beq.n	3a6 <set_frequency+0x42>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
 394:	2301      	movs	r3, #1
 396:	2200      	movs	r2, #0
 398:	2103      	movs	r1, #3
 39a:	68f8      	ldr	r0, [r7, #12]
 39c:	f7ff fe30 	bl	0 <synth_writereg>
		last_integer = integer;
 3a0:	4a1d      	ldr	r2, [pc, #116]	; (418 <_Min_Stack_Size+0x18>)
 3a2:	68fb      	ldr	r3, [r7, #12]
 3a4:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 3a6:	4b1d      	ldr	r3, [pc, #116]	; (41c <_Min_Stack_Size+0x1c>)
 3a8:	681b      	ldr	r3, [r3, #0]
 3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 3ae:	d004      	beq.n	3ba <set_frequency+0x56>
 3b0:	4b1a      	ldr	r3, [pc, #104]	; (41c <_Min_Stack_Size+0x1c>)
 3b2:	681b      	ldr	r3, [r3, #0]
 3b4:	68ba      	ldr	r2, [r7, #8]
 3b6:	429a      	cmp	r2, r3
 3b8:	d008      	beq.n	3cc <set_frequency+0x68>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
 3ba:	2301      	movs	r3, #1
 3bc:	2200      	movs	r2, #0
 3be:	2104      	movs	r1, #4
 3c0:	68b8      	ldr	r0, [r7, #8]
 3c2:	f7ff fe1d 	bl	0 <synth_writereg>
		last_fraction = fraction;
 3c6:	4a15      	ldr	r2, [pc, #84]	; (41c <_Min_Stack_Size+0x1c>)
 3c8:	68bb      	ldr	r3, [r7, #8]
 3ca:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider) || mute) {
 3cc:	4b14      	ldr	r3, [pc, #80]	; (420 <_Min_Stack_Size+0x20>)
 3ce:	681b      	ldr	r3, [r3, #0]
 3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 3d4:	d007      	beq.n	3e6 <set_frequency+0x82>
 3d6:	4b12      	ldr	r3, [pc, #72]	; (420 <_Min_Stack_Size+0x20>)
 3d8:	681b      	ldr	r3, [r3, #0]
 3da:	687a      	ldr	r2, [r7, #4]
 3dc:	429a      	cmp	r2, r3
 3de:	d102      	bne.n	3e6 <set_frequency+0x82>
 3e0:	78fb      	ldrb	r3, [r7, #3]
 3e2:	2b00      	cmp	r3, #0
 3e4:	d014      	beq.n	410 <_Min_Stack_Size+0x10>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 3e6:	2016      	movs	r0, #22
 3e8:	f7ff fe84 	bl	f4 <synth_readreg>
 3ec:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 3ee:	697b      	ldr	r3, [r7, #20]
 3f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 3f4:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
 3f6:	697a      	ldr	r2, [r7, #20]
 3f8:	687b      	ldr	r3, [r7, #4]
 3fa:	4313      	orrs	r3, r2
 3fc:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 3fe:	2301      	movs	r3, #1
 400:	2200      	movs	r2, #0
 402:	2116      	movs	r1, #22
 404:	6978      	ldr	r0, [r7, #20]
 406:	f7ff fdfb 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
 40a:	4a05      	ldr	r2, [pc, #20]	; (420 <_Min_Stack_Size+0x20>)
 40c:	687b      	ldr	r3, [r7, #4]
 40e:	6013      	str	r3, [r2, #0]
	}

}
 410:	bf00      	nop
 412:	3718      	adds	r7, #24
 414:	46bd      	mov	sp, r7
 416:	bd80      	pop	{r7, pc}
 418:	20000004 	.word	0x20000004
 41c:	20000008 	.word	0x20000008
 420:	2000000c 	.word	0x2000000c

00000424 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
 424:	b580      	push	{r7, lr}
 426:	b088      	sub	sp, #32
 428:	af00      	add	r7, sp, #0
 42a:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
 42e:	2301      	movs	r3, #1
 430:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 432:	69fb      	ldr	r3, [r7, #28]
 434:	ee07 3a90 	vmov	s15, r3
 438:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 43c:	ed97 7b00 	vldr	d7, [r7]
 440:	ee26 6b07 	vmul.f64	d6, d6, d7
 444:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 4f0 <set_frequency_hz+0xcc>
 448:	ee86 7b05 	vdiv.f64	d7, d6, d5
 44c:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 450:	ed97 7b04 	vldr	d7, [r7, #16]
 454:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 458:	ee17 3a90 	vmov	r3, s15
 45c:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 45e:	68fb      	ldr	r3, [r7, #12]
 460:	ee07 3a90 	vmov	s15, r3
 464:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 468:	ed97 6b04 	vldr	d6, [r7, #16]
 46c:	ee36 7b47 	vsub.f64	d7, d6, d7
 470:	ed9f 6b21 	vldr	d6, [pc, #132]	; 4f8 <set_frequency_hz+0xd4>
 474:	ee27 7b06 	vmul.f64	d7, d7, d6
 478:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 47c:	ee37 7b06 	vadd.f64	d7, d7, d6
 480:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 484:	ee17 3a90 	vmov	r3, s15
 488:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
 48a:	2201      	movs	r2, #1
 48c:	2102      	movs	r1, #2
 48e:	481c      	ldr	r0, [pc, #112]	; (500 <set_frequency_hz+0xdc>)
 490:	f000 fd4a 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
 494:	2301      	movs	r3, #1
 496:	69fa      	ldr	r2, [r7, #28]
 498:	68b9      	ldr	r1, [r7, #8]
 49a:	68f8      	ldr	r0, [r7, #12]
 49c:	f7ff ff62 	bl	364 <set_frequency>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
 4a0:	4b18      	ldr	r3, [pc, #96]	; (504 <set_frequency_hz+0xe0>)
 4a2:	681b      	ldr	r3, [r3, #0]
 4a4:	f242 7210 	movw	r2, #10000	; 0x2710
 4a8:	4611      	mov	r1, r2
 4aa:	4618      	mov	r0, r3
 4ac:	f000 fc4e 	bl	d4c <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
 4b0:	f7ff ff2e 	bl	310 <lock_status>
 4b4:	4603      	mov	r3, r0
 4b6:	f083 0301 	eor.w	r3, r3, #1
 4ba:	b2db      	uxtb	r3, r3
 4bc:	2b00      	cmp	r3, #0
 4be:	d011      	beq.n	4e4 <set_frequency_hz+0xc0>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
 4c0:	2200      	movs	r2, #0
 4c2:	2102      	movs	r1, #2
 4c4:	4810      	ldr	r0, [pc, #64]	; (508 <set_frequency_hz+0xe4>)
 4c6:	f000 fd2f 	bl	f28 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
 4ca:	f242 7310 	movw	r3, #10000	; 0x2710
 4ce:	4619      	mov	r1, r3
 4d0:	480e      	ldr	r0, [pc, #56]	; (50c <set_frequency_hz+0xe8>)
 4d2:	f000 fd19 	bl	f08 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
 4d6:	f000 fd13 	bl	f00 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
 4da:	2200      	movs	r2, #0
 4dc:	2102      	movs	r1, #2
 4de:	4808      	ldr	r0, [pc, #32]	; (500 <set_frequency_hz+0xdc>)
 4e0:	f000 fd22 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	}

}
 4e4:	bf00      	nop
 4e6:	3720      	adds	r7, #32
 4e8:	46bd      	mov	sp, r7
 4ea:	bd80      	pop	{r7, pc}
 4ec:	f3af 8000 	nop.w
 4f0:	00000000 	.word	0x00000000
 4f4:	4187d784 	.word	0x4187d784
 4f8:	00000000 	.word	0x00000000
 4fc:	41700000 	.word	0x41700000
 500:	58020400 	.word	0x58020400
 504:	2000001c 	.word	0x2000001c
 508:	58021000 	.word	0x58021000
 50c:	0801b0bc 	.word	0x0801b0bc

00000510 <run_sweep>:

//Simon's MW sweep function
void run_sweep() {
 510:	b580      	push	{r7, lr}
 512:	b084      	sub	sp, #16
 514:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 516:	2201      	movs	r2, #1
 518:	2102      	movs	r1, #2
 51a:	482f      	ldr	r0, [pc, #188]	; (5d8 <run_sweep+0xc8>)
 51c:	f000 fd04 	bl	f28 <__HAL_GPIO_WritePin_veneer>
#endif

	//__disable_irq(); //Simon's code had IRQs disabled

	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 520:	2200      	movs	r2, #0
 522:	2101      	movs	r1, #1
 524:	482d      	ldr	r0, [pc, #180]	; (5dc <run_sweep+0xcc>)
 526:	f000 fcff 	bl	f28 <__HAL_GPIO_WritePin_veneer>
#ifdef MW_VERBOSE
	printf("Setting trigger output low \r\n");
#endif

	for (uint32_t i = 0; i < num_points; i++) {
 52a:	2300      	movs	r3, #0
 52c:	60fb      	str	r3, [r7, #12]
 52e:	e039      	b.n	5a4 <run_sweep+0x94>

		double fo = start_freq + (i * sweep_settings.step_size);
 530:	68fb      	ldr	r3, [r7, #12]
 532:	ee07 3a90 	vmov	s15, r3
 536:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 53a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 5d0 <run_sweep+0xc0>
 53e:	ee27 6b06 	vmul.f64	d6, d7, d6
 542:	4b27      	ldr	r3, [pc, #156]	; (5e0 <run_sweep+0xd0>)
 544:	ed93 7b00 	vldr	d7, [r3]
 548:	ee36 7b07 	vadd.f64	d7, d6, d7
 54c:	ed87 7b00 	vstr	d7, [r7]
		set_frequency_hz(fo);
 550:	ed97 0b00 	vldr	d0, [r7]
 554:	f7ff ff66 	bl	424 <set_frequency_hz>
			printf("Failure to program value to DAC \r\n");
			Error_Handler();
		}
#endif

		timer_delay(MW_TIMER, DWELL_TIME_US);
 558:	4b22      	ldr	r3, [pc, #136]	; (5e4 <run_sweep+0xd4>)
 55a:	681b      	ldr	r3, [r3, #0]
 55c:	f240 429c 	movw	r2, #1180	; 0x49c
 560:	4611      	mov	r1, r2
 562:	4618      	mov	r0, r3
 564:	f000 fbf2 	bl	d4c <timer_delay>

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 56c:	481e      	ldr	r0, [pc, #120]	; (5e8 <run_sweep+0xd8>)
 56e:	f000 fccf 	bl	f10 <__HAL_GPIO_ReadPin_veneer>
 572:	4603      	mov	r3, r0
 574:	2b00      	cmp	r3, #0
 576:	bf14      	ite	ne
 578:	2301      	movne	r3, #1
 57a:	2300      	moveq	r3, #0
 57c:	b2da      	uxtb	r2, r3
 57e:	4b1b      	ldr	r3, [pc, #108]	; (5ec <run_sweep+0xdc>)
 580:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 582:	4b1a      	ldr	r3, [pc, #104]	; (5ec <run_sweep+0xdc>)
 584:	781b      	ldrb	r3, [r3, #0]
 586:	b2db      	uxtb	r3, r3
 588:	2b00      	cmp	r3, #0
 58a:	d008      	beq.n	59e <run_sweep+0x8e>
			printf("Terminating sweep early as blue button pressed \r\n");
 58c:	4818      	ldr	r0, [pc, #96]	; (5f0 <run_sweep+0xe0>)
 58e:	f000 fcd3 	bl	f38 <__puts_veneer>
			HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 592:	2201      	movs	r2, #1
 594:	2101      	movs	r1, #1
 596:	4811      	ldr	r0, [pc, #68]	; (5dc <run_sweep+0xcc>)
 598:	f000 fcc6 	bl	f28 <__HAL_GPIO_WritePin_veneer>
			break;
 59c:	e007      	b.n	5ae <run_sweep+0x9e>
	for (uint32_t i = 0; i < num_points; i++) {
 59e:	68fb      	ldr	r3, [r7, #12]
 5a0:	3301      	adds	r3, #1
 5a2:	60fb      	str	r3, [r7, #12]
 5a4:	4b13      	ldr	r3, [pc, #76]	; (5f4 <run_sweep+0xe4>)
 5a6:	681b      	ldr	r3, [r3, #0]
 5a8:	68fa      	ldr	r2, [r7, #12]
 5aa:	429a      	cmp	r2, r3
 5ac:	d3c0      	bcc.n	530 <run_sweep+0x20>
		}
	}

	//__enable_irq(); //Simon's code had IRQs disabled

	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 5ae:	2201      	movs	r2, #1
 5b0:	2101      	movs	r1, #1
 5b2:	480a      	ldr	r0, [pc, #40]	; (5dc <run_sweep+0xcc>)
 5b4:	f000 fcb8 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	printf("Sweep complete: %lu points\r\n", num_points);
 5b8:	4b0e      	ldr	r3, [pc, #56]	; (5f4 <run_sweep+0xe4>)
 5ba:	681b      	ldr	r3, [r3, #0]
 5bc:	4619      	mov	r1, r3
 5be:	480e      	ldr	r0, [pc, #56]	; (5f8 <run_sweep+0xe8>)
 5c0:	f000 fca2 	bl	f08 <__printf_veneer>
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 5c4:	bf00      	nop
 5c6:	3710      	adds	r7, #16
 5c8:	46bd      	mov	sp, r7
 5ca:	bd80      	pop	{r7, pc}
 5cc:	f3af 8000 	nop.w
 5d0:	00000000 	.word	0x00000000
 5d4:	4007d784 	.word	0x4007d784
 5d8:	58021000 	.word	0x58021000
 5dc:	58021800 	.word	0x58021800
 5e0:	0801de68 	.word	0x0801de68
 5e4:	2000001c 	.word	0x2000001c
 5e8:	58020800 	.word	0x58020800
 5ec:	200005bd 	.word	0x200005bd
 5f0:	0801b100 	.word	0x0801b100
 5f4:	0801de70 	.word	0x0801de70
 5f8:	0801b134 	.word	0x0801b134

000005fc <print_mw_sweep_settings>:

void test_call(void) {
	calc_defined_step_MW_sweep(HYPERFINE, 10000, 2, 1000); //10kHz sweep, 5 POP cycles per step, 1000 points
}

  static void print_mw_sweep_settings (void) {
 5fc:	b580      	push	{r7, lr}
 5fe:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
  	printf("state: %u \r\n", mw_sweep_settings.state);
 600:	4b1b      	ldr	r3, [pc, #108]	; (670 <print_mw_sweep_settings+0x74>)
 602:	781b      	ldrb	r3, [r3, #0]
 604:	4619      	mov	r1, r3
 606:	481b      	ldr	r0, [pc, #108]	; (674 <print_mw_sweep_settings+0x78>)
 608:	f000 fc7e 	bl	f08 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
 60c:	4b18      	ldr	r3, [pc, #96]	; (670 <print_mw_sweep_settings+0x74>)
 60e:	785b      	ldrb	r3, [r3, #1]
 610:	4619      	mov	r1, r3
 612:	4819      	ldr	r0, [pc, #100]	; (678 <print_mw_sweep_settings+0x7c>)
 614:	f000 fc78 	bl	f08 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
 618:	4b15      	ldr	r3, [pc, #84]	; (670 <print_mw_sweep_settings+0x74>)
 61a:	685b      	ldr	r3, [r3, #4]
 61c:	4619      	mov	r1, r3
 61e:	4817      	ldr	r0, [pc, #92]	; (67c <print_mw_sweep_settings+0x80>)
 620:	f000 fc72 	bl	f08 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
 624:	4b12      	ldr	r3, [pc, #72]	; (670 <print_mw_sweep_settings+0x74>)
 626:	689b      	ldr	r3, [r3, #8]
 628:	4619      	mov	r1, r3
 62a:	4815      	ldr	r0, [pc, #84]	; (680 <print_mw_sweep_settings+0x84>)
 62c:	f000 fc6c 	bl	f08 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
 630:	4b0f      	ldr	r3, [pc, #60]	; (670 <print_mw_sweep_settings+0x74>)
 632:	68db      	ldr	r3, [r3, #12]
 634:	4619      	mov	r1, r3
 636:	4813      	ldr	r0, [pc, #76]	; (684 <print_mw_sweep_settings+0x88>)
 638:	f000 fc66 	bl	f08 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
 63c:	4b0c      	ldr	r3, [pc, #48]	; (670 <print_mw_sweep_settings+0x74>)
 63e:	691b      	ldr	r3, [r3, #16]
 640:	4619      	mov	r1, r3
 642:	4811      	ldr	r0, [pc, #68]	; (688 <print_mw_sweep_settings+0x8c>)
 644:	f000 fc60 	bl	f08 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
 648:	4b09      	ldr	r3, [pc, #36]	; (670 <print_mw_sweep_settings+0x74>)
 64a:	695b      	ldr	r3, [r3, #20]
 64c:	4619      	mov	r1, r3
 64e:	480f      	ldr	r0, [pc, #60]	; (68c <print_mw_sweep_settings+0x90>)
 650:	f000 fc5a 	bl	f08 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
 654:	4b06      	ldr	r3, [pc, #24]	; (670 <print_mw_sweep_settings+0x74>)
 656:	699b      	ldr	r3, [r3, #24]
 658:	4619      	mov	r1, r3
 65a:	480d      	ldr	r0, [pc, #52]	; (690 <print_mw_sweep_settings+0x94>)
 65c:	f000 fc54 	bl	f08 <__printf_veneer>
  	printf("current_point: %lu us\r\n", mw_sweep_settings.current_point);
 660:	4b03      	ldr	r3, [pc, #12]	; (670 <print_mw_sweep_settings+0x74>)
 662:	69db      	ldr	r3, [r3, #28]
 664:	4619      	mov	r1, r3
 666:	480b      	ldr	r0, [pc, #44]	; (694 <print_mw_sweep_settings+0x98>)
 668:	f000 fc4e 	bl	f08 <__printf_veneer>
  }
 66c:	bf00      	nop
 66e:	bd80      	pop	{r7, pc}
 670:	200005c8 	.word	0x200005c8
 674:	0801b154 	.word	0x0801b154
 678:	0801b164 	.word	0x0801b164
 67c:	0801b170 	.word	0x0801b170
 680:	0801b180 	.word	0x0801b180
 684:	0801b194 	.word	0x0801b194
 688:	0801b1a8 	.word	0x0801b1a8
 68c:	0801b1bc 	.word	0x0801b1bc
 690:	0801b1d8 	.word	0x0801b1d8
 694:	0801b1f0 	.word	0x0801b1f0

00000698 <calc_defined_step_MW_sweep>:
  * @param  Span in Hz
  * @param  POP cycles per step
  * @param  Number of points
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_step, const uint32_t num_points_req) {
 698:	b580      	push	{r7, lr}
 69a:	b098      	sub	sp, #96	; 0x60
 69c:	af02      	add	r7, sp, #8
 69e:	ed87 0b06 	vstr	d0, [r7, #24]
 6a2:	ed87 1b04 	vstr	d1, [r7, #16]
 6a6:	60f8      	str	r0, [r7, #12]
 6a8:	60b9      	str	r1, [r7, #8]
	printf("MW sweep will have %.4g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
 6aa:	ed97 7b06 	vldr	d7, [r7, #24]
 6ae:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8e0 <calc_defined_step_MW_sweep+0x248>
 6b2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 6b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 6ba:	e9cd 2300 	strd	r2, r3, [sp]
 6be:	ec53 2b15 	vmov	r2, r3, d5
 6c2:	4891      	ldr	r0, [pc, #580]	; (908 <calc_defined_step_MW_sweep+0x270>)
 6c4:	f000 fc20 	bl	f08 <__printf_veneer>
	printf("and %ld POP cycles per step\r\n", pop_cycles_per_step);
 6c8:	68f9      	ldr	r1, [r7, #12]
 6ca:	4890      	ldr	r0, [pc, #576]	; (90c <calc_defined_step_MW_sweep+0x274>)
 6cc:	f000 fc1c 	bl	f08 <__printf_veneer>

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
 6d0:	ed97 7b04 	vldr	d7, [r7, #16]
 6d4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 6d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 6dc:	ed97 6b06 	vldr	d6, [r7, #24]
 6e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 6e4:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

	/* Calculate k */
	uint8_t local_k = VCO_MAX_FREQ / start_freq;
 6e8:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8e8 <calc_defined_step_MW_sweep+0x250>
 6ec:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 6f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 6f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 6f8:	edc7 7a01 	vstr	s15, [r7, #4]
 6fc:	793b      	ldrb	r3, [r7, #4]
 6fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (local_k != 1) {
 702:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 706:	2b01      	cmp	r3, #1
 708:	d010      	beq.n	72c <calc_defined_step_MW_sweep+0x94>
		while (local_k > 62 || local_k % 2) {
 70a:	e004      	b.n	716 <calc_defined_step_MW_sweep+0x7e>
			local_k --;
 70c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 710:	3b01      	subs	r3, #1
 712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		while (local_k > 62 || local_k % 2) {
 716:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 71a:	2b3e      	cmp	r3, #62	; 0x3e
 71c:	d8f6      	bhi.n	70c <calc_defined_step_MW_sweep+0x74>
 71e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 722:	f003 0301 	and.w	r3, r3, #1
 726:	b2db      	uxtb	r3, r3
 728:	2b00      	cmp	r3, #0
 72a:	d1ef      	bne.n	70c <calc_defined_step_MW_sweep+0x74>
		}
	}
	mw_sweep_settings.k = local_k;
 72c:	4a78      	ldr	r2, [pc, #480]	; (910 <calc_defined_step_MW_sweep+0x278>)
 72e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 732:	7053      	strb	r3, [r2, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
 734:	68bb      	ldr	r3, [r7, #8]
 736:	3b01      	subs	r3, #1
 738:	ee07 3a90 	vmov	s15, r3
 73c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 740:	ed97 5b04 	vldr	d5, [r7, #16]
 744:	ee85 7b06 	vdiv.f64	d7, d5, d6
 748:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
 74c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 750:	68b9      	ldr	r1, [r7, #8]
 752:	4870      	ldr	r0, [pc, #448]	; (914 <calc_defined_step_MW_sweep+0x27c>)
 754:	f000 fbd8 	bl	f08 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (local_k * (1 << 24)); //minimum step size possible
 758:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8f0 <calc_defined_step_MW_sweep+0x258>
 75c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 760:	061b      	lsls	r3, r3, #24
 762:	ee07 3a90 	vmov	s15, r3
 766:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 76a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 76e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
 772:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 776:	4868      	ldr	r0, [pc, #416]	; (918 <calc_defined_step_MW_sweep+0x280>)
 778:	f000 fbc6 	bl	f08 <__printf_veneer>
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
 77c:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 780:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 784:	ee85 7b06 	vdiv.f64	d7, d5, d6
 788:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 78c:	ee37 7b06 	vadd.f64	d7, d7, d6
 790:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 794:	ee17 2a90 	vmov	r2, s15
 798:	4b5d      	ldr	r3, [pc, #372]	; (910 <calc_defined_step_MW_sweep+0x278>)
 79a:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
 79c:	4b5c      	ldr	r3, [pc, #368]	; (910 <calc_defined_step_MW_sweep+0x278>)
 79e:	691b      	ldr	r3, [r3, #16]
 7a0:	2b00      	cmp	r3, #0
 7a2:	d104      	bne.n	7ae <calc_defined_step_MW_sweep+0x116>
		mw_sweep_settings.step_size++;
 7a4:	4b5a      	ldr	r3, [pc, #360]	; (910 <calc_defined_step_MW_sweep+0x278>)
 7a6:	691b      	ldr	r3, [r3, #16]
 7a8:	3301      	adds	r3, #1
 7aa:	4a59      	ldr	r2, [pc, #356]	; (910 <calc_defined_step_MW_sweep+0x278>)
 7ac:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
 7ae:	4b58      	ldr	r3, [pc, #352]	; (910 <calc_defined_step_MW_sweep+0x278>)
 7b0:	691b      	ldr	r3, [r3, #16]
 7b2:	ee07 3a90 	vmov	s15, r3
 7b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 7ba:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 7be:	ee26 7b07 	vmul.f64	d7, d6, d7
 7c2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
 7c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 7ca:	4854      	ldr	r0, [pc, #336]	; (91c <calc_defined_step_MW_sweep+0x284>)
 7cc:	f000 fb9c 	bl	f08 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
 7d0:	ed97 5b04 	vldr	d5, [r7, #16]
 7d4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 7d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 7dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 7e0:	ee17 2a90 	vmov	r2, s15
 7e4:	4b4a      	ldr	r3, [pc, #296]	; (910 <calc_defined_step_MW_sweep+0x278>)
 7e6:	60da      	str	r2, [r3, #12]
	printf("Number of steps: %ld \r\n", mw_sweep_settings.num_steps);
 7e8:	4b49      	ldr	r3, [pc, #292]	; (910 <calc_defined_step_MW_sweep+0x278>)
 7ea:	68db      	ldr	r3, [r3, #12]
 7ec:	4619      	mov	r1, r3
 7ee:	484c      	ldr	r0, [pc, #304]	; (920 <calc_defined_step_MW_sweep+0x288>)
 7f0:	f000 fb8a 	bl	f08 <__printf_veneer>

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
 7f4:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 7f8:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 7fc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 804:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 808:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80c:	ee26 7b07 	vmul.f64	d7, d6, d7
 810:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * local_k) / REF_FREQ);
 814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 818:	ee07 3a90 	vmov	s15, r3
 81c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 820:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 824:	ee26 6b07 	vmul.f64	d6, d6, d7
 828:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8f0 <calc_defined_step_MW_sweep+0x258>
 82c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 830:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	mw_sweep_settings.NINT = N;
 834:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 838:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 83c:	ee17 2a90 	vmov	r2, s15
 840:	4b33      	ldr	r3, [pc, #204]	; (910 <calc_defined_step_MW_sweep+0x278>)
 842:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
 844:	4b32      	ldr	r3, [pc, #200]	; (910 <calc_defined_step_MW_sweep+0x278>)
 846:	685b      	ldr	r3, [r3, #4]
 848:	ee07 3a90 	vmov	s15, r3
 84c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 850:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 854:	ee36 7b47 	vsub.f64	d7, d6, d7
 858:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8f8 <calc_defined_step_MW_sweep+0x260>
 85c:	ee27 7b06 	vmul.f64	d7, d7, d6
 860:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 864:	ee37 7b06 	vadd.f64	d7, d7, d6
 868:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 86c:	ee17 2a90 	vmov	r2, s15
 870:	4b27      	ldr	r3, [pc, #156]	; (910 <calc_defined_step_MW_sweep+0x278>)
 872:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
 874:	f242 7210 	movw	r2, #10000	; 0x2710
 878:	4b25      	ldr	r3, [pc, #148]	; (910 <calc_defined_step_MW_sweep+0x278>)
 87a:	615a      	str	r2, [r3, #20]
	mw_sweep_settings.dwell_time = pop_cycles_per_step * POP_CYCLE_TIME_US;
 87c:	f245 22d4 	movw	r2, #21204	; 0x52d4
 880:	68fb      	ldr	r3, [r7, #12]
 882:	fb02 f303 	mul.w	r3, r2, r3
 886:	4a22      	ldr	r2, [pc, #136]	; (910 <calc_defined_step_MW_sweep+0x278>)
 888:	6193      	str	r3, [r2, #24]

	/* Calculate the period of a sweep */
	const double period_s = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps)/1000000;
 88a:	f242 7210 	movw	r2, #10000	; 0x2710
 88e:	f642 4306 	movw	r3, #11270	; 0x2c06
 892:	441a      	add	r2, r3
 894:	4b1e      	ldr	r3, [pc, #120]	; (910 <calc_defined_step_MW_sweep+0x278>)
 896:	699b      	ldr	r3, [r3, #24]
 898:	4413      	add	r3, r2
 89a:	ee07 3a90 	vmov	s15, r3
 89e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8a2:	4b1b      	ldr	r3, [pc, #108]	; (910 <calc_defined_step_MW_sweep+0x278>)
 8a4:	68db      	ldr	r3, [r3, #12]
 8a6:	ee07 3a90 	vmov	s15, r3
 8aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 8b2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 900 <calc_defined_step_MW_sweep+0x268>
 8b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8ba:	ed87 7b08 	vstr	d7, [r7, #32]
	printf("Sweep period: %.3g s\r\n", period_s);
 8be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8c2:	4818      	ldr	r0, [pc, #96]	; (924 <calc_defined_step_MW_sweep+0x28c>)
 8c4:	f000 fb20 	bl	f08 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
 8c8:	4b11      	ldr	r3, [pc, #68]	; (910 <calc_defined_step_MW_sweep+0x278>)
 8ca:	2200      	movs	r2, #0
 8cc:	61da      	str	r2, [r3, #28]

	print_mw_sweep_settings();
 8ce:	f7ff fe95 	bl	5fc <print_mw_sweep_settings>
	return(true);
 8d2:	2301      	movs	r3, #1
}
 8d4:	4618      	mov	r0, r3
 8d6:	3758      	adds	r7, #88	; 0x58
 8d8:	46bd      	mov	sp, r7
 8da:	bd80      	pop	{r7, pc}
 8dc:	f3af 8000 	nop.w
 8e0:	00000000 	.word	0x00000000
 8e4:	41cdcd65 	.word	0x41cdcd65
 8e8:	20000000 	.word	0x20000000
 8ec:	41ee8c21 	.word	0x41ee8c21
 8f0:	00000000 	.word	0x00000000
 8f4:	4187d784 	.word	0x4187d784
 8f8:	00000000 	.word	0x00000000
 8fc:	41700000 	.word	0x41700000
 900:	00000000 	.word	0x00000000
 904:	412e8480 	.word	0x412e8480
 908:	0801b208 	.word	0x0801b208
 90c:	0801b24c 	.word	0x0801b24c
 910:	200005c8 	.word	0x200005c8
 914:	0801b26c 	.word	0x0801b26c
 918:	0801b2a4 	.word	0x0801b2a4
 91c:	0801b2c0 	.word	0x0801b2c0
 920:	0801b2e0 	.word	0x0801b2e0
 924:	0801b2f8 	.word	0x0801b2f8

00000928 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
const bool start_MW_sweep(void) {
 928:	b580      	push	{r7, lr}
 92a:	af00      	add	r7, sp, #0
	//uses settings from the mw_sweep_settings structure
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
 92c:	2201      	movs	r2, #1
 92e:	2102      	movs	r1, #2
 930:	4812      	ldr	r0, [pc, #72]	; (97c <start_MW_sweep+0x54>)
 932:	f000 faf9 	bl	f28 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
 936:	2201      	movs	r2, #1
 938:	2102      	movs	r1, #2
 93a:	4811      	ldr	r0, [pc, #68]	; (980 <start_MW_sweep+0x58>)
 93c:	f000 faf4 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
 940:	4b10      	ldr	r3, [pc, #64]	; (984 <start_MW_sweep+0x5c>)
 942:	6858      	ldr	r0, [r3, #4]
 944:	4b0f      	ldr	r3, [pc, #60]	; (984 <start_MW_sweep+0x5c>)
 946:	6899      	ldr	r1, [r3, #8]
 948:	4b0e      	ldr	r3, [pc, #56]	; (984 <start_MW_sweep+0x5c>)
 94a:	785b      	ldrb	r3, [r3, #1]
 94c:	461a      	mov	r2, r3
 94e:	2301      	movs	r3, #1
 950:	f7ff fd08 	bl	364 <set_frequency>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
 954:	4b0b      	ldr	r3, [pc, #44]	; (984 <start_MW_sweep+0x5c>)
 956:	2202      	movs	r2, #2
 958:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
 95a:	4b0a      	ldr	r3, [pc, #40]	; (984 <start_MW_sweep+0x5c>)
 95c:	2200      	movs	r2, #0
 95e:	61da      	str	r2, [r3, #28]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 960:	2200      	movs	r2, #0
 962:	2101      	movs	r1, #1
 964:	4808      	ldr	r0, [pc, #32]	; (988 <start_MW_sweep+0x60>)
 966:	f000 fadf 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
 96a:	4b08      	ldr	r3, [pc, #32]	; (98c <start_MW_sweep+0x64>)
 96c:	681b      	ldr	r3, [r3, #0]
 96e:	4618      	mov	r0, r3
 970:	f000 f9b0 	bl	cd4 <start_timer>
	return(true);
 974:	2301      	movs	r3, #1
}
 976:	4618      	mov	r0, r3
 978:	bd80      	pop	{r7, pc}
 97a:	bf00      	nop
 97c:	58021000 	.word	0x58021000
 980:	58020400 	.word	0x58020400
 984:	200005c8 	.word	0x200005c8
 988:	58021800 	.word	0x58021800
 98c:	2000001c 	.word	0x2000001c

00000990 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
 990:	b580      	push	{r7, lr}
 992:	b082      	sub	sp, #8
 994:	af00      	add	r7, sp, #0
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
 996:	4b49      	ldr	r3, [pc, #292]	; (abc <MW_update+0x12c>)
 998:	781b      	ldrb	r3, [r3, #0]
 99a:	71bb      	strb	r3, [r7, #6]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
 99c:	2300      	movs	r3, #0
 99e:	71fb      	strb	r3, [r7, #7]
	switch (local_copy_of_MW_state)
 9a0:	79bb      	ldrb	r3, [r7, #6]
 9a2:	2b03      	cmp	r3, #3
 9a4:	d029      	beq.n	9fa <MW_update+0x6a>
 9a6:	2b03      	cmp	r3, #3
 9a8:	dc76      	bgt.n	a98 <MW_update+0x108>
 9aa:	2b01      	cmp	r3, #1
 9ac:	dc02      	bgt.n	9b4 <MW_update+0x24>
 9ae:	2b00      	cmp	r3, #0
 9b0:	da7e      	bge.n	ab0 <MW_update+0x120>
 9b2:	e071      	b.n	a98 <MW_update+0x108>
 9b4:	2b02      	cmp	r3, #2
 9b6:	d16f      	bne.n	a98 <MW_update+0x108>
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
 9b8:	4b41      	ldr	r3, [pc, #260]	; (ac0 <MW_update+0x130>)
 9ba:	681b      	ldr	r3, [r3, #0]
 9bc:	4618      	mov	r0, r3
 9be:	f000 f9b9 	bl	d34 <check_timer>
 9c2:	4603      	mov	r3, r0
 9c4:	f242 7210 	movw	r2, #10000	; 0x2710
 9c8:	4293      	cmp	r3, r2
 9ca:	d201      	bcs.n	9d0 <MW_update+0x40>
 9cc:	2300      	movs	r3, #0
 9ce:	e071      	b.n	ab4 <MW_update+0x124>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
 9d0:	4b3b      	ldr	r3, [pc, #236]	; (ac0 <MW_update+0x130>)
 9d2:	681b      	ldr	r3, [r3, #0]
 9d4:	4618      	mov	r0, r3
 9d6:	f000 f99b 	bl	d10 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
 9da:	2200      	movs	r2, #0
 9dc:	2102      	movs	r1, #2
 9de:	4839      	ldr	r0, [pc, #228]	; (ac4 <MW_update+0x134>)
 9e0:	f000 faa2 	bl	f28 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
 9e4:	4b35      	ldr	r3, [pc, #212]	; (abc <MW_update+0x12c>)
 9e6:	2203      	movs	r2, #3
 9e8:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
 9ea:	4b35      	ldr	r3, [pc, #212]	; (ac0 <MW_update+0x130>)
 9ec:	681b      	ldr	r3, [r3, #0]
 9ee:	4618      	mov	r0, r3
 9f0:	f000 f970 	bl	cd4 <start_timer>
			action_taken = true;
 9f4:	2301      	movs	r3, #1
 9f6:	71fb      	strb	r3, [r7, #7]
			break;
 9f8:	e05b      	b.n	ab2 <MW_update+0x122>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
 9fa:	4b31      	ldr	r3, [pc, #196]	; (ac0 <MW_update+0x130>)
 9fc:	681b      	ldr	r3, [r3, #0]
 9fe:	4618      	mov	r0, r3
 a00:	f000 f998 	bl	d34 <check_timer>
 a04:	4602      	mov	r2, r0
 a06:	4b2d      	ldr	r3, [pc, #180]	; (abc <MW_update+0x12c>)
 a08:	699b      	ldr	r3, [r3, #24]
 a0a:	429a      	cmp	r2, r3
 a0c:	d201      	bcs.n	a12 <MW_update+0x82>
 a0e:	2300      	movs	r3, #0
 a10:	e050      	b.n	ab4 <MW_update+0x124>
			//Otherwise dwell timer has elapsed
			action_taken = true;
 a12:	2301      	movs	r3, #1
 a14:	71fb      	strb	r3, [r7, #7]
			stop_timer(MW_TIMER);
 a16:	4b2a      	ldr	r3, [pc, #168]	; (ac0 <MW_update+0x130>)
 a18:	681b      	ldr	r3, [r3, #0]
 a1a:	4618      	mov	r0, r3
 a1c:	f000 f978 	bl	d10 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
 a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 a24:	4827      	ldr	r0, [pc, #156]	; (ac4 <MW_update+0x134>)
 a26:	f000 fa7b 	bl	f20 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
 a2a:	2201      	movs	r2, #1
 a2c:	2102      	movs	r1, #2
 a2e:	4825      	ldr	r0, [pc, #148]	; (ac4 <MW_update+0x134>)
 a30:	f000 fa7a 	bl	f28 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
 a34:	4b21      	ldr	r3, [pc, #132]	; (abc <MW_update+0x12c>)
 a36:	2202      	movs	r2, #2
 a38:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) {
 a3a:	4b20      	ldr	r3, [pc, #128]	; (abc <MW_update+0x12c>)
 a3c:	69da      	ldr	r2, [r3, #28]
 a3e:	4b1f      	ldr	r3, [pc, #124]	; (abc <MW_update+0x12c>)
 a40:	68db      	ldr	r3, [r3, #12]
 a42:	429a      	cmp	r2, r3
 a44:	d10a      	bne.n	a5c <MW_update+0xcc>
				/* All steps completed, tidy up and restart next sweep */
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 a46:	2201      	movs	r2, #1
 a48:	2101      	movs	r1, #1
 a4a:	481f      	ldr	r0, [pc, #124]	; (ac8 <MW_update+0x138>)
 a4c:	f000 fa6c 	bl	f28 <__HAL_GPIO_WritePin_veneer>
				printf("Sweep complete\r\n");
 a50:	481e      	ldr	r0, [pc, #120]	; (acc <MW_update+0x13c>)
 a52:	f000 fa71 	bl	f38 <__puts_veneer>
				start_MW_sweep(); //restart the MW sweep
 a56:	f7ff ff67 	bl	928 <start_MW_sweep>
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
 a5a:	e02a      	b.n	ab2 <MW_update+0x122>
				mw_sweep_settings.current_point++; //increment point counter
 a5c:	4b17      	ldr	r3, [pc, #92]	; (abc <MW_update+0x12c>)
 a5e:	69db      	ldr	r3, [r3, #28]
 a60:	3301      	adds	r3, #1
 a62:	4a16      	ldr	r2, [pc, #88]	; (abc <MW_update+0x12c>)
 a64:	61d3      	str	r3, [r2, #28]
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
 a66:	4b15      	ldr	r3, [pc, #84]	; (abc <MW_update+0x12c>)
 a68:	689a      	ldr	r2, [r3, #8]
 a6a:	4b14      	ldr	r3, [pc, #80]	; (abc <MW_update+0x12c>)
 a6c:	691b      	ldr	r3, [r3, #16]
 a6e:	4913      	ldr	r1, [pc, #76]	; (abc <MW_update+0x12c>)
 a70:	69c9      	ldr	r1, [r1, #28]
 a72:	fb01 f303 	mul.w	r3, r1, r3
 a76:	4413      	add	r3, r2
 a78:	603b      	str	r3, [r7, #0]
				set_frequency(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k, MANUAL_MUTE); //program new MW frequency
 a7a:	4b10      	ldr	r3, [pc, #64]	; (abc <MW_update+0x12c>)
 a7c:	6858      	ldr	r0, [r3, #4]
 a7e:	4b0f      	ldr	r3, [pc, #60]	; (abc <MW_update+0x12c>)
 a80:	785b      	ldrb	r3, [r3, #1]
 a82:	461a      	mov	r2, r3
 a84:	2301      	movs	r3, #1
 a86:	6839      	ldr	r1, [r7, #0]
 a88:	f7ff fc6c 	bl	364 <set_frequency>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
 a8c:	4b0c      	ldr	r3, [pc, #48]	; (ac0 <MW_update+0x130>)
 a8e:	681b      	ldr	r3, [r3, #0]
 a90:	4618      	mov	r0, r3
 a92:	f000 f91f 	bl	cd4 <start_timer>
			break;
 a96:	e00c      	b.n	ab2 <MW_update+0x122>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
 a98:	4b08      	ldr	r3, [pc, #32]	; (abc <MW_update+0x12c>)
 a9a:	781b      	ldrb	r3, [r3, #0]
 a9c:	4619      	mov	r1, r3
 a9e:	480c      	ldr	r0, [pc, #48]	; (ad0 <MW_update+0x140>)
 aa0:	f000 fa32 	bl	f08 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
 aa4:	79bb      	ldrb	r3, [r7, #6]
 aa6:	4619      	mov	r1, r3
 aa8:	480a      	ldr	r0, [pc, #40]	; (ad4 <MW_update+0x144>)
 aaa:	f000 fa2d 	bl	f08 <__printf_veneer>
 aae:	e000      	b.n	ab2 <MW_update+0x122>
			break; //no action to take
 ab0:	bf00      	nop
	}
    return(action_taken);
 ab2:	79fb      	ldrb	r3, [r7, #7]
}
 ab4:	4618      	mov	r0, r3
 ab6:	3708      	adds	r7, #8
 ab8:	46bd      	mov	sp, r7
 aba:	bd80      	pop	{r7, pc}
 abc:	200005c8 	.word	0x200005c8
 ac0:	2000001c 	.word	0x2000001c
 ac4:	58020400 	.word	0x58020400
 ac8:	58021800 	.word	0x58021800
 acc:	0801b310 	.word	0x0801b310
 ad0:	0801b320 	.word	0x0801b320
 ad4:	0801b34c 	.word	0x0801b34c

00000ad8 <MW_frequency_toggle>:


/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
 ad8:	b580      	push	{r7, lr}
 ada:	b090      	sub	sp, #64	; 0x40
 adc:	af02      	add	r7, sp, #8
 ade:	ed87 0b02 	vstr	d0, [r7, #8]
 ae2:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
 ae6:	4864      	ldr	r0, [pc, #400]	; (c78 <MW_frequency_toggle+0x1a0>)
 ae8:	f000 fa26 	bl	f38 <__puts_veneer>
	printf("Toggling between %f and %f Hz\r\n", f_one, f_two);
 aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 af0:	e9cd 2300 	strd	r2, r3, [sp]
 af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 af8:	4860      	ldr	r0, [pc, #384]	; (c7c <MW_frequency_toggle+0x1a4>)
 afa:	f000 fa05 	bl	f08 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
 afe:	ed9f 5b58 	vldr	d5, [pc, #352]	; c60 <MW_frequency_toggle+0x188>
 b02:	ed97 6b02 	vldr	d6, [r7, #8]
 b06:	ee85 7b06 	vdiv.f64	d7, d5, d6
 b0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 b0e:	ee17 3a90 	vmov	r3, s15
 b12:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
 b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 b16:	2b01      	cmp	r3, #1
 b18:	d00b      	beq.n	b32 <MW_frequency_toggle+0x5a>
		while (k_one > 62 || k_one % 2) {
 b1a:	e002      	b.n	b22 <MW_frequency_toggle+0x4a>
			k_one--;
 b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 b1e:	3b01      	subs	r3, #1
 b20:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
 b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 b24:	2b3e      	cmp	r3, #62	; 0x3e
 b26:	d8f9      	bhi.n	b1c <MW_frequency_toggle+0x44>
 b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 b2a:	f003 0301 	and.w	r3, r3, #1
 b2e:	2b00      	cmp	r3, #0
 b30:	d1f4      	bne.n	b1c <MW_frequency_toggle+0x44>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
 b32:	ed9f 5b4b 	vldr	d5, [pc, #300]	; c60 <MW_frequency_toggle+0x188>
 b36:	ed97 6b00 	vldr	d6, [r7]
 b3a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 b3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 b42:	ee17 3a90 	vmov	r3, s15
 b46:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
 b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 b4a:	2b01      	cmp	r3, #1
 b4c:	d00b      	beq.n	b66 <MW_frequency_toggle+0x8e>
		while (k_two > 62 || k_two % 2) {
 b4e:	e002      	b.n	b56 <MW_frequency_toggle+0x7e>
			k_two--;
 b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 b52:	3b01      	subs	r3, #1
 b54:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
 b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 b58:	2b3e      	cmp	r3, #62	; 0x3e
 b5a:	d8f9      	bhi.n	b50 <MW_frequency_toggle+0x78>
 b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 b5e:	f003 0301 	and.w	r3, r3, #1
 b62:	2b00      	cmp	r3, #0
 b64:	d1f4      	bne.n	b50 <MW_frequency_toggle+0x78>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
 b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 b68:	ee07 3a90 	vmov	s15, r3
 b6c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 b70:	ed97 7b02 	vldr	d7, [r7, #8]
 b74:	ee26 6b07 	vmul.f64	d6, d6, d7
 b78:	ed9f 5b3b 	vldr	d5, [pc, #236]	; c68 <MW_frequency_toggle+0x190>
 b7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 b80:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
 b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 b86:	ee07 3a90 	vmov	s15, r3
 b8a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 b8e:	ed97 7b00 	vldr	d7, [r7]
 b92:	ee26 6b07 	vmul.f64	d6, d6, d7
 b96:	ed9f 5b34 	vldr	d5, [pc, #208]	; c68 <MW_frequency_toggle+0x190>
 b9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 b9e:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
 ba2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 ba6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 baa:	ee17 3a90 	vmov	r3, s15
 bae:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
 bb0:	69fb      	ldr	r3, [r7, #28]
 bb2:	ee07 3a90 	vmov	s15, r3
 bb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 bba:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 bbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 bc2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; c70 <MW_frequency_toggle+0x198>
 bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 bca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 bce:	ee37 7b06 	vadd.f64	d7, d7, d6
 bd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 bd6:	ee17 3a90 	vmov	r3, s15
 bda:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
 bdc:	ed97 7b08 	vldr	d7, [r7, #32]
 be0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 be4:	ee17 3a90 	vmov	r3, s15
 be8:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
 bea:	697b      	ldr	r3, [r7, #20]
 bec:	ee07 3a90 	vmov	s15, r3
 bf0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 bf4:	ed97 6b08 	vldr	d6, [r7, #32]
 bf8:	ee36 7b47 	vsub.f64	d7, d6, d7
 bfc:	ed9f 6b1c 	vldr	d6, [pc, #112]	; c70 <MW_frequency_toggle+0x198>
 c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 c04:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 c08:	ee37 7b06 	vadd.f64	d7, d7, d6
 c0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 c10:	ee17 3a90 	vmov	r3, s15
 c14:	613b      	str	r3, [r7, #16]

	while (1) {
	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
 c16:	2301      	movs	r3, #1
 c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 c1a:	69b9      	ldr	r1, [r7, #24]
 c1c:	69f8      	ldr	r0, [r7, #28]
 c1e:	f7ff fba1 	bl	364 <set_frequency>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 c22:	2200      	movs	r2, #0
 c24:	2101      	movs	r1, #1
 c26:	4816      	ldr	r0, [pc, #88]	; (c80 <MW_frequency_toggle+0x1a8>)
 c28:	f000 f97e 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
 c2c:	4b15      	ldr	r3, [pc, #84]	; (c84 <MW_frequency_toggle+0x1ac>)
 c2e:	681b      	ldr	r3, [r3, #0]
 c30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 c34:	4618      	mov	r0, r3
 c36:	f000 f889 	bl	d4c <timer_delay>
	set_frequency(N_two_INT, N_two_FRAC, k_two, MANUAL_MUTE); //Program necessary values for f_two
 c3a:	2301      	movs	r3, #1
 c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c3e:	6939      	ldr	r1, [r7, #16]
 c40:	6978      	ldr	r0, [r7, #20]
 c42:	f7ff fb8f 	bl	364 <set_frequency>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 c46:	2201      	movs	r2, #1
 c48:	2101      	movs	r1, #1
 c4a:	480d      	ldr	r0, [pc, #52]	; (c80 <MW_frequency_toggle+0x1a8>)
 c4c:	f000 f96c 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
 c50:	4b0c      	ldr	r3, [pc, #48]	; (c84 <MW_frequency_toggle+0x1ac>)
 c52:	681b      	ldr	r3, [r3, #0]
 c54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 c58:	4618      	mov	r0, r3
 c5a:	f000 f877 	bl	d4c <timer_delay>
	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
 c5e:	e7da      	b.n	c16 <MW_frequency_toggle+0x13e>
 c60:	20000000 	.word	0x20000000
 c64:	41ee8c21 	.word	0x41ee8c21
 c68:	00000000 	.word	0x00000000
 c6c:	4187d784 	.word	0x4187d784
 c70:	00000000 	.word	0x00000000
 c74:	41700000 	.word	0x41700000
 c78:	0801b364 	.word	0x0801b364
 c7c:	0801b388 	.word	0x0801b388
 c80:	58021800 	.word	0x58021800
 c84:	20000018 	.word	0x20000018

00000c88 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
 c88:	b580      	push	{r7, lr}
 c8a:	b084      	sub	sp, #16
 c8c:	af00      	add	r7, sp, #0
 c8e:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
 c90:	2300      	movs	r3, #0
 c92:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
 c94:	687b      	ldr	r3, [r7, #4]
 c96:	2b1f      	cmp	r3, #31
 c98:	d904      	bls.n	ca4 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
 c9a:	480d      	ldr	r0, [pc, #52]	; (cd0 <set_SDO_output+0x48>)
 c9c:	f000 f94c 	bl	f38 <__puts_veneer>
		Error_Handler();
 ca0:	f000 f92e 	bl	f00 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
 ca4:	200f      	movs	r0, #15
 ca6:	f7ff fa25 	bl	f4 <synth_readreg>
 caa:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
 cac:	68fb      	ldr	r3, [r7, #12]
 cae:	f023 031f 	bic.w	r3, r3, #31
 cb2:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
 cb4:	68fa      	ldr	r2, [r7, #12]
 cb6:	687b      	ldr	r3, [r7, #4]
 cb8:	4313      	orrs	r3, r2
 cba:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
 cbc:	2301      	movs	r3, #1
 cbe:	2200      	movs	r2, #0
 cc0:	210f      	movs	r1, #15
 cc2:	68f8      	ldr	r0, [r7, #12]
 cc4:	f7ff f99c 	bl	0 <synth_writereg>
}
 cc8:	bf00      	nop
 cca:	3710      	adds	r7, #16
 ccc:	46bd      	mov	sp, r7
 cce:	bd80      	pop	{r7, pc}
 cd0:	0801b3a8 	.word	0x0801b3a8

00000cd4 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
 cd4:	b480      	push	{r7}
 cd6:	b083      	sub	sp, #12
 cd8:	af00      	add	r7, sp, #0
 cda:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 cdc:	687b      	ldr	r3, [r7, #4]
 cde:	681b      	ldr	r3, [r3, #0]
 ce0:	f023 0201 	bic.w	r2, r3, #1
 ce4:	687b      	ldr	r3, [r7, #4]
 ce6:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 ce8:	687b      	ldr	r3, [r7, #4]
 cea:	695b      	ldr	r3, [r3, #20]
 cec:	f043 0201 	orr.w	r2, r3, #1
 cf0:	687b      	ldr	r3, [r7, #4]
 cf2:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
 cf4:	687b      	ldr	r3, [r7, #4]
 cf6:	681b      	ldr	r3, [r3, #0]
 cf8:	f043 0201 	orr.w	r2, r3, #1
 cfc:	687b      	ldr	r3, [r7, #4]
 cfe:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
 d00:	687b      	ldr	r3, [r7, #4]
 d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 d04:	4618      	mov	r0, r3
 d06:	370c      	adds	r7, #12
 d08:	46bd      	mov	sp, r7
 d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 d0e:	4770      	bx	lr

00000d10 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
 d10:	b480      	push	{r7}
 d12:	b083      	sub	sp, #12
 d14:	af00      	add	r7, sp, #0
 d16:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 d18:	687b      	ldr	r3, [r7, #4]
 d1a:	681b      	ldr	r3, [r3, #0]
 d1c:	f023 0201 	bic.w	r2, r3, #1
 d20:	687b      	ldr	r3, [r7, #4]
 d22:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 d24:	687b      	ldr	r3, [r7, #4]
 d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 d28:	4618      	mov	r0, r3
 d2a:	370c      	adds	r7, #12
 d2c:	46bd      	mov	sp, r7
 d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 d32:	4770      	bx	lr

00000d34 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
 d34:	b480      	push	{r7}
 d36:	b083      	sub	sp, #12
 d38:	af00      	add	r7, sp, #0
 d3a:	6078      	str	r0, [r7, #4]

	return timer->CNT;
 d3c:	687b      	ldr	r3, [r7, #4]
 d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 d40:	4618      	mov	r0, r3
 d42:	370c      	adds	r7, #12
 d44:	46bd      	mov	sp, r7
 d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 d4a:	4770      	bx	lr

00000d4c <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
 d4c:	b580      	push	{r7, lr}
 d4e:	b084      	sub	sp, #16
 d50:	af00      	add	r7, sp, #0
 d52:	6078      	str	r0, [r7, #4]
 d54:	6039      	str	r1, [r7, #0]

	/* Note that we don't consider overflow.
	 * MW_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms */

	uint32_t start = start_timer(timer);
 d56:	6878      	ldr	r0, [r7, #4]
 d58:	f7ff ffbc 	bl	cd4 <start_timer>
 d5c:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
 d5e:	bf00      	nop
 d60:	687b      	ldr	r3, [r7, #4]
 d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 d64:	683a      	ldr	r2, [r7, #0]
 d66:	429a      	cmp	r2, r3
 d68:	d8fa      	bhi.n	d60 <timer_delay+0x14>

	stop_timer(timer);
 d6a:	6878      	ldr	r0, [r7, #4]
 d6c:	f7ff ffd0 	bl	d10 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
 d70:	bf00      	nop
 d72:	3710      	adds	r7, #16
 d74:	46bd      	mov	sp, r7
 d76:	bd80      	pop	{r7, pc}

00000d78 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
 d78:	b580      	push	{r7, lr}
 d7a:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 d7c:	f240 1103 	movw	r1, #259	; 0x103
 d80:	480f      	ldr	r0, [pc, #60]	; (dc0 <start_pop+0x48>)
 d82:	f000 f8c9 	bl	f18 <__HAL_HRTIM_WaveformOutputStart_veneer>
 d86:	4603      	mov	r3, r0
 d88:	2b00      	cmp	r3, #0
 d8a:	d004      	beq.n	d96 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
 d8c:	480d      	ldr	r0, [pc, #52]	; (dc4 <start_pop+0x4c>)
 d8e:	f000 f8d3 	bl	f38 <__puts_veneer>
		Error_Handler();
 d92:	f000 f8b5 	bl	f00 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 d96:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 d9a:	4809      	ldr	r0, [pc, #36]	; (dc0 <start_pop+0x48>)
 d9c:	f000 f8a8 	bl	ef0 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 da0:	4603      	mov	r3, r0
 da2:	2b00      	cmp	r3, #0
 da4:	d004      	beq.n	db0 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 da6:	4808      	ldr	r0, [pc, #32]	; (dc8 <start_pop+0x50>)
 da8:	f000 f8c6 	bl	f38 <__puts_veneer>
		Error_Handler();
 dac:	f000 f8a8 	bl	f00 <__Error_Handler_veneer>
	}

	pop_running = true;
 db0:	4b06      	ldr	r3, [pc, #24]	; (dcc <start_pop+0x54>)
 db2:	2201      	movs	r2, #1
 db4:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 db6:	4806      	ldr	r0, [pc, #24]	; (dd0 <start_pop+0x58>)
 db8:	f000 f8be 	bl	f38 <__puts_veneer>

}
 dbc:	bf00      	nop
 dbe:	bd80      	pop	{r7, pc}
 dc0:	2000037c 	.word	0x2000037c
 dc4:	0801b3cc 	.word	0x0801b3cc
 dc8:	0801b3e4 	.word	0x0801b3e4
 dcc:	200005f0 	.word	0x200005f0
 dd0:	0801b3fc 	.word	0x0801b3fc

00000dd4 <stop_pop>:
void stop_pop() {
 dd4:	b580      	push	{r7, lr}
 dd6:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 dd8:	f240 1103 	movw	r1, #259	; 0x103
 ddc:	4813      	ldr	r0, [pc, #76]	; (e2c <stop_pop+0x58>)
 dde:	f000 f883 	bl	ee8 <__HAL_HRTIM_WaveformOutputStop_veneer>
 de2:	4603      	mov	r3, r0
 de4:	2b00      	cmp	r3, #0
 de6:	d004      	beq.n	df2 <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 de8:	4811      	ldr	r0, [pc, #68]	; (e30 <stop_pop+0x5c>)
 dea:	f000 f8a5 	bl	f38 <__puts_veneer>
		Error_Handler();
 dee:	f000 f887 	bl	f00 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 df2:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 df6:	480d      	ldr	r0, [pc, #52]	; (e2c <stop_pop+0x58>)
 df8:	f000 f89a 	bl	f30 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 dfc:	4603      	mov	r3, r0
 dfe:	2b00      	cmp	r3, #0
 e00:	d004      	beq.n	e0c <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 e02:	480c      	ldr	r0, [pc, #48]	; (e34 <stop_pop+0x60>)
 e04:	f000 f898 	bl	f38 <__puts_veneer>
		Error_Handler();
 e08:	f000 f87a 	bl	f00 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 e0c:	4b0a      	ldr	r3, [pc, #40]	; (e38 <stop_pop+0x64>)
 e0e:	2200      	movs	r2, #0
 e10:	601a      	str	r2, [r3, #0]
	pop_running = false;
 e12:	4b0a      	ldr	r3, [pc, #40]	; (e3c <stop_pop+0x68>)
 e14:	2200      	movs	r2, #0
 e16:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
 e18:	2200      	movs	r2, #0
 e1a:	2102      	movs	r1, #2
 e1c:	4808      	ldr	r0, [pc, #32]	; (e40 <stop_pop+0x6c>)
 e1e:	f000 f883 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 e22:	4808      	ldr	r0, [pc, #32]	; (e44 <stop_pop+0x70>)
 e24:	f000 f888 	bl	f38 <__puts_veneer>
}
 e28:	bf00      	nop
 e2a:	bd80      	pop	{r7, pc}
 e2c:	2000037c 	.word	0x2000037c
 e30:	0801b410 	.word	0x0801b410
 e34:	0801b428 	.word	0x0801b428
 e38:	200005ec 	.word	0x200005ec
 e3c:	200005f0 	.word	0x200005f0
 e40:	58021000 	.word	0x58021000
 e44:	0801b440 	.word	0x0801b440

00000e48 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 e48:	b580      	push	{r7, lr}
 e4a:	b082      	sub	sp, #8
 e4c:	af00      	add	r7, sp, #0
 e4e:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 e50:	2201      	movs	r2, #1
 e52:	2180      	movs	r1, #128	; 0x80
 e54:	4822      	ldr	r0, [pc, #136]	; (ee0 <set_aom_atten+0x98>)
 e56:	f000 f867 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 e5a:	793b      	ldrb	r3, [r7, #4]
 e5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 e60:	b2db      	uxtb	r3, r3
 e62:	461a      	mov	r2, r3
 e64:	2140      	movs	r1, #64	; 0x40
 e66:	481e      	ldr	r0, [pc, #120]	; (ee0 <set_aom_atten+0x98>)
 e68:	f000 f85e 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 e6c:	793b      	ldrb	r3, [r7, #4]
 e6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 e72:	b2db      	uxtb	r3, r3
 e74:	461a      	mov	r2, r3
 e76:	2120      	movs	r1, #32
 e78:	4819      	ldr	r0, [pc, #100]	; (ee0 <set_aom_atten+0x98>)
 e7a:	f000 f855 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 e7e:	793b      	ldrb	r3, [r7, #4]
 e80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 e84:	b2db      	uxtb	r3, r3
 e86:	461a      	mov	r2, r3
 e88:	2110      	movs	r1, #16
 e8a:	4815      	ldr	r0, [pc, #84]	; (ee0 <set_aom_atten+0x98>)
 e8c:	f000 f84c 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 e90:	793b      	ldrb	r3, [r7, #4]
 e92:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 e96:	b2db      	uxtb	r3, r3
 e98:	461a      	mov	r2, r3
 e9a:	2108      	movs	r1, #8
 e9c:	4810      	ldr	r0, [pc, #64]	; (ee0 <set_aom_atten+0x98>)
 e9e:	f000 f843 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 ea2:	793b      	ldrb	r3, [r7, #4]
 ea4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 ea8:	b2db      	uxtb	r3, r3
 eaa:	461a      	mov	r2, r3
 eac:	2104      	movs	r1, #4
 eae:	480d      	ldr	r0, [pc, #52]	; (ee4 <set_aom_atten+0x9c>)
 eb0:	f000 f83a 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 eb4:	793b      	ldrb	r3, [r7, #4]
 eb6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 eba:	b2db      	uxtb	r3, r3
 ebc:	461a      	mov	r2, r3
 ebe:	2110      	movs	r1, #16
 ec0:	4808      	ldr	r0, [pc, #32]	; (ee4 <set_aom_atten+0x9c>)
 ec2:	f000 f831 	bl	f28 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 ec6:	793b      	ldrb	r3, [r7, #4]
 ec8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 ecc:	b2db      	uxtb	r3, r3
 ece:	461a      	mov	r2, r3
 ed0:	2120      	movs	r1, #32
 ed2:	4804      	ldr	r0, [pc, #16]	; (ee4 <set_aom_atten+0x9c>)
 ed4:	f000 f828 	bl	f28 <__HAL_GPIO_WritePin_veneer>
}
 ed8:	bf00      	nop
 eda:	3708      	adds	r7, #8
 edc:	46bd      	mov	sp, r7
 ede:	bd80      	pop	{r7, pc}
 ee0:	58020c00 	.word	0x58020c00
 ee4:	58021000 	.word	0x58021000

00000ee8 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 ee8:	f85f f000 	ldr.w	pc, [pc]	; eec <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 eec:	080073fd 	.word	0x080073fd

00000ef0 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 ef0:	f85f f000 	ldr.w	pc, [pc]	; ef4 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 ef4:	08007459 	.word	0x08007459

00000ef8 <__HAL_Delay_veneer>:
 ef8:	f85f f000 	ldr.w	pc, [pc]	; efc <__HAL_Delay_veneer+0x4>
 efc:	08003205 	.word	0x08003205

00000f00 <__Error_Handler_veneer>:
 f00:	f85f f000 	ldr.w	pc, [pc]	; f04 <__Error_Handler_veneer+0x4>
 f04:	080023c9 	.word	0x080023c9

00000f08 <__printf_veneer>:
 f08:	f85f f000 	ldr.w	pc, [pc]	; f0c <__printf_veneer+0x4>
 f0c:	08018e4d 	.word	0x08018e4d

00000f10 <__HAL_GPIO_ReadPin_veneer>:
 f10:	f85f f000 	ldr.w	pc, [pc]	; f14 <__HAL_GPIO_ReadPin_veneer+0x4>
 f14:	08006cb1 	.word	0x08006cb1

00000f18 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 f18:	f85f f000 	ldr.w	pc, [pc]	; f1c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 f1c:	080073a3 	.word	0x080073a3

00000f20 <__HAL_GPIO_TogglePin_veneer>:
 f20:	f85f f000 	ldr.w	pc, [pc]	; f24 <__HAL_GPIO_TogglePin_veneer+0x4>
 f24:	08006d13 	.word	0x08006d13

00000f28 <__HAL_GPIO_WritePin_veneer>:
 f28:	f85f f000 	ldr.w	pc, [pc]	; f2c <__HAL_GPIO_WritePin_veneer+0x4>
 f2c:	08006ce1 	.word	0x08006ce1

00000f30 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 f30:	f85f f000 	ldr.w	pc, [pc]	; f34 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 f34:	08007539 	.word	0x08007539

00000f38 <__puts_veneer>:
 f38:	f85f f000 	ldr.w	pc, [pc]	; f3c <__puts_veneer+0x4>
 f3c:	08018f19 	.word	0x08018f19

Disassembly of section .text:

080011e0 <__do_global_dtors_aux>:
 80011e0:	b510      	push	{r4, lr}
 80011e2:	4c05      	ldr	r4, [pc, #20]	; (80011f8 <__do_global_dtors_aux+0x18>)
 80011e4:	7823      	ldrb	r3, [r4, #0]
 80011e6:	b933      	cbnz	r3, 80011f6 <__do_global_dtors_aux+0x16>
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__do_global_dtors_aux+0x1c>)
 80011ea:	b113      	cbz	r3, 80011f2 <__do_global_dtors_aux+0x12>
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <__do_global_dtors_aux+0x20>)
 80011ee:	f3af 8000 	nop.w
 80011f2:	2301      	movs	r3, #1
 80011f4:	7023      	strb	r3, [r4, #0]
 80011f6:	bd10      	pop	{r4, pc}
 80011f8:	200002e8 	.word	0x200002e8
 80011fc:	00000000 	.word	0x00000000
 8001200:	0801ad50 	.word	0x0801ad50

08001204 <frame_dummy>:
 8001204:	b508      	push	{r3, lr}
 8001206:	4b03      	ldr	r3, [pc, #12]	; (8001214 <frame_dummy+0x10>)
 8001208:	b11b      	cbz	r3, 8001212 <frame_dummy+0xe>
 800120a:	4903      	ldr	r1, [pc, #12]	; (8001218 <frame_dummy+0x14>)
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <frame_dummy+0x18>)
 800120e:	f3af 8000 	nop.w
 8001212:	bd08      	pop	{r3, pc}
 8001214:	00000000 	.word	0x00000000
 8001218:	200002ec 	.word	0x200002ec
 800121c:	0801ad50 	.word	0x0801ad50

08001220 <memchr>:
 8001220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001224:	2a10      	cmp	r2, #16
 8001226:	db2b      	blt.n	8001280 <memchr+0x60>
 8001228:	f010 0f07 	tst.w	r0, #7
 800122c:	d008      	beq.n	8001240 <memchr+0x20>
 800122e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001232:	3a01      	subs	r2, #1
 8001234:	428b      	cmp	r3, r1
 8001236:	d02d      	beq.n	8001294 <memchr+0x74>
 8001238:	f010 0f07 	tst.w	r0, #7
 800123c:	b342      	cbz	r2, 8001290 <memchr+0x70>
 800123e:	d1f6      	bne.n	800122e <memchr+0xe>
 8001240:	b4f0      	push	{r4, r5, r6, r7}
 8001242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800124a:	f022 0407 	bic.w	r4, r2, #7
 800124e:	f07f 0700 	mvns.w	r7, #0
 8001252:	2300      	movs	r3, #0
 8001254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001258:	3c08      	subs	r4, #8
 800125a:	ea85 0501 	eor.w	r5, r5, r1
 800125e:	ea86 0601 	eor.w	r6, r6, r1
 8001262:	fa85 f547 	uadd8	r5, r5, r7
 8001266:	faa3 f587 	sel	r5, r3, r7
 800126a:	fa86 f647 	uadd8	r6, r6, r7
 800126e:	faa5 f687 	sel	r6, r5, r7
 8001272:	b98e      	cbnz	r6, 8001298 <memchr+0x78>
 8001274:	d1ee      	bne.n	8001254 <memchr+0x34>
 8001276:	bcf0      	pop	{r4, r5, r6, r7}
 8001278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800127c:	f002 0207 	and.w	r2, r2, #7
 8001280:	b132      	cbz	r2, 8001290 <memchr+0x70>
 8001282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001286:	3a01      	subs	r2, #1
 8001288:	ea83 0301 	eor.w	r3, r3, r1
 800128c:	b113      	cbz	r3, 8001294 <memchr+0x74>
 800128e:	d1f8      	bne.n	8001282 <memchr+0x62>
 8001290:	2000      	movs	r0, #0
 8001292:	4770      	bx	lr
 8001294:	3801      	subs	r0, #1
 8001296:	4770      	bx	lr
 8001298:	2d00      	cmp	r5, #0
 800129a:	bf06      	itte	eq
 800129c:	4635      	moveq	r5, r6
 800129e:	3803      	subeq	r0, #3
 80012a0:	3807      	subne	r0, #7
 80012a2:	f015 0f01 	tst.w	r5, #1
 80012a6:	d107      	bne.n	80012b8 <memchr+0x98>
 80012a8:	3001      	adds	r0, #1
 80012aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80012ae:	bf02      	ittt	eq
 80012b0:	3001      	addeq	r0, #1
 80012b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80012b6:	3001      	addeq	r0, #1
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	3801      	subs	r0, #1
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <strlen>:
 80012c0:	4603      	mov	r3, r0
 80012c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d1fb      	bne.n	80012c2 <strlen+0x2>
 80012ca:	1a18      	subs	r0, r3, r0
 80012cc:	3801      	subs	r0, #1
 80012ce:	4770      	bx	lr

080012d0 <__aeabi_uldivmod>:
 80012d0:	b953      	cbnz	r3, 80012e8 <__aeabi_uldivmod+0x18>
 80012d2:	b94a      	cbnz	r2, 80012e8 <__aeabi_uldivmod+0x18>
 80012d4:	2900      	cmp	r1, #0
 80012d6:	bf08      	it	eq
 80012d8:	2800      	cmpeq	r0, #0
 80012da:	bf1c      	itt	ne
 80012dc:	f04f 31ff 	movne.w	r1, #4294967295
 80012e0:	f04f 30ff 	movne.w	r0, #4294967295
 80012e4:	f000 b970 	b.w	80015c8 <__aeabi_idiv0>
 80012e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80012ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80012f0:	f000 f806 	bl	8001300 <__udivmoddi4>
 80012f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012fc:	b004      	add	sp, #16
 80012fe:	4770      	bx	lr

08001300 <__udivmoddi4>:
 8001300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001304:	9e08      	ldr	r6, [sp, #32]
 8001306:	460d      	mov	r5, r1
 8001308:	4604      	mov	r4, r0
 800130a:	460f      	mov	r7, r1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d14a      	bne.n	80013a6 <__udivmoddi4+0xa6>
 8001310:	428a      	cmp	r2, r1
 8001312:	4694      	mov	ip, r2
 8001314:	d965      	bls.n	80013e2 <__udivmoddi4+0xe2>
 8001316:	fab2 f382 	clz	r3, r2
 800131a:	b143      	cbz	r3, 800132e <__udivmoddi4+0x2e>
 800131c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001320:	f1c3 0220 	rsb	r2, r3, #32
 8001324:	409f      	lsls	r7, r3
 8001326:	fa20 f202 	lsr.w	r2, r0, r2
 800132a:	4317      	orrs	r7, r2
 800132c:	409c      	lsls	r4, r3
 800132e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001332:	fa1f f58c 	uxth.w	r5, ip
 8001336:	fbb7 f1fe 	udiv	r1, r7, lr
 800133a:	0c22      	lsrs	r2, r4, #16
 800133c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001344:	fb01 f005 	mul.w	r0, r1, r5
 8001348:	4290      	cmp	r0, r2
 800134a:	d90a      	bls.n	8001362 <__udivmoddi4+0x62>
 800134c:	eb1c 0202 	adds.w	r2, ip, r2
 8001350:	f101 37ff 	add.w	r7, r1, #4294967295
 8001354:	f080 811c 	bcs.w	8001590 <__udivmoddi4+0x290>
 8001358:	4290      	cmp	r0, r2
 800135a:	f240 8119 	bls.w	8001590 <__udivmoddi4+0x290>
 800135e:	3902      	subs	r1, #2
 8001360:	4462      	add	r2, ip
 8001362:	1a12      	subs	r2, r2, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	fbb2 f0fe 	udiv	r0, r2, lr
 800136a:	fb0e 2210 	mls	r2, lr, r0, r2
 800136e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001372:	fb00 f505 	mul.w	r5, r0, r5
 8001376:	42a5      	cmp	r5, r4
 8001378:	d90a      	bls.n	8001390 <__udivmoddi4+0x90>
 800137a:	eb1c 0404 	adds.w	r4, ip, r4
 800137e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001382:	f080 8107 	bcs.w	8001594 <__udivmoddi4+0x294>
 8001386:	42a5      	cmp	r5, r4
 8001388:	f240 8104 	bls.w	8001594 <__udivmoddi4+0x294>
 800138c:	4464      	add	r4, ip
 800138e:	3802      	subs	r0, #2
 8001390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001394:	1b64      	subs	r4, r4, r5
 8001396:	2100      	movs	r1, #0
 8001398:	b11e      	cbz	r6, 80013a2 <__udivmoddi4+0xa2>
 800139a:	40dc      	lsrs	r4, r3
 800139c:	2300      	movs	r3, #0
 800139e:	e9c6 4300 	strd	r4, r3, [r6]
 80013a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a6:	428b      	cmp	r3, r1
 80013a8:	d908      	bls.n	80013bc <__udivmoddi4+0xbc>
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	f000 80ed 	beq.w	800158a <__udivmoddi4+0x28a>
 80013b0:	2100      	movs	r1, #0
 80013b2:	e9c6 0500 	strd	r0, r5, [r6]
 80013b6:	4608      	mov	r0, r1
 80013b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013bc:	fab3 f183 	clz	r1, r3
 80013c0:	2900      	cmp	r1, #0
 80013c2:	d149      	bne.n	8001458 <__udivmoddi4+0x158>
 80013c4:	42ab      	cmp	r3, r5
 80013c6:	d302      	bcc.n	80013ce <__udivmoddi4+0xce>
 80013c8:	4282      	cmp	r2, r0
 80013ca:	f200 80f8 	bhi.w	80015be <__udivmoddi4+0x2be>
 80013ce:	1a84      	subs	r4, r0, r2
 80013d0:	eb65 0203 	sbc.w	r2, r5, r3
 80013d4:	2001      	movs	r0, #1
 80013d6:	4617      	mov	r7, r2
 80013d8:	2e00      	cmp	r6, #0
 80013da:	d0e2      	beq.n	80013a2 <__udivmoddi4+0xa2>
 80013dc:	e9c6 4700 	strd	r4, r7, [r6]
 80013e0:	e7df      	b.n	80013a2 <__udivmoddi4+0xa2>
 80013e2:	b902      	cbnz	r2, 80013e6 <__udivmoddi4+0xe6>
 80013e4:	deff      	udf	#255	; 0xff
 80013e6:	fab2 f382 	clz	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 8090 	bne.w	8001510 <__udivmoddi4+0x210>
 80013f0:	1a8a      	subs	r2, r1, r2
 80013f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013f6:	fa1f fe8c 	uxth.w	lr, ip
 80013fa:	2101      	movs	r1, #1
 80013fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8001400:	fb07 2015 	mls	r0, r7, r5, r2
 8001404:	0c22      	lsrs	r2, r4, #16
 8001406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800140a:	fb0e f005 	mul.w	r0, lr, r5
 800140e:	4290      	cmp	r0, r2
 8001410:	d908      	bls.n	8001424 <__udivmoddi4+0x124>
 8001412:	eb1c 0202 	adds.w	r2, ip, r2
 8001416:	f105 38ff 	add.w	r8, r5, #4294967295
 800141a:	d202      	bcs.n	8001422 <__udivmoddi4+0x122>
 800141c:	4290      	cmp	r0, r2
 800141e:	f200 80cb 	bhi.w	80015b8 <__udivmoddi4+0x2b8>
 8001422:	4645      	mov	r5, r8
 8001424:	1a12      	subs	r2, r2, r0
 8001426:	b2a4      	uxth	r4, r4
 8001428:	fbb2 f0f7 	udiv	r0, r2, r7
 800142c:	fb07 2210 	mls	r2, r7, r0, r2
 8001430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001434:	fb0e fe00 	mul.w	lr, lr, r0
 8001438:	45a6      	cmp	lr, r4
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x14e>
 800143c:	eb1c 0404 	adds.w	r4, ip, r4
 8001440:	f100 32ff 	add.w	r2, r0, #4294967295
 8001444:	d202      	bcs.n	800144c <__udivmoddi4+0x14c>
 8001446:	45a6      	cmp	lr, r4
 8001448:	f200 80bb 	bhi.w	80015c2 <__udivmoddi4+0x2c2>
 800144c:	4610      	mov	r0, r2
 800144e:	eba4 040e 	sub.w	r4, r4, lr
 8001452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001456:	e79f      	b.n	8001398 <__udivmoddi4+0x98>
 8001458:	f1c1 0720 	rsb	r7, r1, #32
 800145c:	408b      	lsls	r3, r1
 800145e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001462:	ea4c 0c03 	orr.w	ip, ip, r3
 8001466:	fa05 f401 	lsl.w	r4, r5, r1
 800146a:	fa20 f307 	lsr.w	r3, r0, r7
 800146e:	40fd      	lsrs	r5, r7
 8001470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001474:	4323      	orrs	r3, r4
 8001476:	fbb5 f8f9 	udiv	r8, r5, r9
 800147a:	fa1f fe8c 	uxth.w	lr, ip
 800147e:	fb09 5518 	mls	r5, r9, r8, r5
 8001482:	0c1c      	lsrs	r4, r3, #16
 8001484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001488:	fb08 f50e 	mul.w	r5, r8, lr
 800148c:	42a5      	cmp	r5, r4
 800148e:	fa02 f201 	lsl.w	r2, r2, r1
 8001492:	fa00 f001 	lsl.w	r0, r0, r1
 8001496:	d90b      	bls.n	80014b0 <__udivmoddi4+0x1b0>
 8001498:	eb1c 0404 	adds.w	r4, ip, r4
 800149c:	f108 3aff 	add.w	sl, r8, #4294967295
 80014a0:	f080 8088 	bcs.w	80015b4 <__udivmoddi4+0x2b4>
 80014a4:	42a5      	cmp	r5, r4
 80014a6:	f240 8085 	bls.w	80015b4 <__udivmoddi4+0x2b4>
 80014aa:	f1a8 0802 	sub.w	r8, r8, #2
 80014ae:	4464      	add	r4, ip
 80014b0:	1b64      	subs	r4, r4, r5
 80014b2:	b29d      	uxth	r5, r3
 80014b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80014b8:	fb09 4413 	mls	r4, r9, r3, r4
 80014bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80014c4:	45a6      	cmp	lr, r4
 80014c6:	d908      	bls.n	80014da <__udivmoddi4+0x1da>
 80014c8:	eb1c 0404 	adds.w	r4, ip, r4
 80014cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80014d0:	d26c      	bcs.n	80015ac <__udivmoddi4+0x2ac>
 80014d2:	45a6      	cmp	lr, r4
 80014d4:	d96a      	bls.n	80015ac <__udivmoddi4+0x2ac>
 80014d6:	3b02      	subs	r3, #2
 80014d8:	4464      	add	r4, ip
 80014da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80014de:	fba3 9502 	umull	r9, r5, r3, r2
 80014e2:	eba4 040e 	sub.w	r4, r4, lr
 80014e6:	42ac      	cmp	r4, r5
 80014e8:	46c8      	mov	r8, r9
 80014ea:	46ae      	mov	lr, r5
 80014ec:	d356      	bcc.n	800159c <__udivmoddi4+0x29c>
 80014ee:	d053      	beq.n	8001598 <__udivmoddi4+0x298>
 80014f0:	b156      	cbz	r6, 8001508 <__udivmoddi4+0x208>
 80014f2:	ebb0 0208 	subs.w	r2, r0, r8
 80014f6:	eb64 040e 	sbc.w	r4, r4, lr
 80014fa:	fa04 f707 	lsl.w	r7, r4, r7
 80014fe:	40ca      	lsrs	r2, r1
 8001500:	40cc      	lsrs	r4, r1
 8001502:	4317      	orrs	r7, r2
 8001504:	e9c6 7400 	strd	r7, r4, [r6]
 8001508:	4618      	mov	r0, r3
 800150a:	2100      	movs	r1, #0
 800150c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001510:	f1c3 0120 	rsb	r1, r3, #32
 8001514:	fa02 fc03 	lsl.w	ip, r2, r3
 8001518:	fa20 f201 	lsr.w	r2, r0, r1
 800151c:	fa25 f101 	lsr.w	r1, r5, r1
 8001520:	409d      	lsls	r5, r3
 8001522:	432a      	orrs	r2, r5
 8001524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001528:	fa1f fe8c 	uxth.w	lr, ip
 800152c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001530:	fb07 1510 	mls	r5, r7, r0, r1
 8001534:	0c11      	lsrs	r1, r2, #16
 8001536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800153a:	fb00 f50e 	mul.w	r5, r0, lr
 800153e:	428d      	cmp	r5, r1
 8001540:	fa04 f403 	lsl.w	r4, r4, r3
 8001544:	d908      	bls.n	8001558 <__udivmoddi4+0x258>
 8001546:	eb1c 0101 	adds.w	r1, ip, r1
 800154a:	f100 38ff 	add.w	r8, r0, #4294967295
 800154e:	d22f      	bcs.n	80015b0 <__udivmoddi4+0x2b0>
 8001550:	428d      	cmp	r5, r1
 8001552:	d92d      	bls.n	80015b0 <__udivmoddi4+0x2b0>
 8001554:	3802      	subs	r0, #2
 8001556:	4461      	add	r1, ip
 8001558:	1b49      	subs	r1, r1, r5
 800155a:	b292      	uxth	r2, r2
 800155c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001560:	fb07 1115 	mls	r1, r7, r5, r1
 8001564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001568:	fb05 f10e 	mul.w	r1, r5, lr
 800156c:	4291      	cmp	r1, r2
 800156e:	d908      	bls.n	8001582 <__udivmoddi4+0x282>
 8001570:	eb1c 0202 	adds.w	r2, ip, r2
 8001574:	f105 38ff 	add.w	r8, r5, #4294967295
 8001578:	d216      	bcs.n	80015a8 <__udivmoddi4+0x2a8>
 800157a:	4291      	cmp	r1, r2
 800157c:	d914      	bls.n	80015a8 <__udivmoddi4+0x2a8>
 800157e:	3d02      	subs	r5, #2
 8001580:	4462      	add	r2, ip
 8001582:	1a52      	subs	r2, r2, r1
 8001584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001588:	e738      	b.n	80013fc <__udivmoddi4+0xfc>
 800158a:	4631      	mov	r1, r6
 800158c:	4630      	mov	r0, r6
 800158e:	e708      	b.n	80013a2 <__udivmoddi4+0xa2>
 8001590:	4639      	mov	r1, r7
 8001592:	e6e6      	b.n	8001362 <__udivmoddi4+0x62>
 8001594:	4610      	mov	r0, r2
 8001596:	e6fb      	b.n	8001390 <__udivmoddi4+0x90>
 8001598:	4548      	cmp	r0, r9
 800159a:	d2a9      	bcs.n	80014f0 <__udivmoddi4+0x1f0>
 800159c:	ebb9 0802 	subs.w	r8, r9, r2
 80015a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80015a4:	3b01      	subs	r3, #1
 80015a6:	e7a3      	b.n	80014f0 <__udivmoddi4+0x1f0>
 80015a8:	4645      	mov	r5, r8
 80015aa:	e7ea      	b.n	8001582 <__udivmoddi4+0x282>
 80015ac:	462b      	mov	r3, r5
 80015ae:	e794      	b.n	80014da <__udivmoddi4+0x1da>
 80015b0:	4640      	mov	r0, r8
 80015b2:	e7d1      	b.n	8001558 <__udivmoddi4+0x258>
 80015b4:	46d0      	mov	r8, sl
 80015b6:	e77b      	b.n	80014b0 <__udivmoddi4+0x1b0>
 80015b8:	3d02      	subs	r5, #2
 80015ba:	4462      	add	r2, ip
 80015bc:	e732      	b.n	8001424 <__udivmoddi4+0x124>
 80015be:	4608      	mov	r0, r1
 80015c0:	e70a      	b.n	80013d8 <__udivmoddi4+0xd8>
 80015c2:	4464      	add	r4, ip
 80015c4:	3802      	subs	r0, #2
 80015c6:	e742      	b.n	800144e <__udivmoddi4+0x14e>

080015c8 <__aeabi_idiv0>:
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80015d4:	1d39      	adds	r1, r7, #4
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	2201      	movs	r2, #1
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <__io_putchar+0x20>)
 80015de:	f00b fbef 	bl	800cdc0 <HAL_UART_Transmit>
	return ch;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000528 	.word	0x20000528

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80015f6:	4ab4      	ldr	r2, [pc, #720]	; (80018c8 <main+0x2d8>)
 80015f8:	4bb4      	ldr	r3, [pc, #720]	; (80018cc <main+0x2dc>)
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	49b4      	ldr	r1, [pc, #720]	; (80018d0 <main+0x2e0>)
 8001600:	48b2      	ldr	r0, [pc, #712]	; (80018cc <main+0x2dc>)
 8001602:	f017 fdf1 	bl	80191e8 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001606:	4bb3      	ldr	r3, [pc, #716]	; (80018d4 <main+0x2e4>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d11b      	bne.n	800164a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001612:	f3bf 8f4f 	dsb	sy
}
 8001616:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001618:	f3bf 8f6f 	isb	sy
}
 800161c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800161e:	4bad      	ldr	r3, [pc, #692]	; (80018d4 <main+0x2e4>)
 8001620:	2200      	movs	r2, #0
 8001622:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800162c:	f3bf 8f6f 	isb	sy
}
 8001630:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001632:	4ba8      	ldr	r3, [pc, #672]	; (80018d4 <main+0x2e4>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4aa7      	ldr	r2, [pc, #668]	; (80018d4 <main+0x2e4>)
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800163e:	f3bf 8f4f 	dsb	sy
}
 8001642:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001644:	f3bf 8f6f 	isb	sy
}
 8001648:	e000      	b.n	800164c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800164a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800164c:	4ba1      	ldr	r3, [pc, #644]	; (80018d4 <main+0x2e4>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d138      	bne.n	80016ca <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001658:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <main+0x2e4>)
 800165a:	2200      	movs	r2, #0
 800165c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001660:	f3bf 8f4f 	dsb	sy
}
 8001664:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001666:	4b9b      	ldr	r3, [pc, #620]	; (80018d4 <main+0x2e4>)
 8001668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	0b5b      	lsrs	r3, r3, #13
 8001672:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001676:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001680:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800168a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001690:	4990      	ldr	r1, [pc, #576]	; (80018d4 <main+0x2e4>)
 8001692:	4313      	orrs	r3, r2
 8001694:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	1e5a      	subs	r2, r3, #1
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ef      	bne.n	8001682 <main+0x92>
    } while(sets-- != 0U);
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e5      	bne.n	8001678 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80016ac:	f3bf 8f4f 	dsb	sy
}
 80016b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80016b2:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <main+0x2e4>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <main+0x2e4>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016be:	f3bf 8f4f 	dsb	sy
}
 80016c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016c4:	f3bf 8f6f 	isb	sy
}
 80016c8:	e000      	b.n	80016cc <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016cc:	f001 fd08 	bl	80030e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d0:	f000 f93a 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d4:	f000 fcfa 	bl	80020cc <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80016d8:	f000 fbda 	bl	8001e90 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80016dc:	f000 fa54 	bl	8001b88 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80016e0:	f000 fca6 	bl	8002030 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80016e4:	f000 fc56 	bl	8001f94 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016e8:	f000 fc00 	bl	8001eec <MX_TIM1_Init>
  MX_HRTIM_Init();
 80016ec:	f000 fa7e 	bl	8001bec <MX_HRTIM_Init>
  MX_ADC3_Init();
 80016f0:	f000 f9e8 	bl	8001ac4 <MX_ADC3_Init>
  MX_LWIP_Init();
 80016f4:	f00c fc78 	bl	800dfe8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80016f8:	4877      	ldr	r0, [pc, #476]	; (80018d8 <main+0x2e8>)
 80016fa:	f017 fba7 	bl	8018e4c <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80016fe:	4977      	ldr	r1, [pc, #476]	; (80018dc <main+0x2ec>)
 8001700:	4877      	ldr	r0, [pc, #476]	; (80018e0 <main+0x2f0>)
 8001702:	f017 fba3 	bl	8018e4c <iprintf>

	#ifdef SYNTH_ENABLE
		if (init_synthesiser(MW_power) != SUCCESS) {
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <main+0x2f4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f019 fb2c 	bl	801ad68 <__init_synthesiser_veneer>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <main+0x130>
			printf("Synthesiser initialisation failed!\r\n");
 8001716:	4874      	ldr	r0, [pc, #464]	; (80018e8 <main+0x2f8>)
 8001718:	f017 fbfe 	bl	8018f18 <puts>
			Error_Handler();
 800171c:	f000 fe54 	bl	80023c8 <Error_Handler>
		}
		#ifdef MW_VERBOSE
			printf("LO2GAIN set at: 0x%x \r\n", MW_power);
 8001720:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <main+0x2f4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	4871      	ldr	r0, [pc, #452]	; (80018ec <main+0x2fc>)
 8001728:	f017 fb90 	bl	8018e4c <iprintf>
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800172c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001730:	486f      	ldr	r0, [pc, #444]	; (80018f0 <main+0x300>)
 8001732:	f006 fee1 	bl	80084f8 <HAL_LPTIM_Counter_Start_IT>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <main+0x156>
		printf("Failed to start slow flashing LED!\r\n");
 800173c:	486d      	ldr	r0, [pc, #436]	; (80018f4 <main+0x304>)
 800173e:	f017 fbeb 	bl	8018f18 <puts>
		Error_Handler();
 8001742:	f000 fe41 	bl	80023c8 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001746:	2100      	movs	r1, #0
 8001748:	486b      	ldr	r0, [pc, #428]	; (80018f8 <main+0x308>)
 800174a:	f003 fc4c 	bl	8004fe6 <HAL_DAC_Start>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <main+0x16e>
		printf("Failure to initialise DAC \r\n");
 8001754:	4869      	ldr	r0, [pc, #420]	; (80018fc <main+0x30c>)
 8001756:	f017 fbdf 	bl	8018f18 <puts>
		Error_Handler();
 800175a:	f000 fe35 	bl	80023c8 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800175e:	4868      	ldr	r0, [pc, #416]	; (8001900 <main+0x310>)
 8001760:	f017 fbda 	bl	8018f18 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001764:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	4862      	ldr	r0, [pc, #392]	; (80018f8 <main+0x308>)
 800176e:	f003 fc8c 	bl	800508a <HAL_DAC_SetValue>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <main+0x192>
			printf("DAC setup failed!\r\n");
 8001778:	4862      	ldr	r0, [pc, #392]	; (8001904 <main+0x314>)
 800177a:	f017 fbcd 	bl	8018f18 <puts>
		Error_Handler();
 800177e:	f000 fe23 	bl	80023c8 <Error_Handler>
//	printf("Setting spare SMA output high \r\n");
//	HAL_GPIO_WritePin(SPARE_OUT_GPIO_Port, SPARE_OUT_Pin, GPIO_PIN_RESET); // Sets spare SMA output low

	/* Laser tuning pin */
//	LASER_TUNING_GPIO_Port, LASER_TUNING_Pin
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001788:	485f      	ldr	r0, [pc, #380]	; (8001908 <main+0x318>)
 800178a:	f005 faa9 	bl	8006ce0 <HAL_GPIO_WritePin>
	printf("Requesting FPGA CW absorption \r\n");
 800178e:	485f      	ldr	r0, [pc, #380]	; (800190c <main+0x31c>)
 8001790:	f017 fbc2 	bl	8018f18 <puts>
//	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low

	/* MW invalid */
//	MW_INVALID_GPIO_Port, MW_INVALID_Pin
//	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); // MW_invalid output high
	printf("Setting MW invalid output low \r\n");
 8001794:	485e      	ldr	r0, [pc, #376]	; (8001910 <main+0x320>)
 8001796:	f017 fbbf 	bl	8018f18 <puts>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
 800179a:	2200      	movs	r2, #0
 800179c:	2102      	movs	r1, #2
 800179e:	485a      	ldr	r0, [pc, #360]	; (8001908 <main+0x318>)
 80017a0:	f005 fa9e 	bl	8006ce0 <HAL_GPIO_WritePin>

	/* Fire up the ADC */
	// external trigger, single conversion selected in ioc file
	// calibrate ADC for better accuracy and start it w/ interrupt
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 80017a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017a8:	2100      	movs	r1, #0
 80017aa:	485a      	ldr	r0, [pc, #360]	; (8001914 <main+0x324>)
 80017ac:	f003 fa54 	bl	8004c58 <HAL_ADCEx_Calibration_Start>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <main+0x1d0>
		printf("ADC calibration failure \r\n");
 80017b6:	4858      	ldr	r0, [pc, #352]	; (8001918 <main+0x328>)
 80017b8:	f017 fbae 	bl	8018f18 <puts>
		Error_Handler();
 80017bc:	f000 fe04 	bl	80023c8 <Error_Handler>
	}
	printf("ADC calibrated successfully \r\n");
 80017c0:	4856      	ldr	r0, [pc, #344]	; (800191c <main+0x32c>)
 80017c2:	f017 fba9 	bl	8018f18 <puts>
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80017c6:	4853      	ldr	r0, [pc, #332]	; (8001914 <main+0x324>)
 80017c8:	f002 f934 	bl	8003a34 <HAL_ADC_Start_IT>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <main+0x1ec>
		printf("Failed to start ADC with interrupt capability \r\n");
 80017d2:	4853      	ldr	r0, [pc, #332]	; (8001920 <main+0x330>)
 80017d4:	f017 fba0 	bl	8018f18 <puts>
	                Error_Handler();
 80017d8:	f000 fdf6 	bl	80023c8 <Error_Handler>
	}
	printf("ADC interrupt callback enabled \r\n");
 80017dc:	4851      	ldr	r0, [pc, #324]	; (8001924 <main+0x334>)
 80017de:	f017 fb9b 	bl	8018f18 <puts>
//	test_call();
//	timer_delay(MW_TIMER, 7000);
//	timer_delay(MW_TIMER, 50000);

//	calc_defined_step_MW_sweep(3035736939, 10000, 2, 1000); //10kHz sweep, 5 POP cycles per step, 1000 points
	calc_defined_step_MW_sweep(3035736939, 2000, 2, 1001); //10kHz sweep, 5 POP cycles per step, 1000 points
 80017e2:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80017e6:	2002      	movs	r0, #2
 80017e8:	ed9f 1b33 	vldr	d1, [pc, #204]	; 80018b8 <main+0x2c8>
 80017ec:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80018c0 <main+0x2d0>
 80017f0:	f019 fac2 	bl	801ad78 <__calc_defined_step_MW_sweep_veneer>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80017f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f8:	484b      	ldr	r0, [pc, #300]	; (8001928 <main+0x338>)
 80017fa:	f005 fa59 	bl	8006cb0 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf14      	ite	ne
 8001804:	2301      	movne	r3, #1
 8001806:	2300      	moveq	r3, #0
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b48      	ldr	r3, [pc, #288]	; (800192c <main+0x33c>)
 800180c:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <main+0x33c>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d04a      	beq.n	80018ae <main+0x2be>
			printf("Blue button pressed....\r\n");
 8001818:	4845      	ldr	r0, [pc, #276]	; (8001930 <main+0x340>)
 800181a:	f017 fb7d 	bl	8018f18 <puts>
			printf("Requesting FPGA POP \r\n");
 800181e:	4845      	ldr	r0, [pc, #276]	; (8001934 <main+0x344>)
 8001820:	f017 fb7a 	bl	8018f18 <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182a:	4837      	ldr	r0, [pc, #220]	; (8001908 <main+0x318>)
 800182c:	f005 fa58 	bl	8006ce0 <HAL_GPIO_WritePin>
			//set_MW_power(0x03); //set maximum MW power to improve contrast
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001830:	4b41      	ldr	r3, [pc, #260]	; (8001938 <main+0x348>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d018      	beq.n	800186c <main+0x27c>
				++MW_power; //increase MW_power value by 1
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <main+0x2f4>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <main+0x2f4>)
 8001844:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <main+0x2f4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d902      	bls.n	8001854 <main+0x264>
					MW_power = 0;
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <main+0x2f4>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <main+0x2f4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f019 faa5 	bl	801ada8 <__set_MW_power_veneer>
			#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <main+0x2f4>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	4835      	ldr	r0, [pc, #212]	; (800193c <main+0x34c>)
 8001866:	f017 faf1 	bl	8018e4c <iprintf>
 800186a:	e01b      	b.n	80018a4 <main+0x2b4>
			#endif //MW_VERBOSE
			} else {
				printf("Initiating sweep.\r\n");
 800186c:	4834      	ldr	r0, [pc, #208]	; (8001940 <main+0x350>)
 800186e:	f017 fb53 	bl	8018f18 <puts>
				mw_sweep_started = true;
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <main+0x348>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
				start_MW_sweep();
 8001878:	f019 fa92 	bl	801ada0 <__start_MW_sweep_veneer>
			}
			while(blue_button_status) {//remain here polling button until it is released
 800187c:	e012      	b.n	80018a4 <main+0x2b4>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <main+0x354>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2164      	movs	r1, #100	; 0x64
 8001884:	4618      	mov	r0, r3
 8001886:	f019 fa73 	bl	801ad70 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800188a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800188e:	4826      	ldr	r0, [pc, #152]	; (8001928 <main+0x338>)
 8001890:	f005 fa0e 	bl	8006cb0 <HAL_GPIO_ReadPin>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <main+0x33c>)
 80018a2:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <main+0x33c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1e7      	bne.n	800187e <main+0x28e>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <main+0x348>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 80018b2:	f019 fa69 	bl	801ad88 <__MW_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80018b6:	e79d      	b.n	80017f4 <main+0x204>
 80018b8:	00000000 	.word	0x00000000
 80018bc:	409f4000 	.word	0x409f4000
 80018c0:	6d600000 	.word	0x6d600000
 80018c4:	41e69e35 	.word	0x41e69e35
 80018c8:	00000f40 	.word	0x00000f40
 80018cc:	00000000 	.word	0x00000000
 80018d0:	08000298 	.word	0x08000298
 80018d4:	e000ed00 	.word	0xe000ed00
 80018d8:	0801adb0 	.word	0x0801adb0
 80018dc:	0801adb4 	.word	0x0801adb4
 80018e0:	0801add0 	.word	0x0801add0
 80018e4:	20000000 	.word	0x20000000
 80018e8:	0801adfc 	.word	0x0801adfc
 80018ec:	0801ae20 	.word	0x0801ae20
 80018f0:	20000458 	.word	0x20000458
 80018f4:	0801ae38 	.word	0x0801ae38
 80018f8:	20000368 	.word	0x20000368
 80018fc:	0801ae5c 	.word	0x0801ae5c
 8001900:	0801ae78 	.word	0x0801ae78
 8001904:	0801ae98 	.word	0x0801ae98
 8001908:	58020400 	.word	0x58020400
 800190c:	0801aeac 	.word	0x0801aeac
 8001910:	0801aecc 	.word	0x0801aecc
 8001914:	20000304 	.word	0x20000304
 8001918:	0801aeec 	.word	0x0801aeec
 800191c:	0801af08 	.word	0x0801af08
 8001920:	0801af28 	.word	0x0801af28
 8001924:	0801af58 	.word	0x0801af58
 8001928:	58020800 	.word	0x58020800
 800192c:	200005bd 	.word	0x200005bd
 8001930:	0801af7c 	.word	0x0801af7c
 8001934:	0801af98 	.word	0x0801af98
 8001938:	200005bc 	.word	0x200005bc
 800193c:	0801afb0 	.word	0x0801afb0
 8001940:	0801afcc 	.word	0x0801afcc
 8001944:	20000018 	.word	0x20000018

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0a4      	sub	sp, #144	; 0x90
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001952:	224c      	movs	r2, #76	; 0x4c
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f017 fbce 	bl	80190f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	2220      	movs	r2, #32
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f017 fbc7 	bl	80190f8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800197c:	2002      	movs	r0, #2
 800197e:	f007 f919 	bl	8008bb4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <SystemClock_Config+0x170>)
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <SystemClock_Config+0x170>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001992:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <SystemClock_Config+0x170>)
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <SystemClock_Config+0x174>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a46      	ldr	r2, [pc, #280]	; (8001abc <SystemClock_Config+0x174>)
 80019a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b44      	ldr	r3, [pc, #272]	; (8001abc <SystemClock_Config+0x174>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019b4:	bf00      	nop
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <SystemClock_Config+0x174>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c2:	d1f8      	bne.n	80019b6 <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019c4:	f007 f8e6 	bl	8008b94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019c8:	f001 fc40 	bl	800324c <HAL_GetREVID>
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <SystemClock_Config+0x178>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <SystemClock_Config+0x178>)
 80019d2:	f023 0318 	bic.w	r3, r3, #24
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80019d8:	2325      	movs	r3, #37	; 0x25
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019e6:	2301      	movs	r3, #1
 80019e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ee:	2302      	movs	r3, #2
 80019f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019f2:	2301      	movs	r3, #1
 80019f4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 80019f6:	2350      	movs	r3, #80	; 0x50
 80019f8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019fe:	2304      	movs	r3, #4
 8001a00:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a08:	230c      	movs	r3, #12
 8001a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f007 f902 	bl	8008c28 <HAL_RCC_OscConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001a2a:	f000 fccd 	bl	80023c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2e:	233f      	movs	r3, #63	; 0x3f
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a32:	2303      	movs	r3, #3
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001a3a:	2309      	movs	r3, #9
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8001a46:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	2101      	movs	r1, #1
 8001a56:	4618      	mov	r0, r3
 8001a58:	f007 fd40 	bl	80094dc <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001a62:	f000 fcb1 	bl	80023c8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001a66:	f007 feef 	bl	8009848 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <SystemClock_Config+0x178>)
 8001a6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001a70:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <SystemClock_Config+0x178>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <SystemClock_Config+0x178>)
 8001a7c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001a8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a90:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8001a96:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001a9a:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001a9c:	2322      	movs	r3, #34	; 0x22
 8001a9e:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00a fc69 	bl	800c380 <HAL_RCCEx_CRSConfig>
}
 8001aae:	bf00      	nop
 8001ab0:	3790      	adds	r7, #144	; 0x90
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	58000400 	.word	0x58000400
 8001abc:	58024800 	.word	0x58024800
 8001ac0:	58024400 	.word	0x58024400

08001ac4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001ade:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <MX_ADC3_Init+0xc0>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001af0:	2204      	movs	r2, #4
 8001af2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b0e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b36:	4812      	ldr	r0, [pc, #72]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b38:	f001 fdda 	bl	80036f0 <HAL_ADC_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8001b42:	f000 fc41 	bl	80023c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b46:	2301      	movs	r3, #1
 8001b48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001b56:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_ADC3_Init+0xbc>)
 8001b6a:	f002 fafd 	bl	8004168 <HAL_ADC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001b74:	f000 fc28 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000304 	.word	0x20000304
 8001b84:	58026000 	.word	0x58026000

08001b88 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2224      	movs	r2, #36	; 0x24
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f017 faaf 	bl	80190f8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <MX_DAC1_Init+0x5c>)
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_DAC1_Init+0x60>)
 8001b9e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ba0:	4810      	ldr	r0, [pc, #64]	; (8001be4 <MX_DAC1_Init+0x5c>)
 8001ba2:	f003 f9fe 	bl	8004fa2 <HAL_DAC_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001bac:	f000 fc0c 	bl	80023c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <MX_DAC1_Init+0x5c>)
 8001bcc:	f003 fa82 	bl	80050d4 <HAL_DAC_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001bd6:	f000 fbf7 	bl	80023c8 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000368 	.word	0x20000368
 8001be8:	40007400 	.word	0x40007400

08001bec <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0a4      	sub	sp, #144	; 0x90
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001bf2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c04:	2254      	movs	r2, #84	; 0x54
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f017 fa75 	bl	80190f8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001c0e:	f107 0320 	add.w	r3, r7, #32
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f017 fa69 	bl	80190f8 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001c26:	4b98      	ldr	r3, [pc, #608]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001c28:	4a98      	ldr	r2, [pc, #608]	; (8001e8c <MX_HRTIM_Init+0x2a0>)
 8001c2a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001c2c:	4b96      	ldr	r3, [pc, #600]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001c32:	4b95      	ldr	r3, [pc, #596]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001c38:	4893      	ldr	r0, [pc, #588]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001c3a:	f005 f8a9 	bl	8006d90 <HAL_HRTIM_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001c44:	f000 fbc0 	bl	80023c8 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001c48:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8001c56:	2307      	movs	r3, #7
 8001c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001c62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c66:	461a      	mov	r2, r3
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4887      	ldr	r0, [pc, #540]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001c6c:	f005 f960 	bl	8006f30 <HAL_HRTIM_TimeBaseConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8001c76:	f000 fba7 	bl	80023c8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8001c7a:	2314      	movs	r3, #20
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001c82:	2300      	movs	r3, #0
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8001c86:	2300      	movs	r3, #0
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001c92:	2300      	movs	r3, #0
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001c96:	2300      	movs	r3, #0
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001caa:	2300      	movs	r3, #0
 8001cac:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	486c      	ldr	r0, [pc, #432]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001cd8:	f005 f952 	bl	8006f80 <HAL_HRTIM_WaveformTimerConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001ce2:	f000 fb71 	bl	80023c8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001cea:	2300      	movs	r3, #0
 8001cec:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	4864      	ldr	r0, [pc, #400]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001cf8:	f005 f942 	bl	8006f80 <HAL_HRTIM_WaveformTimerConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001d02:	f000 fb61 	bl	80023c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001d06:	f240 631b 	movw	r3, #1563	; 0x61b
 8001d0a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001d0c:	f107 0320 	add.w	r3, r7, #32
 8001d10:	2201      	movs	r2, #1
 8001d12:	2100      	movs	r1, #0
 8001d14:	485c      	ldr	r0, [pc, #368]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001d16:	f005 f9a5 	bl	8007064 <HAL_HRTIM_WaveformCompareConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001d20:	f000 fb52 	bl	80023c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001d24:	f244 5395 	movw	r3, #17813	; 0x4595
 8001d28:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	2202      	movs	r2, #2
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4853      	ldr	r0, [pc, #332]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001d3c:	f005 f992 	bl	8007064 <HAL_HRTIM_WaveformCompareConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8001d46:	f000 fb3f 	bl	80023c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8001d4a:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001d4e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	2202      	movs	r2, #2
 8001d56:	2104      	movs	r1, #4
 8001d58:	484b      	ldr	r0, [pc, #300]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001d5a:	f005 f983 	bl	8007064 <HAL_HRTIM_WaveformCompareConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8001d64:	f000 fb30 	bl	80023c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8001d68:	f644 0306 	movw	r3, #18438	; 0x4806
 8001d6c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2204      	movs	r2, #4
 8001d74:	2100      	movs	r1, #0
 8001d76:	4844      	ldr	r0, [pc, #272]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001d78:	f005 f974 	bl	8007064 <HAL_HRTIM_WaveformCompareConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8001d82:	f000 fb21 	bl	80023c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8001d86:	f244 435d 	movw	r3, #17501	; 0x445d
 8001d8a:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001d8c:	f107 0320 	add.w	r3, r7, #32
 8001d90:	2208      	movs	r2, #8
 8001d92:	2104      	movs	r1, #4
 8001d94:	483c      	ldr	r0, [pc, #240]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001d96:	f005 f965 	bl	8007064 <HAL_HRTIM_WaveformCompareConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001da0:	f000 fb12 	bl	80023c8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001da4:	2302      	movs	r3, #2
 8001da6:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8001da8:	2328      	movs	r3, #40	; 0x28
 8001daa:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001dac:	2314      	movs	r3, #20
 8001dae:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001db4:	2308      	movs	r3, #8
 8001db6:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2100      	movs	r1, #0
 8001dca:	482f      	ldr	r0, [pc, #188]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001dcc:	f005 fab8 	bl	8007340 <HAL_HRTIM_WaveformOutputConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001dd6:	f000 faf7 	bl	80023c8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8001dde:	2350      	movs	r3, #80	; 0x50
 8001de0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dec:	2104      	movs	r1, #4
 8001dee:	4826      	ldr	r0, [pc, #152]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001df0:	f005 faa6 	bl	8007340 <HAL_HRTIM_WaveformOutputConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8001dfa:	f000 fae5 	bl	80023c8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8001e02:	2320      	movs	r3, #32
 8001e04:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001e06:	2310      	movs	r3, #16
 8001e08:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001e0e:	463b      	mov	r3, r7
 8001e10:	2202      	movs	r2, #2
 8001e12:	2100      	movs	r1, #0
 8001e14:	481c      	ldr	r0, [pc, #112]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001e16:	f005 fa93 	bl	8007340 <HAL_HRTIM_WaveformOutputConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8001e20:	f000 fad2 	bl	80023c8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001e24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	4816      	ldr	r0, [pc, #88]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001e2e:	f005 f87f 	bl	8006f30 <HAL_HRTIM_TimeBaseConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8001e38:	f000 fac6 	bl	80023c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8001e3c:	f240 7353 	movw	r3, #1875	; 0x753
 8001e40:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001e42:	f107 0320 	add.w	r3, r7, #32
 8001e46:	2201      	movs	r2, #1
 8001e48:	2104      	movs	r1, #4
 8001e4a:	480f      	ldr	r0, [pc, #60]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001e4c:	f005 f90a 	bl	8007064 <HAL_HRTIM_WaveformCompareConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8001e56:	f000 fab7 	bl	80023c8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8001e5a:	f643 6342 	movw	r3, #15938	; 0x3e42
 8001e5e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	2204      	movs	r2, #4
 8001e66:	2104      	movs	r1, #4
 8001e68:	4807      	ldr	r0, [pc, #28]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001e6a:	f005 f8fb 	bl	8007064 <HAL_HRTIM_WaveformCompareConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8001e74:	f000 faa8 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <MX_HRTIM_Init+0x29c>)
 8001e7a:	f000 fbe7 	bl	800264c <HAL_HRTIM_MspPostInit>

}
 8001e7e:	bf00      	nop
 8001e80:	3790      	adds	r7, #144	; 0x90
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000037c 	.word	0x2000037c
 8001e8c:	40017400 	.word	0x40017400

08001e90 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <MX_LPTIM1_Init+0x58>)
 8001e98:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001ea2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001ea6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eae:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_LPTIM1_Init+0x54>)
 8001ed0:	f006 fa62 	bl	8008398 <HAL_LPTIM_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001eda:	f000 fa75 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000458 	.word	0x20000458
 8001ee8:	40002400 	.word	0x40002400

08001eec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f0c:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <MX_TIM1_Init+0xa4>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f12:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001f16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f38:	4814      	ldr	r0, [pc, #80]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f3a:	f00a fbdb 	bl	800c6f4 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001f44:	f000 fa40 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4619      	mov	r1, r3
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f56:	f00a fc25 	bl	800c7a4 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001f60:	f000 fa32 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_TIM1_Init+0xa0>)
 8001f76:	f00a fe45 	bl	800cc04 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f80:	f000 fa22 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000490 	.word	0x20000490
 8001f90:	40010000 	.word	0x40010000

08001f94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <MX_TIM3_Init+0x98>)
 8001fb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fba:	227c      	movs	r2, #124	; 0x7c
 8001fbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fda:	f00a fb8b 	bl	800c6f4 <HAL_TIM_Base_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001fe4:	f000 f9f0 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <MX_TIM3_Init+0x94>)
 8001ff6:	f00a fbd5 	bl	800c7a4 <HAL_TIM_ConfigClockSource>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002000:	f000 f9e2 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_TIM3_Init+0x94>)
 8002012:	f00a fdf7 	bl	800cc04 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800201c:	f000 f9d4 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200004dc 	.word	0x200004dc
 800202c:	40000400 	.word	0x40000400

08002030 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 8002036:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <MX_USART3_UART_Init+0x94>)
 8002038:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 800203c:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <MX_USART3_UART_Init+0x98>)
 800203e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 8002054:	220c      	movs	r2, #12
 8002056:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002076:	4812      	ldr	r0, [pc, #72]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 8002078:	f00a fe52 	bl	800cd20 <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002082:	f000 f9a1 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002086:	2100      	movs	r1, #0
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 800208a:	f00b fee2 	bl	800de52 <HAL_UARTEx_SetTxFifoThreshold>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002094:	f000 f998 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002098:	2100      	movs	r1, #0
 800209a:	4809      	ldr	r0, [pc, #36]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 800209c:	f00b ff17 	bl	800dece <HAL_UARTEx_SetRxFifoThreshold>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80020a6:	f000 f98f 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_USART3_UART_Init+0x90>)
 80020ac:	f00b fe98 	bl	800dde0 <HAL_UARTEx_DisableFifoMode>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80020b6:	f000 f987 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000528 	.word	0x20000528
 80020c4:	40004800 	.word	0x40004800
 80020c8:	000f4240 	.word	0x000f4240

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08e      	sub	sp, #56	; 0x38
 80020d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e2:	4ba0      	ldr	r3, [pc, #640]	; (8002364 <MX_GPIO_Init+0x298>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e8:	4a9e      	ldr	r2, [pc, #632]	; (8002364 <MX_GPIO_Init+0x298>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f2:	4b9c      	ldr	r3, [pc, #624]	; (8002364 <MX_GPIO_Init+0x298>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002100:	4b98      	ldr	r3, [pc, #608]	; (8002364 <MX_GPIO_Init+0x298>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002106:	4a97      	ldr	r2, [pc, #604]	; (8002364 <MX_GPIO_Init+0x298>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002110:	4b94      	ldr	r3, [pc, #592]	; (8002364 <MX_GPIO_Init+0x298>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	4b91      	ldr	r3, [pc, #580]	; (8002364 <MX_GPIO_Init+0x298>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002124:	4a8f      	ldr	r2, [pc, #572]	; (8002364 <MX_GPIO_Init+0x298>)
 8002126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212e:	4b8d      	ldr	r3, [pc, #564]	; (8002364 <MX_GPIO_Init+0x298>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	4b89      	ldr	r3, [pc, #548]	; (8002364 <MX_GPIO_Init+0x298>)
 800213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002142:	4a88      	ldr	r2, [pc, #544]	; (8002364 <MX_GPIO_Init+0x298>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214c:	4b85      	ldr	r3, [pc, #532]	; (8002364 <MX_GPIO_Init+0x298>)
 800214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4b82      	ldr	r3, [pc, #520]	; (8002364 <MX_GPIO_Init+0x298>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002160:	4a80      	ldr	r2, [pc, #512]	; (8002364 <MX_GPIO_Init+0x298>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216a:	4b7e      	ldr	r3, [pc, #504]	; (8002364 <MX_GPIO_Init+0x298>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002178:	4b7a      	ldr	r3, [pc, #488]	; (8002364 <MX_GPIO_Init+0x298>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217e:	4a79      	ldr	r2, [pc, #484]	; (8002364 <MX_GPIO_Init+0x298>)
 8002180:	f043 0320 	orr.w	r3, r3, #32
 8002184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002188:	4b76      	ldr	r3, [pc, #472]	; (8002364 <MX_GPIO_Init+0x298>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002196:	4b73      	ldr	r3, [pc, #460]	; (8002364 <MX_GPIO_Init+0x298>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219c:	4a71      	ldr	r2, [pc, #452]	; (8002364 <MX_GPIO_Init+0x298>)
 800219e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a6:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <MX_GPIO_Init+0x298>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b4:	4b6b      	ldr	r3, [pc, #428]	; (8002364 <MX_GPIO_Init+0x298>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ba:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <MX_GPIO_Init+0x298>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c4:	4b67      	ldr	r3, [pc, #412]	; (8002364 <MX_GPIO_Init+0x298>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	2134      	movs	r1, #52	; 0x34
 80021d6:	4864      	ldr	r0, [pc, #400]	; (8002368 <MX_GPIO_Init+0x29c>)
 80021d8:	f004 fd82 	bl	8006ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80021dc:	2200      	movs	r2, #0
 80021de:	f245 1103 	movw	r1, #20739	; 0x5103
 80021e2:	4862      	ldr	r0, [pc, #392]	; (800236c <MX_GPIO_Init+0x2a0>)
 80021e4:	f004 fd7c 	bl	8006ce0 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2101      	movs	r1, #1
 80021ec:	4860      	ldr	r0, [pc, #384]	; (8002370 <MX_GPIO_Init+0x2a4>)
 80021ee:	f004 fd77 	bl	8006ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f8:	485e      	ldr	r0, [pc, #376]	; (8002374 <MX_GPIO_Init+0x2a8>)
 80021fa:	f004 fd71 	bl	8006ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002204:	485c      	ldr	r0, [pc, #368]	; (8002378 <MX_GPIO_Init+0x2ac>)
 8002206:	f004 fd6b 	bl	8006ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002210:	4859      	ldr	r0, [pc, #356]	; (8002378 <MX_GPIO_Init+0x2ac>)
 8002212:	f004 fd65 	bl	8006ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8002216:	2201      	movs	r2, #1
 8002218:	21f8      	movs	r1, #248	; 0xf8
 800221a:	4856      	ldr	r0, [pc, #344]	; (8002374 <MX_GPIO_Init+0x2a8>)
 800221c:	f004 fd60 	bl	8006ce0 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	2102      	movs	r1, #2
 8002224:	4850      	ldr	r0, [pc, #320]	; (8002368 <MX_GPIO_Init+0x29c>)
 8002226:	f004 fd5b 	bl	8006ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 800222a:	2336      	movs	r3, #54	; 0x36
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	4849      	ldr	r0, [pc, #292]	; (8002368 <MX_GPIO_Init+0x29c>)
 8002242:	f004 fb85 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	4846      	ldr	r0, [pc, #280]	; (8002378 <MX_GPIO_Init+0x2ac>)
 800225e:	f004 fb77 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002262:	f245 1303 	movw	r3, #20739	; 0x5103
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	2301      	movs	r3, #1
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	4619      	mov	r1, r3
 800227a:	483c      	ldr	r0, [pc, #240]	; (800236c <MX_GPIO_Init+0x2a0>)
 800227c:	f004 fb68 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002286:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002294:	4619      	mov	r1, r3
 8002296:	4839      	ldr	r0, [pc, #228]	; (800237c <MX_GPIO_Init+0x2b0>)
 8002298:	f004 fb5a 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 800229c:	2301      	movs	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b0:	4619      	mov	r1, r3
 80022b2:	482f      	ldr	r0, [pc, #188]	; (8002370 <MX_GPIO_Init+0x2a4>)
 80022b4:	f004 fb4c 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 80022b8:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ce:	4619      	mov	r1, r3
 80022d0:	4828      	ldr	r0, [pc, #160]	; (8002374 <MX_GPIO_Init+0x2a8>)
 80022d2:	f004 fb3d 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e8:	4619      	mov	r1, r3
 80022ea:	4821      	ldr	r0, [pc, #132]	; (8002370 <MX_GPIO_Init+0x2a4>)
 80022ec:	f004 fb30 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 80022f0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022fa:	2302      	movs	r3, #2
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002306:	4619      	mov	r1, r3
 8002308:	481b      	ldr	r0, [pc, #108]	; (8002378 <MX_GPIO_Init+0x2ac>)
 800230a:	f004 fb21 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800230e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002320:	230a      	movs	r3, #10
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	4815      	ldr	r0, [pc, #84]	; (8002380 <MX_GPIO_Init+0x2b4>)
 800232c:	f004 fb10 	bl	8006950 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8002330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002336:	2300      	movs	r3, #0
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <MX_GPIO_Init+0x2ac>)
 8002346:	f004 fb03 	bl	8006950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2028      	movs	r0, #40	; 0x28
 8002350:	f002 fdf3 	bl	8004f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002354:	2028      	movs	r0, #40	; 0x28
 8002356:	f002 fe0a 	bl	8004f6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800235a:	bf00      	nop
 800235c:	3738      	adds	r7, #56	; 0x38
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58024400 	.word	0x58024400
 8002368:	58021000 	.word	0x58021000
 800236c:	58020400 	.word	0x58020400
 8002370:	58021800 	.word	0x58021800
 8002374:	58020c00 	.word	0x58020c00
 8002378:	58020800 	.word	0x58020800
 800237c:	58021400 	.word	0x58021400
 8002380:	58020000 	.word	0x58020000

08002384 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 800238c:	480a      	ldr	r0, [pc, #40]	; (80023b8 <HAL_ADC_ConvCpltCallback+0x34>)
 800238e:	f001 fc8f 	bl	8003cb0 <HAL_ADC_GetValue>
 8002392:	4603      	mov	r3, r0
 8002394:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_ADC_ConvCpltCallback+0x38>)
 8002396:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_ADC_ConvCpltCallback+0x38>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80023a0:	6013      	str	r3, [r2, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <HAL_ADC_ConvCpltCallback+0x40>)
 80023ac:	f002 fe6d 	bl	800508a <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000304 	.word	0x20000304
 80023bc:	200005c0 	.word	0x200005c0
 80023c0:	200005c4 	.word	0x200005c4
 80023c4:	20000368 	.word	0x20000368

080023c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023cc:	b672      	cpsid	i
}
 80023ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 80023d0:	4810      	ldr	r0, [pc, #64]	; (8002414 <Error_Handler+0x4c>)
 80023d2:	f016 fda1 	bl	8018f18 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80023d6:	f240 1103 	movw	r1, #259	; 0x103
 80023da:	480f      	ldr	r0, [pc, #60]	; (8002418 <Error_Handler+0x50>)
 80023dc:	f005 f80e 	bl	80073fc <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 80023e0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <Error_Handler+0x50>)
 80023e6:	f005 f8a7 	bl	8007538 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f0:	480a      	ldr	r0, [pc, #40]	; (800241c <Error_Handler+0x54>)
 80023f2:	f004 fc75 	bl	8006ce0 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80023f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023fa:	4809      	ldr	r0, [pc, #36]	; (8002420 <Error_Handler+0x58>)
 80023fc:	f004 fc89 	bl	8006d12 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <Error_Handler+0x5c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f018 fcb0 	bl	801ad70 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002410:	e7f1      	b.n	80023f6 <Error_Handler+0x2e>
 8002412:	bf00      	nop
 8002414:	0801afe0 	.word	0x0801afe0
 8002418:	2000037c 	.word	0x2000037c
 800241c:	58020800 	.word	0x58020800
 8002420:	58020400 	.word	0x58020400
 8002424:	20000018 	.word	0x20000018

08002428 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_MspInit+0x30>)
 8002430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002434:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_MspInit+0x30>)
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_MspInit+0x30>)
 8002440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	58024400 	.word	0x58024400

0800245c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0b4      	sub	sp, #208	; 0xd0
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	22c0      	movs	r2, #192	; 0xc0
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f016 fe43 	bl	80190f8 <memset>
  if(hadc->Instance==ADC3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <HAL_ADC_MspInit+0xc8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d14e      	bne.n	800251a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800247c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002488:	2301      	movs	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800248c:	2313      	movs	r3, #19
 800248e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002490:	234f      	movs	r3, #79	; 0x4f
 8002492:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002494:	2302      	movs	r3, #2
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800249c:	23c0      	movs	r3, #192	; 0xc0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80024a0:	2320      	movs	r3, #32
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ae:	f107 0310 	add.w	r3, r7, #16
 80024b2:	4618      	mov	r0, r3
 80024b4:	f007 fbca 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80024be:	f7ff ff83 	bl	80023c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c8:	4a17      	ldr	r2, [pc, #92]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80024fe:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002502:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002506:	f000 fec1 	bl	800328c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	207f      	movs	r0, #127	; 0x7f
 8002510:	f002 fd13 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002514:	207f      	movs	r0, #127	; 0x7f
 8002516:	f002 fd2a 	bl	8004f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800251a:	bf00      	nop
 800251c:	37d0      	adds	r7, #208	; 0xd0
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	58026000 	.word	0x58026000
 8002528:	58024400 	.word	0x58024400

0800252c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_DAC_MspInit+0x80>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d129      	bne.n	80025a2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_DAC_MspInit+0x84>)
 8002550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002554:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_DAC_MspInit+0x84>)
 8002556:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800255a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_DAC_MspInit+0x84>)
 8002560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_DAC_MspInit+0x84>)
 800256e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_DAC_MspInit+0x84>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_DAC_MspInit+0x84>)
 800257e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800258a:	2310      	movs	r3, #16
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258e:	2303      	movs	r3, #3
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <HAL_DAC_MspInit+0x88>)
 800259e:	f004 f9d7 	bl	8006950 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40007400 	.word	0x40007400
 80025b0:	58024400 	.word	0x58024400
 80025b4:	58020000 	.word	0x58020000

080025b8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0b4      	sub	sp, #208	; 0xd0
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	22c0      	movs	r2, #192	; 0xc0
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f016 fd95 	bl	80190f8 <memset>
  if(hhrtim->Instance==HRTIM1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_HRTIM_MspInit+0x8c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d131      	bne.n	800263c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80025d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	4618      	mov	r0, r3
 80025f0:	f007 fb2c 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 80025fa:	f7ff fee5 	bl	80023c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_HRTIM_MspInit+0x90>)
 8002600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002604:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_HRTIM_MspInit+0x90>)
 8002606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800260a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_HRTIM_MspInit+0x90>)
 8002610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	2068      	movs	r0, #104	; 0x68
 8002622:	f002 fc8a 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002626:	2068      	movs	r0, #104	; 0x68
 8002628:	f002 fca1 	bl	8004f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	206c      	movs	r0, #108	; 0x6c
 8002632:	f002 fc82 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002636:	206c      	movs	r0, #108	; 0x6c
 8002638:	f002 fc99 	bl	8004f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 800263c:	bf00      	nop
 800263e:	37d0      	adds	r7, #208	; 0xd0
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40017400 	.word	0x40017400
 8002648:	58024400 	.word	0x58024400

0800264c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_HRTIM_MspPostInit+0xa8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d13d      	bne.n	80026ea <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_HRTIM_MspPostInit+0xac>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_HRTIM_MspPostInit+0xac>)
 8002676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800267a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_HRTIM_MspPostInit+0xac>)
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_HRTIM_MspPostInit+0xac>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_HRTIM_MspPostInit+0xac>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_HRTIM_MspPostInit+0xac>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026aa:	2340      	movs	r3, #64	; 0x40
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80026ba:	2302      	movs	r3, #2
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <HAL_HRTIM_MspPostInit+0xb0>)
 80026c6:	f004 f943 	bl	8006950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026ca:	23c0      	movs	r3, #192	; 0xc0
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80026da:	2301      	movs	r3, #1
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4806      	ldr	r0, [pc, #24]	; (8002700 <HAL_HRTIM_MspPostInit+0xb4>)
 80026e6:	f004 f933 	bl	8006950 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40017400 	.word	0x40017400
 80026f8:	58024400 	.word	0x58024400
 80026fc:	58021800 	.word	0x58021800
 8002700:	58020800 	.word	0x58020800

08002704 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0b4      	sub	sp, #208	; 0xd0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	22c0      	movs	r2, #192	; 0xc0
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f016 fcef 	bl	80190f8 <memset>
  if(hlptim->Instance==LPTIM1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_LPTIM_MspInit+0x80>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d12a      	bne.n	800277a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002724:	f04f 0220 	mov.w	r2, #32
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002730:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	4618      	mov	r0, r3
 800273e:	f007 fa85 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002748:	f7ff fe3e 	bl	80023c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_LPTIM_MspInit+0x84>)
 800274e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002752:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <HAL_LPTIM_MspInit+0x84>)
 8002754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002758:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_LPTIM_MspInit+0x84>)
 800275e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	205d      	movs	r0, #93	; 0x5d
 8002770:	f002 fbe3 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002774:	205d      	movs	r0, #93	; 0x5d
 8002776:	f002 fbfa 	bl	8004f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800277a:	bf00      	nop
 800277c:	37d0      	adds	r7, #208	; 0xd0
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40002400 	.word	0x40002400
 8002788:	58024400 	.word	0x58024400

0800278c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <HAL_TIM_Base_MspInit+0x68>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10f      	bne.n	80027be <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_TIM_Base_MspInit+0x6c>)
 80027a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027a4:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <HAL_TIM_Base_MspInit+0x6c>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_TIM_Base_MspInit+0x6c>)
 80027b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027bc:	e013      	b.n	80027e6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_TIM_Base_MspInit+0x70>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10e      	bne.n	80027e6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_TIM_Base_MspInit+0x6c>)
 80027ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_TIM_Base_MspInit+0x6c>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_TIM_Base_MspInit+0x6c>)
 80027da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000
 80027f8:	58024400 	.word	0x58024400
 80027fc:	40000400 	.word	0x40000400

08002800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b0ba      	sub	sp, #232	; 0xe8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002818:	f107 0310 	add.w	r3, r7, #16
 800281c:	22c0      	movs	r2, #192	; 0xc0
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f016 fc69 	bl	80190f8 <memset>
  if(huart->Instance==USART3)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a27      	ldr	r2, [pc, #156]	; (80028c8 <HAL_UART_MspInit+0xc8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d146      	bne.n	80028be <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002830:	f04f 0202 	mov.w	r2, #2
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f007 fa00 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002852:	f7ff fdb9 	bl	80023c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_UART_MspInit+0xcc>)
 8002858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800285c:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_UART_MspInit+0xcc>)
 800285e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002862:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_UART_MspInit+0xcc>)
 8002868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800286c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_UART_MspInit+0xcc>)
 8002876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287a:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_UART_MspInit+0xcc>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_UART_MspInit+0xcc>)
 8002886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002892:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028ac:	2307      	movs	r3, #7
 80028ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <HAL_UART_MspInit+0xd0>)
 80028ba:	f004 f849 	bl	8006950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028be:	bf00      	nop
 80028c0:	37e8      	adds	r7, #232	; 0xe8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40004800 	.word	0x40004800
 80028cc:	58024400 	.word	0x58024400
 80028d0:	58020c00 	.word	0x58020c00

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80028d8:	f007 f99c 	bl	8009c14 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 80028dc:	f7ff fd74 	bl	80023c8 <Error_Handler>
 80028e0:	e7fc      	b.n	80028dc <NMI_Handler+0x8>

080028e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80028e6:	f7ff fd6f 	bl	80023c8 <Error_Handler>
 80028ea:	e7fc      	b.n	80028e6 <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80028f0:	f7ff fd6a 	bl	80023c8 <Error_Handler>
 80028f4:	e7fc      	b.n	80028f0 <MemManage_Handler+0x4>

080028f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80028fa:	f7ff fd65 	bl	80023c8 <Error_Handler>
 80028fe:	e7fc      	b.n	80028fa <BusFault_Handler+0x4>

08002900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002904:	f7ff fd60 	bl	80023c8 <Error_Handler>
 8002908:	e7fc      	b.n	8002904 <UsageFault_Handler+0x4>

0800290a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002938:	f000 fc44 	bl	80031c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002944:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002948:	f004 f9fd 	bl	8006d46 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800294c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002950:	f004 f9f9 	bl	8006d46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <LPTIM1_IRQHandler+0x10>)
 800295e:	f005 fe32 	bl	80085c6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000458 	.word	0x20000458

0800296c <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002970:	2100      	movs	r1, #0
 8002972:	4802      	ldr	r0, [pc, #8]	; (800297c <HRTIM1_TIMA_IRQHandler+0x10>)
 8002974:	f004 fe5e 	bl	8007634 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	2000037c 	.word	0x2000037c

08002980 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8002984:	2104      	movs	r1, #4
 8002986:	4802      	ldr	r0, [pc, #8]	; (8002990 <HRTIM1_TIME_IRQHandler+0x10>)
 8002988:	f004 fe54 	bl	8007634 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}
 8002990:	2000037c 	.word	0x2000037c

08002994 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <ADC3_IRQHandler+0x10>)
 800299a:	f001 f997 	bl	8003ccc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000304 	.word	0x20000304

080029a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
	return 1;
 80029ac:	2301      	movs	r3, #1
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_kill>:

int _kill(int pid, int sig)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <_kill+0x20>)
 80029c4:	2216      	movs	r2, #22
 80029c6:	601a      	str	r2, [r3, #0]
	return -1;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20008290 	.word	0x20008290

080029dc <_exit>:

void _exit (int status)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ffe5 	bl	80029b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029ee:	e7fe      	b.n	80029ee <_exit+0x12>

080029f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e00a      	b.n	8002a18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a02:	f3af 8000 	nop.w
 8002a06:	4601      	mov	r1, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	60ba      	str	r2, [r7, #8]
 8002a0e:	b2ca      	uxtb	r2, r1
 8002a10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dbf0      	blt.n	8002a02 <_read+0x12>
	}

return len;
 8002a20:	687b      	ldr	r3, [r7, #4]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e009      	b.n	8002a50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fdc1 	bl	80015cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	dbf1      	blt.n	8002a3c <_write+0x12>
	}
	return len;
 8002a58:	687b      	ldr	r3, [r7, #4]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_close>:

int _close(int file)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
	return -1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_isatty>:

int _isatty(int file)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
	return 1;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <_sbrk+0x5c>)
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <_sbrk+0x60>)
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <_sbrk+0x64>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <_sbrk+0x68>)
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d205      	bcs.n	8002b08 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <_sbrk+0x6c>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	e009      	b.n	8002b1c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <_sbrk+0x64>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	4a06      	ldr	r2, [pc, #24]	; (8002b30 <_sbrk+0x64>)
 8002b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	20020000 	.word	0x20020000
 8002b2c:	00000400 	.word	0x00000400
 8002b30:	200005e8 	.word	0x200005e8
 8002b34:	200082a0 	.word	0x200082a0
 8002b38:	20008290 	.word	0x20008290

08002b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b40:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <SystemInit+0xe4>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	4a36      	ldr	r2, [pc, #216]	; (8002c20 <SystemInit+0xe4>)
 8002b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b50:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <SystemInit+0xe8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d807      	bhi.n	8002b6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b5c:	4b31      	ldr	r3, [pc, #196]	; (8002c24 <SystemInit+0xe8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 030f 	bic.w	r3, r3, #15
 8002b64:	4a2f      	ldr	r2, [pc, #188]	; (8002c24 <SystemInit+0xe8>)
 8002b66:	f043 0307 	orr.w	r3, r3, #7
 8002b6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <SystemInit+0xec>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <SystemInit+0xec>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <SystemInit+0xec>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <SystemInit+0xec>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4929      	ldr	r1, [pc, #164]	; (8002c28 <SystemInit+0xec>)
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <SystemInit+0xf0>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <SystemInit+0xe8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <SystemInit+0xe8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 030f 	bic.w	r3, r3, #15
 8002b9e:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <SystemInit+0xe8>)
 8002ba0:	f043 0307 	orr.w	r3, r3, #7
 8002ba4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <SystemInit+0xec>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <SystemInit+0xec>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <SystemInit+0xec>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <SystemInit+0xec>)
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <SystemInit+0xf4>)
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <SystemInit+0xec>)
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <SystemInit+0xf8>)
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <SystemInit+0xec>)
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <SystemInit+0xfc>)
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <SystemInit+0xec>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <SystemInit+0xec>)
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <SystemInit+0xfc>)
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <SystemInit+0xec>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <SystemInit+0xec>)
 8002bde:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <SystemInit+0xfc>)
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <SystemInit+0xec>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <SystemInit+0xec>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <SystemInit+0xec>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <SystemInit+0xec>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <SystemInit+0x100>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <SystemInit+0x104>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c06:	d202      	bcs.n	8002c0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <SystemInit+0x108>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <SystemInit+0x10c>)
 8002c10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00
 8002c24:	52002000 	.word	0x52002000
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c30:	02020200 	.word	0x02020200
 8002c34:	01ff0000 	.word	0x01ff0000
 8002c38:	01010280 	.word	0x01010280
 8002c3c:	5c001000 	.word	0x5c001000
 8002c40:	ffff0000 	.word	0xffff0000
 8002c44:	51008108 	.word	0x51008108
 8002c48:	52004000 	.word	0x52004000

08002c4c <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8002c54:	2101      	movs	r1, #1
 8002c56:	4803      	ldr	r0, [pc, #12]	; (8002c64 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8002c58:	f004 f85b 	bl	8006d12 <HAL_GPIO_TogglePin>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	58020400 	.word	0x58020400

08002c68 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d11e      	bne.n	8002cb6 <HAL_HRTIM_Compare2EventCallback+0x4e>
#ifdef ATTENUATOR_CODE
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8002c78:	7b3b      	ldrb	r3, [r7, #12]
 8002c7a:	f36f 0300 	bfc	r3, #0, #1
 8002c7e:	733b      	strb	r3, [r7, #12]
 8002c80:	7b3b      	ldrb	r3, [r7, #12]
 8002c82:	f36f 0341 	bfc	r3, #1, #1
 8002c86:	733b      	strb	r3, [r7, #12]
 8002c88:	7b3b      	ldrb	r3, [r7, #12]
 8002c8a:	f36f 0382 	bfc	r3, #2, #1
 8002c8e:	733b      	strb	r3, [r7, #12]
 8002c90:	7b3b      	ldrb	r3, [r7, #12]
 8002c92:	f36f 03c3 	bfc	r3, #3, #1
 8002c96:	733b      	strb	r3, [r7, #12]
 8002c98:	7b3b      	ldrb	r3, [r7, #12]
 8002c9a:	f36f 1304 	bfc	r3, #4, #1
 8002c9e:	733b      	strb	r3, [r7, #12]
 8002ca0:	7b3b      	ldrb	r3, [r7, #12]
 8002ca2:	f043 0320 	orr.w	r3, r3, #32
 8002ca6:	733b      	strb	r3, [r7, #12]
 8002ca8:	7b3b      	ldrb	r3, [r7, #12]
 8002caa:	f36f 1386 	bfc	r3, #6, #1
 8002cae:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8002cb0:	7b38      	ldrb	r0, [r7, #12]
 8002cb2:	f018 f865 	bl	801ad80 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE
	}

}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d162      	bne.n	8002d96 <HAL_HRTIM_Compare3EventCallback+0xd6>
#ifdef ATTENUATOR_CODE
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 8002cd4:	7a38      	ldrb	r0, [r7, #8]
 8002cd6:	f018 f853 	bl	801ad80 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8002cda:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002cdc:	ed93 5b00 	vldr	d5, [r3]
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002ce2:	ed93 6b04 	vldr	d6, [r3, #16]
 8002ce6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002cea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002cee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002cf4:	ed93 7b04 	vldr	d7, [r3, #16]
 8002cf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002cfc:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002d02:	ed93 5b02 	vldr	d5, [r3, #8]
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002d08:	ed93 6b04 	vldr	d6, [r3, #16]
 8002d0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d10:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002d14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d18:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d1c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002d22:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d2a:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8002d2e:	ed97 6b04 	vldr	d6, [r7, #16]
 8002d32:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d36:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002d3c:	ed93 6b04 	vldr	d6, [r3, #16]
 8002d40:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002d48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d50:	ee17 3a90 	vmov	r3, s15
 8002d54:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d106      	bne.n	8002d6e <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 8002d60:	f018 f81a 	bl	801ad98 <__stop_pop_veneer>
			i = 0;
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
			start_pop();
 8002d6a:	f018 f811 	bl	801ad90 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002d76:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002d80:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8002d82:	2102      	movs	r1, #2
 8002d84:	4809      	ldr	r0, [pc, #36]	; (8002dac <HAL_HRTIM_Compare3EventCallback+0xec>)
 8002d86:	f003 ffc4 	bl	8006d12 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4807      	ldr	r0, [pc, #28]	; (8002db0 <HAL_HRTIM_Compare3EventCallback+0xf0>)
 8002d92:	f016 f85b 	bl	8018e4c <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8002d96:	bf00      	nop
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	0801de50 	.word	0x0801de50
 8002da4:	200005f4 	.word	0x200005f4
 8002da8:	200005ec 	.word	0x200005ec
 8002dac:	58021000 	.word	0x58021000
 8002db0:	0801b454 	.word	0x0801b454

08002db4 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dd0:	f7ff feb4 	bl	8002b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dd4:	480c      	ldr	r0, [pc, #48]	; (8002e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dd6:	490d      	ldr	r1, [pc, #52]	; (8002e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ddc:	e002      	b.n	8002de4 <LoopCopyDataInit>

08002dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de2:	3304      	adds	r3, #4

08002de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de8:	d3f9      	bcc.n	8002dde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dec:	4c0a      	ldr	r4, [pc, #40]	; (8002e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df0:	e001      	b.n	8002df6 <LoopFillZerobss>

08002df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df4:	3204      	adds	r2, #4

08002df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df8:	d3fb      	bcc.n	8002df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dfa:	f016 f9cf 	bl	801919c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfe:	f7fe fbf7 	bl	80015f0 <main>
  bx  lr
 8002e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e0c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002e10:	0801e378 	.word	0x0801e378
  ldr r2, =_sbss
 8002e14:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002e18:	200082a0 	.word	0x200082a0

08002e1c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e1c:	e7fe      	b.n	8002e1c <ADC_IRQHandler>

08002e1e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <LAN8742_RegisterBusIO+0x28>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <LAN8742_RegisterBusIO+0x28>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <LAN8742_RegisterBusIO+0x28>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	e014      	b.n	8002e76 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d17c      	bne.n	8002f9c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e01c      	b.n	8002ef6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f107 0208 	add.w	r2, r7, #8
 8002ec4:	2112      	movs	r1, #18
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	4798      	blx	r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da03      	bge.n	8002ed8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002ed0:	f06f 0304 	mvn.w	r3, #4
 8002ed4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002ed6:	e00b      	b.n	8002ef0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d105      	bne.n	8002ef0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
         break;
 8002eee:	e005      	b.n	8002efc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b1f      	cmp	r3, #31
 8002efa:	d9df      	bls.n	8002ebc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b1f      	cmp	r3, #31
 8002f02:	d902      	bls.n	8002f0a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002f04:	f06f 0302 	mvn.w	r3, #2
 8002f08:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d145      	bne.n	8002f9c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6810      	ldr	r0, [r2, #0]
 8002f18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4798      	blx	r3
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db37      	blt.n	8002f96 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6810      	ldr	r0, [r2, #0]
 8002f2e:	f107 0208 	add.w	r2, r7, #8
 8002f32:	2100      	movs	r1, #0
 8002f34:	4798      	blx	r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db28      	blt.n	8002f8e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4798      	blx	r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002f46:	e01c      	b.n	8002f82 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	4798      	blx	r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f5a:	d80e      	bhi.n	8002f7a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6810      	ldr	r0, [r2, #0]
 8002f64:	f107 0208 	add.w	r2, r7, #8
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4798      	blx	r3
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da07      	bge.n	8002f82 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002f72:	f06f 0304 	mvn.w	r3, #4
 8002f76:	613b      	str	r3, [r7, #16]
                 break;
 8002f78:	e010      	b.n	8002f9c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002f7a:	f06f 0301 	mvn.w	r3, #1
 8002f7e:	613b      	str	r3, [r7, #16]
               break;
 8002f80:	e00c      	b.n	8002f9c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1dd      	bne.n	8002f48 <LAN8742_Init+0xc6>
 8002f8c:	e006      	b.n	8002f9c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002f8e:	f06f 0304 	mvn.w	r3, #4
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e002      	b.n	8002f9c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002f96:	f06f 0303 	mvn.w	r3, #3
 8002f9a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d112      	bne.n	8002fc8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	4798      	blx	r3
 8002fa8:	4603      	mov	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002fac:	bf00      	nop
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4798      	blx	r3
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002fc0:	d9f5      	bls.n	8002fae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 }
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6810      	ldr	r0, [r2, #0]
 8002fe6:	f107 020c 	add.w	r2, r7, #12
 8002fea:	2101      	movs	r1, #1
 8002fec:	4798      	blx	r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da02      	bge.n	8002ffa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002ff4:	f06f 0304 	mvn.w	r3, #4
 8002ff8:	e06e      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6810      	ldr	r0, [r2, #0]
 8003002:	f107 020c 	add.w	r2, r7, #12
 8003006:	2101      	movs	r1, #1
 8003008:	4798      	blx	r3
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	da02      	bge.n	8003016 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003010:	f06f 0304 	mvn.w	r3, #4
 8003014:	e060      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003020:	2301      	movs	r3, #1
 8003022:	e059      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6810      	ldr	r0, [r2, #0]
 800302c:	f107 020c 	add.w	r2, r7, #12
 8003030:	2100      	movs	r1, #0
 8003032:	4798      	blx	r3
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	da02      	bge.n	8003040 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800303a:	f06f 0304 	mvn.w	r3, #4
 800303e:	e04b      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11b      	bne.n	8003082 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d006      	beq.n	8003062 <LAN8742_GetLinkState+0x90>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800305e:	2302      	movs	r3, #2
 8003060:	e03a      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800306c:	2303      	movs	r3, #3
 800306e:	e033      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800307a:	2304      	movs	r3, #4
 800307c:	e02c      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800307e:	2305      	movs	r3, #5
 8003080:	e02a      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6810      	ldr	r0, [r2, #0]
 800308a:	f107 020c 	add.w	r2, r7, #12
 800308e:	211f      	movs	r1, #31
 8003090:	4798      	blx	r3
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	da02      	bge.n	800309e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003098:	f06f 0304 	mvn.w	r3, #4
 800309c:	e01c      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80030a8:	2306      	movs	r3, #6
 80030aa:	e015      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 031c 	and.w	r3, r3, #28
 80030b2:	2b18      	cmp	r3, #24
 80030b4:	d101      	bne.n	80030ba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80030b6:	2302      	movs	r3, #2
 80030b8:	e00e      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 031c 	and.w	r3, r3, #28
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d101      	bne.n	80030c8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e007      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 031c 	and.w	r3, r3, #28
 80030ce:	2b14      	cmp	r3, #20
 80030d0:	d101      	bne.n	80030d6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80030d2:	2304      	movs	r3, #4
 80030d4:	e000      	b.n	80030d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80030d6:	2305      	movs	r3, #5
    }				
  }
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e6:	2003      	movs	r0, #3
 80030e8:	f001 ff1c 	bl	8004f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030ec:	f006 fbbc 	bl	8009868 <HAL_RCC_GetSysClockFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_Init+0x68>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	4913      	ldr	r1, [pc, #76]	; (800314c <HAL_Init+0x6c>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_Init+0x68>)
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	4a0e      	ldr	r2, [pc, #56]	; (800314c <HAL_Init+0x6c>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	4a0b      	ldr	r2, [pc, #44]	; (8003150 <HAL_Init+0x70>)
 8003122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_Init+0x74>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800312a:	2000      	movs	r0, #0
 800312c:	f000 f814 	bl	8003158 <HAL_InitTick>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e002      	b.n	8003140 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800313a:	f7ff f975 	bl	8002428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	58024400 	.word	0x58024400
 800314c:	0801de74 	.word	0x0801de74
 8003150:	20000014 	.word	0x20000014
 8003154:	20000010 	.word	0x20000010

08003158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003160:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_InitTick+0x60>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e021      	b.n	80031b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_InitTick+0x64>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_InitTick+0x60>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317a:	fbb3 f3f1 	udiv	r3, r3, r1
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	4618      	mov	r0, r3
 8003184:	f001 ff01 	bl	8004f8a <HAL_SYSTICK_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00e      	b.n	80031b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d80a      	bhi.n	80031ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003198:	2200      	movs	r2, #0
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f001 fecb 	bl	8004f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a4:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <HAL_InitTick+0x68>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000024 	.word	0x20000024
 80031bc:	20000010 	.word	0x20000010
 80031c0:	20000020 	.word	0x20000020

080031c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_IncTick+0x20>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_IncTick+0x24>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <HAL_IncTick+0x24>)
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000024 	.word	0x20000024
 80031e8:	200005f8 	.word	0x200005f8

080031ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return uwTick;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_GetTick+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	200005f8 	.word	0x200005f8

08003204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff ffee 	bl	80031ec <HAL_GetTick>
 8003210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d005      	beq.n	800322a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_Delay+0x44>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800322a:	bf00      	nop
 800322c:	f7ff ffde 	bl	80031ec <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	429a      	cmp	r2, r3
 800323a:	d8f7      	bhi.n	800322c <HAL_Delay+0x28>
  {
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000024 	.word	0x20000024

0800324c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <HAL_GetREVID+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0c1b      	lsrs	r3, r3, #16
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	5c001000 	.word	0x5c001000

08003264 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003274:	4904      	ldr	r1, [pc, #16]	; (8003288 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	58000400 	.word	0x58000400

0800328c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	43db      	mvns	r3, r3
 800329e:	401a      	ands	r2, r3
 80032a0:	4904      	ldr	r1, [pc, #16]	; (80032b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	58000400 	.word	0x58000400

080032b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	609a      	str	r2, [r3, #8]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	609a      	str	r2, [r3, #8]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3360      	adds	r3, #96	; 0x60
 8003332:	461a      	mov	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	430b      	orrs	r3, r1
 800334e:	431a      	orrs	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	611a      	str	r2, [r3, #16]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3360      	adds	r3, #96	; 0x60
 80033a2:	461a      	mov	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	601a      	str	r2, [r3, #0]
  }
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3330      	adds	r3, #48	; 0x30
 80033fe:	461a      	mov	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	4413      	add	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	211f      	movs	r1, #31
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	401a      	ands	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	f003 011f 	and.w	r1, r3, #31
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	431a      	orrs	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3314      	adds	r3, #20
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	0e5b      	lsrs	r3, r3, #25
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	4413      	add	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	0d1b      	lsrs	r3, r3, #20
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2107      	movs	r1, #7
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	401a      	ands	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	0d1b      	lsrs	r3, r3, #20
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	431a      	orrs	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f003 0318 	and.w	r3, r3, #24
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <LL_ADC_SetChannelSingleDiff+0x44>)
 80034e8:	40d9      	lsrs	r1, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	400b      	ands	r3, r1
 80034ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034f2:	431a      	orrs	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	000fffff 	.word	0x000fffff

0800350c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 031f 	and.w	r3, r3, #31
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6093      	str	r3, [r2, #8]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	5fffffc0 	.word	0x5fffffc0

08003568 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800357c:	d101      	bne.n	8003582 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800359e:	4013      	ands	r3, r2
 80035a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	6fffffc0 	.word	0x6fffffc0

080035b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <LL_ADC_Enable+0x24>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	7fffffc0 	.word	0x7fffffc0

08003608 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <LL_ADC_Disable+0x24>)
 8003616:	4013      	ands	r3, r2
 8003618:	f043 0202 	orr.w	r2, r3, #2
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	7fffffc0 	.word	0x7fffffc0

08003630 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <LL_ADC_IsEnabled+0x18>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <LL_ADC_IsEnabled+0x1a>
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d101      	bne.n	800366e <LL_ADC_IsDisableOngoing+0x18>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <LL_ADC_IsDisableOngoing+0x1a>
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <LL_ADC_REG_StartConversion+0x24>)
 800368a:	4013      	ands	r3, r2
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	7fffffc0 	.word	0x7fffffc0

080036a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d101      	bne.n	80036bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d101      	bne.n	80036e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b089      	sub	sp, #36	; 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e18f      	b.n	8003a2a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fe fe9f 	bl	800245c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff19 	bl	8003568 <LL_ADC_IsDeepPowerDownEnabled>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff feff 	bl	8003544 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff ff34 	bl	80035b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d114      	bne.n	8003780 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ff18 	bl	8003590 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003760:	4b87      	ldr	r3, [pc, #540]	; (8003980 <HAL_ADC_Init+0x290>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	4a87      	ldr	r2, [pc, #540]	; (8003984 <HAL_ADC_Init+0x294>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	3301      	adds	r3, #1
 8003770:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003772:	e002      	b.n	800377a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3b01      	subs	r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f9      	bne.n	8003774 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ff17 	bl	80035b8 <LL_ADC_IsInternalRegulatorEnabled>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f043 0210 	orr.w	r2, r3, #16
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	f043 0201 	orr.w	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff77 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 80037b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 8129 	bne.w	8003a18 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 8125 	bne.w	8003a18 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037d6:	f043 0202 	orr.w	r2, r3, #2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff24 	bl	8003630 <LL_ADC_IsEnabled>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d136      	bne.n	800385c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a65      	ldr	r2, [pc, #404]	; (8003988 <HAL_ADC_Init+0x298>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_ADC_Init+0x112>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a63      	ldr	r2, [pc, #396]	; (800398c <HAL_ADC_Init+0x29c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10e      	bne.n	8003820 <HAL_ADC_Init+0x130>
 8003802:	4861      	ldr	r0, [pc, #388]	; (8003988 <HAL_ADC_Init+0x298>)
 8003804:	f7ff ff14 	bl	8003630 <LL_ADC_IsEnabled>
 8003808:	4604      	mov	r4, r0
 800380a:	4860      	ldr	r0, [pc, #384]	; (800398c <HAL_ADC_Init+0x29c>)
 800380c:	f7ff ff10 	bl	8003630 <LL_ADC_IsEnabled>
 8003810:	4603      	mov	r3, r0
 8003812:	4323      	orrs	r3, r4
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e008      	b.n	8003832 <HAL_ADC_Init+0x142>
 8003820:	485b      	ldr	r0, [pc, #364]	; (8003990 <HAL_ADC_Init+0x2a0>)
 8003822:	f7ff ff05 	bl	8003630 <LL_ADC_IsEnabled>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a53      	ldr	r2, [pc, #332]	; (8003988 <HAL_ADC_Init+0x298>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_ADC_Init+0x15a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a51      	ldr	r2, [pc, #324]	; (800398c <HAL_ADC_Init+0x29c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_ADC_Init+0x15e>
 800384a:	4a52      	ldr	r2, [pc, #328]	; (8003994 <HAL_ADC_Init+0x2a4>)
 800384c:	e000      	b.n	8003850 <HAL_ADC_Init+0x160>
 800384e:	4a52      	ldr	r2, [pc, #328]	; (8003998 <HAL_ADC_Init+0x2a8>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f7ff fd2e 	bl	80032b8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800385c:	f7ff fcf6 	bl	800324c <HAL_GetREVID>
 8003860:	4603      	mov	r3, r0
 8003862:	f241 0203 	movw	r2, #4099	; 0x1003
 8003866:	4293      	cmp	r3, r2
 8003868:	d914      	bls.n	8003894 <HAL_ADC_Init+0x1a4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b10      	cmp	r3, #16
 8003870:	d110      	bne.n	8003894 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7d5b      	ldrb	r3, [r3, #21]
 8003876:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800387c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003882:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7f1b      	ldrb	r3, [r3, #28]
 8003888:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800388a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800388c:	f043 030c 	orr.w	r3, r3, #12
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	e00d      	b.n	80038b0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7d5b      	ldrb	r3, [r3, #21]
 8003898:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800389e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80038a4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7f1b      	ldrb	r3, [r3, #28]
 80038aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7f1b      	ldrb	r3, [r3, #28]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	3b01      	subs	r3, #1
 80038be:	045b      	lsls	r3, r3, #17
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_ADC_Init+0x2ac>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	430b      	orrs	r3, r1
 80038f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fed2 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8003900:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fedf 	bl	80036ca <LL_ADC_INJ_IsConversionOngoing>
 800390c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d15f      	bne.n	80039d4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d15c      	bne.n	80039d4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7d1b      	ldrb	r3, [r3, #20]
 800391e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <HAL_ADC_Init+0x2b0>)
 8003930:	4013      	ands	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	69b9      	ldr	r1, [r7, #24]
 8003938:	430b      	orrs	r3, r1
 800393a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003942:	2b01      	cmp	r3, #1
 8003944:	d130      	bne.n	80039a8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <HAL_ADC_Init+0x2b4>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800395a:	3a01      	subs	r2, #1
 800395c:	0411      	lsls	r1, r2, #16
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800396e:	430a      	orrs	r2, r1
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	611a      	str	r2, [r3, #16]
 800397c:	e01c      	b.n	80039b8 <HAL_ADC_Init+0x2c8>
 800397e:	bf00      	nop
 8003980:	20000010 	.word	0x20000010
 8003984:	053e2d63 	.word	0x053e2d63
 8003988:	40022000 	.word	0x40022000
 800398c:	40022100 	.word	0x40022100
 8003990:	58026000 	.word	0x58026000
 8003994:	40022300 	.word	0x40022300
 8003998:	58026300 	.word	0x58026300
 800399c:	fff0c003 	.word	0xfff0c003
 80039a0:	ffffbffc 	.word	0xffffbffc
 80039a4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f001 f804 	bl	80049dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10c      	bne.n	80039f6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f023 010f 	bic.w	r1, r3, #15
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	1e5a      	subs	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
 80039f4:	e007      	b.n	8003a06 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 020f 	bic.w	r2, r2, #15
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	f043 0201 	orr.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
 8003a16:	e007      	b.n	8003a28 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	f043 0210 	orr.w	r2, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a28:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd90      	pop	{r4, r7, pc}
 8003a32:	bf00      	nop

08003a34 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a92      	ldr	r2, [pc, #584]	; (8003c8c <HAL_ADC_Start_IT+0x258>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d004      	beq.n	8003a50 <HAL_ADC_Start_IT+0x1c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a91      	ldr	r2, [pc, #580]	; (8003c90 <HAL_ADC_Start_IT+0x25c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d101      	bne.n	8003a54 <HAL_ADC_Start_IT+0x20>
 8003a50:	4b90      	ldr	r3, [pc, #576]	; (8003c94 <HAL_ADC_Start_IT+0x260>)
 8003a52:	e000      	b.n	8003a56 <HAL_ADC_Start_IT+0x22>
 8003a54:	4b90      	ldr	r3, [pc, #576]	; (8003c98 <HAL_ADC_Start_IT+0x264>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fd58 	bl	800350c <LL_ADC_GetMultimode>
 8003a5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fe1e 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 8118 	bne.w	8003ca0 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_Start_IT+0x4a>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e113      	b.n	8003ca6 <HAL_ADC_Start_IT+0x272>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 febe 	bl	8004808 <ADC_Enable>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 80f5 	bne.w	8003c82 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a9c:	4b7f      	ldr	r3, [pc, #508]	; (8003c9c <HAL_ADC_Start_IT+0x268>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a78      	ldr	r2, [pc, #480]	; (8003c90 <HAL_ADC_Start_IT+0x25c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d002      	beq.n	8003ab8 <HAL_ADC_Start_IT+0x84>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	e000      	b.n	8003aba <HAL_ADC_Start_IT+0x86>
 8003ab8:	4b74      	ldr	r3, [pc, #464]	; (8003c8c <HAL_ADC_Start_IT+0x258>)
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d002      	beq.n	8003ac8 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003acc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d006      	beq.n	8003aee <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	f023 0206 	bic.w	r2, r3, #6
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	659a      	str	r2, [r3, #88]	; 0x58
 8003aec:	e002      	b.n	8003af4 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	221c      	movs	r2, #28
 8003afa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 021c 	bic.w	r2, r2, #28
 8003b12:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d108      	bne.n	8003b2e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0208 	orr.w	r2, r2, #8
 8003b2a:	605a      	str	r2, [r3, #4]
          break;
 8003b2c:	e008      	b.n	8003b40 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0204 	orr.w	r2, r2, #4
 8003b3c:	605a      	str	r2, [r3, #4]
          break;
 8003b3e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d107      	bne.n	8003b58 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0210 	orr.w	r2, r2, #16
 8003b56:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a4c      	ldr	r2, [pc, #304]	; (8003c90 <HAL_ADC_Start_IT+0x25c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d002      	beq.n	8003b68 <HAL_ADC_Start_IT+0x134>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	e000      	b.n	8003b6a <HAL_ADC_Start_IT+0x136>
 8003b68:	4b48      	ldr	r3, [pc, #288]	; (8003c8c <HAL_ADC_Start_IT+0x258>)
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d008      	beq.n	8003b84 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d002      	beq.n	8003b84 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	d13a      	bne.n	8003bfa <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02d      	beq.n	8003bee <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d110      	bne.n	8003bcc <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0220 	bic.w	r2, r2, #32
 8003bb8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc8:	605a      	str	r2, [r3, #4]
              break;
 8003bca:	e010      	b.n	8003bee <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bda:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0220 	orr.w	r2, r2, #32
 8003bea:	605a      	str	r2, [r3, #4]
              break;
 8003bec:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fd42 	bl	800367c <LL_ADC_REG_StartConversion>
 8003bf8:	e054      	b.n	8003ca4 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_ADC_Start_IT+0x25c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d002      	beq.n	8003c16 <HAL_ADC_Start_IT+0x1e2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	e000      	b.n	8003c18 <HAL_ADC_Start_IT+0x1e4>
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_ADC_Start_IT+0x258>)
 8003c18:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03e      	beq.n	8003ca4 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d110      	bne.n	8003c60 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0220 	bic.w	r2, r2, #32
 8003c4c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c5c:	605a      	str	r2, [r3, #4]
              break;
 8003c5e:	e021      	b.n	8003ca4 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0220 	orr.w	r2, r2, #32
 8003c7e:	605a      	str	r2, [r3, #4]
              break;
 8003c80:	e010      	b.n	8003ca4 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003c8a:	e00b      	b.n	8003ca4 <HAL_ADC_Start_IT+0x270>
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40022100 	.word	0x40022100
 8003c94:	40022300 	.word	0x40022300
 8003c98:	58026300 	.word	0x58026300
 8003c9c:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop

08003cb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a87      	ldr	r2, [pc, #540]	; (8003f0c <HAL_ADC_IRQHandler+0x240>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_ADC_IRQHandler+0x30>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a86      	ldr	r2, [pc, #536]	; (8003f10 <HAL_ADC_IRQHandler+0x244>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_IRQHandler+0x34>
 8003cfc:	4b85      	ldr	r3, [pc, #532]	; (8003f14 <HAL_ADC_IRQHandler+0x248>)
 8003cfe:	e000      	b.n	8003d02 <HAL_ADC_IRQHandler+0x36>
 8003d00:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_ADC_IRQHandler+0x24c>)
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fc02 	bl	800350c <LL_ADC_GetMultimode>
 8003d08:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d017      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x78>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d012      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f001 f81a 	bl	8004d70 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2202      	movs	r2, #2
 8003d42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_ADC_IRQHandler+0x8c>
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8083 	beq.w	8003e6a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d07d      	beq.n	8003e6a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fb1c 	bl	80033c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d062      	beq.n	8003e5c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5d      	ldr	r2, [pc, #372]	; (8003f10 <HAL_ADC_IRQHandler+0x244>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d002      	beq.n	8003da6 <HAL_ADC_IRQHandler+0xda>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	e000      	b.n	8003da8 <HAL_ADC_IRQHandler+0xdc>
 8003da6:	4b59      	ldr	r3, [pc, #356]	; (8003f0c <HAL_ADC_IRQHandler+0x240>)
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d008      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d002      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b09      	cmp	r3, #9
 8003dc0:	d104      	bne.n	8003dcc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	623b      	str	r3, [r7, #32]
 8003dca:	e00c      	b.n	8003de6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a4f      	ldr	r2, [pc, #316]	; (8003f10 <HAL_ADC_IRQHandler+0x244>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d002      	beq.n	8003ddc <HAL_ADC_IRQHandler+0x110>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	e000      	b.n	8003dde <HAL_ADC_IRQHandler+0x112>
 8003ddc:	4b4b      	ldr	r3, [pc, #300]	; (8003f0c <HAL_ADC_IRQHandler+0x240>)
 8003dde:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d135      	bne.n	8003e5c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d12e      	bne.n	8003e5c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fc4e 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d11a      	bne.n	8003e44 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 020c 	bic.w	r2, r2, #12
 8003e1c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d112      	bne.n	8003e5c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f043 0201 	orr.w	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
 8003e42:	e00b      	b.n	8003e5c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f043 0210 	orr.w	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fe fa91 	bl	8002384 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	220c      	movs	r2, #12
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_ADC_IRQHandler+0x1b2>
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80a0 	beq.w	8003fca <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 809a 	beq.w	8003fca <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fac7 	bl	8003446 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003eb8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fa82 	bl	80033c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ec4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <HAL_ADC_IRQHandler+0x244>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d002      	beq.n	8003ed6 <HAL_ADC_IRQHandler+0x20a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	e000      	b.n	8003ed8 <HAL_ADC_IRQHandler+0x20c>
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <HAL_ADC_IRQHandler+0x240>)
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d008      	beq.n	8003ef2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d002      	beq.n	8003ef2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d104      	bne.n	8003efc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	623b      	str	r3, [r7, #32]
 8003efa:	e014      	b.n	8003f26 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a03      	ldr	r2, [pc, #12]	; (8003f10 <HAL_ADC_IRQHandler+0x244>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00a      	beq.n	8003f1c <HAL_ADC_IRQHandler+0x250>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	e008      	b.n	8003f1e <HAL_ADC_IRQHandler+0x252>
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40022100 	.word	0x40022100
 8003f14:	40022300 	.word	0x40022300
 8003f18:	58026300 	.word	0x58026300
 8003f1c:	4b84      	ldr	r3, [pc, #528]	; (8004130 <HAL_ADC_IRQHandler+0x464>)
 8003f1e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d047      	beq.n	8003fbc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_ADC_IRQHandler+0x27a>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d03f      	beq.n	8003fbc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d13a      	bne.n	8003fbc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d133      	bne.n	8003fbc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d12e      	bne.n	8003fbc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fbb1 	bl	80036ca <LL_ADC_INJ_IsConversionOngoing>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d11a      	bne.n	8003fa4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f7c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d112      	bne.n	8003fbc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
 8003fa2:	e00b      	b.n	8003fbc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	f043 0210 	orr.w	r2, r3, #16
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 feaf 	bl	8004d20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2260      	movs	r2, #96	; 0x60
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d011      	beq.n	8003ff8 <HAL_ADC_IRQHandler+0x32c>
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8a8 	bl	8004140 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d012      	beq.n	8004028 <HAL_ADC_IRQHandler+0x35c>
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fe95 	bl	8004d48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402e:	2b00      	cmp	r3, #0
 8004030:	d012      	beq.n	8004058 <HAL_ADC_IRQHandler+0x38c>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fe87 	bl	8004d5c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	d043      	beq.n	80040ea <HAL_ADC_IRQHandler+0x41e>
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b00      	cmp	r3, #0
 800406a:	d03e      	beq.n	80040ea <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004074:	2301      	movs	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	e021      	b.n	80040be <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <HAL_ADC_IRQHandler+0x464>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_ADC_IRQHandler+0x3c8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a29      	ldr	r2, [pc, #164]	; (8004134 <HAL_ADC_IRQHandler+0x468>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_ADC_IRQHandler+0x3cc>
 8004094:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_ADC_IRQHandler+0x46c>)
 8004096:	e000      	b.n	800409a <HAL_ADC_IRQHandler+0x3ce>
 8004098:	4b28      	ldr	r3, [pc, #160]	; (800413c <HAL_ADC_IRQHandler+0x470>)
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fa44 	bl	8003528 <LL_ADC_GetMultiDMATransfer>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80040a6:	2301      	movs	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
 80040aa:	e008      	b.n	80040be <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80040ba:	2301      	movs	r3, #1
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10e      	bne.n	80040e2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	f043 0202 	orr.w	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f839 	bl	8004154 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2210      	movs	r2, #16
 80040e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d018      	beq.n	8004126 <HAL_ADC_IRQHandler+0x45a>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d013      	beq.n	8004126 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	f043 0208 	orr.w	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800411e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fe07 	bl	8004d34 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004126:	bf00      	nop
 8004128:	3728      	adds	r7, #40	; 0x28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40022000 	.word	0x40022000
 8004134:	40022100 	.word	0x40022100
 8004138:	40022300 	.word	0x40022300
 800413c:	58026300 	.word	0x58026300

08004140 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b0a1      	sub	sp, #132	; 0x84
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a9d      	ldr	r2, [pc, #628]	; (80043f8 <HAL_ADC_ConfigChannel+0x290>)
 8004182:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x2a>
 800418e:	2302      	movs	r3, #2
 8004190:	e321      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x66e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fa80 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 8306 	bne.w	80047b8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x62>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	2201      	movs	r2, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	e016      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x90>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041da:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80041e2:	2320      	movs	r3, #32
 80041e4:	e003      	b.n	80041ee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80041e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2201      	movs	r2, #1
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	69d1      	ldr	r1, [r2, #28]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	430b      	orrs	r3, r1
 8004204:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	f7ff f8eb 	bl	80033ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fa41 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8004222:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fa4e 	bl	80036ca <LL_ADC_INJ_IsConversionOngoing>
 800422e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004232:	2b00      	cmp	r3, #0
 8004234:	f040 80b3 	bne.w	800439e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 80af 	bne.w	800439e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	461a      	mov	r2, r3
 800424e:	f7ff f90d 	bl	800346c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004252:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_ADC_ConfigChannel+0x294>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800425a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425e:	d10b      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x110>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	e01d      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x14c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_ADC_ConfigChannel+0x136>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	e00a      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x14c>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d027      	beq.n	800430e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6919      	ldr	r1, [r3, #16]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042cc:	f7ff f828 	bl	8003320 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6818      	ldr	r0, [r3, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6919      	ldr	r1, [r3, #16]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	7e5b      	ldrb	r3, [r3, #25]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d102      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x17e>
 80042e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042e4:	e000      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x180>
 80042e6:	2300      	movs	r3, #0
 80042e8:	461a      	mov	r2, r3
 80042ea:	f7ff f852 	bl	8003392 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6919      	ldr	r1, [r3, #16]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	7e1b      	ldrb	r3, [r3, #24]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d102      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x19c>
 80042fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004302:	e000      	b.n	8004306 <HAL_ADC_ConfigChannel+0x19e>
 8004304:	2300      	movs	r3, #0
 8004306:	461a      	mov	r2, r3
 8004308:	f7ff f82a 	bl	8003360 <LL_ADC_SetDataRightShift>
 800430c:	e047      	b.n	800439e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	069b      	lsls	r3, r3, #26
 800431e:	429a      	cmp	r2, r3
 8004320:	d107      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004330:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004338:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	069b      	lsls	r3, r3, #26
 8004342:	429a      	cmp	r2, r3
 8004344:	d107      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004354:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	069b      	lsls	r3, r3, #26
 8004366:	429a      	cmp	r2, r3
 8004368:	d107      	bne.n	800437a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004378:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004380:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	069b      	lsls	r3, r3, #26
 800438a:	429a      	cmp	r2, r3
 800438c:	d107      	bne.n	800439e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800439c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f944 	bl	8003630 <LL_ADC_IsEnabled>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 820d 	bne.w	80047ca <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	f7ff f881 	bl	80034c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	4a0c      	ldr	r2, [pc, #48]	; (80043f8 <HAL_ADC_ConfigChannel+0x290>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	f040 8133 	bne.w	8004634 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d110      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x298>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0e9b      	lsrs	r3, r3, #26
 80043e4:	3301      	adds	r3, #1
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2b09      	cmp	r3, #9
 80043ec:	bf94      	ite	ls
 80043ee:	2301      	movls	r3, #1
 80043f0:	2300      	movhi	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	e01e      	b.n	8004434 <HAL_ADC_ConfigChannel+0x2cc>
 80043f6:	bf00      	nop
 80043f8:	47ff0000 	.word	0x47ff0000
 80043fc:	5c001000 	.word	0x5c001000
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800440e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004410:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004418:	2320      	movs	r3, #32
 800441a:	e003      	b.n	8004424 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800441c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	3301      	adds	r3, #1
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2b09      	cmp	r3, #9
 800442c:	bf94      	ite	ls
 800442e:	2301      	movls	r3, #1
 8004430:	2300      	movhi	r3, #0
 8004432:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004434:	2b00      	cmp	r3, #0
 8004436:	d079      	beq.n	800452c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004440:	2b00      	cmp	r3, #0
 8004442:	d107      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x2ec>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0e9b      	lsrs	r3, r3, #26
 800444a:	3301      	adds	r3, #1
 800444c:	069b      	lsls	r3, r3, #26
 800444e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004452:	e015      	b.n	8004480 <HAL_ADC_ConfigChannel+0x318>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004464:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800446c:	2320      	movs	r3, #32
 800446e:	e003      	b.n	8004478 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	3301      	adds	r3, #1
 800447a:	069b      	lsls	r3, r3, #26
 800447c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x338>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	3301      	adds	r3, #1
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	e017      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x368>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80044ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80044b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80044b8:	2320      	movs	r3, #32
 80044ba:	e003      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80044bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3301      	adds	r3, #1
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2101      	movs	r1, #1
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	ea42 0103 	orr.w	r1, r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x38e>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	0e9b      	lsrs	r3, r3, #26
 80044e6:	3301      	adds	r3, #1
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	4613      	mov	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4413      	add	r3, r2
 80044f2:	051b      	lsls	r3, r3, #20
 80044f4:	e018      	b.n	8004528 <HAL_ADC_ConfigChannel+0x3c0>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fe:	fa93 f3a3 	rbit	r3, r3
 8004502:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800450e:	2320      	movs	r3, #32
 8004510:	e003      	b.n	800451a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	fab3 f383 	clz	r3, r3
 8004518:	b2db      	uxtb	r3, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004528:	430b      	orrs	r3, r1
 800452a:	e07e      	b.n	800462a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004534:	2b00      	cmp	r3, #0
 8004536:	d107      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x3e0>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	3301      	adds	r3, #1
 8004540:	069b      	lsls	r3, r3, #26
 8004542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004546:	e015      	b.n	8004574 <HAL_ADC_ConfigChannel+0x40c>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	069b      	lsls	r3, r3, #26
 8004570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x42c>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0e9b      	lsrs	r3, r3, #26
 8004586:	3301      	adds	r3, #1
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	e017      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x45c>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	61bb      	str	r3, [r7, #24]
  return result;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80045ac:	2320      	movs	r3, #32
 80045ae:	e003      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	2101      	movs	r1, #1
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x488>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	0e9b      	lsrs	r3, r3, #26
 80045da:	3301      	adds	r3, #1
 80045dc:	f003 021f 	and.w	r2, r3, #31
 80045e0:	4613      	mov	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	4413      	add	r3, r2
 80045e6:	3b1e      	subs	r3, #30
 80045e8:	051b      	lsls	r3, r3, #20
 80045ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045ee:	e01b      	b.n	8004628 <HAL_ADC_ConfigChannel+0x4c0>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	60fb      	str	r3, [r7, #12]
  return result;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004608:	2320      	movs	r3, #32
 800460a:	e003      	b.n	8004614 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fab3 f383 	clz	r3, r3
 8004612:	b2db      	uxtb	r3, r3
 8004614:	3301      	adds	r3, #1
 8004616:	f003 021f 	and.w	r2, r3, #31
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	3b1e      	subs	r3, #30
 8004622:	051b      	lsls	r3, r3, #20
 8004624:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004628:	430b      	orrs	r3, r1
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	6892      	ldr	r2, [r2, #8]
 800462e:	4619      	mov	r1, r3
 8004630:	f7fe ff1c 	bl	800346c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f280 80c6 	bge.w	80047ca <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a67      	ldr	r2, [pc, #412]	; (80047e0 <HAL_ADC_ConfigChannel+0x678>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_ADC_ConfigChannel+0x4ea>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a65      	ldr	r2, [pc, #404]	; (80047e4 <HAL_ADC_ConfigChannel+0x67c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x4ee>
 8004652:	4b65      	ldr	r3, [pc, #404]	; (80047e8 <HAL_ADC_ConfigChannel+0x680>)
 8004654:	e000      	b.n	8004658 <HAL_ADC_ConfigChannel+0x4f0>
 8004656:	4b65      	ldr	r3, [pc, #404]	; (80047ec <HAL_ADC_ConfigChannel+0x684>)
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fe53 	bl	8003304 <LL_ADC_GetCommonPathInternalCh>
 800465e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a5e      	ldr	r2, [pc, #376]	; (80047e0 <HAL_ADC_ConfigChannel+0x678>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_ADC_ConfigChannel+0x50c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a5d      	ldr	r2, [pc, #372]	; (80047e4 <HAL_ADC_ConfigChannel+0x67c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10e      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x52a>
 8004674:	485a      	ldr	r0, [pc, #360]	; (80047e0 <HAL_ADC_ConfigChannel+0x678>)
 8004676:	f7fe ffdb 	bl	8003630 <LL_ADC_IsEnabled>
 800467a:	4604      	mov	r4, r0
 800467c:	4859      	ldr	r0, [pc, #356]	; (80047e4 <HAL_ADC_ConfigChannel+0x67c>)
 800467e:	f7fe ffd7 	bl	8003630 <LL_ADC_IsEnabled>
 8004682:	4603      	mov	r3, r0
 8004684:	4323      	orrs	r3, r4
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	e008      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x53c>
 8004692:	4857      	ldr	r0, [pc, #348]	; (80047f0 <HAL_ADC_ConfigChannel+0x688>)
 8004694:	f7fe ffcc 	bl	8003630 <LL_ADC_IsEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	bf0c      	ite	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	2300      	movne	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d07d      	beq.n	80047a4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a51      	ldr	r2, [pc, #324]	; (80047f4 <HAL_ADC_ConfigChannel+0x68c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d130      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x5ac>
 80046b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d12b      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a4b      	ldr	r2, [pc, #300]	; (80047f0 <HAL_ADC_ConfigChannel+0x688>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	f040 8081 	bne.w	80047ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a44      	ldr	r2, [pc, #272]	; (80047e0 <HAL_ADC_ConfigChannel+0x678>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_ADC_ConfigChannel+0x574>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a43      	ldr	r2, [pc, #268]	; (80047e4 <HAL_ADC_ConfigChannel+0x67c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x578>
 80046dc:	4a42      	ldr	r2, [pc, #264]	; (80047e8 <HAL_ADC_ConfigChannel+0x680>)
 80046de:	e000      	b.n	80046e2 <HAL_ADC_ConfigChannel+0x57a>
 80046e0:	4a42      	ldr	r2, [pc, #264]	; (80047ec <HAL_ADC_ConfigChannel+0x684>)
 80046e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7fe fdf7 	bl	80032de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_ADC_ConfigChannel+0x690>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	4a41      	ldr	r2, [pc, #260]	; (80047fc <HAL_ADC_ConfigChannel+0x694>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	3301      	adds	r3, #1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004704:	e002      	b.n	800470c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3b01      	subs	r3, #1
 800470a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f9      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004712:	e05a      	b.n	80047ca <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a39      	ldr	r2, [pc, #228]	; (8004800 <HAL_ADC_ConfigChannel+0x698>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d11e      	bne.n	800475c <HAL_ADC_ConfigChannel+0x5f4>
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d119      	bne.n	800475c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <HAL_ADC_ConfigChannel+0x688>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d14b      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <HAL_ADC_ConfigChannel+0x678>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_ADC_ConfigChannel+0x5de>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <HAL_ADC_ConfigChannel+0x67c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x5e2>
 8004746:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <HAL_ADC_ConfigChannel+0x680>)
 8004748:	e000      	b.n	800474c <HAL_ADC_ConfigChannel+0x5e4>
 800474a:	4a28      	ldr	r2, [pc, #160]	; (80047ec <HAL_ADC_ConfigChannel+0x684>)
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f7fe fdc2 	bl	80032de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800475a:	e036      	b.n	80047ca <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a28      	ldr	r2, [pc, #160]	; (8004804 <HAL_ADC_ConfigChannel+0x69c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d131      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x662>
 8004766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d12c      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_ADC_ConfigChannel+0x688>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d127      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_ADC_ConfigChannel+0x678>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_ADC_ConfigChannel+0x626>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <HAL_ADC_ConfigChannel+0x67c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x62a>
 800478e:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <HAL_ADC_ConfigChannel+0x680>)
 8004790:	e000      	b.n	8004794 <HAL_ADC_ConfigChannel+0x62c>
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_ADC_ConfigChannel+0x684>)
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7fe fd9e 	bl	80032de <LL_ADC_SetCommonPathInternalCh>
 80047a2:	e012      	b.n	80047ca <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f043 0220 	orr.w	r2, r3, #32
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80047b6:	e008      	b.n	80047ca <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3784      	adds	r7, #132	; 0x84
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd90      	pop	{r4, r7, pc}
 80047de:	bf00      	nop
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40022100 	.word	0x40022100
 80047e8:	40022300 	.word	0x40022300
 80047ec:	58026300 	.word	0x58026300
 80047f0:	58026000 	.word	0x58026000
 80047f4:	cb840000 	.word	0xcb840000
 80047f8:	20000010 	.word	0x20000010
 80047fc:	053e2d63 	.word	0x053e2d63
 8004800:	c7520000 	.word	0xc7520000
 8004804:	cfb80000 	.word	0xcfb80000

08004808 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe ff0b 	bl	8003630 <LL_ADC_IsEnabled>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d16e      	bne.n	80048fe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	4b38      	ldr	r3, [pc, #224]	; (8004908 <ADC_Enable+0x100>)
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	f043 0210 	orr.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e05a      	b.n	8004900 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fec6 	bl	80035e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004854:	f7fe fcca 	bl	80031ec <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2b      	ldr	r2, [pc, #172]	; (800490c <ADC_Enable+0x104>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <ADC_Enable+0x66>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a29      	ldr	r2, [pc, #164]	; (8004910 <ADC_Enable+0x108>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <ADC_Enable+0x6a>
 800486e:	4b29      	ldr	r3, [pc, #164]	; (8004914 <ADC_Enable+0x10c>)
 8004870:	e000      	b.n	8004874 <ADC_Enable+0x6c>
 8004872:	4b29      	ldr	r3, [pc, #164]	; (8004918 <ADC_Enable+0x110>)
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fe49 	bl	800350c <LL_ADC_GetMultimode>
 800487a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a23      	ldr	r2, [pc, #140]	; (8004910 <ADC_Enable+0x108>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d002      	beq.n	800488c <ADC_Enable+0x84>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	e000      	b.n	800488e <ADC_Enable+0x86>
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <ADC_Enable+0x104>)
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	4293      	cmp	r3, r2
 8004894:	d02c      	beq.n	80048f0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d130      	bne.n	80048fe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800489c:	e028      	b.n	80048f0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe fec4 	bl	8003630 <LL_ADC_IsEnabled>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fe94 	bl	80035e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048b8:	f7fe fc98 	bl	80031ec <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d914      	bls.n	80048f0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d00d      	beq.n	80048f0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f043 0210 	orr.w	r2, r3, #16
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f043 0201 	orr.w	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e007      	b.n	8004900 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d1cf      	bne.n	800489e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	8000003f 	.word	0x8000003f
 800490c:	40022000 	.word	0x40022000
 8004910:	40022100 	.word	0x40022100
 8004914:	40022300 	.word	0x40022300
 8004918:	58026300 	.word	0x58026300

0800491c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe fe94 	bl	8003656 <LL_ADC_IsDisableOngoing>
 800492e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe fe7b 	bl	8003630 <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d047      	beq.n	80049d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d144      	bne.n	80049d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 030d 	and.w	r3, r3, #13
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10c      	bne.n	800496e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fe55 	bl	8003608 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2203      	movs	r2, #3
 8004964:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004966:	f7fe fc41 	bl	80031ec <HAL_GetTick>
 800496a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800496c:	e029      	b.n	80049c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	f043 0210 	orr.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f043 0201 	orr.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e023      	b.n	80049d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800498a:	f7fe fc2f 	bl	80031ec <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d914      	bls.n	80049c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	f043 0210 	orr.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e007      	b.n	80049d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1dc      	bne.n	800498a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7a      	ldr	r2, [pc, #488]	; (8004bd4 <ADC_ConfigureBoostMode+0x1f8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <ADC_ConfigureBoostMode+0x1c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a79      	ldr	r2, [pc, #484]	; (8004bd8 <ADC_ConfigureBoostMode+0x1fc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d109      	bne.n	8004a0c <ADC_ConfigureBoostMode+0x30>
 80049f8:	4b78      	ldr	r3, [pc, #480]	; (8004bdc <ADC_ConfigureBoostMode+0x200>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e008      	b.n	8004a1e <ADC_ConfigureBoostMode+0x42>
 8004a0c:	4b74      	ldr	r3, [pc, #464]	; (8004be0 <ADC_ConfigureBoostMode+0x204>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01c      	beq.n	8004a5c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a22:	f005 f89b 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8004a26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a30:	d010      	beq.n	8004a54 <ADC_ConfigureBoostMode+0x78>
 8004a32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a36:	d873      	bhi.n	8004b20 <ADC_ConfigureBoostMode+0x144>
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d002      	beq.n	8004a44 <ADC_ConfigureBoostMode+0x68>
 8004a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a42:	d16d      	bne.n	8004b20 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	60fb      	str	r3, [r7, #12]
        break;
 8004a52:	e068      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	60fb      	str	r3, [r7, #12]
        break;
 8004a5a:	e064      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	f006 fafc 	bl	800b060 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a72:	d051      	beq.n	8004b18 <ADC_ConfigureBoostMode+0x13c>
 8004a74:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a78:	d854      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004a7a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a7e:	d047      	beq.n	8004b10 <ADC_ConfigureBoostMode+0x134>
 8004a80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a84:	d84e      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004a86:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a8a:	d03d      	beq.n	8004b08 <ADC_ConfigureBoostMode+0x12c>
 8004a8c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a90:	d848      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a96:	d033      	beq.n	8004b00 <ADC_ConfigureBoostMode+0x124>
 8004a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a9c:	d842      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004a9e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004aa2:	d029      	beq.n	8004af8 <ADC_ConfigureBoostMode+0x11c>
 8004aa4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004aa8:	d83c      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004aaa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004aae:	d01a      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004ab0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ab4:	d836      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004ab6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004aba:	d014      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004abc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ac0:	d830      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d00e      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004acc:	d82a      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004ace:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad2:	d008      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004ad4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad8:	d824      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004ada:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ade:	d002      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004ae0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ae4:	d11e      	bne.n	8004b24 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	0c9b      	lsrs	r3, r3, #18
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	60fb      	str	r3, [r7, #12]
        break;
 8004af6:	e016      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	60fb      	str	r3, [r7, #12]
        break;
 8004afe:	e012      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	60fb      	str	r3, [r7, #12]
        break;
 8004b06:	e00e      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	60fb      	str	r3, [r7, #12]
        break;
 8004b0e:	e00a      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	09db      	lsrs	r3, r3, #7
 8004b14:	60fb      	str	r3, [r7, #12]
        break;
 8004b16:	e006      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	60fb      	str	r3, [r7, #12]
        break;
 8004b1e:	e002      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b24:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004b26:	f7fe fb91 	bl	800324c <HAL_GetREVID>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d815      	bhi.n	8004b60 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <ADC_ConfigureBoostMode+0x208>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d908      	bls.n	8004b4e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b4c:	e03e      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b5c:	609a      	str	r2, [r3, #8]
}
 8004b5e:	e035      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <ADC_ConfigureBoostMode+0x20c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d808      	bhi.n	8004b80 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	e025      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <ADC_ConfigureBoostMode+0x210>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d80a      	bhi.n	8004b9e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9a:	609a      	str	r2, [r3, #8]
}
 8004b9c:	e016      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <ADC_ConfigureBoostMode+0x214>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d80a      	bhi.n	8004bbc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb8:	609a      	str	r2, [r3, #8]
}
 8004bba:	e007      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40022000 	.word	0x40022000
 8004bd8:	40022100 	.word	0x40022100
 8004bdc:	40022300 	.word	0x40022300
 8004be0:	58026300 	.word	0x58026300
 8004be4:	01312d00 	.word	0x01312d00
 8004be8:	005f5e10 	.word	0x005f5e10
 8004bec:	00bebc20 	.word	0x00bebc20
 8004bf0:	017d7840 	.word	0x017d7840

08004bf4 <LL_ADC_StartCalibration>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <LL_ADC_StartCalibration+0x38>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c14:	430a      	orrs	r2, r1
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	3ffeffc0 	.word	0x3ffeffc0

08004c30 <LL_ADC_IsCalibrationOnGoing>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c44:	d101      	bne.n	8004c4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_ADCEx_Calibration_Start+0x1e>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e04c      	b.n	8004d10 <HAL_ADCEx_Calibration_Start+0xb8>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f7ff fe4c 	bl	800491c <ADC_Disable>
 8004c84:	4603      	mov	r3, r0
 8004c86:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d135      	bne.n	8004cfa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	f043 0202 	orr.w	r2, r3, #2
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ffa4 	bl	8004bf4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cac:	e014      	b.n	8004cd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <HAL_ADCEx_Calibration_Start+0xc4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d30d      	bcc.n	8004cd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	f023 0312 	bic.w	r3, r3, #18
 8004cc4:	f043 0210 	orr.w	r2, r3, #16
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e01b      	b.n	8004d10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ffa7 	bl	8004c30 <LL_ADC_IsCalibrationOnGoing>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e2      	bne.n	8004cae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	f023 0303 	bic.w	r3, r3, #3
 8004cf0:	f043 0201 	orr.w	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
 8004cf8:	e005      	b.n	8004d06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	f043 0210 	orr.w	r2, r3, #16
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	ffffeefd 	.word	0xffffeefd
 8004d1c:	25c3f800 	.word	0x25c3f800

08004d20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <__NVIC_SetPriorityGrouping>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004da0:	4013      	ands	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004db2:	4a04      	ldr	r2, [pc, #16]	; (8004dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	60d3      	str	r3, [r2, #12]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00
 8004dc8:	05fa0000 	.word	0x05fa0000

08004dcc <__NVIC_GetPriorityGrouping>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <__NVIC_GetPriorityGrouping+0x18>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	f003 0307 	and.w	r3, r3, #7
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000ed00 	.word	0xe000ed00

08004de8 <__NVIC_EnableIRQ>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db0b      	blt.n	8004e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	f003 021f 	and.w	r2, r3, #31
 8004e00:	4907      	ldr	r1, [pc, #28]	; (8004e20 <__NVIC_EnableIRQ+0x38>)
 8004e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2001      	movs	r0, #1
 8004e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000e100 	.word	0xe000e100

08004e24 <__NVIC_SetPriority>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	db0a      	blt.n	8004e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	490c      	ldr	r1, [pc, #48]	; (8004e70 <__NVIC_SetPriority+0x4c>)
 8004e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e42:	0112      	lsls	r2, r2, #4
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	440b      	add	r3, r1
 8004e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e4c:	e00a      	b.n	8004e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	4908      	ldr	r1, [pc, #32]	; (8004e74 <__NVIC_SetPriority+0x50>)
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	0112      	lsls	r2, r2, #4
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	440b      	add	r3, r1
 8004e62:	761a      	strb	r2, [r3, #24]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	e000e100 	.word	0xe000e100
 8004e74:	e000ed00 	.word	0xe000ed00

08004e78 <NVIC_EncodePriority>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f1c3 0307 	rsb	r3, r3, #7
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	bf28      	it	cs
 8004e96:	2304      	movcs	r3, #4
 8004e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d902      	bls.n	8004ea8 <NVIC_EncodePriority+0x30>
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3b03      	subs	r3, #3
 8004ea6:	e000      	b.n	8004eaa <NVIC_EncodePriority+0x32>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	401a      	ands	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eca:	43d9      	mvns	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed0:	4313      	orrs	r3, r2
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3724      	adds	r7, #36	; 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ef0:	d301      	bcc.n	8004ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e00f      	b.n	8004f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <SysTick_Config+0x40>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004efe:	210f      	movs	r1, #15
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	f7ff ff8e 	bl	8004e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <SysTick_Config+0x40>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f0e:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <SysTick_Config+0x40>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000e010 	.word	0xe000e010

08004f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff29 	bl	8004d84 <__NVIC_SetPriorityGrouping>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	4603      	mov	r3, r0
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f48:	f7ff ff40 	bl	8004dcc <__NVIC_GetPriorityGrouping>
 8004f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	6978      	ldr	r0, [r7, #20]
 8004f54:	f7ff ff90 	bl	8004e78 <NVIC_EncodePriority>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff5f 	bl	8004e24 <__NVIC_SetPriority>
}
 8004f66:	bf00      	nop
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	4603      	mov	r3, r0
 8004f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ff33 	bl	8004de8 <__NVIC_EnableIRQ>
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff ffa4 	bl	8004ee0 <SysTick_Config>
 8004f98:	4603      	mov	r3, r0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e014      	b.n	8004fde <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	791b      	ldrb	r3, [r3, #4]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d105      	bne.n	8004fca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fd fab1 	bl	800252c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	795b      	ldrb	r3, [r3, #5]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_DAC_Start+0x16>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e040      	b.n	800507e <HAL_DAC_Start+0x98>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2201      	movs	r2, #1
 8005016:	409a      	lsls	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10f      	bne.n	8005046 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005030:	2b02      	cmp	r3, #2
 8005032:	d11d      	bne.n	8005070 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	e014      	b.n	8005070 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2102      	movs	r1, #2
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	429a      	cmp	r2, r3
 800505e:	d107      	bne.n	8005070 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0202 	orr.w	r2, r2, #2
 800506e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800508a:	b480      	push	{r7}
 800508c:	b087      	sub	sp, #28
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	3308      	adds	r3, #8
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e004      	b.n	80050be <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	3314      	adds	r3, #20
 80050bc:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	461a      	mov	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	795b      	ldrb	r3, [r3, #5]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_DAC_ConfigChannel+0x18>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e12a      	b.n	8005342 <HAL_DAC_ConfigChannel+0x26e>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	f040 8081 	bne.w	8005204 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005102:	f7fe f873 	bl	80031ec <HAL_GetTick>
 8005106:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d140      	bne.n	8005190 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800510e:	e018      	b.n	8005142 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005110:	f7fe f86c 	bl	80031ec <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	d911      	bls.n	8005142 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005124:	4b89      	ldr	r3, [pc, #548]	; (800534c <HAL_DAC_ConfigChannel+0x278>)
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f043 0208 	orr.w	r2, r3, #8
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2203      	movs	r2, #3
 800513c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0ff      	b.n	8005342 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005148:	4b80      	ldr	r3, [pc, #512]	; (800534c <HAL_DAC_ConfigChannel+0x278>)
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1df      	bne.n	8005110 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005150:	2001      	movs	r0, #1
 8005152:	f7fe f857 	bl	8003204 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	6992      	ldr	r2, [r2, #24]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40
 8005160:	e023      	b.n	80051aa <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005162:	f7fe f843 	bl	80031ec <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d90f      	bls.n	8005190 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	2b00      	cmp	r3, #0
 8005178:	da0a      	bge.n	8005190 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f043 0208 	orr.w	r2, r3, #8
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2203      	movs	r2, #3
 800518a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0d8      	b.n	8005342 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	2b00      	cmp	r3, #0
 8005198:	dbe3      	blt.n	8005162 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800519a:	2001      	movs	r0, #1
 800519c:	f7fe f832 	bl	8003204 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	6992      	ldr	r2, [r2, #24]
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80051ba:	fa01 f303 	lsl.w	r3, r1, r3
 80051be:	43db      	mvns	r3, r3
 80051c0:	ea02 0103 	and.w	r1, r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	409a      	lsls	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	21ff      	movs	r1, #255	; 0xff
 80051e6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	ea02 0103 	and.w	r1, r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6a1a      	ldr	r2, [r3, #32]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	409a      	lsls	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d11d      	bne.n	8005248 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	221f      	movs	r2, #31
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4013      	ands	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2207      	movs	r2, #7
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4013      	ands	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e00f      	b.n	8005292 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d102      	bne.n	8005280 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800527a:	2301      	movs	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	e008      	b.n	8005292 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005288:	2301      	movs	r3, #1
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	e001      	b.n	8005292 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4313      	orrs	r3, r2
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6819      	ldr	r1, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43da      	mvns	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	400a      	ands	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	43db      	mvns	r3, r3
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4013      	ands	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	22c0      	movs	r2, #192	; 0xc0
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43da      	mvns	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	400a      	ands	r2, r1
 8005332:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20008000 	.word	0x20008000

08005350 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e0cf      	b.n	8005502 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2223      	movs	r2, #35	; 0x23
 8005370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f009 f8db 	bl	800e530 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800537a:	4b64      	ldr	r3, [pc, #400]	; (800550c <HAL_ETH_Init+0x1bc>)
 800537c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005380:	4a62      	ldr	r2, [pc, #392]	; (800550c <HAL_ETH_Init+0x1bc>)
 8005382:	f043 0302 	orr.w	r3, r3, #2
 8005386:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800538a:	4b60      	ldr	r3, [pc, #384]	; (800550c <HAL_ETH_Init+0x1bc>)
 800538c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7a1b      	ldrb	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80053a0:	2000      	movs	r0, #0
 80053a2:	f7fd ff5f 	bl	8003264 <HAL_SYSCFG_ETHInterfaceSelect>
 80053a6:	e003      	b.n	80053b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80053a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80053ac:	f7fd ff5a 	bl	8003264 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80053b0:	4b57      	ldr	r3, [pc, #348]	; (8005510 <HAL_ETH_Init+0x1c0>)
 80053b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053cc:	f7fd ff0e 	bl	80031ec <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053d2:	e011      	b.n	80053f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80053d4:	f7fd ff0a 	bl	80031ec <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053e2:	d909      	bls.n	80053f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2204      	movs	r2, #4
 80053e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	22e0      	movs	r2, #224	; 0xe0
 80053f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e084      	b.n	8005502 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e4      	bne.n	80053d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fcd4 	bl	8005db8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005410:	f004 fba4 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8005414:	4603      	mov	r3, r0
 8005416:	4a3f      	ldr	r2, [pc, #252]	; (8005514 <HAL_ETH_Init+0x1c4>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	0c9a      	lsrs	r2, r3, #18
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3a01      	subs	r2, #1
 8005424:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 febf 	bl	80061ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005436:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800543a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800544a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	22e0      	movs	r2, #224	; 0xe0
 8005466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e049      	b.n	8005502 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005476:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800547a:	4b27      	ldr	r3, [pc, #156]	; (8005518 <HAL_ETH_Init+0x1c8>)
 800547c:	4013      	ands	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6952      	ldr	r2, [r2, #20]
 8005482:	0051      	lsls	r1, r2, #1
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	430b      	orrs	r3, r1
 800548a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800548e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 ff27 	bl	80062e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 ff6d 	bl	8006378 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	3305      	adds	r3, #5
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	021a      	lsls	r2, r3, #8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	4619      	mov	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	3303      	adds	r3, #3
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	061a      	lsls	r2, r3, #24
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	3302      	adds	r3, #2
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	041b      	lsls	r3, r3, #16
 80054d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	3301      	adds	r3, #1
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2210      	movs	r2, #16
 80054fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	58024400 	.word	0x58024400
 8005510:	58000400 	.word	0x58000400
 8005514:	431bde83 	.word	0x431bde83
 8005518:	ffff8001 	.word	0xffff8001

0800551c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552a:	2b10      	cmp	r3, #16
 800552c:	d153      	bne.n	80055d6 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2223      	movs	r2, #35	; 0x23
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2204      	movs	r2, #4
 800553a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f936 	bl	80057ae <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0202 	orr.w	r2, r2, #2
 8005550:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800558e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055aa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80055c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055c6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2223      	movs	r2, #35	; 0x23
 80055ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
  }
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ee:	2b23      	cmp	r3, #35	; 0x23
 80055f0:	d13f      	bne.n	8005672 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2223      	movs	r2, #35	; 0x23
 80055f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005602:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005612:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800562e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0202 	bic.w	r2, r2, #2
 8005664:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2210      	movs	r2, #16
 800566a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e000      	b.n	8005674 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f043 0201 	orr.w	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e07f      	b.n	80057a6 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ac:	2b23      	cmp	r3, #35	; 0x23
 80056ae:	d179      	bne.n	80057a4 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80056b0:	2200      	movs	r2, #0
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 febd 	bl	8006434 <ETH_Prepare_Tx_Descriptors>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f043 0202 	orr.w	r2, r3, #2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e068      	b.n	80057a6 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80056d4:	f3bf 8f4f 	dsb	sy
}
 80056d8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3206      	adds	r2, #6
 80056e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d904      	bls.n	8005704 <HAL_ETH_Transmit+0x84>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	1f1a      	subs	r2, r3, #4
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3106      	adds	r1, #6
 8005710:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005714:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005718:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 800571c:	f7fd fd66 	bl	80031ec <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005722:	e039      	b.n	8005798 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d012      	beq.n	800575e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573e:	f043 0208 	orr.w	r2, r3, #8
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005750:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e023      	b.n	80057a6 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d018      	beq.n	8005798 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fd fd41 	bl	80031ec <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <HAL_ETH_Transmit+0xfc>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005782:	f043 0204 	orr.w	r2, r3, #4
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005792:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e006      	b.n	80057a6 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	dbc1      	blt.n	8005724 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b088      	sub	sp, #32
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80057ba:	2301      	movs	r3, #1
 80057bc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	3212      	adds	r2, #18
 80057ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ce:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80057d6:	e03b      	b.n	8005850 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d112      	bne.n	8005806 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4618      	mov	r0, r3
 80057e6:	f009 f84b 	bl	800e880 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	74fb      	strb	r3, [r7, #19]
 80057f4:	e007      	b.n	8005806 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	461a      	mov	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	461a      	mov	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d021      	beq.n	8005850 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800580c:	f3bf 8f5f 	dmb	sy
}
 8005810:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	e003      	b.n	800582c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800582a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	3301      	adds	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d902      	bls.n	800583e <ETH_UpdateDescriptor+0x90>
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	3b04      	subs	r3, #4
 800583c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	3212      	adds	r2, #18
 8005844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005848:	617b      	str	r3, [r7, #20]
      desccount--;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3b01      	subs	r3, #1
 800584e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <ETH_UpdateDescriptor+0xae>
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1bd      	bne.n	80057d8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	429a      	cmp	r2, r3
 8005864:	d00d      	beq.n	8005882 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586e:	461a      	mov	r2, r3
 8005870:	2300      	movs	r3, #0
 8005872:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8005882:	bf00      	nop
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b086      	sub	sp, #24
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e03e      	b.n	800592a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058b4:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	055b      	lsls	r3, r3, #21
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	041b      	lsls	r3, r3, #16
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f043 030c 	orr.w	r3, r3, #12
 80058d8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80058ec:	f7fd fc7e 	bl	80031ec <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80058f2:	e009      	b.n	8005908 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80058f4:	f7fd fc7a 	bl	80031ec <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005902:	d901      	bls.n	8005908 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e010      	b.n	800592a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ed      	bne.n	80058f4 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005920:	b29b      	uxth	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e03c      	b.n	80059d0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800595e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	055b      	lsls	r3, r3, #21
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	041b      	lsls	r3, r3, #16
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 030c 	bic.w	r3, r3, #12
 8005982:	f043 0304 	orr.w	r3, r3, #4
 8005986:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	b29a      	uxth	r2, r3
 8005994:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <HAL_ETH_WritePHYRegister+0xa4>)
 8005996:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800599a:	4a0f      	ldr	r2, [pc, #60]	; (80059d8 <HAL_ETH_WritePHYRegister+0xa4>)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80059a2:	f7fd fc23 	bl	80031ec <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80059a8:	e009      	b.n	80059be <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80059aa:	f7fd fc1f 	bl	80031ec <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059b8:	d901      	bls.n	80059be <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e008      	b.n	80059d0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1ed      	bne.n	80059aa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40028000 	.word	0x40028000

080059dc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e1c3      	b.n	8005d78 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 020c 	and.w	r2, r3, #12
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bf0c      	ite	eq
 8005a36:	2301      	moveq	r3, #1
 8005a38:	2300      	movne	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8005a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf14      	ite	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	2300      	moveq	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf14      	ite	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	2300      	moveq	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8005b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf14      	ite	ne
 8005b72:	2301      	movne	r3, #1
 8005b74:	2300      	moveq	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bf14      	ite	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	2300      	moveq	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bf14      	ite	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	2300      	moveq	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8005c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	0e5b      	lsrs	r3, r3, #25
 8005c3a:	f003 021f 	and.w	r2, r3, #31
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bf14      	ite	ne
 8005c7a:	2301      	movne	r3, #1
 8005c7c:	2300      	moveq	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	bf0c      	ite	eq
 8005c96:	2301      	moveq	r3, #1
 8005c98:	2300      	movne	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bf14      	ite	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bf14      	ite	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	2300      	moveq	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005d04:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005d14:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf14      	ite	ne
 8005d2c:	2301      	movne	r3, #1
 8005d2e:	2300      	moveq	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e00b      	b.n	8005db0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	d105      	bne.n	8005dae <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f85f 	bl	8005e68 <ETH_SetMACConfig>

    return HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e000      	b.n	8005db0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
  }
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005dd2:	f003 fec3 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8005dd6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d908      	bls.n	8005df2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d804      	bhi.n	8005df2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e027      	b.n	8005e42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d908      	bls.n	8005e0c <HAL_ETH_SetMDIOClockRange+0x54>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d204      	bcs.n	8005e0c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e01a      	b.n	8005e42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d303      	bcc.n	8005e1c <HAL_ETH_SetMDIOClockRange+0x64>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4a12      	ldr	r2, [pc, #72]	; (8005e60 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d911      	bls.n	8005e40 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d908      	bls.n	8005e36 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a0f      	ldr	r2, [pc, #60]	; (8005e64 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d804      	bhi.n	8005e36 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e005      	b.n	8005e42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e000      	b.n	8005e42 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005e40:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	01312cff 	.word	0x01312cff
 8005e58:	02160ebf 	.word	0x02160ebf
 8005e5c:	03938700 	.word	0x03938700
 8005e60:	05f5e0ff 	.word	0x05f5e0ff
 8005e64:	08f0d17f 	.word	0x08f0d17f

08005e68 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	791b      	ldrb	r3, [r3, #4]
 8005e80:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005e82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	7b1b      	ldrb	r3, [r3, #12]
 8005e88:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005e8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	7b5b      	ldrb	r3, [r3, #13]
 8005e90:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005e92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	7b9b      	ldrb	r3, [r3, #14]
 8005e98:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005e9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	7bdb      	ldrb	r3, [r3, #15]
 8005ea0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005ea2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	7c12      	ldrb	r2, [r2, #16]
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	d102      	bne.n	8005eb2 <ETH_SetMACConfig+0x4a>
 8005eac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005eb0:	e000      	b.n	8005eb4 <ETH_SetMACConfig+0x4c>
 8005eb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005eb4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	7c52      	ldrb	r2, [r2, #17]
 8005eba:	2a00      	cmp	r2, #0
 8005ebc:	d102      	bne.n	8005ec4 <ETH_SetMACConfig+0x5c>
 8005ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ec2:	e000      	b.n	8005ec6 <ETH_SetMACConfig+0x5e>
 8005ec4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005ec6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	7c9b      	ldrb	r3, [r3, #18]
 8005ecc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005ece:	431a      	orrs	r2, r3
               macconf->Speed |
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005ed4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005eda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	7f1b      	ldrb	r3, [r3, #28]
 8005ee0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005ee2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	7f5b      	ldrb	r3, [r3, #29]
 8005ee8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005eea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	7f92      	ldrb	r2, [r2, #30]
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	d102      	bne.n	8005efa <ETH_SetMACConfig+0x92>
 8005ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ef8:	e000      	b.n	8005efc <ETH_SetMACConfig+0x94>
 8005efa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005efc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	7fdb      	ldrb	r3, [r3, #31]
 8005f02:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005f04:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d102      	bne.n	8005f16 <ETH_SetMACConfig+0xae>
 8005f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f14:	e000      	b.n	8005f18 <ETH_SetMACConfig+0xb0>
 8005f16:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005f18:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005f1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f26:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005f28:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b56      	ldr	r3, [pc, #344]	; (8006094 <ETH_SetMACConfig+0x22c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	68f9      	ldr	r1, [r7, #12]
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f52:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005f54:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f5c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005f5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f66:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005f68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	d102      	bne.n	8005f7a <ETH_SetMACConfig+0x112>
 8005f74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f78:	e000      	b.n	8005f7c <ETH_SetMACConfig+0x114>
 8005f7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005f7c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	4b42      	ldr	r3, [pc, #264]	; (8006098 <ETH_SetMACConfig+0x230>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	68f9      	ldr	r1, [r7, #12]
 8005f96:	430b      	orrs	r3, r1
 8005f98:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fa0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	4b3a      	ldr	r3, [pc, #232]	; (800609c <ETH_SetMACConfig+0x234>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	68f9      	ldr	r1, [r7, #12]
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005fc4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005fca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	d101      	bne.n	8005fda <ETH_SetMACConfig+0x172>
 8005fd6:	2280      	movs	r2, #128	; 0x80
 8005fd8:	e000      	b.n	8005fdc <ETH_SetMACConfig+0x174>
 8005fda:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005fdc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	68f9      	ldr	r1, [r7, #12]
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006004:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800600c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	f023 0103 	bic.w	r1, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	430a      	orrs	r2, r1
 8006026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006032:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800604e:	2a00      	cmp	r2, #0
 8006050:	d101      	bne.n	8006056 <ETH_SetMACConfig+0x1ee>
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	e000      	b.n	8006058 <ETH_SetMACConfig+0x1f0>
 8006056:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006058:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006060:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006062:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800606a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006078:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	430a      	orrs	r2, r1
 8006084:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	00048083 	.word	0x00048083
 8006098:	c0f88000 	.word	0xc0f88000
 800609c:	fffffef0 	.word	0xfffffef0

080060a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b38      	ldr	r3, [pc, #224]	; (8006198 <ETH_SetDMAConfig+0xf8>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	6811      	ldr	r1, [r2, #0]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	430b      	orrs	r3, r1
 80060c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80060d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	7b1b      	ldrb	r3, [r3, #12]
 80060d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	4b2c      	ldr	r3, [pc, #176]	; (800619c <ETH_SetDMAConfig+0xfc>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	68f9      	ldr	r1, [r7, #12]
 80060f2:	430b      	orrs	r3, r1
 80060f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	7b5b      	ldrb	r3, [r3, #13]
 80060fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006110:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006114:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <ETH_SetDMAConfig+0x100>)
 8006116:	4013      	ands	r3, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	430b      	orrs	r3, r1
 8006120:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006124:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	7d1b      	ldrb	r3, [r3, #20]
 8006130:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006132:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	7f5b      	ldrb	r3, [r3, #29]
 8006138:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006146:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800614a:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <ETH_SetDMAConfig+0x104>)
 800614c:	4013      	ands	r3, r2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	430b      	orrs	r3, r1
 8006156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800615a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	7f1b      	ldrb	r3, [r3, #28]
 8006162:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006174:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <ETH_SetDMAConfig+0x108>)
 800617a:	4013      	ands	r3, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	430b      	orrs	r3, r1
 8006184:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006188:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	ffff87fd 	.word	0xffff87fd
 800619c:	ffff2ffe 	.word	0xffff2ffe
 80061a0:	fffec000 	.word	0xfffec000
 80061a4:	ffc0efef 	.word	0xffc0efef
 80061a8:	7fc0ffff 	.word	0x7fc0ffff

080061ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b0a4      	sub	sp, #144	; 0x90
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80061ba:	2300      	movs	r3, #0
 80061bc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80061e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061ec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80061fe:	2300      	movs	r3, #0
 8006200:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006204:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006208:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800620a:	2300      	movs	r3, #0
 800620c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800621a:	2300      	movs	r3, #0
 800621c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006226:	2300      	movs	r3, #0
 8006228:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800622a:	2300      	movs	r3, #0
 800622c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800622e:	2300      	movs	r3, #0
 8006230:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006232:	2300      	movs	r3, #0
 8006234:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006238:	2300      	movs	r3, #0
 800623a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006244:	2320      	movs	r3, #32
 8006246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800624a:	2301      	movs	r3, #1
 800624c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006250:	2300      	movs	r3, #0
 8006252:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006256:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800625c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006260:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006262:	2300      	movs	r3, #0
 8006264:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006268:	2302      	movs	r3, #2
 800626a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800626e:	2300      	movs	r3, #0
 8006270:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006274:	2300      	movs	r3, #0
 8006276:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800627a:	2300      	movs	r3, #0
 800627c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006286:	2300      	movs	r3, #0
 8006288:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800628a:	2301      	movs	r3, #1
 800628c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fde6 	bl	8005e68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800629c:	2301      	movs	r3, #1
 800629e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80062a0:	2301      	movs	r3, #1
 80062a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80062b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80062ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80062bc:	2300      	movs	r3, #0
 80062be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80062c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80062c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80062cc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fee1 	bl	80060a0 <ETH_SetDMAConfig>
}
 80062de:	bf00      	nop
 80062e0:	3790      	adds	r7, #144	; 0x90
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e01d      	b.n	8006330 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68d9      	ldr	r1, [r3, #12]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	440b      	add	r3, r1
 8006304:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2200      	movs	r2, #0
 800631c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	3206      	adds	r2, #6
 8006326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3301      	adds	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d9de      	bls.n	80062f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006344:	461a      	mov	r2, r3
 8006346:	2303      	movs	r3, #3
 8006348:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006358:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006368:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e023      	b.n	80063ce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6919      	ldr	r1, [r3, #16]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4613      	mov	r3, r2
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	4413      	add	r3, r2
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	440b      	add	r3, r1
 8006396:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2200      	movs	r2, #0
 80063a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2200      	movs	r2, #0
 80063a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2200      	movs	r2, #0
 80063ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2200      	movs	r2, #0
 80063ba:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	3212      	adds	r2, #18
 80063c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3301      	adds	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d9d8      	bls.n	8006386 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fa:	461a      	mov	r2, r3
 80063fc:	2303      	movs	r3, #3
 80063fe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006422:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006434:	b480      	push	{r7}
 8006436:	b08d      	sub	sp, #52	; 0x34
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3318      	adds	r3, #24
 8006444:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006476:	d007      	beq.n	8006488 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	3304      	adds	r3, #4
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006488:	2302      	movs	r3, #2
 800648a:	e259      	b.n	8006940 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d044      	beq.n	8006522 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	4b75      	ldr	r3, [pc, #468]	; (8006674 <ETH_Prepare_Tx_Descriptors+0x240>)
 800649e:	4013      	ands	r3, r2
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064a4:	431a      	orrs	r2, r3
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80064c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d027      	beq.n	8006522 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	431a      	orrs	r2, r3
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	431a      	orrs	r2, r3
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006510:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006520:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00e      	beq.n	800654c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	4b51      	ldr	r3, [pc, #324]	; (8006678 <ETH_Prepare_Tx_Descriptors+0x244>)
 8006534:	4013      	ands	r3, r2
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	6992      	ldr	r2, [r2, #24]
 800653a:	431a      	orrs	r2, r3
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d036      	beq.n	80065d2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006570:	f3bf 8f5f 	dmb	sy
}
 8006574:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	3301      	adds	r3, #1
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	2b03      	cmp	r3, #3
 800658c:	d902      	bls.n	8006594 <ETH_Prepare_Tx_Descriptors+0x160>
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	3b04      	subs	r3, #4
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	3301      	adds	r3, #1
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b0:	d10f      	bne.n	80065d2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80065bc:	f3bf 8f5f 	dmb	sy
}
 80065c0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80065ce:	2302      	movs	r3, #2
 80065d0:	e1b6      	b.n	8006940 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	3301      	adds	r3, #1
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	4b24      	ldr	r3, [pc, #144]	; (8006678 <ETH_Prepare_Tx_Descriptors+0x244>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	6852      	ldr	r2, [r2, #4]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d012      	beq.n	8006622 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	4b1a      	ldr	r3, [pc, #104]	; (800667c <ETH_Prepare_Tx_Descriptors+0x248>)
 8006612:	4013      	ands	r3, r2
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	6852      	ldr	r2, [r2, #4]
 8006618:	0412      	lsls	r2, r2, #16
 800661a:	431a      	orrs	r2, r3
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	609a      	str	r2, [r3, #8]
 8006620:	e008      	b.n	8006634 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	2200      	movs	r2, #0
 8006626:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	4b13      	ldr	r3, [pc, #76]	; (800667c <ETH_Prepare_Tx_Descriptors+0x248>)
 800662e:	4013      	ands	r3, r2
 8006630:	6a3a      	ldr	r2, [r7, #32]
 8006632:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d021      	beq.n	8006684 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	04db      	lsls	r3, r3, #19
 800664e:	431a      	orrs	r2, r3
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	4b09      	ldr	r3, [pc, #36]	; (8006680 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800665a:	4013      	ands	r3, r2
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	69d2      	ldr	r2, [r2, #28]
 8006660:	431a      	orrs	r2, r3
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	e02e      	b.n	80066d2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8006674:	ffff0000 	.word	0xffff0000
 8006678:	ffffc000 	.word	0xffffc000
 800667c:	c000ffff 	.word	0xc000ffff
 8006680:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	4b7b      	ldr	r3, [pc, #492]	; (8006878 <ETH_Prepare_Tx_Descriptors+0x444>)
 800668a:	4013      	ands	r3, r2
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	6852      	ldr	r2, [r2, #4]
 8006690:	431a      	orrs	r2, r3
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d008      	beq.n	80066f0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	431a      	orrs	r2, r3
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006708:	f3bf 8f5f 	dmb	sy
}
 800670c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80da 	beq.w	80068dc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	431a      	orrs	r2, r3
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800673a:	e0cf      	b.n	80068dc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	3301      	adds	r3, #1
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	2b03      	cmp	r3, #3
 8006752:	d902      	bls.n	800675a <ETH_Prepare_Tx_Descriptors+0x326>
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	3b04      	subs	r3, #4
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800677c:	d007      	beq.n	800678e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	3304      	adds	r3, #4
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d029      	beq.n	80067e2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800679c:	2300      	movs	r3, #0
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a0:	e019      	b.n	80067d6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80067a2:	f3bf 8f5f 	dmb	sy
}
 80067a6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80067b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b6:	3301      	adds	r3, #1
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d902      	bls.n	80067c6 <ETH_Prepare_Tx_Descriptors+0x392>
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	3b04      	subs	r3, #4
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	3301      	adds	r3, #1
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	429a      	cmp	r2, r3
 80067dc:	d3e1      	bcc.n	80067a2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80067de:	2302      	movs	r3, #2
 80067e0:	e0ae      	b.n	8006940 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	3301      	adds	r3, #1
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	4b1f      	ldr	r3, [pc, #124]	; (800687c <ETH_Prepare_Tx_Descriptors+0x448>)
 80067fe:	4013      	ands	r3, r2
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	6852      	ldr	r2, [r2, #4]
 8006804:	431a      	orrs	r2, r3
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d012      	beq.n	8006838 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	4b16      	ldr	r3, [pc, #88]	; (8006880 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8006828:	4013      	ands	r3, r2
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	6852      	ldr	r2, [r2, #4]
 800682e:	0412      	lsls	r2, r2, #16
 8006830:	431a      	orrs	r2, r3
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	609a      	str	r2, [r3, #8]
 8006836:	e008      	b.n	800684a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	2200      	movs	r2, #0
 800683c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8006844:	4013      	ands	r3, r2
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0310 	and.w	r3, r3, #16
 8006852:	2b00      	cmp	r3, #0
 8006854:	d018      	beq.n	8006888 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <ETH_Prepare_Tx_Descriptors+0x450>)
 800685c:	4013      	ands	r3, r2
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	69d2      	ldr	r2, [r2, #28]
 8006862:	431a      	orrs	r2, r3
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	60da      	str	r2, [r3, #12]
 8006874:	e020      	b.n	80068b8 <ETH_Prepare_Tx_Descriptors+0x484>
 8006876:	bf00      	nop
 8006878:	ffff8000 	.word	0xffff8000
 800687c:	ffffc000 	.word	0xffffc000
 8006880:	c000ffff 	.word	0xc000ffff
 8006884:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	4b2f      	ldr	r3, [pc, #188]	; (800694c <ETH_Prepare_Tx_Descriptors+0x518>)
 800688e:	4013      	ands	r3, r2
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	6852      	ldr	r2, [r2, #4]
 8006894:	431a      	orrs	r2, r3
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	3301      	adds	r3, #1
 80068bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80068be:	f3bf 8f5f 	dmb	sy
}
 80068c2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f af2b 	bne.w	800673c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	609a      	str	r2, [r3, #8]
 80068f8:	e005      	b.n	8006906 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006916:	6979      	ldr	r1, [r7, #20]
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	3304      	adds	r3, #4
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006926:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006928:	b672      	cpsid	i
}
 800692a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	4413      	add	r3, r2
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800693a:	b662      	cpsie	i
}
 800693c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3734      	adds	r7, #52	; 0x34
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	ffff8000 	.word	0xffff8000

08006950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006950:	b480      	push	{r7}
 8006952:	b089      	sub	sp, #36	; 0x24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800695e:	4b89      	ldr	r3, [pc, #548]	; (8006b84 <HAL_GPIO_Init+0x234>)
 8006960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006962:	e194      	b.n	8006c8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	2101      	movs	r1, #1
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	4013      	ands	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8186 	beq.w	8006c88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	2b01      	cmp	r3, #1
 8006986:	d005      	beq.n	8006994 <HAL_GPIO_Init+0x44>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 0303 	and.w	r3, r3, #3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d130      	bne.n	80069f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	2203      	movs	r2, #3
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4013      	ands	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069ca:	2201      	movs	r2, #1
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43db      	mvns	r3, r3
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	4013      	ands	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	091b      	lsrs	r3, r3, #4
 80069e0:	f003 0201 	and.w	r2, r3, #1
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d017      	beq.n	8006a32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	4013      	ands	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d123      	bne.n	8006a86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	08da      	lsrs	r2, r3, #3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3208      	adds	r2, #8
 8006a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	220f      	movs	r2, #15
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	08da      	lsrs	r2, r3, #3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3208      	adds	r2, #8
 8006a80:	69b9      	ldr	r1, [r7, #24]
 8006a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	2203      	movs	r2, #3
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f003 0203 	and.w	r2, r3, #3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 80e0 	beq.w	8006c88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ac8:	4b2f      	ldr	r3, [pc, #188]	; (8006b88 <HAL_GPIO_Init+0x238>)
 8006aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ace:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <HAL_GPIO_Init+0x238>)
 8006ad0:	f043 0302 	orr.w	r3, r3, #2
 8006ad4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006ad8:	4b2b      	ldr	r3, [pc, #172]	; (8006b88 <HAL_GPIO_Init+0x238>)
 8006ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ae6:	4a29      	ldr	r2, [pc, #164]	; (8006b8c <HAL_GPIO_Init+0x23c>)
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	089b      	lsrs	r3, r3, #2
 8006aec:	3302      	adds	r3, #2
 8006aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	220f      	movs	r2, #15
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43db      	mvns	r3, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4013      	ands	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a20      	ldr	r2, [pc, #128]	; (8006b90 <HAL_GPIO_Init+0x240>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d052      	beq.n	8006bb8 <HAL_GPIO_Init+0x268>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a1f      	ldr	r2, [pc, #124]	; (8006b94 <HAL_GPIO_Init+0x244>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d031      	beq.n	8006b7e <HAL_GPIO_Init+0x22e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <HAL_GPIO_Init+0x248>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d02b      	beq.n	8006b7a <HAL_GPIO_Init+0x22a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <HAL_GPIO_Init+0x24c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d025      	beq.n	8006b76 <HAL_GPIO_Init+0x226>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <HAL_GPIO_Init+0x250>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01f      	beq.n	8006b72 <HAL_GPIO_Init+0x222>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <HAL_GPIO_Init+0x254>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d019      	beq.n	8006b6e <HAL_GPIO_Init+0x21e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ba8 <HAL_GPIO_Init+0x258>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <HAL_GPIO_Init+0x21a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a19      	ldr	r2, [pc, #100]	; (8006bac <HAL_GPIO_Init+0x25c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00d      	beq.n	8006b66 <HAL_GPIO_Init+0x216>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a18      	ldr	r2, [pc, #96]	; (8006bb0 <HAL_GPIO_Init+0x260>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <HAL_GPIO_Init+0x212>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <HAL_GPIO_Init+0x264>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d101      	bne.n	8006b5e <HAL_GPIO_Init+0x20e>
 8006b5a:	2309      	movs	r3, #9
 8006b5c:	e02d      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b5e:	230a      	movs	r3, #10
 8006b60:	e02b      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b62:	2308      	movs	r3, #8
 8006b64:	e029      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b66:	2307      	movs	r3, #7
 8006b68:	e027      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b6a:	2306      	movs	r3, #6
 8006b6c:	e025      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b6e:	2305      	movs	r3, #5
 8006b70:	e023      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b72:	2304      	movs	r3, #4
 8006b74:	e021      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b76:	2303      	movs	r3, #3
 8006b78:	e01f      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e01d      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e01b      	b.n	8006bba <HAL_GPIO_Init+0x26a>
 8006b82:	bf00      	nop
 8006b84:	58000080 	.word	0x58000080
 8006b88:	58024400 	.word	0x58024400
 8006b8c:	58000400 	.word	0x58000400
 8006b90:	58020000 	.word	0x58020000
 8006b94:	58020400 	.word	0x58020400
 8006b98:	58020800 	.word	0x58020800
 8006b9c:	58020c00 	.word	0x58020c00
 8006ba0:	58021000 	.word	0x58021000
 8006ba4:	58021400 	.word	0x58021400
 8006ba8:	58021800 	.word	0x58021800
 8006bac:	58021c00 	.word	0x58021c00
 8006bb0:	58022000 	.word	0x58022000
 8006bb4:	58022400 	.word	0x58022400
 8006bb8:	2300      	movs	r3, #0
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	f002 0203 	and.w	r2, r2, #3
 8006bc0:	0092      	lsls	r2, r2, #2
 8006bc2:	4093      	lsls	r3, r2
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bca:	4938      	ldr	r1, [pc, #224]	; (8006cac <HAL_GPIO_Init+0x35c>)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	089b      	lsrs	r3, r3, #2
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	43db      	mvns	r3, r3
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	4013      	ands	r3, r2
 8006be8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	43db      	mvns	r3, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4013      	ands	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	4013      	ands	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	43db      	mvns	r3, r3
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f47f ae63 	bne.w	8006964 <HAL_GPIO_Init+0x14>
  }
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	3724      	adds	r7, #36	; 0x24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	58000400 	.word	0x58000400

08006cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	887b      	ldrh	r3, [r7, #2]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
 8006ccc:	e001      	b.n	8006cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	807b      	strh	r3, [r7, #2]
 8006cec:	4613      	mov	r3, r2
 8006cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cf0:	787b      	ldrb	r3, [r7, #1]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cf6:	887a      	ldrh	r2, [r7, #2]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006cfc:	e003      	b.n	8006d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006cfe:	887b      	ldrh	r3, [r7, #2]
 8006d00:	041a      	lsls	r2, r3, #16
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	619a      	str	r2, [r3, #24]
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d24:	887a      	ldrh	r2, [r7, #2]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	041a      	lsls	r2, r3, #16
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	43d9      	mvns	r1, r3
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	400b      	ands	r3, r1
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	619a      	str	r2, [r3, #24]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d64:	88fb      	ldrh	r3, [r7, #6]
 8006d66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f804 	bl	8006d7a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006d72:	bf00      	nop
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	4603      	mov	r3, r0
 8006d82:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e0bd      	b.n	8006f1e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d031      	beq.n	8006e4a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a4f      	ldr	r2, [pc, #316]	; (8006f28 <HAL_HRTIM_Init+0x198>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d10e      	bne.n	8006e0e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006df0:	4b4e      	ldr	r3, [pc, #312]	; (8006f2c <HAL_HRTIM_Init+0x19c>)
 8006df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006df6:	4a4d      	ldr	r2, [pc, #308]	; (8006f2c <HAL_HRTIM_Init+0x19c>)
 8006df8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dfc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006e00:	4b4a      	ldr	r3, [pc, #296]	; (8006f2c <HAL_HRTIM_Init+0x19c>)
 8006e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006e1c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e32:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fb fbb4 	bl	80025b8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d012      	beq.n	8006e82 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]
 8006e96:	e03e      	b.n	8006f16 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8006e98:	7dfa      	ldrb	r2, [r7, #23]
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8006eac:	7dfa      	ldrb	r2, [r7, #23]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	331c      	adds	r3, #28
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8006ec0:	7dfa      	ldrb	r2, [r7, #23]
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	3320      	adds	r3, #32
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8006ed4:	7dfa      	ldrb	r2, [r7, #23]
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	3324      	adds	r3, #36	; 0x24
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8006ee8:	7dfa      	ldrb	r2, [r7, #23]
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3328      	adds	r3, #40	; 0x28
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8006efc:	7dfa      	ldrb	r2, [r7, #23]
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	3330      	adds	r3, #48	; 0x30
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	3301      	adds	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b05      	cmp	r3, #5
 8006f1a:	d9bd      	bls.n	8006e98 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40017400 	.word	0x40017400
 8006f2c:	58024400 	.word	0x58024400

08006f30 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d101      	bne.n	8006f4c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e015      	b.n	8006f78 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b05      	cmp	r3, #5
 8006f58:	d104      	bne.n	8006f64 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 fc4d 	bl	80077fc <HRTIM_MasterBase_Config>
 8006f62:	e004      	b.n	8006f6e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fc76 	bl	800785a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d101      	bne.n	8006f9c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e05f      	b.n	800705c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e058      	b.n	800705c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b05      	cmp	r3, #5
 8006fbe:	d104      	bne.n	8006fca <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fc89 	bl	80078da <HRTIM_MasterWaveform_Config>
 8006fc8:	e004      	b.n	8006fd4 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fcea 	bl	80079a8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6819      	ldr	r1, [r3, #0]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4403      	add	r3, r0
 8006fe6:	3320      	adds	r3, #32
 8006fe8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4403      	add	r3, r0
 8006ffc:	3324      	adds	r3, #36	; 0x24
 8006ffe:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6899      	ldr	r1, [r3, #8]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4613      	mov	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4403      	add	r3, r0
 8007012:	3328      	adds	r3, #40	; 0x28
 8007014:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68d9      	ldr	r1, [r3, #12]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4403      	add	r3, r0
 8007028:	332c      	adds	r3, #44	; 0x2c
 800702a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6919      	ldr	r1, [r3, #16]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	4613      	mov	r3, r2
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4403      	add	r3, r0
 800703e:	3330      	adds	r3, #48	; 0x30
 8007040:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fec7 	bl	8007dd8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d101      	bne.n	8007082 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800707e:	2302      	movs	r3, #2
 8007080:	e157      	b.n	8007332 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800708c:	2302      	movs	r3, #2
 800708e:	e150      	b.n	8007332 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	d140      	bne.n	8007128 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	2b07      	cmp	r3, #7
 80070ac:	d82a      	bhi.n	8007104 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070d5 	.word	0x080070d5
 80070b8:	080070e1 	.word	0x080070e1
 80070bc:	08007105 	.word	0x08007105
 80070c0:	080070ed 	.word	0x080070ed
 80070c4:	08007105 	.word	0x08007105
 80070c8:	08007105 	.word	0x08007105
 80070cc:	08007105 	.word	0x08007105
 80070d0:	080070f9 	.word	0x080070f9
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	61da      	str	r2, [r3, #28]
        break;
 80070de:	e01a      	b.n	8007116 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80070ea:	e014      	b.n	8007116 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80070f6:	e00e      	b.n	8007116 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007102:	e008      	b.n	8007116 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2207      	movs	r2, #7
 8007108:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8007114:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b07      	cmp	r3, #7
 8007120:	f040 80fe 	bne.w	8007320 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e104      	b.n	8007332 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3b01      	subs	r3, #1
 800712c:	2b07      	cmp	r3, #7
 800712e:	f200 80e3 	bhi.w	80072f8 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007159 	.word	0x08007159
 800713c:	0800716d 	.word	0x0800716d
 8007140:	080072f9 	.word	0x080072f9
 8007144:	08007229 	.word	0x08007229
 8007148:	080072f9 	.word	0x080072f9
 800714c:	080072f9 	.word	0x080072f9
 8007150:	080072f9 	.word	0x080072f9
 8007154:	0800723d 	.word	0x0800723d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6819      	ldr	r1, [r3, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	440b      	add	r3, r1
 8007166:	339c      	adds	r3, #156	; 0x9c
 8007168:	601a      	str	r2, [r3, #0]
        break;
 800716a:	e0d1      	b.n	8007310 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6819      	ldr	r1, [r3, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	01db      	lsls	r3, r3, #7
 8007178:	440b      	add	r3, r1
 800717a:	33a4      	adds	r3, #164	; 0xa4
 800717c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d03f      	beq.n	8007206 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3301      	adds	r3, #1
 800718e:	01db      	lsls	r3, r3, #7
 8007190:	4413      	add	r3, r2
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	6811      	ldr	r1, [r2, #0]
 8007198:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3301      	adds	r3, #1
 80071a0:	01db      	lsls	r3, r3, #7
 80071a2:	440b      	add	r3, r1
 80071a4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	3301      	adds	r3, #1
 80071ae:	01db      	lsls	r3, r3, #7
 80071b0:	4413      	add	r3, r2
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	68f9      	ldr	r1, [r7, #12]
 80071ba:	6809      	ldr	r1, [r1, #0]
 80071bc:	431a      	orrs	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	3301      	adds	r3, #1
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	440b      	add	r3, r1
 80071c6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d0:	d109      	bne.n	80071e6 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6819      	ldr	r1, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	01db      	lsls	r3, r3, #7
 80071de:	440b      	add	r3, r1
 80071e0:	339c      	adds	r3, #156	; 0x9c
 80071e2:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80071e4:	e091      	b.n	800730a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071ee:	f040 808c 	bne.w	800730a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6819      	ldr	r1, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	01db      	lsls	r3, r3, #7
 80071fe:	440b      	add	r3, r1
 8007200:	33a8      	adds	r3, #168	; 0xa8
 8007202:	601a      	str	r2, [r3, #0]
         break;
 8007204:	e081      	b.n	800730a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3301      	adds	r3, #1
 800720e:	01db      	lsls	r3, r3, #7
 8007210:	4413      	add	r3, r2
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	6811      	ldr	r1, [r2, #0]
 8007218:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3301      	adds	r3, #1
 8007220:	01db      	lsls	r3, r3, #7
 8007222:	440b      	add	r3, r1
 8007224:	601a      	str	r2, [r3, #0]
         break;
 8007226:	e070      	b.n	800730a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6819      	ldr	r1, [r3, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	01db      	lsls	r3, r3, #7
 8007234:	440b      	add	r3, r1
 8007236:	33a8      	adds	r3, #168	; 0xa8
 8007238:	601a      	str	r2, [r3, #0]
        break;
 800723a:	e069      	b.n	8007310 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	01db      	lsls	r3, r3, #7
 8007248:	440b      	add	r3, r1
 800724a:	33ac      	adds	r3, #172	; 0xac
 800724c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d03f      	beq.n	80072d6 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	3301      	adds	r3, #1
 800725e:	01db      	lsls	r3, r3, #7
 8007260:	4413      	add	r3, r2
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	6811      	ldr	r1, [r2, #0]
 8007268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3301      	adds	r3, #1
 8007270:	01db      	lsls	r3, r3, #7
 8007272:	440b      	add	r3, r1
 8007274:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	3301      	adds	r3, #1
 800727e:	01db      	lsls	r3, r3, #7
 8007280:	4413      	add	r3, r2
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	6809      	ldr	r1, [r1, #0]
 800728e:	431a      	orrs	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	3301      	adds	r3, #1
 8007294:	01db      	lsls	r3, r3, #7
 8007296:	440b      	add	r3, r1
 8007298:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a2:	d109      	bne.n	80072b8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6819      	ldr	r1, [r3, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	01db      	lsls	r3, r3, #7
 80072b0:	440b      	add	r3, r1
 80072b2:	339c      	adds	r3, #156	; 0x9c
 80072b4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80072b6:	e02a      	b.n	800730e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072c0:	d125      	bne.n	800730e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6819      	ldr	r1, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	01db      	lsls	r3, r3, #7
 80072ce:	440b      	add	r3, r1
 80072d0:	33a8      	adds	r3, #168	; 0xa8
 80072d2:	601a      	str	r2, [r3, #0]
         break;
 80072d4:	e01b      	b.n	800730e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	3301      	adds	r3, #1
 80072de:	01db      	lsls	r3, r3, #7
 80072e0:	4413      	add	r3, r2
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	6811      	ldr	r1, [r2, #0]
 80072e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3301      	adds	r3, #1
 80072f0:	01db      	lsls	r3, r3, #7
 80072f2:	440b      	add	r3, r1
 80072f4:	601a      	str	r2, [r3, #0]
         break;
 80072f6:	e00a      	b.n	800730e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2207      	movs	r2, #7
 80072fc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8007308:	e002      	b.n	8007310 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800730e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b07      	cmp	r3, #7
 800731a:	d101      	bne.n	8007320 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e008      	b.n	8007332 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop

08007340 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d101      	bne.n	800735e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800735a:	2302      	movs	r3, #2
 800735c:	e01d      	b.n	800739a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007368:	2302      	movs	r3, #2
 800736a:	e016      	b.n	800739a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fc50 	bl	8007c28 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_HRTIM_WaveformOutputStart+0x18>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e01a      	b.n	80073f0 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2202      	movs	r2, #2
 80073c6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_HRTIM_WaveformOutputStop+0x18>
 8007410:	2302      	movs	r3, #2
 8007412:	e01a      	b.n	800744a <HAL_HRTIM_WaveformOutputStop+0x4e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 800746c:	2302      	movs	r3, #2
 800746e:	e05b      	b.n	8007528 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d009      	beq.n	80074b4 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68d9      	ldr	r1, [r3, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]
 80074b8:	e022      	b.n	8007500 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80074be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	4013      	ands	r3, r2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d017      	beq.n	80074fa <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	01db      	lsls	r3, r3, #7
 80074d2:	4413      	add	r3, r2
 80074d4:	338c      	adds	r3, #140	; 0x8c
 80074d6:	6818      	ldr	r0, [r3, #0]
 80074d8:	7bfa      	ldrb	r2, [r7, #15]
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	3320      	adds	r3, #32
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	4302      	orrs	r2, r0
 80074f2:	01db      	lsls	r3, r3, #7
 80074f4:	440b      	add	r3, r1
 80074f6:	338c      	adds	r3, #140	; 0x8c
 80074f8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	3301      	adds	r3, #1
 80074fe:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b04      	cmp	r3, #4
 8007504:	d9d9      	bls.n	80074ba <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6819      	ldr	r1, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8007526:	2300      	movs	r3, #0
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	20000028 	.word	0x20000028

08007538 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8007542:	f240 137f 	movw	r3, #383	; 0x17f
 8007546:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8007552:	2302      	movs	r3, #2
 8007554:	e065      	b.n	8007622 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	43da      	mvns	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	400a      	ands	r2, r1
 800757a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68d9      	ldr	r1, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007594:	43da      	mvns	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	400a      	ands	r2, r1
 800759c:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
 80075a2:	e023      	b.n	80075ec <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	4a22      	ldr	r2, [pc, #136]	; (8007630 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80075a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d018      	beq.n	80075e6 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	01db      	lsls	r3, r3, #7
 80075bc:	4413      	add	r3, r2
 80075be:	338c      	adds	r3, #140	; 0x8c
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	7bfa      	ldrb	r2, [r7, #15]
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	4613      	mov	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	1a9b      	subs	r3, r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	440b      	add	r3, r1
 80075d0:	3320      	adds	r3, #32
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	43da      	mvns	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6819      	ldr	r1, [r3, #0]
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	4002      	ands	r2, r0
 80075de:	01db      	lsls	r3, r3, #7
 80075e0:	440b      	add	r3, r1
 80075e2:	338c      	adds	r3, #140	; 0x8c
 80075e4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	3301      	adds	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d9d8      	bls.n	80075a4 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	60bb      	str	r3, [r7, #8]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f9      	bne.n	80075f2 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	43da      	mvns	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	400a      	ands	r2, r1
 800760e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	20000028 	.word	0x20000028

08007634 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2bff      	cmp	r3, #255	; 0xff
 8007642:	d103      	bne.n	800764c <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fc29 	bl	8007e9c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800764a:	e00a      	b.n	8007662 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b05      	cmp	r3, #5
 8007650:	d103      	bne.n	800765a <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fca0 	bl	8007f98 <HRTIM_Master_ISR>
}
 8007658:	e003      	b.n	8007662 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fd45 	bl	80080ec <HRTIM_Timer_ISR>
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b083      	sub	sp, #12
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f023 0307 	bic.w	r3, r3, #7
 8007814:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0318 	bic.w	r3, r3, #24
 8007826:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	6852      	ldr	r2, [r2, #4]
 800784c:	619a      	str	r2, [r3, #24]
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800785a:	b480      	push	{r7}
 800785c:	b087      	sub	sp, #28
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	3301      	adds	r3, #1
 800786e:	01db      	lsls	r3, r3, #7
 8007870:	4413      	add	r3, r2
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f023 0307 	bic.w	r3, r3, #7
 800787c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 0318 	bic.w	r3, r3, #24
 800788e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3301      	adds	r3, #1
 80078a2:	01db      	lsls	r3, r3, #7
 80078a4:	4413      	add	r3, r2
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6819      	ldr	r1, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	01db      	lsls	r3, r3, #7
 80078b6:	440b      	add	r3, r1
 80078b8:	3394      	adds	r3, #148	; 0x94
 80078ba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6819      	ldr	r1, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	01db      	lsls	r3, r3, #7
 80078c8:	440b      	add	r3, r1
 80078ca:	3398      	adds	r3, #152	; 0x98
 80078cc:	601a      	str	r2, [r3, #0]
}
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80078f4:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f023 0320 	bic.w	r3, r3, #32
 80078fc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4313      	orrs	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800790e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007920:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007932:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007944:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007956:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800796a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4313      	orrs	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800799a:	bf00      	nop
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
	...

080079a8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b08b      	sub	sp, #44	; 0x2c
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	3301      	adds	r3, #1
 80079bc:	01db      	lsls	r3, r3, #7
 80079be:	4413      	add	r3, r2
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	3301      	adds	r3, #1
 80079ce:	01db      	lsls	r3, r3, #7
 80079d0:	440b      	add	r3, r1
 80079d2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	3301      	adds	r3, #1
 80079dc:	01db      	lsls	r3, r3, #7
 80079de:	4413      	add	r3, r2
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	01db      	lsls	r3, r3, #7
 80079ec:	4413      	add	r3, r2
 80079ee:	33e8      	adds	r3, #232	; 0xe8
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	01db      	lsls	r3, r3, #7
 80079fc:	4413      	add	r3, r2
 80079fe:	33e4      	adds	r3, #228	; 0xe4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8007a0c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	f023 0320 	bic.w	r3, r3, #32
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a40:	4313      	orrs	r3, r2
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a52:	4313      	orrs	r3, r2
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a64:	4313      	orrs	r3, r2
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	4313      	orrs	r3, r2
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a8a:	d103      	bne.n	8007a94 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	f023 031f 	bic.w	r3, r3, #31
 8007ad0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ae6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d108      	bne.n	8007b0c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b00:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	6a3a      	ldr	r2, [r7, #32]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b10:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8007b14:	d004      	beq.n	8007b20 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8007b1e:	d103      	bne.n	8007b28 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d108      	bne.n	8007b3a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8007b2e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b34:	6a3a      	ldr	r2, [r7, #32]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d843      	bhi.n	8007bce <HRTIM_TimingUnitWaveform_Config+0x226>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b61 	.word	0x08007b61
 8007b50:	08007b77 	.word	0x08007b77
 8007b54:	08007b8d 	.word	0x08007b8d
 8007b58:	08007ba3 	.word	0x08007ba3
 8007b5c:	08007bb9 	.word	0x08007bb9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b66:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	61fb      	str	r3, [r7, #28]
      break;
 8007b74:	e02c      	b.n	8007bd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b7c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	61fb      	str	r3, [r7, #28]
      break;
 8007b8a:	e021      	b.n	8007bd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007b92:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	61fb      	str	r3, [r7, #28]
      break;
 8007ba0:	e016      	b.n	8007bd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ba8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	61fb      	str	r3, [r7, #28]
      break;
 8007bb6:	e00b      	b.n	8007bd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bbe:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	015b      	lsls	r3, r3, #5
 8007bc6:	69fa      	ldr	r2, [r7, #28]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	61fb      	str	r3, [r7, #28]
      break;
 8007bcc:	e000      	b.n	8007bd0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8007bce:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	01db      	lsls	r3, r3, #7
 8007bda:	4413      	add	r3, r2
 8007bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bde:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	01db      	lsls	r3, r3, #7
 8007be8:	4413      	add	r3, r2
 8007bea:	33e8      	adds	r3, #232	; 0xe8
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	01db      	lsls	r3, r3, #7
 8007bf8:	4413      	add	r3, r2
 8007bfa:	33e4      	adds	r3, #228	; 0xe4
 8007bfc:	6a3a      	ldr	r2, [r7, #32]
 8007bfe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	01db      	lsls	r3, r3, #7
 8007c08:	4413      	add	r3, r2
 8007c0a:	33d4      	adds	r3, #212	; 0xd4
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8007c1a:	bf00      	nop
 8007c1c:	372c      	adds	r7, #44	; 0x2c
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop

08007c28 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b089      	sub	sp, #36	; 0x24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	01db      	lsls	r3, r3, #7
 8007c42:	4413      	add	r3, r2
 8007c44:	33e4      	adds	r3, #228	; 0xe4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	01db      	lsls	r3, r3, #7
 8007c52:	4413      	add	r3, r2
 8007c54:	33b8      	adds	r3, #184	; 0xb8
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	617b      	str	r3, [r7, #20]

  switch (Output)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c60:	d04d      	beq.n	8007cfe <HRTIM_OutputConfig+0xd6>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c68:	d85e      	bhi.n	8007d28 <HRTIM_OutputConfig+0x100>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c70:	d032      	beq.n	8007cd8 <HRTIM_OutputConfig+0xb0>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c78:	d856      	bhi.n	8007d28 <HRTIM_OutputConfig+0x100>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b80      	cmp	r3, #128	; 0x80
 8007c7e:	d03e      	beq.n	8007cfe <HRTIM_OutputConfig+0xd6>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d850      	bhi.n	8007d28 <HRTIM_OutputConfig+0x100>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b40      	cmp	r3, #64	; 0x40
 8007c8a:	d025      	beq.n	8007cd8 <HRTIM_OutputConfig+0xb0>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b40      	cmp	r3, #64	; 0x40
 8007c90:	d84a      	bhi.n	8007d28 <HRTIM_OutputConfig+0x100>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d01f      	beq.n	8007cd8 <HRTIM_OutputConfig+0xb0>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d044      	beq.n	8007d28 <HRTIM_OutputConfig+0x100>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d841      	bhi.n	8007d28 <HRTIM_OutputConfig+0x100>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d33e      	bcc.n	8007d28 <HRTIM_OutputConfig+0x100>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3b02      	subs	r3, #2
 8007cae:	2201      	movs	r2, #1
 8007cb0:	409a      	lsls	r2, r3
 8007cb2:	4b48      	ldr	r3, [pc, #288]	; (8007dd4 <HRTIM_OutputConfig+0x1ac>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bf14      	ite	ne
 8007cba:	2301      	movne	r3, #1
 8007cbc:	2300      	moveq	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d11c      	bne.n	8007cfe <HRTIM_OutputConfig+0xd6>
 8007cc4:	f244 0304 	movw	r3, #16388	; 0x4004
 8007cc8:	4013      	ands	r3, r2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d027      	beq.n	8007d28 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6819      	ldr	r1, [r3, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	01db      	lsls	r3, r3, #7
 8007ce4:	440b      	add	r3, r1
 8007ce6:	33bc      	adds	r3, #188	; 0xbc
 8007ce8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	01db      	lsls	r3, r3, #7
 8007cf6:	440b      	add	r3, r1
 8007cf8:	33c0      	adds	r3, #192	; 0xc0
 8007cfa:	601a      	str	r2, [r3, #0]
      break;
 8007cfc:	e015      	b.n	8007d2a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6819      	ldr	r1, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	01db      	lsls	r3, r3, #7
 8007d0a:	440b      	add	r3, r1
 8007d0c:	33c4      	adds	r3, #196	; 0xc4
 8007d0e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	01db      	lsls	r3, r3, #7
 8007d1c:	440b      	add	r3, r1
 8007d1e:	33c8      	adds	r3, #200	; 0xc8
 8007d20:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8007d22:	2310      	movs	r3, #16
 8007d24:	61bb      	str	r3, [r7, #24]
      break;
 8007d26:	e000      	b.n	8007d2a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8007d28:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8007d2a:	22fe      	movs	r2, #254	; 0xfe
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8007d32:	43db      	mvns	r3, r3
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	4013      	ands	r3, r2
 8007d38:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	fa02 f303 	lsl.w	r3, r2, r3
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	691a      	ldr	r2, [r3, #16]
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d111      	bne.n	8007db6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10c      	bne.n	8007db6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d107      	bne.n	8007db6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	69da      	ldr	r2, [r3, #28]
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	69fa      	ldr	r2, [r7, #28]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	01db      	lsls	r3, r3, #7
 8007dbe:	4413      	add	r3, r2
 8007dc0:	33e4      	adds	r3, #228	; 0xe4
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3724      	adds	r7, #36	; 0x24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40000041 	.word	0x40000041

08007dd8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b05      	cmp	r3, #5
 8007de6:	d851      	bhi.n	8007e8c <HRTIM_ForceRegistersUpdate+0xb4>
 8007de8:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <HRTIM_ForceRegistersUpdate+0x18>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e1f 	.word	0x08007e1f
 8007df4:	08007e35 	.word	0x08007e35
 8007df8:	08007e4b 	.word	0x08007e4b
 8007dfc:	08007e61 	.word	0x08007e61
 8007e00:	08007e77 	.word	0x08007e77
 8007e04:	08007e09 	.word	0x08007e09
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f042 0201 	orr.w	r2, r2, #1
 8007e18:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007e1c:	e037      	b.n	8007e8e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0202 	orr.w	r2, r2, #2
 8007e2e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007e32:	e02c      	b.n	8007e8e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f042 0204 	orr.w	r2, r2, #4
 8007e44:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007e48:	e021      	b.n	8007e8e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0208 	orr.w	r2, r2, #8
 8007e5a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007e5e:	e016      	b.n	8007e8e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 0210 	orr.w	r2, r2, #16
 8007e70:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007e74:	e00b      	b.n	8007e8e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0220 	orr.w	r2, r2, #32
 8007e86:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007e8a:	e000      	b.n	8007e8e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8007e8c:	bf00      	nop
  }
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop

08007e9c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007eac:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8007eb6:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00c      	beq.n	8007edc <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff fbc7 	bl	800766a <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00c      	beq.n	8007f00 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d007      	beq.n	8007f00 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff fbbf 	bl	800767e <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00c      	beq.n	8007f24 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d007      	beq.n	8007f24 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2204      	movs	r2, #4
 8007f1a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff fbb7 	bl	8007692 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00c      	beq.n	8007f48 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d007      	beq.n	8007f48 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2208      	movs	r2, #8
 8007f3e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fbaf 	bl	80076a6 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 0310 	and.w	r3, r3, #16
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00c      	beq.n	8007f6c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2210      	movs	r2, #16
 8007f62:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff fba7 	bl	80076ba <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00c      	beq.n	8007f90 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7ff fb9f 	bl	80076ce <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007fa8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8007fb2:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00d      	beq.n	8007fea <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d008      	beq.n	8007fea <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007fe0:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff fb7c 	bl	80076e2 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00c      	beq.n	800800e <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2201      	movs	r2, #1
 8008004:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008006:	2105      	movs	r1, #5
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff fb89 	bl	8007720 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2202      	movs	r2, #2
 8008028:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800802a:	2105      	movs	r1, #5
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7fa fe1b 	bl	8002c68 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2204      	movs	r2, #4
 800804c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800804e:	2105      	movs	r1, #5
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7fa fe35 	bl	8002cc0 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2208      	movs	r2, #8
 8008070:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008072:	2105      	movs	r1, #5
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fb5e 	bl	8007736 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00c      	beq.n	800809e <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2210      	movs	r2, #16
 8008094:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008096:	2105      	movs	r1, #5
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fa fe8b 	bl	8002db4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d006      	beq.n	80080c0 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2220      	movs	r2, #32
 80080b8:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff fb1b 	bl	80076f6 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00c      	beq.n	80080e4 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2240      	movs	r2, #64	; 0x40
 80080da:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80080dc:	2105      	movs	r1, #5
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fb13 	bl	800770a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80080e4:	bf00      	nop
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	3301      	adds	r3, #1
 80080fe:	01db      	lsls	r3, r3, #7
 8008100:	4413      	add	r3, r2
 8008102:	3304      	adds	r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	01db      	lsls	r3, r3, #7
 8008110:	4413      	add	r3, r2
 8008112:	338c      	adds	r3, #140	; 0x8c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d010      	beq.n	8008144 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00b      	beq.n	8008144 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	01db      	lsls	r3, r3, #7
 8008134:	4413      	add	r3, r2
 8008136:	3388      	adds	r3, #136	; 0x88
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff faee 	bl	8007720 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d010      	beq.n	8008170 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	01db      	lsls	r3, r3, #7
 8008160:	4413      	add	r3, r2
 8008162:	3388      	adds	r3, #136	; 0x88
 8008164:	2202      	movs	r2, #2
 8008166:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fa fd7c 	bl	8002c68 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	d010      	beq.n	800819c <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	01db      	lsls	r3, r3, #7
 800818c:	4413      	add	r3, r2
 800818e:	3388      	adds	r3, #136	; 0x88
 8008190:	2204      	movs	r2, #4
 8008192:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7fa fd92 	bl	8002cc0 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f003 0308 	and.w	r3, r3, #8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d010      	beq.n	80081c8 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f003 0308 	and.w	r3, r3, #8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	01db      	lsls	r3, r3, #7
 80081b8:	4413      	add	r3, r2
 80081ba:	3388      	adds	r3, #136	; 0x88
 80081bc:	2208      	movs	r2, #8
 80081be:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff fab7 	bl	8007736 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f003 0310 	and.w	r3, r3, #16
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d010      	beq.n	80081f4 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f003 0310 	and.w	r3, r3, #16
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	01db      	lsls	r3, r3, #7
 80081e4:	4413      	add	r3, r2
 80081e6:	3388      	adds	r3, #136	; 0x88
 80081e8:	2210      	movs	r2, #16
 80081ea:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fa fde0 	bl	8002db4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d010      	beq.n	8008220 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	01db      	lsls	r3, r3, #7
 8008210:	4413      	add	r3, r2
 8008212:	3388      	adds	r3, #136	; 0x88
 8008214:	2240      	movs	r2, #64	; 0x40
 8008216:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff fa75 	bl	800770a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008226:	2b00      	cmp	r3, #0
 8008228:	d010      	beq.n	800824c <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	01db      	lsls	r3, r3, #7
 800823c:	4413      	add	r3, r2
 800823e:	3388      	adds	r3, #136	; 0x88
 8008240:	2280      	movs	r2, #128	; 0x80
 8008242:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff fa80 	bl	800774c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008252:	2b00      	cmp	r3, #0
 8008254:	d011      	beq.n	800827a <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00c      	beq.n	800827a <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	01db      	lsls	r3, r3, #7
 8008268:	4413      	add	r3, r2
 800826a:	3388      	adds	r3, #136	; 0x88
 800826c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008270:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff fa74 	bl	8007762 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008280:	2b00      	cmp	r3, #0
 8008282:	d011      	beq.n	80082a8 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00c      	beq.n	80082a8 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	01db      	lsls	r3, r3, #7
 8008296:	4413      	add	r3, r2
 8008298:	3388      	adds	r3, #136	; 0x88
 800829a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800829e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7ff fa7e 	bl	80077a4 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d011      	beq.n	80082d6 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00c      	beq.n	80082d6 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	01db      	lsls	r3, r3, #7
 80082c4:	4413      	add	r3, r2
 80082c6:	3388      	adds	r3, #136	; 0x88
 80082c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082cc:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fa72 	bl	80077ba <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d011      	beq.n	8008304 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00c      	beq.n	8008304 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	01db      	lsls	r3, r3, #7
 80082f2:	4413      	add	r3, r2
 80082f4:	3388      	adds	r3, #136	; 0x88
 80082f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082fa:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff fa66 	bl	80077d0 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d011      	beq.n	8008332 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00c      	beq.n	8008332 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	01db      	lsls	r3, r3, #7
 8008320:	4413      	add	r3, r2
 8008322:	3388      	adds	r3, #136	; 0x88
 8008324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008328:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff fa5a 	bl	80077e6 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d011      	beq.n	8008360 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00c      	beq.n	8008360 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	01db      	lsls	r3, r3, #7
 800834e:	4413      	add	r3, r2
 8008350:	3388      	adds	r3, #136	; 0x88
 8008352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008356:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff fa17 	bl	800778e <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d011      	beq.n	800838e <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00c      	beq.n	800838e <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	01db      	lsls	r3, r3, #7
 800837c:	4413      	add	r3, r2
 800837e:	3388      	adds	r3, #136	; 0x88
 8008380:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008384:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff f9f5 	bl	8007778 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e097      	b.n	80084da <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7fa f99d 	bl	8002704 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d004      	beq.n	80083ec <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ea:	d103      	bne.n	80083f4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 031e 	bic.w	r3, r3, #30
 80083f2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d003      	beq.n	8008408 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4b38      	ldr	r3, [pc, #224]	; (80084e4 <HAL_LPTIM_Init+0x14c>)
 8008404:	4013      	ands	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	4b37      	ldr	r3, [pc, #220]	; (80084e8 <HAL_LPTIM_Init+0x150>)
 800840c:	4013      	ands	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008418:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800841e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8008424:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800842a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4313      	orrs	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d107      	bne.n	800844a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008442:	4313      	orrs	r3, r2
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d004      	beq.n	800845c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800845a:	d107      	bne.n	800846c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008464:	4313      	orrs	r3, r2
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008474:	4293      	cmp	r3, r2
 8008476:	d00a      	beq.n	800848e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008480:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008486:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a14      	ldr	r2, [pc, #80]	; (80084ec <HAL_LPTIM_Init+0x154>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d004      	beq.n	80084aa <HAL_LPTIM_Init+0x112>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a12      	ldr	r2, [pc, #72]	; (80084f0 <HAL_LPTIM_Init+0x158>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d108      	bne.n	80084bc <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	625a      	str	r2, [r3, #36]	; 0x24
 80084ba:	e009      	b.n	80084d0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0c      	ldr	r2, [pc, #48]	; (80084f4 <HAL_LPTIM_Init+0x15c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d104      	bne.n	80084d0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80084ce:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	ffff1f3f 	.word	0xffff1f3f
 80084e8:	ff19f1fe 	.word	0xff19f1fe
 80084ec:	40002400 	.word	0x40002400
 80084f0:	58002400 	.word	0x58002400
 80084f4:	58002800 	.word	0x58002800

080084f8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2202      	movs	r2, #2
 8008506:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d00c      	beq.n	800852c <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800851a:	d107      	bne.n	800852c <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800852a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691a      	ldr	r2, [r3, #16]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0201 	orr.w	r2, r2, #1
 800853a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2210      	movs	r2, #16
 8008542:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800854c:	2110      	movs	r1, #16
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f91e 	bl	8008790 <LPTIM_WaitForFlag>
 8008554:	4603      	mov	r3, r0
 8008556:	2b03      	cmp	r3, #3
 8008558:	d101      	bne.n	800855e <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e02f      	b.n	80085be <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f946 	bl	80087f0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f905 	bl	8008774 <HAL_LPTIM_GetState>
 800856a:	4603      	mov	r3, r0
 800856c:	2b03      	cmp	r3, #3
 800856e:	d101      	bne.n	8008574 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e024      	b.n	80085be <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0210 	orr.w	r2, r2, #16
 8008582:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0202 	orr.w	r2, r2, #2
 8008592:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	691a      	ldr	r2, [r3, #16]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0201 	orr.w	r2, r2, #1
 80085a2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691a      	ldr	r2, [r3, #16]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0204 	orr.w	r2, r2, #4
 80085b2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d10d      	bne.n	80085f8 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d106      	bne.n	80085f8 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2201      	movs	r2, #1
 80085f0:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f882 	bl	80086fc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b02      	cmp	r3, #2
 8008604:	d10d      	bne.n	8008622 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b02      	cmp	r3, #2
 8008612:	d106      	bne.n	8008622 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2202      	movs	r2, #2
 800861a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7fa fb15 	bl	8002c4c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b04      	cmp	r3, #4
 800862e:	d10d      	bne.n	800864c <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b04      	cmp	r3, #4
 800863c:	d106      	bne.n	800864c <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2204      	movs	r2, #4
 8008644:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f862 	bl	8008710 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0308 	and.w	r3, r3, #8
 8008656:	2b08      	cmp	r3, #8
 8008658:	d10d      	bne.n	8008676 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f003 0308 	and.w	r3, r3, #8
 8008664:	2b08      	cmp	r3, #8
 8008666:	d106      	bne.n	8008676 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2208      	movs	r2, #8
 800866e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f857 	bl	8008724 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b10      	cmp	r3, #16
 8008682:	d10d      	bne.n	80086a0 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 0310 	and.w	r3, r3, #16
 800868e:	2b10      	cmp	r3, #16
 8008690:	d106      	bne.n	80086a0 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2210      	movs	r2, #16
 8008698:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f84c 	bl	8008738 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b20      	cmp	r3, #32
 80086ac:	d10d      	bne.n	80086ca <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b20      	cmp	r3, #32
 80086ba:	d106      	bne.n	80086ca <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2220      	movs	r2, #32
 80086c2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f841 	bl	800874c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b40      	cmp	r3, #64	; 0x40
 80086d6:	d10d      	bne.n	80086f4 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e2:	2b40      	cmp	r3, #64	; 0x40
 80086e4:	d106      	bne.n	80086f4 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2240      	movs	r2, #64	; 0x40
 80086ec:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f836 	bl	8008760 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008782:	b2db      	uxtb	r3, r3
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800879e:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <LPTIM_WaitForFlag+0x58>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a12      	ldr	r2, [pc, #72]	; (80087ec <LPTIM_WaitForFlag+0x5c>)
 80087a4:	fba2 2303 	umull	r2, r3, r2, r3
 80087a8:	0b9b      	lsrs	r3, r3, #14
 80087aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087ae:	fb02 f303 	mul.w	r3, r2, r3
 80087b2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	4013      	ands	r3, r2
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d002      	beq.n	80087da <LPTIM_WaitForFlag+0x4a>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1ec      	bne.n	80087b4 <LPTIM_WaitForFlag+0x24>

  return result;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	20000010 	.word	0x20000010
 80087ec:	d1b71759 	.word	0xd1b71759

080087f0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08c      	sub	sp, #48	; 0x30
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008800:	60fb      	str	r3, [r7, #12]
  return(result);
 8008802:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008804:	62bb      	str	r3, [r7, #40]	; 0x28
 8008806:	2301      	movs	r3, #1
 8008808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f383 8810 	msr	PRIMASK, r3
}
 8008810:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a81      	ldr	r2, [pc, #516]	; (8008a1c <LPTIM_Disable+0x22c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d02d      	beq.n	8008878 <LPTIM_Disable+0x88>
 800881c:	4a7f      	ldr	r2, [pc, #508]	; (8008a1c <LPTIM_Disable+0x22c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d830      	bhi.n	8008884 <LPTIM_Disable+0x94>
 8008822:	4a7f      	ldr	r2, [pc, #508]	; (8008a20 <LPTIM_Disable+0x230>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d021      	beq.n	800886c <LPTIM_Disable+0x7c>
 8008828:	4a7d      	ldr	r2, [pc, #500]	; (8008a20 <LPTIM_Disable+0x230>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d82a      	bhi.n	8008884 <LPTIM_Disable+0x94>
 800882e:	4a7d      	ldr	r2, [pc, #500]	; (8008a24 <LPTIM_Disable+0x234>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d015      	beq.n	8008860 <LPTIM_Disable+0x70>
 8008834:	4a7b      	ldr	r2, [pc, #492]	; (8008a24 <LPTIM_Disable+0x234>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d824      	bhi.n	8008884 <LPTIM_Disable+0x94>
 800883a:	4a7b      	ldr	r2, [pc, #492]	; (8008a28 <LPTIM_Disable+0x238>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <LPTIM_Disable+0x58>
 8008840:	4a7a      	ldr	r2, [pc, #488]	; (8008a2c <LPTIM_Disable+0x23c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d006      	beq.n	8008854 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8008846:	e01d      	b.n	8008884 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008848:	4b79      	ldr	r3, [pc, #484]	; (8008a30 <LPTIM_Disable+0x240>)
 800884a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008850:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008852:	e018      	b.n	8008886 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008854:	4b76      	ldr	r3, [pc, #472]	; (8008a30 <LPTIM_Disable+0x240>)
 8008856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008858:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800885c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800885e:	e012      	b.n	8008886 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008860:	4b73      	ldr	r3, [pc, #460]	; (8008a30 <LPTIM_Disable+0x240>)
 8008862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008864:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800886a:	e00c      	b.n	8008886 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800886c:	4b70      	ldr	r3, [pc, #448]	; (8008a30 <LPTIM_Disable+0x240>)
 800886e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008870:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008874:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008876:	e006      	b.n	8008886 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008878:	4b6d      	ldr	r3, [pc, #436]	; (8008a30 <LPTIM_Disable+0x240>)
 800887a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008882:	e000      	b.n	8008886 <LPTIM_Disable+0x96>
      break;
 8008884:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a5a      	ldr	r2, [pc, #360]	; (8008a1c <LPTIM_Disable+0x22c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d059      	beq.n	800896c <LPTIM_Disable+0x17c>
 80088b8:	4a58      	ldr	r2, [pc, #352]	; (8008a1c <LPTIM_Disable+0x22c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d867      	bhi.n	800898e <LPTIM_Disable+0x19e>
 80088be:	4a58      	ldr	r2, [pc, #352]	; (8008a20 <LPTIM_Disable+0x230>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d042      	beq.n	800894a <LPTIM_Disable+0x15a>
 80088c4:	4a56      	ldr	r2, [pc, #344]	; (8008a20 <LPTIM_Disable+0x230>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d861      	bhi.n	800898e <LPTIM_Disable+0x19e>
 80088ca:	4a56      	ldr	r2, [pc, #344]	; (8008a24 <LPTIM_Disable+0x234>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d02b      	beq.n	8008928 <LPTIM_Disable+0x138>
 80088d0:	4a54      	ldr	r2, [pc, #336]	; (8008a24 <LPTIM_Disable+0x234>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d85b      	bhi.n	800898e <LPTIM_Disable+0x19e>
 80088d6:	4a54      	ldr	r2, [pc, #336]	; (8008a28 <LPTIM_Disable+0x238>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <LPTIM_Disable+0xf4>
 80088dc:	4a53      	ldr	r2, [pc, #332]	; (8008a2c <LPTIM_Disable+0x23c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d011      	beq.n	8008906 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80088e2:	e054      	b.n	800898e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80088e4:	4b52      	ldr	r3, [pc, #328]	; (8008a30 <LPTIM_Disable+0x240>)
 80088e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ea:	4a51      	ldr	r2, [pc, #324]	; (8008a30 <LPTIM_Disable+0x240>)
 80088ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80088f4:	4b4e      	ldr	r3, [pc, #312]	; (8008a30 <LPTIM_Disable+0x240>)
 80088f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fa:	4a4d      	ldr	r2, [pc, #308]	; (8008a30 <LPTIM_Disable+0x240>)
 80088fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8008904:	e044      	b.n	8008990 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008906:	4b4a      	ldr	r3, [pc, #296]	; (8008a30 <LPTIM_Disable+0x240>)
 8008908:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800890c:	4a48      	ldr	r2, [pc, #288]	; (8008a30 <LPTIM_Disable+0x240>)
 800890e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008912:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008916:	4b46      	ldr	r3, [pc, #280]	; (8008a30 <LPTIM_Disable+0x240>)
 8008918:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800891c:	4a44      	ldr	r2, [pc, #272]	; (8008a30 <LPTIM_Disable+0x240>)
 800891e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008922:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008926:	e033      	b.n	8008990 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8008928:	4b41      	ldr	r3, [pc, #260]	; (8008a30 <LPTIM_Disable+0x240>)
 800892a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800892e:	4a40      	ldr	r2, [pc, #256]	; (8008a30 <LPTIM_Disable+0x240>)
 8008930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008934:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8008938:	4b3d      	ldr	r3, [pc, #244]	; (8008a30 <LPTIM_Disable+0x240>)
 800893a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800893e:	4a3c      	ldr	r2, [pc, #240]	; (8008a30 <LPTIM_Disable+0x240>)
 8008940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008944:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008948:	e022      	b.n	8008990 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800894a:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <LPTIM_Disable+0x240>)
 800894c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008950:	4a37      	ldr	r2, [pc, #220]	; (8008a30 <LPTIM_Disable+0x240>)
 8008952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008956:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800895a:	4b35      	ldr	r3, [pc, #212]	; (8008a30 <LPTIM_Disable+0x240>)
 800895c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008960:	4a33      	ldr	r2, [pc, #204]	; (8008a30 <LPTIM_Disable+0x240>)
 8008962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008966:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800896a:	e011      	b.n	8008990 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 800896c:	4b30      	ldr	r3, [pc, #192]	; (8008a30 <LPTIM_Disable+0x240>)
 800896e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008972:	4a2f      	ldr	r2, [pc, #188]	; (8008a30 <LPTIM_Disable+0x240>)
 8008974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008978:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 800897c:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <LPTIM_Disable+0x240>)
 800897e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008982:	4a2b      	ldr	r2, [pc, #172]	; (8008a30 <LPTIM_Disable+0x240>)
 8008984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008988:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800898c:	e000      	b.n	8008990 <LPTIM_Disable+0x1a0>
      break;
 800898e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d103      	bne.n	800899e <LPTIM_Disable+0x1ae>
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 80d1 	beq.w	8008b40 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a1e      	ldr	r2, [pc, #120]	; (8008a1c <LPTIM_Disable+0x22c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d031      	beq.n	8008a0c <LPTIM_Disable+0x21c>
 80089a8:	4a1c      	ldr	r2, [pc, #112]	; (8008a1c <LPTIM_Disable+0x22c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d842      	bhi.n	8008a34 <LPTIM_Disable+0x244>
 80089ae:	4a1c      	ldr	r2, [pc, #112]	; (8008a20 <LPTIM_Disable+0x230>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d024      	beq.n	80089fe <LPTIM_Disable+0x20e>
 80089b4:	4a1a      	ldr	r2, [pc, #104]	; (8008a20 <LPTIM_Disable+0x230>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d83c      	bhi.n	8008a34 <LPTIM_Disable+0x244>
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <LPTIM_Disable+0x234>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d017      	beq.n	80089f0 <LPTIM_Disable+0x200>
 80089c0:	4a18      	ldr	r2, [pc, #96]	; (8008a24 <LPTIM_Disable+0x234>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d836      	bhi.n	8008a34 <LPTIM_Disable+0x244>
 80089c6:	4a18      	ldr	r2, [pc, #96]	; (8008a28 <LPTIM_Disable+0x238>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <LPTIM_Disable+0x1e4>
 80089cc:	4a17      	ldr	r2, [pc, #92]	; (8008a2c <LPTIM_Disable+0x23c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d007      	beq.n	80089e2 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80089d2:	e02f      	b.n	8008a34 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80089d4:	4b16      	ldr	r3, [pc, #88]	; (8008a30 <LPTIM_Disable+0x240>)
 80089d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d8:	4a15      	ldr	r2, [pc, #84]	; (8008a30 <LPTIM_Disable+0x240>)
 80089da:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80089de:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 80089e0:	e029      	b.n	8008a36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80089e2:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <LPTIM_Disable+0x240>)
 80089e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e6:	4a12      	ldr	r2, [pc, #72]	; (8008a30 <LPTIM_Disable+0x240>)
 80089e8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80089ec:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80089ee:	e022      	b.n	8008a36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <LPTIM_Disable+0x240>)
 80089f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f4:	4a0e      	ldr	r2, [pc, #56]	; (8008a30 <LPTIM_Disable+0x240>)
 80089f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80089fa:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80089fc:	e01b      	b.n	8008a36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <LPTIM_Disable+0x240>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	4a0b      	ldr	r2, [pc, #44]	; (8008a30 <LPTIM_Disable+0x240>)
 8008a04:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008a08:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008a0a:	e014      	b.n	8008a36 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8008a0c:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <LPTIM_Disable+0x240>)
 8008a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a10:	4a07      	ldr	r2, [pc, #28]	; (8008a30 <LPTIM_Disable+0x240>)
 8008a12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008a16:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008a18:	e00d      	b.n	8008a36 <LPTIM_Disable+0x246>
 8008a1a:	bf00      	nop
 8008a1c:	58003000 	.word	0x58003000
 8008a20:	58002c00 	.word	0x58002c00
 8008a24:	58002800 	.word	0x58002800
 8008a28:	40002400 	.word	0x40002400
 8008a2c:	58002400 	.word	0x58002400
 8008a30:	58024400 	.word	0x58024400
        break;
 8008a34:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01a      	beq.n	8008a72 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0201 	orr.w	r2, r2, #1
 8008a4a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008a54:	2108      	movs	r1, #8
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff fe9a 	bl	8008790 <LPTIM_WaitForFlag>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d103      	bne.n	8008a6a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2203      	movs	r2, #3
 8008a66:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2208      	movs	r2, #8
 8008a70:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01a      	beq.n	8008aae <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008a90:	2110      	movs	r1, #16
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff fe7c 	bl	8008790 <LPTIM_WaitForFlag>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d103      	bne.n	8008aa6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2203      	movs	r2, #3
 8008aa2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2210      	movs	r2, #16
 8008aac:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a32      	ldr	r2, [pc, #200]	; (8008b7c <LPTIM_Disable+0x38c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d039      	beq.n	8008b2c <LPTIM_Disable+0x33c>
 8008ab8:	4a30      	ldr	r2, [pc, #192]	; (8008b7c <LPTIM_Disable+0x38c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d83f      	bhi.n	8008b3e <LPTIM_Disable+0x34e>
 8008abe:	4a30      	ldr	r2, [pc, #192]	; (8008b80 <LPTIM_Disable+0x390>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d02a      	beq.n	8008b1a <LPTIM_Disable+0x32a>
 8008ac4:	4a2e      	ldr	r2, [pc, #184]	; (8008b80 <LPTIM_Disable+0x390>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d839      	bhi.n	8008b3e <LPTIM_Disable+0x34e>
 8008aca:	4a2e      	ldr	r2, [pc, #184]	; (8008b84 <LPTIM_Disable+0x394>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d01b      	beq.n	8008b08 <LPTIM_Disable+0x318>
 8008ad0:	4a2c      	ldr	r2, [pc, #176]	; (8008b84 <LPTIM_Disable+0x394>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d833      	bhi.n	8008b3e <LPTIM_Disable+0x34e>
 8008ad6:	4a2c      	ldr	r2, [pc, #176]	; (8008b88 <LPTIM_Disable+0x398>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d003      	beq.n	8008ae4 <LPTIM_Disable+0x2f4>
 8008adc:	4a2b      	ldr	r2, [pc, #172]	; (8008b8c <LPTIM_Disable+0x39c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d009      	beq.n	8008af6 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8008ae2:	e02c      	b.n	8008b3e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008ae4:	4b2a      	ldr	r3, [pc, #168]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008aec:	4928      	ldr	r1, [pc, #160]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	4313      	orrs	r3, r2
 8008af2:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8008af4:	e024      	b.n	8008b40 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008af6:	4b26      	ldr	r3, [pc, #152]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008afe:	4924      	ldr	r1, [pc, #144]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	4313      	orrs	r3, r2
 8008b04:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008b06:	e01b      	b.n	8008b40 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8008b08:	4b21      	ldr	r3, [pc, #132]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b10:	491f      	ldr	r1, [pc, #124]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	4313      	orrs	r3, r2
 8008b16:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008b18:	e012      	b.n	8008b40 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8008b1a:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b22:	491b      	ldr	r1, [pc, #108]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	4313      	orrs	r3, r2
 8008b28:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008b2a:	e009      	b.n	8008b40 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8008b2c:	4b18      	ldr	r3, [pc, #96]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b34:	4916      	ldr	r1, [pc, #88]	; (8008b90 <LPTIM_Disable+0x3a0>)
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008b3c:	e000      	b.n	8008b40 <LPTIM_Disable+0x350>
        break;
 8008b3e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0201 	bic.w	r2, r2, #1
 8008b4e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b56:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6a3a      	ldr	r2, [r7, #32]
 8008b5e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	625a      	str	r2, [r3, #36]	; 0x24
 8008b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f383 8810 	msr	PRIMASK, r3
}
 8008b72:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008b74:	bf00      	nop
 8008b76:	3730      	adds	r7, #48	; 0x30
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	58003000 	.word	0x58003000
 8008b80:	58002c00 	.word	0x58002c00
 8008b84:	58002800 	.word	0x58002800
 8008b88:	40002400 	.word	0x40002400
 8008b8c:	58002400 	.word	0x58002400
 8008b90:	58024400 	.word	0x58024400

08008b94 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008b98:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a04      	ldr	r2, [pc, #16]	; (8008bb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba2:	6013      	str	r3, [r2, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	58024800 	.word	0x58024800

08008bb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008bbc:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <HAL_PWREx_ConfigSupply+0x70>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d00a      	beq.n	8008bde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008bc8:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <HAL_PWREx_ConfigSupply+0x70>)
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d001      	beq.n	8008bda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e01f      	b.n	8008c1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e01d      	b.n	8008c1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008bde:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <HAL_PWREx_ConfigSupply+0x70>)
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f023 0207 	bic.w	r2, r3, #7
 8008be6:	490f      	ldr	r1, [pc, #60]	; (8008c24 <HAL_PWREx_ConfigSupply+0x70>)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008bee:	f7fa fafd 	bl	80031ec <HAL_GetTick>
 8008bf2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bf4:	e009      	b.n	8008c0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008bf6:	f7fa faf9 	bl	80031ec <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c04:	d901      	bls.n	8008c0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e007      	b.n	8008c1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c0a:	4b06      	ldr	r3, [pc, #24]	; (8008c24 <HAL_PWREx_ConfigSupply+0x70>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c16:	d1ee      	bne.n	8008bf6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	58024800 	.word	0x58024800

08008c28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08c      	sub	sp, #48	; 0x30
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	f000 bc48 	b.w	80094cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 8088 	beq.w	8008d5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c4a:	4b99      	ldr	r3, [pc, #612]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c54:	4b96      	ldr	r3, [pc, #600]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	d007      	beq.n	8008c70 <HAL_RCC_OscConfig+0x48>
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	2b18      	cmp	r3, #24
 8008c64:	d111      	bne.n	8008c8a <HAL_RCC_OscConfig+0x62>
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	f003 0303 	and.w	r3, r3, #3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d10c      	bne.n	8008c8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c70:	4b8f      	ldr	r3, [pc, #572]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d06d      	beq.n	8008d58 <HAL_RCC_OscConfig+0x130>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d169      	bne.n	8008d58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	f000 bc21 	b.w	80094cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c92:	d106      	bne.n	8008ca2 <HAL_RCC_OscConfig+0x7a>
 8008c94:	4b86      	ldr	r3, [pc, #536]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a85      	ldr	r2, [pc, #532]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	e02e      	b.n	8008d00 <HAL_RCC_OscConfig+0xd8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10c      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x9c>
 8008caa:	4b81      	ldr	r3, [pc, #516]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a80      	ldr	r2, [pc, #512]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	4b7e      	ldr	r3, [pc, #504]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a7d      	ldr	r2, [pc, #500]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	e01d      	b.n	8008d00 <HAL_RCC_OscConfig+0xd8>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ccc:	d10c      	bne.n	8008ce8 <HAL_RCC_OscConfig+0xc0>
 8008cce:	4b78      	ldr	r3, [pc, #480]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a77      	ldr	r2, [pc, #476]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	4b75      	ldr	r3, [pc, #468]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a74      	ldr	r2, [pc, #464]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	e00b      	b.n	8008d00 <HAL_RCC_OscConfig+0xd8>
 8008ce8:	4b71      	ldr	r3, [pc, #452]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a70      	ldr	r2, [pc, #448]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	4b6e      	ldr	r3, [pc, #440]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a6d      	ldr	r2, [pc, #436]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d013      	beq.n	8008d30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7fa fa70 	bl	80031ec <HAL_GetTick>
 8008d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d10:	f7fa fa6c 	bl	80031ec <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b64      	cmp	r3, #100	; 0x64
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e3d4      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d22:	4b63      	ldr	r3, [pc, #396]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f0      	beq.n	8008d10 <HAL_RCC_OscConfig+0xe8>
 8008d2e:	e014      	b.n	8008d5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d30:	f7fa fa5c 	bl	80031ec <HAL_GetTick>
 8008d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d38:	f7fa fa58 	bl	80031ec <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b64      	cmp	r3, #100	; 0x64
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e3c0      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d4a:	4b59      	ldr	r3, [pc, #356]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f0      	bne.n	8008d38 <HAL_RCC_OscConfig+0x110>
 8008d56:	e000      	b.n	8008d5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80ca 	beq.w	8008efc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d68:	4b51      	ldr	r3, [pc, #324]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d72:	4b4f      	ldr	r3, [pc, #316]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <HAL_RCC_OscConfig+0x166>
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	2b18      	cmp	r3, #24
 8008d82:	d156      	bne.n	8008e32 <HAL_RCC_OscConfig+0x20a>
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d151      	bne.n	8008e32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d8e:	4b48      	ldr	r3, [pc, #288]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <HAL_RCC_OscConfig+0x17e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e392      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008da6:	4b42      	ldr	r3, [pc, #264]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f023 0219 	bic.w	r2, r3, #25
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	493f      	ldr	r1, [pc, #252]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db8:	f7fa fa18 	bl	80031ec <HAL_GetTick>
 8008dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dc0:	f7fa fa14 	bl	80031ec <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e37c      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dd2:	4b37      	ldr	r3, [pc, #220]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0f0      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dde:	f7fa fa35 	bl	800324c <HAL_GetREVID>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f241 0203 	movw	r2, #4099	; 0x1003
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d817      	bhi.n	8008e1c <HAL_RCC_OscConfig+0x1f4>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b40      	cmp	r3, #64	; 0x40
 8008df2:	d108      	bne.n	8008e06 <HAL_RCC_OscConfig+0x1de>
 8008df4:	4b2e      	ldr	r3, [pc, #184]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008dfc:	4a2c      	ldr	r2, [pc, #176]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e04:	e07a      	b.n	8008efc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e06:	4b2a      	ldr	r3, [pc, #168]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	031b      	lsls	r3, r3, #12
 8008e14:	4926      	ldr	r1, [pc, #152]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e1a:	e06f      	b.n	8008efc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e1c:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	061b      	lsls	r3, r3, #24
 8008e2a:	4921      	ldr	r1, [pc, #132]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e30:	e064      	b.n	8008efc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d047      	beq.n	8008eca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e3a:	4b1d      	ldr	r3, [pc, #116]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f023 0219 	bic.w	r2, r3, #25
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	491a      	ldr	r1, [pc, #104]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4c:	f7fa f9ce 	bl	80031ec <HAL_GetTick>
 8008e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e52:	e008      	b.n	8008e66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e54:	f7fa f9ca 	bl	80031ec <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e332      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f0      	beq.n	8008e54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e72:	f7fa f9eb 	bl	800324c <HAL_GetREVID>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d819      	bhi.n	8008eb4 <HAL_RCC_OscConfig+0x28c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	2b40      	cmp	r3, #64	; 0x40
 8008e86:	d108      	bne.n	8008e9a <HAL_RCC_OscConfig+0x272>
 8008e88:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008e90:	4a07      	ldr	r2, [pc, #28]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e96:	6053      	str	r3, [r2, #4]
 8008e98:	e030      	b.n	8008efc <HAL_RCC_OscConfig+0x2d4>
 8008e9a:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	031b      	lsls	r3, r3, #12
 8008ea8:	4901      	ldr	r1, [pc, #4]	; (8008eb0 <HAL_RCC_OscConfig+0x288>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	604b      	str	r3, [r1, #4]
 8008eae:	e025      	b.n	8008efc <HAL_RCC_OscConfig+0x2d4>
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	4b9a      	ldr	r3, [pc, #616]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	061b      	lsls	r3, r3, #24
 8008ec2:	4997      	ldr	r1, [pc, #604]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	604b      	str	r3, [r1, #4]
 8008ec8:	e018      	b.n	8008efc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008eca:	4b95      	ldr	r3, [pc, #596]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a94      	ldr	r2, [pc, #592]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008ed0:	f023 0301 	bic.w	r3, r3, #1
 8008ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed6:	f7fa f989 	bl	80031ec <HAL_GetTick>
 8008eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008edc:	e008      	b.n	8008ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ede:	f7fa f985 	bl	80031ec <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e2ed      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ef0:	4b8b      	ldr	r3, [pc, #556]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f0      	bne.n	8008ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 80a9 	beq.w	800905c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f0a:	4b85      	ldr	r3, [pc, #532]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f14:	4b82      	ldr	r3, [pc, #520]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d007      	beq.n	8008f30 <HAL_RCC_OscConfig+0x308>
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	2b18      	cmp	r3, #24
 8008f24:	d13a      	bne.n	8008f9c <HAL_RCC_OscConfig+0x374>
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d135      	bne.n	8008f9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f30:	4b7b      	ldr	r3, [pc, #492]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <HAL_RCC_OscConfig+0x320>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	2b80      	cmp	r3, #128	; 0x80
 8008f42:	d001      	beq.n	8008f48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e2c1      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f48:	f7fa f980 	bl	800324c <HAL_GetREVID>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d817      	bhi.n	8008f86 <HAL_RCC_OscConfig+0x35e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	d108      	bne.n	8008f70 <HAL_RCC_OscConfig+0x348>
 8008f5e:	4b70      	ldr	r3, [pc, #448]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f66:	4a6e      	ldr	r2, [pc, #440]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f6c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f6e:	e075      	b.n	800905c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f70:	4b6b      	ldr	r3, [pc, #428]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	069b      	lsls	r3, r3, #26
 8008f7e:	4968      	ldr	r1, [pc, #416]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f84:	e06a      	b.n	800905c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f86:	4b66      	ldr	r3, [pc, #408]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	061b      	lsls	r3, r3, #24
 8008f94:	4962      	ldr	r1, [pc, #392]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f9a:	e05f      	b.n	800905c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d042      	beq.n	800902a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008fa4:	4b5e      	ldr	r3, [pc, #376]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a5d      	ldr	r2, [pc, #372]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb0:	f7fa f91c 	bl	80031ec <HAL_GetTick>
 8008fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008fb8:	f7fa f918 	bl	80031ec <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e280      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fca:	4b55      	ldr	r3, [pc, #340]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0f0      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fd6:	f7fa f939 	bl	800324c <HAL_GetREVID>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d817      	bhi.n	8009014 <HAL_RCC_OscConfig+0x3ec>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d108      	bne.n	8008ffe <HAL_RCC_OscConfig+0x3d6>
 8008fec:	4b4c      	ldr	r3, [pc, #304]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ff4:	4a4a      	ldr	r2, [pc, #296]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8008ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ffa:	6053      	str	r3, [r2, #4]
 8008ffc:	e02e      	b.n	800905c <HAL_RCC_OscConfig+0x434>
 8008ffe:	4b48      	ldr	r3, [pc, #288]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	069b      	lsls	r3, r3, #26
 800900c:	4944      	ldr	r1, [pc, #272]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 800900e:	4313      	orrs	r3, r2
 8009010:	604b      	str	r3, [r1, #4]
 8009012:	e023      	b.n	800905c <HAL_RCC_OscConfig+0x434>
 8009014:	4b42      	ldr	r3, [pc, #264]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	061b      	lsls	r3, r3, #24
 8009022:	493f      	ldr	r1, [pc, #252]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009024:	4313      	orrs	r3, r2
 8009026:	60cb      	str	r3, [r1, #12]
 8009028:	e018      	b.n	800905c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800902a:	4b3d      	ldr	r3, [pc, #244]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a3c      	ldr	r2, [pc, #240]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009036:	f7fa f8d9 	bl	80031ec <HAL_GetTick>
 800903a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800903c:	e008      	b.n	8009050 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800903e:	f7fa f8d5 	bl	80031ec <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	2b02      	cmp	r3, #2
 800904a:	d901      	bls.n	8009050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e23d      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009050:	4b33      	ldr	r3, [pc, #204]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1f0      	bne.n	800903e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b00      	cmp	r3, #0
 8009066:	d036      	beq.n	80090d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d019      	beq.n	80090a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009070:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009074:	4a2a      	ldr	r2, [pc, #168]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800907c:	f7fa f8b6 	bl	80031ec <HAL_GetTick>
 8009080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009082:	e008      	b.n	8009096 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009084:	f7fa f8b2 	bl	80031ec <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b02      	cmp	r3, #2
 8009090:	d901      	bls.n	8009096 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e21a      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009096:	4b22      	ldr	r3, [pc, #136]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0f0      	beq.n	8009084 <HAL_RCC_OscConfig+0x45c>
 80090a2:	e018      	b.n	80090d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090a4:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 80090a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090a8:	4a1d      	ldr	r2, [pc, #116]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 80090aa:	f023 0301 	bic.w	r3, r3, #1
 80090ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b0:	f7fa f89c 	bl	80031ec <HAL_GetTick>
 80090b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090b6:	e008      	b.n	80090ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090b8:	f7fa f898 	bl	80031ec <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d901      	bls.n	80090ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e200      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090ca:	4b15      	ldr	r3, [pc, #84]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 80090cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1f0      	bne.n	80090b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0320 	and.w	r3, r3, #32
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d039      	beq.n	8009156 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d01c      	beq.n	8009124 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80090ea:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a0c      	ldr	r2, [pc, #48]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 80090f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090f6:	f7fa f879 	bl	80031ec <HAL_GetTick>
 80090fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80090fc:	e008      	b.n	8009110 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090fe:	f7fa f875 	bl	80031ec <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d901      	bls.n	8009110 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e1dd      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009110:	4b03      	ldr	r3, [pc, #12]	; (8009120 <HAL_RCC_OscConfig+0x4f8>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d0f0      	beq.n	80090fe <HAL_RCC_OscConfig+0x4d6>
 800911c:	e01b      	b.n	8009156 <HAL_RCC_OscConfig+0x52e>
 800911e:	bf00      	nop
 8009120:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009124:	4b9b      	ldr	r3, [pc, #620]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a9a      	ldr	r2, [pc, #616]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800912a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800912e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009130:	f7fa f85c 	bl	80031ec <HAL_GetTick>
 8009134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009138:	f7fa f858 	bl	80031ec <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e1c0      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800914a:	4b92      	ldr	r3, [pc, #584]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f0      	bne.n	8009138 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 8081 	beq.w	8009266 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009164:	4b8c      	ldr	r3, [pc, #560]	; (8009398 <HAL_RCC_OscConfig+0x770>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a8b      	ldr	r2, [pc, #556]	; (8009398 <HAL_RCC_OscConfig+0x770>)
 800916a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800916e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009170:	f7fa f83c 	bl	80031ec <HAL_GetTick>
 8009174:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009176:	e008      	b.n	800918a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009178:	f7fa f838 	bl	80031ec <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	2b64      	cmp	r3, #100	; 0x64
 8009184:	d901      	bls.n	800918a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e1a0      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800918a:	4b83      	ldr	r3, [pc, #524]	; (8009398 <HAL_RCC_OscConfig+0x770>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0f0      	beq.n	8009178 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d106      	bne.n	80091ac <HAL_RCC_OscConfig+0x584>
 800919e:	4b7d      	ldr	r3, [pc, #500]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a2:	4a7c      	ldr	r2, [pc, #496]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091a4:	f043 0301 	orr.w	r3, r3, #1
 80091a8:	6713      	str	r3, [r2, #112]	; 0x70
 80091aa:	e02d      	b.n	8009208 <HAL_RCC_OscConfig+0x5e0>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10c      	bne.n	80091ce <HAL_RCC_OscConfig+0x5a6>
 80091b4:	4b77      	ldr	r3, [pc, #476]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b8:	4a76      	ldr	r2, [pc, #472]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091ba:	f023 0301 	bic.w	r3, r3, #1
 80091be:	6713      	str	r3, [r2, #112]	; 0x70
 80091c0:	4b74      	ldr	r3, [pc, #464]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c4:	4a73      	ldr	r2, [pc, #460]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091c6:	f023 0304 	bic.w	r3, r3, #4
 80091ca:	6713      	str	r3, [r2, #112]	; 0x70
 80091cc:	e01c      	b.n	8009208 <HAL_RCC_OscConfig+0x5e0>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	2b05      	cmp	r3, #5
 80091d4:	d10c      	bne.n	80091f0 <HAL_RCC_OscConfig+0x5c8>
 80091d6:	4b6f      	ldr	r3, [pc, #444]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091da:	4a6e      	ldr	r2, [pc, #440]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091dc:	f043 0304 	orr.w	r3, r3, #4
 80091e0:	6713      	str	r3, [r2, #112]	; 0x70
 80091e2:	4b6c      	ldr	r3, [pc, #432]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e6:	4a6b      	ldr	r2, [pc, #428]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	6713      	str	r3, [r2, #112]	; 0x70
 80091ee:	e00b      	b.n	8009208 <HAL_RCC_OscConfig+0x5e0>
 80091f0:	4b68      	ldr	r3, [pc, #416]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f4:	4a67      	ldr	r2, [pc, #412]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091f6:	f023 0301 	bic.w	r3, r3, #1
 80091fa:	6713      	str	r3, [r2, #112]	; 0x70
 80091fc:	4b65      	ldr	r3, [pc, #404]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80091fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009200:	4a64      	ldr	r2, [pc, #400]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009202:	f023 0304 	bic.w	r3, r3, #4
 8009206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d015      	beq.n	800923c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009210:	f7f9 ffec 	bl	80031ec <HAL_GetTick>
 8009214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009216:	e00a      	b.n	800922e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009218:	f7f9 ffe8 	bl	80031ec <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	f241 3288 	movw	r2, #5000	; 0x1388
 8009226:	4293      	cmp	r3, r2
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e14e      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800922e:	4b59      	ldr	r3, [pc, #356]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0ee      	beq.n	8009218 <HAL_RCC_OscConfig+0x5f0>
 800923a:	e014      	b.n	8009266 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923c:	f7f9 ffd6 	bl	80031ec <HAL_GetTick>
 8009240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009242:	e00a      	b.n	800925a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009244:	f7f9 ffd2 	bl	80031ec <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009252:	4293      	cmp	r3, r2
 8009254:	d901      	bls.n	800925a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e138      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800925a:	4b4e      	ldr	r3, [pc, #312]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1ee      	bne.n	8009244 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 812d 	beq.w	80094ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009270:	4b48      	ldr	r3, [pc, #288]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009278:	2b18      	cmp	r3, #24
 800927a:	f000 80bd 	beq.w	80093f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009282:	2b02      	cmp	r3, #2
 8009284:	f040 809e 	bne.w	80093c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009288:	4b42      	ldr	r3, [pc, #264]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a41      	ldr	r2, [pc, #260]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800928e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009294:	f7f9 ffaa 	bl	80031ec <HAL_GetTick>
 8009298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800929a:	e008      	b.n	80092ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800929c:	f7f9 ffa6 	bl	80031ec <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d901      	bls.n	80092ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e10e      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092ae:	4b39      	ldr	r3, [pc, #228]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1f0      	bne.n	800929c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092ba:	4b36      	ldr	r3, [pc, #216]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80092bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092be:	4b37      	ldr	r3, [pc, #220]	; (800939c <HAL_RCC_OscConfig+0x774>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092ca:	0112      	lsls	r2, r2, #4
 80092cc:	430a      	orrs	r2, r1
 80092ce:	4931      	ldr	r1, [pc, #196]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	628b      	str	r3, [r1, #40]	; 0x28
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d8:	3b01      	subs	r3, #1
 80092da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e2:	3b01      	subs	r3, #1
 80092e4:	025b      	lsls	r3, r3, #9
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	3b01      	subs	r3, #1
 80092f0:	041b      	lsls	r3, r3, #16
 80092f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fc:	3b01      	subs	r3, #1
 80092fe:	061b      	lsls	r3, r3, #24
 8009300:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009304:	4923      	ldr	r1, [pc, #140]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009306:	4313      	orrs	r3, r2
 8009308:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800930a:	4b22      	ldr	r3, [pc, #136]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	4a21      	ldr	r2, [pc, #132]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009310:	f023 0301 	bic.w	r3, r3, #1
 8009314:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800931a:	4b21      	ldr	r3, [pc, #132]	; (80093a0 <HAL_RCC_OscConfig+0x778>)
 800931c:	4013      	ands	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009322:	00d2      	lsls	r2, r2, #3
 8009324:	491b      	ldr	r1, [pc, #108]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009326:	4313      	orrs	r3, r2
 8009328:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800932a:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	f023 020c 	bic.w	r2, r3, #12
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	4917      	ldr	r1, [pc, #92]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009338:	4313      	orrs	r3, r2
 800933a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800933c:	4b15      	ldr	r3, [pc, #84]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	f023 0202 	bic.w	r2, r3, #2
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009348:	4912      	ldr	r1, [pc, #72]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800934a:	4313      	orrs	r3, r2
 800934c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800934e:	4b11      	ldr	r3, [pc, #68]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800935a:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	4a0d      	ldr	r2, [pc, #52]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009366:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936a:	4a0a      	ldr	r2, [pc, #40]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 800936c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009370:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009372:	4b08      	ldr	r3, [pc, #32]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	4a07      	ldr	r2, [pc, #28]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009378:	f043 0301 	orr.w	r3, r3, #1
 800937c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a04      	ldr	r2, [pc, #16]	; (8009394 <HAL_RCC_OscConfig+0x76c>)
 8009384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800938a:	f7f9 ff2f 	bl	80031ec <HAL_GetTick>
 800938e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009390:	e011      	b.n	80093b6 <HAL_RCC_OscConfig+0x78e>
 8009392:	bf00      	nop
 8009394:	58024400 	.word	0x58024400
 8009398:	58024800 	.word	0x58024800
 800939c:	fffffc0c 	.word	0xfffffc0c
 80093a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093a4:	f7f9 ff22 	bl	80031ec <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d901      	bls.n	80093b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e08a      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093b6:	4b47      	ldr	r3, [pc, #284]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0f0      	beq.n	80093a4 <HAL_RCC_OscConfig+0x77c>
 80093c2:	e082      	b.n	80094ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093c4:	4b43      	ldr	r3, [pc, #268]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a42      	ldr	r2, [pc, #264]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80093ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d0:	f7f9 ff0c 	bl	80031ec <HAL_GetTick>
 80093d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093d6:	e008      	b.n	80093ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093d8:	f7f9 ff08 	bl	80031ec <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d901      	bls.n	80093ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e070      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093ea:	4b3a      	ldr	r3, [pc, #232]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1f0      	bne.n	80093d8 <HAL_RCC_OscConfig+0x7b0>
 80093f6:	e068      	b.n	80094ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80093f8:	4b36      	ldr	r3, [pc, #216]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80093fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80093fe:	4b35      	ldr	r3, [pc, #212]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 8009400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009402:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	2b01      	cmp	r3, #1
 800940a:	d031      	beq.n	8009470 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f003 0203 	and.w	r2, r3, #3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009416:	429a      	cmp	r2, r3
 8009418:	d12a      	bne.n	8009470 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	091b      	lsrs	r3, r3, #4
 800941e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009426:	429a      	cmp	r2, r3
 8009428:	d122      	bne.n	8009470 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009434:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009436:	429a      	cmp	r2, r3
 8009438:	d11a      	bne.n	8009470 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	0a5b      	lsrs	r3, r3, #9
 800943e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009446:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009448:	429a      	cmp	r2, r3
 800944a:	d111      	bne.n	8009470 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0c1b      	lsrs	r3, r3, #16
 8009450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800945a:	429a      	cmp	r2, r3
 800945c:	d108      	bne.n	8009470 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	0e1b      	lsrs	r3, r3, #24
 8009462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800946c:	429a      	cmp	r2, r3
 800946e:	d001      	beq.n	8009474 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e02b      	b.n	80094cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009474:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	08db      	lsrs	r3, r3, #3
 800947a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800947e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	429a      	cmp	r2, r3
 8009488:	d01f      	beq.n	80094ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	4a11      	ldr	r2, [pc, #68]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 8009490:	f023 0301 	bic.w	r3, r3, #1
 8009494:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009496:	f7f9 fea9 	bl	80031ec <HAL_GetTick>
 800949a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800949c:	bf00      	nop
 800949e:	f7f9 fea5 	bl	80031ec <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d0f9      	beq.n	800949e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094aa:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80094ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ae:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <HAL_RCC_OscConfig+0x8b0>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094b6:	00d2      	lsls	r2, r2, #3
 80094b8:	4906      	ldr	r1, [pc, #24]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	4a04      	ldr	r2, [pc, #16]	; (80094d4 <HAL_RCC_OscConfig+0x8ac>)
 80094c4:	f043 0301 	orr.w	r3, r3, #1
 80094c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3730      	adds	r7, #48	; 0x30
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	58024400 	.word	0x58024400
 80094d8:	ffff0007 	.word	0xffff0007

080094dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e19c      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094f0:	4b8a      	ldr	r3, [pc, #552]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 030f 	and.w	r3, r3, #15
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d910      	bls.n	8009520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094fe:	4b87      	ldr	r3, [pc, #540]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f023 020f 	bic.w	r2, r3, #15
 8009506:	4985      	ldr	r1, [pc, #532]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	4313      	orrs	r3, r2
 800950c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800950e:	4b83      	ldr	r3, [pc, #524]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 030f 	and.w	r3, r3, #15
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	429a      	cmp	r2, r3
 800951a:	d001      	beq.n	8009520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e184      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d010      	beq.n	800954e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	4b7b      	ldr	r3, [pc, #492]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009538:	429a      	cmp	r2, r3
 800953a:	d908      	bls.n	800954e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800953c:	4b78      	ldr	r3, [pc, #480]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	4975      	ldr	r1, [pc, #468]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800954a:	4313      	orrs	r3, r2
 800954c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0308 	and.w	r3, r3, #8
 8009556:	2b00      	cmp	r3, #0
 8009558:	d010      	beq.n	800957c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	695a      	ldr	r2, [r3, #20]
 800955e:	4b70      	ldr	r3, [pc, #448]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009566:	429a      	cmp	r2, r3
 8009568:	d908      	bls.n	800957c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800956a:	4b6d      	ldr	r3, [pc, #436]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	496a      	ldr	r1, [pc, #424]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009578:	4313      	orrs	r3, r2
 800957a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b00      	cmp	r3, #0
 8009586:	d010      	beq.n	80095aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	4b64      	ldr	r3, [pc, #400]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009594:	429a      	cmp	r2, r3
 8009596:	d908      	bls.n	80095aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009598:	4b61      	ldr	r3, [pc, #388]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	495e      	ldr	r1, [pc, #376]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0320 	and.w	r3, r3, #32
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d010      	beq.n	80095d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69da      	ldr	r2, [r3, #28]
 80095ba:	4b59      	ldr	r3, [pc, #356]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d908      	bls.n	80095d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80095c6:	4b56      	ldr	r3, [pc, #344]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	4953      	ldr	r1, [pc, #332]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68da      	ldr	r2, [r3, #12]
 80095e8:	4b4d      	ldr	r3, [pc, #308]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f003 030f 	and.w	r3, r3, #15
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d908      	bls.n	8009606 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095f4:	4b4a      	ldr	r3, [pc, #296]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f023 020f 	bic.w	r2, r3, #15
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	4947      	ldr	r1, [pc, #284]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009602:	4313      	orrs	r3, r2
 8009604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d055      	beq.n	80096be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009612:	4b43      	ldr	r3, [pc, #268]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	4940      	ldr	r1, [pc, #256]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009620:	4313      	orrs	r3, r2
 8009622:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	2b02      	cmp	r3, #2
 800962a:	d107      	bne.n	800963c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800962c:	4b3c      	ldr	r3, [pc, #240]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d121      	bne.n	800967c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e0f6      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2b03      	cmp	r3, #3
 8009642:	d107      	bne.n	8009654 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009644:	4b36      	ldr	r3, [pc, #216]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d115      	bne.n	800967c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e0ea      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d107      	bne.n	800966c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800965c:	4b30      	ldr	r3, [pc, #192]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009664:	2b00      	cmp	r3, #0
 8009666:	d109      	bne.n	800967c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e0de      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800966c:	4b2c      	ldr	r3, [pc, #176]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e0d6      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800967c:	4b28      	ldr	r3, [pc, #160]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	f023 0207 	bic.w	r2, r3, #7
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	4925      	ldr	r1, [pc, #148]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800968a:	4313      	orrs	r3, r2
 800968c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800968e:	f7f9 fdad 	bl	80031ec <HAL_GetTick>
 8009692:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009694:	e00a      	b.n	80096ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009696:	f7f9 fda9 	bl	80031ec <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d901      	bls.n	80096ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e0be      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ac:	4b1c      	ldr	r3, [pc, #112]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d1eb      	bne.n	8009696 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d010      	beq.n	80096ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	4b14      	ldr	r3, [pc, #80]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d208      	bcs.n	80096ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096da:	4b11      	ldr	r3, [pc, #68]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f023 020f 	bic.w	r2, r3, #15
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	490e      	ldr	r1, [pc, #56]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d214      	bcs.n	8009724 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096fa:	4b08      	ldr	r3, [pc, #32]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f023 020f 	bic.w	r2, r3, #15
 8009702:	4906      	ldr	r1, [pc, #24]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	4313      	orrs	r3, r2
 8009708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800970a:	4b04      	ldr	r3, [pc, #16]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d005      	beq.n	8009724 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e086      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
 800971c:	52002000 	.word	0x52002000
 8009720:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d010      	beq.n	8009752 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	4b3f      	ldr	r3, [pc, #252]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800973c:	429a      	cmp	r2, r3
 800973e:	d208      	bcs.n	8009752 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009740:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	4939      	ldr	r1, [pc, #228]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 800974e:	4313      	orrs	r3, r2
 8009750:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0308 	and.w	r3, r3, #8
 800975a:	2b00      	cmp	r3, #0
 800975c:	d010      	beq.n	8009780 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695a      	ldr	r2, [r3, #20]
 8009762:	4b34      	ldr	r3, [pc, #208]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800976a:	429a      	cmp	r2, r3
 800976c:	d208      	bcs.n	8009780 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800976e:	4b31      	ldr	r3, [pc, #196]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	492e      	ldr	r1, [pc, #184]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 800977c:	4313      	orrs	r3, r2
 800977e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b00      	cmp	r3, #0
 800978a:	d010      	beq.n	80097ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699a      	ldr	r2, [r3, #24]
 8009790:	4b28      	ldr	r3, [pc, #160]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009798:	429a      	cmp	r2, r3
 800979a:	d208      	bcs.n	80097ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800979c:	4b25      	ldr	r3, [pc, #148]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	4922      	ldr	r1, [pc, #136]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d010      	beq.n	80097dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69da      	ldr	r2, [r3, #28]
 80097be:	4b1d      	ldr	r3, [pc, #116]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d208      	bcs.n	80097dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80097ca:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	4917      	ldr	r1, [pc, #92]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80097dc:	f000 f844 	bl	8009868 <HAL_RCC_GetSysClockFreq>
 80097e0:	4602      	mov	r2, r0
 80097e2:	4b14      	ldr	r3, [pc, #80]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	0a1b      	lsrs	r3, r3, #8
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	4912      	ldr	r1, [pc, #72]	; (8009838 <HAL_RCC_ClockConfig+0x35c>)
 80097ee:	5ccb      	ldrb	r3, [r1, r3]
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097fa:	4b0e      	ldr	r3, [pc, #56]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f003 030f 	and.w	r3, r3, #15
 8009802:	4a0d      	ldr	r2, [pc, #52]	; (8009838 <HAL_RCC_ClockConfig+0x35c>)
 8009804:	5cd3      	ldrb	r3, [r2, r3]
 8009806:	f003 031f 	and.w	r3, r3, #31
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	fa22 f303 	lsr.w	r3, r2, r3
 8009810:	4a0a      	ldr	r2, [pc, #40]	; (800983c <HAL_RCC_ClockConfig+0x360>)
 8009812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009814:	4a0a      	ldr	r2, [pc, #40]	; (8009840 <HAL_RCC_ClockConfig+0x364>)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800981a:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <HAL_RCC_ClockConfig+0x368>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f7f9 fc9a 	bl	8003158 <HAL_InitTick>
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	0801de74 	.word	0x0801de74
 800983c:	20000014 	.word	0x20000014
 8009840:	20000010 	.word	0x20000010
 8009844:	20000020 	.word	0x20000020

08009848 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800984c:	4b05      	ldr	r3, [pc, #20]	; (8009864 <HAL_RCC_EnableCSS+0x1c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a04      	ldr	r2, [pc, #16]	; (8009864 <HAL_RCC_EnableCSS+0x1c>)
 8009852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009856:	6013      	str	r3, [r2, #0]
}
 8009858:	bf00      	nop
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	58024400 	.word	0x58024400

08009868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009868:	b480      	push	{r7}
 800986a:	b089      	sub	sp, #36	; 0x24
 800986c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800986e:	4bb3      	ldr	r3, [pc, #716]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009876:	2b18      	cmp	r3, #24
 8009878:	f200 8155 	bhi.w	8009b26 <HAL_RCC_GetSysClockFreq+0x2be>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <HAL_RCC_GetSysClockFreq+0x1c>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	080098e9 	.word	0x080098e9
 8009888:	08009b27 	.word	0x08009b27
 800988c:	08009b27 	.word	0x08009b27
 8009890:	08009b27 	.word	0x08009b27
 8009894:	08009b27 	.word	0x08009b27
 8009898:	08009b27 	.word	0x08009b27
 800989c:	08009b27 	.word	0x08009b27
 80098a0:	08009b27 	.word	0x08009b27
 80098a4:	0800990f 	.word	0x0800990f
 80098a8:	08009b27 	.word	0x08009b27
 80098ac:	08009b27 	.word	0x08009b27
 80098b0:	08009b27 	.word	0x08009b27
 80098b4:	08009b27 	.word	0x08009b27
 80098b8:	08009b27 	.word	0x08009b27
 80098bc:	08009b27 	.word	0x08009b27
 80098c0:	08009b27 	.word	0x08009b27
 80098c4:	08009915 	.word	0x08009915
 80098c8:	08009b27 	.word	0x08009b27
 80098cc:	08009b27 	.word	0x08009b27
 80098d0:	08009b27 	.word	0x08009b27
 80098d4:	08009b27 	.word	0x08009b27
 80098d8:	08009b27 	.word	0x08009b27
 80098dc:	08009b27 	.word	0x08009b27
 80098e0:	08009b27 	.word	0x08009b27
 80098e4:	0800991b 	.word	0x0800991b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e8:	4b94      	ldr	r3, [pc, #592]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0320 	and.w	r3, r3, #32
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098f4:	4b91      	ldr	r3, [pc, #580]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	08db      	lsrs	r3, r3, #3
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	4a90      	ldr	r2, [pc, #576]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009900:	fa22 f303 	lsr.w	r3, r2, r3
 8009904:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009906:	e111      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009908:	4b8d      	ldr	r3, [pc, #564]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800990a:	61bb      	str	r3, [r7, #24]
      break;
 800990c:	e10e      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800990e:	4b8d      	ldr	r3, [pc, #564]	; (8009b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009910:	61bb      	str	r3, [r7, #24]
      break;
 8009912:	e10b      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009914:	4b8c      	ldr	r3, [pc, #560]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009916:	61bb      	str	r3, [r7, #24]
      break;
 8009918:	e108      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800991a:	4b88      	ldr	r3, [pc, #544]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009924:	4b85      	ldr	r3, [pc, #532]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009928:	091b      	lsrs	r3, r3, #4
 800992a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800992e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009930:	4b82      	ldr	r3, [pc, #520]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800993a:	4b80      	ldr	r3, [pc, #512]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800993c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993e:	08db      	lsrs	r3, r3, #3
 8009940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	fb02 f303 	mul.w	r3, r2, r3
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009952:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80e1 	beq.w	8009b20 <HAL_RCC_GetSysClockFreq+0x2b8>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b02      	cmp	r3, #2
 8009962:	f000 8083 	beq.w	8009a6c <HAL_RCC_GetSysClockFreq+0x204>
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b02      	cmp	r3, #2
 800996a:	f200 80a1 	bhi.w	8009ab0 <HAL_RCC_GetSysClockFreq+0x248>
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <HAL_RCC_GetSysClockFreq+0x114>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d056      	beq.n	8009a28 <HAL_RCC_GetSysClockFreq+0x1c0>
 800997a:	e099      	b.n	8009ab0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800997c:	4b6f      	ldr	r3, [pc, #444]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0320 	and.w	r3, r3, #32
 8009984:	2b00      	cmp	r3, #0
 8009986:	d02d      	beq.n	80099e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009988:	4b6c      	ldr	r3, [pc, #432]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	08db      	lsrs	r3, r3, #3
 800998e:	f003 0303 	and.w	r3, r3, #3
 8009992:	4a6b      	ldr	r2, [pc, #428]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009994:	fa22 f303 	lsr.w	r3, r2, r3
 8009998:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	ee07 3a90 	vmov	s15, r3
 80099a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b2:	4b62      	ldr	r3, [pc, #392]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80099e2:	e087      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	ee07 3a90 	vmov	s15, r3
 80099ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b50 <HAL_RCC_GetSysClockFreq+0x2e8>
 80099f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f6:	4b51      	ldr	r3, [pc, #324]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a26:	e065      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3a:	4b40      	ldr	r3, [pc, #256]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a6a:	e043      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7e:	4b2f      	ldr	r3, [pc, #188]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aae:	e021      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac2:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ad6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009af2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009af4:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	0a5b      	lsrs	r3, r3, #9
 8009afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afe:	3301      	adds	r3, #1
 8009b00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	ee07 3a90 	vmov	s15, r3
 8009b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b18:	ee17 3a90 	vmov	r3, s15
 8009b1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b1e:	e005      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61bb      	str	r3, [r7, #24]
      break;
 8009b24:	e002      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009b26:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b28:	61bb      	str	r3, [r7, #24]
      break;
 8009b2a:	bf00      	nop
  }

  return sysclockfreq;
 8009b2c:	69bb      	ldr	r3, [r7, #24]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3724      	adds	r7, #36	; 0x24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	58024400 	.word	0x58024400
 8009b40:	03d09000 	.word	0x03d09000
 8009b44:	003d0900 	.word	0x003d0900
 8009b48:	00989680 	.word	0x00989680
 8009b4c:	46000000 	.word	0x46000000
 8009b50:	4c742400 	.word	0x4c742400
 8009b54:	4a742400 	.word	0x4a742400
 8009b58:	4b189680 	.word	0x4b189680

08009b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b62:	f7ff fe81 	bl	8009868 <HAL_RCC_GetSysClockFreq>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b10      	ldr	r3, [pc, #64]	; (8009bac <HAL_RCC_GetHCLKFreq+0x50>)
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	0a1b      	lsrs	r3, r3, #8
 8009b6e:	f003 030f 	and.w	r3, r3, #15
 8009b72:	490f      	ldr	r1, [pc, #60]	; (8009bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b74:	5ccb      	ldrb	r3, [r1, r3]
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <HAL_RCC_GetHCLKFreq+0x50>)
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	f003 030f 	and.w	r3, r3, #15
 8009b88:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b8a:	5cd3      	ldrb	r3, [r2, r3]
 8009b8c:	f003 031f 	and.w	r3, r3, #31
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	fa22 f303 	lsr.w	r3, r2, r3
 8009b96:	4a07      	ldr	r2, [pc, #28]	; (8009bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b9a:	4a07      	ldr	r2, [pc, #28]	; (8009bb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ba0:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	58024400 	.word	0x58024400
 8009bb0:	0801de74 	.word	0x0801de74
 8009bb4:	20000014 	.word	0x20000014
 8009bb8:	20000010 	.word	0x20000010

08009bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009bc0:	f7ff ffcc 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	091b      	lsrs	r3, r3, #4
 8009bcc:	f003 0307 	and.w	r3, r3, #7
 8009bd0:	4904      	ldr	r1, [pc, #16]	; (8009be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bd2:	5ccb      	ldrb	r3, [r1, r3]
 8009bd4:	f003 031f 	and.w	r3, r3, #31
 8009bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	58024400 	.word	0x58024400
 8009be4:	0801de74 	.word	0x0801de74

08009be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009bec:	f7ff ffb6 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	0a1b      	lsrs	r3, r3, #8
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	4904      	ldr	r1, [pc, #16]	; (8009c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009bfe:	5ccb      	ldrb	r3, [r1, r3]
 8009c00:	f003 031f 	and.w	r3, r3, #31
 8009c04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	58024400 	.word	0x58024400
 8009c10:	0801de74 	.word	0x0801de74

08009c14 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009c18:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c24:	d105      	bne.n	8009c32 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009c26:	f000 f809 	bl	8009c3c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009c2a:	4b03      	ldr	r3, [pc, #12]	; (8009c38 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c30:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8009c32:	bf00      	nop
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	58024400 	.word	0x58024400

08009c3c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
	...

08009c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c50:	b0ca      	sub	sp, #296	; 0x128
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009c70:	2500      	movs	r5, #0
 8009c72:	ea54 0305 	orrs.w	r3, r4, r5
 8009c76:	d049      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c82:	d02f      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009c84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c88:	d828      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c8e:	d01a      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c94:	d822      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c9e:	d007      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ca0:	e01c      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca2:	4bb8      	ldr	r3, [pc, #736]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	4ab7      	ldr	r2, [pc, #732]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cae:	e01a      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	2102      	movs	r1, #2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f002 fbb7 	bl	800c42c <RCCEx_PLL2_Config>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cc4:	e00f      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cca:	3328      	adds	r3, #40	; 0x28
 8009ccc:	2102      	movs	r1, #2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f002 fc5e 	bl	800c590 <RCCEx_PLL3_Config>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cda:	e004      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ce2:	e000      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009cee:	4ba5      	ldr	r3, [pc, #660]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cfc:	4aa1      	ldr	r2, [pc, #644]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cfe:	430b      	orrs	r3, r1
 8009d00:	6513      	str	r3, [r2, #80]	; 0x50
 8009d02:	e003      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	ea58 0309 	orrs.w	r3, r8, r9
 8009d20:	d047      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d82a      	bhi.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d2c:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d49 	.word	0x08009d49
 8009d38:	08009d57 	.word	0x08009d57
 8009d3c:	08009d6d 	.word	0x08009d6d
 8009d40:	08009d8b 	.word	0x08009d8b
 8009d44:	08009d8b 	.word	0x08009d8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d48:	4b8e      	ldr	r3, [pc, #568]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	4a8d      	ldr	r2, [pc, #564]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d54:	e01a      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f002 fb64 	bl	800c42c <RCCEx_PLL2_Config>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d6a:	e00f      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d70:	3328      	adds	r3, #40	; 0x28
 8009d72:	2100      	movs	r1, #0
 8009d74:	4618      	mov	r0, r3
 8009d76:	f002 fc0b 	bl	800c590 <RCCEx_PLL3_Config>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d80:	e004      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d88:	e000      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10a      	bne.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d94:	4b7b      	ldr	r3, [pc, #492]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d98:	f023 0107 	bic.w	r1, r3, #7
 8009d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da2:	4a78      	ldr	r2, [pc, #480]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009da4:	430b      	orrs	r3, r1
 8009da6:	6513      	str	r3, [r2, #80]	; 0x50
 8009da8:	e003      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009dbe:	f04f 0b00 	mov.w	fp, #0
 8009dc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009dc6:	d04c      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dd2:	d030      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dd8:	d829      	bhi.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009dda:	2bc0      	cmp	r3, #192	; 0xc0
 8009ddc:	d02d      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009dde:	2bc0      	cmp	r3, #192	; 0xc0
 8009de0:	d825      	bhi.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009de2:	2b80      	cmp	r3, #128	; 0x80
 8009de4:	d018      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009de6:	2b80      	cmp	r3, #128	; 0x80
 8009de8:	d821      	bhi.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d002      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009dee:	2b40      	cmp	r3, #64	; 0x40
 8009df0:	d007      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009df2:	e01c      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df4:	4b63      	ldr	r3, [pc, #396]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	4a62      	ldr	r2, [pc, #392]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e00:	e01c      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e06:	3308      	adds	r3, #8
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f002 fb0e 	bl	800c42c <RCCEx_PLL2_Config>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e16:	e011      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1c:	3328      	adds	r3, #40	; 0x28
 8009e1e:	2100      	movs	r1, #0
 8009e20:	4618      	mov	r0, r3
 8009e22:	f002 fbb5 	bl	800c590 <RCCEx_PLL3_Config>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e2c:	e006      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e34:	e002      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009e36:	bf00      	nop
 8009e38:	e000      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009e44:	4b4f      	ldr	r3, [pc, #316]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e48:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e52:	4a4c      	ldr	r2, [pc, #304]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e54:	430b      	orrs	r3, r1
 8009e56:	6513      	str	r3, [r2, #80]	; 0x50
 8009e58:	e003      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009e6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009e72:	2300      	movs	r3, #0
 8009e74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009e78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	d053      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e8e:	d035      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009e90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e94:	d82e      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e9a:	d031      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009e9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ea0:	d828      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ea6:	d01a      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eac:	d822      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eb6:	d007      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009eb8:	e01c      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eba:	4b32      	ldr	r3, [pc, #200]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	4a31      	ldr	r2, [pc, #196]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ec6:	e01c      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ecc:	3308      	adds	r3, #8
 8009ece:	2100      	movs	r1, #0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f002 faab 	bl	800c42c <RCCEx_PLL2_Config>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009edc:	e011      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee2:	3328      	adds	r3, #40	; 0x28
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f002 fb52 	bl	800c590 <RCCEx_PLL3_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ef2:	e006      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009efa:	e002      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009efc:	bf00      	nop
 8009efe:	e000      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10b      	bne.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f0a:	4b1e      	ldr	r3, [pc, #120]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f1a:	4a1a      	ldr	r2, [pc, #104]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8009f20:	e003      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009f36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009f40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009f44:	460b      	mov	r3, r1
 8009f46:	4313      	orrs	r3, r2
 8009f48:	d056      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f56:	d038      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f5c:	d831      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f62:	d034      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f68:	d82b      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f6e:	d01d      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f74:	d825      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d006      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009f7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f7e:	d00a      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009f80:	e01f      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f88:	4ba2      	ldr	r3, [pc, #648]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	4aa1      	ldr	r2, [pc, #644]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f94:	e01c      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f002 fa44 	bl	800c42c <RCCEx_PLL2_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009faa:	e011      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb0:	3328      	adds	r3, #40	; 0x28
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f002 faeb 	bl	800c590 <RCCEx_PLL3_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fc0:	e006      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fc8:	e002      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009fca:	bf00      	nop
 8009fcc:	e000      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10b      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009fd8:	4b8e      	ldr	r3, [pc, #568]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fdc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fe8:	4a8a      	ldr	r2, [pc, #552]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fea:	430b      	orrs	r3, r1
 8009fec:	6593      	str	r3, [r2, #88]	; 0x58
 8009fee:	e003      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a008:	2300      	movs	r3, #0
 800a00a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a00e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a012:	460b      	mov	r3, r1
 800a014:	4313      	orrs	r3, r2
 800a016:	d03a      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01e:	2b30      	cmp	r3, #48	; 0x30
 800a020:	d01f      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a022:	2b30      	cmp	r3, #48	; 0x30
 800a024:	d819      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a026:	2b20      	cmp	r3, #32
 800a028:	d00c      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d815      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d019      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a032:	2b10      	cmp	r3, #16
 800a034:	d111      	bne.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a036:	4b77      	ldr	r3, [pc, #476]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	4a76      	ldr	r2, [pc, #472]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a03c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a042:	e011      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a048:	3308      	adds	r3, #8
 800a04a:	2102      	movs	r1, #2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f002 f9ed 	bl	800c42c <RCCEx_PLL2_Config>
 800a052:	4603      	mov	r3, r0
 800a054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a058:	e006      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a060:	e002      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a062:	bf00      	nop
 800a064:	e000      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a066:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a070:	4b68      	ldr	r3, [pc, #416]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a074:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a07e:	4a65      	ldr	r2, [pc, #404]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a080:	430b      	orrs	r3, r1
 800a082:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a084:	e003      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a09a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a0a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	d051      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0b8:	d035      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a0ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0be:	d82e      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0c4:	d031      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a0c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0ca:	d828      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d0:	d01a      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d6:	d822      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e0:	d007      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a0e2:	e01c      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e4:	4b4b      	ldr	r3, [pc, #300]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e8:	4a4a      	ldr	r2, [pc, #296]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0f0:	e01c      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f002 f996 	bl	800c42c <RCCEx_PLL2_Config>
 800a100:	4603      	mov	r3, r0
 800a102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a106:	e011      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a10c:	3328      	adds	r3, #40	; 0x28
 800a10e:	2100      	movs	r1, #0
 800a110:	4618      	mov	r0, r3
 800a112:	f002 fa3d 	bl	800c590 <RCCEx_PLL3_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a11c:	e006      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a124:	e002      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a126:	bf00      	nop
 800a128:	e000      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a12a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a12c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a134:	4b37      	ldr	r3, [pc, #220]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a138:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a142:	4a34      	ldr	r2, [pc, #208]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a144:	430b      	orrs	r3, r1
 800a146:	6513      	str	r3, [r2, #80]	; 0x50
 800a148:	e003      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a14e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a15e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a162:	2300      	movs	r3, #0
 800a164:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a168:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a16c:	460b      	mov	r3, r1
 800a16e:	4313      	orrs	r3, r2
 800a170:	d056      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a17c:	d033      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a17e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a182:	d82c      	bhi.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a184:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a188:	d02f      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a18a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a18e:	d826      	bhi.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a190:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a194:	d02b      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a19a:	d820      	bhi.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a19c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a0:	d012      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a1a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a6:	d81a      	bhi.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d022      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a1ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1b0:	d115      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f002 f936 	bl	800c42c <RCCEx_PLL2_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1c6:	e015      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1cc:	3328      	adds	r3, #40	; 0x28
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f002 f9dd 	bl	800c590 <RCCEx_PLL3_Config>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1dc:	e00a      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1e4:	e006      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1e6:	bf00      	nop
 800a1e8:	e004      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1ea:	bf00      	nop
 800a1ec:	e002      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1ee:	bf00      	nop
 800a1f0:	e000      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10d      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1fc:	4b05      	ldr	r3, [pc, #20]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a200:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a20a:	4a02      	ldr	r2, [pc, #8]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a20c:	430b      	orrs	r3, r1
 800a20e:	6513      	str	r3, [r2, #80]	; 0x50
 800a210:	e006      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a212:	bf00      	nop
 800a214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a21c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a22c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a230:	2300      	movs	r3, #0
 800a232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a236:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4313      	orrs	r3, r2
 800a23e:	d055      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a244:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a24c:	d033      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a24e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a252:	d82c      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a258:	d02f      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a25a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25e:	d826      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a264:	d02b      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a26a:	d820      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a26c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a270:	d012      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a276:	d81a      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d022      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a27c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a280:	d115      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a286:	3308      	adds	r3, #8
 800a288:	2101      	movs	r1, #1
 800a28a:	4618      	mov	r0, r3
 800a28c:	f002 f8ce 	bl	800c42c <RCCEx_PLL2_Config>
 800a290:	4603      	mov	r3, r0
 800a292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a296:	e015      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29c:	3328      	adds	r3, #40	; 0x28
 800a29e:	2101      	movs	r1, #1
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f002 f975 	bl	800c590 <RCCEx_PLL3_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2ac:	e00a      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2b4:	e006      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2b6:	bf00      	nop
 800a2b8:	e004      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2ba:	bf00      	nop
 800a2bc:	e002      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2be:	bf00      	nop
 800a2c0:	e000      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10b      	bne.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a2cc:	4ba3      	ldr	r3, [pc, #652]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2dc:	4a9f      	ldr	r2, [pc, #636]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2de:	430b      	orrs	r3, r1
 800a2e0:	6593      	str	r3, [r2, #88]	; 0x58
 800a2e2:	e003      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a2f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a306:	460b      	mov	r3, r1
 800a308:	4313      	orrs	r3, r2
 800a30a:	d037      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a316:	d00e      	beq.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a31c:	d816      	bhi.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d018      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a326:	d111      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a328:	4b8c      	ldr	r3, [pc, #560]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32c:	4a8b      	ldr	r2, [pc, #556]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a32e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a334:	e00f      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33a:	3308      	adds	r3, #8
 800a33c:	2101      	movs	r1, #1
 800a33e:	4618      	mov	r0, r3
 800a340:	f002 f874 	bl	800c42c <RCCEx_PLL2_Config>
 800a344:	4603      	mov	r3, r0
 800a346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a34a:	e004      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a352:	e000      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a354:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10a      	bne.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a35e:	4b7f      	ldr	r3, [pc, #508]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a362:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36c:	4a7b      	ldr	r2, [pc, #492]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a36e:	430b      	orrs	r3, r1
 800a370:	6513      	str	r3, [r2, #80]	; 0x50
 800a372:	e003      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a38c:	2300      	movs	r3, #0
 800a38e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a392:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a396:	460b      	mov	r3, r1
 800a398:	4313      	orrs	r3, r2
 800a39a:	d039      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d81c      	bhi.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a3a6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a3e9 	.word	0x0800a3e9
 800a3b0:	0800a3bd 	.word	0x0800a3bd
 800a3b4:	0800a3cb 	.word	0x0800a3cb
 800a3b8:	0800a3e9 	.word	0x0800a3e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3bc:	4b67      	ldr	r3, [pc, #412]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	4a66      	ldr	r2, [pc, #408]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3c8:	e00f      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f002 f82a 	bl	800c42c <RCCEx_PLL2_Config>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3de:	e004      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3e6:	e000      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a3f2:	4b5a      	ldr	r3, [pc, #360]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f6:	f023 0103 	bic.w	r1, r3, #3
 800a3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a400:	4a56      	ldr	r2, [pc, #344]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a402:	430b      	orrs	r3, r1
 800a404:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a406:	e003      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a40c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a41c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a420:	2300      	movs	r3, #0
 800a422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a42a:	460b      	mov	r3, r1
 800a42c:	4313      	orrs	r3, r2
 800a42e:	f000 809f 	beq.w	800a570 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a432:	4b4b      	ldr	r3, [pc, #300]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a4a      	ldr	r2, [pc, #296]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a43c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a43e:	f7f8 fed5 	bl	80031ec <HAL_GetTick>
 800a442:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a446:	e00b      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a448:	f7f8 fed0 	bl	80031ec <HAL_GetTick>
 800a44c:	4602      	mov	r2, r0
 800a44e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	2b64      	cmp	r3, #100	; 0x64
 800a456:	d903      	bls.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a45e:	e005      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a460:	4b3f      	ldr	r3, [pc, #252]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d0ed      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a46c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a470:	2b00      	cmp	r3, #0
 800a472:	d179      	bne.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a474:	4b39      	ldr	r3, [pc, #228]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a47c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a480:	4053      	eors	r3, r2
 800a482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a486:	2b00      	cmp	r3, #0
 800a488:	d015      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a48a:	4b34      	ldr	r3, [pc, #208]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a492:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a496:	4b31      	ldr	r3, [pc, #196]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49a:	4a30      	ldr	r2, [pc, #192]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a49c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4a2:	4b2e      	ldr	r3, [pc, #184]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a6:	4a2d      	ldr	r2, [pc, #180]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a4ae:	4a2b      	ldr	r2, [pc, #172]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a4b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a4be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c2:	d118      	bne.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c4:	f7f8 fe92 	bl	80031ec <HAL_GetTick>
 800a4c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4cc:	e00d      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ce:	f7f8 fe8d 	bl	80031ec <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a4d8:	1ad2      	subs	r2, r2, r3
 800a4da:	f241 3388 	movw	r3, #5000	; 0x1388
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d903      	bls.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a4e8:	e005      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4ea:	4b1c      	ldr	r3, [pc, #112]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0eb      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d129      	bne.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a50a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a50e:	d10e      	bne.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a510:	4b12      	ldr	r3, [pc, #72]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a51c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a520:	091a      	lsrs	r2, r3, #4
 800a522:	4b10      	ldr	r3, [pc, #64]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a524:	4013      	ands	r3, r2
 800a526:	4a0d      	ldr	r2, [pc, #52]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a528:	430b      	orrs	r3, r1
 800a52a:	6113      	str	r3, [r2, #16]
 800a52c:	e005      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a52e:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	4a0a      	ldr	r2, [pc, #40]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a534:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a538:	6113      	str	r3, [r2, #16]
 800a53a:	4b08      	ldr	r3, [pc, #32]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a53c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a542:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a54a:	4a04      	ldr	r2, [pc, #16]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a54c:	430b      	orrs	r3, r1
 800a54e:	6713      	str	r3, [r2, #112]	; 0x70
 800a550:	e00e      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a556:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a55a:	e009      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a55c:	58024400 	.word	0x58024400
 800a560:	58024800 	.word	0x58024800
 800a564:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a56c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f002 0301 	and.w	r3, r2, #1
 800a57c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a580:	2300      	movs	r3, #0
 800a582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a586:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4313      	orrs	r3, r2
 800a58e:	f000 8089 	beq.w	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a598:	2b28      	cmp	r3, #40	; 0x28
 800a59a:	d86b      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a59c:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a2:	bf00      	nop
 800a5a4:	0800a67d 	.word	0x0800a67d
 800a5a8:	0800a675 	.word	0x0800a675
 800a5ac:	0800a675 	.word	0x0800a675
 800a5b0:	0800a675 	.word	0x0800a675
 800a5b4:	0800a675 	.word	0x0800a675
 800a5b8:	0800a675 	.word	0x0800a675
 800a5bc:	0800a675 	.word	0x0800a675
 800a5c0:	0800a675 	.word	0x0800a675
 800a5c4:	0800a649 	.word	0x0800a649
 800a5c8:	0800a675 	.word	0x0800a675
 800a5cc:	0800a675 	.word	0x0800a675
 800a5d0:	0800a675 	.word	0x0800a675
 800a5d4:	0800a675 	.word	0x0800a675
 800a5d8:	0800a675 	.word	0x0800a675
 800a5dc:	0800a675 	.word	0x0800a675
 800a5e0:	0800a675 	.word	0x0800a675
 800a5e4:	0800a65f 	.word	0x0800a65f
 800a5e8:	0800a675 	.word	0x0800a675
 800a5ec:	0800a675 	.word	0x0800a675
 800a5f0:	0800a675 	.word	0x0800a675
 800a5f4:	0800a675 	.word	0x0800a675
 800a5f8:	0800a675 	.word	0x0800a675
 800a5fc:	0800a675 	.word	0x0800a675
 800a600:	0800a675 	.word	0x0800a675
 800a604:	0800a67d 	.word	0x0800a67d
 800a608:	0800a675 	.word	0x0800a675
 800a60c:	0800a675 	.word	0x0800a675
 800a610:	0800a675 	.word	0x0800a675
 800a614:	0800a675 	.word	0x0800a675
 800a618:	0800a675 	.word	0x0800a675
 800a61c:	0800a675 	.word	0x0800a675
 800a620:	0800a675 	.word	0x0800a675
 800a624:	0800a67d 	.word	0x0800a67d
 800a628:	0800a675 	.word	0x0800a675
 800a62c:	0800a675 	.word	0x0800a675
 800a630:	0800a675 	.word	0x0800a675
 800a634:	0800a675 	.word	0x0800a675
 800a638:	0800a675 	.word	0x0800a675
 800a63c:	0800a675 	.word	0x0800a675
 800a640:	0800a675 	.word	0x0800a675
 800a644:	0800a67d 	.word	0x0800a67d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a64c:	3308      	adds	r3, #8
 800a64e:	2101      	movs	r1, #1
 800a650:	4618      	mov	r0, r3
 800a652:	f001 feeb 	bl	800c42c <RCCEx_PLL2_Config>
 800a656:	4603      	mov	r3, r0
 800a658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a65c:	e00f      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a662:	3328      	adds	r3, #40	; 0x28
 800a664:	2101      	movs	r1, #1
 800a666:	4618      	mov	r0, r3
 800a668:	f001 ff92 	bl	800c590 <RCCEx_PLL3_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a672:	e004      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a67a:	e000      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a67c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a67e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a686:	4bbf      	ldr	r3, [pc, #764]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a694:	4abb      	ldr	r2, [pc, #748]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a696:	430b      	orrs	r3, r1
 800a698:	6553      	str	r3, [r2, #84]	; 0x54
 800a69a:	e003      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f002 0302 	and.w	r3, r2, #2
 800a6b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a6ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	d041      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6ca:	2b05      	cmp	r3, #5
 800a6cc:	d824      	bhi.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a6ce:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d4:	0800a721 	.word	0x0800a721
 800a6d8:	0800a6ed 	.word	0x0800a6ed
 800a6dc:	0800a703 	.word	0x0800a703
 800a6e0:	0800a721 	.word	0x0800a721
 800a6e4:	0800a721 	.word	0x0800a721
 800a6e8:	0800a721 	.word	0x0800a721
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f0:	3308      	adds	r3, #8
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f001 fe99 	bl	800c42c <RCCEx_PLL2_Config>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a700:	e00f      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a706:	3328      	adds	r3, #40	; 0x28
 800a708:	2101      	movs	r1, #1
 800a70a:	4618      	mov	r0, r3
 800a70c:	f001 ff40 	bl	800c590 <RCCEx_PLL3_Config>
 800a710:	4603      	mov	r3, r0
 800a712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a716:	e004      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a71e:	e000      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a720:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10a      	bne.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a72a:	4b96      	ldr	r3, [pc, #600]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72e:	f023 0107 	bic.w	r1, r3, #7
 800a732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a738:	4a92      	ldr	r2, [pc, #584]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a73a:	430b      	orrs	r3, r1
 800a73c:	6553      	str	r3, [r2, #84]	; 0x54
 800a73e:	e003      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a744:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f002 0304 	and.w	r3, r2, #4
 800a754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a758:	2300      	movs	r3, #0
 800a75a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a75e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a762:	460b      	mov	r3, r1
 800a764:	4313      	orrs	r3, r2
 800a766:	d044      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a76c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a770:	2b05      	cmp	r3, #5
 800a772:	d825      	bhi.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a774:	a201      	add	r2, pc, #4	; (adr r2, 800a77c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77a:	bf00      	nop
 800a77c:	0800a7c9 	.word	0x0800a7c9
 800a780:	0800a795 	.word	0x0800a795
 800a784:	0800a7ab 	.word	0x0800a7ab
 800a788:	0800a7c9 	.word	0x0800a7c9
 800a78c:	0800a7c9 	.word	0x0800a7c9
 800a790:	0800a7c9 	.word	0x0800a7c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a798:	3308      	adds	r3, #8
 800a79a:	2101      	movs	r1, #1
 800a79c:	4618      	mov	r0, r3
 800a79e:	f001 fe45 	bl	800c42c <RCCEx_PLL2_Config>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7a8:	e00f      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ae:	3328      	adds	r3, #40	; 0x28
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 feec 	bl	800c590 <RCCEx_PLL3_Config>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7be:	e004      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7c6:	e000      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10b      	bne.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7d2:	4b6c      	ldr	r3, [pc, #432]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d6:	f023 0107 	bic.w	r1, r3, #7
 800a7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7e2:	4a68      	ldr	r2, [pc, #416]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	6593      	str	r3, [r2, #88]	; 0x58
 800a7e8:	e003      	b.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	f002 0320 	and.w	r3, r2, #32
 800a7fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a802:	2300      	movs	r3, #0
 800a804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a80c:	460b      	mov	r3, r1
 800a80e:	4313      	orrs	r3, r2
 800a810:	d055      	beq.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a81a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a81e:	d033      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a824:	d82c      	bhi.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a82a:	d02f      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a82c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a830:	d826      	bhi.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a832:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a836:	d02b      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a838:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a83c:	d820      	bhi.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a83e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a842:	d012      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a848:	d81a      	bhi.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d022      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a84e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a852:	d115      	bne.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a858:	3308      	adds	r3, #8
 800a85a:	2100      	movs	r1, #0
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 fde5 	bl	800c42c <RCCEx_PLL2_Config>
 800a862:	4603      	mov	r3, r0
 800a864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a868:	e015      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86e:	3328      	adds	r3, #40	; 0x28
 800a870:	2102      	movs	r1, #2
 800a872:	4618      	mov	r0, r3
 800a874:	f001 fe8c 	bl	800c590 <RCCEx_PLL3_Config>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a87e:	e00a      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a886:	e006      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a888:	bf00      	nop
 800a88a:	e004      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a88c:	bf00      	nop
 800a88e:	e002      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a890:	bf00      	nop
 800a892:	e000      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a894:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10b      	bne.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a89e:	4b39      	ldr	r3, [pc, #228]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ae:	4a35      	ldr	r2, [pc, #212]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	6553      	str	r3, [r2, #84]	; 0x54
 800a8b4:	e003      	b.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a8ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a8d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	d058      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a8ea:	d033      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a8ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a8f0:	d82c      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a8f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8f6:	d02f      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a8f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8fc:	d826      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a8fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a902:	d02b      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a908:	d820      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a90a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a90e:	d012      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a914:	d81a      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a916:	2b00      	cmp	r3, #0
 800a918:	d022      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a91e:	d115      	bne.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a924:	3308      	adds	r3, #8
 800a926:	2100      	movs	r1, #0
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 fd7f 	bl	800c42c <RCCEx_PLL2_Config>
 800a92e:	4603      	mov	r3, r0
 800a930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a934:	e015      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a93a:	3328      	adds	r3, #40	; 0x28
 800a93c:	2102      	movs	r1, #2
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 fe26 	bl	800c590 <RCCEx_PLL3_Config>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a94a:	e00a      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a952:	e006      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a954:	bf00      	nop
 800a956:	e004      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a958:	bf00      	nop
 800a95a:	e002      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a95c:	bf00      	nop
 800a95e:	e000      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a960:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10e      	bne.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a96a:	4b06      	ldr	r3, [pc, #24]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a96e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a97a:	4a02      	ldr	r2, [pc, #8]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a97c:	430b      	orrs	r3, r1
 800a97e:	6593      	str	r3, [r2, #88]	; 0x58
 800a980:	e006      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a982:	bf00      	nop
 800a984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a98c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a99c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	d055      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a9b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9bc:	d033      	beq.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a9be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9c2:	d82c      	bhi.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9c8:	d02f      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a9ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9ce:	d826      	bhi.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a9d4:	d02b      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a9d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a9da:	d820      	bhi.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9e0:	d012      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a9e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9e6:	d81a      	bhi.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d022      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a9ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9f0:	d115      	bne.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f001 fd16 	bl	800c42c <RCCEx_PLL2_Config>
 800aa00:	4603      	mov	r3, r0
 800aa02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa06:	e015      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0c:	3328      	adds	r3, #40	; 0x28
 800aa0e:	2102      	movs	r1, #2
 800aa10:	4618      	mov	r0, r3
 800aa12:	f001 fdbd 	bl	800c590 <RCCEx_PLL3_Config>
 800aa16:	4603      	mov	r3, r0
 800aa18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa1c:	e00a      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa24:	e006      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa26:	bf00      	nop
 800aa28:	e004      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa2a:	bf00      	nop
 800aa2c:	e002      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa2e:	bf00      	nop
 800aa30:	e000      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10b      	bne.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa3c:	4ba1      	ldr	r3, [pc, #644]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800aa44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa4c:	4a9d      	ldr	r2, [pc, #628]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa4e:	430b      	orrs	r3, r1
 800aa50:	6593      	str	r3, [r2, #88]	; 0x58
 800aa52:	e003      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	f002 0308 	and.w	r3, r2, #8
 800aa68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800aa76:	460b      	mov	r3, r1
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	d01e      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800aa7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa88:	d10c      	bne.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8e:	3328      	adds	r3, #40	; 0x28
 800aa90:	2102      	movs	r1, #2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f001 fd7c 	bl	800c590 <RCCEx_PLL3_Config>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aaa4:	4b87      	ldr	r3, [pc, #540]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aaac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aab4:	4a83      	ldr	r2, [pc, #524]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aab6:	430b      	orrs	r3, r1
 800aab8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aaba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f002 0310 	and.w	r3, r2, #16
 800aac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aaca:	2300      	movs	r3, #0
 800aacc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aad0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aad4:	460b      	mov	r3, r1
 800aad6:	4313      	orrs	r3, r2
 800aad8:	d01e      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aae6:	d10c      	bne.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaec:	3328      	adds	r3, #40	; 0x28
 800aaee:	2102      	movs	r1, #2
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f001 fd4d 	bl	800c590 <RCCEx_PLL3_Config>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab02:	4b70      	ldr	r3, [pc, #448]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ab0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab12:	4a6c      	ldr	r2, [pc, #432]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab14:	430b      	orrs	r3, r1
 800ab16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ab24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ab32:	460b      	mov	r3, r1
 800ab34:	4313      	orrs	r3, r2
 800ab36:	d03e      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab44:	d022      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ab46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab4a:	d81b      	bhi.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab54:	d00b      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ab56:	e015      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab5c:	3308      	adds	r3, #8
 800ab5e:	2100      	movs	r1, #0
 800ab60:	4618      	mov	r0, r3
 800ab62:	f001 fc63 	bl	800c42c <RCCEx_PLL2_Config>
 800ab66:	4603      	mov	r3, r0
 800ab68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab6c:	e00f      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab72:	3328      	adds	r3, #40	; 0x28
 800ab74:	2102      	movs	r1, #2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 fd0a 	bl	800c590 <RCCEx_PLL3_Config>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab82:	e004      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab8a:	e000      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ab8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10b      	bne.n	800abae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab96:	4b4b      	ldr	r3, [pc, #300]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ab9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aba6:	4a47      	ldr	r2, [pc, #284]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aba8:	430b      	orrs	r3, r1
 800abaa:	6593      	str	r3, [r2, #88]	; 0x58
 800abac:	e003      	b.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800abb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800abc2:	67bb      	str	r3, [r7, #120]	; 0x78
 800abc4:	2300      	movs	r3, #0
 800abc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800abc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800abcc:	460b      	mov	r3, r1
 800abce:	4313      	orrs	r3, r2
 800abd0:	d03b      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800abd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abde:	d01f      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800abe0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abe4:	d818      	bhi.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800abe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abea:	d003      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800abec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abf0:	d007      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800abf2:	e011      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf4:	4b33      	ldr	r3, [pc, #204]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf8:	4a32      	ldr	r2, [pc, #200]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac00:	e00f      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac06:	3328      	adds	r3, #40	; 0x28
 800ac08:	2101      	movs	r1, #1
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f001 fcc0 	bl	800c590 <RCCEx_PLL3_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac16:	e004      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac1e:	e000      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ac20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac2a:	4b26      	ldr	r3, [pc, #152]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ac32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3a:	4a22      	ldr	r2, [pc, #136]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	6553      	str	r3, [r2, #84]	; 0x54
 800ac40:	e003      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ac56:	673b      	str	r3, [r7, #112]	; 0x70
 800ac58:	2300      	movs	r3, #0
 800ac5a:	677b      	str	r3, [r7, #116]	; 0x74
 800ac5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ac60:	460b      	mov	r3, r1
 800ac62:	4313      	orrs	r3, r2
 800ac64:	d034      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ac66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac74:	d007      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ac76:	e011      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac78:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	4a11      	ldr	r2, [pc, #68]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac84:	e00e      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	2102      	movs	r1, #2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f001 fbcc 	bl	800c42c <RCCEx_PLL2_Config>
 800ac94:	4603      	mov	r3, r0
 800ac96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac9a:	e003      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10d      	bne.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800acac:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acba:	4a02      	ldr	r2, [pc, #8]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acbc:	430b      	orrs	r3, r1
 800acbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acc0:	e006      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800acc2:	bf00      	nop
 800acc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800accc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800acd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800acdc:	66bb      	str	r3, [r7, #104]	; 0x68
 800acde:	2300      	movs	r3, #0
 800ace0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ace2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ace6:	460b      	mov	r3, r1
 800ace8:	4313      	orrs	r3, r2
 800acea:	d00c      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800acec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf0:	3328      	adds	r3, #40	; 0x28
 800acf2:	2102      	movs	r1, #2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 fc4b 	bl	800c590 <RCCEx_PLL3_Config>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ad12:	663b      	str	r3, [r7, #96]	; 0x60
 800ad14:	2300      	movs	r3, #0
 800ad16:	667b      	str	r3, [r7, #100]	; 0x64
 800ad18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	d038      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad2e:	d018      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ad30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad34:	d811      	bhi.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ad36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad3a:	d014      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ad3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad40:	d80b      	bhi.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d011      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ad46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad4a:	d106      	bne.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad4c:	4bc3      	ldr	r3, [pc, #780]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	4ac2      	ldr	r2, [pc, #776]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ad58:	e008      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad60:	e004      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad62:	bf00      	nop
 800ad64:	e002      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad66:	bf00      	nop
 800ad68:	e000      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10b      	bne.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad74:	4bb9      	ldr	r3, [pc, #740]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ad7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad84:	4ab5      	ldr	r2, [pc, #724]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad86:	430b      	orrs	r3, r1
 800ad88:	6553      	str	r3, [r2, #84]	; 0x54
 800ad8a:	e003      	b.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ada0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ada2:	2300      	movs	r3, #0
 800ada4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ada6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800adaa:	460b      	mov	r3, r1
 800adac:	4313      	orrs	r3, r2
 800adae:	d009      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800adb0:	4baa      	ldr	r3, [pc, #680]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800adb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adbe:	4aa7      	ldr	r2, [pc, #668]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc0:	430b      	orrs	r3, r1
 800adc2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800adc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adcc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800add0:	653b      	str	r3, [r7, #80]	; 0x50
 800add2:	2300      	movs	r3, #0
 800add4:	657b      	str	r3, [r7, #84]	; 0x54
 800add6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800adda:	460b      	mov	r3, r1
 800addc:	4313      	orrs	r3, r2
 800adde:	d00a      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ade0:	4b9e      	ldr	r3, [pc, #632]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ade8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800adf0:	4a9a      	ldr	r2, [pc, #616]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adf2:	430b      	orrs	r3, r1
 800adf4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800adf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ae02:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae04:	2300      	movs	r3, #0
 800ae06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	d009      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae12:	4b92      	ldr	r3, [pc, #584]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae16:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ae1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae20:	4a8e      	ldr	r2, [pc, #568]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae22:	430b      	orrs	r3, r1
 800ae24:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ae32:	643b      	str	r3, [r7, #64]	; 0x40
 800ae34:	2300      	movs	r3, #0
 800ae36:	647b      	str	r3, [r7, #68]	; 0x44
 800ae38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	d00e      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae42:	4b86      	ldr	r3, [pc, #536]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	4a85      	ldr	r2, [pc, #532]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae4c:	6113      	str	r3, [r2, #16]
 800ae4e:	4b83      	ldr	r3, [pc, #524]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae50:	6919      	ldr	r1, [r3, #16]
 800ae52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ae5a:	4a80      	ldr	r2, [pc, #512]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae5c:	430b      	orrs	r3, r1
 800ae5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ae6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae6e:	2300      	movs	r3, #0
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ae76:	460b      	mov	r3, r1
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	d009      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae7c:	4b77      	ldr	r3, [pc, #476]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae80:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8a:	4a74      	ldr	r2, [pc, #464]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ae9c:	633b      	str	r3, [r7, #48]	; 0x30
 800ae9e:	2300      	movs	r3, #0
 800aea0:	637b      	str	r3, [r7, #52]	; 0x34
 800aea2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aea6:	460b      	mov	r3, r1
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	d00a      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aeac:	4b6b      	ldr	r3, [pc, #428]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aeae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aeb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aebc:	4a67      	ldr	r2, [pc, #412]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aebe:	430b      	orrs	r3, r1
 800aec0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	2100      	movs	r1, #0
 800aecc:	62b9      	str	r1, [r7, #40]	; 0x28
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aed4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aed8:	460b      	mov	r3, r1
 800aeda:	4313      	orrs	r3, r2
 800aedc:	d011      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee2:	3308      	adds	r3, #8
 800aee4:	2100      	movs	r1, #0
 800aee6:	4618      	mov	r0, r3
 800aee8:	f001 faa0 	bl	800c42c <RCCEx_PLL2_Config>
 800aeec:	4603      	mov	r3, r0
 800aeee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aefa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aefe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800af02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	2100      	movs	r1, #0
 800af0c:	6239      	str	r1, [r7, #32]
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	627b      	str	r3, [r7, #36]	; 0x24
 800af14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800af18:	460b      	mov	r3, r1
 800af1a:	4313      	orrs	r3, r2
 800af1c:	d011      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af22:	3308      	adds	r3, #8
 800af24:	2101      	movs	r1, #1
 800af26:	4618      	mov	r0, r3
 800af28:	f001 fa80 	bl	800c42c <RCCEx_PLL2_Config>
 800af2c:	4603      	mov	r3, r0
 800af2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	2100      	movs	r1, #0
 800af4c:	61b9      	str	r1, [r7, #24]
 800af4e:	f003 0304 	and.w	r3, r3, #4
 800af52:	61fb      	str	r3, [r7, #28]
 800af54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af58:	460b      	mov	r3, r1
 800af5a:	4313      	orrs	r3, r2
 800af5c:	d011      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af62:	3308      	adds	r3, #8
 800af64:	2102      	movs	r1, #2
 800af66:	4618      	mov	r0, r3
 800af68:	f001 fa60 	bl	800c42c <RCCEx_PLL2_Config>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af76:	2b00      	cmp	r3, #0
 800af78:	d003      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800af82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	2100      	movs	r1, #0
 800af8c:	6139      	str	r1, [r7, #16]
 800af8e:	f003 0308 	and.w	r3, r3, #8
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af98:	460b      	mov	r3, r1
 800af9a:	4313      	orrs	r3, r2
 800af9c:	d011      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa2:	3328      	adds	r3, #40	; 0x28
 800afa4:	2100      	movs	r1, #0
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 faf2 	bl	800c590 <RCCEx_PLL3_Config>
 800afac:	4603      	mov	r3, r0
 800afae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800afb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d003      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800afc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	2100      	movs	r1, #0
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	f003 0310 	and.w	r3, r3, #16
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800afd8:	460b      	mov	r3, r1
 800afda:	4313      	orrs	r3, r2
 800afdc:	d011      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe2:	3328      	adds	r3, #40	; 0x28
 800afe4:	2101      	movs	r1, #1
 800afe6:	4618      	mov	r0, r3
 800afe8:	f001 fad2 	bl	800c590 <RCCEx_PLL3_Config>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800affe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	2100      	movs	r1, #0
 800b00c:	6039      	str	r1, [r7, #0]
 800b00e:	f003 0320 	and.w	r3, r3, #32
 800b012:	607b      	str	r3, [r7, #4]
 800b014:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b018:	460b      	mov	r3, r1
 800b01a:	4313      	orrs	r3, r2
 800b01c:	d011      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b022:	3328      	adds	r3, #40	; 0x28
 800b024:	2102      	movs	r1, #2
 800b026:	4618      	mov	r0, r3
 800b028:	f001 fab2 	bl	800c590 <RCCEx_PLL3_Config>
 800b02c:	4603      	mov	r3, r0
 800b02e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b03e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b042:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	e000      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
}
 800b050:	4618      	mov	r0, r3
 800b052:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b056:	46bd      	mov	sp, r7
 800b058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b05c:	58024400 	.word	0x58024400

0800b060 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b090      	sub	sp, #64	; 0x40
 800b064:	af00      	add	r7, sp, #0
 800b066:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b06e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b072:	430b      	orrs	r3, r1
 800b074:	f040 8094 	bne.w	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b078:	4b9e      	ldr	r3, [pc, #632]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b07a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b07c:	f003 0307 	and.w	r3, r3, #7
 800b080:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	2b04      	cmp	r3, #4
 800b086:	f200 8087 	bhi.w	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b08a:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b0a5 	.word	0x0800b0a5
 800b094:	0800b0cd 	.word	0x0800b0cd
 800b098:	0800b0f5 	.word	0x0800b0f5
 800b09c:	0800b191 	.word	0x0800b191
 800b0a0:	0800b11d 	.word	0x0800b11d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0a4:	4b93      	ldr	r3, [pc, #588]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0b0:	d108      	bne.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 f810 	bl	800c0dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0c0:	f000 bd45 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c8:	f000 bd41 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0cc:	4b89      	ldr	r3, [pc, #548]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0d8:	d108      	bne.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0da:	f107 0318 	add.w	r3, r7, #24
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 fd54 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0e8:	f000 bd31 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f0:	f000 bd2d 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0f4:	4b7f      	ldr	r3, [pc, #508]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b100:	d108      	bne.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b102:	f107 030c 	add.w	r3, r7, #12
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fe94 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b110:	f000 bd1d 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b114:	2300      	movs	r3, #0
 800b116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b118:	f000 bd19 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b11c:	4b75      	ldr	r3, [pc, #468]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b124:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b126:	4b73      	ldr	r3, [pc, #460]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 0304 	and.w	r3, r3, #4
 800b12e:	2b04      	cmp	r3, #4
 800b130:	d10c      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	2b00      	cmp	r3, #0
 800b136:	d109      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b138:	4b6e      	ldr	r3, [pc, #440]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	08db      	lsrs	r3, r3, #3
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	4a6d      	ldr	r2, [pc, #436]	; (800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b144:	fa22 f303 	lsr.w	r3, r2, r3
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b14a:	e01f      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b14c:	4b69      	ldr	r3, [pc, #420]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b158:	d106      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b160:	d102      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b162:	4b66      	ldr	r3, [pc, #408]	; (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b166:	e011      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b168:	4b62      	ldr	r3, [pc, #392]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b174:	d106      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b17c:	d102      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b17e:	4b60      	ldr	r3, [pc, #384]	; (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b180:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b182:	e003      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b188:	f000 bce1 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b18c:	f000 bcdf 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b190:	4b5c      	ldr	r3, [pc, #368]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b194:	f000 bcdb 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b198:	2300      	movs	r3, #0
 800b19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b19c:	f000 bcd7 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b1a8:	430b      	orrs	r3, r1
 800b1aa:	f040 80ad 	bne.w	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b1ae:	4b51      	ldr	r3, [pc, #324]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b1b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1be:	d056      	beq.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1c6:	f200 8090 	bhi.w	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	2bc0      	cmp	r3, #192	; 0xc0
 800b1ce:	f000 8088 	beq.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	2bc0      	cmp	r3, #192	; 0xc0
 800b1d6:	f200 8088 	bhi.w	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	2b80      	cmp	r3, #128	; 0x80
 800b1de:	d032      	beq.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e2:	2b80      	cmp	r3, #128	; 0x80
 800b1e4:	f200 8081 	bhi.w	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	2b40      	cmp	r3, #64	; 0x40
 800b1f2:	d014      	beq.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b1f4:	e079      	b.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1f6:	4b3f      	ldr	r3, [pc, #252]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b202:	d108      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 ff67 	bl	800c0dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b212:	f000 bc9c 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21a:	f000 bc98 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b21e:	4b35      	ldr	r3, [pc, #212]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b22a:	d108      	bne.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b22c:	f107 0318 	add.w	r3, r7, #24
 800b230:	4618      	mov	r0, r3
 800b232:	f000 fcab 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b23a:	f000 bc88 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b242:	f000 bc84 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b246:	4b2b      	ldr	r3, [pc, #172]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b24e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b252:	d108      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b254:	f107 030c 	add.w	r3, r7, #12
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 fdeb 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b262:	f000 bc74 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b26a:	f000 bc70 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b26e:	4b21      	ldr	r3, [pc, #132]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b276:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b278:	4b1e      	ldr	r3, [pc, #120]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 0304 	and.w	r3, r3, #4
 800b280:	2b04      	cmp	r3, #4
 800b282:	d10c      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b28a:	4b1a      	ldr	r3, [pc, #104]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	08db      	lsrs	r3, r3, #3
 800b290:	f003 0303 	and.w	r3, r3, #3
 800b294:	4a18      	ldr	r2, [pc, #96]	; (800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b296:	fa22 f303 	lsr.w	r3, r2, r3
 800b29a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b29c:	e01f      	b.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b29e:	4b15      	ldr	r3, [pc, #84]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2aa:	d106      	bne.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2b2:	d102      	bne.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2b4:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2b8:	e011      	b.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2ba:	4b0e      	ldr	r3, [pc, #56]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2c6:	d106      	bne.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ce:	d102      	bne.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2d0:	4b0b      	ldr	r3, [pc, #44]	; (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2d4:	e003      	b.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2da:	f000 bc38 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2de:	f000 bc36 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2e2:	4b08      	ldr	r3, [pc, #32]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e6:	f000 bc32 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ee:	f000 bc2e 	b.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2f2:	bf00      	nop
 800b2f4:	58024400 	.word	0x58024400
 800b2f8:	03d09000 	.word	0x03d09000
 800b2fc:	003d0900 	.word	0x003d0900
 800b300:	00989680 	.word	0x00989680
 800b304:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b30c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b310:	430b      	orrs	r3, r1
 800b312:	f040 809c 	bne.w	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b316:	4b9e      	ldr	r3, [pc, #632]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b31e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b326:	d054      	beq.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b32e:	f200 808b 	bhi.w	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b338:	f000 8083 	beq.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b342:	f200 8081 	bhi.w	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b34c:	d02f      	beq.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b354:	d878      	bhi.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d004      	beq.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b362:	d012      	beq.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b364:	e070      	b.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b366:	4b8a      	ldr	r3, [pc, #552]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b372:	d107      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 feaf 	bl	800c0dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b382:	e3e4      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b388:	e3e1      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b38a:	4b81      	ldr	r3, [pc, #516]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b396:	d107      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b398:	f107 0318 	add.w	r3, r7, #24
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fbf5 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3a6:	e3d2      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ac:	e3cf      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3ae:	4b78      	ldr	r3, [pc, #480]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ba:	d107      	bne.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3bc:	f107 030c 	add.w	r3, r7, #12
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fd37 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ca:	e3c0      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d0:	e3bd      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3d2:	4b6f      	ldr	r3, [pc, #444]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3dc:	4b6c      	ldr	r3, [pc, #432]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d10c      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ee:	4b68      	ldr	r3, [pc, #416]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	08db      	lsrs	r3, r3, #3
 800b3f4:	f003 0303 	and.w	r3, r3, #3
 800b3f8:	4a66      	ldr	r2, [pc, #408]	; (800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b400:	e01e      	b.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b402:	4b63      	ldr	r3, [pc, #396]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b40a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b40e:	d106      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b416:	d102      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b418:	4b5f      	ldr	r3, [pc, #380]	; (800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b41a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b41c:	e010      	b.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b41e:	4b5c      	ldr	r3, [pc, #368]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b42a:	d106      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b432:	d102      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b434:	4b59      	ldr	r3, [pc, #356]	; (800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b438:	e002      	b.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b43e:	e386      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b440:	e385      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b442:	4b57      	ldr	r3, [pc, #348]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b446:	e382      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b448:	2300      	movs	r3, #0
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b44c:	e37f      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b44e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b452:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b456:	430b      	orrs	r3, r1
 800b458:	f040 80a7 	bne.w	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b45c:	4b4c      	ldr	r3, [pc, #304]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b460:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b464:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b46c:	d055      	beq.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b474:	f200 8096 	bhi.w	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b47e:	f000 8084 	beq.w	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b488:	f200 808c 	bhi.w	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b492:	d030      	beq.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b49a:	f200 8083 	bhi.w	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d004      	beq.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4aa:	d012      	beq.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b4ac:	e07a      	b.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4ae:	4b38      	ldr	r3, [pc, #224]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ba:	d107      	bne.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 fe0b 	bl	800c0dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ca:	e340      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d0:	e33d      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4d2:	4b2f      	ldr	r3, [pc, #188]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4de:	d107      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e0:	f107 0318 	add.w	r3, r7, #24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fb51 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ee:	e32e      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f4:	e32b      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4f6:	4b26      	ldr	r3, [pc, #152]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b502:	d107      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b504:	f107 030c 	add.w	r3, r7, #12
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 fc93 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b512:	e31c      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b518:	e319      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b51a:	4b1d      	ldr	r3, [pc, #116]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b51e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b522:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b524:	4b1a      	ldr	r3, [pc, #104]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d10c      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b532:	2b00      	cmp	r3, #0
 800b534:	d109      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b536:	4b16      	ldr	r3, [pc, #88]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	08db      	lsrs	r3, r3, #3
 800b53c:	f003 0303 	and.w	r3, r3, #3
 800b540:	4a14      	ldr	r2, [pc, #80]	; (800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b542:	fa22 f303 	lsr.w	r3, r2, r3
 800b546:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b548:	e01e      	b.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b54a:	4b11      	ldr	r3, [pc, #68]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b556:	d106      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b55e:	d102      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b560:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b562:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b564:	e010      	b.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b566:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b56e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b572:	d106      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b57a:	d102      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b57e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b580:	e002      	b.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b586:	e2e2      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b588:	e2e1      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b58a:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b58e:	e2de      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b590:	58024400 	.word	0x58024400
 800b594:	03d09000 	.word	0x03d09000
 800b598:	003d0900 	.word	0x003d0900
 800b59c:	00989680 	.word	0x00989680
 800b5a0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a8:	e2d1      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b5aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b5b2:	430b      	orrs	r3, r1
 800b5b4:	f040 809c 	bne.w	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b5b8:	4b93      	ldr	r3, [pc, #588]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b5c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5c8:	d054      	beq.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5d0:	f200 808b 	bhi.w	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5da:	f000 8083 	beq.w	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5e4:	f200 8081 	bhi.w	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ee:	d02f      	beq.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5f6:	d878      	bhi.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d004      	beq.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b604:	d012      	beq.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b606:	e070      	b.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b608:	4b7f      	ldr	r3, [pc, #508]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b614:	d107      	bne.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fd5e 	bl	800c0dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b624:	e293      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b62a:	e290      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b62c:	4b76      	ldr	r3, [pc, #472]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b638:	d107      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b63a:	f107 0318 	add.w	r3, r7, #24
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 faa4 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b648:	e281      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b64e:	e27e      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b650:	4b6d      	ldr	r3, [pc, #436]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b65c:	d107      	bne.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b65e:	f107 030c 	add.w	r3, r7, #12
 800b662:	4618      	mov	r0, r3
 800b664:	f000 fbe6 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b66c:	e26f      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b672:	e26c      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b674:	4b64      	ldr	r3, [pc, #400]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b67c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b67e:	4b62      	ldr	r3, [pc, #392]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0304 	and.w	r3, r3, #4
 800b686:	2b04      	cmp	r3, #4
 800b688:	d10c      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d109      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b690:	4b5d      	ldr	r3, [pc, #372]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	08db      	lsrs	r3, r3, #3
 800b696:	f003 0303 	and.w	r3, r3, #3
 800b69a:	4a5c      	ldr	r2, [pc, #368]	; (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b69c:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6a2:	e01e      	b.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6a4:	4b58      	ldr	r3, [pc, #352]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6b0:	d106      	bne.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6b8:	d102      	bne.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6ba:	4b55      	ldr	r3, [pc, #340]	; (800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6be:	e010      	b.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6c0:	4b51      	ldr	r3, [pc, #324]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6cc:	d106      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6d4:	d102      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6d6:	4b4f      	ldr	r3, [pc, #316]	; (800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6da:	e002      	b.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b6e0:	e235      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6e2:	e234      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6e4:	4b4c      	ldr	r3, [pc, #304]	; (800b818 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e8:	e231      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ee:	e22e      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6f4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	f040 808f 	bne.w	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b6fe:	4b42      	ldr	r3, [pc, #264]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b702:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b706:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b70e:	d06b      	beq.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b716:	d874      	bhi.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b71e:	d056      	beq.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b726:	d86c      	bhi.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b72e:	d03b      	beq.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b736:	d864      	bhi.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b73e:	d021      	beq.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b746:	d85c      	bhi.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d004      	beq.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b754:	d004      	beq.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b756:	e054      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b758:	f7fe fa30 	bl	8009bbc <HAL_RCC_GetPCLK1Freq>
 800b75c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b75e:	e1f6      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b760:	4b29      	ldr	r3, [pc, #164]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b76c:	d107      	bne.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b76e:	f107 0318 	add.w	r3, r7, #24
 800b772:	4618      	mov	r0, r3
 800b774:	f000 fa0a 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b77c:	e1e7      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b782:	e1e4      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b784:	4b20      	ldr	r3, [pc, #128]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b78c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b790:	d107      	bne.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b792:	f107 030c 	add.w	r3, r7, #12
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fb4c 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7a0:	e1d5      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7a6:	e1d2      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7a8:	4b17      	ldr	r3, [pc, #92]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0304 	and.w	r3, r3, #4
 800b7b0:	2b04      	cmp	r3, #4
 800b7b2:	d109      	bne.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7b4:	4b14      	ldr	r3, [pc, #80]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	08db      	lsrs	r3, r3, #3
 800b7ba:	f003 0303 	and.w	r3, r3, #3
 800b7be:	4a13      	ldr	r2, [pc, #76]	; (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c6:	e1c2      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7cc:	e1bf      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b7ce:	4b0e      	ldr	r3, [pc, #56]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7da:	d102      	bne.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b7dc:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7e0:	e1b5      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e6:	e1b2      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b7e8:	4b07      	ldr	r3, [pc, #28]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7f4:	d102      	bne.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b7f6:	4b07      	ldr	r3, [pc, #28]	; (800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7fa:	e1a8      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b800:	e1a5      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b806:	e1a2      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b808:	58024400 	.word	0x58024400
 800b80c:	03d09000 	.word	0x03d09000
 800b810:	003d0900 	.word	0x003d0900
 800b814:	00989680 	.word	0x00989680
 800b818:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b81c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b820:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b824:	430b      	orrs	r3, r1
 800b826:	d173      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b828:	4b9c      	ldr	r3, [pc, #624]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b82a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b82c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b830:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b838:	d02f      	beq.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b840:	d863      	bhi.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	2b00      	cmp	r3, #0
 800b846:	d004      	beq.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b84e:	d012      	beq.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b850:	e05b      	b.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b852:	4b92      	ldr	r3, [pc, #584]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b85a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b85e:	d107      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b860:	f107 0318 	add.w	r3, r7, #24
 800b864:	4618      	mov	r0, r3
 800b866:	f000 f991 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b86e:	e16e      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b874:	e16b      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b876:	4b89      	ldr	r3, [pc, #548]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b87e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b882:	d107      	bne.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b884:	f107 030c 	add.w	r3, r7, #12
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fad3 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b892:	e15c      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b898:	e159      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b89a:	4b80      	ldr	r3, [pc, #512]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b89c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b89e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8a4:	4b7d      	ldr	r3, [pc, #500]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0304 	and.w	r3, r3, #4
 800b8ac:	2b04      	cmp	r3, #4
 800b8ae:	d10c      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d109      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8b6:	4b79      	ldr	r3, [pc, #484]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	08db      	lsrs	r3, r3, #3
 800b8bc:	f003 0303 	and.w	r3, r3, #3
 800b8c0:	4a77      	ldr	r2, [pc, #476]	; (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c8:	e01e      	b.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8ca:	4b74      	ldr	r3, [pc, #464]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8d6:	d106      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8de:	d102      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8e0:	4b70      	ldr	r3, [pc, #448]	; (800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8e4:	e010      	b.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8e6:	4b6d      	ldr	r3, [pc, #436]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8f2:	d106      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8fa:	d102      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8fc:	4b6a      	ldr	r3, [pc, #424]	; (800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b900:	e002      	b.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b906:	e122      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b908:	e121      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b90e:	e11e      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b914:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b918:	430b      	orrs	r3, r1
 800b91a:	d133      	bne.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b91c:	4b5f      	ldr	r3, [pc, #380]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b924:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d004      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b932:	d012      	beq.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b934:	e023      	b.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b936:	4b59      	ldr	r3, [pc, #356]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b93e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b942:	d107      	bne.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fbc7 	bl	800c0dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b952:	e0fc      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b958:	e0f9      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b95a:	4b50      	ldr	r3, [pc, #320]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b966:	d107      	bne.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b968:	f107 0318 	add.w	r3, r7, #24
 800b96c:	4618      	mov	r0, r3
 800b96e:	f000 f90d 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b976:	e0ea      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b978:	2300      	movs	r3, #0
 800b97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b97c:	e0e7      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b982:	e0e4      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b984:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b988:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b98c:	430b      	orrs	r3, r1
 800b98e:	f040 808d 	bne.w	800baac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b992:	4b42      	ldr	r3, [pc, #264]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b996:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b99a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9a2:	d06b      	beq.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9aa:	d874      	bhi.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9b2:	d056      	beq.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ba:	d86c      	bhi.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9c2:	d03b      	beq.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9ca:	d864      	bhi.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9d2:	d021      	beq.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9da:	d85c      	bhi.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d004      	beq.n	800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9e8:	d004      	beq.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b9ea:	e054      	b.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b9ec:	f000 f8b8 	bl	800bb60 <HAL_RCCEx_GetD3PCLK1Freq>
 800b9f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9f2:	e0ac      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9f4:	4b29      	ldr	r3, [pc, #164]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba00:	d107      	bne.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba02:	f107 0318 	add.w	r3, r7, #24
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 f8c0 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba10:	e09d      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba16:	e09a      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba18:	4b20      	ldr	r3, [pc, #128]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba24:	d107      	bne.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba26:	f107 030c 	add.w	r3, r7, #12
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fa02 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba34:	e08b      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba3a:	e088      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba3c:	4b17      	ldr	r3, [pc, #92]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 0304 	and.w	r3, r3, #4
 800ba44:	2b04      	cmp	r3, #4
 800ba46:	d109      	bne.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba48:	4b14      	ldr	r3, [pc, #80]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	08db      	lsrs	r3, r3, #3
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	4a13      	ldr	r2, [pc, #76]	; (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ba54:	fa22 f303 	lsr.w	r3, r2, r3
 800ba58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba5a:	e078      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba60:	e075      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba62:	4b0e      	ldr	r3, [pc, #56]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba6e:	d102      	bne.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ba70:	4b0c      	ldr	r3, [pc, #48]	; (800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba74:	e06b      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba7a:	e068      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba7c:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba88:	d102      	bne.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ba8a:	4b07      	ldr	r3, [pc, #28]	; (800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ba8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba8e:	e05e      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba90:	2300      	movs	r3, #0
 800ba92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba94:	e05b      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba9a:	e058      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba9c:	58024400 	.word	0x58024400
 800baa0:	03d09000 	.word	0x03d09000
 800baa4:	003d0900 	.word	0x003d0900
 800baa8:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800baac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bab4:	430b      	orrs	r3, r1
 800bab6:	d148      	bne.n	800bb4a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bab8:	4b27      	ldr	r3, [pc, #156]	; (800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800baba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800babc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bac0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bac8:	d02a      	beq.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bad0:	d838      	bhi.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d004      	beq.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bade:	d00d      	beq.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bae0:	e030      	b.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bae2:	4b1d      	ldr	r3, [pc, #116]	; (800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baee:	d102      	bne.n	800baf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800baf0:	4b1a      	ldr	r3, [pc, #104]	; (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800baf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baf4:	e02b      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bafa:	e028      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bafc:	4b16      	ldr	r3, [pc, #88]	; (800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb08:	d107      	bne.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 fae4 	bl	800c0dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb18:	e019      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb1e:	e016      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb20:	4b0d      	ldr	r3, [pc, #52]	; (800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb2c:	d107      	bne.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb2e:	f107 0318 	add.w	r3, r7, #24
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f82a 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb3c:	e007      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb42:	e004      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bb44:	2300      	movs	r3, #0
 800bb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb48:	e001      	b.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3740      	adds	r7, #64	; 0x40
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	58024400 	.word	0x58024400
 800bb5c:	00989680 	.word	0x00989680

0800bb60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb64:	f7fd fffa 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	4b06      	ldr	r3, [pc, #24]	; (800bb84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	091b      	lsrs	r3, r3, #4
 800bb70:	f003 0307 	and.w	r3, r3, #7
 800bb74:	4904      	ldr	r1, [pc, #16]	; (800bb88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb76:	5ccb      	ldrb	r3, [r1, r3]
 800bb78:	f003 031f 	and.w	r3, r3, #31
 800bb7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	58024400 	.word	0x58024400
 800bb88:	0801de74 	.word	0x0801de74

0800bb8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b089      	sub	sp, #36	; 0x24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb94:	4ba1      	ldr	r3, [pc, #644]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb98:	f003 0303 	and.w	r3, r3, #3
 800bb9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bb9e:	4b9f      	ldr	r3, [pc, #636]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba2:	0b1b      	lsrs	r3, r3, #12
 800bba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bba8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bbaa:	4b9c      	ldr	r3, [pc, #624]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbae:	091b      	lsrs	r3, r3, #4
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bbb6:	4b99      	ldr	r3, [pc, #612]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbba:	08db      	lsrs	r3, r3, #3
 800bbbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	fb02 f303 	mul.w	r3, r2, r3
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8111 	beq.w	800bdfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	f000 8083 	beq.w	800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	f200 80a1 	bhi.w	800bd2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d056      	beq.n	800bca4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bbf6:	e099      	b.n	800bd2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbf8:	4b88      	ldr	r3, [pc, #544]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 0320 	and.w	r3, r3, #32
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d02d      	beq.n	800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc04:	4b85      	ldr	r3, [pc, #532]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	08db      	lsrs	r3, r3, #3
 800bc0a:	f003 0303 	and.w	r3, r3, #3
 800bc0e:	4a84      	ldr	r2, [pc, #528]	; (800be20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc10:	fa22 f303 	lsr.w	r3, r2, r3
 800bc14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	ee07 3a90 	vmov	s15, r3
 800bc1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	ee07 3a90 	vmov	s15, r3
 800bc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc2e:	4b7b      	ldr	r3, [pc, #492]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc36:	ee07 3a90 	vmov	s15, r3
 800bc3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc5e:	e087      	b.n	800bd70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc72:	4b6a      	ldr	r3, [pc, #424]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc7a:	ee07 3a90 	vmov	s15, r3
 800bc7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bca2:	e065      	b.n	800bd70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb6:	4b59      	ldr	r3, [pc, #356]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bce6:	e043      	b.n	800bd70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bcf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcfa:	4b48      	ldr	r3, [pc, #288]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd2a:	e021      	b.n	800bd70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3e:	4b37      	ldr	r3, [pc, #220]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bd70:	4b2a      	ldr	r3, [pc, #168]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd74:	0a5b      	lsrs	r3, r3, #9
 800bd76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd96:	ee17 2a90 	vmov	r2, s15
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bd9e:	4b1f      	ldr	r3, [pc, #124]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	0c1b      	lsrs	r3, r3, #16
 800bda4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc4:	ee17 2a90 	vmov	r2, s15
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bdcc:	4b13      	ldr	r3, [pc, #76]	; (800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	0e1b      	lsrs	r3, r3, #24
 800bdd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bde2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bde6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdf2:	ee17 2a90 	vmov	r2, s15
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bdfa:	e008      	b.n	800be0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	609a      	str	r2, [r3, #8]
}
 800be0e:	bf00      	nop
 800be10:	3724      	adds	r7, #36	; 0x24
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	58024400 	.word	0x58024400
 800be20:	03d09000 	.word	0x03d09000
 800be24:	46000000 	.word	0x46000000
 800be28:	4c742400 	.word	0x4c742400
 800be2c:	4a742400 	.word	0x4a742400
 800be30:	4b189680 	.word	0x4b189680

0800be34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be34:	b480      	push	{r7}
 800be36:	b089      	sub	sp, #36	; 0x24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be3c:	4ba1      	ldr	r3, [pc, #644]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be40:	f003 0303 	and.w	r3, r3, #3
 800be44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be46:	4b9f      	ldr	r3, [pc, #636]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4a:	0d1b      	lsrs	r3, r3, #20
 800be4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be52:	4b9c      	ldr	r3, [pc, #624]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be56:	0a1b      	lsrs	r3, r3, #8
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800be5e:	4b99      	ldr	r3, [pc, #612]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be62:	08db      	lsrs	r3, r3, #3
 800be64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	fb02 f303 	mul.w	r3, r2, r3
 800be6e:	ee07 3a90 	vmov	s15, r3
 800be72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 8111 	beq.w	800c0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	2b02      	cmp	r3, #2
 800be86:	f000 8083 	beq.w	800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	f200 80a1 	bhi.w	800bfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d003      	beq.n	800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d056      	beq.n	800bf4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be9e:	e099      	b.n	800bfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bea0:	4b88      	ldr	r3, [pc, #544]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 0320 	and.w	r3, r3, #32
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d02d      	beq.n	800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beac:	4b85      	ldr	r3, [pc, #532]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	08db      	lsrs	r3, r3, #3
 800beb2:	f003 0303 	and.w	r3, r3, #3
 800beb6:	4a84      	ldr	r2, [pc, #528]	; (800c0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800beb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bebc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	ee07 3a90 	vmov	s15, r3
 800bec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	ee07 3a90 	vmov	s15, r3
 800bece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bed6:	4b7b      	ldr	r3, [pc, #492]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee6:	ed97 6a03 	vldr	s12, [r7, #12]
 800beea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800befa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800befe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf06:	e087      	b.n	800c018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	ee07 3a90 	vmov	s15, r3
 800bf0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf1a:	4b6a      	ldr	r3, [pc, #424]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf22:	ee07 3a90 	vmov	s15, r3
 800bf26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf4a:	e065      	b.n	800c018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	ee07 3a90 	vmov	s15, r3
 800bf52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf5e:	4b59      	ldr	r3, [pc, #356]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf72:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf8e:	e043      	b.n	800c018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	ee07 3a90 	vmov	s15, r3
 800bf96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa2:	4b48      	ldr	r3, [pc, #288]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfd2:	e021      	b.n	800c018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe6:	4b37      	ldr	r3, [pc, #220]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bffa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c016:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c018:	4b2a      	ldr	r3, [pc, #168]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01c:	0a5b      	lsrs	r3, r3, #9
 800c01e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c022:	ee07 3a90 	vmov	s15, r3
 800c026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c02e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c032:	edd7 6a07 	vldr	s13, [r7, #28]
 800c036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c03a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c03e:	ee17 2a90 	vmov	r2, s15
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c046:	4b1f      	ldr	r3, [pc, #124]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04a:	0c1b      	lsrs	r3, r3, #16
 800c04c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c050:	ee07 3a90 	vmov	s15, r3
 800c054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c05c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c060:	edd7 6a07 	vldr	s13, [r7, #28]
 800c064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c06c:	ee17 2a90 	vmov	r2, s15
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c074:	4b13      	ldr	r3, [pc, #76]	; (800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c078:	0e1b      	lsrs	r3, r3, #24
 800c07a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c07e:	ee07 3a90 	vmov	s15, r3
 800c082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c08a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c08e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c09a:	ee17 2a90 	vmov	r2, s15
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c0a2:	e008      	b.n	800c0b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	609a      	str	r2, [r3, #8]
}
 800c0b6:	bf00      	nop
 800c0b8:	3724      	adds	r7, #36	; 0x24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	58024400 	.word	0x58024400
 800c0c8:	03d09000 	.word	0x03d09000
 800c0cc:	46000000 	.word	0x46000000
 800c0d0:	4c742400 	.word	0x4c742400
 800c0d4:	4a742400 	.word	0x4a742400
 800c0d8:	4b189680 	.word	0x4b189680

0800c0dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b089      	sub	sp, #36	; 0x24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0e4:	4ba0      	ldr	r3, [pc, #640]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e8:	f003 0303 	and.w	r3, r3, #3
 800c0ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c0ee:	4b9e      	ldr	r3, [pc, #632]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f2:	091b      	lsrs	r3, r3, #4
 800c0f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c0fa:	4b9b      	ldr	r3, [pc, #620]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c104:	4b98      	ldr	r3, [pc, #608]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c108:	08db      	lsrs	r3, r3, #3
 800c10a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	fb02 f303 	mul.w	r3, r2, r3
 800c114:	ee07 3a90 	vmov	s15, r3
 800c118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c11c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 8111 	beq.w	800c34a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	f000 8083 	beq.w	800c236 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	2b02      	cmp	r3, #2
 800c134:	f200 80a1 	bhi.w	800c27a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	2b01      	cmp	r3, #1
 800c142:	d056      	beq.n	800c1f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c144:	e099      	b.n	800c27a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c146:	4b88      	ldr	r3, [pc, #544]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0320 	and.w	r3, r3, #32
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d02d      	beq.n	800c1ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c152:	4b85      	ldr	r3, [pc, #532]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	08db      	lsrs	r3, r3, #3
 800c158:	f003 0303 	and.w	r3, r3, #3
 800c15c:	4a83      	ldr	r2, [pc, #524]	; (800c36c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c15e:	fa22 f303 	lsr.w	r3, r2, r3
 800c162:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	ee07 3a90 	vmov	s15, r3
 800c174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c17c:	4b7a      	ldr	r3, [pc, #488]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c184:	ee07 3a90 	vmov	s15, r3
 800c188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c18c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c190:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c19c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c1ac:	e087      	b.n	800c2be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	ee07 3a90 	vmov	s15, r3
 800c1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c374 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1c0:	4b69      	ldr	r3, [pc, #420]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c8:	ee07 3a90 	vmov	s15, r3
 800c1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1f0:	e065      	b.n	800c2be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	ee07 3a90 	vmov	s15, r3
 800c1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c378 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c204:	4b58      	ldr	r3, [pc, #352]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c20c:	ee07 3a90 	vmov	s15, r3
 800c210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c214:	ed97 6a03 	vldr	s12, [r7, #12]
 800c218:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c21c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c230:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c234:	e043      	b.n	800c2be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	ee07 3a90 	vmov	s15, r3
 800c23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c240:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c248:	4b47      	ldr	r3, [pc, #284]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c250:	ee07 3a90 	vmov	s15, r3
 800c254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c258:	ed97 6a03 	vldr	s12, [r7, #12]
 800c25c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c26c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c270:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c274:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c278:	e021      	b.n	800c2be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	ee07 3a90 	vmov	s15, r3
 800c280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c284:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c374 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c28c:	4b36      	ldr	r3, [pc, #216]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c294:	ee07 3a90 	vmov	s15, r3
 800c298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c29c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c370 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c2be:	4b2a      	ldr	r3, [pc, #168]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c2:	0a5b      	lsrs	r3, r3, #9
 800c2c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c8:	ee07 3a90 	vmov	s15, r3
 800c2cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2e4:	ee17 2a90 	vmov	r2, s15
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c2ec:	4b1e      	ldr	r3, [pc, #120]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f0:	0c1b      	lsrs	r3, r3, #16
 800c2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f6:	ee07 3a90 	vmov	s15, r3
 800c2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c302:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c306:	edd7 6a07 	vldr	s13, [r7, #28]
 800c30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c30e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c312:	ee17 2a90 	vmov	r2, s15
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c31a:	4b13      	ldr	r3, [pc, #76]	; (800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31e:	0e1b      	lsrs	r3, r3, #24
 800c320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c324:	ee07 3a90 	vmov	s15, r3
 800c328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c330:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c334:	edd7 6a07 	vldr	s13, [r7, #28]
 800c338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c340:	ee17 2a90 	vmov	r2, s15
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c348:	e008      	b.n	800c35c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	609a      	str	r2, [r3, #8]
}
 800c35c:	bf00      	nop
 800c35e:	3724      	adds	r7, #36	; 0x24
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	58024400 	.word	0x58024400
 800c36c:	03d09000 	.word	0x03d09000
 800c370:	46000000 	.word	0x46000000
 800c374:	4c742400 	.word	0x4c742400
 800c378:	4a742400 	.word	0x4a742400
 800c37c:	4b189680 	.word	0x4b189680

0800c380 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800c388:	4b26      	ldr	r3, [pc, #152]	; (800c424 <HAL_RCCEx_CRSConfig+0xa4>)
 800c38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c38e:	4a25      	ldr	r2, [pc, #148]	; (800c424 <HAL_RCCEx_CRSConfig+0xa4>)
 800c390:	f043 0302 	orr.w	r3, r3, #2
 800c394:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800c398:	4b22      	ldr	r3, [pc, #136]	; (800c424 <HAL_RCCEx_CRSConfig+0xa4>)
 800c39a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c39e:	4a21      	ldr	r2, [pc, #132]	; (800c424 <HAL_RCCEx_CRSConfig+0xa4>)
 800c3a0:	f023 0302 	bic.w	r3, r3, #2
 800c3a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800c3a8:	f7f6 ff50 	bl	800324c <HAL_GetREVID>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	f241 0203 	movw	r2, #4099	; 0x1003
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d80b      	bhi.n	800c3ce <HAL_RCCEx_CRSConfig+0x4e>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3be:	d106      	bne.n	800c3ce <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	60fb      	str	r3, [r7, #12]
 800c3cc:	e008      	b.n	800c3e0 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	041b      	lsls	r3, r3, #16
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800c3f6:	4a0c      	ldr	r2, [pc, #48]	; (800c428 <HAL_RCCEx_CRSConfig+0xa8>)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800c3fc:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <HAL_RCCEx_CRSConfig+0xa8>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	4907      	ldr	r1, [pc, #28]	; (800c428 <HAL_RCCEx_CRSConfig+0xa8>)
 800c40c:	4313      	orrs	r3, r2
 800c40e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800c410:	4b05      	ldr	r3, [pc, #20]	; (800c428 <HAL_RCCEx_CRSConfig+0xa8>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a04      	ldr	r2, [pc, #16]	; (800c428 <HAL_RCCEx_CRSConfig+0xa8>)
 800c416:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c41a:	6013      	str	r3, [r2, #0]
}
 800c41c:	bf00      	nop
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	58024400 	.word	0x58024400
 800c428:	40008400 	.word	0x40008400

0800c42c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c43a:	4b53      	ldr	r3, [pc, #332]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43e:	f003 0303 	and.w	r3, r3, #3
 800c442:	2b03      	cmp	r3, #3
 800c444:	d101      	bne.n	800c44a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	e099      	b.n	800c57e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c44a:	4b4f      	ldr	r3, [pc, #316]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a4e      	ldr	r2, [pc, #312]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c450:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c456:	f7f6 fec9 	bl	80031ec <HAL_GetTick>
 800c45a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c45c:	e008      	b.n	800c470 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c45e:	f7f6 fec5 	bl	80031ec <HAL_GetTick>
 800c462:	4602      	mov	r2, r0
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d901      	bls.n	800c470 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e086      	b.n	800c57e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c470:	4b45      	ldr	r3, [pc, #276]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1f0      	bne.n	800c45e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c47c:	4b42      	ldr	r3, [pc, #264]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c480:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	031b      	lsls	r3, r3, #12
 800c48a:	493f      	ldr	r1, [pc, #252]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c48c:	4313      	orrs	r3, r2
 800c48e:	628b      	str	r3, [r1, #40]	; 0x28
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	3b01      	subs	r3, #1
 800c496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	025b      	lsls	r3, r3, #9
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	431a      	orrs	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	041b      	lsls	r3, r3, #16
 800c4ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	061b      	lsls	r3, r3, #24
 800c4bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c4c0:	4931      	ldr	r1, [pc, #196]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c4c6:	4b30      	ldr	r3, [pc, #192]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	492d      	ldr	r1, [pc, #180]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c4d8:	4b2b      	ldr	r3, [pc, #172]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	f023 0220 	bic.w	r2, r3, #32
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	4928      	ldr	r1, [pc, #160]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c4ea:	4b27      	ldr	r3, [pc, #156]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ee:	4a26      	ldr	r2, [pc, #152]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c4f0:	f023 0310 	bic.w	r3, r3, #16
 800c4f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c4f6:	4b24      	ldr	r3, [pc, #144]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c4f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4fa:	4b24      	ldr	r3, [pc, #144]	; (800c58c <RCCEx_PLL2_Config+0x160>)
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	69d2      	ldr	r2, [r2, #28]
 800c502:	00d2      	lsls	r2, r2, #3
 800c504:	4920      	ldr	r1, [pc, #128]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c506:	4313      	orrs	r3, r2
 800c508:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c50a:	4b1f      	ldr	r3, [pc, #124]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50e:	4a1e      	ldr	r2, [pc, #120]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c510:	f043 0310 	orr.w	r3, r3, #16
 800c514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d106      	bne.n	800c52a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c51c:	4b1a      	ldr	r3, [pc, #104]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c520:	4a19      	ldr	r2, [pc, #100]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c526:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c528:	e00f      	b.n	800c54a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d106      	bne.n	800c53e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c530:	4b15      	ldr	r3, [pc, #84]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c534:	4a14      	ldr	r2, [pc, #80]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c53a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c53c:	e005      	b.n	800c54a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c53e:	4b12      	ldr	r3, [pc, #72]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	4a11      	ldr	r2, [pc, #68]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c548:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c54a:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a0e      	ldr	r2, [pc, #56]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c556:	f7f6 fe49 	bl	80031ec <HAL_GetTick>
 800c55a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c55c:	e008      	b.n	800c570 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c55e:	f7f6 fe45 	bl	80031ec <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d901      	bls.n	800c570 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e006      	b.n	800c57e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c570:	4b05      	ldr	r3, [pc, #20]	; (800c588 <RCCEx_PLL2_Config+0x15c>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0f0      	beq.n	800c55e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	58024400 	.word	0x58024400
 800c58c:	ffff0007 	.word	0xffff0007

0800c590 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c59e:	4b53      	ldr	r3, [pc, #332]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a2:	f003 0303 	and.w	r3, r3, #3
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d101      	bne.n	800c5ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e099      	b.n	800c6e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c5ae:	4b4f      	ldr	r3, [pc, #316]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a4e      	ldr	r2, [pc, #312]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c5b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ba:	f7f6 fe17 	bl	80031ec <HAL_GetTick>
 800c5be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c5c0:	e008      	b.n	800c5d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c5c2:	f7f6 fe13 	bl	80031ec <HAL_GetTick>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d901      	bls.n	800c5d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e086      	b.n	800c6e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c5d4:	4b45      	ldr	r3, [pc, #276]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1f0      	bne.n	800c5c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c5e0:	4b42      	ldr	r3, [pc, #264]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	051b      	lsls	r3, r3, #20
 800c5ee:	493f      	ldr	r1, [pc, #252]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	628b      	str	r3, [r1, #40]	; 0x28
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	3b01      	subs	r3, #1
 800c604:	025b      	lsls	r3, r3, #9
 800c606:	b29b      	uxth	r3, r3
 800c608:	431a      	orrs	r2, r3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	3b01      	subs	r3, #1
 800c610:	041b      	lsls	r3, r3, #16
 800c612:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c616:	431a      	orrs	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	061b      	lsls	r3, r3, #24
 800c620:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c624:	4931      	ldr	r1, [pc, #196]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c626:	4313      	orrs	r3, r2
 800c628:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c62a:	4b30      	ldr	r3, [pc, #192]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	695b      	ldr	r3, [r3, #20]
 800c636:	492d      	ldr	r1, [pc, #180]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c638:	4313      	orrs	r3, r2
 800c63a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c63c:	4b2b      	ldr	r3, [pc, #172]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c640:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	4928      	ldr	r1, [pc, #160]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c64a:	4313      	orrs	r3, r2
 800c64c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c64e:	4b27      	ldr	r3, [pc, #156]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c652:	4a26      	ldr	r2, [pc, #152]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c65a:	4b24      	ldr	r3, [pc, #144]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c65e:	4b24      	ldr	r3, [pc, #144]	; (800c6f0 <RCCEx_PLL3_Config+0x160>)
 800c660:	4013      	ands	r3, r2
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	69d2      	ldr	r2, [r2, #28]
 800c666:	00d2      	lsls	r2, r2, #3
 800c668:	4920      	ldr	r1, [pc, #128]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c66e:	4b1f      	ldr	r3, [pc, #124]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c672:	4a1e      	ldr	r2, [pc, #120]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d106      	bne.n	800c68e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c680:	4b1a      	ldr	r3, [pc, #104]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c684:	4a19      	ldr	r2, [pc, #100]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c686:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c68a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c68c:	e00f      	b.n	800c6ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d106      	bne.n	800c6a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c694:	4b15      	ldr	r3, [pc, #84]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c698:	4a14      	ldr	r2, [pc, #80]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c69a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c69e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6a0:	e005      	b.n	800c6ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c6a2:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a6:	4a11      	ldr	r2, [pc, #68]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c6a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c6ae:	4b0f      	ldr	r3, [pc, #60]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a0e      	ldr	r2, [pc, #56]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c6b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6ba:	f7f6 fd97 	bl	80031ec <HAL_GetTick>
 800c6be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6c0:	e008      	b.n	800c6d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6c2:	f7f6 fd93 	bl	80031ec <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d901      	bls.n	800c6d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e006      	b.n	800c6e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6d4:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <RCCEx_PLL3_Config+0x15c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0f0      	beq.n	800c6c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	58024400 	.word	0x58024400
 800c6f0:	ffff0007 	.word	0xffff0007

0800c6f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e049      	b.n	800c79a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d106      	bne.n	800c720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7f6 f836 	bl	800278c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2202      	movs	r2, #2
 800c724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3304      	adds	r3, #4
 800c730:	4619      	mov	r1, r3
 800c732:	4610      	mov	r0, r2
 800c734:	f000 f92e 	bl	800c994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
	...

0800c7a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d101      	bne.n	800c7c0 <HAL_TIM_ConfigClockSource+0x1c>
 800c7bc:	2302      	movs	r3, #2
 800c7be:	e0dc      	b.n	800c97a <HAL_TIM_ConfigClockSource+0x1d6>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	4b6a      	ldr	r3, [pc, #424]	; (800c984 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a64      	ldr	r2, [pc, #400]	; (800c988 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	f000 80a9 	beq.w	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c7fc:	4a62      	ldr	r2, [pc, #392]	; (800c988 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	f200 80ae 	bhi.w	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c804:	4a61      	ldr	r2, [pc, #388]	; (800c98c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c806:	4293      	cmp	r3, r2
 800c808:	f000 80a1 	beq.w	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c80c:	4a5f      	ldr	r2, [pc, #380]	; (800c98c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	f200 80a6 	bhi.w	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c814:	4a5e      	ldr	r2, [pc, #376]	; (800c990 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c816:	4293      	cmp	r3, r2
 800c818:	f000 8099 	beq.w	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c81c:	4a5c      	ldr	r2, [pc, #368]	; (800c990 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	f200 809e 	bhi.w	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c824:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c828:	f000 8091 	beq.w	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c82c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c830:	f200 8096 	bhi.w	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c838:	f000 8089 	beq.w	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c83c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c840:	f200 808e 	bhi.w	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c848:	d03e      	beq.n	800c8c8 <HAL_TIM_ConfigClockSource+0x124>
 800c84a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c84e:	f200 8087 	bhi.w	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c856:	f000 8086 	beq.w	800c966 <HAL_TIM_ConfigClockSource+0x1c2>
 800c85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c85e:	d87f      	bhi.n	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c860:	2b70      	cmp	r3, #112	; 0x70
 800c862:	d01a      	beq.n	800c89a <HAL_TIM_ConfigClockSource+0xf6>
 800c864:	2b70      	cmp	r3, #112	; 0x70
 800c866:	d87b      	bhi.n	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c868:	2b60      	cmp	r3, #96	; 0x60
 800c86a:	d050      	beq.n	800c90e <HAL_TIM_ConfigClockSource+0x16a>
 800c86c:	2b60      	cmp	r3, #96	; 0x60
 800c86e:	d877      	bhi.n	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c870:	2b50      	cmp	r3, #80	; 0x50
 800c872:	d03c      	beq.n	800c8ee <HAL_TIM_ConfigClockSource+0x14a>
 800c874:	2b50      	cmp	r3, #80	; 0x50
 800c876:	d873      	bhi.n	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c878:	2b40      	cmp	r3, #64	; 0x40
 800c87a:	d058      	beq.n	800c92e <HAL_TIM_ConfigClockSource+0x18a>
 800c87c:	2b40      	cmp	r3, #64	; 0x40
 800c87e:	d86f      	bhi.n	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c880:	2b30      	cmp	r3, #48	; 0x30
 800c882:	d064      	beq.n	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c884:	2b30      	cmp	r3, #48	; 0x30
 800c886:	d86b      	bhi.n	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c888:	2b20      	cmp	r3, #32
 800c88a:	d060      	beq.n	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c88c:	2b20      	cmp	r3, #32
 800c88e:	d867      	bhi.n	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
 800c890:	2b00      	cmp	r3, #0
 800c892:	d05c      	beq.n	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c894:	2b10      	cmp	r3, #16
 800c896:	d05a      	beq.n	800c94e <HAL_TIM_ConfigClockSource+0x1aa>
 800c898:	e062      	b.n	800c960 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c8aa:	f000 f98b 	bl	800cbc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c8bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	609a      	str	r2, [r3, #8]
      break;
 800c8c6:	e04f      	b.n	800c968 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c8d8:	f000 f974 	bl	800cbc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	689a      	ldr	r2, [r3, #8]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8ea:	609a      	str	r2, [r3, #8]
      break;
 800c8ec:	e03c      	b.n	800c968 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	f000 f8e4 	bl	800cac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2150      	movs	r1, #80	; 0x50
 800c906:	4618      	mov	r0, r3
 800c908:	f000 f93e 	bl	800cb88 <TIM_ITRx_SetConfig>
      break;
 800c90c:	e02c      	b.n	800c968 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c91a:	461a      	mov	r2, r3
 800c91c:	f000 f903 	bl	800cb26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2160      	movs	r1, #96	; 0x60
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f92e 	bl	800cb88 <TIM_ITRx_SetConfig>
      break;
 800c92c:	e01c      	b.n	800c968 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c93a:	461a      	mov	r2, r3
 800c93c:	f000 f8c4 	bl	800cac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2140      	movs	r1, #64	; 0x40
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f91e 	bl	800cb88 <TIM_ITRx_SetConfig>
      break;
 800c94c:	e00c      	b.n	800c968 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4619      	mov	r1, r3
 800c958:	4610      	mov	r0, r2
 800c95a:	f000 f915 	bl	800cb88 <TIM_ITRx_SetConfig>
      break;
 800c95e:	e003      	b.n	800c968 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	73fb      	strb	r3, [r7, #15]
      break;
 800c964:	e000      	b.n	800c968 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c978:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	ffceff88 	.word	0xffceff88
 800c988:	00100040 	.word	0x00100040
 800c98c:	00100030 	.word	0x00100030
 800c990:	00100020 	.word	0x00100020

0800c994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a40      	ldr	r2, [pc, #256]	; (800caa8 <TIM_Base_SetConfig+0x114>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d013      	beq.n	800c9d4 <TIM_Base_SetConfig+0x40>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9b2:	d00f      	beq.n	800c9d4 <TIM_Base_SetConfig+0x40>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a3d      	ldr	r2, [pc, #244]	; (800caac <TIM_Base_SetConfig+0x118>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00b      	beq.n	800c9d4 <TIM_Base_SetConfig+0x40>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a3c      	ldr	r2, [pc, #240]	; (800cab0 <TIM_Base_SetConfig+0x11c>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d007      	beq.n	800c9d4 <TIM_Base_SetConfig+0x40>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a3b      	ldr	r2, [pc, #236]	; (800cab4 <TIM_Base_SetConfig+0x120>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d003      	beq.n	800c9d4 <TIM_Base_SetConfig+0x40>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a3a      	ldr	r2, [pc, #232]	; (800cab8 <TIM_Base_SetConfig+0x124>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d108      	bne.n	800c9e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a2f      	ldr	r2, [pc, #188]	; (800caa8 <TIM_Base_SetConfig+0x114>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d01f      	beq.n	800ca2e <TIM_Base_SetConfig+0x9a>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f4:	d01b      	beq.n	800ca2e <TIM_Base_SetConfig+0x9a>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a2c      	ldr	r2, [pc, #176]	; (800caac <TIM_Base_SetConfig+0x118>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d017      	beq.n	800ca2e <TIM_Base_SetConfig+0x9a>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a2b      	ldr	r2, [pc, #172]	; (800cab0 <TIM_Base_SetConfig+0x11c>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d013      	beq.n	800ca2e <TIM_Base_SetConfig+0x9a>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a2a      	ldr	r2, [pc, #168]	; (800cab4 <TIM_Base_SetConfig+0x120>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d00f      	beq.n	800ca2e <TIM_Base_SetConfig+0x9a>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a29      	ldr	r2, [pc, #164]	; (800cab8 <TIM_Base_SetConfig+0x124>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d00b      	beq.n	800ca2e <TIM_Base_SetConfig+0x9a>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a28      	ldr	r2, [pc, #160]	; (800cabc <TIM_Base_SetConfig+0x128>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d007      	beq.n	800ca2e <TIM_Base_SetConfig+0x9a>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a27      	ldr	r2, [pc, #156]	; (800cac0 <TIM_Base_SetConfig+0x12c>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d003      	beq.n	800ca2e <TIM_Base_SetConfig+0x9a>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a26      	ldr	r2, [pc, #152]	; (800cac4 <TIM_Base_SetConfig+0x130>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d108      	bne.n	800ca40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a10      	ldr	r2, [pc, #64]	; (800caa8 <TIM_Base_SetConfig+0x114>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d00f      	beq.n	800ca8c <TIM_Base_SetConfig+0xf8>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a12      	ldr	r2, [pc, #72]	; (800cab8 <TIM_Base_SetConfig+0x124>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d00b      	beq.n	800ca8c <TIM_Base_SetConfig+0xf8>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a11      	ldr	r2, [pc, #68]	; (800cabc <TIM_Base_SetConfig+0x128>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d007      	beq.n	800ca8c <TIM_Base_SetConfig+0xf8>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a10      	ldr	r2, [pc, #64]	; (800cac0 <TIM_Base_SetConfig+0x12c>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d003      	beq.n	800ca8c <TIM_Base_SetConfig+0xf8>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a0f      	ldr	r2, [pc, #60]	; (800cac4 <TIM_Base_SetConfig+0x130>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d103      	bne.n	800ca94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	691a      	ldr	r2, [r3, #16]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	615a      	str	r2, [r3, #20]
}
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	40010000 	.word	0x40010000
 800caac:	40000400 	.word	0x40000400
 800cab0:	40000800 	.word	0x40000800
 800cab4:	40000c00 	.word	0x40000c00
 800cab8:	40010400 	.word	0x40010400
 800cabc:	40014000 	.word	0x40014000
 800cac0:	40014400 	.word	0x40014400
 800cac4:	40014800 	.word	0x40014800

0800cac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cac8:	b480      	push	{r7}
 800caca:	b087      	sub	sp, #28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6a1b      	ldr	r3, [r3, #32]
 800cad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	f023 0201 	bic.w	r2, r3, #1
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	699b      	ldr	r3, [r3, #24]
 800caea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800caf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	693a      	ldr	r2, [r7, #16]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f023 030a 	bic.w	r3, r3, #10
 800cb04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	697a      	ldr	r2, [r7, #20]
 800cb18:	621a      	str	r2, [r3, #32]
}
 800cb1a:	bf00      	nop
 800cb1c:	371c      	adds	r7, #28
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb26:	b480      	push	{r7}
 800cb28:	b087      	sub	sp, #28
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	60f8      	str	r0, [r7, #12]
 800cb2e:	60b9      	str	r1, [r7, #8]
 800cb30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6a1b      	ldr	r3, [r3, #32]
 800cb36:	f023 0210 	bic.w	r2, r3, #16
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	699b      	ldr	r3, [r3, #24]
 800cb42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6a1b      	ldr	r3, [r3, #32]
 800cb48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	031b      	lsls	r3, r3, #12
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	011b      	lsls	r3, r3, #4
 800cb68:	693a      	ldr	r2, [r7, #16]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	693a      	ldr	r2, [r7, #16]
 800cb78:	621a      	str	r2, [r3, #32]
}
 800cb7a:	bf00      	nop
 800cb7c:	371c      	adds	r7, #28
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
	...

0800cb88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	4b09      	ldr	r3, [pc, #36]	; (800cbc0 <TIM_ITRx_SetConfig+0x38>)
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cba0:	683a      	ldr	r2, [r7, #0]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	f043 0307 	orr.w	r3, r3, #7
 800cbaa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	609a      	str	r2, [r3, #8]
}
 800cbb2:	bf00      	nop
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	ffcfff8f 	.word	0xffcfff8f

0800cbc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
 800cbd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	021a      	lsls	r2, r3, #8
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	431a      	orrs	r2, r3
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	697a      	ldr	r2, [r7, #20]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	697a      	ldr	r2, [r7, #20]
 800cbf6:	609a      	str	r2, [r3, #8]
}
 800cbf8:	bf00      	nop
 800cbfa:	371c      	adds	r7, #28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d101      	bne.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc18:	2302      	movs	r3, #2
 800cc1a:	e06d      	b.n	800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2202      	movs	r2, #2
 800cc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a30      	ldr	r2, [pc, #192]	; (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d004      	beq.n	800cc50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a2f      	ldr	r2, [pc, #188]	; (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d108      	bne.n	800cc62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a20      	ldr	r2, [pc, #128]	; (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d022      	beq.n	800cccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc8e:	d01d      	beq.n	800cccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a1d      	ldr	r2, [pc, #116]	; (800cd0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d018      	beq.n	800cccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a1c      	ldr	r2, [pc, #112]	; (800cd10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d013      	beq.n	800cccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a1a      	ldr	r2, [pc, #104]	; (800cd14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d00e      	beq.n	800cccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a15      	ldr	r2, [pc, #84]	; (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d009      	beq.n	800cccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a16      	ldr	r2, [pc, #88]	; (800cd18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d004      	beq.n	800cccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a15      	ldr	r2, [pc, #84]	; (800cd1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d10c      	bne.n	800cce6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	40010000 	.word	0x40010000
 800cd08:	40010400 	.word	0x40010400
 800cd0c:	40000400 	.word	0x40000400
 800cd10:	40000800 	.word	0x40000800
 800cd14:	40000c00 	.word	0x40000c00
 800cd18:	40001800 	.word	0x40001800
 800cd1c:	40014000 	.word	0x40014000

0800cd20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d101      	bne.n	800cd32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e042      	b.n	800cdb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d106      	bne.n	800cd4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7f5 fd5b 	bl	8002800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2224      	movs	r2, #36	; 0x24
 800cd4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f022 0201 	bic.w	r2, r2, #1
 800cd60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f8ba 	bl	800cedc <UART_SetConfig>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d101      	bne.n	800cd72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e022      	b.n	800cdb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fe16 	bl	800d9ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	685a      	ldr	r2, [r3, #4]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	689a      	ldr	r2, [r3, #8]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f042 0201 	orr.w	r2, r2, #1
 800cdae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 fe9d 	bl	800daf0 <UART_CheckIdleState>
 800cdb6:	4603      	mov	r3, r0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08a      	sub	sp, #40	; 0x28
 800cdc4:	af02      	add	r7, sp, #8
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	603b      	str	r3, [r7, #0]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdd6:	2b20      	cmp	r3, #32
 800cdd8:	d17b      	bne.n	800ced2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <HAL_UART_Transmit+0x26>
 800cde0:	88fb      	ldrh	r3, [r7, #6]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d101      	bne.n	800cdea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e074      	b.n	800ced4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2221      	movs	r2, #33	; 0x21
 800cdf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cdfa:	f7f6 f9f7 	bl	80031ec <HAL_GetTick>
 800cdfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	88fa      	ldrh	r2, [r7, #6]
 800ce04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	88fa      	ldrh	r2, [r7, #6]
 800ce0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce18:	d108      	bne.n	800ce2c <HAL_UART_Transmit+0x6c>
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d104      	bne.n	800ce2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	61bb      	str	r3, [r7, #24]
 800ce2a:	e003      	b.n	800ce34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce30:	2300      	movs	r3, #0
 800ce32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ce34:	e030      	b.n	800ce98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2180      	movs	r1, #128	; 0x80
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f000 feff 	bl	800dc44 <UART_WaitOnFlagUntilTimeout>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d005      	beq.n	800ce58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2220      	movs	r2, #32
 800ce50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ce54:	2303      	movs	r3, #3
 800ce56:	e03d      	b.n	800ced4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10b      	bne.n	800ce76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	881b      	ldrh	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	3302      	adds	r3, #2
 800ce72:	61bb      	str	r3, [r7, #24]
 800ce74:	e007      	b.n	800ce86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	781a      	ldrb	r2, [r3, #0]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	3301      	adds	r3, #1
 800ce84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d1c8      	bne.n	800ce36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	2140      	movs	r1, #64	; 0x40
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f000 fec8 	bl	800dc44 <UART_WaitOnFlagUntilTimeout>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d005      	beq.n	800cec6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2220      	movs	r2, #32
 800cebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800cec2:	2303      	movs	r3, #3
 800cec4:	e006      	b.n	800ced4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2220      	movs	r2, #32
 800ceca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	e000      	b.n	800ced4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ced2:	2302      	movs	r3, #2
  }
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3720      	adds	r7, #32
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cedc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cee0:	b092      	sub	sp, #72	; 0x48
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	689a      	ldr	r2, [r3, #8]
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	691b      	ldr	r3, [r3, #16]
 800cef4:	431a      	orrs	r2, r3
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	695b      	ldr	r3, [r3, #20]
 800cefa:	431a      	orrs	r2, r3
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	69db      	ldr	r3, [r3, #28]
 800cf00:	4313      	orrs	r3, r2
 800cf02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	4bbe      	ldr	r3, [pc, #760]	; (800d204 <UART_SetConfig+0x328>)
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	6812      	ldr	r2, [r2, #0]
 800cf12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf14:	430b      	orrs	r3, r1
 800cf16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	68da      	ldr	r2, [r3, #12]
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4ab3      	ldr	r2, [pc, #716]	; (800d208 <UART_SetConfig+0x32c>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d004      	beq.n	800cf48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf44:	4313      	orrs	r3, r2
 800cf46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	689a      	ldr	r2, [r3, #8]
 800cf4e:	4baf      	ldr	r3, [pc, #700]	; (800d20c <UART_SetConfig+0x330>)
 800cf50:	4013      	ands	r3, r2
 800cf52:	697a      	ldr	r2, [r7, #20]
 800cf54:	6812      	ldr	r2, [r2, #0]
 800cf56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf58:	430b      	orrs	r3, r1
 800cf5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf62:	f023 010f 	bic.w	r1, r3, #15
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	430a      	orrs	r2, r1
 800cf70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4aa6      	ldr	r2, [pc, #664]	; (800d210 <UART_SetConfig+0x334>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d177      	bne.n	800d06c <UART_SetConfig+0x190>
 800cf7c:	4ba5      	ldr	r3, [pc, #660]	; (800d214 <UART_SetConfig+0x338>)
 800cf7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf84:	2b28      	cmp	r3, #40	; 0x28
 800cf86:	d86d      	bhi.n	800d064 <UART_SetConfig+0x188>
 800cf88:	a201      	add	r2, pc, #4	; (adr r2, 800cf90 <UART_SetConfig+0xb4>)
 800cf8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8e:	bf00      	nop
 800cf90:	0800d035 	.word	0x0800d035
 800cf94:	0800d065 	.word	0x0800d065
 800cf98:	0800d065 	.word	0x0800d065
 800cf9c:	0800d065 	.word	0x0800d065
 800cfa0:	0800d065 	.word	0x0800d065
 800cfa4:	0800d065 	.word	0x0800d065
 800cfa8:	0800d065 	.word	0x0800d065
 800cfac:	0800d065 	.word	0x0800d065
 800cfb0:	0800d03d 	.word	0x0800d03d
 800cfb4:	0800d065 	.word	0x0800d065
 800cfb8:	0800d065 	.word	0x0800d065
 800cfbc:	0800d065 	.word	0x0800d065
 800cfc0:	0800d065 	.word	0x0800d065
 800cfc4:	0800d065 	.word	0x0800d065
 800cfc8:	0800d065 	.word	0x0800d065
 800cfcc:	0800d065 	.word	0x0800d065
 800cfd0:	0800d045 	.word	0x0800d045
 800cfd4:	0800d065 	.word	0x0800d065
 800cfd8:	0800d065 	.word	0x0800d065
 800cfdc:	0800d065 	.word	0x0800d065
 800cfe0:	0800d065 	.word	0x0800d065
 800cfe4:	0800d065 	.word	0x0800d065
 800cfe8:	0800d065 	.word	0x0800d065
 800cfec:	0800d065 	.word	0x0800d065
 800cff0:	0800d04d 	.word	0x0800d04d
 800cff4:	0800d065 	.word	0x0800d065
 800cff8:	0800d065 	.word	0x0800d065
 800cffc:	0800d065 	.word	0x0800d065
 800d000:	0800d065 	.word	0x0800d065
 800d004:	0800d065 	.word	0x0800d065
 800d008:	0800d065 	.word	0x0800d065
 800d00c:	0800d065 	.word	0x0800d065
 800d010:	0800d055 	.word	0x0800d055
 800d014:	0800d065 	.word	0x0800d065
 800d018:	0800d065 	.word	0x0800d065
 800d01c:	0800d065 	.word	0x0800d065
 800d020:	0800d065 	.word	0x0800d065
 800d024:	0800d065 	.word	0x0800d065
 800d028:	0800d065 	.word	0x0800d065
 800d02c:	0800d065 	.word	0x0800d065
 800d030:	0800d05d 	.word	0x0800d05d
 800d034:	2301      	movs	r3, #1
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03a:	e222      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d03c:	2304      	movs	r3, #4
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d042:	e21e      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d044:	2308      	movs	r3, #8
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04a:	e21a      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d04c:	2310      	movs	r3, #16
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d052:	e216      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d054:	2320      	movs	r3, #32
 800d056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d05a:	e212      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d05c:	2340      	movs	r3, #64	; 0x40
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d062:	e20e      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d064:	2380      	movs	r3, #128	; 0x80
 800d066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d06a:	e20a      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a69      	ldr	r2, [pc, #420]	; (800d218 <UART_SetConfig+0x33c>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d130      	bne.n	800d0d8 <UART_SetConfig+0x1fc>
 800d076:	4b67      	ldr	r3, [pc, #412]	; (800d214 <UART_SetConfig+0x338>)
 800d078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d07a:	f003 0307 	and.w	r3, r3, #7
 800d07e:	2b05      	cmp	r3, #5
 800d080:	d826      	bhi.n	800d0d0 <UART_SetConfig+0x1f4>
 800d082:	a201      	add	r2, pc, #4	; (adr r2, 800d088 <UART_SetConfig+0x1ac>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d0a1 	.word	0x0800d0a1
 800d08c:	0800d0a9 	.word	0x0800d0a9
 800d090:	0800d0b1 	.word	0x0800d0b1
 800d094:	0800d0b9 	.word	0x0800d0b9
 800d098:	0800d0c1 	.word	0x0800d0c1
 800d09c:	0800d0c9 	.word	0x0800d0c9
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0a6:	e1ec      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d0a8:	2304      	movs	r3, #4
 800d0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ae:	e1e8      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d0b0:	2308      	movs	r3, #8
 800d0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0b6:	e1e4      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d0b8:	2310      	movs	r3, #16
 800d0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0be:	e1e0      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d0c0:	2320      	movs	r3, #32
 800d0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0c6:	e1dc      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d0c8:	2340      	movs	r3, #64	; 0x40
 800d0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ce:	e1d8      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d0d0:	2380      	movs	r3, #128	; 0x80
 800d0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d6:	e1d4      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a4f      	ldr	r2, [pc, #316]	; (800d21c <UART_SetConfig+0x340>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d130      	bne.n	800d144 <UART_SetConfig+0x268>
 800d0e2:	4b4c      	ldr	r3, [pc, #304]	; (800d214 <UART_SetConfig+0x338>)
 800d0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	2b05      	cmp	r3, #5
 800d0ec:	d826      	bhi.n	800d13c <UART_SetConfig+0x260>
 800d0ee:	a201      	add	r2, pc, #4	; (adr r2, 800d0f4 <UART_SetConfig+0x218>)
 800d0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f4:	0800d10d 	.word	0x0800d10d
 800d0f8:	0800d115 	.word	0x0800d115
 800d0fc:	0800d11d 	.word	0x0800d11d
 800d100:	0800d125 	.word	0x0800d125
 800d104:	0800d12d 	.word	0x0800d12d
 800d108:	0800d135 	.word	0x0800d135
 800d10c:	2300      	movs	r3, #0
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d112:	e1b6      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d114:	2304      	movs	r3, #4
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11a:	e1b2      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d11c:	2308      	movs	r3, #8
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d122:	e1ae      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d124:	2310      	movs	r3, #16
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12a:	e1aa      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d12c:	2320      	movs	r3, #32
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d132:	e1a6      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d134:	2340      	movs	r3, #64	; 0x40
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13a:	e1a2      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d13c:	2380      	movs	r3, #128	; 0x80
 800d13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d142:	e19e      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a35      	ldr	r2, [pc, #212]	; (800d220 <UART_SetConfig+0x344>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d130      	bne.n	800d1b0 <UART_SetConfig+0x2d4>
 800d14e:	4b31      	ldr	r3, [pc, #196]	; (800d214 <UART_SetConfig+0x338>)
 800d150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d152:	f003 0307 	and.w	r3, r3, #7
 800d156:	2b05      	cmp	r3, #5
 800d158:	d826      	bhi.n	800d1a8 <UART_SetConfig+0x2cc>
 800d15a:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <UART_SetConfig+0x284>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d179 	.word	0x0800d179
 800d164:	0800d181 	.word	0x0800d181
 800d168:	0800d189 	.word	0x0800d189
 800d16c:	0800d191 	.word	0x0800d191
 800d170:	0800d199 	.word	0x0800d199
 800d174:	0800d1a1 	.word	0x0800d1a1
 800d178:	2300      	movs	r3, #0
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17e:	e180      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d180:	2304      	movs	r3, #4
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d186:	e17c      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d188:	2308      	movs	r3, #8
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18e:	e178      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d190:	2310      	movs	r3, #16
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d196:	e174      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d198:	2320      	movs	r3, #32
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19e:	e170      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d1a0:	2340      	movs	r3, #64	; 0x40
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a6:	e16c      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d1a8:	2380      	movs	r3, #128	; 0x80
 800d1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ae:	e168      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a1b      	ldr	r2, [pc, #108]	; (800d224 <UART_SetConfig+0x348>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d142      	bne.n	800d240 <UART_SetConfig+0x364>
 800d1ba:	4b16      	ldr	r3, [pc, #88]	; (800d214 <UART_SetConfig+0x338>)
 800d1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1be:	f003 0307 	and.w	r3, r3, #7
 800d1c2:	2b05      	cmp	r3, #5
 800d1c4:	d838      	bhi.n	800d238 <UART_SetConfig+0x35c>
 800d1c6:	a201      	add	r2, pc, #4	; (adr r2, 800d1cc <UART_SetConfig+0x2f0>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d1e5 	.word	0x0800d1e5
 800d1d0:	0800d1ed 	.word	0x0800d1ed
 800d1d4:	0800d1f5 	.word	0x0800d1f5
 800d1d8:	0800d1fd 	.word	0x0800d1fd
 800d1dc:	0800d229 	.word	0x0800d229
 800d1e0:	0800d231 	.word	0x0800d231
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e14a      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d1ec:	2304      	movs	r3, #4
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e146      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d1f4:	2308      	movs	r3, #8
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e142      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d1fc:	2310      	movs	r3, #16
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e13e      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d204:	cfff69f3 	.word	0xcfff69f3
 800d208:	58000c00 	.word	0x58000c00
 800d20c:	11fff4ff 	.word	0x11fff4ff
 800d210:	40011000 	.word	0x40011000
 800d214:	58024400 	.word	0x58024400
 800d218:	40004400 	.word	0x40004400
 800d21c:	40004800 	.word	0x40004800
 800d220:	40004c00 	.word	0x40004c00
 800d224:	40005000 	.word	0x40005000
 800d228:	2320      	movs	r3, #32
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d22e:	e128      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d230:	2340      	movs	r3, #64	; 0x40
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d236:	e124      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d238:	2380      	movs	r3, #128	; 0x80
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23e:	e120      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4acb      	ldr	r2, [pc, #812]	; (800d574 <UART_SetConfig+0x698>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d176      	bne.n	800d338 <UART_SetConfig+0x45c>
 800d24a:	4bcb      	ldr	r3, [pc, #812]	; (800d578 <UART_SetConfig+0x69c>)
 800d24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d24e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d252:	2b28      	cmp	r3, #40	; 0x28
 800d254:	d86c      	bhi.n	800d330 <UART_SetConfig+0x454>
 800d256:	a201      	add	r2, pc, #4	; (adr r2, 800d25c <UART_SetConfig+0x380>)
 800d258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25c:	0800d301 	.word	0x0800d301
 800d260:	0800d331 	.word	0x0800d331
 800d264:	0800d331 	.word	0x0800d331
 800d268:	0800d331 	.word	0x0800d331
 800d26c:	0800d331 	.word	0x0800d331
 800d270:	0800d331 	.word	0x0800d331
 800d274:	0800d331 	.word	0x0800d331
 800d278:	0800d331 	.word	0x0800d331
 800d27c:	0800d309 	.word	0x0800d309
 800d280:	0800d331 	.word	0x0800d331
 800d284:	0800d331 	.word	0x0800d331
 800d288:	0800d331 	.word	0x0800d331
 800d28c:	0800d331 	.word	0x0800d331
 800d290:	0800d331 	.word	0x0800d331
 800d294:	0800d331 	.word	0x0800d331
 800d298:	0800d331 	.word	0x0800d331
 800d29c:	0800d311 	.word	0x0800d311
 800d2a0:	0800d331 	.word	0x0800d331
 800d2a4:	0800d331 	.word	0x0800d331
 800d2a8:	0800d331 	.word	0x0800d331
 800d2ac:	0800d331 	.word	0x0800d331
 800d2b0:	0800d331 	.word	0x0800d331
 800d2b4:	0800d331 	.word	0x0800d331
 800d2b8:	0800d331 	.word	0x0800d331
 800d2bc:	0800d319 	.word	0x0800d319
 800d2c0:	0800d331 	.word	0x0800d331
 800d2c4:	0800d331 	.word	0x0800d331
 800d2c8:	0800d331 	.word	0x0800d331
 800d2cc:	0800d331 	.word	0x0800d331
 800d2d0:	0800d331 	.word	0x0800d331
 800d2d4:	0800d331 	.word	0x0800d331
 800d2d8:	0800d331 	.word	0x0800d331
 800d2dc:	0800d321 	.word	0x0800d321
 800d2e0:	0800d331 	.word	0x0800d331
 800d2e4:	0800d331 	.word	0x0800d331
 800d2e8:	0800d331 	.word	0x0800d331
 800d2ec:	0800d331 	.word	0x0800d331
 800d2f0:	0800d331 	.word	0x0800d331
 800d2f4:	0800d331 	.word	0x0800d331
 800d2f8:	0800d331 	.word	0x0800d331
 800d2fc:	0800d329 	.word	0x0800d329
 800d300:	2301      	movs	r3, #1
 800d302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d306:	e0bc      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d308:	2304      	movs	r3, #4
 800d30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30e:	e0b8      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d310:	2308      	movs	r3, #8
 800d312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d316:	e0b4      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d318:	2310      	movs	r3, #16
 800d31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d31e:	e0b0      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d320:	2320      	movs	r3, #32
 800d322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d326:	e0ac      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d328:	2340      	movs	r3, #64	; 0x40
 800d32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32e:	e0a8      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d330:	2380      	movs	r3, #128	; 0x80
 800d332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d336:	e0a4      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a8f      	ldr	r2, [pc, #572]	; (800d57c <UART_SetConfig+0x6a0>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d130      	bne.n	800d3a4 <UART_SetConfig+0x4c8>
 800d342:	4b8d      	ldr	r3, [pc, #564]	; (800d578 <UART_SetConfig+0x69c>)
 800d344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d346:	f003 0307 	and.w	r3, r3, #7
 800d34a:	2b05      	cmp	r3, #5
 800d34c:	d826      	bhi.n	800d39c <UART_SetConfig+0x4c0>
 800d34e:	a201      	add	r2, pc, #4	; (adr r2, 800d354 <UART_SetConfig+0x478>)
 800d350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d354:	0800d36d 	.word	0x0800d36d
 800d358:	0800d375 	.word	0x0800d375
 800d35c:	0800d37d 	.word	0x0800d37d
 800d360:	0800d385 	.word	0x0800d385
 800d364:	0800d38d 	.word	0x0800d38d
 800d368:	0800d395 	.word	0x0800d395
 800d36c:	2300      	movs	r3, #0
 800d36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d372:	e086      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d374:	2304      	movs	r3, #4
 800d376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d37a:	e082      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d37c:	2308      	movs	r3, #8
 800d37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d382:	e07e      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d384:	2310      	movs	r3, #16
 800d386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38a:	e07a      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d38c:	2320      	movs	r3, #32
 800d38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d392:	e076      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d394:	2340      	movs	r3, #64	; 0x40
 800d396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39a:	e072      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d39c:	2380      	movs	r3, #128	; 0x80
 800d39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a2:	e06e      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a75      	ldr	r2, [pc, #468]	; (800d580 <UART_SetConfig+0x6a4>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d130      	bne.n	800d410 <UART_SetConfig+0x534>
 800d3ae:	4b72      	ldr	r3, [pc, #456]	; (800d578 <UART_SetConfig+0x69c>)
 800d3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3b2:	f003 0307 	and.w	r3, r3, #7
 800d3b6:	2b05      	cmp	r3, #5
 800d3b8:	d826      	bhi.n	800d408 <UART_SetConfig+0x52c>
 800d3ba:	a201      	add	r2, pc, #4	; (adr r2, 800d3c0 <UART_SetConfig+0x4e4>)
 800d3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c0:	0800d3d9 	.word	0x0800d3d9
 800d3c4:	0800d3e1 	.word	0x0800d3e1
 800d3c8:	0800d3e9 	.word	0x0800d3e9
 800d3cc:	0800d3f1 	.word	0x0800d3f1
 800d3d0:	0800d3f9 	.word	0x0800d3f9
 800d3d4:	0800d401 	.word	0x0800d401
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e050      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d3e0:	2304      	movs	r3, #4
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e6:	e04c      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d3e8:	2308      	movs	r3, #8
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ee:	e048      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d3f0:	2310      	movs	r3, #16
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f6:	e044      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d3f8:	2320      	movs	r3, #32
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fe:	e040      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d400:	2340      	movs	r3, #64	; 0x40
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d406:	e03c      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d408:	2380      	movs	r3, #128	; 0x80
 800d40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40e:	e038      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a5b      	ldr	r2, [pc, #364]	; (800d584 <UART_SetConfig+0x6a8>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d130      	bne.n	800d47c <UART_SetConfig+0x5a0>
 800d41a:	4b57      	ldr	r3, [pc, #348]	; (800d578 <UART_SetConfig+0x69c>)
 800d41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d41e:	f003 0307 	and.w	r3, r3, #7
 800d422:	2b05      	cmp	r3, #5
 800d424:	d826      	bhi.n	800d474 <UART_SetConfig+0x598>
 800d426:	a201      	add	r2, pc, #4	; (adr r2, 800d42c <UART_SetConfig+0x550>)
 800d428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d42c:	0800d445 	.word	0x0800d445
 800d430:	0800d44d 	.word	0x0800d44d
 800d434:	0800d455 	.word	0x0800d455
 800d438:	0800d45d 	.word	0x0800d45d
 800d43c:	0800d465 	.word	0x0800d465
 800d440:	0800d46d 	.word	0x0800d46d
 800d444:	2302      	movs	r3, #2
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44a:	e01a      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d44c:	2304      	movs	r3, #4
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d452:	e016      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d454:	2308      	movs	r3, #8
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45a:	e012      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d45c:	2310      	movs	r3, #16
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d462:	e00e      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d464:	2320      	movs	r3, #32
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46a:	e00a      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d46c:	2340      	movs	r3, #64	; 0x40
 800d46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d472:	e006      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d474:	2380      	movs	r3, #128	; 0x80
 800d476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47a:	e002      	b.n	800d482 <UART_SetConfig+0x5a6>
 800d47c:	2380      	movs	r3, #128	; 0x80
 800d47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a3f      	ldr	r2, [pc, #252]	; (800d584 <UART_SetConfig+0x6a8>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	f040 80f8 	bne.w	800d67e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d48e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d492:	2b20      	cmp	r3, #32
 800d494:	dc46      	bgt.n	800d524 <UART_SetConfig+0x648>
 800d496:	2b02      	cmp	r3, #2
 800d498:	f2c0 8082 	blt.w	800d5a0 <UART_SetConfig+0x6c4>
 800d49c:	3b02      	subs	r3, #2
 800d49e:	2b1e      	cmp	r3, #30
 800d4a0:	d87e      	bhi.n	800d5a0 <UART_SetConfig+0x6c4>
 800d4a2:	a201      	add	r2, pc, #4	; (adr r2, 800d4a8 <UART_SetConfig+0x5cc>)
 800d4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a8:	0800d52b 	.word	0x0800d52b
 800d4ac:	0800d5a1 	.word	0x0800d5a1
 800d4b0:	0800d533 	.word	0x0800d533
 800d4b4:	0800d5a1 	.word	0x0800d5a1
 800d4b8:	0800d5a1 	.word	0x0800d5a1
 800d4bc:	0800d5a1 	.word	0x0800d5a1
 800d4c0:	0800d543 	.word	0x0800d543
 800d4c4:	0800d5a1 	.word	0x0800d5a1
 800d4c8:	0800d5a1 	.word	0x0800d5a1
 800d4cc:	0800d5a1 	.word	0x0800d5a1
 800d4d0:	0800d5a1 	.word	0x0800d5a1
 800d4d4:	0800d5a1 	.word	0x0800d5a1
 800d4d8:	0800d5a1 	.word	0x0800d5a1
 800d4dc:	0800d5a1 	.word	0x0800d5a1
 800d4e0:	0800d553 	.word	0x0800d553
 800d4e4:	0800d5a1 	.word	0x0800d5a1
 800d4e8:	0800d5a1 	.word	0x0800d5a1
 800d4ec:	0800d5a1 	.word	0x0800d5a1
 800d4f0:	0800d5a1 	.word	0x0800d5a1
 800d4f4:	0800d5a1 	.word	0x0800d5a1
 800d4f8:	0800d5a1 	.word	0x0800d5a1
 800d4fc:	0800d5a1 	.word	0x0800d5a1
 800d500:	0800d5a1 	.word	0x0800d5a1
 800d504:	0800d5a1 	.word	0x0800d5a1
 800d508:	0800d5a1 	.word	0x0800d5a1
 800d50c:	0800d5a1 	.word	0x0800d5a1
 800d510:	0800d5a1 	.word	0x0800d5a1
 800d514:	0800d5a1 	.word	0x0800d5a1
 800d518:	0800d5a1 	.word	0x0800d5a1
 800d51c:	0800d5a1 	.word	0x0800d5a1
 800d520:	0800d593 	.word	0x0800d593
 800d524:	2b40      	cmp	r3, #64	; 0x40
 800d526:	d037      	beq.n	800d598 <UART_SetConfig+0x6bc>
 800d528:	e03a      	b.n	800d5a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d52a:	f7fe fb19 	bl	800bb60 <HAL_RCCEx_GetD3PCLK1Freq>
 800d52e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d530:	e03c      	b.n	800d5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe fb28 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d540:	e034      	b.n	800d5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d542:	f107 0318 	add.w	r3, r7, #24
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fc74 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d550:	e02c      	b.n	800d5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d552:	4b09      	ldr	r3, [pc, #36]	; (800d578 <UART_SetConfig+0x69c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d016      	beq.n	800d58c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d55e:	4b06      	ldr	r3, [pc, #24]	; (800d578 <UART_SetConfig+0x69c>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	08db      	lsrs	r3, r3, #3
 800d564:	f003 0303 	and.w	r3, r3, #3
 800d568:	4a07      	ldr	r2, [pc, #28]	; (800d588 <UART_SetConfig+0x6ac>)
 800d56a:	fa22 f303 	lsr.w	r3, r2, r3
 800d56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d570:	e01c      	b.n	800d5ac <UART_SetConfig+0x6d0>
 800d572:	bf00      	nop
 800d574:	40011400 	.word	0x40011400
 800d578:	58024400 	.word	0x58024400
 800d57c:	40007800 	.word	0x40007800
 800d580:	40007c00 	.word	0x40007c00
 800d584:	58000c00 	.word	0x58000c00
 800d588:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d58c:	4b9d      	ldr	r3, [pc, #628]	; (800d804 <UART_SetConfig+0x928>)
 800d58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d590:	e00c      	b.n	800d5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d592:	4b9d      	ldr	r3, [pc, #628]	; (800d808 <UART_SetConfig+0x92c>)
 800d594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d596:	e009      	b.n	800d5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d59e:	e005      	b.n	800d5ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 81de 	beq.w	800d970 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b8:	4a94      	ldr	r2, [pc, #592]	; (800d80c <UART_SetConfig+0x930>)
 800d5ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	005b      	lsls	r3, r3, #1
 800d5d0:	4413      	add	r3, r2
 800d5d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d305      	bcc.n	800d5e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d903      	bls.n	800d5ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d5ea:	e1c1      	b.n	800d970 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	60bb      	str	r3, [r7, #8]
 800d5f2:	60fa      	str	r2, [r7, #12]
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	4a84      	ldr	r2, [pc, #528]	; (800d80c <UART_SetConfig+0x930>)
 800d5fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2200      	movs	r2, #0
 800d602:	603b      	str	r3, [r7, #0]
 800d604:	607a      	str	r2, [r7, #4]
 800d606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d60a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d60e:	f7f3 fe5f 	bl	80012d0 <__aeabi_uldivmod>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4610      	mov	r0, r2
 800d618:	4619      	mov	r1, r3
 800d61a:	f04f 0200 	mov.w	r2, #0
 800d61e:	f04f 0300 	mov.w	r3, #0
 800d622:	020b      	lsls	r3, r1, #8
 800d624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d628:	0202      	lsls	r2, r0, #8
 800d62a:	6979      	ldr	r1, [r7, #20]
 800d62c:	6849      	ldr	r1, [r1, #4]
 800d62e:	0849      	lsrs	r1, r1, #1
 800d630:	2000      	movs	r0, #0
 800d632:	460c      	mov	r4, r1
 800d634:	4605      	mov	r5, r0
 800d636:	eb12 0804 	adds.w	r8, r2, r4
 800d63a:	eb43 0905 	adc.w	r9, r3, r5
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	469a      	mov	sl, r3
 800d646:	4693      	mov	fp, r2
 800d648:	4652      	mov	r2, sl
 800d64a:	465b      	mov	r3, fp
 800d64c:	4640      	mov	r0, r8
 800d64e:	4649      	mov	r1, r9
 800d650:	f7f3 fe3e 	bl	80012d0 <__aeabi_uldivmod>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4613      	mov	r3, r2
 800d65a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d662:	d308      	bcc.n	800d676 <UART_SetConfig+0x79a>
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d66a:	d204      	bcs.n	800d676 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d672:	60da      	str	r2, [r3, #12]
 800d674:	e17c      	b.n	800d970 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d67c:	e178      	b.n	800d970 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	69db      	ldr	r3, [r3, #28]
 800d682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d686:	f040 80c5 	bne.w	800d814 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d68a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d68e:	2b20      	cmp	r3, #32
 800d690:	dc48      	bgt.n	800d724 <UART_SetConfig+0x848>
 800d692:	2b00      	cmp	r3, #0
 800d694:	db7b      	blt.n	800d78e <UART_SetConfig+0x8b2>
 800d696:	2b20      	cmp	r3, #32
 800d698:	d879      	bhi.n	800d78e <UART_SetConfig+0x8b2>
 800d69a:	a201      	add	r2, pc, #4	; (adr r2, 800d6a0 <UART_SetConfig+0x7c4>)
 800d69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a0:	0800d72b 	.word	0x0800d72b
 800d6a4:	0800d733 	.word	0x0800d733
 800d6a8:	0800d78f 	.word	0x0800d78f
 800d6ac:	0800d78f 	.word	0x0800d78f
 800d6b0:	0800d73b 	.word	0x0800d73b
 800d6b4:	0800d78f 	.word	0x0800d78f
 800d6b8:	0800d78f 	.word	0x0800d78f
 800d6bc:	0800d78f 	.word	0x0800d78f
 800d6c0:	0800d74b 	.word	0x0800d74b
 800d6c4:	0800d78f 	.word	0x0800d78f
 800d6c8:	0800d78f 	.word	0x0800d78f
 800d6cc:	0800d78f 	.word	0x0800d78f
 800d6d0:	0800d78f 	.word	0x0800d78f
 800d6d4:	0800d78f 	.word	0x0800d78f
 800d6d8:	0800d78f 	.word	0x0800d78f
 800d6dc:	0800d78f 	.word	0x0800d78f
 800d6e0:	0800d75b 	.word	0x0800d75b
 800d6e4:	0800d78f 	.word	0x0800d78f
 800d6e8:	0800d78f 	.word	0x0800d78f
 800d6ec:	0800d78f 	.word	0x0800d78f
 800d6f0:	0800d78f 	.word	0x0800d78f
 800d6f4:	0800d78f 	.word	0x0800d78f
 800d6f8:	0800d78f 	.word	0x0800d78f
 800d6fc:	0800d78f 	.word	0x0800d78f
 800d700:	0800d78f 	.word	0x0800d78f
 800d704:	0800d78f 	.word	0x0800d78f
 800d708:	0800d78f 	.word	0x0800d78f
 800d70c:	0800d78f 	.word	0x0800d78f
 800d710:	0800d78f 	.word	0x0800d78f
 800d714:	0800d78f 	.word	0x0800d78f
 800d718:	0800d78f 	.word	0x0800d78f
 800d71c:	0800d78f 	.word	0x0800d78f
 800d720:	0800d781 	.word	0x0800d781
 800d724:	2b40      	cmp	r3, #64	; 0x40
 800d726:	d02e      	beq.n	800d786 <UART_SetConfig+0x8aa>
 800d728:	e031      	b.n	800d78e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d72a:	f7fc fa47 	bl	8009bbc <HAL_RCC_GetPCLK1Freq>
 800d72e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d730:	e033      	b.n	800d79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d732:	f7fc fa59 	bl	8009be8 <HAL_RCC_GetPCLK2Freq>
 800d736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d738:	e02f      	b.n	800d79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d73a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fe fa24 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d748:	e027      	b.n	800d79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d74a:	f107 0318 	add.w	r3, r7, #24
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fe fb70 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d758:	e01f      	b.n	800d79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d75a:	4b2d      	ldr	r3, [pc, #180]	; (800d810 <UART_SetConfig+0x934>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f003 0320 	and.w	r3, r3, #32
 800d762:	2b00      	cmp	r3, #0
 800d764:	d009      	beq.n	800d77a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d766:	4b2a      	ldr	r3, [pc, #168]	; (800d810 <UART_SetConfig+0x934>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	08db      	lsrs	r3, r3, #3
 800d76c:	f003 0303 	and.w	r3, r3, #3
 800d770:	4a24      	ldr	r2, [pc, #144]	; (800d804 <UART_SetConfig+0x928>)
 800d772:	fa22 f303 	lsr.w	r3, r2, r3
 800d776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d778:	e00f      	b.n	800d79a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d77a:	4b22      	ldr	r3, [pc, #136]	; (800d804 <UART_SetConfig+0x928>)
 800d77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d77e:	e00c      	b.n	800d79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d780:	4b21      	ldr	r3, [pc, #132]	; (800d808 <UART_SetConfig+0x92c>)
 800d782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d784:	e009      	b.n	800d79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d78c:	e005      	b.n	800d79a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d78e:	2300      	movs	r3, #0
 800d790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 80e7 	beq.w	800d970 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a6:	4a19      	ldr	r2, [pc, #100]	; (800d80c <UART_SetConfig+0x930>)
 800d7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7b4:	005a      	lsls	r2, r3, #1
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	085b      	lsrs	r3, r3, #1
 800d7bc:	441a      	add	r2, r3
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	2b0f      	cmp	r3, #15
 800d7cc:	d916      	bls.n	800d7fc <UART_SetConfig+0x920>
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7d4:	d212      	bcs.n	800d7fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	f023 030f 	bic.w	r3, r3, #15
 800d7de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e2:	085b      	lsrs	r3, r3, #1
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d7f8:	60da      	str	r2, [r3, #12]
 800d7fa:	e0b9      	b.n	800d970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d802:	e0b5      	b.n	800d970 <UART_SetConfig+0xa94>
 800d804:	03d09000 	.word	0x03d09000
 800d808:	003d0900 	.word	0x003d0900
 800d80c:	0801de84 	.word	0x0801de84
 800d810:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d818:	2b20      	cmp	r3, #32
 800d81a:	dc49      	bgt.n	800d8b0 <UART_SetConfig+0x9d4>
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	db7c      	blt.n	800d91a <UART_SetConfig+0xa3e>
 800d820:	2b20      	cmp	r3, #32
 800d822:	d87a      	bhi.n	800d91a <UART_SetConfig+0xa3e>
 800d824:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <UART_SetConfig+0x950>)
 800d826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82a:	bf00      	nop
 800d82c:	0800d8b7 	.word	0x0800d8b7
 800d830:	0800d8bf 	.word	0x0800d8bf
 800d834:	0800d91b 	.word	0x0800d91b
 800d838:	0800d91b 	.word	0x0800d91b
 800d83c:	0800d8c7 	.word	0x0800d8c7
 800d840:	0800d91b 	.word	0x0800d91b
 800d844:	0800d91b 	.word	0x0800d91b
 800d848:	0800d91b 	.word	0x0800d91b
 800d84c:	0800d8d7 	.word	0x0800d8d7
 800d850:	0800d91b 	.word	0x0800d91b
 800d854:	0800d91b 	.word	0x0800d91b
 800d858:	0800d91b 	.word	0x0800d91b
 800d85c:	0800d91b 	.word	0x0800d91b
 800d860:	0800d91b 	.word	0x0800d91b
 800d864:	0800d91b 	.word	0x0800d91b
 800d868:	0800d91b 	.word	0x0800d91b
 800d86c:	0800d8e7 	.word	0x0800d8e7
 800d870:	0800d91b 	.word	0x0800d91b
 800d874:	0800d91b 	.word	0x0800d91b
 800d878:	0800d91b 	.word	0x0800d91b
 800d87c:	0800d91b 	.word	0x0800d91b
 800d880:	0800d91b 	.word	0x0800d91b
 800d884:	0800d91b 	.word	0x0800d91b
 800d888:	0800d91b 	.word	0x0800d91b
 800d88c:	0800d91b 	.word	0x0800d91b
 800d890:	0800d91b 	.word	0x0800d91b
 800d894:	0800d91b 	.word	0x0800d91b
 800d898:	0800d91b 	.word	0x0800d91b
 800d89c:	0800d91b 	.word	0x0800d91b
 800d8a0:	0800d91b 	.word	0x0800d91b
 800d8a4:	0800d91b 	.word	0x0800d91b
 800d8a8:	0800d91b 	.word	0x0800d91b
 800d8ac:	0800d90d 	.word	0x0800d90d
 800d8b0:	2b40      	cmp	r3, #64	; 0x40
 800d8b2:	d02e      	beq.n	800d912 <UART_SetConfig+0xa36>
 800d8b4:	e031      	b.n	800d91a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8b6:	f7fc f981 	bl	8009bbc <HAL_RCC_GetPCLK1Freq>
 800d8ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8bc:	e033      	b.n	800d926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8be:	f7fc f993 	bl	8009be8 <HAL_RCC_GetPCLK2Freq>
 800d8c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8c4:	e02f      	b.n	800d926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe f95e 	bl	800bb8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8d4:	e027      	b.n	800d926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8d6:	f107 0318 	add.w	r3, r7, #24
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fe faaa 	bl	800be34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8e4:	e01f      	b.n	800d926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8e6:	4b2d      	ldr	r3, [pc, #180]	; (800d99c <UART_SetConfig+0xac0>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f003 0320 	and.w	r3, r3, #32
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d009      	beq.n	800d906 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8f2:	4b2a      	ldr	r3, [pc, #168]	; (800d99c <UART_SetConfig+0xac0>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	08db      	lsrs	r3, r3, #3
 800d8f8:	f003 0303 	and.w	r3, r3, #3
 800d8fc:	4a28      	ldr	r2, [pc, #160]	; (800d9a0 <UART_SetConfig+0xac4>)
 800d8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d904:	e00f      	b.n	800d926 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d906:	4b26      	ldr	r3, [pc, #152]	; (800d9a0 <UART_SetConfig+0xac4>)
 800d908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d90a:	e00c      	b.n	800d926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d90c:	4b25      	ldr	r3, [pc, #148]	; (800d9a4 <UART_SetConfig+0xac8>)
 800d90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d910:	e009      	b.n	800d926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d918:	e005      	b.n	800d926 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d91a:	2300      	movs	r3, #0
 800d91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d924:	bf00      	nop
    }

    if (pclk != 0U)
 800d926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d021      	beq.n	800d970 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d930:	4a1d      	ldr	r2, [pc, #116]	; (800d9a8 <UART_SetConfig+0xacc>)
 800d932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d936:	461a      	mov	r2, r3
 800d938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d93a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	085b      	lsrs	r3, r3, #1
 800d944:	441a      	add	r2, r3
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d94e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	2b0f      	cmp	r3, #15
 800d954:	d909      	bls.n	800d96a <UART_SetConfig+0xa8e>
 800d956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d95c:	d205      	bcs.n	800d96a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d960:	b29a      	uxth	r2, r3
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60da      	str	r2, [r3, #12]
 800d968:	e002      	b.n	800d970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2201      	movs	r2, #1
 800d974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2201      	movs	r2, #1
 800d97c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2200      	movs	r2, #0
 800d984:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2200      	movs	r2, #0
 800d98a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d98c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d990:	4618      	mov	r0, r3
 800d992:	3748      	adds	r7, #72	; 0x48
 800d994:	46bd      	mov	sp, r7
 800d996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d99a:	bf00      	nop
 800d99c:	58024400 	.word	0x58024400
 800d9a0:	03d09000 	.word	0x03d09000
 800d9a4:	003d0900 	.word	0x003d0900
 800d9a8:	0801de84 	.word	0x0801de84

0800d9ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00a      	beq.n	800d9d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	430a      	orrs	r2, r1
 800d9d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9da:	f003 0302 	and.w	r3, r3, #2
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00a      	beq.n	800d9f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	430a      	orrs	r2, r1
 800d9f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fc:	f003 0304 	and.w	r3, r3, #4
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00a      	beq.n	800da1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	430a      	orrs	r2, r1
 800da18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1e:	f003 0308 	and.w	r3, r3, #8
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00a      	beq.n	800da3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	430a      	orrs	r2, r1
 800da3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da40:	f003 0310 	and.w	r3, r3, #16
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00a      	beq.n	800da5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	430a      	orrs	r2, r1
 800da5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da62:	f003 0320 	and.w	r3, r3, #32
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	430a      	orrs	r2, r1
 800da7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d01a      	beq.n	800dac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	430a      	orrs	r2, r1
 800daa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daaa:	d10a      	bne.n	800dac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	430a      	orrs	r2, r1
 800dac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00a      	beq.n	800dae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	430a      	orrs	r2, r1
 800dae2:	605a      	str	r2, [r3, #4]
  }
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b098      	sub	sp, #96	; 0x60
 800daf4:	af02      	add	r7, sp, #8
 800daf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db00:	f7f5 fb74 	bl	80031ec <HAL_GetTick>
 800db04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 0308 	and.w	r3, r3, #8
 800db10:	2b08      	cmp	r3, #8
 800db12:	d12f      	bne.n	800db74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db1c:	2200      	movs	r2, #0
 800db1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f88e 	bl	800dc44 <UART_WaitOnFlagUntilTimeout>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d022      	beq.n	800db74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db36:	e853 3f00 	ldrex	r3, [r3]
 800db3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db42:	653b      	str	r3, [r7, #80]	; 0x50
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	461a      	mov	r2, r3
 800db4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db4c:	647b      	str	r3, [r7, #68]	; 0x44
 800db4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db54:	e841 2300 	strex	r3, r2, [r1]
 800db58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d1e6      	bne.n	800db2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2220      	movs	r2, #32
 800db64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db70:	2303      	movs	r3, #3
 800db72:	e063      	b.n	800dc3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f003 0304 	and.w	r3, r3, #4
 800db7e:	2b04      	cmp	r3, #4
 800db80:	d149      	bne.n	800dc16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db8a:	2200      	movs	r2, #0
 800db8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f857 	bl	800dc44 <UART_WaitOnFlagUntilTimeout>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d03c      	beq.n	800dc16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba4:	e853 3f00 	ldrex	r3, [r3]
 800dba8:	623b      	str	r3, [r7, #32]
   return(result);
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbba:	633b      	str	r3, [r7, #48]	; 0x30
 800dbbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbc2:	e841 2300 	strex	r3, r2, [r1]
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1e6      	bne.n	800db9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	3308      	adds	r3, #8
 800dbd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	e853 3f00 	ldrex	r3, [r3]
 800dbdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f023 0301 	bic.w	r3, r3, #1
 800dbe4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	3308      	adds	r3, #8
 800dbec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbee:	61fa      	str	r2, [r7, #28]
 800dbf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf2:	69b9      	ldr	r1, [r7, #24]
 800dbf4:	69fa      	ldr	r2, [r7, #28]
 800dbf6:	e841 2300 	strex	r3, r2, [r1]
 800dbfa:	617b      	str	r3, [r7, #20]
   return(result);
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1e5      	bne.n	800dbce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2220      	movs	r2, #32
 800dc06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e012      	b.n	800dc3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2220      	movs	r2, #32
 800dc1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2220      	movs	r2, #32
 800dc22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3758      	adds	r7, #88	; 0x58
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	4613      	mov	r3, r2
 800dc52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc54:	e049      	b.n	800dcea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc5c:	d045      	beq.n	800dcea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc5e:	f7f5 fac5 	bl	80031ec <HAL_GetTick>
 800dc62:	4602      	mov	r2, r0
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	69ba      	ldr	r2, [r7, #24]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d302      	bcc.n	800dc74 <UART_WaitOnFlagUntilTimeout+0x30>
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d101      	bne.n	800dc78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dc74:	2303      	movs	r3, #3
 800dc76:	e048      	b.n	800dd0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0304 	and.w	r3, r3, #4
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d031      	beq.n	800dcea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	69db      	ldr	r3, [r3, #28]
 800dc8c:	f003 0308 	and.w	r3, r3, #8
 800dc90:	2b08      	cmp	r3, #8
 800dc92:	d110      	bne.n	800dcb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2208      	movs	r2, #8
 800dc9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f000 f839 	bl	800dd14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2208      	movs	r2, #8
 800dca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e029      	b.n	800dd0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	69db      	ldr	r3, [r3, #28]
 800dcbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcc4:	d111      	bne.n	800dcea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f000 f81f 	bl	800dd14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2220      	movs	r2, #32
 800dcda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800dce6:	2303      	movs	r3, #3
 800dce8:	e00f      	b.n	800dd0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	69da      	ldr	r2, [r3, #28]
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	4013      	ands	r3, r2
 800dcf4:	68ba      	ldr	r2, [r7, #8]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	bf0c      	ite	eq
 800dcfa:	2301      	moveq	r3, #1
 800dcfc:	2300      	movne	r3, #0
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	461a      	mov	r2, r3
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d0a6      	beq.n	800dc56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
	...

0800dd14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b095      	sub	sp, #84	; 0x54
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd24:	e853 3f00 	ldrex	r3, [r3]
 800dd28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	461a      	mov	r2, r3
 800dd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd3a:	643b      	str	r3, [r7, #64]	; 0x40
 800dd3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd42:	e841 2300 	strex	r3, r2, [r1]
 800dd46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1e6      	bne.n	800dd1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	3308      	adds	r3, #8
 800dd54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd56:	6a3b      	ldr	r3, [r7, #32]
 800dd58:	e853 3f00 	ldrex	r3, [r3]
 800dd5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd5e:	69fa      	ldr	r2, [r7, #28]
 800dd60:	4b1e      	ldr	r3, [pc, #120]	; (800dddc <UART_EndRxTransfer+0xc8>)
 800dd62:	4013      	ands	r3, r2
 800dd64:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd76:	e841 2300 	strex	r3, r2, [r1]
 800dd7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1e5      	bne.n	800dd4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d118      	bne.n	800ddbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	e853 3f00 	ldrex	r3, [r3]
 800dd96:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	f023 0310 	bic.w	r3, r3, #16
 800dd9e:	647b      	str	r3, [r7, #68]	; 0x44
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	461a      	mov	r2, r3
 800dda6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dda8:	61bb      	str	r3, [r7, #24]
 800ddaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddac:	6979      	ldr	r1, [r7, #20]
 800ddae:	69ba      	ldr	r2, [r7, #24]
 800ddb0:	e841 2300 	strex	r3, r2, [r1]
 800ddb4:	613b      	str	r3, [r7, #16]
   return(result);
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1e6      	bne.n	800dd8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2220      	movs	r2, #32
 800ddc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ddd0:	bf00      	nop
 800ddd2:	3754      	adds	r7, #84	; 0x54
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	effffffe 	.word	0xeffffffe

0800dde0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d101      	bne.n	800ddf6 <HAL_UARTEx_DisableFifoMode+0x16>
 800ddf2:	2302      	movs	r3, #2
 800ddf4:	e027      	b.n	800de46 <HAL_UARTEx_DisableFifoMode+0x66>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2224      	movs	r2, #36	; 0x24
 800de02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f022 0201 	bic.w	r2, r2, #1
 800de1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800de24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2220      	movs	r2, #32
 800de38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3714      	adds	r7, #20
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b084      	sub	sp, #16
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de62:	2b01      	cmp	r3, #1
 800de64:	d101      	bne.n	800de6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de66:	2302      	movs	r3, #2
 800de68:	e02d      	b.n	800dec6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2201      	movs	r2, #1
 800de6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2224      	movs	r2, #36	; 0x24
 800de76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f022 0201 	bic.w	r2, r2, #1
 800de90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	683a      	ldr	r2, [r7, #0]
 800dea2:	430a      	orrs	r2, r1
 800dea4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 f850 	bl	800df4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2220      	movs	r2, #32
 800deb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b084      	sub	sp, #16
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
 800ded6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d101      	bne.n	800dee6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dee2:	2302      	movs	r3, #2
 800dee4:	e02d      	b.n	800df42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2201      	movs	r2, #1
 800deea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2224      	movs	r2, #36	; 0x24
 800def2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f022 0201 	bic.w	r2, r2, #1
 800df0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	430a      	orrs	r2, r1
 800df20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 f812 	bl	800df4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2220      	movs	r2, #32
 800df34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d108      	bne.n	800df6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2201      	movs	r2, #1
 800df60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df6c:	e031      	b.n	800dfd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df6e:	2310      	movs	r3, #16
 800df70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df72:	2310      	movs	r3, #16
 800df74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	0e5b      	lsrs	r3, r3, #25
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	f003 0307 	and.w	r3, r3, #7
 800df84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	0f5b      	lsrs	r3, r3, #29
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	f003 0307 	and.w	r3, r3, #7
 800df94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df96:	7bbb      	ldrb	r3, [r7, #14]
 800df98:	7b3a      	ldrb	r2, [r7, #12]
 800df9a:	4911      	ldr	r1, [pc, #68]	; (800dfe0 <UARTEx_SetNbDataToProcess+0x94>)
 800df9c:	5c8a      	ldrb	r2, [r1, r2]
 800df9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dfa2:	7b3a      	ldrb	r2, [r7, #12]
 800dfa4:	490f      	ldr	r1, [pc, #60]	; (800dfe4 <UARTEx_SetNbDataToProcess+0x98>)
 800dfa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dfa8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	7b7a      	ldrb	r2, [r7, #13]
 800dfb8:	4909      	ldr	r1, [pc, #36]	; (800dfe0 <UARTEx_SetNbDataToProcess+0x94>)
 800dfba:	5c8a      	ldrb	r2, [r1, r2]
 800dfbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dfc0:	7b7a      	ldrb	r2, [r7, #13]
 800dfc2:	4908      	ldr	r1, [pc, #32]	; (800dfe4 <UARTEx_SetNbDataToProcess+0x98>)
 800dfc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dfd2:	bf00      	nop
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	0801de9c 	.word	0x0801de9c
 800dfe4:	0801dea4 	.word	0x0801dea4

0800dfe8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800dfee:	4b8d      	ldr	r3, [pc, #564]	; (800e224 <MX_LWIP_Init+0x23c>)
 800dff0:	22c0      	movs	r2, #192	; 0xc0
 800dff2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800dff4:	4b8b      	ldr	r3, [pc, #556]	; (800e224 <MX_LWIP_Init+0x23c>)
 800dff6:	22a8      	movs	r2, #168	; 0xa8
 800dff8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800dffa:	4b8a      	ldr	r3, [pc, #552]	; (800e224 <MX_LWIP_Init+0x23c>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800e000:	4b88      	ldr	r3, [pc, #544]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e002:	220a      	movs	r2, #10
 800e004:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e006:	4b88      	ldr	r3, [pc, #544]	; (800e228 <MX_LWIP_Init+0x240>)
 800e008:	22ff      	movs	r2, #255	; 0xff
 800e00a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e00c:	4b86      	ldr	r3, [pc, #536]	; (800e228 <MX_LWIP_Init+0x240>)
 800e00e:	22ff      	movs	r2, #255	; 0xff
 800e010:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800e012:	4b85      	ldr	r3, [pc, #532]	; (800e228 <MX_LWIP_Init+0x240>)
 800e014:	2200      	movs	r2, #0
 800e016:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e018:	4b83      	ldr	r3, [pc, #524]	; (800e228 <MX_LWIP_Init+0x240>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800e01e:	4b83      	ldr	r3, [pc, #524]	; (800e22c <MX_LWIP_Init+0x244>)
 800e020:	22c0      	movs	r2, #192	; 0xc0
 800e022:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800e024:	4b81      	ldr	r3, [pc, #516]	; (800e22c <MX_LWIP_Init+0x244>)
 800e026:	22a8      	movs	r2, #168	; 0xa8
 800e028:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e02a:	4b80      	ldr	r3, [pc, #512]	; (800e22c <MX_LWIP_Init+0x244>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800e030:	4b7e      	ldr	r3, [pc, #504]	; (800e22c <MX_LWIP_Init+0x244>)
 800e032:	2201      	movs	r2, #1
 800e034:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e036:	f000 fd3d 	bl	800eab4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e03a:	4b7a      	ldr	r3, [pc, #488]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	061a      	lsls	r2, r3, #24
 800e040:	4b78      	ldr	r3, [pc, #480]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e042:	785b      	ldrb	r3, [r3, #1]
 800e044:	041b      	lsls	r3, r3, #16
 800e046:	431a      	orrs	r2, r3
 800e048:	4b76      	ldr	r3, [pc, #472]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e04a:	789b      	ldrb	r3, [r3, #2]
 800e04c:	021b      	lsls	r3, r3, #8
 800e04e:	4313      	orrs	r3, r2
 800e050:	4a74      	ldr	r2, [pc, #464]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e052:	78d2      	ldrb	r2, [r2, #3]
 800e054:	4313      	orrs	r3, r2
 800e056:	061a      	lsls	r2, r3, #24
 800e058:	4b72      	ldr	r3, [pc, #456]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	0619      	lsls	r1, r3, #24
 800e05e:	4b71      	ldr	r3, [pc, #452]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e060:	785b      	ldrb	r3, [r3, #1]
 800e062:	041b      	lsls	r3, r3, #16
 800e064:	4319      	orrs	r1, r3
 800e066:	4b6f      	ldr	r3, [pc, #444]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e068:	789b      	ldrb	r3, [r3, #2]
 800e06a:	021b      	lsls	r3, r3, #8
 800e06c:	430b      	orrs	r3, r1
 800e06e:	496d      	ldr	r1, [pc, #436]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e070:	78c9      	ldrb	r1, [r1, #3]
 800e072:	430b      	orrs	r3, r1
 800e074:	021b      	lsls	r3, r3, #8
 800e076:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e07a:	431a      	orrs	r2, r3
 800e07c:	4b69      	ldr	r3, [pc, #420]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	0619      	lsls	r1, r3, #24
 800e082:	4b68      	ldr	r3, [pc, #416]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e084:	785b      	ldrb	r3, [r3, #1]
 800e086:	041b      	lsls	r3, r3, #16
 800e088:	4319      	orrs	r1, r3
 800e08a:	4b66      	ldr	r3, [pc, #408]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e08c:	789b      	ldrb	r3, [r3, #2]
 800e08e:	021b      	lsls	r3, r3, #8
 800e090:	430b      	orrs	r3, r1
 800e092:	4964      	ldr	r1, [pc, #400]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e094:	78c9      	ldrb	r1, [r1, #3]
 800e096:	430b      	orrs	r3, r1
 800e098:	0a1b      	lsrs	r3, r3, #8
 800e09a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e09e:	431a      	orrs	r2, r3
 800e0a0:	4b60      	ldr	r3, [pc, #384]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	0619      	lsls	r1, r3, #24
 800e0a6:	4b5f      	ldr	r3, [pc, #380]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e0a8:	785b      	ldrb	r3, [r3, #1]
 800e0aa:	041b      	lsls	r3, r3, #16
 800e0ac:	4319      	orrs	r1, r3
 800e0ae:	4b5d      	ldr	r3, [pc, #372]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e0b0:	789b      	ldrb	r3, [r3, #2]
 800e0b2:	021b      	lsls	r3, r3, #8
 800e0b4:	430b      	orrs	r3, r1
 800e0b6:	495b      	ldr	r1, [pc, #364]	; (800e224 <MX_LWIP_Init+0x23c>)
 800e0b8:	78c9      	ldrb	r1, [r1, #3]
 800e0ba:	430b      	orrs	r3, r1
 800e0bc:	0e1b      	lsrs	r3, r3, #24
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	4a5b      	ldr	r2, [pc, #364]	; (800e230 <MX_LWIP_Init+0x248>)
 800e0c2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e0c4:	4b58      	ldr	r3, [pc, #352]	; (800e228 <MX_LWIP_Init+0x240>)
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	061a      	lsls	r2, r3, #24
 800e0ca:	4b57      	ldr	r3, [pc, #348]	; (800e228 <MX_LWIP_Init+0x240>)
 800e0cc:	785b      	ldrb	r3, [r3, #1]
 800e0ce:	041b      	lsls	r3, r3, #16
 800e0d0:	431a      	orrs	r2, r3
 800e0d2:	4b55      	ldr	r3, [pc, #340]	; (800e228 <MX_LWIP_Init+0x240>)
 800e0d4:	789b      	ldrb	r3, [r3, #2]
 800e0d6:	021b      	lsls	r3, r3, #8
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	4a53      	ldr	r2, [pc, #332]	; (800e228 <MX_LWIP_Init+0x240>)
 800e0dc:	78d2      	ldrb	r2, [r2, #3]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	061a      	lsls	r2, r3, #24
 800e0e2:	4b51      	ldr	r3, [pc, #324]	; (800e228 <MX_LWIP_Init+0x240>)
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	0619      	lsls	r1, r3, #24
 800e0e8:	4b4f      	ldr	r3, [pc, #316]	; (800e228 <MX_LWIP_Init+0x240>)
 800e0ea:	785b      	ldrb	r3, [r3, #1]
 800e0ec:	041b      	lsls	r3, r3, #16
 800e0ee:	4319      	orrs	r1, r3
 800e0f0:	4b4d      	ldr	r3, [pc, #308]	; (800e228 <MX_LWIP_Init+0x240>)
 800e0f2:	789b      	ldrb	r3, [r3, #2]
 800e0f4:	021b      	lsls	r3, r3, #8
 800e0f6:	430b      	orrs	r3, r1
 800e0f8:	494b      	ldr	r1, [pc, #300]	; (800e228 <MX_LWIP_Init+0x240>)
 800e0fa:	78c9      	ldrb	r1, [r1, #3]
 800e0fc:	430b      	orrs	r3, r1
 800e0fe:	021b      	lsls	r3, r3, #8
 800e100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e104:	431a      	orrs	r2, r3
 800e106:	4b48      	ldr	r3, [pc, #288]	; (800e228 <MX_LWIP_Init+0x240>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	0619      	lsls	r1, r3, #24
 800e10c:	4b46      	ldr	r3, [pc, #280]	; (800e228 <MX_LWIP_Init+0x240>)
 800e10e:	785b      	ldrb	r3, [r3, #1]
 800e110:	041b      	lsls	r3, r3, #16
 800e112:	4319      	orrs	r1, r3
 800e114:	4b44      	ldr	r3, [pc, #272]	; (800e228 <MX_LWIP_Init+0x240>)
 800e116:	789b      	ldrb	r3, [r3, #2]
 800e118:	021b      	lsls	r3, r3, #8
 800e11a:	430b      	orrs	r3, r1
 800e11c:	4942      	ldr	r1, [pc, #264]	; (800e228 <MX_LWIP_Init+0x240>)
 800e11e:	78c9      	ldrb	r1, [r1, #3]
 800e120:	430b      	orrs	r3, r1
 800e122:	0a1b      	lsrs	r3, r3, #8
 800e124:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e128:	431a      	orrs	r2, r3
 800e12a:	4b3f      	ldr	r3, [pc, #252]	; (800e228 <MX_LWIP_Init+0x240>)
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	0619      	lsls	r1, r3, #24
 800e130:	4b3d      	ldr	r3, [pc, #244]	; (800e228 <MX_LWIP_Init+0x240>)
 800e132:	785b      	ldrb	r3, [r3, #1]
 800e134:	041b      	lsls	r3, r3, #16
 800e136:	4319      	orrs	r1, r3
 800e138:	4b3b      	ldr	r3, [pc, #236]	; (800e228 <MX_LWIP_Init+0x240>)
 800e13a:	789b      	ldrb	r3, [r3, #2]
 800e13c:	021b      	lsls	r3, r3, #8
 800e13e:	430b      	orrs	r3, r1
 800e140:	4939      	ldr	r1, [pc, #228]	; (800e228 <MX_LWIP_Init+0x240>)
 800e142:	78c9      	ldrb	r1, [r1, #3]
 800e144:	430b      	orrs	r3, r1
 800e146:	0e1b      	lsrs	r3, r3, #24
 800e148:	4313      	orrs	r3, r2
 800e14a:	4a3a      	ldr	r2, [pc, #232]	; (800e234 <MX_LWIP_Init+0x24c>)
 800e14c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e14e:	4b37      	ldr	r3, [pc, #220]	; (800e22c <MX_LWIP_Init+0x244>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	061a      	lsls	r2, r3, #24
 800e154:	4b35      	ldr	r3, [pc, #212]	; (800e22c <MX_LWIP_Init+0x244>)
 800e156:	785b      	ldrb	r3, [r3, #1]
 800e158:	041b      	lsls	r3, r3, #16
 800e15a:	431a      	orrs	r2, r3
 800e15c:	4b33      	ldr	r3, [pc, #204]	; (800e22c <MX_LWIP_Init+0x244>)
 800e15e:	789b      	ldrb	r3, [r3, #2]
 800e160:	021b      	lsls	r3, r3, #8
 800e162:	4313      	orrs	r3, r2
 800e164:	4a31      	ldr	r2, [pc, #196]	; (800e22c <MX_LWIP_Init+0x244>)
 800e166:	78d2      	ldrb	r2, [r2, #3]
 800e168:	4313      	orrs	r3, r2
 800e16a:	061a      	lsls	r2, r3, #24
 800e16c:	4b2f      	ldr	r3, [pc, #188]	; (800e22c <MX_LWIP_Init+0x244>)
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	0619      	lsls	r1, r3, #24
 800e172:	4b2e      	ldr	r3, [pc, #184]	; (800e22c <MX_LWIP_Init+0x244>)
 800e174:	785b      	ldrb	r3, [r3, #1]
 800e176:	041b      	lsls	r3, r3, #16
 800e178:	4319      	orrs	r1, r3
 800e17a:	4b2c      	ldr	r3, [pc, #176]	; (800e22c <MX_LWIP_Init+0x244>)
 800e17c:	789b      	ldrb	r3, [r3, #2]
 800e17e:	021b      	lsls	r3, r3, #8
 800e180:	430b      	orrs	r3, r1
 800e182:	492a      	ldr	r1, [pc, #168]	; (800e22c <MX_LWIP_Init+0x244>)
 800e184:	78c9      	ldrb	r1, [r1, #3]
 800e186:	430b      	orrs	r3, r1
 800e188:	021b      	lsls	r3, r3, #8
 800e18a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e18e:	431a      	orrs	r2, r3
 800e190:	4b26      	ldr	r3, [pc, #152]	; (800e22c <MX_LWIP_Init+0x244>)
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	0619      	lsls	r1, r3, #24
 800e196:	4b25      	ldr	r3, [pc, #148]	; (800e22c <MX_LWIP_Init+0x244>)
 800e198:	785b      	ldrb	r3, [r3, #1]
 800e19a:	041b      	lsls	r3, r3, #16
 800e19c:	4319      	orrs	r1, r3
 800e19e:	4b23      	ldr	r3, [pc, #140]	; (800e22c <MX_LWIP_Init+0x244>)
 800e1a0:	789b      	ldrb	r3, [r3, #2]
 800e1a2:	021b      	lsls	r3, r3, #8
 800e1a4:	430b      	orrs	r3, r1
 800e1a6:	4921      	ldr	r1, [pc, #132]	; (800e22c <MX_LWIP_Init+0x244>)
 800e1a8:	78c9      	ldrb	r1, [r1, #3]
 800e1aa:	430b      	orrs	r3, r1
 800e1ac:	0a1b      	lsrs	r3, r3, #8
 800e1ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e1b2:	431a      	orrs	r2, r3
 800e1b4:	4b1d      	ldr	r3, [pc, #116]	; (800e22c <MX_LWIP_Init+0x244>)
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	0619      	lsls	r1, r3, #24
 800e1ba:	4b1c      	ldr	r3, [pc, #112]	; (800e22c <MX_LWIP_Init+0x244>)
 800e1bc:	785b      	ldrb	r3, [r3, #1]
 800e1be:	041b      	lsls	r3, r3, #16
 800e1c0:	4319      	orrs	r1, r3
 800e1c2:	4b1a      	ldr	r3, [pc, #104]	; (800e22c <MX_LWIP_Init+0x244>)
 800e1c4:	789b      	ldrb	r3, [r3, #2]
 800e1c6:	021b      	lsls	r3, r3, #8
 800e1c8:	430b      	orrs	r3, r1
 800e1ca:	4918      	ldr	r1, [pc, #96]	; (800e22c <MX_LWIP_Init+0x244>)
 800e1cc:	78c9      	ldrb	r1, [r1, #3]
 800e1ce:	430b      	orrs	r3, r1
 800e1d0:	0e1b      	lsrs	r3, r3, #24
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	4a18      	ldr	r2, [pc, #96]	; (800e238 <MX_LWIP_Init+0x250>)
 800e1d6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e1d8:	4b18      	ldr	r3, [pc, #96]	; (800e23c <MX_LWIP_Init+0x254>)
 800e1da:	9302      	str	r3, [sp, #8]
 800e1dc:	4b18      	ldr	r3, [pc, #96]	; (800e240 <MX_LWIP_Init+0x258>)
 800e1de:	9301      	str	r3, [sp, #4]
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	4b14      	ldr	r3, [pc, #80]	; (800e238 <MX_LWIP_Init+0x250>)
 800e1e6:	4a13      	ldr	r2, [pc, #76]	; (800e234 <MX_LWIP_Init+0x24c>)
 800e1e8:	4911      	ldr	r1, [pc, #68]	; (800e230 <MX_LWIP_Init+0x248>)
 800e1ea:	4816      	ldr	r0, [pc, #88]	; (800e244 <MX_LWIP_Init+0x25c>)
 800e1ec:	f001 f94a 	bl	800f484 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e1f0:	4814      	ldr	r0, [pc, #80]	; (800e244 <MX_LWIP_Init+0x25c>)
 800e1f2:	f001 faf9 	bl	800f7e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e1f6:	4b13      	ldr	r3, [pc, #76]	; (800e244 <MX_LWIP_Init+0x25c>)
 800e1f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1fc:	089b      	lsrs	r3, r3, #2
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b00      	cmp	r3, #0
 800e206:	d003      	beq.n	800e210 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e208:	480e      	ldr	r0, [pc, #56]	; (800e244 <MX_LWIP_Init+0x25c>)
 800e20a:	f001 fafd 	bl	800f808 <netif_set_up>
 800e20e:	e002      	b.n	800e216 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e210:	480c      	ldr	r0, [pc, #48]	; (800e244 <MX_LWIP_Init+0x25c>)
 800e212:	f001 fb65 	bl	800f8e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e216:	490c      	ldr	r1, [pc, #48]	; (800e248 <MX_LWIP_Init+0x260>)
 800e218:	480a      	ldr	r0, [pc, #40]	; (800e244 <MX_LWIP_Init+0x25c>)
 800e21a:	f001 fbf7 	bl	800fa0c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e21e:	bf00      	nop
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	2000063c 	.word	0x2000063c
 800e228:	20000640 	.word	0x20000640
 800e22c:	20000644 	.word	0x20000644
 800e230:	20000630 	.word	0x20000630
 800e234:	20000634 	.word	0x20000634
 800e238:	20000638 	.word	0x20000638
 800e23c:	08018251 	.word	0x08018251
 800e240:	0800e491 	.word	0x0800e491
 800e244:	200005fc 	.word	0x200005fc
 800e248:	0800e24d 	.word	0x0800e24d

0800e24c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e254:	bf00      	nop
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e26c:	4b3f      	ldr	r3, [pc, #252]	; (800e36c <low_level_init+0x10c>)
 800e26e:	4a40      	ldr	r2, [pc, #256]	; (800e370 <low_level_init+0x110>)
 800e270:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800e272:	2300      	movs	r3, #0
 800e274:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800e276:	2380      	movs	r3, #128	; 0x80
 800e278:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800e27a:	23e1      	movs	r3, #225	; 0xe1
 800e27c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800e27e:	2300      	movs	r3, #0
 800e280:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800e282:	2300      	movs	r3, #0
 800e284:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800e286:	2300      	movs	r3, #0
 800e288:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800e28a:	4a38      	ldr	r2, [pc, #224]	; (800e36c <low_level_init+0x10c>)
 800e28c:	f107 0308 	add.w	r3, r7, #8
 800e290:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800e292:	4b36      	ldr	r3, [pc, #216]	; (800e36c <low_level_init+0x10c>)
 800e294:	2201      	movs	r2, #1
 800e296:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800e298:	4b34      	ldr	r3, [pc, #208]	; (800e36c <low_level_init+0x10c>)
 800e29a:	4a36      	ldr	r2, [pc, #216]	; (800e374 <low_level_init+0x114>)
 800e29c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800e29e:	4b33      	ldr	r3, [pc, #204]	; (800e36c <low_level_init+0x10c>)
 800e2a0:	4a35      	ldr	r2, [pc, #212]	; (800e378 <low_level_init+0x118>)
 800e2a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800e2a4:	4b31      	ldr	r3, [pc, #196]	; (800e36c <low_level_init+0x10c>)
 800e2a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e2aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e2ac:	482f      	ldr	r0, [pc, #188]	; (800e36c <low_level_init+0x10c>)
 800e2ae:	f7f7 f84f 	bl	8005350 <HAL_ETH_Init>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800e2b6:	2238      	movs	r2, #56	; 0x38
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	4830      	ldr	r0, [pc, #192]	; (800e37c <low_level_init+0x11c>)
 800e2bc:	f00a ff1c 	bl	80190f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800e2c0:	4b2e      	ldr	r3, [pc, #184]	; (800e37c <low_level_init+0x11c>)
 800e2c2:	2221      	movs	r2, #33	; 0x21
 800e2c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800e2c6:	4b2d      	ldr	r3, [pc, #180]	; (800e37c <low_level_init+0x11c>)
 800e2c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e2cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800e2ce:	4b2b      	ldr	r3, [pc, #172]	; (800e37c <low_level_init+0x11c>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e2d4:	482a      	ldr	r0, [pc, #168]	; (800e380 <low_level_init+0x120>)
 800e2d6:	f000 ff9d 	bl	800f214 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2206      	movs	r2, #6
 800e2de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e2e2:	4b22      	ldr	r3, [pc, #136]	; (800e36c <low_level_init+0x10c>)
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	781a      	ldrb	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e2ee:	4b1f      	ldr	r3, [pc, #124]	; (800e36c <low_level_init+0x10c>)
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	785a      	ldrb	r2, [r3, #1]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e2fa:	4b1c      	ldr	r3, [pc, #112]	; (800e36c <low_level_init+0x10c>)
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	789a      	ldrb	r2, [r3, #2]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e306:	4b19      	ldr	r3, [pc, #100]	; (800e36c <low_level_init+0x10c>)
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	78da      	ldrb	r2, [r3, #3]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e312:	4b16      	ldr	r3, [pc, #88]	; (800e36c <low_level_init+0x10c>)
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	791a      	ldrb	r2, [r3, #4]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e31e:	4b13      	ldr	r3, [pc, #76]	; (800e36c <low_level_init+0x10c>)
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	795a      	ldrb	r2, [r3, #5]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e330:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e338:	f043 030a 	orr.w	r3, r3, #10
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e344:	490f      	ldr	r1, [pc, #60]	; (800e384 <low_level_init+0x124>)
 800e346:	4810      	ldr	r0, [pc, #64]	; (800e388 <low_level_init+0x128>)
 800e348:	f7f4 fd69 	bl	8002e1e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e34c:	480e      	ldr	r0, [pc, #56]	; (800e388 <low_level_init+0x128>)
 800e34e:	f7f4 fd98 	bl	8002e82 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e352:	7bfb      	ldrb	r3, [r7, #15]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d103      	bne.n	800e360 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fa05 	bl	800e768 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e35e:	e001      	b.n	800e364 <low_level_init+0x104>
    Error_Handler();
 800e360:	f7f4 f832 	bl	80023c8 <Error_Handler>
}
 800e364:	bf00      	nop
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	20004fd4 	.word	0x20004fd4
 800e370:	40028000 	.word	0x40028000
 800e374:	20000288 	.word	0x20000288
 800e378:	20000228 	.word	0x20000228
 800e37c:	20005084 	.word	0x20005084
 800e380:	0801deac 	.word	0x0801deac
 800e384:	20000040 	.word	0x20000040
 800e388:	200050bc 	.word	0x200050bc

0800e38c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b092      	sub	sp, #72	; 0x48
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800e396:	2300      	movs	r3, #0
 800e398:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800e39a:	2300      	movs	r3, #0
 800e39c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800e3a4:	f107 030c 	add.w	r3, r7, #12
 800e3a8:	2230      	movs	r2, #48	; 0x30
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f00a fea3 	bl	80190f8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e3b2:	f107 030c 	add.w	r3, r7, #12
 800e3b6:	2230      	movs	r2, #48	; 0x30
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f00a fe9c 	bl	80190f8 <memset>

  for(q = p; q != NULL; q = q->next)
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e3c4:	e045      	b.n	800e452 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e3c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3c8:	2b03      	cmp	r3, #3
 800e3ca:	d902      	bls.n	800e3d2 <low_level_output+0x46>
      return ERR_IF;
 800e3cc:	f06f 030b 	mvn.w	r3, #11
 800e3d0:	e055      	b.n	800e47e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800e3d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3d4:	6859      	ldr	r1, [r3, #4]
 800e3d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3d8:	4613      	mov	r3, r2
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	4413      	add	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	3348      	adds	r3, #72	; 0x48
 800e3e2:	443b      	add	r3, r7
 800e3e4:	3b3c      	subs	r3, #60	; 0x3c
 800e3e6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e3e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ea:	895b      	ldrh	r3, [r3, #10]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	3348      	adds	r3, #72	; 0x48
 800e3fa:	443b      	add	r3, r7
 800e3fc:	3b38      	subs	r3, #56	; 0x38
 800e3fe:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e402:	2b00      	cmp	r3, #0
 800e404:	d011      	beq.n	800e42a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e408:	1e5a      	subs	r2, r3, #1
 800e40a:	f107 000c 	add.w	r0, r7, #12
 800e40e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e410:	460b      	mov	r3, r1
 800e412:	005b      	lsls	r3, r3, #1
 800e414:	440b      	add	r3, r1
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	18c1      	adds	r1, r0, r3
 800e41a:	4613      	mov	r3, r2
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	3348      	adds	r3, #72	; 0x48
 800e424:	443b      	add	r3, r7
 800e426:	3b34      	subs	r3, #52	; 0x34
 800e428:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d109      	bne.n	800e446 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e434:	4613      	mov	r3, r2
 800e436:	005b      	lsls	r3, r3, #1
 800e438:	4413      	add	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	3348      	adds	r3, #72	; 0x48
 800e43e:	443b      	add	r3, r7
 800e440:	3b34      	subs	r3, #52	; 0x34
 800e442:	2200      	movs	r2, #0
 800e444:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e448:	3301      	adds	r3, #1
 800e44a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	643b      	str	r3, [r7, #64]	; 0x40
 800e452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1b6      	bne.n	800e3c6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	891b      	ldrh	r3, [r3, #8]
 800e45c:	461a      	mov	r2, r3
 800e45e:	4b0a      	ldr	r3, [pc, #40]	; (800e488 <low_level_output+0xfc>)
 800e460:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e462:	4a09      	ldr	r2, [pc, #36]	; (800e488 <low_level_output+0xfc>)
 800e464:	f107 030c 	add.w	r3, r7, #12
 800e468:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e46a:	4a07      	ldr	r2, [pc, #28]	; (800e488 <low_level_output+0xfc>)
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e470:	2214      	movs	r2, #20
 800e472:	4905      	ldr	r1, [pc, #20]	; (800e488 <low_level_output+0xfc>)
 800e474:	4805      	ldr	r0, [pc, #20]	; (800e48c <low_level_output+0x100>)
 800e476:	f7f7 f903 	bl	8005680 <HAL_ETH_Transmit>

  return errval;
 800e47a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3748      	adds	r7, #72	; 0x48
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	20005084 	.word	0x20005084
 800e48c:	20004fd4 	.word	0x20004fd4

0800e490 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d106      	bne.n	800e4ac <ethernetif_init+0x1c>
 800e49e:	4b0e      	ldr	r3, [pc, #56]	; (800e4d8 <ethernetif_init+0x48>)
 800e4a0:	f240 127b 	movw	r2, #379	; 0x17b
 800e4a4:	490d      	ldr	r1, [pc, #52]	; (800e4dc <ethernetif_init+0x4c>)
 800e4a6:	480e      	ldr	r0, [pc, #56]	; (800e4e0 <ethernetif_init+0x50>)
 800e4a8:	f00a fcd0 	bl	8018e4c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2273      	movs	r2, #115	; 0x73
 800e4b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2274      	movs	r2, #116	; 0x74
 800e4b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a09      	ldr	r2, [pc, #36]	; (800e4e4 <ethernetif_init+0x54>)
 800e4c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4a08      	ldr	r2, [pc, #32]	; (800e4e8 <ethernetif_init+0x58>)
 800e4c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7ff fec9 	bl	800e260 <low_level_init>

  return ERR_OK;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	0801b46c 	.word	0x0801b46c
 800e4dc:	0801b488 	.word	0x0801b488
 800e4e0:	0801b498 	.word	0x0801b498
 800e4e4:	080166bd 	.word	0x080166bd
 800e4e8:	0800e38d 	.word	0x0800e38d

0800e4ec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e4f8:	68f9      	ldr	r1, [r7, #12]
 800e4fa:	4807      	ldr	r0, [pc, #28]	; (800e518 <pbuf_free_custom+0x2c>)
 800e4fc:	f000 ff6c 	bl	800f3d8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e500:	4b06      	ldr	r3, [pc, #24]	; (800e51c <pbuf_free_custom+0x30>)
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	2b01      	cmp	r3, #1
 800e506:	d102      	bne.n	800e50e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e508:	4b04      	ldr	r3, [pc, #16]	; (800e51c <pbuf_free_custom+0x30>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	701a      	strb	r2, [r3, #0]
  }
}
 800e50e:	bf00      	nop
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	0801deac 	.word	0x0801deac
 800e51c:	20004fd0 	.word	0x20004fd0

0800e520 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e524:	f7f4 fe62 	bl	80031ec <HAL_GetTick>
 800e528:	4603      	mov	r3, r0
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	bd80      	pop	{r7, pc}
	...

0800e530 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08e      	sub	sp, #56	; 0x38
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e53c:	2200      	movs	r2, #0
 800e53e:	601a      	str	r2, [r3, #0]
 800e540:	605a      	str	r2, [r3, #4]
 800e542:	609a      	str	r2, [r3, #8]
 800e544:	60da      	str	r2, [r3, #12]
 800e546:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a59      	ldr	r2, [pc, #356]	; (800e6b4 <HAL_ETH_MspInit+0x184>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	f040 80ab 	bne.w	800e6aa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800e554:	4b58      	ldr	r3, [pc, #352]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e556:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e55a:	4a57      	ldr	r2, [pc, #348]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e55c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e560:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e564:	4b54      	ldr	r3, [pc, #336]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e566:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e56a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e56e:	623b      	str	r3, [r7, #32]
 800e570:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800e572:	4b51      	ldr	r3, [pc, #324]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e578:	4a4f      	ldr	r2, [pc, #316]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e57a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e57e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e582:	4b4d      	ldr	r3, [pc, #308]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e584:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e58c:	61fb      	str	r3, [r7, #28]
 800e58e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800e590:	4b49      	ldr	r3, [pc, #292]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e592:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e596:	4a48      	ldr	r2, [pc, #288]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e59c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e5a0:	4b45      	ldr	r3, [pc, #276]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e5a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5aa:	61bb      	str	r3, [r7, #24]
 800e5ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e5ae:	4b42      	ldr	r3, [pc, #264]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5b4:	4a40      	ldr	r2, [pc, #256]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5b6:	f043 0304 	orr.w	r3, r3, #4
 800e5ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e5be:	4b3e      	ldr	r3, [pc, #248]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5c4:	f003 0304 	and.w	r3, r3, #4
 800e5c8:	617b      	str	r3, [r7, #20]
 800e5ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5cc:	4b3a      	ldr	r3, [pc, #232]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5d2:	4a39      	ldr	r2, [pc, #228]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5d4:	f043 0301 	orr.w	r3, r3, #1
 800e5d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e5dc:	4b36      	ldr	r3, [pc, #216]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5e2:	f003 0301 	and.w	r3, r3, #1
 800e5e6:	613b      	str	r3, [r7, #16]
 800e5e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e5ea:	4b33      	ldr	r3, [pc, #204]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5f0:	4a31      	ldr	r2, [pc, #196]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5f2:	f043 0302 	orr.w	r3, r3, #2
 800e5f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e5fa:	4b2f      	ldr	r3, [pc, #188]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e5fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e600:	f003 0302 	and.w	r3, r3, #2
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e608:	4b2b      	ldr	r3, [pc, #172]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e60a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e60e:	4a2a      	ldr	r2, [pc, #168]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e618:	4b27      	ldr	r3, [pc, #156]	; (800e6b8 <HAL_ETH_MspInit+0x188>)
 800e61a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e622:	60bb      	str	r3, [r7, #8]
 800e624:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800e626:	2332      	movs	r3, #50	; 0x32
 800e628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e62a:	2302      	movs	r3, #2
 800e62c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e62e:	2300      	movs	r3, #0
 800e630:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e632:	2300      	movs	r3, #0
 800e634:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e636:	230b      	movs	r3, #11
 800e638:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e63a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e63e:	4619      	mov	r1, r3
 800e640:	481e      	ldr	r0, [pc, #120]	; (800e6bc <HAL_ETH_MspInit+0x18c>)
 800e642:	f7f8 f985 	bl	8006950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800e646:	2386      	movs	r3, #134	; 0x86
 800e648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e64a:	2302      	movs	r3, #2
 800e64c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e652:	2300      	movs	r3, #0
 800e654:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e656:	230b      	movs	r3, #11
 800e658:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e65a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e65e:	4619      	mov	r1, r3
 800e660:	4817      	ldr	r0, [pc, #92]	; (800e6c0 <HAL_ETH_MspInit+0x190>)
 800e662:	f7f8 f975 	bl	8006950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e66a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e66c:	2302      	movs	r3, #2
 800e66e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e670:	2300      	movs	r3, #0
 800e672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e674:	2300      	movs	r3, #0
 800e676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e678:	230b      	movs	r3, #11
 800e67a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e67c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e680:	4619      	mov	r1, r3
 800e682:	4810      	ldr	r0, [pc, #64]	; (800e6c4 <HAL_ETH_MspInit+0x194>)
 800e684:	f7f8 f964 	bl	8006950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800e688:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e68c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e68e:	2302      	movs	r3, #2
 800e690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e692:	2300      	movs	r3, #0
 800e694:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e696:	2300      	movs	r3, #0
 800e698:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e69a:	230b      	movs	r3, #11
 800e69c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e69e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	4808      	ldr	r0, [pc, #32]	; (800e6c8 <HAL_ETH_MspInit+0x198>)
 800e6a6:	f7f8 f953 	bl	8006950 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e6aa:	bf00      	nop
 800e6ac:	3738      	adds	r7, #56	; 0x38
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	40028000 	.word	0x40028000
 800e6b8:	58024400 	.word	0x58024400
 800e6bc:	58020800 	.word	0x58020800
 800e6c0:	58020000 	.word	0x58020000
 800e6c4:	58020400 	.word	0x58020400
 800e6c8:	58021800 	.word	0x58021800

0800e6cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e6d0:	4802      	ldr	r0, [pc, #8]	; (800e6dc <ETH_PHY_IO_Init+0x10>)
 800e6d2:	f7f7 fb71 	bl	8005db8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	20004fd4 	.word	0x20004fd4

0800e6e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	af00      	add	r7, sp, #0
  return 0;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	68f9      	ldr	r1, [r7, #12]
 800e702:	4807      	ldr	r0, [pc, #28]	; (800e720 <ETH_PHY_IO_ReadReg+0x30>)
 800e704:	f7f7 f8c1 	bl	800588a <HAL_ETH_ReadPHYRegister>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d002      	beq.n	800e714 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e70e:	f04f 33ff 	mov.w	r3, #4294967295
 800e712:	e000      	b.n	800e716 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	20004fd4 	.word	0x20004fd4

0800e724 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	68f9      	ldr	r1, [r7, #12]
 800e736:	4807      	ldr	r0, [pc, #28]	; (800e754 <ETH_PHY_IO_WriteReg+0x30>)
 800e738:	f7f7 f8fc 	bl	8005934 <HAL_ETH_WritePHYRegister>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d002      	beq.n	800e748 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e742:	f04f 33ff 	mov.w	r3, #4294967295
 800e746:	e000      	b.n	800e74a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	20004fd4 	.word	0x20004fd4

0800e758 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e75c:	f7f4 fd46 	bl	80031ec <HAL_GetTick>
 800e760:	4603      	mov	r3, r0
}
 800e762:	4618      	mov	r0, r3
 800e764:	bd80      	pop	{r7, pc}
	...

0800e768 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b0a0      	sub	sp, #128	; 0x80
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e770:	f107 030c 	add.w	r3, r7, #12
 800e774:	2264      	movs	r2, #100	; 0x64
 800e776:	2100      	movs	r1, #0
 800e778:	4618      	mov	r0, r3
 800e77a:	f00a fcbd 	bl	80190f8 <memset>
  int32_t PHYLinkState = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e782:	2300      	movs	r3, #0
 800e784:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e786:	2300      	movs	r3, #0
 800e788:	67bb      	str	r3, [r7, #120]	; 0x78
 800e78a:	2300      	movs	r3, #0
 800e78c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e78e:	483a      	ldr	r0, [pc, #232]	; (800e878 <ethernet_link_check_state+0x110>)
 800e790:	f7f4 fc1f 	bl	8002fd2 <LAN8742_GetLinkState>
 800e794:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e79c:	089b      	lsrs	r3, r3, #2
 800e79e:	f003 0301 	and.w	r3, r3, #1
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00c      	beq.n	800e7c2 <ethernet_link_check_state+0x5a>
 800e7a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	dc09      	bgt.n	800e7c2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800e7ae:	4833      	ldr	r0, [pc, #204]	; (800e87c <ethernet_link_check_state+0x114>)
 800e7b0:	f7f6 ff16 	bl	80055e0 <HAL_ETH_Stop>
    netif_set_down(netif);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f001 f893 	bl	800f8e0 <netif_set_down>
    netif_set_link_down(netif);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f001 f8f6 	bl	800f9ac <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800e7c0:	e055      	b.n	800e86e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7c8:	f003 0304 	and.w	r3, r3, #4
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d14e      	bne.n	800e86e <ethernet_link_check_state+0x106>
 800e7d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	dd4b      	ble.n	800e86e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800e7d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7d8:	3b02      	subs	r3, #2
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d82a      	bhi.n	800e834 <ethernet_link_check_state+0xcc>
 800e7de:	a201      	add	r2, pc, #4	; (adr r2, 800e7e4 <ethernet_link_check_state+0x7c>)
 800e7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e4:	0800e7f5 	.word	0x0800e7f5
 800e7e8:	0800e807 	.word	0x0800e807
 800e7ec:	0800e817 	.word	0x0800e817
 800e7f0:	0800e827 	.word	0x0800e827
      duplex = ETH_FULLDUPLEX_MODE;
 800e7f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e7fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e7fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e800:	2301      	movs	r3, #1
 800e802:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e804:	e017      	b.n	800e836 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800e806:	2300      	movs	r3, #0
 800e808:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e80a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e80e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e810:	2301      	movs	r3, #1
 800e812:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e814:	e00f      	b.n	800e836 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800e816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e81a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e81c:	2300      	movs	r3, #0
 800e81e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e820:	2301      	movs	r3, #1
 800e822:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e824:	e007      	b.n	800e836 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800e826:	2300      	movs	r3, #0
 800e828:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e82a:	2300      	movs	r3, #0
 800e82c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e82e:	2301      	movs	r3, #1
 800e830:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e832:	e000      	b.n	800e836 <ethernet_link_check_state+0xce>
      break;
 800e834:	bf00      	nop
    if(linkchanged)
 800e836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d018      	beq.n	800e86e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e83c:	f107 030c 	add.w	r3, r7, #12
 800e840:	4619      	mov	r1, r3
 800e842:	480e      	ldr	r0, [pc, #56]	; (800e87c <ethernet_link_check_state+0x114>)
 800e844:	f7f7 f8ca 	bl	80059dc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e84a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800e84c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e84e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e850:	f107 030c 	add.w	r3, r7, #12
 800e854:	4619      	mov	r1, r3
 800e856:	4809      	ldr	r0, [pc, #36]	; (800e87c <ethernet_link_check_state+0x114>)
 800e858:	f7f7 fa94 	bl	8005d84 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800e85c:	4807      	ldr	r0, [pc, #28]	; (800e87c <ethernet_link_check_state+0x114>)
 800e85e:	f7f6 fe5d 	bl	800551c <HAL_ETH_Start>
      netif_set_up(netif);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 ffd0 	bl	800f808 <netif_set_up>
      netif_set_link_up(netif);
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 f86b 	bl	800f944 <netif_set_link_up>
}
 800e86e:	bf00      	nop
 800e870:	3780      	adds	r7, #128	; 0x80
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	200050bc 	.word	0x200050bc
 800e87c:	20004fd4 	.word	0x20004fd4

0800e880 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af02      	add	r7, sp, #8
 800e886:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e888:	4812      	ldr	r0, [pc, #72]	; (800e8d4 <HAL_ETH_RxAllocateCallback+0x54>)
 800e88a:	f000 fd37 	bl	800f2fc <memp_malloc_pool>
 800e88e:	60f8      	str	r0, [r7, #12]
  if (p)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d014      	beq.n	800e8c0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f103 0220 	add.w	r2, r3, #32
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	4a0d      	ldr	r2, [pc, #52]	; (800e8d8 <HAL_ETH_RxAllocateCallback+0x58>)
 800e8a4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e8ae:	9201      	str	r2, [sp, #4]
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2241      	movs	r2, #65	; 0x41
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	f001 fa4d 	bl	800fd58 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e8be:	e005      	b.n	800e8cc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e8c0:	4b06      	ldr	r3, [pc, #24]	; (800e8dc <HAL_ETH_RxAllocateCallback+0x5c>)
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	601a      	str	r2, [r3, #0]
}
 800e8cc:	bf00      	nop
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	0801deac 	.word	0x0801deac
 800e8d8:	0800e4ed 	.word	0x0800e4ed
 800e8dc:	20004fd0 	.word	0x20004fd0

0800e8e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e8ea:	88fb      	ldrh	r3, [r7, #6]
 800e8ec:	021b      	lsls	r3, r3, #8
 800e8ee:	b21a      	sxth	r2, r3
 800e8f0:	88fb      	ldrh	r3, [r7, #6]
 800e8f2:	0a1b      	lsrs	r3, r3, #8
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	b21b      	sxth	r3, r3
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	b21b      	sxth	r3, r3
 800e8fc:	b29b      	uxth	r3, r3
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	370c      	adds	r7, #12
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr

0800e90a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	061a      	lsls	r2, r3, #24
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	021b      	lsls	r3, r3, #8
 800e91a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e91e:	431a      	orrs	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	0a1b      	lsrs	r3, r3, #8
 800e924:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e928:	431a      	orrs	r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	0e1b      	lsrs	r3, r3, #24
 800e92e:	4313      	orrs	r3, r2
}
 800e930:	4618      	mov	r0, r3
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b089      	sub	sp, #36	; 0x24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	f003 0301 	and.w	r3, r3, #1
 800e958:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00d      	beq.n	800e97c <lwip_standard_chksum+0x40>
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	dd0a      	ble.n	800e97c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800e966:	69fa      	ldr	r2, [r7, #28]
 800e968:	1c53      	adds	r3, r2, #1
 800e96a:	61fb      	str	r3, [r7, #28]
 800e96c:	f107 030e 	add.w	r3, r7, #14
 800e970:	3301      	adds	r3, #1
 800e972:	7812      	ldrb	r2, [r2, #0]
 800e974:	701a      	strb	r2, [r3, #0]
    len--;
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	3b01      	subs	r3, #1
 800e97a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800e980:	e00a      	b.n	800e998 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	1c9a      	adds	r2, r3, #2
 800e986:	61ba      	str	r2, [r7, #24]
 800e988:	881b      	ldrh	r3, [r3, #0]
 800e98a:	461a      	mov	r2, r3
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	4413      	add	r3, r2
 800e990:	617b      	str	r3, [r7, #20]
    len -= 2;
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	3b02      	subs	r3, #2
 800e996:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	dcf1      	bgt.n	800e982 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	dd04      	ble.n	800e9ae <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e9a4:	f107 030e 	add.w	r3, r7, #14
 800e9a8:	69ba      	ldr	r2, [r7, #24]
 800e9aa:	7812      	ldrb	r2, [r2, #0]
 800e9ac:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800e9ae:	89fb      	ldrh	r3, [r7, #14]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	0c1a      	lsrs	r2, r3, #16
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	4413      	add	r3, r2
 800e9c2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	0c1a      	lsrs	r2, r3, #16
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	4413      	add	r3, r2
 800e9ce:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d007      	beq.n	800e9e6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	021b      	lsls	r3, r3, #8
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	0a1b      	lsrs	r3, r3, #8
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	b29b      	uxth	r3, r3
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3724      	adds	r7, #36	; 0x24
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr

0800e9f6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b082      	sub	sp, #8
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	460b      	mov	r3, r1
 800ea00:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ea02:	887b      	ldrh	r3, [r7, #2]
 800ea04:	4619      	mov	r1, r3
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7ff ff98 	bl	800e93c <lwip_standard_chksum>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	43db      	mvns	r3, r3
 800ea10:	b29b      	uxth	r3, r3
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3708      	adds	r7, #8
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b086      	sub	sp, #24
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	613b      	str	r3, [r7, #16]
 800ea2e:	e02b      	b.n	800ea88 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	685a      	ldr	r2, [r3, #4]
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	895b      	ldrh	r3, [r3, #10]
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4610      	mov	r0, r2
 800ea3c:	f7ff ff7e 	bl	800e93c <lwip_standard_chksum>
 800ea40:	4603      	mov	r3, r0
 800ea42:	461a      	mov	r2, r3
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	4413      	add	r3, r2
 800ea48:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	0c1a      	lsrs	r2, r3, #16
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	4413      	add	r3, r2
 800ea54:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	895b      	ldrh	r3, [r3, #10]
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00e      	beq.n	800ea82 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	bf0c      	ite	eq
 800ea6a:	2301      	moveq	r3, #1
 800ea6c:	2300      	movne	r3, #0
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	021b      	lsls	r3, r3, #8
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	0a1b      	lsrs	r3, r3, #8
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d1d0      	bne.n	800ea30 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d007      	beq.n	800eaa4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	021b      	lsls	r3, r3, #8
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	0a1b      	lsrs	r3, r3, #8
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	43db      	mvns	r3, r3
 800eaaa:	b29b      	uxth	r3, r3
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800eabe:	f000 f8d5 	bl	800ec6c <mem_init>
  memp_init();
 800eac2:	f000 fbd7 	bl	800f274 <memp_init>
  pbuf_init();
  netif_init();
 800eac6:	f000 fcd5 	bl	800f474 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800eaca:	f006 fff1 	bl	8015ab0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800eace:	f001 fd8b 	bl	80105e8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ead2:	f006 ffa5 	bl	8015a20 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ead6:	bf00      	nop
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
	...

0800eae0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	4603      	mov	r3, r0
 800eae8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800eaea:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <ptr_to_mem+0x20>)
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	88fb      	ldrh	r3, [r7, #6]
 800eaf0:	4413      	add	r3, r2
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	370c      	adds	r7, #12
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	200050f4 	.word	0x200050f4

0800eb04 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800eb0c:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <mem_to_ptr+0x20>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	1ad3      	subs	r3, r2, r3
 800eb14:	b29b      	uxth	r3, r3
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	370c      	adds	r7, #12
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	200050f4 	.word	0x200050f4

0800eb28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800eb28:	b590      	push	{r4, r7, lr}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eb30:	4b45      	ldr	r3, [pc, #276]	; (800ec48 <plug_holes+0x120>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d206      	bcs.n	800eb48 <plug_holes+0x20>
 800eb3a:	4b44      	ldr	r3, [pc, #272]	; (800ec4c <plug_holes+0x124>)
 800eb3c:	f240 12df 	movw	r2, #479	; 0x1df
 800eb40:	4943      	ldr	r1, [pc, #268]	; (800ec50 <plug_holes+0x128>)
 800eb42:	4844      	ldr	r0, [pc, #272]	; (800ec54 <plug_holes+0x12c>)
 800eb44:	f00a f982 	bl	8018e4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eb48:	4b43      	ldr	r3, [pc, #268]	; (800ec58 <plug_holes+0x130>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d306      	bcc.n	800eb60 <plug_holes+0x38>
 800eb52:	4b3e      	ldr	r3, [pc, #248]	; (800ec4c <plug_holes+0x124>)
 800eb54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eb58:	4940      	ldr	r1, [pc, #256]	; (800ec5c <plug_holes+0x134>)
 800eb5a:	483e      	ldr	r0, [pc, #248]	; (800ec54 <plug_holes+0x12c>)
 800eb5c:	f00a f976 	bl	8018e4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	791b      	ldrb	r3, [r3, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d006      	beq.n	800eb76 <plug_holes+0x4e>
 800eb68:	4b38      	ldr	r3, [pc, #224]	; (800ec4c <plug_holes+0x124>)
 800eb6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eb6e:	493c      	ldr	r1, [pc, #240]	; (800ec60 <plug_holes+0x138>)
 800eb70:	4838      	ldr	r0, [pc, #224]	; (800ec54 <plug_holes+0x12c>)
 800eb72:	f00a f96b 	bl	8018e4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eb7e:	d906      	bls.n	800eb8e <plug_holes+0x66>
 800eb80:	4b32      	ldr	r3, [pc, #200]	; (800ec4c <plug_holes+0x124>)
 800eb82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800eb86:	4937      	ldr	r1, [pc, #220]	; (800ec64 <plug_holes+0x13c>)
 800eb88:	4832      	ldr	r0, [pc, #200]	; (800ec54 <plug_holes+0x12c>)
 800eb8a:	f00a f95f 	bl	8018e4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff ffa4 	bl	800eae0 <ptr_to_mem>
 800eb98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d024      	beq.n	800ebec <plug_holes+0xc4>
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	791b      	ldrb	r3, [r3, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d120      	bne.n	800ebec <plug_holes+0xc4>
 800ebaa:	4b2b      	ldr	r3, [pc, #172]	; (800ec58 <plug_holes+0x130>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d01b      	beq.n	800ebec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ebb4:	4b2c      	ldr	r3, [pc, #176]	; (800ec68 <plug_holes+0x140>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d102      	bne.n	800ebc4 <plug_holes+0x9c>
      lfree = mem;
 800ebbe:	4a2a      	ldr	r2, [pc, #168]	; (800ec68 <plug_holes+0x140>)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	881a      	ldrh	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ebd4:	d00a      	beq.n	800ebec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7ff ff80 	bl	800eae0 <ptr_to_mem>
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7ff ff8e 	bl	800eb04 <mem_to_ptr>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	885b      	ldrh	r3, [r3, #2]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff ff75 	bl	800eae0 <ptr_to_mem>
 800ebf6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ebf8:	68ba      	ldr	r2, [r7, #8]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d01f      	beq.n	800ec40 <plug_holes+0x118>
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	791b      	ldrb	r3, [r3, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d11b      	bne.n	800ec40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ec08:	4b17      	ldr	r3, [pc, #92]	; (800ec68 <plug_holes+0x140>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d102      	bne.n	800ec18 <plug_holes+0xf0>
      lfree = pmem;
 800ec12:	4a15      	ldr	r2, [pc, #84]	; (800ec68 <plug_holes+0x140>)
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	881a      	ldrh	r2, [r3, #0]
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	881b      	ldrh	r3, [r3, #0]
 800ec24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ec28:	d00a      	beq.n	800ec40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	881b      	ldrh	r3, [r3, #0]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff ff56 	bl	800eae0 <ptr_to_mem>
 800ec34:	4604      	mov	r4, r0
 800ec36:	68b8      	ldr	r0, [r7, #8]
 800ec38:	f7ff ff64 	bl	800eb04 <mem_to_ptr>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ec40:	bf00      	nop
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd90      	pop	{r4, r7, pc}
 800ec48:	200050f4 	.word	0x200050f4
 800ec4c:	0801b4c0 	.word	0x0801b4c0
 800ec50:	0801b4f0 	.word	0x0801b4f0
 800ec54:	0801b508 	.word	0x0801b508
 800ec58:	200050f8 	.word	0x200050f8
 800ec5c:	0801b530 	.word	0x0801b530
 800ec60:	0801b54c 	.word	0x0801b54c
 800ec64:	0801b568 	.word	0x0801b568
 800ec68:	200050fc 	.word	0x200050fc

0800ec6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ec72:	4b16      	ldr	r3, [pc, #88]	; (800eccc <mem_init+0x60>)
 800ec74:	4a16      	ldr	r2, [pc, #88]	; (800ecd0 <mem_init+0x64>)
 800ec76:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ec78:	4b14      	ldr	r3, [pc, #80]	; (800eccc <mem_init+0x60>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ec84:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ec92:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ec96:	f7ff ff23 	bl	800eae0 <ptr_to_mem>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	4a0d      	ldr	r2, [pc, #52]	; (800ecd4 <mem_init+0x68>)
 800ec9e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800eca0:	4b0c      	ldr	r3, [pc, #48]	; (800ecd4 <mem_init+0x68>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2201      	movs	r2, #1
 800eca6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800eca8:	4b0a      	ldr	r3, [pc, #40]	; (800ecd4 <mem_init+0x68>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ecb0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ecb2:	4b08      	ldr	r3, [pc, #32]	; (800ecd4 <mem_init+0x68>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ecba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ecbc:	4b03      	ldr	r3, [pc, #12]	; (800eccc <mem_init+0x60>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a05      	ldr	r2, [pc, #20]	; (800ecd8 <mem_init+0x6c>)
 800ecc2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ecc4:	bf00      	nop
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	200050f4 	.word	0x200050f4
 800ecd0:	30044000 	.word	0x30044000
 800ecd4:	200050f8 	.word	0x200050f8
 800ecd8:	200050fc 	.word	0x200050fc

0800ecdc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f7ff ff0d 	bl	800eb04 <mem_to_ptr>
 800ecea:	4603      	mov	r3, r0
 800ecec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7ff fef4 	bl	800eae0 <ptr_to_mem>
 800ecf8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	885b      	ldrh	r3, [r3, #2]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff feee 	bl	800eae0 <ptr_to_mem>
 800ed04:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	881b      	ldrh	r3, [r3, #0]
 800ed0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed0e:	d818      	bhi.n	800ed42 <mem_link_valid+0x66>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	885b      	ldrh	r3, [r3, #2]
 800ed14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed18:	d813      	bhi.n	800ed42 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ed1e:	8afa      	ldrh	r2, [r7, #22]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d004      	beq.n	800ed2e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	881b      	ldrh	r3, [r3, #0]
 800ed28:	8afa      	ldrh	r2, [r7, #22]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d109      	bne.n	800ed42 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ed2e:	4b08      	ldr	r3, [pc, #32]	; (800ed50 <mem_link_valid+0x74>)
 800ed30:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed32:	693a      	ldr	r2, [r7, #16]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d006      	beq.n	800ed46 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	885b      	ldrh	r3, [r3, #2]
 800ed3c:	8afa      	ldrh	r2, [r7, #22]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d001      	beq.n	800ed46 <mem_link_valid+0x6a>
    return 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	e000      	b.n	800ed48 <mem_link_valid+0x6c>
  }
  return 1;
 800ed46:	2301      	movs	r3, #1
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3718      	adds	r7, #24
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	200050f8 	.word	0x200050f8

0800ed54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d04c      	beq.n	800edfc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f003 0303 	and.w	r3, r3, #3
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d007      	beq.n	800ed7c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ed6c:	4b25      	ldr	r3, [pc, #148]	; (800ee04 <mem_free+0xb0>)
 800ed6e:	f240 2273 	movw	r2, #627	; 0x273
 800ed72:	4925      	ldr	r1, [pc, #148]	; (800ee08 <mem_free+0xb4>)
 800ed74:	4825      	ldr	r0, [pc, #148]	; (800ee0c <mem_free+0xb8>)
 800ed76:	f00a f869 	bl	8018e4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ed7a:	e040      	b.n	800edfe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	3b08      	subs	r3, #8
 800ed80:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ed82:	4b23      	ldr	r3, [pc, #140]	; (800ee10 <mem_free+0xbc>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d306      	bcc.n	800ed9a <mem_free+0x46>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f103 020c 	add.w	r2, r3, #12
 800ed92:	4b20      	ldr	r3, [pc, #128]	; (800ee14 <mem_free+0xc0>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d907      	bls.n	800edaa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ed9a:	4b1a      	ldr	r3, [pc, #104]	; (800ee04 <mem_free+0xb0>)
 800ed9c:	f240 227f 	movw	r2, #639	; 0x27f
 800eda0:	491d      	ldr	r1, [pc, #116]	; (800ee18 <mem_free+0xc4>)
 800eda2:	481a      	ldr	r0, [pc, #104]	; (800ee0c <mem_free+0xb8>)
 800eda4:	f00a f852 	bl	8018e4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800eda8:	e029      	b.n	800edfe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	791b      	ldrb	r3, [r3, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d107      	bne.n	800edc2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800edb2:	4b14      	ldr	r3, [pc, #80]	; (800ee04 <mem_free+0xb0>)
 800edb4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800edb8:	4918      	ldr	r1, [pc, #96]	; (800ee1c <mem_free+0xc8>)
 800edba:	4814      	ldr	r0, [pc, #80]	; (800ee0c <mem_free+0xb8>)
 800edbc:	f00a f846 	bl	8018e4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800edc0:	e01d      	b.n	800edfe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f7ff ff8a 	bl	800ecdc <mem_link_valid>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d107      	bne.n	800edde <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800edce:	4b0d      	ldr	r3, [pc, #52]	; (800ee04 <mem_free+0xb0>)
 800edd0:	f240 2295 	movw	r2, #661	; 0x295
 800edd4:	4912      	ldr	r1, [pc, #72]	; (800ee20 <mem_free+0xcc>)
 800edd6:	480d      	ldr	r0, [pc, #52]	; (800ee0c <mem_free+0xb8>)
 800edd8:	f00a f838 	bl	8018e4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800eddc:	e00f      	b.n	800edfe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ede4:	4b0f      	ldr	r3, [pc, #60]	; (800ee24 <mem_free+0xd0>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	429a      	cmp	r2, r3
 800edec:	d202      	bcs.n	800edf4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800edee:	4a0d      	ldr	r2, [pc, #52]	; (800ee24 <mem_free+0xd0>)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7ff fe97 	bl	800eb28 <plug_holes>
 800edfa:	e000      	b.n	800edfe <mem_free+0xaa>
    return;
 800edfc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800edfe:	3710      	adds	r7, #16
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	0801b4c0 	.word	0x0801b4c0
 800ee08:	0801b594 	.word	0x0801b594
 800ee0c:	0801b508 	.word	0x0801b508
 800ee10:	200050f4 	.word	0x200050f4
 800ee14:	200050f8 	.word	0x200050f8
 800ee18:	0801b5b8 	.word	0x0801b5b8
 800ee1c:	0801b5d4 	.word	0x0801b5d4
 800ee20:	0801b5fc 	.word	0x0801b5fc
 800ee24:	200050fc 	.word	0x200050fc

0800ee28 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b088      	sub	sp, #32
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	460b      	mov	r3, r1
 800ee32:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ee34:	887b      	ldrh	r3, [r7, #2]
 800ee36:	3303      	adds	r3, #3
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	f023 0303 	bic.w	r3, r3, #3
 800ee3e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ee40:	8bfb      	ldrh	r3, [r7, #30]
 800ee42:	2b0b      	cmp	r3, #11
 800ee44:	d801      	bhi.n	800ee4a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ee46:	230c      	movs	r3, #12
 800ee48:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ee4a:	8bfb      	ldrh	r3, [r7, #30]
 800ee4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee50:	d803      	bhi.n	800ee5a <mem_trim+0x32>
 800ee52:	8bfa      	ldrh	r2, [r7, #30]
 800ee54:	887b      	ldrh	r3, [r7, #2]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d201      	bcs.n	800ee5e <mem_trim+0x36>
    return NULL;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	e0cc      	b.n	800eff8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ee5e:	4b68      	ldr	r3, [pc, #416]	; (800f000 <mem_trim+0x1d8>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d304      	bcc.n	800ee72 <mem_trim+0x4a>
 800ee68:	4b66      	ldr	r3, [pc, #408]	; (800f004 <mem_trim+0x1dc>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d306      	bcc.n	800ee80 <mem_trim+0x58>
 800ee72:	4b65      	ldr	r3, [pc, #404]	; (800f008 <mem_trim+0x1e0>)
 800ee74:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ee78:	4964      	ldr	r1, [pc, #400]	; (800f00c <mem_trim+0x1e4>)
 800ee7a:	4865      	ldr	r0, [pc, #404]	; (800f010 <mem_trim+0x1e8>)
 800ee7c:	f009 ffe6 	bl	8018e4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ee80:	4b5f      	ldr	r3, [pc, #380]	; (800f000 <mem_trim+0x1d8>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d304      	bcc.n	800ee94 <mem_trim+0x6c>
 800ee8a:	4b5e      	ldr	r3, [pc, #376]	; (800f004 <mem_trim+0x1dc>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d301      	bcc.n	800ee98 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	e0af      	b.n	800eff8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	3b08      	subs	r3, #8
 800ee9c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ee9e:	69b8      	ldr	r0, [r7, #24]
 800eea0:	f7ff fe30 	bl	800eb04 <mem_to_ptr>
 800eea4:	4603      	mov	r3, r0
 800eea6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	881a      	ldrh	r2, [r3, #0]
 800eeac:	8afb      	ldrh	r3, [r7, #22]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	3b08      	subs	r3, #8
 800eeb4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800eeb6:	8bfa      	ldrh	r2, [r7, #30]
 800eeb8:	8abb      	ldrh	r3, [r7, #20]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d906      	bls.n	800eecc <mem_trim+0xa4>
 800eebe:	4b52      	ldr	r3, [pc, #328]	; (800f008 <mem_trim+0x1e0>)
 800eec0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800eec4:	4953      	ldr	r1, [pc, #332]	; (800f014 <mem_trim+0x1ec>)
 800eec6:	4852      	ldr	r0, [pc, #328]	; (800f010 <mem_trim+0x1e8>)
 800eec8:	f009 ffc0 	bl	8018e4c <iprintf>
  if (newsize > size) {
 800eecc:	8bfa      	ldrh	r2, [r7, #30]
 800eece:	8abb      	ldrh	r3, [r7, #20]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d901      	bls.n	800eed8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800eed4:	2300      	movs	r3, #0
 800eed6:	e08f      	b.n	800eff8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800eed8:	8bfa      	ldrh	r2, [r7, #30]
 800eeda:	8abb      	ldrh	r3, [r7, #20]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d101      	bne.n	800eee4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	e089      	b.n	800eff8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	881b      	ldrh	r3, [r3, #0]
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7ff fdf9 	bl	800eae0 <ptr_to_mem>
 800eeee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	791b      	ldrb	r3, [r3, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d13f      	bne.n	800ef78 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef00:	d106      	bne.n	800ef10 <mem_trim+0xe8>
 800ef02:	4b41      	ldr	r3, [pc, #260]	; (800f008 <mem_trim+0x1e0>)
 800ef04:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ef08:	4943      	ldr	r1, [pc, #268]	; (800f018 <mem_trim+0x1f0>)
 800ef0a:	4841      	ldr	r0, [pc, #260]	; (800f010 <mem_trim+0x1e8>)
 800ef0c:	f009 ff9e 	bl	8018e4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ef16:	8afa      	ldrh	r2, [r7, #22]
 800ef18:	8bfb      	ldrh	r3, [r7, #30]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	3308      	adds	r3, #8
 800ef20:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ef22:	4b3e      	ldr	r3, [pc, #248]	; (800f01c <mem_trim+0x1f4>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	693a      	ldr	r2, [r7, #16]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d106      	bne.n	800ef3a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ef2c:	89fb      	ldrh	r3, [r7, #14]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7ff fdd6 	bl	800eae0 <ptr_to_mem>
 800ef34:	4603      	mov	r3, r0
 800ef36:	4a39      	ldr	r2, [pc, #228]	; (800f01c <mem_trim+0x1f4>)
 800ef38:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ef3a:	89fb      	ldrh	r3, [r7, #14]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fdcf 	bl	800eae0 <ptr_to_mem>
 800ef42:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	2200      	movs	r2, #0
 800ef48:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	89ba      	ldrh	r2, [r7, #12]
 800ef4e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	8afa      	ldrh	r2, [r7, #22]
 800ef54:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	89fa      	ldrh	r2, [r7, #14]
 800ef5a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	881b      	ldrh	r3, [r3, #0]
 800ef60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef64:	d047      	beq.n	800eff6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	881b      	ldrh	r3, [r3, #0]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7ff fdb8 	bl	800eae0 <ptr_to_mem>
 800ef70:	4602      	mov	r2, r0
 800ef72:	89fb      	ldrh	r3, [r7, #14]
 800ef74:	8053      	strh	r3, [r2, #2]
 800ef76:	e03e      	b.n	800eff6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ef78:	8bfb      	ldrh	r3, [r7, #30]
 800ef7a:	f103 0214 	add.w	r2, r3, #20
 800ef7e:	8abb      	ldrh	r3, [r7, #20]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d838      	bhi.n	800eff6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ef84:	8afa      	ldrh	r2, [r7, #22]
 800ef86:	8bfb      	ldrh	r3, [r7, #30]
 800ef88:	4413      	add	r3, r2
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	3308      	adds	r3, #8
 800ef8e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	881b      	ldrh	r3, [r3, #0]
 800ef94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef98:	d106      	bne.n	800efa8 <mem_trim+0x180>
 800ef9a:	4b1b      	ldr	r3, [pc, #108]	; (800f008 <mem_trim+0x1e0>)
 800ef9c:	f240 3216 	movw	r2, #790	; 0x316
 800efa0:	491d      	ldr	r1, [pc, #116]	; (800f018 <mem_trim+0x1f0>)
 800efa2:	481b      	ldr	r0, [pc, #108]	; (800f010 <mem_trim+0x1e8>)
 800efa4:	f009 ff52 	bl	8018e4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800efa8:	89fb      	ldrh	r3, [r7, #14]
 800efaa:	4618      	mov	r0, r3
 800efac:	f7ff fd98 	bl	800eae0 <ptr_to_mem>
 800efb0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800efb2:	4b1a      	ldr	r3, [pc, #104]	; (800f01c <mem_trim+0x1f4>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	693a      	ldr	r2, [r7, #16]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d202      	bcs.n	800efc2 <mem_trim+0x19a>
      lfree = mem2;
 800efbc:	4a17      	ldr	r2, [pc, #92]	; (800f01c <mem_trim+0x1f4>)
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	2200      	movs	r2, #0
 800efc6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	881a      	ldrh	r2, [r3, #0]
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	8afa      	ldrh	r2, [r7, #22]
 800efd4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	89fa      	ldrh	r2, [r7, #14]
 800efda:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800efe4:	d007      	beq.n	800eff6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	881b      	ldrh	r3, [r3, #0]
 800efea:	4618      	mov	r0, r3
 800efec:	f7ff fd78 	bl	800eae0 <ptr_to_mem>
 800eff0:	4602      	mov	r2, r0
 800eff2:	89fb      	ldrh	r3, [r7, #14]
 800eff4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800eff6:	687b      	ldr	r3, [r7, #4]
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3720      	adds	r7, #32
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	200050f4 	.word	0x200050f4
 800f004:	200050f8 	.word	0x200050f8
 800f008:	0801b4c0 	.word	0x0801b4c0
 800f00c:	0801b630 	.word	0x0801b630
 800f010:	0801b508 	.word	0x0801b508
 800f014:	0801b648 	.word	0x0801b648
 800f018:	0801b668 	.word	0x0801b668
 800f01c:	200050fc 	.word	0x200050fc

0800f020 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af00      	add	r7, sp, #0
 800f026:	4603      	mov	r3, r0
 800f028:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f02a:	88fb      	ldrh	r3, [r7, #6]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d101      	bne.n	800f034 <mem_malloc+0x14>
    return NULL;
 800f030:	2300      	movs	r3, #0
 800f032:	e0d9      	b.n	800f1e8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f034:	88fb      	ldrh	r3, [r7, #6]
 800f036:	3303      	adds	r3, #3
 800f038:	b29b      	uxth	r3, r3
 800f03a:	f023 0303 	bic.w	r3, r3, #3
 800f03e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f040:	8bbb      	ldrh	r3, [r7, #28]
 800f042:	2b0b      	cmp	r3, #11
 800f044:	d801      	bhi.n	800f04a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f046:	230c      	movs	r3, #12
 800f048:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f04a:	8bbb      	ldrh	r3, [r7, #28]
 800f04c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f050:	d803      	bhi.n	800f05a <mem_malloc+0x3a>
 800f052:	8bba      	ldrh	r2, [r7, #28]
 800f054:	88fb      	ldrh	r3, [r7, #6]
 800f056:	429a      	cmp	r2, r3
 800f058:	d201      	bcs.n	800f05e <mem_malloc+0x3e>
    return NULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	e0c4      	b.n	800f1e8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f05e:	4b64      	ldr	r3, [pc, #400]	; (800f1f0 <mem_malloc+0x1d0>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	4618      	mov	r0, r3
 800f064:	f7ff fd4e 	bl	800eb04 <mem_to_ptr>
 800f068:	4603      	mov	r3, r0
 800f06a:	83fb      	strh	r3, [r7, #30]
 800f06c:	e0b4      	b.n	800f1d8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f06e:	8bfb      	ldrh	r3, [r7, #30]
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff fd35 	bl	800eae0 <ptr_to_mem>
 800f076:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	791b      	ldrb	r3, [r3, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f040 80a4 	bne.w	800f1ca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	881b      	ldrh	r3, [r3, #0]
 800f086:	461a      	mov	r2, r3
 800f088:	8bfb      	ldrh	r3, [r7, #30]
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	f1a3 0208 	sub.w	r2, r3, #8
 800f090:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f092:	429a      	cmp	r2, r3
 800f094:	f0c0 8099 	bcc.w	800f1ca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	881b      	ldrh	r3, [r3, #0]
 800f09c:	461a      	mov	r2, r3
 800f09e:	8bfb      	ldrh	r3, [r7, #30]
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	f1a3 0208 	sub.w	r2, r3, #8
 800f0a6:	8bbb      	ldrh	r3, [r7, #28]
 800f0a8:	3314      	adds	r3, #20
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d333      	bcc.n	800f116 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f0ae:	8bfa      	ldrh	r2, [r7, #30]
 800f0b0:	8bbb      	ldrh	r3, [r7, #28]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	3308      	adds	r3, #8
 800f0b8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f0ba:	8a7b      	ldrh	r3, [r7, #18]
 800f0bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0c0:	d106      	bne.n	800f0d0 <mem_malloc+0xb0>
 800f0c2:	4b4c      	ldr	r3, [pc, #304]	; (800f1f4 <mem_malloc+0x1d4>)
 800f0c4:	f240 3287 	movw	r2, #903	; 0x387
 800f0c8:	494b      	ldr	r1, [pc, #300]	; (800f1f8 <mem_malloc+0x1d8>)
 800f0ca:	484c      	ldr	r0, [pc, #304]	; (800f1fc <mem_malloc+0x1dc>)
 800f0cc:	f009 febe 	bl	8018e4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f0d0:	8a7b      	ldrh	r3, [r7, #18]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7ff fd04 	bl	800eae0 <ptr_to_mem>
 800f0d8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	881a      	ldrh	r2, [r3, #0]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	8bfa      	ldrh	r2, [r7, #30]
 800f0ec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	8a7a      	ldrh	r2, [r7, #18]
 800f0f2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	881b      	ldrh	r3, [r3, #0]
 800f0fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f102:	d00b      	beq.n	800f11c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	881b      	ldrh	r3, [r3, #0]
 800f108:	4618      	mov	r0, r3
 800f10a:	f7ff fce9 	bl	800eae0 <ptr_to_mem>
 800f10e:	4602      	mov	r2, r0
 800f110:	8a7b      	ldrh	r3, [r7, #18]
 800f112:	8053      	strh	r3, [r2, #2]
 800f114:	e002      	b.n	800f11c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2201      	movs	r2, #1
 800f11a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f11c:	4b34      	ldr	r3, [pc, #208]	; (800f1f0 <mem_malloc+0x1d0>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	697a      	ldr	r2, [r7, #20]
 800f122:	429a      	cmp	r2, r3
 800f124:	d127      	bne.n	800f176 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800f126:	4b32      	ldr	r3, [pc, #200]	; (800f1f0 <mem_malloc+0x1d0>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f12c:	e005      	b.n	800f13a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f12e:	69bb      	ldr	r3, [r7, #24]
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	4618      	mov	r0, r3
 800f134:	f7ff fcd4 	bl	800eae0 <ptr_to_mem>
 800f138:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	791b      	ldrb	r3, [r3, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d004      	beq.n	800f14c <mem_malloc+0x12c>
 800f142:	4b2f      	ldr	r3, [pc, #188]	; (800f200 <mem_malloc+0x1e0>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	69ba      	ldr	r2, [r7, #24]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d1f0      	bne.n	800f12e <mem_malloc+0x10e>
          }
          lfree = cur;
 800f14c:	4a28      	ldr	r2, [pc, #160]	; (800f1f0 <mem_malloc+0x1d0>)
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f152:	4b27      	ldr	r3, [pc, #156]	; (800f1f0 <mem_malloc+0x1d0>)
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	4b2a      	ldr	r3, [pc, #168]	; (800f200 <mem_malloc+0x1e0>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d00b      	beq.n	800f176 <mem_malloc+0x156>
 800f15e:	4b24      	ldr	r3, [pc, #144]	; (800f1f0 <mem_malloc+0x1d0>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	791b      	ldrb	r3, [r3, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d006      	beq.n	800f176 <mem_malloc+0x156>
 800f168:	4b22      	ldr	r3, [pc, #136]	; (800f1f4 <mem_malloc+0x1d4>)
 800f16a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f16e:	4925      	ldr	r1, [pc, #148]	; (800f204 <mem_malloc+0x1e4>)
 800f170:	4822      	ldr	r0, [pc, #136]	; (800f1fc <mem_malloc+0x1dc>)
 800f172:	f009 fe6b 	bl	8018e4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f176:	8bba      	ldrh	r2, [r7, #28]
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	4413      	add	r3, r2
 800f17c:	3308      	adds	r3, #8
 800f17e:	4a20      	ldr	r2, [pc, #128]	; (800f200 <mem_malloc+0x1e0>)
 800f180:	6812      	ldr	r2, [r2, #0]
 800f182:	4293      	cmp	r3, r2
 800f184:	d906      	bls.n	800f194 <mem_malloc+0x174>
 800f186:	4b1b      	ldr	r3, [pc, #108]	; (800f1f4 <mem_malloc+0x1d4>)
 800f188:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f18c:	491e      	ldr	r1, [pc, #120]	; (800f208 <mem_malloc+0x1e8>)
 800f18e:	481b      	ldr	r0, [pc, #108]	; (800f1fc <mem_malloc+0x1dc>)
 800f190:	f009 fe5c 	bl	8018e4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f003 0303 	and.w	r3, r3, #3
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d006      	beq.n	800f1ac <mem_malloc+0x18c>
 800f19e:	4b15      	ldr	r3, [pc, #84]	; (800f1f4 <mem_malloc+0x1d4>)
 800f1a0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f1a4:	4919      	ldr	r1, [pc, #100]	; (800f20c <mem_malloc+0x1ec>)
 800f1a6:	4815      	ldr	r0, [pc, #84]	; (800f1fc <mem_malloc+0x1dc>)
 800f1a8:	f009 fe50 	bl	8018e4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	f003 0303 	and.w	r3, r3, #3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d006      	beq.n	800f1c4 <mem_malloc+0x1a4>
 800f1b6:	4b0f      	ldr	r3, [pc, #60]	; (800f1f4 <mem_malloc+0x1d4>)
 800f1b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f1bc:	4914      	ldr	r1, [pc, #80]	; (800f210 <mem_malloc+0x1f0>)
 800f1be:	480f      	ldr	r0, [pc, #60]	; (800f1fc <mem_malloc+0x1dc>)
 800f1c0:	f009 fe44 	bl	8018e4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	3308      	adds	r3, #8
 800f1c8:	e00e      	b.n	800f1e8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800f1ca:	8bfb      	ldrh	r3, [r7, #30]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7ff fc87 	bl	800eae0 <ptr_to_mem>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	881b      	ldrh	r3, [r3, #0]
 800f1d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f1d8:	8bfa      	ldrh	r2, [r7, #30]
 800f1da:	8bbb      	ldrh	r3, [r7, #28]
 800f1dc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	f4ff af44 	bcc.w	800f06e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3720      	adds	r7, #32
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	200050fc 	.word	0x200050fc
 800f1f4:	0801b4c0 	.word	0x0801b4c0
 800f1f8:	0801b668 	.word	0x0801b668
 800f1fc:	0801b508 	.word	0x0801b508
 800f200:	200050f8 	.word	0x200050f8
 800f204:	0801b67c 	.word	0x0801b67c
 800f208:	0801b698 	.word	0x0801b698
 800f20c:	0801b6c8 	.word	0x0801b6c8
 800f210:	0801b6f8 	.word	0x0801b6f8

0800f214 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f214:	b480      	push	{r7}
 800f216:	b085      	sub	sp, #20
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	2200      	movs	r2, #0
 800f222:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	3303      	adds	r3, #3
 800f22a:	f023 0303 	bic.w	r3, r3, #3
 800f22e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f230:	2300      	movs	r3, #0
 800f232:	60fb      	str	r3, [r7, #12]
 800f234:	e011      	b.n	800f25a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	881b      	ldrh	r3, [r3, #0]
 800f24c:	461a      	mov	r2, r3
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	4413      	add	r3, r2
 800f252:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	3301      	adds	r3, #1
 800f258:	60fb      	str	r3, [r7, #12]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	885b      	ldrh	r3, [r3, #2]
 800f25e:	461a      	mov	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	4293      	cmp	r3, r2
 800f264:	dbe7      	blt.n	800f236 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f266:	bf00      	nop
 800f268:	bf00      	nop
 800f26a:	3714      	adds	r7, #20
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f27a:	2300      	movs	r3, #0
 800f27c:	80fb      	strh	r3, [r7, #6]
 800f27e:	e009      	b.n	800f294 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f280:	88fb      	ldrh	r3, [r7, #6]
 800f282:	4a08      	ldr	r2, [pc, #32]	; (800f2a4 <memp_init+0x30>)
 800f284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f288:	4618      	mov	r0, r3
 800f28a:	f7ff ffc3 	bl	800f214 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f28e:	88fb      	ldrh	r3, [r7, #6]
 800f290:	3301      	adds	r3, #1
 800f292:	80fb      	strh	r3, [r7, #6]
 800f294:	88fb      	ldrh	r3, [r7, #6]
 800f296:	2b08      	cmp	r3, #8
 800f298:	d9f2      	bls.n	800f280 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f29a:	bf00      	nop
 800f29c:	bf00      	nop
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	0801df24 	.word	0x0801df24

0800f2a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d012      	beq.n	800f2e4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	6812      	ldr	r2, [r2, #0]
 800f2c6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f003 0303 	and.w	r3, r3, #3
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d006      	beq.n	800f2e0 <do_memp_malloc_pool+0x38>
 800f2d2:	4b07      	ldr	r3, [pc, #28]	; (800f2f0 <do_memp_malloc_pool+0x48>)
 800f2d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f2d8:	4906      	ldr	r1, [pc, #24]	; (800f2f4 <do_memp_malloc_pool+0x4c>)
 800f2da:	4807      	ldr	r0, [pc, #28]	; (800f2f8 <do_memp_malloc_pool+0x50>)
 800f2dc:	f009 fdb6 	bl	8018e4c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	e000      	b.n	800f2e6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f2e4:	2300      	movs	r3, #0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	0801b71c 	.word	0x0801b71c
 800f2f4:	0801b74c 	.word	0x0801b74c
 800f2f8:	0801b770 	.word	0x0801b770

0800f2fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d106      	bne.n	800f318 <memp_malloc_pool+0x1c>
 800f30a:	4b0a      	ldr	r3, [pc, #40]	; (800f334 <memp_malloc_pool+0x38>)
 800f30c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f310:	4909      	ldr	r1, [pc, #36]	; (800f338 <memp_malloc_pool+0x3c>)
 800f312:	480a      	ldr	r0, [pc, #40]	; (800f33c <memp_malloc_pool+0x40>)
 800f314:	f009 fd9a 	bl	8018e4c <iprintf>
  if (desc == NULL) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d101      	bne.n	800f322 <memp_malloc_pool+0x26>
    return NULL;
 800f31e:	2300      	movs	r3, #0
 800f320:	e003      	b.n	800f32a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7ff ffc0 	bl	800f2a8 <do_memp_malloc_pool>
 800f328:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	0801b71c 	.word	0x0801b71c
 800f338:	0801b798 	.word	0x0801b798
 800f33c:	0801b770 	.word	0x0801b770

0800f340 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	4603      	mov	r3, r0
 800f348:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f34a:	79fb      	ldrb	r3, [r7, #7]
 800f34c:	2b08      	cmp	r3, #8
 800f34e:	d908      	bls.n	800f362 <memp_malloc+0x22>
 800f350:	4b0a      	ldr	r3, [pc, #40]	; (800f37c <memp_malloc+0x3c>)
 800f352:	f240 1257 	movw	r2, #343	; 0x157
 800f356:	490a      	ldr	r1, [pc, #40]	; (800f380 <memp_malloc+0x40>)
 800f358:	480a      	ldr	r0, [pc, #40]	; (800f384 <memp_malloc+0x44>)
 800f35a:	f009 fd77 	bl	8018e4c <iprintf>
 800f35e:	2300      	movs	r3, #0
 800f360:	e008      	b.n	800f374 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f362:	79fb      	ldrb	r3, [r7, #7]
 800f364:	4a08      	ldr	r2, [pc, #32]	; (800f388 <memp_malloc+0x48>)
 800f366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7ff ff9c 	bl	800f2a8 <do_memp_malloc_pool>
 800f370:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f372:	68fb      	ldr	r3, [r7, #12]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	0801b71c 	.word	0x0801b71c
 800f380:	0801b7ac 	.word	0x0801b7ac
 800f384:	0801b770 	.word	0x0801b770
 800f388:	0801df24 	.word	0x0801df24

0800f38c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	f003 0303 	and.w	r3, r3, #3
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d006      	beq.n	800f3ae <do_memp_free_pool+0x22>
 800f3a0:	4b0a      	ldr	r3, [pc, #40]	; (800f3cc <do_memp_free_pool+0x40>)
 800f3a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f3a6:	490a      	ldr	r1, [pc, #40]	; (800f3d0 <do_memp_free_pool+0x44>)
 800f3a8:	480a      	ldr	r0, [pc, #40]	; (800f3d4 <do_memp_free_pool+0x48>)
 800f3aa:	f009 fd4f 	bl	8018e4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f3c4:	bf00      	nop
 800f3c6:	3710      	adds	r7, #16
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	0801b71c 	.word	0x0801b71c
 800f3d0:	0801b7cc 	.word	0x0801b7cc
 800f3d4:	0801b770 	.word	0x0801b770

0800f3d8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d106      	bne.n	800f3f6 <memp_free_pool+0x1e>
 800f3e8:	4b0a      	ldr	r3, [pc, #40]	; (800f414 <memp_free_pool+0x3c>)
 800f3ea:	f240 1295 	movw	r2, #405	; 0x195
 800f3ee:	490a      	ldr	r1, [pc, #40]	; (800f418 <memp_free_pool+0x40>)
 800f3f0:	480a      	ldr	r0, [pc, #40]	; (800f41c <memp_free_pool+0x44>)
 800f3f2:	f009 fd2b 	bl	8018e4c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d007      	beq.n	800f40c <memp_free_pool+0x34>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d004      	beq.n	800f40c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f402:	6839      	ldr	r1, [r7, #0]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff ffc1 	bl	800f38c <do_memp_free_pool>
 800f40a:	e000      	b.n	800f40e <memp_free_pool+0x36>
    return;
 800f40c:	bf00      	nop
}
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	0801b71c 	.word	0x0801b71c
 800f418:	0801b798 	.word	0x0801b798
 800f41c:	0801b770 	.word	0x0801b770

0800f420 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	4603      	mov	r3, r0
 800f428:	6039      	str	r1, [r7, #0]
 800f42a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	2b08      	cmp	r3, #8
 800f430:	d907      	bls.n	800f442 <memp_free+0x22>
 800f432:	4b0c      	ldr	r3, [pc, #48]	; (800f464 <memp_free+0x44>)
 800f434:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f438:	490b      	ldr	r1, [pc, #44]	; (800f468 <memp_free+0x48>)
 800f43a:	480c      	ldr	r0, [pc, #48]	; (800f46c <memp_free+0x4c>)
 800f43c:	f009 fd06 	bl	8018e4c <iprintf>
 800f440:	e00c      	b.n	800f45c <memp_free+0x3c>

  if (mem == NULL) {
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d008      	beq.n	800f45a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f448:	79fb      	ldrb	r3, [r7, #7]
 800f44a:	4a09      	ldr	r2, [pc, #36]	; (800f470 <memp_free+0x50>)
 800f44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f450:	6839      	ldr	r1, [r7, #0]
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff ff9a 	bl	800f38c <do_memp_free_pool>
 800f458:	e000      	b.n	800f45c <memp_free+0x3c>
    return;
 800f45a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	0801b71c 	.word	0x0801b71c
 800f468:	0801b7ec 	.word	0x0801b7ec
 800f46c:	0801b770 	.word	0x0801b770
 800f470:	0801df24 	.word	0x0801df24

0800f474 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f474:	b480      	push	{r7}
 800f476:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f478:	bf00      	nop
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
	...

0800f484 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
 800f490:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d108      	bne.n	800f4aa <netif_add+0x26>
 800f498:	4b57      	ldr	r3, [pc, #348]	; (800f5f8 <netif_add+0x174>)
 800f49a:	f240 1227 	movw	r2, #295	; 0x127
 800f49e:	4957      	ldr	r1, [pc, #348]	; (800f5fc <netif_add+0x178>)
 800f4a0:	4857      	ldr	r0, [pc, #348]	; (800f600 <netif_add+0x17c>)
 800f4a2:	f009 fcd3 	bl	8018e4c <iprintf>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	e0a2      	b.n	800f5f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d108      	bne.n	800f4c2 <netif_add+0x3e>
 800f4b0:	4b51      	ldr	r3, [pc, #324]	; (800f5f8 <netif_add+0x174>)
 800f4b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f4b6:	4953      	ldr	r1, [pc, #332]	; (800f604 <netif_add+0x180>)
 800f4b8:	4851      	ldr	r0, [pc, #324]	; (800f600 <netif_add+0x17c>)
 800f4ba:	f009 fcc7 	bl	8018e4c <iprintf>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e096      	b.n	800f5f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d101      	bne.n	800f4cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f4c8:	4b4f      	ldr	r3, [pc, #316]	; (800f608 <netif_add+0x184>)
 800f4ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d101      	bne.n	800f4d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f4d2:	4b4d      	ldr	r3, [pc, #308]	; (800f608 <netif_add+0x184>)
 800f4d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d101      	bne.n	800f4e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f4dc:	4b4a      	ldr	r3, [pc, #296]	; (800f608 <netif_add+0x184>)
 800f4de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	4a45      	ldr	r2, [pc, #276]	; (800f60c <netif_add+0x188>)
 800f4f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2200      	movs	r2, #0
 800f502:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2200      	movs	r2, #0
 800f50a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6a3a      	ldr	r2, [r7, #32]
 800f510:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f512:	4b3f      	ldr	r3, [pc, #252]	; (800f610 <netif_add+0x18c>)
 800f514:	781a      	ldrb	r2, [r3, #0]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f520:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	68b9      	ldr	r1, [r7, #8]
 800f528:	68f8      	ldr	r0, [r7, #12]
 800f52a:	f000 f913 	bl	800f754 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	4798      	blx	r3
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <netif_add+0xba>
    return NULL;
 800f53a:	2300      	movs	r3, #0
 800f53c:	e058      	b.n	800f5f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f544:	2bff      	cmp	r3, #255	; 0xff
 800f546:	d103      	bne.n	800f550 <netif_add+0xcc>
        netif->num = 0;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2200      	movs	r2, #0
 800f54c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f550:	2300      	movs	r3, #0
 800f552:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f554:	4b2f      	ldr	r3, [pc, #188]	; (800f614 <netif_add+0x190>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	617b      	str	r3, [r7, #20]
 800f55a:	e02b      	b.n	800f5b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f55c:	697a      	ldr	r2, [r7, #20]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	429a      	cmp	r2, r3
 800f562:	d106      	bne.n	800f572 <netif_add+0xee>
 800f564:	4b24      	ldr	r3, [pc, #144]	; (800f5f8 <netif_add+0x174>)
 800f566:	f240 128b 	movw	r2, #395	; 0x18b
 800f56a:	492b      	ldr	r1, [pc, #172]	; (800f618 <netif_add+0x194>)
 800f56c:	4824      	ldr	r0, [pc, #144]	; (800f600 <netif_add+0x17c>)
 800f56e:	f009 fc6d 	bl	8018e4c <iprintf>
        num_netifs++;
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	3301      	adds	r3, #1
 800f576:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	2bff      	cmp	r3, #255	; 0xff
 800f57c:	dd06      	ble.n	800f58c <netif_add+0x108>
 800f57e:	4b1e      	ldr	r3, [pc, #120]	; (800f5f8 <netif_add+0x174>)
 800f580:	f240 128d 	movw	r2, #397	; 0x18d
 800f584:	4925      	ldr	r1, [pc, #148]	; (800f61c <netif_add+0x198>)
 800f586:	481e      	ldr	r0, [pc, #120]	; (800f600 <netif_add+0x17c>)
 800f588:	f009 fc60 	bl	8018e4c <iprintf>
        if (netif2->num == netif->num) {
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f598:	429a      	cmp	r2, r3
 800f59a:	d108      	bne.n	800f5ae <netif_add+0x12a>
          netif->num++;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	b2da      	uxtb	r2, r3
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f5ac:	e005      	b.n	800f5ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	617b      	str	r3, [r7, #20]
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1d0      	bne.n	800f55c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1be      	bne.n	800f53e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5c6:	2bfe      	cmp	r3, #254	; 0xfe
 800f5c8:	d103      	bne.n	800f5d2 <netif_add+0x14e>
    netif_num = 0;
 800f5ca:	4b11      	ldr	r3, [pc, #68]	; (800f610 <netif_add+0x18c>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	e006      	b.n	800f5e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5d8:	3301      	adds	r3, #1
 800f5da:	b2da      	uxtb	r2, r3
 800f5dc:	4b0c      	ldr	r3, [pc, #48]	; (800f610 <netif_add+0x18c>)
 800f5de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f5e0:	4b0c      	ldr	r3, [pc, #48]	; (800f614 <netif_add+0x190>)
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f5e8:	4a0a      	ldr	r2, [pc, #40]	; (800f614 <netif_add+0x190>)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3718      	adds	r7, #24
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	0801b808 	.word	0x0801b808
 800f5fc:	0801b89c 	.word	0x0801b89c
 800f600:	0801b858 	.word	0x0801b858
 800f604:	0801b8b8 	.word	0x0801b8b8
 800f608:	0801df88 	.word	0x0801df88
 800f60c:	0800fa2f 	.word	0x0800fa2f
 800f610:	20007ff4 	.word	0x20007ff4
 800f614:	20007fec 	.word	0x20007fec
 800f618:	0801b8dc 	.word	0x0801b8dc
 800f61c:	0801b8f0 	.word	0x0801b8f0

0800f620 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f62a:	6839      	ldr	r1, [r7, #0]
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f002 fb23 	bl	8011c78 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f006 fbc5 	bl	8015dc4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f63a:	bf00      	nop
 800f63c:	3708      	adds	r7, #8
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
	...

0800f644 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <netif_do_set_ipaddr+0x20>
 800f656:	4b1d      	ldr	r3, [pc, #116]	; (800f6cc <netif_do_set_ipaddr+0x88>)
 800f658:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f65c:	491c      	ldr	r1, [pc, #112]	; (800f6d0 <netif_do_set_ipaddr+0x8c>)
 800f65e:	481d      	ldr	r0, [pc, #116]	; (800f6d4 <netif_do_set_ipaddr+0x90>)
 800f660:	f009 fbf4 	bl	8018e4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d106      	bne.n	800f678 <netif_do_set_ipaddr+0x34>
 800f66a:	4b18      	ldr	r3, [pc, #96]	; (800f6cc <netif_do_set_ipaddr+0x88>)
 800f66c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f670:	4917      	ldr	r1, [pc, #92]	; (800f6d0 <netif_do_set_ipaddr+0x8c>)
 800f672:	4818      	ldr	r0, [pc, #96]	; (800f6d4 <netif_do_set_ipaddr+0x90>)
 800f674:	f009 fbea 	bl	8018e4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	3304      	adds	r3, #4
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	429a      	cmp	r2, r3
 800f684:	d01c      	beq.n	800f6c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	3304      	adds	r3, #4
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f696:	f107 0314 	add.w	r3, r7, #20
 800f69a:	4619      	mov	r1, r3
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7ff ffbf 	bl	800f620 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d002      	beq.n	800f6ae <netif_do_set_ipaddr+0x6a>
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	e000      	b.n	800f6b0 <netif_do_set_ipaddr+0x6c>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f000 f8d2 	bl	800f860 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f6bc:	2301      	movs	r3, #1
 800f6be:	e000      	b.n	800f6c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3718      	adds	r7, #24
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	0801b808 	.word	0x0801b808
 800f6d0:	0801b920 	.word	0x0801b920
 800f6d4:	0801b858 	.word	0x0801b858

0800f6d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	3308      	adds	r3, #8
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d00a      	beq.n	800f708 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d002      	beq.n	800f6fe <netif_do_set_netmask+0x26>
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	e000      	b.n	800f700 <netif_do_set_netmask+0x28>
 800f6fe:	2300      	movs	r3, #0
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f704:	2301      	movs	r3, #1
 800f706:	e000      	b.n	800f70a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f708:	2300      	movs	r3, #0
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3714      	adds	r7, #20
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr

0800f716 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f716:	b480      	push	{r7}
 800f718:	b085      	sub	sp, #20
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	60f8      	str	r0, [r7, #12]
 800f71e:	60b9      	str	r1, [r7, #8]
 800f720:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	330c      	adds	r3, #12
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d00a      	beq.n	800f746 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d002      	beq.n	800f73c <netif_do_set_gw+0x26>
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	e000      	b.n	800f73e <netif_do_set_gw+0x28>
 800f73c:	2300      	movs	r3, #0
 800f73e:	68fa      	ldr	r2, [r7, #12]
 800f740:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f742:	2301      	movs	r3, #1
 800f744:	e000      	b.n	800f748 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f746:	2300      	movs	r3, #0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3714      	adds	r7, #20
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b088      	sub	sp, #32
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f762:	2300      	movs	r3, #0
 800f764:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f766:	2300      	movs	r3, #0
 800f768:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d101      	bne.n	800f774 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f770:	4b1c      	ldr	r3, [pc, #112]	; (800f7e4 <netif_set_addr+0x90>)
 800f772:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f77a:	4b1a      	ldr	r3, [pc, #104]	; (800f7e4 <netif_set_addr+0x90>)
 800f77c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d101      	bne.n	800f788 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f784:	4b17      	ldr	r3, [pc, #92]	; (800f7e4 <netif_set_addr+0x90>)
 800f786:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d003      	beq.n	800f796 <netif_set_addr+0x42>
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d101      	bne.n	800f79a <netif_set_addr+0x46>
 800f796:	2301      	movs	r3, #1
 800f798:	e000      	b.n	800f79c <netif_set_addr+0x48>
 800f79a:	2300      	movs	r3, #0
 800f79c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d006      	beq.n	800f7b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f7a4:	f107 0310 	add.w	r3, r7, #16
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	68b9      	ldr	r1, [r7, #8]
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f7ff ff49 	bl	800f644 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f7b2:	69fa      	ldr	r2, [r7, #28]
 800f7b4:	6879      	ldr	r1, [r7, #4]
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f7ff ff8e 	bl	800f6d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	6839      	ldr	r1, [r7, #0]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f7ff ffa8 	bl	800f716 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d106      	bne.n	800f7da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f7cc:	f107 0310 	add.w	r3, r7, #16
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	68b9      	ldr	r1, [r7, #8]
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	f7ff ff35 	bl	800f644 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f7da:	bf00      	nop
 800f7dc:	3720      	adds	r7, #32
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	0801df88 	.word	0x0801df88

0800f7e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f7f0:	4a04      	ldr	r2, [pc, #16]	; (800f804 <netif_set_default+0x1c>)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f7f6:	bf00      	nop
 800f7f8:	370c      	adds	r7, #12
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	20007ff0 	.word	0x20007ff0

0800f808 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d107      	bne.n	800f826 <netif_set_up+0x1e>
 800f816:	4b0f      	ldr	r3, [pc, #60]	; (800f854 <netif_set_up+0x4c>)
 800f818:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f81c:	490e      	ldr	r1, [pc, #56]	; (800f858 <netif_set_up+0x50>)
 800f81e:	480f      	ldr	r0, [pc, #60]	; (800f85c <netif_set_up+0x54>)
 800f820:	f009 fb14 	bl	8018e4c <iprintf>
 800f824:	e013      	b.n	800f84e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10c      	bne.n	800f84e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f83a:	f043 0301 	orr.w	r3, r3, #1
 800f83e:	b2da      	uxtb	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f846:	2103      	movs	r1, #3
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 f809 	bl	800f860 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	0801b808 	.word	0x0801b808
 800f858:	0801b990 	.word	0x0801b990
 800f85c:	0801b858 	.word	0x0801b858

0800f860 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	460b      	mov	r3, r1
 800f86a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d106      	bne.n	800f880 <netif_issue_reports+0x20>
 800f872:	4b18      	ldr	r3, [pc, #96]	; (800f8d4 <netif_issue_reports+0x74>)
 800f874:	f240 326d 	movw	r2, #877	; 0x36d
 800f878:	4917      	ldr	r1, [pc, #92]	; (800f8d8 <netif_issue_reports+0x78>)
 800f87a:	4818      	ldr	r0, [pc, #96]	; (800f8dc <netif_issue_reports+0x7c>)
 800f87c:	f009 fae6 	bl	8018e4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f886:	f003 0304 	and.w	r3, r3, #4
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d01e      	beq.n	800f8cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f894:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d017      	beq.n	800f8cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	f003 0301 	and.w	r3, r3, #1
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d013      	beq.n	800f8ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	3304      	adds	r3, #4
 800f8aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00e      	beq.n	800f8ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8b6:	f003 0308 	and.w	r3, r3, #8
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d007      	beq.n	800f8ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	3304      	adds	r3, #4
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f007 f9e7 	bl	8016c98 <etharp_request>
 800f8ca:	e000      	b.n	800f8ce <netif_issue_reports+0x6e>
    return;
 800f8cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	0801b808 	.word	0x0801b808
 800f8d8:	0801b9ac 	.word	0x0801b9ac
 800f8dc:	0801b858 	.word	0x0801b858

0800f8e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d107      	bne.n	800f8fe <netif_set_down+0x1e>
 800f8ee:	4b12      	ldr	r3, [pc, #72]	; (800f938 <netif_set_down+0x58>)
 800f8f0:	f240 329b 	movw	r2, #923	; 0x39b
 800f8f4:	4911      	ldr	r1, [pc, #68]	; (800f93c <netif_set_down+0x5c>)
 800f8f6:	4812      	ldr	r0, [pc, #72]	; (800f940 <netif_set_down+0x60>)
 800f8f8:	f009 faa8 	bl	8018e4c <iprintf>
 800f8fc:	e019      	b.n	800f932 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f904:	f003 0301 	and.w	r3, r3, #1
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d012      	beq.n	800f932 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f912:	f023 0301 	bic.w	r3, r3, #1
 800f916:	b2da      	uxtb	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f924:	f003 0308 	and.w	r3, r3, #8
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d002      	beq.n	800f932 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f006 fd71 	bl	8016414 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	0801b808 	.word	0x0801b808
 800f93c:	0801b9d0 	.word	0x0801b9d0
 800f940:	0801b858 	.word	0x0801b858

0800f944 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d107      	bne.n	800f962 <netif_set_link_up+0x1e>
 800f952:	4b13      	ldr	r3, [pc, #76]	; (800f9a0 <netif_set_link_up+0x5c>)
 800f954:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f958:	4912      	ldr	r1, [pc, #72]	; (800f9a4 <netif_set_link_up+0x60>)
 800f95a:	4813      	ldr	r0, [pc, #76]	; (800f9a8 <netif_set_link_up+0x64>)
 800f95c:	f009 fa76 	bl	8018e4c <iprintf>
 800f960:	e01b      	b.n	800f99a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f968:	f003 0304 	and.w	r3, r3, #4
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d114      	bne.n	800f99a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f976:	f043 0304 	orr.w	r3, r3, #4
 800f97a:	b2da      	uxtb	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f982:	2103      	movs	r1, #3
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f7ff ff6b 	bl	800f860 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	69db      	ldr	r3, [r3, #28]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d003      	beq.n	800f99a <netif_set_link_up+0x56>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	0801b808 	.word	0x0801b808
 800f9a4:	0801b9f0 	.word	0x0801b9f0
 800f9a8:	0801b858 	.word	0x0801b858

0800f9ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d107      	bne.n	800f9ca <netif_set_link_down+0x1e>
 800f9ba:	4b11      	ldr	r3, [pc, #68]	; (800fa00 <netif_set_link_down+0x54>)
 800f9bc:	f240 4206 	movw	r2, #1030	; 0x406
 800f9c0:	4910      	ldr	r1, [pc, #64]	; (800fa04 <netif_set_link_down+0x58>)
 800f9c2:	4811      	ldr	r0, [pc, #68]	; (800fa08 <netif_set_link_down+0x5c>)
 800f9c4:	f009 fa42 	bl	8018e4c <iprintf>
 800f9c8:	e017      	b.n	800f9fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9d0:	f003 0304 	and.w	r3, r3, #4
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d010      	beq.n	800f9fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9de:	f023 0304 	bic.w	r3, r3, #4
 800f9e2:	b2da      	uxtb	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	69db      	ldr	r3, [r3, #28]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <netif_set_link_down+0x4e>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	69db      	ldr	r3, [r3, #28]
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	0801b808 	.word	0x0801b808
 800fa04:	0801ba14 	.word	0x0801ba14
 800fa08:	0801b858 	.word	0x0801b858

0800fa0c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b083      	sub	sp, #12
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d002      	beq.n	800fa22 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	683a      	ldr	r2, [r7, #0]
 800fa20:	61da      	str	r2, [r3, #28]
  }
}
 800fa22:	bf00      	nop
 800fa24:	370c      	adds	r7, #12
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fa2e:	b480      	push	{r7}
 800fa30:	b085      	sub	sp, #20
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	60f8      	str	r0, [r7, #12]
 800fa36:	60b9      	str	r1, [r7, #8]
 800fa38:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fa3a:	f06f 030b 	mvn.w	r3, #11
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3714      	adds	r7, #20
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
	...

0800fa4c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	4603      	mov	r3, r0
 800fa54:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fa56:	79fb      	ldrb	r3, [r7, #7]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d013      	beq.n	800fa84 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fa5c:	4b0d      	ldr	r3, [pc, #52]	; (800fa94 <netif_get_by_index+0x48>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	60fb      	str	r3, [r7, #12]
 800fa62:	e00c      	b.n	800fa7e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	79fa      	ldrb	r2, [r7, #7]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d101      	bne.n	800fa78 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	e006      	b.n	800fa86 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d1ef      	bne.n	800fa64 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3714      	adds	r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop
 800fa94:	20007fec 	.word	0x20007fec

0800fa98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800fa9c:	4b03      	ldr	r3, [pc, #12]	; (800faac <pbuf_pool_is_empty+0x14>)
 800fa9e:	2201      	movs	r2, #1
 800faa0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800faa2:	bf00      	nop
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr
 800faac:	20007ff5 	.word	0x20007ff5

0800fab0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	60b9      	str	r1, [r7, #8]
 800faba:	4611      	mov	r1, r2
 800fabc:	461a      	mov	r2, r3
 800fabe:	460b      	mov	r3, r1
 800fac0:	80fb      	strh	r3, [r7, #6]
 800fac2:	4613      	mov	r3, r2
 800fac4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	88fa      	ldrh	r2, [r7, #6]
 800fad6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	88ba      	ldrh	r2, [r7, #4]
 800fadc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fade:	8b3b      	ldrh	r3, [r7, #24]
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	7f3a      	ldrb	r2, [r7, #28]
 800faea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2201      	movs	r2, #1
 800faf0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2200      	movs	r2, #0
 800faf6:	73da      	strb	r2, [r3, #15]
}
 800faf8:	bf00      	nop
 800fafa:	3714      	adds	r7, #20
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b08c      	sub	sp, #48	; 0x30
 800fb08:	af02      	add	r7, sp, #8
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	71fb      	strb	r3, [r7, #7]
 800fb0e:	460b      	mov	r3, r1
 800fb10:	80bb      	strh	r3, [r7, #4]
 800fb12:	4613      	mov	r3, r2
 800fb14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fb16:	79fb      	ldrb	r3, [r7, #7]
 800fb18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fb1a:	887b      	ldrh	r3, [r7, #2]
 800fb1c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fb20:	d07f      	beq.n	800fc22 <pbuf_alloc+0x11e>
 800fb22:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fb26:	f300 80c8 	bgt.w	800fcba <pbuf_alloc+0x1b6>
 800fb2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fb2e:	d010      	beq.n	800fb52 <pbuf_alloc+0x4e>
 800fb30:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fb34:	f300 80c1 	bgt.w	800fcba <pbuf_alloc+0x1b6>
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d002      	beq.n	800fb42 <pbuf_alloc+0x3e>
 800fb3c:	2b41      	cmp	r3, #65	; 0x41
 800fb3e:	f040 80bc 	bne.w	800fcba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fb42:	887a      	ldrh	r2, [r7, #2]
 800fb44:	88bb      	ldrh	r3, [r7, #4]
 800fb46:	4619      	mov	r1, r3
 800fb48:	2000      	movs	r0, #0
 800fb4a:	f000 f8d1 	bl	800fcf0 <pbuf_alloc_reference>
 800fb4e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fb50:	e0bd      	b.n	800fcce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fb52:	2300      	movs	r3, #0
 800fb54:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fb56:	2300      	movs	r3, #0
 800fb58:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fb5a:	88bb      	ldrh	r3, [r7, #4]
 800fb5c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fb5e:	2008      	movs	r0, #8
 800fb60:	f7ff fbee 	bl	800f340 <memp_malloc>
 800fb64:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d109      	bne.n	800fb80 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fb6c:	f7ff ff94 	bl	800fa98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d002      	beq.n	800fb7c <pbuf_alloc+0x78>
            pbuf_free(p);
 800fb76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb78:	f000 faa8 	bl	80100cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	e0a7      	b.n	800fcd0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fb80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb82:	3303      	adds	r3, #3
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	f023 0303 	bic.w	r3, r3, #3
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	8b7a      	ldrh	r2, [r7, #26]
 800fb94:	4293      	cmp	r3, r2
 800fb96:	bf28      	it	cs
 800fb98:	4613      	movcs	r3, r2
 800fb9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fb9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb9e:	3310      	adds	r3, #16
 800fba0:	693a      	ldr	r2, [r7, #16]
 800fba2:	4413      	add	r3, r2
 800fba4:	3303      	adds	r3, #3
 800fba6:	f023 0303 	bic.w	r3, r3, #3
 800fbaa:	4618      	mov	r0, r3
 800fbac:	89f9      	ldrh	r1, [r7, #14]
 800fbae:	8b7a      	ldrh	r2, [r7, #26]
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9301      	str	r3, [sp, #4]
 800fbb4:	887b      	ldrh	r3, [r7, #2]
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4601      	mov	r1, r0
 800fbbc:	6938      	ldr	r0, [r7, #16]
 800fbbe:	f7ff ff77 	bl	800fab0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	f003 0303 	and.w	r3, r3, #3
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d006      	beq.n	800fbdc <pbuf_alloc+0xd8>
 800fbce:	4b42      	ldr	r3, [pc, #264]	; (800fcd8 <pbuf_alloc+0x1d4>)
 800fbd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbd4:	4941      	ldr	r1, [pc, #260]	; (800fcdc <pbuf_alloc+0x1d8>)
 800fbd6:	4842      	ldr	r0, [pc, #264]	; (800fce0 <pbuf_alloc+0x1dc>)
 800fbd8:	f009 f938 	bl	8018e4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fbdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbde:	3303      	adds	r3, #3
 800fbe0:	f023 0303 	bic.w	r3, r3, #3
 800fbe4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fbe8:	d106      	bne.n	800fbf8 <pbuf_alloc+0xf4>
 800fbea:	4b3b      	ldr	r3, [pc, #236]	; (800fcd8 <pbuf_alloc+0x1d4>)
 800fbec:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fbf0:	493c      	ldr	r1, [pc, #240]	; (800fce4 <pbuf_alloc+0x1e0>)
 800fbf2:	483b      	ldr	r0, [pc, #236]	; (800fce0 <pbuf_alloc+0x1dc>)
 800fbf4:	f009 f92a 	bl	8018e4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d102      	bne.n	800fc04 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	627b      	str	r3, [r7, #36]	; 0x24
 800fc02:	e002      	b.n	800fc0a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	693a      	ldr	r2, [r7, #16]
 800fc08:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fc0e:	8b7a      	ldrh	r2, [r7, #26]
 800fc10:	89fb      	ldrh	r3, [r7, #14]
 800fc12:	1ad3      	subs	r3, r2, r3
 800fc14:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fc1a:	8b7b      	ldrh	r3, [r7, #26]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d19e      	bne.n	800fb5e <pbuf_alloc+0x5a>
      break;
 800fc20:	e055      	b.n	800fcce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fc22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc24:	3303      	adds	r3, #3
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	f023 0303 	bic.w	r3, r3, #3
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	88bb      	ldrh	r3, [r7, #4]
 800fc30:	3303      	adds	r3, #3
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	f023 0303 	bic.w	r3, r3, #3
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	4413      	add	r3, r2
 800fc3c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fc3e:	8b3b      	ldrh	r3, [r7, #24]
 800fc40:	3310      	adds	r3, #16
 800fc42:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fc44:	8b3a      	ldrh	r2, [r7, #24]
 800fc46:	88bb      	ldrh	r3, [r7, #4]
 800fc48:	3303      	adds	r3, #3
 800fc4a:	f023 0303 	bic.w	r3, r3, #3
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d306      	bcc.n	800fc60 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fc52:	8afa      	ldrh	r2, [r7, #22]
 800fc54:	88bb      	ldrh	r3, [r7, #4]
 800fc56:	3303      	adds	r3, #3
 800fc58:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d201      	bcs.n	800fc64 <pbuf_alloc+0x160>
        return NULL;
 800fc60:	2300      	movs	r3, #0
 800fc62:	e035      	b.n	800fcd0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fc64:	8afb      	ldrh	r3, [r7, #22]
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7ff f9da 	bl	800f020 <mem_malloc>
 800fc6c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d101      	bne.n	800fc78 <pbuf_alloc+0x174>
        return NULL;
 800fc74:	2300      	movs	r3, #0
 800fc76:	e02b      	b.n	800fcd0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fc78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc7a:	3310      	adds	r3, #16
 800fc7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc7e:	4413      	add	r3, r2
 800fc80:	3303      	adds	r3, #3
 800fc82:	f023 0303 	bic.w	r3, r3, #3
 800fc86:	4618      	mov	r0, r3
 800fc88:	88b9      	ldrh	r1, [r7, #4]
 800fc8a:	88ba      	ldrh	r2, [r7, #4]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	9301      	str	r3, [sp, #4]
 800fc90:	887b      	ldrh	r3, [r7, #2]
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	460b      	mov	r3, r1
 800fc96:	4601      	mov	r1, r0
 800fc98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc9a:	f7ff ff09 	bl	800fab0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	f003 0303 	and.w	r3, r3, #3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d010      	beq.n	800fccc <pbuf_alloc+0x1c8>
 800fcaa:	4b0b      	ldr	r3, [pc, #44]	; (800fcd8 <pbuf_alloc+0x1d4>)
 800fcac:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fcb0:	490d      	ldr	r1, [pc, #52]	; (800fce8 <pbuf_alloc+0x1e4>)
 800fcb2:	480b      	ldr	r0, [pc, #44]	; (800fce0 <pbuf_alloc+0x1dc>)
 800fcb4:	f009 f8ca 	bl	8018e4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fcb8:	e008      	b.n	800fccc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fcba:	4b07      	ldr	r3, [pc, #28]	; (800fcd8 <pbuf_alloc+0x1d4>)
 800fcbc:	f240 1227 	movw	r2, #295	; 0x127
 800fcc0:	490a      	ldr	r1, [pc, #40]	; (800fcec <pbuf_alloc+0x1e8>)
 800fcc2:	4807      	ldr	r0, [pc, #28]	; (800fce0 <pbuf_alloc+0x1dc>)
 800fcc4:	f009 f8c2 	bl	8018e4c <iprintf>
      return NULL;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e001      	b.n	800fcd0 <pbuf_alloc+0x1cc>
      break;
 800fccc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3728      	adds	r7, #40	; 0x28
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	0801ba38 	.word	0x0801ba38
 800fcdc:	0801ba68 	.word	0x0801ba68
 800fce0:	0801ba98 	.word	0x0801ba98
 800fce4:	0801bac0 	.word	0x0801bac0
 800fce8:	0801baf4 	.word	0x0801baf4
 800fcec:	0801bb20 	.word	0x0801bb20

0800fcf0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b086      	sub	sp, #24
 800fcf4:	af02      	add	r7, sp, #8
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	807b      	strh	r3, [r7, #2]
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fd00:	883b      	ldrh	r3, [r7, #0]
 800fd02:	2b41      	cmp	r3, #65	; 0x41
 800fd04:	d009      	beq.n	800fd1a <pbuf_alloc_reference+0x2a>
 800fd06:	883b      	ldrh	r3, [r7, #0]
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d006      	beq.n	800fd1a <pbuf_alloc_reference+0x2a>
 800fd0c:	4b0f      	ldr	r3, [pc, #60]	; (800fd4c <pbuf_alloc_reference+0x5c>)
 800fd0e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800fd12:	490f      	ldr	r1, [pc, #60]	; (800fd50 <pbuf_alloc_reference+0x60>)
 800fd14:	480f      	ldr	r0, [pc, #60]	; (800fd54 <pbuf_alloc_reference+0x64>)
 800fd16:	f009 f899 	bl	8018e4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fd1a:	2007      	movs	r0, #7
 800fd1c:	f7ff fb10 	bl	800f340 <memp_malloc>
 800fd20:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d101      	bne.n	800fd2c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	e00b      	b.n	800fd44 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fd2c:	8879      	ldrh	r1, [r7, #2]
 800fd2e:	887a      	ldrh	r2, [r7, #2]
 800fd30:	2300      	movs	r3, #0
 800fd32:	9301      	str	r3, [sp, #4]
 800fd34:	883b      	ldrh	r3, [r7, #0]
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	460b      	mov	r3, r1
 800fd3a:	6879      	ldr	r1, [r7, #4]
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f7ff feb7 	bl	800fab0 <pbuf_init_alloced_pbuf>
  return p;
 800fd42:	68fb      	ldr	r3, [r7, #12]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	0801ba38 	.word	0x0801ba38
 800fd50:	0801bb3c 	.word	0x0801bb3c
 800fd54:	0801ba98 	.word	0x0801ba98

0800fd58 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af02      	add	r7, sp, #8
 800fd5e:	607b      	str	r3, [r7, #4]
 800fd60:	4603      	mov	r3, r0
 800fd62:	73fb      	strb	r3, [r7, #15]
 800fd64:	460b      	mov	r3, r1
 800fd66:	81bb      	strh	r3, [r7, #12]
 800fd68:	4613      	mov	r3, r2
 800fd6a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800fd6c:	7bfb      	ldrb	r3, [r7, #15]
 800fd6e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fd70:	8a7b      	ldrh	r3, [r7, #18]
 800fd72:	3303      	adds	r3, #3
 800fd74:	f023 0203 	bic.w	r2, r3, #3
 800fd78:	89bb      	ldrh	r3, [r7, #12]
 800fd7a:	441a      	add	r2, r3
 800fd7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d901      	bls.n	800fd86 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fd82:	2300      	movs	r3, #0
 800fd84:	e018      	b.n	800fdb8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800fd86:	6a3b      	ldr	r3, [r7, #32]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d007      	beq.n	800fd9c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fd8c:	8a7b      	ldrh	r3, [r7, #18]
 800fd8e:	3303      	adds	r3, #3
 800fd90:	f023 0303 	bic.w	r3, r3, #3
 800fd94:	6a3a      	ldr	r2, [r7, #32]
 800fd96:	4413      	add	r3, r2
 800fd98:	617b      	str	r3, [r7, #20]
 800fd9a:	e001      	b.n	800fda0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	89b9      	ldrh	r1, [r7, #12]
 800fda4:	89ba      	ldrh	r2, [r7, #12]
 800fda6:	2302      	movs	r3, #2
 800fda8:	9301      	str	r3, [sp, #4]
 800fdaa:	897b      	ldrh	r3, [r7, #10]
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	460b      	mov	r3, r1
 800fdb0:	6979      	ldr	r1, [r7, #20]
 800fdb2:	f7ff fe7d 	bl	800fab0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800fdb6:	687b      	ldr	r3, [r7, #4]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	460b      	mov	r3, r1
 800fdca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d106      	bne.n	800fde0 <pbuf_realloc+0x20>
 800fdd2:	4b3a      	ldr	r3, [pc, #232]	; (800febc <pbuf_realloc+0xfc>)
 800fdd4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fdd8:	4939      	ldr	r1, [pc, #228]	; (800fec0 <pbuf_realloc+0x100>)
 800fdda:	483a      	ldr	r0, [pc, #232]	; (800fec4 <pbuf_realloc+0x104>)
 800fddc:	f009 f836 	bl	8018e4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	891b      	ldrh	r3, [r3, #8]
 800fde4:	887a      	ldrh	r2, [r7, #2]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d263      	bcs.n	800feb2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	891a      	ldrh	r2, [r3, #8]
 800fdee:	887b      	ldrh	r3, [r7, #2]
 800fdf0:	1ad3      	subs	r3, r2, r3
 800fdf2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fdf4:	887b      	ldrh	r3, [r7, #2]
 800fdf6:	817b      	strh	r3, [r7, #10]
  q = p;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fdfc:	e018      	b.n	800fe30 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	895b      	ldrh	r3, [r3, #10]
 800fe02:	897a      	ldrh	r2, [r7, #10]
 800fe04:	1ad3      	subs	r3, r2, r3
 800fe06:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	891a      	ldrh	r2, [r3, #8]
 800fe0c:	893b      	ldrh	r3, [r7, #8]
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	b29a      	uxth	r2, r3
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d106      	bne.n	800fe30 <pbuf_realloc+0x70>
 800fe22:	4b26      	ldr	r3, [pc, #152]	; (800febc <pbuf_realloc+0xfc>)
 800fe24:	f240 12af 	movw	r2, #431	; 0x1af
 800fe28:	4927      	ldr	r1, [pc, #156]	; (800fec8 <pbuf_realloc+0x108>)
 800fe2a:	4826      	ldr	r0, [pc, #152]	; (800fec4 <pbuf_realloc+0x104>)
 800fe2c:	f009 f80e 	bl	8018e4c <iprintf>
  while (rem_len > q->len) {
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	895b      	ldrh	r3, [r3, #10]
 800fe34:	897a      	ldrh	r2, [r7, #10]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d8e1      	bhi.n	800fdfe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	7b1b      	ldrb	r3, [r3, #12]
 800fe3e:	f003 030f 	and.w	r3, r3, #15
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d121      	bne.n	800fe8a <pbuf_realloc+0xca>
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	895b      	ldrh	r3, [r3, #10]
 800fe4a:	897a      	ldrh	r2, [r7, #10]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d01c      	beq.n	800fe8a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	7b5b      	ldrb	r3, [r3, #13]
 800fe54:	f003 0302 	and.w	r3, r3, #2
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d116      	bne.n	800fe8a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	685a      	ldr	r2, [r3, #4]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	897b      	ldrh	r3, [r7, #10]
 800fe68:	4413      	add	r3, r2
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	f7fe ffda 	bl	800ee28 <mem_trim>
 800fe74:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d106      	bne.n	800fe8a <pbuf_realloc+0xca>
 800fe7c:	4b0f      	ldr	r3, [pc, #60]	; (800febc <pbuf_realloc+0xfc>)
 800fe7e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800fe82:	4912      	ldr	r1, [pc, #72]	; (800fecc <pbuf_realloc+0x10c>)
 800fe84:	480f      	ldr	r0, [pc, #60]	; (800fec4 <pbuf_realloc+0x104>)
 800fe86:	f008 ffe1 	bl	8018e4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	897a      	ldrh	r2, [r7, #10]
 800fe8e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	895a      	ldrh	r2, [r3, #10]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d004      	beq.n	800feaa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4618      	mov	r0, r3
 800fea6:	f000 f911 	bl	80100cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2200      	movs	r2, #0
 800feae:	601a      	str	r2, [r3, #0]
 800feb0:	e000      	b.n	800feb4 <pbuf_realloc+0xf4>
    return;
 800feb2:	bf00      	nop

}
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	0801ba38 	.word	0x0801ba38
 800fec0:	0801bb50 	.word	0x0801bb50
 800fec4:	0801ba98 	.word	0x0801ba98
 800fec8:	0801bb68 	.word	0x0801bb68
 800fecc:	0801bb80 	.word	0x0801bb80

0800fed0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	4613      	mov	r3, r2
 800fedc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d106      	bne.n	800fef2 <pbuf_add_header_impl+0x22>
 800fee4:	4b2b      	ldr	r3, [pc, #172]	; (800ff94 <pbuf_add_header_impl+0xc4>)
 800fee6:	f240 12df 	movw	r2, #479	; 0x1df
 800feea:	492b      	ldr	r1, [pc, #172]	; (800ff98 <pbuf_add_header_impl+0xc8>)
 800feec:	482b      	ldr	r0, [pc, #172]	; (800ff9c <pbuf_add_header_impl+0xcc>)
 800feee:	f008 ffad 	bl	8018e4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d003      	beq.n	800ff00 <pbuf_add_header_impl+0x30>
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fefe:	d301      	bcc.n	800ff04 <pbuf_add_header_impl+0x34>
    return 1;
 800ff00:	2301      	movs	r3, #1
 800ff02:	e043      	b.n	800ff8c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d101      	bne.n	800ff0e <pbuf_add_header_impl+0x3e>
    return 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	e03e      	b.n	800ff8c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	891a      	ldrh	r2, [r3, #8]
 800ff16:	8a7b      	ldrh	r3, [r7, #18]
 800ff18:	4413      	add	r3, r2
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	8a7a      	ldrh	r2, [r7, #18]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d901      	bls.n	800ff26 <pbuf_add_header_impl+0x56>
    return 1;
 800ff22:	2301      	movs	r3, #1
 800ff24:	e032      	b.n	800ff8c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	7b1b      	ldrb	r3, [r3, #12]
 800ff2a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ff2c:	8a3b      	ldrh	r3, [r7, #16]
 800ff2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00c      	beq.n	800ff50 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	685a      	ldr	r2, [r3, #4]
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	425b      	negs	r3, r3
 800ff3e:	4413      	add	r3, r2
 800ff40:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	3310      	adds	r3, #16
 800ff46:	697a      	ldr	r2, [r7, #20]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d20d      	bcs.n	800ff68 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e01d      	b.n	800ff8c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ff50:	79fb      	ldrb	r3, [r7, #7]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d006      	beq.n	800ff64 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	685a      	ldr	r2, [r3, #4]
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	425b      	negs	r3, r3
 800ff5e:	4413      	add	r3, r2
 800ff60:	617b      	str	r3, [r7, #20]
 800ff62:	e001      	b.n	800ff68 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ff64:	2301      	movs	r3, #1
 800ff66:	e011      	b.n	800ff8c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	697a      	ldr	r2, [r7, #20]
 800ff6c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	895a      	ldrh	r2, [r3, #10]
 800ff72:	8a7b      	ldrh	r3, [r7, #18]
 800ff74:	4413      	add	r3, r2
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	891a      	ldrh	r2, [r3, #8]
 800ff80:	8a7b      	ldrh	r3, [r7, #18]
 800ff82:	4413      	add	r3, r2
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	811a      	strh	r2, [r3, #8]


  return 0;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3718      	adds	r7, #24
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	0801ba38 	.word	0x0801ba38
 800ff98:	0801bb9c 	.word	0x0801bb9c
 800ff9c:	0801ba98 	.word	0x0801ba98

0800ffa0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ffaa:	2200      	movs	r2, #0
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7ff ff8e 	bl	800fed0 <pbuf_add_header_impl>
 800ffb4:	4603      	mov	r3, r0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
	...

0800ffc0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d106      	bne.n	800ffde <pbuf_remove_header+0x1e>
 800ffd0:	4b20      	ldr	r3, [pc, #128]	; (8010054 <pbuf_remove_header+0x94>)
 800ffd2:	f240 224b 	movw	r2, #587	; 0x24b
 800ffd6:	4920      	ldr	r1, [pc, #128]	; (8010058 <pbuf_remove_header+0x98>)
 800ffd8:	4820      	ldr	r0, [pc, #128]	; (801005c <pbuf_remove_header+0x9c>)
 800ffda:	f008 ff37 	bl	8018e4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d003      	beq.n	800ffec <pbuf_remove_header+0x2c>
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffea:	d301      	bcc.n	800fff0 <pbuf_remove_header+0x30>
    return 1;
 800ffec:	2301      	movs	r3, #1
 800ffee:	e02c      	b.n	801004a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d101      	bne.n	800fffa <pbuf_remove_header+0x3a>
    return 0;
 800fff6:	2300      	movs	r3, #0
 800fff8:	e027      	b.n	801004a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	895b      	ldrh	r3, [r3, #10]
 8010002:	89fa      	ldrh	r2, [r7, #14]
 8010004:	429a      	cmp	r2, r3
 8010006:	d908      	bls.n	801001a <pbuf_remove_header+0x5a>
 8010008:	4b12      	ldr	r3, [pc, #72]	; (8010054 <pbuf_remove_header+0x94>)
 801000a:	f240 2255 	movw	r2, #597	; 0x255
 801000e:	4914      	ldr	r1, [pc, #80]	; (8010060 <pbuf_remove_header+0xa0>)
 8010010:	4812      	ldr	r0, [pc, #72]	; (801005c <pbuf_remove_header+0x9c>)
 8010012:	f008 ff1b 	bl	8018e4c <iprintf>
 8010016:	2301      	movs	r3, #1
 8010018:	e017      	b.n	801004a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	685a      	ldr	r2, [r3, #4]
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	441a      	add	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	895a      	ldrh	r2, [r3, #10]
 8010030:	89fb      	ldrh	r3, [r7, #14]
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	b29a      	uxth	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	891a      	ldrh	r2, [r3, #8]
 801003e:	89fb      	ldrh	r3, [r7, #14]
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	b29a      	uxth	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010048:	2300      	movs	r3, #0
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	0801ba38 	.word	0x0801ba38
 8010058:	0801bb9c 	.word	0x0801bb9c
 801005c:	0801ba98 	.word	0x0801ba98
 8010060:	0801bba8 	.word	0x0801bba8

08010064 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	460b      	mov	r3, r1
 801006e:	807b      	strh	r3, [r7, #2]
 8010070:	4613      	mov	r3, r2
 8010072:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010078:	2b00      	cmp	r3, #0
 801007a:	da08      	bge.n	801008e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801007c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010080:	425b      	negs	r3, r3
 8010082:	4619      	mov	r1, r3
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7ff ff9b 	bl	800ffc0 <pbuf_remove_header>
 801008a:	4603      	mov	r3, r0
 801008c:	e007      	b.n	801009e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801008e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010092:	787a      	ldrb	r2, [r7, #1]
 8010094:	4619      	mov	r1, r3
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7ff ff1a 	bl	800fed0 <pbuf_add_header_impl>
 801009c:	4603      	mov	r3, r0
  }
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b082      	sub	sp, #8
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	460b      	mov	r3, r1
 80100b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80100b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80100b6:	2201      	movs	r2, #1
 80100b8:	4619      	mov	r1, r3
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f7ff ffd2 	bl	8010064 <pbuf_header_impl>
 80100c0:	4603      	mov	r3, r0
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
	...

080100cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d10b      	bne.n	80100f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d106      	bne.n	80100ee <pbuf_free+0x22>
 80100e0:	4b38      	ldr	r3, [pc, #224]	; (80101c4 <pbuf_free+0xf8>)
 80100e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80100e6:	4938      	ldr	r1, [pc, #224]	; (80101c8 <pbuf_free+0xfc>)
 80100e8:	4838      	ldr	r0, [pc, #224]	; (80101cc <pbuf_free+0x100>)
 80100ea:	f008 feaf 	bl	8018e4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	e063      	b.n	80101ba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80100f6:	e05c      	b.n	80101b2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	7b9b      	ldrb	r3, [r3, #14]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d106      	bne.n	801010e <pbuf_free+0x42>
 8010100:	4b30      	ldr	r3, [pc, #192]	; (80101c4 <pbuf_free+0xf8>)
 8010102:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010106:	4932      	ldr	r1, [pc, #200]	; (80101d0 <pbuf_free+0x104>)
 8010108:	4830      	ldr	r0, [pc, #192]	; (80101cc <pbuf_free+0x100>)
 801010a:	f008 fe9f 	bl	8018e4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	7b9b      	ldrb	r3, [r3, #14]
 8010112:	3b01      	subs	r3, #1
 8010114:	b2da      	uxtb	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	739a      	strb	r2, [r3, #14]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	7b9b      	ldrb	r3, [r3, #14]
 801011e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010120:	7dbb      	ldrb	r3, [r7, #22]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d143      	bne.n	80101ae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	7b1b      	ldrb	r3, [r3, #12]
 8010130:	f003 030f 	and.w	r3, r3, #15
 8010134:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	7b5b      	ldrb	r3, [r3, #13]
 801013a:	f003 0302 	and.w	r3, r3, #2
 801013e:	2b00      	cmp	r3, #0
 8010140:	d011      	beq.n	8010166 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d106      	bne.n	801015c <pbuf_free+0x90>
 801014e:	4b1d      	ldr	r3, [pc, #116]	; (80101c4 <pbuf_free+0xf8>)
 8010150:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010154:	491f      	ldr	r1, [pc, #124]	; (80101d4 <pbuf_free+0x108>)
 8010156:	481d      	ldr	r0, [pc, #116]	; (80101cc <pbuf_free+0x100>)
 8010158:	f008 fe78 	bl	8018e4c <iprintf>
        pc->custom_free_function(p);
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	4798      	blx	r3
 8010164:	e01d      	b.n	80101a2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010166:	7bfb      	ldrb	r3, [r7, #15]
 8010168:	2b02      	cmp	r3, #2
 801016a:	d104      	bne.n	8010176 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801016c:	6879      	ldr	r1, [r7, #4]
 801016e:	2008      	movs	r0, #8
 8010170:	f7ff f956 	bl	800f420 <memp_free>
 8010174:	e015      	b.n	80101a2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010176:	7bfb      	ldrb	r3, [r7, #15]
 8010178:	2b01      	cmp	r3, #1
 801017a:	d104      	bne.n	8010186 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801017c:	6879      	ldr	r1, [r7, #4]
 801017e:	2007      	movs	r0, #7
 8010180:	f7ff f94e 	bl	800f420 <memp_free>
 8010184:	e00d      	b.n	80101a2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010186:	7bfb      	ldrb	r3, [r7, #15]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d103      	bne.n	8010194 <pbuf_free+0xc8>
          mem_free(p);
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f7fe fde1 	bl	800ed54 <mem_free>
 8010192:	e006      	b.n	80101a2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010194:	4b0b      	ldr	r3, [pc, #44]	; (80101c4 <pbuf_free+0xf8>)
 8010196:	f240 320f 	movw	r2, #783	; 0x30f
 801019a:	490f      	ldr	r1, [pc, #60]	; (80101d8 <pbuf_free+0x10c>)
 801019c:	480b      	ldr	r0, [pc, #44]	; (80101cc <pbuf_free+0x100>)
 801019e:	f008 fe55 	bl	8018e4c <iprintf>
        }
      }
      count++;
 80101a2:	7dfb      	ldrb	r3, [r7, #23]
 80101a4:	3301      	adds	r3, #1
 80101a6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	607b      	str	r3, [r7, #4]
 80101ac:	e001      	b.n	80101b2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80101ae:	2300      	movs	r3, #0
 80101b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d19f      	bne.n	80100f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80101b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3718      	adds	r7, #24
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	0801ba38 	.word	0x0801ba38
 80101c8:	0801bb9c 	.word	0x0801bb9c
 80101cc:	0801ba98 	.word	0x0801ba98
 80101d0:	0801bbc8 	.word	0x0801bbc8
 80101d4:	0801bbe0 	.word	0x0801bbe0
 80101d8:	0801bc04 	.word	0x0801bc04

080101dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80101dc:	b480      	push	{r7}
 80101de:	b085      	sub	sp, #20
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80101e4:	2300      	movs	r3, #0
 80101e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80101e8:	e005      	b.n	80101f6 <pbuf_clen+0x1a>
    ++len;
 80101ea:	89fb      	ldrh	r3, [r7, #14]
 80101ec:	3301      	adds	r3, #1
 80101ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1f6      	bne.n	80101ea <pbuf_clen+0xe>
  }
  return len;
 80101fc:	89fb      	ldrh	r3, [r7, #14]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3714      	adds	r7, #20
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
	...

0801020c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d010      	beq.n	801023c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	7b9b      	ldrb	r3, [r3, #14]
 801021e:	3301      	adds	r3, #1
 8010220:	b2da      	uxtb	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	7b9b      	ldrb	r3, [r3, #14]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d106      	bne.n	801023c <pbuf_ref+0x30>
 801022e:	4b05      	ldr	r3, [pc, #20]	; (8010244 <pbuf_ref+0x38>)
 8010230:	f240 3242 	movw	r2, #834	; 0x342
 8010234:	4904      	ldr	r1, [pc, #16]	; (8010248 <pbuf_ref+0x3c>)
 8010236:	4805      	ldr	r0, [pc, #20]	; (801024c <pbuf_ref+0x40>)
 8010238:	f008 fe08 	bl	8018e4c <iprintf>
  }
}
 801023c:	bf00      	nop
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	0801ba38 	.word	0x0801ba38
 8010248:	0801bc18 	.word	0x0801bc18
 801024c:	0801ba98 	.word	0x0801ba98

08010250 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d002      	beq.n	8010266 <pbuf_cat+0x16>
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d107      	bne.n	8010276 <pbuf_cat+0x26>
 8010266:	4b20      	ldr	r3, [pc, #128]	; (80102e8 <pbuf_cat+0x98>)
 8010268:	f240 3259 	movw	r2, #857	; 0x359
 801026c:	491f      	ldr	r1, [pc, #124]	; (80102ec <pbuf_cat+0x9c>)
 801026e:	4820      	ldr	r0, [pc, #128]	; (80102f0 <pbuf_cat+0xa0>)
 8010270:	f008 fdec 	bl	8018e4c <iprintf>
 8010274:	e034      	b.n	80102e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	60fb      	str	r3, [r7, #12]
 801027a:	e00a      	b.n	8010292 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	891a      	ldrh	r2, [r3, #8]
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	891b      	ldrh	r3, [r3, #8]
 8010284:	4413      	add	r3, r2
 8010286:	b29a      	uxth	r2, r3
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	60fb      	str	r3, [r7, #12]
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1f0      	bne.n	801027c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	891a      	ldrh	r2, [r3, #8]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	895b      	ldrh	r3, [r3, #10]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d006      	beq.n	80102b4 <pbuf_cat+0x64>
 80102a6:	4b10      	ldr	r3, [pc, #64]	; (80102e8 <pbuf_cat+0x98>)
 80102a8:	f240 3262 	movw	r2, #866	; 0x362
 80102ac:	4911      	ldr	r1, [pc, #68]	; (80102f4 <pbuf_cat+0xa4>)
 80102ae:	4810      	ldr	r0, [pc, #64]	; (80102f0 <pbuf_cat+0xa0>)
 80102b0:	f008 fdcc 	bl	8018e4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d006      	beq.n	80102ca <pbuf_cat+0x7a>
 80102bc:	4b0a      	ldr	r3, [pc, #40]	; (80102e8 <pbuf_cat+0x98>)
 80102be:	f240 3263 	movw	r2, #867	; 0x363
 80102c2:	490d      	ldr	r1, [pc, #52]	; (80102f8 <pbuf_cat+0xa8>)
 80102c4:	480a      	ldr	r0, [pc, #40]	; (80102f0 <pbuf_cat+0xa0>)
 80102c6:	f008 fdc1 	bl	8018e4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	891a      	ldrh	r2, [r3, #8]
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	891b      	ldrh	r3, [r3, #8]
 80102d2:	4413      	add	r3, r2
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	683a      	ldr	r2, [r7, #0]
 80102de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80102e0:	3710      	adds	r7, #16
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	0801ba38 	.word	0x0801ba38
 80102ec:	0801bc2c 	.word	0x0801bc2c
 80102f0:	0801ba98 	.word	0x0801ba98
 80102f4:	0801bc64 	.word	0x0801bc64
 80102f8:	0801bc94 	.word	0x0801bc94

080102fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b086      	sub	sp, #24
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010306:	2300      	movs	r3, #0
 8010308:	617b      	str	r3, [r7, #20]
 801030a:	2300      	movs	r3, #0
 801030c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d008      	beq.n	8010326 <pbuf_copy+0x2a>
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d005      	beq.n	8010326 <pbuf_copy+0x2a>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	891a      	ldrh	r2, [r3, #8]
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	891b      	ldrh	r3, [r3, #8]
 8010322:	429a      	cmp	r2, r3
 8010324:	d209      	bcs.n	801033a <pbuf_copy+0x3e>
 8010326:	4b57      	ldr	r3, [pc, #348]	; (8010484 <pbuf_copy+0x188>)
 8010328:	f240 32c9 	movw	r2, #969	; 0x3c9
 801032c:	4956      	ldr	r1, [pc, #344]	; (8010488 <pbuf_copy+0x18c>)
 801032e:	4857      	ldr	r0, [pc, #348]	; (801048c <pbuf_copy+0x190>)
 8010330:	f008 fd8c 	bl	8018e4c <iprintf>
 8010334:	f06f 030f 	mvn.w	r3, #15
 8010338:	e09f      	b.n	801047a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	895b      	ldrh	r3, [r3, #10]
 801033e:	461a      	mov	r2, r3
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	1ad2      	subs	r2, r2, r3
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	895b      	ldrh	r3, [r3, #10]
 8010348:	4619      	mov	r1, r3
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	1acb      	subs	r3, r1, r3
 801034e:	429a      	cmp	r2, r3
 8010350:	d306      	bcc.n	8010360 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	895b      	ldrh	r3, [r3, #10]
 8010356:	461a      	mov	r2, r3
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	60fb      	str	r3, [r7, #12]
 801035e:	e005      	b.n	801036c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	895b      	ldrh	r3, [r3, #10]
 8010364:	461a      	mov	r2, r3
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	685a      	ldr	r2, [r3, #4]
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	18d0      	adds	r0, r2, r3
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	685a      	ldr	r2, [r3, #4]
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	4413      	add	r3, r2
 801037c:	68fa      	ldr	r2, [r7, #12]
 801037e:	4619      	mov	r1, r3
 8010380:	f008 ff32 	bl	80191e8 <memcpy>
    offset_to += len;
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	4413      	add	r3, r2
 801038a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	4413      	add	r3, r2
 8010392:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	895b      	ldrh	r3, [r3, #10]
 8010398:	461a      	mov	r2, r3
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	4293      	cmp	r3, r2
 801039e:	d906      	bls.n	80103ae <pbuf_copy+0xb2>
 80103a0:	4b38      	ldr	r3, [pc, #224]	; (8010484 <pbuf_copy+0x188>)
 80103a2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80103a6:	493a      	ldr	r1, [pc, #232]	; (8010490 <pbuf_copy+0x194>)
 80103a8:	4838      	ldr	r0, [pc, #224]	; (801048c <pbuf_copy+0x190>)
 80103aa:	f008 fd4f 	bl	8018e4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	895b      	ldrh	r3, [r3, #10]
 80103b2:	461a      	mov	r2, r3
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d906      	bls.n	80103c8 <pbuf_copy+0xcc>
 80103ba:	4b32      	ldr	r3, [pc, #200]	; (8010484 <pbuf_copy+0x188>)
 80103bc:	f240 32da 	movw	r2, #986	; 0x3da
 80103c0:	4934      	ldr	r1, [pc, #208]	; (8010494 <pbuf_copy+0x198>)
 80103c2:	4832      	ldr	r0, [pc, #200]	; (801048c <pbuf_copy+0x190>)
 80103c4:	f008 fd42 	bl	8018e4c <iprintf>
    if (offset_from >= p_from->len) {
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	895b      	ldrh	r3, [r3, #10]
 80103cc:	461a      	mov	r2, r3
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d304      	bcc.n	80103de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80103d4:	2300      	movs	r3, #0
 80103d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	895b      	ldrh	r3, [r3, #10]
 80103e2:	461a      	mov	r2, r3
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d114      	bne.n	8010414 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80103ea:	2300      	movs	r3, #0
 80103ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d10c      	bne.n	8010414 <pbuf_copy+0x118>
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d009      	beq.n	8010414 <pbuf_copy+0x118>
 8010400:	4b20      	ldr	r3, [pc, #128]	; (8010484 <pbuf_copy+0x188>)
 8010402:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010406:	4924      	ldr	r1, [pc, #144]	; (8010498 <pbuf_copy+0x19c>)
 8010408:	4820      	ldr	r0, [pc, #128]	; (801048c <pbuf_copy+0x190>)
 801040a:	f008 fd1f 	bl	8018e4c <iprintf>
 801040e:	f06f 030f 	mvn.w	r3, #15
 8010412:	e032      	b.n	801047a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d013      	beq.n	8010442 <pbuf_copy+0x146>
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	895a      	ldrh	r2, [r3, #10]
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	891b      	ldrh	r3, [r3, #8]
 8010422:	429a      	cmp	r2, r3
 8010424:	d10d      	bne.n	8010442 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d009      	beq.n	8010442 <pbuf_copy+0x146>
 801042e:	4b15      	ldr	r3, [pc, #84]	; (8010484 <pbuf_copy+0x188>)
 8010430:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010434:	4919      	ldr	r1, [pc, #100]	; (801049c <pbuf_copy+0x1a0>)
 8010436:	4815      	ldr	r0, [pc, #84]	; (801048c <pbuf_copy+0x190>)
 8010438:	f008 fd08 	bl	8018e4c <iprintf>
 801043c:	f06f 0305 	mvn.w	r3, #5
 8010440:	e01b      	b.n	801047a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d013      	beq.n	8010470 <pbuf_copy+0x174>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	895a      	ldrh	r2, [r3, #10]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	891b      	ldrh	r3, [r3, #8]
 8010450:	429a      	cmp	r2, r3
 8010452:	d10d      	bne.n	8010470 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d009      	beq.n	8010470 <pbuf_copy+0x174>
 801045c:	4b09      	ldr	r3, [pc, #36]	; (8010484 <pbuf_copy+0x188>)
 801045e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010462:	490e      	ldr	r1, [pc, #56]	; (801049c <pbuf_copy+0x1a0>)
 8010464:	4809      	ldr	r0, [pc, #36]	; (801048c <pbuf_copy+0x190>)
 8010466:	f008 fcf1 	bl	8018e4c <iprintf>
 801046a:	f06f 0305 	mvn.w	r3, #5
 801046e:	e004      	b.n	801047a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	f47f af61 	bne.w	801033a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010478:	2300      	movs	r3, #0
}
 801047a:	4618      	mov	r0, r3
 801047c:	3718      	adds	r7, #24
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	0801ba38 	.word	0x0801ba38
 8010488:	0801bce0 	.word	0x0801bce0
 801048c:	0801ba98 	.word	0x0801ba98
 8010490:	0801bd10 	.word	0x0801bd10
 8010494:	0801bd28 	.word	0x0801bd28
 8010498:	0801bd44 	.word	0x0801bd44
 801049c:	0801bd54 	.word	0x0801bd54

080104a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b088      	sub	sp, #32
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	4611      	mov	r1, r2
 80104ac:	461a      	mov	r2, r3
 80104ae:	460b      	mov	r3, r1
 80104b0:	80fb      	strh	r3, [r7, #6]
 80104b2:	4613      	mov	r3, r2
 80104b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80104b6:	2300      	movs	r3, #0
 80104b8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80104ba:	2300      	movs	r3, #0
 80104bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d108      	bne.n	80104d6 <pbuf_copy_partial+0x36>
 80104c4:	4b2b      	ldr	r3, [pc, #172]	; (8010574 <pbuf_copy_partial+0xd4>)
 80104c6:	f240 420a 	movw	r2, #1034	; 0x40a
 80104ca:	492b      	ldr	r1, [pc, #172]	; (8010578 <pbuf_copy_partial+0xd8>)
 80104cc:	482b      	ldr	r0, [pc, #172]	; (801057c <pbuf_copy_partial+0xdc>)
 80104ce:	f008 fcbd 	bl	8018e4c <iprintf>
 80104d2:	2300      	movs	r3, #0
 80104d4:	e04a      	b.n	801056c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d108      	bne.n	80104ee <pbuf_copy_partial+0x4e>
 80104dc:	4b25      	ldr	r3, [pc, #148]	; (8010574 <pbuf_copy_partial+0xd4>)
 80104de:	f240 420b 	movw	r2, #1035	; 0x40b
 80104e2:	4927      	ldr	r1, [pc, #156]	; (8010580 <pbuf_copy_partial+0xe0>)
 80104e4:	4825      	ldr	r0, [pc, #148]	; (801057c <pbuf_copy_partial+0xdc>)
 80104e6:	f008 fcb1 	bl	8018e4c <iprintf>
 80104ea:	2300      	movs	r3, #0
 80104ec:	e03e      	b.n	801056c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	61fb      	str	r3, [r7, #28]
 80104f2:	e034      	b.n	801055e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80104f4:	88bb      	ldrh	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00a      	beq.n	8010510 <pbuf_copy_partial+0x70>
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	895b      	ldrh	r3, [r3, #10]
 80104fe:	88ba      	ldrh	r2, [r7, #4]
 8010500:	429a      	cmp	r2, r3
 8010502:	d305      	bcc.n	8010510 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	895b      	ldrh	r3, [r3, #10]
 8010508:	88ba      	ldrh	r2, [r7, #4]
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	80bb      	strh	r3, [r7, #4]
 801050e:	e023      	b.n	8010558 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	895a      	ldrh	r2, [r3, #10]
 8010514:	88bb      	ldrh	r3, [r7, #4]
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801051a:	8b3a      	ldrh	r2, [r7, #24]
 801051c:	88fb      	ldrh	r3, [r7, #6]
 801051e:	429a      	cmp	r2, r3
 8010520:	d901      	bls.n	8010526 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010522:	88fb      	ldrh	r3, [r7, #6]
 8010524:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010526:	8b7b      	ldrh	r3, [r7, #26]
 8010528:	68ba      	ldr	r2, [r7, #8]
 801052a:	18d0      	adds	r0, r2, r3
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	685a      	ldr	r2, [r3, #4]
 8010530:	88bb      	ldrh	r3, [r7, #4]
 8010532:	4413      	add	r3, r2
 8010534:	8b3a      	ldrh	r2, [r7, #24]
 8010536:	4619      	mov	r1, r3
 8010538:	f008 fe56 	bl	80191e8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801053c:	8afa      	ldrh	r2, [r7, #22]
 801053e:	8b3b      	ldrh	r3, [r7, #24]
 8010540:	4413      	add	r3, r2
 8010542:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010544:	8b7a      	ldrh	r2, [r7, #26]
 8010546:	8b3b      	ldrh	r3, [r7, #24]
 8010548:	4413      	add	r3, r2
 801054a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801054c:	88fa      	ldrh	r2, [r7, #6]
 801054e:	8b3b      	ldrh	r3, [r7, #24]
 8010550:	1ad3      	subs	r3, r2, r3
 8010552:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010554:	2300      	movs	r3, #0
 8010556:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	61fb      	str	r3, [r7, #28]
 801055e:	88fb      	ldrh	r3, [r7, #6]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d002      	beq.n	801056a <pbuf_copy_partial+0xca>
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1c4      	bne.n	80104f4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801056a:	8afb      	ldrh	r3, [r7, #22]
}
 801056c:	4618      	mov	r0, r3
 801056e:	3720      	adds	r7, #32
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	0801ba38 	.word	0x0801ba38
 8010578:	0801bd80 	.word	0x0801bd80
 801057c:	0801ba98 	.word	0x0801ba98
 8010580:	0801bda0 	.word	0x0801bda0

08010584 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	4603      	mov	r3, r0
 801058c:	603a      	str	r2, [r7, #0]
 801058e:	71fb      	strb	r3, [r7, #7]
 8010590:	460b      	mov	r3, r1
 8010592:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	8919      	ldrh	r1, [r3, #8]
 8010598:	88ba      	ldrh	r2, [r7, #4]
 801059a:	79fb      	ldrb	r3, [r7, #7]
 801059c:	4618      	mov	r0, r3
 801059e:	f7ff fab1 	bl	800fb04 <pbuf_alloc>
 80105a2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d101      	bne.n	80105ae <pbuf_clone+0x2a>
    return NULL;
 80105aa:	2300      	movs	r3, #0
 80105ac:	e011      	b.n	80105d2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80105ae:	6839      	ldr	r1, [r7, #0]
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f7ff fea3 	bl	80102fc <pbuf_copy>
 80105b6:	4603      	mov	r3, r0
 80105b8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80105ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d006      	beq.n	80105d0 <pbuf_clone+0x4c>
 80105c2:	4b06      	ldr	r3, [pc, #24]	; (80105dc <pbuf_clone+0x58>)
 80105c4:	f240 5224 	movw	r2, #1316	; 0x524
 80105c8:	4905      	ldr	r1, [pc, #20]	; (80105e0 <pbuf_clone+0x5c>)
 80105ca:	4806      	ldr	r0, [pc, #24]	; (80105e4 <pbuf_clone+0x60>)
 80105cc:	f008 fc3e 	bl	8018e4c <iprintf>
  return q;
 80105d0:	68fb      	ldr	r3, [r7, #12]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3710      	adds	r7, #16
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	0801ba38 	.word	0x0801ba38
 80105e0:	0801beac 	.word	0x0801beac
 80105e4:	0801ba98 	.word	0x0801ba98

080105e8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80105ec:	f007 ff06 	bl	80183fc <rand>
 80105f0:	4603      	mov	r3, r0
 80105f2:	b29b      	uxth	r3, r3
 80105f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80105fe:	b29a      	uxth	r2, r3
 8010600:	4b01      	ldr	r3, [pc, #4]	; (8010608 <tcp_init+0x20>)
 8010602:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010604:	bf00      	nop
 8010606:	bd80      	pop	{r7, pc}
 8010608:	20000054 	.word	0x20000054

0801060c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	7d1b      	ldrb	r3, [r3, #20]
 8010618:	2b01      	cmp	r3, #1
 801061a:	d105      	bne.n	8010628 <tcp_free+0x1c>
 801061c:	4b06      	ldr	r3, [pc, #24]	; (8010638 <tcp_free+0x2c>)
 801061e:	22d4      	movs	r2, #212	; 0xd4
 8010620:	4906      	ldr	r1, [pc, #24]	; (801063c <tcp_free+0x30>)
 8010622:	4807      	ldr	r0, [pc, #28]	; (8010640 <tcp_free+0x34>)
 8010624:	f008 fc12 	bl	8018e4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010628:	6879      	ldr	r1, [r7, #4]
 801062a:	2001      	movs	r0, #1
 801062c:	f7fe fef8 	bl	800f420 <memp_free>
}
 8010630:	bf00      	nop
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	0801bf38 	.word	0x0801bf38
 801063c:	0801bf68 	.word	0x0801bf68
 8010640:	0801bf7c 	.word	0x0801bf7c

08010644 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	7d1b      	ldrb	r3, [r3, #20]
 8010650:	2b01      	cmp	r3, #1
 8010652:	d105      	bne.n	8010660 <tcp_free_listen+0x1c>
 8010654:	4b06      	ldr	r3, [pc, #24]	; (8010670 <tcp_free_listen+0x2c>)
 8010656:	22df      	movs	r2, #223	; 0xdf
 8010658:	4906      	ldr	r1, [pc, #24]	; (8010674 <tcp_free_listen+0x30>)
 801065a:	4807      	ldr	r0, [pc, #28]	; (8010678 <tcp_free_listen+0x34>)
 801065c:	f008 fbf6 	bl	8018e4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010660:	6879      	ldr	r1, [r7, #4]
 8010662:	2002      	movs	r0, #2
 8010664:	f7fe fedc 	bl	800f420 <memp_free>
}
 8010668:	bf00      	nop
 801066a:	3708      	adds	r7, #8
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	0801bf38 	.word	0x0801bf38
 8010674:	0801bfa4 	.word	0x0801bfa4
 8010678:	0801bf7c 	.word	0x0801bf7c

0801067c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010680:	f000 fea2 	bl	80113c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010684:	4b07      	ldr	r3, [pc, #28]	; (80106a4 <tcp_tmr+0x28>)
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	3301      	adds	r3, #1
 801068a:	b2da      	uxtb	r2, r3
 801068c:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <tcp_tmr+0x28>)
 801068e:	701a      	strb	r2, [r3, #0]
 8010690:	4b04      	ldr	r3, [pc, #16]	; (80106a4 <tcp_tmr+0x28>)
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	f003 0301 	and.w	r3, r3, #1
 8010698:	2b00      	cmp	r3, #0
 801069a:	d001      	beq.n	80106a0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801069c:	f000 fb54 	bl	8010d48 <tcp_slowtmr>
  }
}
 80106a0:	bf00      	nop
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	2000800d 	.word	0x2000800d

080106a8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d105      	bne.n	80106c4 <tcp_remove_listener+0x1c>
 80106b8:	4b0d      	ldr	r3, [pc, #52]	; (80106f0 <tcp_remove_listener+0x48>)
 80106ba:	22ff      	movs	r2, #255	; 0xff
 80106bc:	490d      	ldr	r1, [pc, #52]	; (80106f4 <tcp_remove_listener+0x4c>)
 80106be:	480e      	ldr	r0, [pc, #56]	; (80106f8 <tcp_remove_listener+0x50>)
 80106c0:	f008 fbc4 	bl	8018e4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	60fb      	str	r3, [r7, #12]
 80106c8:	e00a      	b.n	80106e0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106ce:	683a      	ldr	r2, [r7, #0]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d102      	bne.n	80106da <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2200      	movs	r2, #0
 80106d8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	68db      	ldr	r3, [r3, #12]
 80106de:	60fb      	str	r3, [r7, #12]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1f1      	bne.n	80106ca <tcp_remove_listener+0x22>
    }
  }
}
 80106e6:	bf00      	nop
 80106e8:	bf00      	nop
 80106ea:	3710      	adds	r7, #16
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	0801bf38 	.word	0x0801bf38
 80106f4:	0801bfc0 	.word	0x0801bfc0
 80106f8:	0801bf7c 	.word	0x0801bf7c

080106fc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d106      	bne.n	8010718 <tcp_listen_closed+0x1c>
 801070a:	4b14      	ldr	r3, [pc, #80]	; (801075c <tcp_listen_closed+0x60>)
 801070c:	f240 1211 	movw	r2, #273	; 0x111
 8010710:	4913      	ldr	r1, [pc, #76]	; (8010760 <tcp_listen_closed+0x64>)
 8010712:	4814      	ldr	r0, [pc, #80]	; (8010764 <tcp_listen_closed+0x68>)
 8010714:	f008 fb9a 	bl	8018e4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	7d1b      	ldrb	r3, [r3, #20]
 801071c:	2b01      	cmp	r3, #1
 801071e:	d006      	beq.n	801072e <tcp_listen_closed+0x32>
 8010720:	4b0e      	ldr	r3, [pc, #56]	; (801075c <tcp_listen_closed+0x60>)
 8010722:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010726:	4910      	ldr	r1, [pc, #64]	; (8010768 <tcp_listen_closed+0x6c>)
 8010728:	480e      	ldr	r0, [pc, #56]	; (8010764 <tcp_listen_closed+0x68>)
 801072a:	f008 fb8f 	bl	8018e4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801072e:	2301      	movs	r3, #1
 8010730:	60fb      	str	r3, [r7, #12]
 8010732:	e00b      	b.n	801074c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010734:	4a0d      	ldr	r2, [pc, #52]	; (801076c <tcp_listen_closed+0x70>)
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	6879      	ldr	r1, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff ffb1 	bl	80106a8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	3301      	adds	r3, #1
 801074a:	60fb      	str	r3, [r7, #12]
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2b03      	cmp	r3, #3
 8010750:	d9f0      	bls.n	8010734 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010752:	bf00      	nop
 8010754:	bf00      	nop
 8010756:	3710      	adds	r7, #16
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	0801bf38 	.word	0x0801bf38
 8010760:	0801bfe8 	.word	0x0801bfe8
 8010764:	0801bf7c 	.word	0x0801bf7c
 8010768:	0801bff4 	.word	0x0801bff4
 801076c:	0801df60 	.word	0x0801df60

08010770 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010770:	b5b0      	push	{r4, r5, r7, lr}
 8010772:	b088      	sub	sp, #32
 8010774:	af04      	add	r7, sp, #16
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	460b      	mov	r3, r1
 801077a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_close_shutdown+0x20>
 8010782:	4b63      	ldr	r3, [pc, #396]	; (8010910 <tcp_close_shutdown+0x1a0>)
 8010784:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010788:	4962      	ldr	r1, [pc, #392]	; (8010914 <tcp_close_shutdown+0x1a4>)
 801078a:	4863      	ldr	r0, [pc, #396]	; (8010918 <tcp_close_shutdown+0x1a8>)
 801078c:	f008 fb5e 	bl	8018e4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010790:	78fb      	ldrb	r3, [r7, #3]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d066      	beq.n	8010864 <tcp_close_shutdown+0xf4>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	7d1b      	ldrb	r3, [r3, #20]
 801079a:	2b04      	cmp	r3, #4
 801079c:	d003      	beq.n	80107a6 <tcp_close_shutdown+0x36>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	7d1b      	ldrb	r3, [r3, #20]
 80107a2:	2b07      	cmp	r3, #7
 80107a4:	d15e      	bne.n	8010864 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d104      	bne.n	80107b8 <tcp_close_shutdown+0x48>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80107b6:	d055      	beq.n	8010864 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	8b5b      	ldrh	r3, [r3, #26]
 80107bc:	f003 0310 	and.w	r3, r3, #16
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d106      	bne.n	80107d2 <tcp_close_shutdown+0x62>
 80107c4:	4b52      	ldr	r3, [pc, #328]	; (8010910 <tcp_close_shutdown+0x1a0>)
 80107c6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80107ca:	4954      	ldr	r1, [pc, #336]	; (801091c <tcp_close_shutdown+0x1ac>)
 80107cc:	4852      	ldr	r0, [pc, #328]	; (8010918 <tcp_close_shutdown+0x1a8>)
 80107ce:	f008 fb3d 	bl	8018e4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80107da:	687d      	ldr	r5, [r7, #4]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	3304      	adds	r3, #4
 80107e0:	687a      	ldr	r2, [r7, #4]
 80107e2:	8ad2      	ldrh	r2, [r2, #22]
 80107e4:	6879      	ldr	r1, [r7, #4]
 80107e6:	8b09      	ldrh	r1, [r1, #24]
 80107e8:	9102      	str	r1, [sp, #8]
 80107ea:	9201      	str	r2, [sp, #4]
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	462b      	mov	r3, r5
 80107f0:	4622      	mov	r2, r4
 80107f2:	4601      	mov	r1, r0
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f004 fe91 	bl	801551c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f001 f8c6 	bl	801198c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010800:	4b47      	ldr	r3, [pc, #284]	; (8010920 <tcp_close_shutdown+0x1b0>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	429a      	cmp	r2, r3
 8010808:	d105      	bne.n	8010816 <tcp_close_shutdown+0xa6>
 801080a:	4b45      	ldr	r3, [pc, #276]	; (8010920 <tcp_close_shutdown+0x1b0>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	68db      	ldr	r3, [r3, #12]
 8010810:	4a43      	ldr	r2, [pc, #268]	; (8010920 <tcp_close_shutdown+0x1b0>)
 8010812:	6013      	str	r3, [r2, #0]
 8010814:	e013      	b.n	801083e <tcp_close_shutdown+0xce>
 8010816:	4b42      	ldr	r3, [pc, #264]	; (8010920 <tcp_close_shutdown+0x1b0>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	60fb      	str	r3, [r7, #12]
 801081c:	e00c      	b.n	8010838 <tcp_close_shutdown+0xc8>
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	429a      	cmp	r2, r3
 8010826:	d104      	bne.n	8010832 <tcp_close_shutdown+0xc2>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	68da      	ldr	r2, [r3, #12]
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	60da      	str	r2, [r3, #12]
 8010830:	e005      	b.n	801083e <tcp_close_shutdown+0xce>
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	60fb      	str	r3, [r7, #12]
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d1ef      	bne.n	801081e <tcp_close_shutdown+0xae>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2200      	movs	r2, #0
 8010842:	60da      	str	r2, [r3, #12]
 8010844:	4b37      	ldr	r3, [pc, #220]	; (8010924 <tcp_close_shutdown+0x1b4>)
 8010846:	2201      	movs	r2, #1
 8010848:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801084a:	4b37      	ldr	r3, [pc, #220]	; (8010928 <tcp_close_shutdown+0x1b8>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	429a      	cmp	r2, r3
 8010852:	d102      	bne.n	801085a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010854:	f003 fd5e 	bl	8014314 <tcp_trigger_input_pcb_close>
 8010858:	e002      	b.n	8010860 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7ff fed6 	bl	801060c <tcp_free>
      }
      return ERR_OK;
 8010860:	2300      	movs	r3, #0
 8010862:	e050      	b.n	8010906 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	7d1b      	ldrb	r3, [r3, #20]
 8010868:	2b02      	cmp	r3, #2
 801086a:	d03b      	beq.n	80108e4 <tcp_close_shutdown+0x174>
 801086c:	2b02      	cmp	r3, #2
 801086e:	dc44      	bgt.n	80108fa <tcp_close_shutdown+0x18a>
 8010870:	2b00      	cmp	r3, #0
 8010872:	d002      	beq.n	801087a <tcp_close_shutdown+0x10a>
 8010874:	2b01      	cmp	r3, #1
 8010876:	d02a      	beq.n	80108ce <tcp_close_shutdown+0x15e>
 8010878:	e03f      	b.n	80108fa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	8adb      	ldrh	r3, [r3, #22]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d021      	beq.n	80108c6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010882:	4b2a      	ldr	r3, [pc, #168]	; (801092c <tcp_close_shutdown+0x1bc>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	429a      	cmp	r2, r3
 801088a:	d105      	bne.n	8010898 <tcp_close_shutdown+0x128>
 801088c:	4b27      	ldr	r3, [pc, #156]	; (801092c <tcp_close_shutdown+0x1bc>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	4a26      	ldr	r2, [pc, #152]	; (801092c <tcp_close_shutdown+0x1bc>)
 8010894:	6013      	str	r3, [r2, #0]
 8010896:	e013      	b.n	80108c0 <tcp_close_shutdown+0x150>
 8010898:	4b24      	ldr	r3, [pc, #144]	; (801092c <tcp_close_shutdown+0x1bc>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	60bb      	str	r3, [r7, #8]
 801089e:	e00c      	b.n	80108ba <tcp_close_shutdown+0x14a>
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	68db      	ldr	r3, [r3, #12]
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d104      	bne.n	80108b4 <tcp_close_shutdown+0x144>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	68da      	ldr	r2, [r3, #12]
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	60da      	str	r2, [r3, #12]
 80108b2:	e005      	b.n	80108c0 <tcp_close_shutdown+0x150>
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	60bb      	str	r3, [r7, #8]
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1ef      	bne.n	80108a0 <tcp_close_shutdown+0x130>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff fea0 	bl	801060c <tcp_free>
      break;
 80108cc:	e01a      	b.n	8010904 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7ff ff14 	bl	80106fc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80108d4:	6879      	ldr	r1, [r7, #4]
 80108d6:	4816      	ldr	r0, [pc, #88]	; (8010930 <tcp_close_shutdown+0x1c0>)
 80108d8:	f001 f8a8 	bl	8011a2c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f7ff feb1 	bl	8010644 <tcp_free_listen>
      break;
 80108e2:	e00f      	b.n	8010904 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80108e4:	6879      	ldr	r1, [r7, #4]
 80108e6:	480e      	ldr	r0, [pc, #56]	; (8010920 <tcp_close_shutdown+0x1b0>)
 80108e8:	f001 f8a0 	bl	8011a2c <tcp_pcb_remove>
 80108ec:	4b0d      	ldr	r3, [pc, #52]	; (8010924 <tcp_close_shutdown+0x1b4>)
 80108ee:	2201      	movs	r2, #1
 80108f0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7ff fe8a 	bl	801060c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80108f8:	e004      	b.n	8010904 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 f81a 	bl	8010934 <tcp_close_shutdown_fin>
 8010900:	4603      	mov	r3, r0
 8010902:	e000      	b.n	8010906 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bdb0      	pop	{r4, r5, r7, pc}
 801090e:	bf00      	nop
 8010910:	0801bf38 	.word	0x0801bf38
 8010914:	0801c00c 	.word	0x0801c00c
 8010918:	0801bf7c 	.word	0x0801bf7c
 801091c:	0801c02c 	.word	0x0801c02c
 8010920:	20008004 	.word	0x20008004
 8010924:	2000800c 	.word	0x2000800c
 8010928:	20008044 	.word	0x20008044
 801092c:	20007ffc 	.word	0x20007ffc
 8010930:	20008000 	.word	0x20008000

08010934 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d106      	bne.n	8010950 <tcp_close_shutdown_fin+0x1c>
 8010942:	4b2e      	ldr	r3, [pc, #184]	; (80109fc <tcp_close_shutdown_fin+0xc8>)
 8010944:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010948:	492d      	ldr	r1, [pc, #180]	; (8010a00 <tcp_close_shutdown_fin+0xcc>)
 801094a:	482e      	ldr	r0, [pc, #184]	; (8010a04 <tcp_close_shutdown_fin+0xd0>)
 801094c:	f008 fa7e 	bl	8018e4c <iprintf>

  switch (pcb->state) {
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	7d1b      	ldrb	r3, [r3, #20]
 8010954:	2b07      	cmp	r3, #7
 8010956:	d020      	beq.n	801099a <tcp_close_shutdown_fin+0x66>
 8010958:	2b07      	cmp	r3, #7
 801095a:	dc2b      	bgt.n	80109b4 <tcp_close_shutdown_fin+0x80>
 801095c:	2b03      	cmp	r3, #3
 801095e:	d002      	beq.n	8010966 <tcp_close_shutdown_fin+0x32>
 8010960:	2b04      	cmp	r3, #4
 8010962:	d00d      	beq.n	8010980 <tcp_close_shutdown_fin+0x4c>
 8010964:	e026      	b.n	80109b4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f003 fee6 	bl	8014738 <tcp_send_fin>
 801096c:	4603      	mov	r3, r0
 801096e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d11f      	bne.n	80109b8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2205      	movs	r2, #5
 801097c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801097e:	e01b      	b.n	80109b8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f003 fed9 	bl	8014738 <tcp_send_fin>
 8010986:	4603      	mov	r3, r0
 8010988:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d114      	bne.n	80109bc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2205      	movs	r2, #5
 8010996:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010998:	e010      	b.n	80109bc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f003 fecc 	bl	8014738 <tcp_send_fin>
 80109a0:	4603      	mov	r3, r0
 80109a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80109a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d109      	bne.n	80109c0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2209      	movs	r2, #9
 80109b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80109b2:	e005      	b.n	80109c0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80109b4:	2300      	movs	r3, #0
 80109b6:	e01c      	b.n	80109f2 <tcp_close_shutdown_fin+0xbe>
      break;
 80109b8:	bf00      	nop
 80109ba:	e002      	b.n	80109c2 <tcp_close_shutdown_fin+0x8e>
      break;
 80109bc:	bf00      	nop
 80109be:	e000      	b.n	80109c2 <tcp_close_shutdown_fin+0x8e>
      break;
 80109c0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80109c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d103      	bne.n	80109d2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f003 fff2 	bl	80149b4 <tcp_output>
 80109d0:	e00d      	b.n	80109ee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80109d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109da:	d108      	bne.n	80109ee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8b5b      	ldrh	r3, [r3, #26]
 80109e0:	f043 0308 	orr.w	r3, r3, #8
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80109ea:	2300      	movs	r3, #0
 80109ec:	e001      	b.n	80109f2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80109ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	0801bf38 	.word	0x0801bf38
 8010a00:	0801bfe8 	.word	0x0801bfe8
 8010a04:	0801bf7c 	.word	0x0801bf7c

08010a08 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d109      	bne.n	8010a2a <tcp_close+0x22>
 8010a16:	4b0f      	ldr	r3, [pc, #60]	; (8010a54 <tcp_close+0x4c>)
 8010a18:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010a1c:	490e      	ldr	r1, [pc, #56]	; (8010a58 <tcp_close+0x50>)
 8010a1e:	480f      	ldr	r0, [pc, #60]	; (8010a5c <tcp_close+0x54>)
 8010a20:	f008 fa14 	bl	8018e4c <iprintf>
 8010a24:	f06f 030f 	mvn.w	r3, #15
 8010a28:	e00f      	b.n	8010a4a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	7d1b      	ldrb	r3, [r3, #20]
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d006      	beq.n	8010a40 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	8b5b      	ldrh	r3, [r3, #26]
 8010a36:	f043 0310 	orr.w	r3, r3, #16
 8010a3a:	b29a      	uxth	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010a40:	2101      	movs	r1, #1
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f7ff fe94 	bl	8010770 <tcp_close_shutdown>
 8010a48:	4603      	mov	r3, r0
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3708      	adds	r7, #8
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	0801bf38 	.word	0x0801bf38
 8010a58:	0801c048 	.word	0x0801c048
 8010a5c:	0801bf7c 	.word	0x0801bf7c

08010a60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b08e      	sub	sp, #56	; 0x38
 8010a64:	af04      	add	r7, sp, #16
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d107      	bne.n	8010a80 <tcp_abandon+0x20>
 8010a70:	4b52      	ldr	r3, [pc, #328]	; (8010bbc <tcp_abandon+0x15c>)
 8010a72:	f240 223d 	movw	r2, #573	; 0x23d
 8010a76:	4952      	ldr	r1, [pc, #328]	; (8010bc0 <tcp_abandon+0x160>)
 8010a78:	4852      	ldr	r0, [pc, #328]	; (8010bc4 <tcp_abandon+0x164>)
 8010a7a:	f008 f9e7 	bl	8018e4c <iprintf>
 8010a7e:	e099      	b.n	8010bb4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	7d1b      	ldrb	r3, [r3, #20]
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d106      	bne.n	8010a96 <tcp_abandon+0x36>
 8010a88:	4b4c      	ldr	r3, [pc, #304]	; (8010bbc <tcp_abandon+0x15c>)
 8010a8a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010a8e:	494e      	ldr	r1, [pc, #312]	; (8010bc8 <tcp_abandon+0x168>)
 8010a90:	484c      	ldr	r0, [pc, #304]	; (8010bc4 <tcp_abandon+0x164>)
 8010a92:	f008 f9db 	bl	8018e4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	7d1b      	ldrb	r3, [r3, #20]
 8010a9a:	2b0a      	cmp	r3, #10
 8010a9c:	d107      	bne.n	8010aae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010a9e:	6879      	ldr	r1, [r7, #4]
 8010aa0:	484a      	ldr	r0, [pc, #296]	; (8010bcc <tcp_abandon+0x16c>)
 8010aa2:	f000 ffc3 	bl	8011a2c <tcp_pcb_remove>
    tcp_free(pcb);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7ff fdb0 	bl	801060c <tcp_free>
 8010aac:	e082      	b.n	8010bb4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ac8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	691b      	ldr	r3, [r3, #16]
 8010ace:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	7d1b      	ldrb	r3, [r3, #20]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d126      	bne.n	8010b26 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	8adb      	ldrh	r3, [r3, #22]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d02e      	beq.n	8010b3e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010ae0:	4b3b      	ldr	r3, [pc, #236]	; (8010bd0 <tcp_abandon+0x170>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d105      	bne.n	8010af6 <tcp_abandon+0x96>
 8010aea:	4b39      	ldr	r3, [pc, #228]	; (8010bd0 <tcp_abandon+0x170>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	4a37      	ldr	r2, [pc, #220]	; (8010bd0 <tcp_abandon+0x170>)
 8010af2:	6013      	str	r3, [r2, #0]
 8010af4:	e013      	b.n	8010b1e <tcp_abandon+0xbe>
 8010af6:	4b36      	ldr	r3, [pc, #216]	; (8010bd0 <tcp_abandon+0x170>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	61fb      	str	r3, [r7, #28]
 8010afc:	e00c      	b.n	8010b18 <tcp_abandon+0xb8>
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d104      	bne.n	8010b12 <tcp_abandon+0xb2>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	68da      	ldr	r2, [r3, #12]
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	60da      	str	r2, [r3, #12]
 8010b10:	e005      	b.n	8010b1e <tcp_abandon+0xbe>
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	61fb      	str	r3, [r7, #28]
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d1ef      	bne.n	8010afe <tcp_abandon+0x9e>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	60da      	str	r2, [r3, #12]
 8010b24:	e00b      	b.n	8010b3e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	8adb      	ldrh	r3, [r3, #22]
 8010b2e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010b30:	6879      	ldr	r1, [r7, #4]
 8010b32:	4828      	ldr	r0, [pc, #160]	; (8010bd4 <tcp_abandon+0x174>)
 8010b34:	f000 ff7a 	bl	8011a2c <tcp_pcb_remove>
 8010b38:	4b27      	ldr	r3, [pc, #156]	; (8010bd8 <tcp_abandon+0x178>)
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d004      	beq.n	8010b50 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f000 fd1c 	bl	8011588 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d004      	beq.n	8010b62 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f000 fd13 	bl	8011588 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d004      	beq.n	8010b74 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f000 fd0a 	bl	8011588 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00e      	beq.n	8010b98 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010b7a:	6879      	ldr	r1, [r7, #4]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	3304      	adds	r3, #4
 8010b80:	687a      	ldr	r2, [r7, #4]
 8010b82:	8b12      	ldrh	r2, [r2, #24]
 8010b84:	9202      	str	r2, [sp, #8]
 8010b86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b88:	9201      	str	r2, [sp, #4]
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	697a      	ldr	r2, [r7, #20]
 8010b90:	69b9      	ldr	r1, [r7, #24]
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f004 fcc2 	bl	801551c <tcp_rst>
    }
    last_state = pcb->state;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	7d1b      	ldrb	r3, [r3, #20]
 8010b9c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f7ff fd34 	bl	801060c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d004      	beq.n	8010bb4 <tcp_abandon+0x154>
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	f06f 010c 	mvn.w	r1, #12
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	4798      	blx	r3
  }
}
 8010bb4:	3728      	adds	r7, #40	; 0x28
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	0801bf38 	.word	0x0801bf38
 8010bc0:	0801c07c 	.word	0x0801c07c
 8010bc4:	0801bf7c 	.word	0x0801bf7c
 8010bc8:	0801c098 	.word	0x0801c098
 8010bcc:	20008008 	.word	0x20008008
 8010bd0:	20007ffc 	.word	0x20007ffc
 8010bd4:	20008004 	.word	0x20008004
 8010bd8:	2000800c 	.word	0x2000800c

08010bdc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010be4:	2101      	movs	r1, #1
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7ff ff3a 	bl	8010a60 <tcp_abandon>
}
 8010bec:	bf00      	nop
 8010bee:	3708      	adds	r7, #8
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d106      	bne.n	8010c10 <tcp_update_rcv_ann_wnd+0x1c>
 8010c02:	4b25      	ldr	r3, [pc, #148]	; (8010c98 <tcp_update_rcv_ann_wnd+0xa4>)
 8010c04:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010c08:	4924      	ldr	r1, [pc, #144]	; (8010c9c <tcp_update_rcv_ann_wnd+0xa8>)
 8010c0a:	4825      	ldr	r0, [pc, #148]	; (8010ca0 <tcp_update_rcv_ann_wnd+0xac>)
 8010c0c:	f008 f91e 	bl	8018e4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010c18:	4413      	add	r3, r2
 8010c1a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010c24:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010c28:	bf28      	it	cs
 8010c2a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010c2e:	b292      	uxth	r2, r2
 8010c30:	4413      	add	r3, r2
 8010c32:	68fa      	ldr	r2, [r7, #12]
 8010c34:	1ad3      	subs	r3, r2, r3
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	db08      	blt.n	8010c4c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	e020      	b.n	8010c8e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c54:	1ad3      	subs	r3, r2, r3
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	dd03      	ble.n	8010c62 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010c60:	e014      	b.n	8010c8c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6a:	1ad3      	subs	r3, r2, r3
 8010c6c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c74:	d306      	bcc.n	8010c84 <tcp_update_rcv_ann_wnd+0x90>
 8010c76:	4b08      	ldr	r3, [pc, #32]	; (8010c98 <tcp_update_rcv_ann_wnd+0xa4>)
 8010c78:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010c7c:	4909      	ldr	r1, [pc, #36]	; (8010ca4 <tcp_update_rcv_ann_wnd+0xb0>)
 8010c7e:	4808      	ldr	r0, [pc, #32]	; (8010ca0 <tcp_update_rcv_ann_wnd+0xac>)
 8010c80:	f008 f8e4 	bl	8018e4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010c8c:	2300      	movs	r3, #0
  }
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	0801bf38 	.word	0x0801bf38
 8010c9c:	0801c194 	.word	0x0801c194
 8010ca0:	0801bf7c 	.word	0x0801bf7c
 8010ca4:	0801c1b8 	.word	0x0801c1b8

08010ca8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d107      	bne.n	8010cca <tcp_recved+0x22>
 8010cba:	4b1f      	ldr	r3, [pc, #124]	; (8010d38 <tcp_recved+0x90>)
 8010cbc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010cc0:	491e      	ldr	r1, [pc, #120]	; (8010d3c <tcp_recved+0x94>)
 8010cc2:	481f      	ldr	r0, [pc, #124]	; (8010d40 <tcp_recved+0x98>)
 8010cc4:	f008 f8c2 	bl	8018e4c <iprintf>
 8010cc8:	e032      	b.n	8010d30 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	7d1b      	ldrb	r3, [r3, #20]
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d106      	bne.n	8010ce0 <tcp_recved+0x38>
 8010cd2:	4b19      	ldr	r3, [pc, #100]	; (8010d38 <tcp_recved+0x90>)
 8010cd4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010cd8:	491a      	ldr	r1, [pc, #104]	; (8010d44 <tcp_recved+0x9c>)
 8010cda:	4819      	ldr	r0, [pc, #100]	; (8010d40 <tcp_recved+0x98>)
 8010cdc:	f008 f8b6 	bl	8018e4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ce4:	887b      	ldrh	r3, [r7, #2]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010cea:	89fb      	ldrh	r3, [r7, #14]
 8010cec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010cf0:	d804      	bhi.n	8010cfc <tcp_recved+0x54>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cf6:	89fa      	ldrh	r2, [r7, #14]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d204      	bcs.n	8010d06 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010d02:	851a      	strh	r2, [r3, #40]	; 0x28
 8010d04:	e002      	b.n	8010d0c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	89fa      	ldrh	r2, [r7, #14]
 8010d0a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f7ff ff71 	bl	8010bf4 <tcp_update_rcv_ann_wnd>
 8010d12:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010d1a:	d309      	bcc.n	8010d30 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	8b5b      	ldrh	r3, [r3, #26]
 8010d20:	f043 0302 	orr.w	r3, r3, #2
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f003 fe42 	bl	80149b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	0801bf38 	.word	0x0801bf38
 8010d3c:	0801c1d4 	.word	0x0801c1d4
 8010d40:	0801bf7c 	.word	0x0801bf7c
 8010d44:	0801c1ec 	.word	0x0801c1ec

08010d48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010d48:	b5b0      	push	{r4, r5, r7, lr}
 8010d4a:	b090      	sub	sp, #64	; 0x40
 8010d4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010d54:	4b94      	ldr	r3, [pc, #592]	; (8010fa8 <tcp_slowtmr+0x260>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	4a93      	ldr	r2, [pc, #588]	; (8010fa8 <tcp_slowtmr+0x260>)
 8010d5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010d5e:	4b93      	ldr	r3, [pc, #588]	; (8010fac <tcp_slowtmr+0x264>)
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	3301      	adds	r3, #1
 8010d64:	b2da      	uxtb	r2, r3
 8010d66:	4b91      	ldr	r3, [pc, #580]	; (8010fac <tcp_slowtmr+0x264>)
 8010d68:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010d6e:	4b90      	ldr	r3, [pc, #576]	; (8010fb0 <tcp_slowtmr+0x268>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010d74:	e29d      	b.n	80112b2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d78:	7d1b      	ldrb	r3, [r3, #20]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d106      	bne.n	8010d8c <tcp_slowtmr+0x44>
 8010d7e:	4b8d      	ldr	r3, [pc, #564]	; (8010fb4 <tcp_slowtmr+0x26c>)
 8010d80:	f240 42be 	movw	r2, #1214	; 0x4be
 8010d84:	498c      	ldr	r1, [pc, #560]	; (8010fb8 <tcp_slowtmr+0x270>)
 8010d86:	488d      	ldr	r0, [pc, #564]	; (8010fbc <tcp_slowtmr+0x274>)
 8010d88:	f008 f860 	bl	8018e4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8e:	7d1b      	ldrb	r3, [r3, #20]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d106      	bne.n	8010da2 <tcp_slowtmr+0x5a>
 8010d94:	4b87      	ldr	r3, [pc, #540]	; (8010fb4 <tcp_slowtmr+0x26c>)
 8010d96:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010d9a:	4989      	ldr	r1, [pc, #548]	; (8010fc0 <tcp_slowtmr+0x278>)
 8010d9c:	4887      	ldr	r0, [pc, #540]	; (8010fbc <tcp_slowtmr+0x274>)
 8010d9e:	f008 f855 	bl	8018e4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da4:	7d1b      	ldrb	r3, [r3, #20]
 8010da6:	2b0a      	cmp	r3, #10
 8010da8:	d106      	bne.n	8010db8 <tcp_slowtmr+0x70>
 8010daa:	4b82      	ldr	r3, [pc, #520]	; (8010fb4 <tcp_slowtmr+0x26c>)
 8010dac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010db0:	4984      	ldr	r1, [pc, #528]	; (8010fc4 <tcp_slowtmr+0x27c>)
 8010db2:	4882      	ldr	r0, [pc, #520]	; (8010fbc <tcp_slowtmr+0x274>)
 8010db4:	f008 f84a 	bl	8018e4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dba:	7f9a      	ldrb	r2, [r3, #30]
 8010dbc:	4b7b      	ldr	r3, [pc, #492]	; (8010fac <tcp_slowtmr+0x264>)
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d105      	bne.n	8010dd0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dca:	68db      	ldr	r3, [r3, #12]
 8010dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010dce:	e270      	b.n	80112b2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010dd0:	4b76      	ldr	r3, [pc, #472]	; (8010fac <tcp_slowtmr+0x264>)
 8010dd2:	781a      	ldrb	r2, [r3, #0]
 8010dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010dde:	2300      	movs	r3, #0
 8010de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de6:	7d1b      	ldrb	r3, [r3, #20]
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	d10a      	bne.n	8010e02 <tcp_slowtmr+0xba>
 8010dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010df2:	2b05      	cmp	r3, #5
 8010df4:	d905      	bls.n	8010e02 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e00:	e11e      	b.n	8011040 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e08:	2b0b      	cmp	r3, #11
 8010e0a:	d905      	bls.n	8010e18 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e10:	3301      	adds	r3, #1
 8010e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e16:	e113      	b.n	8011040 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d075      	beq.n	8010f0e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d006      	beq.n	8010e38 <tcp_slowtmr+0xf0>
 8010e2a:	4b62      	ldr	r3, [pc, #392]	; (8010fb4 <tcp_slowtmr+0x26c>)
 8010e2c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010e30:	4965      	ldr	r1, [pc, #404]	; (8010fc8 <tcp_slowtmr+0x280>)
 8010e32:	4862      	ldr	r0, [pc, #392]	; (8010fbc <tcp_slowtmr+0x274>)
 8010e34:	f008 f80a 	bl	8018e4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d106      	bne.n	8010e4e <tcp_slowtmr+0x106>
 8010e40:	4b5c      	ldr	r3, [pc, #368]	; (8010fb4 <tcp_slowtmr+0x26c>)
 8010e42:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010e46:	4961      	ldr	r1, [pc, #388]	; (8010fcc <tcp_slowtmr+0x284>)
 8010e48:	485c      	ldr	r0, [pc, #368]	; (8010fbc <tcp_slowtmr+0x274>)
 8010e4a:	f007 ffff 	bl	8018e4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010e54:	2b0b      	cmp	r3, #11
 8010e56:	d905      	bls.n	8010e64 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e62:	e0ed      	b.n	8011040 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010e6a:	3b01      	subs	r3, #1
 8010e6c:	4a58      	ldr	r2, [pc, #352]	; (8010fd0 <tcp_slowtmr+0x288>)
 8010e6e:	5cd3      	ldrb	r3, [r2, r3]
 8010e70:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010e78:	7c7a      	ldrb	r2, [r7, #17]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d907      	bls.n	8010e8e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010e84:	3301      	adds	r3, #1
 8010e86:	b2da      	uxtb	r2, r3
 8010e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010e94:	7c7a      	ldrb	r2, [r7, #17]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	f200 80d2 	bhi.w	8011040 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d108      	bne.n	8010ebc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010eac:	f004 fc2a 	bl	8015704 <tcp_zero_window_probe>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d014      	beq.n	8010ee0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	623b      	str	r3, [r7, #32]
 8010eba:	e011      	b.n	8010ee0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ec6:	f003 faef 	bl	80144a8 <tcp_split_unsent_seg>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d107      	bne.n	8010ee0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ed2:	f003 fd6f 	bl	80149b4 <tcp_output>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d101      	bne.n	8010ee0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010ee0:	6a3b      	ldr	r3, [r7, #32]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	f000 80ac 	beq.w	8011040 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eea:	2200      	movs	r2, #0
 8010eec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ef6:	2b06      	cmp	r3, #6
 8010ef8:	f200 80a2 	bhi.w	8011040 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010f02:	3301      	adds	r3, #1
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010f0c:	e098      	b.n	8011040 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	db0f      	blt.n	8010f38 <tcp_slowtmr+0x1f0>
 8010f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f1e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d008      	beq.n	8010f38 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	3301      	adds	r3, #1
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	b21a      	sxth	r2, r3
 8010f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f36:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f40:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010f44:	429a      	cmp	r2, r3
 8010f46:	db7b      	blt.n	8011040 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f4a:	f004 f827 	bl	8014f9c <tcp_rexmit_rto_prepare>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d007      	beq.n	8010f64 <tcp_slowtmr+0x21c>
 8010f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d171      	bne.n	8011040 <tcp_slowtmr+0x2f8>
 8010f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d06d      	beq.n	8011040 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f66:	7d1b      	ldrb	r3, [r3, #20]
 8010f68:	2b02      	cmp	r3, #2
 8010f6a:	d03a      	beq.n	8010fe2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f72:	2b0c      	cmp	r3, #12
 8010f74:	bf28      	it	cs
 8010f76:	230c      	movcs	r3, #12
 8010f78:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f80:	10db      	asrs	r3, r3, #3
 8010f82:	b21b      	sxth	r3, r3
 8010f84:	461a      	mov	r2, r3
 8010f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f8c:	4413      	add	r3, r2
 8010f8e:	7efa      	ldrb	r2, [r7, #27]
 8010f90:	4910      	ldr	r1, [pc, #64]	; (8010fd4 <tcp_slowtmr+0x28c>)
 8010f92:	5c8a      	ldrb	r2, [r1, r2]
 8010f94:	4093      	lsls	r3, r2
 8010f96:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	dc1a      	bgt.n	8010fd8 <tcp_slowtmr+0x290>
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	b21a      	sxth	r2, r3
 8010fa6:	e019      	b.n	8010fdc <tcp_slowtmr+0x294>
 8010fa8:	20007ff8 	.word	0x20007ff8
 8010fac:	2000800e 	.word	0x2000800e
 8010fb0:	20008004 	.word	0x20008004
 8010fb4:	0801bf38 	.word	0x0801bf38
 8010fb8:	0801c27c 	.word	0x0801c27c
 8010fbc:	0801bf7c 	.word	0x0801bf7c
 8010fc0:	0801c2a8 	.word	0x0801c2a8
 8010fc4:	0801c2d4 	.word	0x0801c2d4
 8010fc8:	0801c304 	.word	0x0801c304
 8010fcc:	0801c338 	.word	0x0801c338
 8010fd0:	0801df58 	.word	0x0801df58
 8010fd4:	0801df48 	.word	0x0801df48
 8010fd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	bf28      	it	cs
 8010ff8:	4613      	movcs	r3, r2
 8010ffa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010ffc:	8a7b      	ldrh	r3, [r7, #18]
 8010ffe:	085b      	lsrs	r3, r3, #1
 8011000:	b29a      	uxth	r2, r3
 8011002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011004:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011012:	005b      	lsls	r3, r3, #1
 8011014:	b29b      	uxth	r3, r3
 8011016:	429a      	cmp	r2, r3
 8011018:	d206      	bcs.n	8011028 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801101e:	005b      	lsls	r3, r3, #1
 8011020:	b29a      	uxth	r2, r3
 8011022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011024:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011034:	2200      	movs	r2, #0
 8011036:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801103a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801103c:	f004 f81e 	bl	801507c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011042:	7d1b      	ldrb	r3, [r3, #20]
 8011044:	2b06      	cmp	r3, #6
 8011046:	d111      	bne.n	801106c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104a:	8b5b      	ldrh	r3, [r3, #26]
 801104c:	f003 0310 	and.w	r3, r3, #16
 8011050:	2b00      	cmp	r3, #0
 8011052:	d00b      	beq.n	801106c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011054:	4b9c      	ldr	r3, [pc, #624]	; (80112c8 <tcp_slowtmr+0x580>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105a:	6a1b      	ldr	r3, [r3, #32]
 801105c:	1ad3      	subs	r3, r2, r3
 801105e:	2b28      	cmp	r3, #40	; 0x28
 8011060:	d904      	bls.n	801106c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011066:	3301      	adds	r3, #1
 8011068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106e:	7a5b      	ldrb	r3, [r3, #9]
 8011070:	f003 0308 	and.w	r3, r3, #8
 8011074:	2b00      	cmp	r3, #0
 8011076:	d04a      	beq.n	801110e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801107c:	2b04      	cmp	r3, #4
 801107e:	d003      	beq.n	8011088 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011082:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011084:	2b07      	cmp	r3, #7
 8011086:	d142      	bne.n	801110e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011088:	4b8f      	ldr	r3, [pc, #572]	; (80112c8 <tcp_slowtmr+0x580>)
 801108a:	681a      	ldr	r2, [r3, #0]
 801108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108e:	6a1b      	ldr	r3, [r3, #32]
 8011090:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011098:	4b8c      	ldr	r3, [pc, #560]	; (80112cc <tcp_slowtmr+0x584>)
 801109a:	440b      	add	r3, r1
 801109c:	498c      	ldr	r1, [pc, #560]	; (80112d0 <tcp_slowtmr+0x588>)
 801109e:	fba1 1303 	umull	r1, r3, r1, r3
 80110a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d90a      	bls.n	80110be <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80110a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110ac:	3301      	adds	r3, #1
 80110ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80110b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110b6:	3301      	adds	r3, #1
 80110b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80110bc:	e027      	b.n	801110e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80110be:	4b82      	ldr	r3, [pc, #520]	; (80112c8 <tcp_slowtmr+0x580>)
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c4:	6a1b      	ldr	r3, [r3, #32]
 80110c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80110c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80110ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80110d4:	4618      	mov	r0, r3
 80110d6:	4b7f      	ldr	r3, [pc, #508]	; (80112d4 <tcp_slowtmr+0x58c>)
 80110d8:	fb00 f303 	mul.w	r3, r0, r3
 80110dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80110de:	497c      	ldr	r1, [pc, #496]	; (80112d0 <tcp_slowtmr+0x588>)
 80110e0:	fba1 1303 	umull	r1, r3, r1, r3
 80110e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d911      	bls.n	801110e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80110ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110ec:	f004 faca 	bl	8015684 <tcp_keepalive>
 80110f0:	4603      	mov	r3, r0
 80110f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80110f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d107      	bne.n	801110e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80110fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011100:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011104:	3301      	adds	r3, #1
 8011106:	b2da      	uxtb	r2, r3
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011112:	2b00      	cmp	r3, #0
 8011114:	d011      	beq.n	801113a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011116:	4b6c      	ldr	r3, [pc, #432]	; (80112c8 <tcp_slowtmr+0x580>)
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111c:	6a1b      	ldr	r3, [r3, #32]
 801111e:	1ad2      	subs	r2, r2, r3
 8011120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011122:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011126:	4619      	mov	r1, r3
 8011128:	460b      	mov	r3, r1
 801112a:	005b      	lsls	r3, r3, #1
 801112c:	440b      	add	r3, r1
 801112e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011130:	429a      	cmp	r2, r3
 8011132:	d302      	bcc.n	801113a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011136:	f000 fddd 	bl	8011cf4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113c:	7d1b      	ldrb	r3, [r3, #20]
 801113e:	2b03      	cmp	r3, #3
 8011140:	d10b      	bne.n	801115a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011142:	4b61      	ldr	r3, [pc, #388]	; (80112c8 <tcp_slowtmr+0x580>)
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011148:	6a1b      	ldr	r3, [r3, #32]
 801114a:	1ad3      	subs	r3, r2, r3
 801114c:	2b28      	cmp	r3, #40	; 0x28
 801114e:	d904      	bls.n	801115a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011154:	3301      	adds	r3, #1
 8011156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115c:	7d1b      	ldrb	r3, [r3, #20]
 801115e:	2b09      	cmp	r3, #9
 8011160:	d10b      	bne.n	801117a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011162:	4b59      	ldr	r3, [pc, #356]	; (80112c8 <tcp_slowtmr+0x580>)
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011168:	6a1b      	ldr	r3, [r3, #32]
 801116a:	1ad3      	subs	r3, r2, r3
 801116c:	2bf0      	cmp	r3, #240	; 0xf0
 801116e:	d904      	bls.n	801117a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011174:	3301      	adds	r3, #1
 8011176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801117a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801117e:	2b00      	cmp	r3, #0
 8011180:	d060      	beq.n	8011244 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011188:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801118a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801118c:	f000 fbfe 	bl	801198c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011192:	2b00      	cmp	r3, #0
 8011194:	d010      	beq.n	80111b8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011196:	4b50      	ldr	r3, [pc, #320]	; (80112d8 <tcp_slowtmr+0x590>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801119c:	429a      	cmp	r2, r3
 801119e:	d106      	bne.n	80111ae <tcp_slowtmr+0x466>
 80111a0:	4b4e      	ldr	r3, [pc, #312]	; (80112dc <tcp_slowtmr+0x594>)
 80111a2:	f240 526d 	movw	r2, #1389	; 0x56d
 80111a6:	494e      	ldr	r1, [pc, #312]	; (80112e0 <tcp_slowtmr+0x598>)
 80111a8:	484e      	ldr	r0, [pc, #312]	; (80112e4 <tcp_slowtmr+0x59c>)
 80111aa:	f007 fe4f 	bl	8018e4c <iprintf>
        prev->next = pcb->next;
 80111ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b0:	68da      	ldr	r2, [r3, #12]
 80111b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b4:	60da      	str	r2, [r3, #12]
 80111b6:	e00f      	b.n	80111d8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80111b8:	4b47      	ldr	r3, [pc, #284]	; (80112d8 <tcp_slowtmr+0x590>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111be:	429a      	cmp	r2, r3
 80111c0:	d006      	beq.n	80111d0 <tcp_slowtmr+0x488>
 80111c2:	4b46      	ldr	r3, [pc, #280]	; (80112dc <tcp_slowtmr+0x594>)
 80111c4:	f240 5271 	movw	r2, #1393	; 0x571
 80111c8:	4947      	ldr	r1, [pc, #284]	; (80112e8 <tcp_slowtmr+0x5a0>)
 80111ca:	4846      	ldr	r0, [pc, #280]	; (80112e4 <tcp_slowtmr+0x59c>)
 80111cc:	f007 fe3e 	bl	8018e4c <iprintf>
        tcp_active_pcbs = pcb->next;
 80111d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	4a40      	ldr	r2, [pc, #256]	; (80112d8 <tcp_slowtmr+0x590>)
 80111d6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80111d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d013      	beq.n	8011208 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80111e8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	3304      	adds	r3, #4
 80111ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111f0:	8ad2      	ldrh	r2, [r2, #22]
 80111f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111f4:	8b09      	ldrh	r1, [r1, #24]
 80111f6:	9102      	str	r1, [sp, #8]
 80111f8:	9201      	str	r2, [sp, #4]
 80111fa:	9300      	str	r3, [sp, #0]
 80111fc:	462b      	mov	r3, r5
 80111fe:	4622      	mov	r2, r4
 8011200:	4601      	mov	r1, r0
 8011202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011204:	f004 f98a 	bl	801551c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120a:	691b      	ldr	r3, [r3, #16]
 801120c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011210:	7d1b      	ldrb	r3, [r3, #20]
 8011212:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011216:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801121e:	6838      	ldr	r0, [r7, #0]
 8011220:	f7ff f9f4 	bl	801060c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011224:	4b31      	ldr	r3, [pc, #196]	; (80112ec <tcp_slowtmr+0x5a4>)
 8011226:	2200      	movs	r2, #0
 8011228:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d004      	beq.n	801123a <tcp_slowtmr+0x4f2>
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f06f 010c 	mvn.w	r1, #12
 8011236:	68b8      	ldr	r0, [r7, #8]
 8011238:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801123a:	4b2c      	ldr	r3, [pc, #176]	; (80112ec <tcp_slowtmr+0x5a4>)
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d037      	beq.n	80112b2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011242:	e592      	b.n	8010d6a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011250:	7f1b      	ldrb	r3, [r3, #28]
 8011252:	3301      	adds	r3, #1
 8011254:	b2da      	uxtb	r2, r3
 8011256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011258:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125c:	7f1a      	ldrb	r2, [r3, #28]
 801125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011260:	7f5b      	ldrb	r3, [r3, #29]
 8011262:	429a      	cmp	r2, r3
 8011264:	d325      	bcc.n	80112b2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011268:	2200      	movs	r2, #0
 801126a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801126c:	4b1f      	ldr	r3, [pc, #124]	; (80112ec <tcp_slowtmr+0x5a4>)
 801126e:	2200      	movs	r2, #0
 8011270:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011278:	2b00      	cmp	r3, #0
 801127a:	d00b      	beq.n	8011294 <tcp_slowtmr+0x54c>
 801127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011284:	6912      	ldr	r2, [r2, #16]
 8011286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011288:	4610      	mov	r0, r2
 801128a:	4798      	blx	r3
 801128c:	4603      	mov	r3, r0
 801128e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011292:	e002      	b.n	801129a <tcp_slowtmr+0x552>
 8011294:	2300      	movs	r3, #0
 8011296:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801129a:	4b14      	ldr	r3, [pc, #80]	; (80112ec <tcp_slowtmr+0x5a4>)
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d000      	beq.n	80112a4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80112a2:	e562      	b.n	8010d6a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80112a4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d102      	bne.n	80112b2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80112ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112ae:	f003 fb81 	bl	80149b4 <tcp_output>
  while (pcb != NULL) {
 80112b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	f47f ad5e 	bne.w	8010d76 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80112ba:	2300      	movs	r3, #0
 80112bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80112be:	4b0c      	ldr	r3, [pc, #48]	; (80112f0 <tcp_slowtmr+0x5a8>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80112c4:	e069      	b.n	801139a <tcp_slowtmr+0x652>
 80112c6:	bf00      	nop
 80112c8:	20007ff8 	.word	0x20007ff8
 80112cc:	000a4cb8 	.word	0x000a4cb8
 80112d0:	10624dd3 	.word	0x10624dd3
 80112d4:	000124f8 	.word	0x000124f8
 80112d8:	20008004 	.word	0x20008004
 80112dc:	0801bf38 	.word	0x0801bf38
 80112e0:	0801c370 	.word	0x0801c370
 80112e4:	0801bf7c 	.word	0x0801bf7c
 80112e8:	0801c39c 	.word	0x0801c39c
 80112ec:	2000800c 	.word	0x2000800c
 80112f0:	20008008 	.word	0x20008008
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80112f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f6:	7d1b      	ldrb	r3, [r3, #20]
 80112f8:	2b0a      	cmp	r3, #10
 80112fa:	d006      	beq.n	801130a <tcp_slowtmr+0x5c2>
 80112fc:	4b2b      	ldr	r3, [pc, #172]	; (80113ac <tcp_slowtmr+0x664>)
 80112fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011302:	492b      	ldr	r1, [pc, #172]	; (80113b0 <tcp_slowtmr+0x668>)
 8011304:	482b      	ldr	r0, [pc, #172]	; (80113b4 <tcp_slowtmr+0x66c>)
 8011306:	f007 fda1 	bl	8018e4c <iprintf>
    pcb_remove = 0;
 801130a:	2300      	movs	r3, #0
 801130c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011310:	4b29      	ldr	r3, [pc, #164]	; (80113b8 <tcp_slowtmr+0x670>)
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011316:	6a1b      	ldr	r3, [r3, #32]
 8011318:	1ad3      	subs	r3, r2, r3
 801131a:	2bf0      	cmp	r3, #240	; 0xf0
 801131c:	d904      	bls.n	8011328 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801131e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011322:	3301      	adds	r3, #1
 8011324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801132c:	2b00      	cmp	r3, #0
 801132e:	d02f      	beq.n	8011390 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011332:	f000 fb2b 	bl	801198c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011338:	2b00      	cmp	r3, #0
 801133a:	d010      	beq.n	801135e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801133c:	4b1f      	ldr	r3, [pc, #124]	; (80113bc <tcp_slowtmr+0x674>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011342:	429a      	cmp	r2, r3
 8011344:	d106      	bne.n	8011354 <tcp_slowtmr+0x60c>
 8011346:	4b19      	ldr	r3, [pc, #100]	; (80113ac <tcp_slowtmr+0x664>)
 8011348:	f240 52af 	movw	r2, #1455	; 0x5af
 801134c:	491c      	ldr	r1, [pc, #112]	; (80113c0 <tcp_slowtmr+0x678>)
 801134e:	4819      	ldr	r0, [pc, #100]	; (80113b4 <tcp_slowtmr+0x66c>)
 8011350:	f007 fd7c 	bl	8018e4c <iprintf>
        prev->next = pcb->next;
 8011354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011356:	68da      	ldr	r2, [r3, #12]
 8011358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135a:	60da      	str	r2, [r3, #12]
 801135c:	e00f      	b.n	801137e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801135e:	4b17      	ldr	r3, [pc, #92]	; (80113bc <tcp_slowtmr+0x674>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011364:	429a      	cmp	r2, r3
 8011366:	d006      	beq.n	8011376 <tcp_slowtmr+0x62e>
 8011368:	4b10      	ldr	r3, [pc, #64]	; (80113ac <tcp_slowtmr+0x664>)
 801136a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801136e:	4915      	ldr	r1, [pc, #84]	; (80113c4 <tcp_slowtmr+0x67c>)
 8011370:	4810      	ldr	r0, [pc, #64]	; (80113b4 <tcp_slowtmr+0x66c>)
 8011372:	f007 fd6b 	bl	8018e4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	4a10      	ldr	r2, [pc, #64]	; (80113bc <tcp_slowtmr+0x674>)
 801137c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011388:	69f8      	ldr	r0, [r7, #28]
 801138a:	f7ff f93f 	bl	801060c <tcp_free>
 801138e:	e004      	b.n	801139a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011392:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139c:	2b00      	cmp	r3, #0
 801139e:	d1a9      	bne.n	80112f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 80113a0:	bf00      	nop
 80113a2:	bf00      	nop
 80113a4:	3730      	adds	r7, #48	; 0x30
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bdb0      	pop	{r4, r5, r7, pc}
 80113aa:	bf00      	nop
 80113ac:	0801bf38 	.word	0x0801bf38
 80113b0:	0801c3c8 	.word	0x0801c3c8
 80113b4:	0801bf7c 	.word	0x0801bf7c
 80113b8:	20007ff8 	.word	0x20007ff8
 80113bc:	20008008 	.word	0x20008008
 80113c0:	0801c3f8 	.word	0x0801c3f8
 80113c4:	0801c420 	.word	0x0801c420

080113c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80113ce:	4b2d      	ldr	r3, [pc, #180]	; (8011484 <tcp_fasttmr+0xbc>)
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	3301      	adds	r3, #1
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	4b2b      	ldr	r3, [pc, #172]	; (8011484 <tcp_fasttmr+0xbc>)
 80113d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80113da:	4b2b      	ldr	r3, [pc, #172]	; (8011488 <tcp_fasttmr+0xc0>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80113e0:	e048      	b.n	8011474 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	7f9a      	ldrb	r2, [r3, #30]
 80113e6:	4b27      	ldr	r3, [pc, #156]	; (8011484 <tcp_fasttmr+0xbc>)
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d03f      	beq.n	801146e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80113ee:	4b25      	ldr	r3, [pc, #148]	; (8011484 <tcp_fasttmr+0xbc>)
 80113f0:	781a      	ldrb	r2, [r3, #0]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	8b5b      	ldrh	r3, [r3, #26]
 80113fa:	f003 0301 	and.w	r3, r3, #1
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d010      	beq.n	8011424 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	8b5b      	ldrh	r3, [r3, #26]
 8011406:	f043 0302 	orr.w	r3, r3, #2
 801140a:	b29a      	uxth	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f003 facf 	bl	80149b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	8b5b      	ldrh	r3, [r3, #26]
 801141a:	f023 0303 	bic.w	r3, r3, #3
 801141e:	b29a      	uxth	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	8b5b      	ldrh	r3, [r3, #26]
 8011428:	f003 0308 	and.w	r3, r3, #8
 801142c:	2b00      	cmp	r3, #0
 801142e:	d009      	beq.n	8011444 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	8b5b      	ldrh	r3, [r3, #26]
 8011434:	f023 0308 	bic.w	r3, r3, #8
 8011438:	b29a      	uxth	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f7ff fa78 	bl	8010934 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801144e:	2b00      	cmp	r3, #0
 8011450:	d00a      	beq.n	8011468 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011452:	4b0e      	ldr	r3, [pc, #56]	; (801148c <tcp_fasttmr+0xc4>)
 8011454:	2200      	movs	r2, #0
 8011456:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f000 f819 	bl	8011490 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801145e:	4b0b      	ldr	r3, [pc, #44]	; (801148c <tcp_fasttmr+0xc4>)
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d000      	beq.n	8011468 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011466:	e7b8      	b.n	80113da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	607b      	str	r3, [r7, #4]
 801146c:	e002      	b.n	8011474 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d1b3      	bne.n	80113e2 <tcp_fasttmr+0x1a>
    }
  }
}
 801147a:	bf00      	nop
 801147c:	bf00      	nop
 801147e:	3708      	adds	r7, #8
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	2000800e 	.word	0x2000800e
 8011488:	20008004 	.word	0x20008004
 801148c:	2000800c 	.word	0x2000800c

08011490 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011490:	b590      	push	{r4, r7, lr}
 8011492:	b085      	sub	sp, #20
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d109      	bne.n	80114b2 <tcp_process_refused_data+0x22>
 801149e:	4b37      	ldr	r3, [pc, #220]	; (801157c <tcp_process_refused_data+0xec>)
 80114a0:	f240 6209 	movw	r2, #1545	; 0x609
 80114a4:	4936      	ldr	r1, [pc, #216]	; (8011580 <tcp_process_refused_data+0xf0>)
 80114a6:	4837      	ldr	r0, [pc, #220]	; (8011584 <tcp_process_refused_data+0xf4>)
 80114a8:	f007 fcd0 	bl	8018e4c <iprintf>
 80114ac:	f06f 030f 	mvn.w	r3, #15
 80114b0:	e060      	b.n	8011574 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114b6:	7b5b      	ldrb	r3, [r3, #13]
 80114b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d00b      	beq.n	80114e8 <tcp_process_refused_data+0x58>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6918      	ldr	r0, [r3, #16]
 80114da:	2300      	movs	r3, #0
 80114dc:	68ba      	ldr	r2, [r7, #8]
 80114de:	6879      	ldr	r1, [r7, #4]
 80114e0:	47a0      	blx	r4
 80114e2:	4603      	mov	r3, r0
 80114e4:	73fb      	strb	r3, [r7, #15]
 80114e6:	e007      	b.n	80114f8 <tcp_process_refused_data+0x68>
 80114e8:	2300      	movs	r3, #0
 80114ea:	68ba      	ldr	r2, [r7, #8]
 80114ec:	6879      	ldr	r1, [r7, #4]
 80114ee:	2000      	movs	r0, #0
 80114f0:	f000 f8a4 	bl	801163c <tcp_recv_null>
 80114f4:	4603      	mov	r3, r0
 80114f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80114f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d12a      	bne.n	8011556 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011500:	7bbb      	ldrb	r3, [r7, #14]
 8011502:	f003 0320 	and.w	r3, r3, #32
 8011506:	2b00      	cmp	r3, #0
 8011508:	d033      	beq.n	8011572 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801150e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011512:	d005      	beq.n	8011520 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011518:	3301      	adds	r3, #1
 801151a:	b29a      	uxth	r2, r3
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00b      	beq.n	8011542 <tcp_process_refused_data+0xb2>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6918      	ldr	r0, [r3, #16]
 8011534:	2300      	movs	r3, #0
 8011536:	2200      	movs	r2, #0
 8011538:	6879      	ldr	r1, [r7, #4]
 801153a:	47a0      	blx	r4
 801153c:	4603      	mov	r3, r0
 801153e:	73fb      	strb	r3, [r7, #15]
 8011540:	e001      	b.n	8011546 <tcp_process_refused_data+0xb6>
 8011542:	2300      	movs	r3, #0
 8011544:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801154a:	f113 0f0d 	cmn.w	r3, #13
 801154e:	d110      	bne.n	8011572 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011550:	f06f 030c 	mvn.w	r3, #12
 8011554:	e00e      	b.n	8011574 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801155a:	f113 0f0d 	cmn.w	r3, #13
 801155e:	d102      	bne.n	8011566 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011560:	f06f 030c 	mvn.w	r3, #12
 8011564:	e006      	b.n	8011574 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	68ba      	ldr	r2, [r7, #8]
 801156a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801156c:	f06f 0304 	mvn.w	r3, #4
 8011570:	e000      	b.n	8011574 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	4618      	mov	r0, r3
 8011576:	3714      	adds	r7, #20
 8011578:	46bd      	mov	sp, r7
 801157a:	bd90      	pop	{r4, r7, pc}
 801157c:	0801bf38 	.word	0x0801bf38
 8011580:	0801c448 	.word	0x0801c448
 8011584:	0801bf7c 	.word	0x0801bf7c

08011588 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011590:	e007      	b.n	80115a2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f80a 	bl	80115b2 <tcp_seg_free>
    seg = next;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d1f4      	bne.n	8011592 <tcp_segs_free+0xa>
  }
}
 80115a8:	bf00      	nop
 80115aa:	bf00      	nop
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b082      	sub	sp, #8
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d00c      	beq.n	80115da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d004      	beq.n	80115d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fe fd7d 	bl	80100cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80115d2:	6879      	ldr	r1, [r7, #4]
 80115d4:	2003      	movs	r0, #3
 80115d6:	f7fd ff23 	bl	800f420 <memp_free>
  }
}
 80115da:	bf00      	nop
 80115dc:	3708      	adds	r7, #8
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
	...

080115e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d106      	bne.n	8011600 <tcp_seg_copy+0x1c>
 80115f2:	4b0f      	ldr	r3, [pc, #60]	; (8011630 <tcp_seg_copy+0x4c>)
 80115f4:	f240 6282 	movw	r2, #1666	; 0x682
 80115f8:	490e      	ldr	r1, [pc, #56]	; (8011634 <tcp_seg_copy+0x50>)
 80115fa:	480f      	ldr	r0, [pc, #60]	; (8011638 <tcp_seg_copy+0x54>)
 80115fc:	f007 fc26 	bl	8018e4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011600:	2003      	movs	r0, #3
 8011602:	f7fd fe9d 	bl	800f340 <memp_malloc>
 8011606:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d101      	bne.n	8011612 <tcp_seg_copy+0x2e>
    return NULL;
 801160e:	2300      	movs	r3, #0
 8011610:	e00a      	b.n	8011628 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011612:	2210      	movs	r2, #16
 8011614:	6879      	ldr	r1, [r7, #4]
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f007 fde6 	bl	80191e8 <memcpy>
  pbuf_ref(cseg->p);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	4618      	mov	r0, r3
 8011622:	f7fe fdf3 	bl	801020c <pbuf_ref>
  return cseg;
 8011626:	68fb      	ldr	r3, [r7, #12]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3710      	adds	r7, #16
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	0801bf38 	.word	0x0801bf38
 8011634:	0801c48c 	.word	0x0801c48c
 8011638:	0801bf7c 	.word	0x0801bf7c

0801163c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	607a      	str	r2, [r7, #4]
 8011648:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d109      	bne.n	8011664 <tcp_recv_null+0x28>
 8011650:	4b12      	ldr	r3, [pc, #72]	; (801169c <tcp_recv_null+0x60>)
 8011652:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011656:	4912      	ldr	r1, [pc, #72]	; (80116a0 <tcp_recv_null+0x64>)
 8011658:	4812      	ldr	r0, [pc, #72]	; (80116a4 <tcp_recv_null+0x68>)
 801165a:	f007 fbf7 	bl	8018e4c <iprintf>
 801165e:	f06f 030f 	mvn.w	r3, #15
 8011662:	e016      	b.n	8011692 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d009      	beq.n	801167e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	891b      	ldrh	r3, [r3, #8]
 801166e:	4619      	mov	r1, r3
 8011670:	68b8      	ldr	r0, [r7, #8]
 8011672:	f7ff fb19 	bl	8010ca8 <tcp_recved>
    pbuf_free(p);
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7fe fd28 	bl	80100cc <pbuf_free>
 801167c:	e008      	b.n	8011690 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801167e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d104      	bne.n	8011690 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011686:	68b8      	ldr	r0, [r7, #8]
 8011688:	f7ff f9be 	bl	8010a08 <tcp_close>
 801168c:	4603      	mov	r3, r0
 801168e:	e000      	b.n	8011692 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011690:	2300      	movs	r3, #0
}
 8011692:	4618      	mov	r0, r3
 8011694:	3710      	adds	r7, #16
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	0801bf38 	.word	0x0801bf38
 80116a0:	0801c4a8 	.word	0x0801c4a8
 80116a4:	0801bf7c 	.word	0x0801bf7c

080116a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b086      	sub	sp, #24
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	4603      	mov	r3, r0
 80116b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80116b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	db01      	blt.n	80116be <tcp_kill_prio+0x16>
 80116ba:	79fb      	ldrb	r3, [r7, #7]
 80116bc:	e000      	b.n	80116c0 <tcp_kill_prio+0x18>
 80116be:	237f      	movs	r3, #127	; 0x7f
 80116c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80116c2:	7afb      	ldrb	r3, [r7, #11]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d034      	beq.n	8011732 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80116c8:	7afb      	ldrb	r3, [r7, #11]
 80116ca:	3b01      	subs	r3, #1
 80116cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80116d2:	2300      	movs	r3, #0
 80116d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116d6:	4b19      	ldr	r3, [pc, #100]	; (801173c <tcp_kill_prio+0x94>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	617b      	str	r3, [r7, #20]
 80116dc:	e01f      	b.n	801171e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	7d5b      	ldrb	r3, [r3, #21]
 80116e2:	7afa      	ldrb	r2, [r7, #11]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d80c      	bhi.n	8011702 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80116ec:	7afa      	ldrb	r2, [r7, #11]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d112      	bne.n	8011718 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80116f2:	4b13      	ldr	r3, [pc, #76]	; (8011740 <tcp_kill_prio+0x98>)
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	6a1b      	ldr	r3, [r3, #32]
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d80a      	bhi.n	8011718 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011702:	4b0f      	ldr	r3, [pc, #60]	; (8011740 <tcp_kill_prio+0x98>)
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	7d5b      	ldrb	r3, [r3, #21]
 8011716:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	617b      	str	r3, [r7, #20]
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d1dc      	bne.n	80116de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d004      	beq.n	8011734 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801172a:	6938      	ldr	r0, [r7, #16]
 801172c:	f7ff fa56 	bl	8010bdc <tcp_abort>
 8011730:	e000      	b.n	8011734 <tcp_kill_prio+0x8c>
    return;
 8011732:	bf00      	nop
  }
}
 8011734:	3718      	adds	r7, #24
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	20008004 	.word	0x20008004
 8011740:	20007ff8 	.word	0x20007ff8

08011744 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af00      	add	r7, sp, #0
 801174a:	4603      	mov	r3, r0
 801174c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801174e:	79fb      	ldrb	r3, [r7, #7]
 8011750:	2b08      	cmp	r3, #8
 8011752:	d009      	beq.n	8011768 <tcp_kill_state+0x24>
 8011754:	79fb      	ldrb	r3, [r7, #7]
 8011756:	2b09      	cmp	r3, #9
 8011758:	d006      	beq.n	8011768 <tcp_kill_state+0x24>
 801175a:	4b1a      	ldr	r3, [pc, #104]	; (80117c4 <tcp_kill_state+0x80>)
 801175c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011760:	4919      	ldr	r1, [pc, #100]	; (80117c8 <tcp_kill_state+0x84>)
 8011762:	481a      	ldr	r0, [pc, #104]	; (80117cc <tcp_kill_state+0x88>)
 8011764:	f007 fb72 	bl	8018e4c <iprintf>

  inactivity = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801176c:	2300      	movs	r3, #0
 801176e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011770:	4b17      	ldr	r3, [pc, #92]	; (80117d0 <tcp_kill_state+0x8c>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	617b      	str	r3, [r7, #20]
 8011776:	e017      	b.n	80117a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	7d1b      	ldrb	r3, [r3, #20]
 801177c:	79fa      	ldrb	r2, [r7, #7]
 801177e:	429a      	cmp	r2, r3
 8011780:	d10f      	bne.n	80117a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011782:	4b14      	ldr	r3, [pc, #80]	; (80117d4 <tcp_kill_state+0x90>)
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	6a1b      	ldr	r3, [r3, #32]
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	68fa      	ldr	r2, [r7, #12]
 801178e:	429a      	cmp	r2, r3
 8011790:	d807      	bhi.n	80117a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011792:	4b10      	ldr	r3, [pc, #64]	; (80117d4 <tcp_kill_state+0x90>)
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	6a1b      	ldr	r3, [r3, #32]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	617b      	str	r3, [r7, #20]
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1e4      	bne.n	8011778 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d003      	beq.n	80117bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80117b4:	2100      	movs	r1, #0
 80117b6:	6938      	ldr	r0, [r7, #16]
 80117b8:	f7ff f952 	bl	8010a60 <tcp_abandon>
  }
}
 80117bc:	bf00      	nop
 80117be:	3718      	adds	r7, #24
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	0801bf38 	.word	0x0801bf38
 80117c8:	0801c4c4 	.word	0x0801c4c4
 80117cc:	0801bf7c 	.word	0x0801bf7c
 80117d0:	20008004 	.word	0x20008004
 80117d4:	20007ff8 	.word	0x20007ff8

080117d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80117e2:	2300      	movs	r3, #0
 80117e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80117e6:	4b12      	ldr	r3, [pc, #72]	; (8011830 <tcp_kill_timewait+0x58>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	60fb      	str	r3, [r7, #12]
 80117ec:	e012      	b.n	8011814 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80117ee:	4b11      	ldr	r3, [pc, #68]	; (8011834 <tcp_kill_timewait+0x5c>)
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6a1b      	ldr	r3, [r3, #32]
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d807      	bhi.n	801180e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80117fe:	4b0d      	ldr	r3, [pc, #52]	; (8011834 <tcp_kill_timewait+0x5c>)
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6a1b      	ldr	r3, [r3, #32]
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	60fb      	str	r3, [r7, #12]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d1e9      	bne.n	80117ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d002      	beq.n	8011826 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011820:	68b8      	ldr	r0, [r7, #8]
 8011822:	f7ff f9db 	bl	8010bdc <tcp_abort>
  }
}
 8011826:	bf00      	nop
 8011828:	3710      	adds	r7, #16
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	20008008 	.word	0x20008008
 8011834:	20007ff8 	.word	0x20007ff8

08011838 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801183e:	4b10      	ldr	r3, [pc, #64]	; (8011880 <tcp_handle_closepend+0x48>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011844:	e014      	b.n	8011870 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	8b5b      	ldrh	r3, [r3, #26]
 8011850:	f003 0308 	and.w	r3, r3, #8
 8011854:	2b00      	cmp	r3, #0
 8011856:	d009      	beq.n	801186c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	8b5b      	ldrh	r3, [r3, #26]
 801185c:	f023 0308 	bic.w	r3, r3, #8
 8011860:	b29a      	uxth	r2, r3
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f7ff f864 	bl	8010934 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d1e7      	bne.n	8011846 <tcp_handle_closepend+0xe>
  }
}
 8011876:	bf00      	nop
 8011878:	bf00      	nop
 801187a:	3708      	adds	r7, #8
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	20008004 	.word	0x20008004

08011884 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	4603      	mov	r3, r0
 801188c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801188e:	2001      	movs	r0, #1
 8011890:	f7fd fd56 	bl	800f340 <memp_malloc>
 8011894:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d126      	bne.n	80118ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801189c:	f7ff ffcc 	bl	8011838 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80118a0:	f7ff ff9a 	bl	80117d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80118a4:	2001      	movs	r0, #1
 80118a6:	f7fd fd4b 	bl	800f340 <memp_malloc>
 80118aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d11b      	bne.n	80118ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80118b2:	2009      	movs	r0, #9
 80118b4:	f7ff ff46 	bl	8011744 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80118b8:	2001      	movs	r0, #1
 80118ba:	f7fd fd41 	bl	800f340 <memp_malloc>
 80118be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d111      	bne.n	80118ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80118c6:	2008      	movs	r0, #8
 80118c8:	f7ff ff3c 	bl	8011744 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80118cc:	2001      	movs	r0, #1
 80118ce:	f7fd fd37 	bl	800f340 <memp_malloc>
 80118d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d107      	bne.n	80118ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80118da:	79fb      	ldrb	r3, [r7, #7]
 80118dc:	4618      	mov	r0, r3
 80118de:	f7ff fee3 	bl	80116a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80118e2:	2001      	movs	r0, #1
 80118e4:	f7fd fd2c 	bl	800f340 <memp_malloc>
 80118e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d03f      	beq.n	8011970 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80118f0:	229c      	movs	r2, #156	; 0x9c
 80118f2:	2100      	movs	r1, #0
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f007 fbff 	bl	80190f8 <memset>
    pcb->prio = prio;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	79fa      	ldrb	r2, [r7, #7]
 80118fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011906:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011910:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	22ff      	movs	r2, #255	; 0xff
 801191e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011926:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2206      	movs	r2, #6
 801192c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2206      	movs	r2, #6
 8011934:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801193c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2201      	movs	r2, #1
 8011942:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011946:	4b0d      	ldr	r3, [pc, #52]	; (801197c <tcp_alloc+0xf8>)
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801194e:	4b0c      	ldr	r3, [pc, #48]	; (8011980 <tcp_alloc+0xfc>)
 8011950:	781a      	ldrb	r2, [r3, #0]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801195c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	4a08      	ldr	r2, [pc, #32]	; (8011984 <tcp_alloc+0x100>)
 8011964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	4a07      	ldr	r2, [pc, #28]	; (8011988 <tcp_alloc+0x104>)
 801196c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011970:	68fb      	ldr	r3, [r7, #12]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3710      	adds	r7, #16
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	20007ff8 	.word	0x20007ff8
 8011980:	2000800e 	.word	0x2000800e
 8011984:	0801163d 	.word	0x0801163d
 8011988:	006ddd00 	.word	0x006ddd00

0801198c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d107      	bne.n	80119aa <tcp_pcb_purge+0x1e>
 801199a:	4b21      	ldr	r3, [pc, #132]	; (8011a20 <tcp_pcb_purge+0x94>)
 801199c:	f640 0251 	movw	r2, #2129	; 0x851
 80119a0:	4920      	ldr	r1, [pc, #128]	; (8011a24 <tcp_pcb_purge+0x98>)
 80119a2:	4821      	ldr	r0, [pc, #132]	; (8011a28 <tcp_pcb_purge+0x9c>)
 80119a4:	f007 fa52 	bl	8018e4c <iprintf>
 80119a8:	e037      	b.n	8011a1a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	7d1b      	ldrb	r3, [r3, #20]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d033      	beq.n	8011a1a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80119b6:	2b0a      	cmp	r3, #10
 80119b8:	d02f      	beq.n	8011a1a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d02b      	beq.n	8011a1a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d007      	beq.n	80119da <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fe fb7c 	bl	80100cc <pbuf_free>
      pcb->refused_data = NULL;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2200      	movs	r2, #0
 80119d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d002      	beq.n	80119e8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 f986 	bl	8011cf4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7ff fdc7 	bl	8011588 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7ff fdc2 	bl	8011588 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2200      	movs	r2, #0
 8011a08:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2200      	movs	r2, #0
 8011a16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011a1a:	3708      	adds	r7, #8
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	0801bf38 	.word	0x0801bf38
 8011a24:	0801c584 	.word	0x0801c584
 8011a28:	0801bf7c 	.word	0x0801bf7c

08011a2c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d106      	bne.n	8011a4a <tcp_pcb_remove+0x1e>
 8011a3c:	4b3e      	ldr	r3, [pc, #248]	; (8011b38 <tcp_pcb_remove+0x10c>)
 8011a3e:	f640 0283 	movw	r2, #2179	; 0x883
 8011a42:	493e      	ldr	r1, [pc, #248]	; (8011b3c <tcp_pcb_remove+0x110>)
 8011a44:	483e      	ldr	r0, [pc, #248]	; (8011b40 <tcp_pcb_remove+0x114>)
 8011a46:	f007 fa01 	bl	8018e4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d106      	bne.n	8011a5e <tcp_pcb_remove+0x32>
 8011a50:	4b39      	ldr	r3, [pc, #228]	; (8011b38 <tcp_pcb_remove+0x10c>)
 8011a52:	f640 0284 	movw	r2, #2180	; 0x884
 8011a56:	493b      	ldr	r1, [pc, #236]	; (8011b44 <tcp_pcb_remove+0x118>)
 8011a58:	4839      	ldr	r0, [pc, #228]	; (8011b40 <tcp_pcb_remove+0x114>)
 8011a5a:	f007 f9f7 	bl	8018e4c <iprintf>

  TCP_RMV(pcblist, pcb);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	683a      	ldr	r2, [r7, #0]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d105      	bne.n	8011a74 <tcp_pcb_remove+0x48>
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	68da      	ldr	r2, [r3, #12]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	601a      	str	r2, [r3, #0]
 8011a72:	e013      	b.n	8011a9c <tcp_pcb_remove+0x70>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	60fb      	str	r3, [r7, #12]
 8011a7a:	e00c      	b.n	8011a96 <tcp_pcb_remove+0x6a>
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	683a      	ldr	r2, [r7, #0]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d104      	bne.n	8011a90 <tcp_pcb_remove+0x64>
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	68da      	ldr	r2, [r3, #12]
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	60da      	str	r2, [r3, #12]
 8011a8e:	e005      	b.n	8011a9c <tcp_pcb_remove+0x70>
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	60fb      	str	r3, [r7, #12]
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1ef      	bne.n	8011a7c <tcp_pcb_remove+0x50>
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011aa2:	6838      	ldr	r0, [r7, #0]
 8011aa4:	f7ff ff72 	bl	801198c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	7d1b      	ldrb	r3, [r3, #20]
 8011aac:	2b0a      	cmp	r3, #10
 8011aae:	d013      	beq.n	8011ad8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d00f      	beq.n	8011ad8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	8b5b      	ldrh	r3, [r3, #26]
 8011abc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d009      	beq.n	8011ad8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	8b5b      	ldrh	r3, [r3, #26]
 8011ac8:	f043 0302 	orr.w	r3, r3, #2
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011ad2:	6838      	ldr	r0, [r7, #0]
 8011ad4:	f002 ff6e 	bl	80149b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	7d1b      	ldrb	r3, [r3, #20]
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d020      	beq.n	8011b22 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d006      	beq.n	8011af6 <tcp_pcb_remove+0xca>
 8011ae8:	4b13      	ldr	r3, [pc, #76]	; (8011b38 <tcp_pcb_remove+0x10c>)
 8011aea:	f640 0293 	movw	r2, #2195	; 0x893
 8011aee:	4916      	ldr	r1, [pc, #88]	; (8011b48 <tcp_pcb_remove+0x11c>)
 8011af0:	4813      	ldr	r0, [pc, #76]	; (8011b40 <tcp_pcb_remove+0x114>)
 8011af2:	f007 f9ab 	bl	8018e4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d006      	beq.n	8011b0c <tcp_pcb_remove+0xe0>
 8011afe:	4b0e      	ldr	r3, [pc, #56]	; (8011b38 <tcp_pcb_remove+0x10c>)
 8011b00:	f640 0294 	movw	r2, #2196	; 0x894
 8011b04:	4911      	ldr	r1, [pc, #68]	; (8011b4c <tcp_pcb_remove+0x120>)
 8011b06:	480e      	ldr	r0, [pc, #56]	; (8011b40 <tcp_pcb_remove+0x114>)
 8011b08:	f007 f9a0 	bl	8018e4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d006      	beq.n	8011b22 <tcp_pcb_remove+0xf6>
 8011b14:	4b08      	ldr	r3, [pc, #32]	; (8011b38 <tcp_pcb_remove+0x10c>)
 8011b16:	f640 0296 	movw	r2, #2198	; 0x896
 8011b1a:	490d      	ldr	r1, [pc, #52]	; (8011b50 <tcp_pcb_remove+0x124>)
 8011b1c:	4808      	ldr	r0, [pc, #32]	; (8011b40 <tcp_pcb_remove+0x114>)
 8011b1e:	f007 f995 	bl	8018e4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2200      	movs	r2, #0
 8011b26:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011b2e:	bf00      	nop
 8011b30:	3710      	adds	r7, #16
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	0801bf38 	.word	0x0801bf38
 8011b3c:	0801c5a0 	.word	0x0801c5a0
 8011b40:	0801bf7c 	.word	0x0801bf7c
 8011b44:	0801c5bc 	.word	0x0801c5bc
 8011b48:	0801c5dc 	.word	0x0801c5dc
 8011b4c:	0801c5f4 	.word	0x0801c5f4
 8011b50:	0801c610 	.word	0x0801c610

08011b54 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d106      	bne.n	8011b70 <tcp_next_iss+0x1c>
 8011b62:	4b0a      	ldr	r3, [pc, #40]	; (8011b8c <tcp_next_iss+0x38>)
 8011b64:	f640 02af 	movw	r2, #2223	; 0x8af
 8011b68:	4909      	ldr	r1, [pc, #36]	; (8011b90 <tcp_next_iss+0x3c>)
 8011b6a:	480a      	ldr	r0, [pc, #40]	; (8011b94 <tcp_next_iss+0x40>)
 8011b6c:	f007 f96e 	bl	8018e4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011b70:	4b09      	ldr	r3, [pc, #36]	; (8011b98 <tcp_next_iss+0x44>)
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	4b09      	ldr	r3, [pc, #36]	; (8011b9c <tcp_next_iss+0x48>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4413      	add	r3, r2
 8011b7a:	4a07      	ldr	r2, [pc, #28]	; (8011b98 <tcp_next_iss+0x44>)
 8011b7c:	6013      	str	r3, [r2, #0]
  return iss;
 8011b7e:	4b06      	ldr	r3, [pc, #24]	; (8011b98 <tcp_next_iss+0x44>)
 8011b80:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3708      	adds	r7, #8
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
 8011b8a:	bf00      	nop
 8011b8c:	0801bf38 	.word	0x0801bf38
 8011b90:	0801c628 	.word	0x0801c628
 8011b94:	0801bf7c 	.word	0x0801bf7c
 8011b98:	20000058 	.word	0x20000058
 8011b9c:	20007ff8 	.word	0x20007ff8

08011ba0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b086      	sub	sp, #24
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	607a      	str	r2, [r7, #4]
 8011bac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d106      	bne.n	8011bc2 <tcp_eff_send_mss_netif+0x22>
 8011bb4:	4b14      	ldr	r3, [pc, #80]	; (8011c08 <tcp_eff_send_mss_netif+0x68>)
 8011bb6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011bba:	4914      	ldr	r1, [pc, #80]	; (8011c0c <tcp_eff_send_mss_netif+0x6c>)
 8011bbc:	4814      	ldr	r0, [pc, #80]	; (8011c10 <tcp_eff_send_mss_netif+0x70>)
 8011bbe:	f007 f945 	bl	8018e4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d101      	bne.n	8011bcc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011bc8:	89fb      	ldrh	r3, [r7, #14]
 8011bca:	e019      	b.n	8011c00 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011bd0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011bd2:	8afb      	ldrh	r3, [r7, #22]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d012      	beq.n	8011bfe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011bd8:	2328      	movs	r3, #40	; 0x28
 8011bda:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011bdc:	8afa      	ldrh	r2, [r7, #22]
 8011bde:	8abb      	ldrh	r3, [r7, #20]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d904      	bls.n	8011bee <tcp_eff_send_mss_netif+0x4e>
 8011be4:	8afa      	ldrh	r2, [r7, #22]
 8011be6:	8abb      	ldrh	r3, [r7, #20]
 8011be8:	1ad3      	subs	r3, r2, r3
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	e000      	b.n	8011bf0 <tcp_eff_send_mss_netif+0x50>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011bf2:	8a7a      	ldrh	r2, [r7, #18]
 8011bf4:	89fb      	ldrh	r3, [r7, #14]
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	bf28      	it	cs
 8011bfa:	4613      	movcs	r3, r2
 8011bfc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011bfe:	89fb      	ldrh	r3, [r7, #14]
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3718      	adds	r7, #24
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	0801bf38 	.word	0x0801bf38
 8011c0c:	0801c644 	.word	0x0801c644
 8011c10:	0801bf7c 	.word	0x0801bf7c

08011c14 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d119      	bne.n	8011c5c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011c28:	4b10      	ldr	r3, [pc, #64]	; (8011c6c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011c2a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011c2e:	4910      	ldr	r1, [pc, #64]	; (8011c70 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011c30:	4810      	ldr	r0, [pc, #64]	; (8011c74 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011c32:	f007 f90b 	bl	8018e4c <iprintf>

  while (pcb != NULL) {
 8011c36:	e011      	b.n	8011c5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d108      	bne.n	8011c56 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011c4a:	68f8      	ldr	r0, [r7, #12]
 8011c4c:	f7fe ffc6 	bl	8010bdc <tcp_abort>
      pcb = next;
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	60fb      	str	r3, [r7, #12]
 8011c54:	e002      	b.n	8011c5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	68db      	ldr	r3, [r3, #12]
 8011c5a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d1ea      	bne.n	8011c38 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011c62:	bf00      	nop
 8011c64:	bf00      	nop
 8011c66:	3710      	adds	r7, #16
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	0801bf38 	.word	0x0801bf38
 8011c70:	0801c66c 	.word	0x0801c66c
 8011c74:	0801bf7c 	.word	0x0801bf7c

08011c78 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d02a      	beq.n	8011cde <tcp_netif_ip_addr_changed+0x66>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d026      	beq.n	8011cde <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011c90:	4b15      	ldr	r3, [pc, #84]	; (8011ce8 <tcp_netif_ip_addr_changed+0x70>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	4619      	mov	r1, r3
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f7ff ffbc 	bl	8011c14 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011c9c:	4b13      	ldr	r3, [pc, #76]	; (8011cec <tcp_netif_ip_addr_changed+0x74>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f7ff ffb6 	bl	8011c14 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d017      	beq.n	8011cde <tcp_netif_ip_addr_changed+0x66>
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d013      	beq.n	8011cde <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011cb6:	4b0e      	ldr	r3, [pc, #56]	; (8011cf0 <tcp_netif_ip_addr_changed+0x78>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	60fb      	str	r3, [r7, #12]
 8011cbc:	e00c      	b.n	8011cd8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681a      	ldr	r2, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d103      	bne.n	8011cd2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	60fb      	str	r3, [r7, #12]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d1ef      	bne.n	8011cbe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011cde:	bf00      	nop
 8011ce0:	3710      	adds	r7, #16
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	20008004 	.word	0x20008004
 8011cec:	20007ffc 	.word	0x20007ffc
 8011cf0:	20008000 	.word	0x20008000

08011cf4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d007      	beq.n	8011d14 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7ff fc3d 	bl	8011588 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2200      	movs	r2, #0
 8011d12:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011d14:	bf00      	nop
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011d1c:	b590      	push	{r4, r7, lr}
 8011d1e:	b08d      	sub	sp, #52	; 0x34
 8011d20:	af04      	add	r7, sp, #16
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d105      	bne.n	8011d38 <tcp_input+0x1c>
 8011d2c:	4b9b      	ldr	r3, [pc, #620]	; (8011f9c <tcp_input+0x280>)
 8011d2e:	2283      	movs	r2, #131	; 0x83
 8011d30:	499b      	ldr	r1, [pc, #620]	; (8011fa0 <tcp_input+0x284>)
 8011d32:	489c      	ldr	r0, [pc, #624]	; (8011fa4 <tcp_input+0x288>)
 8011d34:	f007 f88a 	bl	8018e4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	4a9a      	ldr	r2, [pc, #616]	; (8011fa8 <tcp_input+0x28c>)
 8011d3e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	895b      	ldrh	r3, [r3, #10]
 8011d44:	2b13      	cmp	r3, #19
 8011d46:	f240 83d1 	bls.w	80124ec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011d4a:	4b98      	ldr	r3, [pc, #608]	; (8011fac <tcp_input+0x290>)
 8011d4c:	695b      	ldr	r3, [r3, #20]
 8011d4e:	4a97      	ldr	r2, [pc, #604]	; (8011fac <tcp_input+0x290>)
 8011d50:	6812      	ldr	r2, [r2, #0]
 8011d52:	4611      	mov	r1, r2
 8011d54:	4618      	mov	r0, r3
 8011d56:	f005 fbfb 	bl	8017550 <ip4_addr_isbroadcast_u32>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	f040 83c7 	bne.w	80124f0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011d62:	4b92      	ldr	r3, [pc, #584]	; (8011fac <tcp_input+0x290>)
 8011d64:	695b      	ldr	r3, [r3, #20]
 8011d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011d6a:	2be0      	cmp	r3, #224	; 0xe0
 8011d6c:	f000 83c0 	beq.w	80124f0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011d70:	4b8d      	ldr	r3, [pc, #564]	; (8011fa8 <tcp_input+0x28c>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	899b      	ldrh	r3, [r3, #12]
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7fc fdb1 	bl	800e8e0 <lwip_htons>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	0b1b      	lsrs	r3, r3, #12
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011d8a:	7cbb      	ldrb	r3, [r7, #18]
 8011d8c:	2b13      	cmp	r3, #19
 8011d8e:	f240 83b1 	bls.w	80124f4 <tcp_input+0x7d8>
 8011d92:	7cbb      	ldrb	r3, [r7, #18]
 8011d94:	b29a      	uxth	r2, r3
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	891b      	ldrh	r3, [r3, #8]
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	f200 83aa 	bhi.w	80124f4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011da0:	7cbb      	ldrb	r3, [r7, #18]
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	3b14      	subs	r3, #20
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	4b81      	ldr	r3, [pc, #516]	; (8011fb0 <tcp_input+0x294>)
 8011daa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011dac:	4b81      	ldr	r3, [pc, #516]	; (8011fb4 <tcp_input+0x298>)
 8011dae:	2200      	movs	r2, #0
 8011db0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	895a      	ldrh	r2, [r3, #10]
 8011db6:	7cbb      	ldrb	r3, [r7, #18]
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d309      	bcc.n	8011dd2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011dbe:	4b7c      	ldr	r3, [pc, #496]	; (8011fb0 <tcp_input+0x294>)
 8011dc0:	881a      	ldrh	r2, [r3, #0]
 8011dc2:	4b7d      	ldr	r3, [pc, #500]	; (8011fb8 <tcp_input+0x29c>)
 8011dc4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011dc6:	7cbb      	ldrb	r3, [r7, #18]
 8011dc8:	4619      	mov	r1, r3
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f7fe f8f8 	bl	800ffc0 <pbuf_remove_header>
 8011dd0:	e04e      	b.n	8011e70 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d105      	bne.n	8011de6 <tcp_input+0xca>
 8011dda:	4b70      	ldr	r3, [pc, #448]	; (8011f9c <tcp_input+0x280>)
 8011ddc:	22c2      	movs	r2, #194	; 0xc2
 8011dde:	4977      	ldr	r1, [pc, #476]	; (8011fbc <tcp_input+0x2a0>)
 8011de0:	4870      	ldr	r0, [pc, #448]	; (8011fa4 <tcp_input+0x288>)
 8011de2:	f007 f833 	bl	8018e4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011de6:	2114      	movs	r1, #20
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f7fe f8e9 	bl	800ffc0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	895a      	ldrh	r2, [r3, #10]
 8011df2:	4b71      	ldr	r3, [pc, #452]	; (8011fb8 <tcp_input+0x29c>)
 8011df4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011df6:	4b6e      	ldr	r3, [pc, #440]	; (8011fb0 <tcp_input+0x294>)
 8011df8:	881a      	ldrh	r2, [r3, #0]
 8011dfa:	4b6f      	ldr	r3, [pc, #444]	; (8011fb8 <tcp_input+0x29c>)
 8011dfc:	881b      	ldrh	r3, [r3, #0]
 8011dfe:	1ad3      	subs	r3, r2, r3
 8011e00:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011e02:	4b6d      	ldr	r3, [pc, #436]	; (8011fb8 <tcp_input+0x29c>)
 8011e04:	881b      	ldrh	r3, [r3, #0]
 8011e06:	4619      	mov	r1, r3
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f7fe f8d9 	bl	800ffc0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	895b      	ldrh	r3, [r3, #10]
 8011e14:	8a3a      	ldrh	r2, [r7, #16]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	f200 836e 	bhi.w	80124f8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	4a64      	ldr	r2, [pc, #400]	; (8011fb4 <tcp_input+0x298>)
 8011e24:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	8a3a      	ldrh	r2, [r7, #16]
 8011e2c:	4611      	mov	r1, r2
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7fe f8c6 	bl	800ffc0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	891a      	ldrh	r2, [r3, #8]
 8011e38:	8a3b      	ldrh	r3, [r7, #16]
 8011e3a:	1ad3      	subs	r3, r2, r3
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	895b      	ldrh	r3, [r3, #10]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d005      	beq.n	8011e56 <tcp_input+0x13a>
 8011e4a:	4b54      	ldr	r3, [pc, #336]	; (8011f9c <tcp_input+0x280>)
 8011e4c:	22df      	movs	r2, #223	; 0xdf
 8011e4e:	495c      	ldr	r1, [pc, #368]	; (8011fc0 <tcp_input+0x2a4>)
 8011e50:	4854      	ldr	r0, [pc, #336]	; (8011fa4 <tcp_input+0x288>)
 8011e52:	f006 fffb 	bl	8018e4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	891a      	ldrh	r2, [r3, #8]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	891b      	ldrh	r3, [r3, #8]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d005      	beq.n	8011e70 <tcp_input+0x154>
 8011e64:	4b4d      	ldr	r3, [pc, #308]	; (8011f9c <tcp_input+0x280>)
 8011e66:	22e0      	movs	r2, #224	; 0xe0
 8011e68:	4956      	ldr	r1, [pc, #344]	; (8011fc4 <tcp_input+0x2a8>)
 8011e6a:	484e      	ldr	r0, [pc, #312]	; (8011fa4 <tcp_input+0x288>)
 8011e6c:	f006 ffee 	bl	8018e4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011e70:	4b4d      	ldr	r3, [pc, #308]	; (8011fa8 <tcp_input+0x28c>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	4a4b      	ldr	r2, [pc, #300]	; (8011fa8 <tcp_input+0x28c>)
 8011e7a:	6814      	ldr	r4, [r2, #0]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fc fd2f 	bl	800e8e0 <lwip_htons>
 8011e82:	4603      	mov	r3, r0
 8011e84:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011e86:	4b48      	ldr	r3, [pc, #288]	; (8011fa8 <tcp_input+0x28c>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	885b      	ldrh	r3, [r3, #2]
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	4a46      	ldr	r2, [pc, #280]	; (8011fa8 <tcp_input+0x28c>)
 8011e90:	6814      	ldr	r4, [r2, #0]
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fc fd24 	bl	800e8e0 <lwip_htons>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011e9c:	4b42      	ldr	r3, [pc, #264]	; (8011fa8 <tcp_input+0x28c>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	4a41      	ldr	r2, [pc, #260]	; (8011fa8 <tcp_input+0x28c>)
 8011ea4:	6814      	ldr	r4, [r2, #0]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7fc fd2f 	bl	800e90a <lwip_htonl>
 8011eac:	4603      	mov	r3, r0
 8011eae:	6063      	str	r3, [r4, #4]
 8011eb0:	6863      	ldr	r3, [r4, #4]
 8011eb2:	4a45      	ldr	r2, [pc, #276]	; (8011fc8 <tcp_input+0x2ac>)
 8011eb4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011eb6:	4b3c      	ldr	r3, [pc, #240]	; (8011fa8 <tcp_input+0x28c>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	689b      	ldr	r3, [r3, #8]
 8011ebc:	4a3a      	ldr	r2, [pc, #232]	; (8011fa8 <tcp_input+0x28c>)
 8011ebe:	6814      	ldr	r4, [r2, #0]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fc fd22 	bl	800e90a <lwip_htonl>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	60a3      	str	r3, [r4, #8]
 8011eca:	68a3      	ldr	r3, [r4, #8]
 8011ecc:	4a3f      	ldr	r2, [pc, #252]	; (8011fcc <tcp_input+0x2b0>)
 8011ece:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011ed0:	4b35      	ldr	r3, [pc, #212]	; (8011fa8 <tcp_input+0x28c>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	89db      	ldrh	r3, [r3, #14]
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	4a33      	ldr	r2, [pc, #204]	; (8011fa8 <tcp_input+0x28c>)
 8011eda:	6814      	ldr	r4, [r2, #0]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7fc fcff 	bl	800e8e0 <lwip_htons>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011ee6:	4b30      	ldr	r3, [pc, #192]	; (8011fa8 <tcp_input+0x28c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	899b      	ldrh	r3, [r3, #12]
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7fc fcf6 	bl	800e8e0 <lwip_htons>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011efc:	b2da      	uxtb	r2, r3
 8011efe:	4b34      	ldr	r3, [pc, #208]	; (8011fd0 <tcp_input+0x2b4>)
 8011f00:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	891a      	ldrh	r2, [r3, #8]
 8011f06:	4b33      	ldr	r3, [pc, #204]	; (8011fd4 <tcp_input+0x2b8>)
 8011f08:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011f0a:	4b31      	ldr	r3, [pc, #196]	; (8011fd0 <tcp_input+0x2b4>)
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	f003 0303 	and.w	r3, r3, #3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d00c      	beq.n	8011f30 <tcp_input+0x214>
    tcplen++;
 8011f16:	4b2f      	ldr	r3, [pc, #188]	; (8011fd4 <tcp_input+0x2b8>)
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	4b2d      	ldr	r3, [pc, #180]	; (8011fd4 <tcp_input+0x2b8>)
 8011f20:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	891a      	ldrh	r2, [r3, #8]
 8011f26:	4b2b      	ldr	r3, [pc, #172]	; (8011fd4 <tcp_input+0x2b8>)
 8011f28:	881b      	ldrh	r3, [r3, #0]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	f200 82e6 	bhi.w	80124fc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011f30:	2300      	movs	r3, #0
 8011f32:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f34:	4b28      	ldr	r3, [pc, #160]	; (8011fd8 <tcp_input+0x2bc>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	61fb      	str	r3, [r7, #28]
 8011f3a:	e09d      	b.n	8012078 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011f3c:	69fb      	ldr	r3, [r7, #28]
 8011f3e:	7d1b      	ldrb	r3, [r3, #20]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d105      	bne.n	8011f50 <tcp_input+0x234>
 8011f44:	4b15      	ldr	r3, [pc, #84]	; (8011f9c <tcp_input+0x280>)
 8011f46:	22fb      	movs	r2, #251	; 0xfb
 8011f48:	4924      	ldr	r1, [pc, #144]	; (8011fdc <tcp_input+0x2c0>)
 8011f4a:	4816      	ldr	r0, [pc, #88]	; (8011fa4 <tcp_input+0x288>)
 8011f4c:	f006 ff7e 	bl	8018e4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	7d1b      	ldrb	r3, [r3, #20]
 8011f54:	2b0a      	cmp	r3, #10
 8011f56:	d105      	bne.n	8011f64 <tcp_input+0x248>
 8011f58:	4b10      	ldr	r3, [pc, #64]	; (8011f9c <tcp_input+0x280>)
 8011f5a:	22fc      	movs	r2, #252	; 0xfc
 8011f5c:	4920      	ldr	r1, [pc, #128]	; (8011fe0 <tcp_input+0x2c4>)
 8011f5e:	4811      	ldr	r0, [pc, #68]	; (8011fa4 <tcp_input+0x288>)
 8011f60:	f006 ff74 	bl	8018e4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	7d1b      	ldrb	r3, [r3, #20]
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d105      	bne.n	8011f78 <tcp_input+0x25c>
 8011f6c:	4b0b      	ldr	r3, [pc, #44]	; (8011f9c <tcp_input+0x280>)
 8011f6e:	22fd      	movs	r2, #253	; 0xfd
 8011f70:	491c      	ldr	r1, [pc, #112]	; (8011fe4 <tcp_input+0x2c8>)
 8011f72:	480c      	ldr	r0, [pc, #48]	; (8011fa4 <tcp_input+0x288>)
 8011f74:	f006 ff6a 	bl	8018e4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	7a1b      	ldrb	r3, [r3, #8]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d033      	beq.n	8011fe8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	7a1a      	ldrb	r2, [r3, #8]
 8011f84:	4b09      	ldr	r3, [pc, #36]	; (8011fac <tcp_input+0x290>)
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d029      	beq.n	8011fe8 <tcp_input+0x2cc>
      prev = pcb;
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	61bb      	str	r3, [r7, #24]
      continue;
 8011f98:	e06b      	b.n	8012072 <tcp_input+0x356>
 8011f9a:	bf00      	nop
 8011f9c:	0801c6a0 	.word	0x0801c6a0
 8011fa0:	0801c6d4 	.word	0x0801c6d4
 8011fa4:	0801c6ec 	.word	0x0801c6ec
 8011fa8:	20008020 	.word	0x20008020
 8011fac:	200050dc 	.word	0x200050dc
 8011fb0:	20008024 	.word	0x20008024
 8011fb4:	20008028 	.word	0x20008028
 8011fb8:	20008026 	.word	0x20008026
 8011fbc:	0801c714 	.word	0x0801c714
 8011fc0:	0801c724 	.word	0x0801c724
 8011fc4:	0801c730 	.word	0x0801c730
 8011fc8:	20008030 	.word	0x20008030
 8011fcc:	20008034 	.word	0x20008034
 8011fd0:	2000803c 	.word	0x2000803c
 8011fd4:	2000803a 	.word	0x2000803a
 8011fd8:	20008004 	.word	0x20008004
 8011fdc:	0801c750 	.word	0x0801c750
 8011fe0:	0801c778 	.word	0x0801c778
 8011fe4:	0801c7a4 	.word	0x0801c7a4
    }

    if (pcb->remote_port == tcphdr->src &&
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	8b1a      	ldrh	r2, [r3, #24]
 8011fec:	4b72      	ldr	r3, [pc, #456]	; (80121b8 <tcp_input+0x49c>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	881b      	ldrh	r3, [r3, #0]
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d13a      	bne.n	801206e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	8ada      	ldrh	r2, [r3, #22]
 8011ffc:	4b6e      	ldr	r3, [pc, #440]	; (80121b8 <tcp_input+0x49c>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	885b      	ldrh	r3, [r3, #2]
 8012002:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012004:	429a      	cmp	r2, r3
 8012006:	d132      	bne.n	801206e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	685a      	ldr	r2, [r3, #4]
 801200c:	4b6b      	ldr	r3, [pc, #428]	; (80121bc <tcp_input+0x4a0>)
 801200e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012010:	429a      	cmp	r2, r3
 8012012:	d12c      	bne.n	801206e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	4b68      	ldr	r3, [pc, #416]	; (80121bc <tcp_input+0x4a0>)
 801201a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801201c:	429a      	cmp	r2, r3
 801201e:	d126      	bne.n	801206e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	69fa      	ldr	r2, [r7, #28]
 8012026:	429a      	cmp	r2, r3
 8012028:	d106      	bne.n	8012038 <tcp_input+0x31c>
 801202a:	4b65      	ldr	r3, [pc, #404]	; (80121c0 <tcp_input+0x4a4>)
 801202c:	f240 120d 	movw	r2, #269	; 0x10d
 8012030:	4964      	ldr	r1, [pc, #400]	; (80121c4 <tcp_input+0x4a8>)
 8012032:	4865      	ldr	r0, [pc, #404]	; (80121c8 <tcp_input+0x4ac>)
 8012034:	f006 ff0a 	bl	8018e4c <iprintf>
      if (prev != NULL) {
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d00a      	beq.n	8012054 <tcp_input+0x338>
        prev->next = pcb->next;
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	68da      	ldr	r2, [r3, #12]
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012046:	4b61      	ldr	r3, [pc, #388]	; (80121cc <tcp_input+0x4b0>)
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801204e:	4a5f      	ldr	r2, [pc, #380]	; (80121cc <tcp_input+0x4b0>)
 8012050:	69fb      	ldr	r3, [r7, #28]
 8012052:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	69fa      	ldr	r2, [r7, #28]
 801205a:	429a      	cmp	r2, r3
 801205c:	d111      	bne.n	8012082 <tcp_input+0x366>
 801205e:	4b58      	ldr	r3, [pc, #352]	; (80121c0 <tcp_input+0x4a4>)
 8012060:	f240 1215 	movw	r2, #277	; 0x115
 8012064:	495a      	ldr	r1, [pc, #360]	; (80121d0 <tcp_input+0x4b4>)
 8012066:	4858      	ldr	r0, [pc, #352]	; (80121c8 <tcp_input+0x4ac>)
 8012068:	f006 fef0 	bl	8018e4c <iprintf>
      break;
 801206c:	e009      	b.n	8012082 <tcp_input+0x366>
    }
    prev = pcb;
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	68db      	ldr	r3, [r3, #12]
 8012076:	61fb      	str	r3, [r7, #28]
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	2b00      	cmp	r3, #0
 801207c:	f47f af5e 	bne.w	8011f3c <tcp_input+0x220>
 8012080:	e000      	b.n	8012084 <tcp_input+0x368>
      break;
 8012082:	bf00      	nop
  }

  if (pcb == NULL) {
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	2b00      	cmp	r3, #0
 8012088:	f040 80aa 	bne.w	80121e0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801208c:	4b51      	ldr	r3, [pc, #324]	; (80121d4 <tcp_input+0x4b8>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	61fb      	str	r3, [r7, #28]
 8012092:	e03f      	b.n	8012114 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	7d1b      	ldrb	r3, [r3, #20]
 8012098:	2b0a      	cmp	r3, #10
 801209a:	d006      	beq.n	80120aa <tcp_input+0x38e>
 801209c:	4b48      	ldr	r3, [pc, #288]	; (80121c0 <tcp_input+0x4a4>)
 801209e:	f240 121f 	movw	r2, #287	; 0x11f
 80120a2:	494d      	ldr	r1, [pc, #308]	; (80121d8 <tcp_input+0x4bc>)
 80120a4:	4848      	ldr	r0, [pc, #288]	; (80121c8 <tcp_input+0x4ac>)
 80120a6:	f006 fed1 	bl	8018e4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	7a1b      	ldrb	r3, [r3, #8]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d009      	beq.n	80120c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	7a1a      	ldrb	r2, [r3, #8]
 80120b6:	4b41      	ldr	r3, [pc, #260]	; (80121bc <tcp_input+0x4a0>)
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80120be:	3301      	adds	r3, #1
 80120c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d122      	bne.n	801210c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	8b1a      	ldrh	r2, [r3, #24]
 80120ca:	4b3b      	ldr	r3, [pc, #236]	; (80121b8 <tcp_input+0x49c>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	881b      	ldrh	r3, [r3, #0]
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d11b      	bne.n	801210e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	8ada      	ldrh	r2, [r3, #22]
 80120da:	4b37      	ldr	r3, [pc, #220]	; (80121b8 <tcp_input+0x49c>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	885b      	ldrh	r3, [r3, #2]
 80120e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d113      	bne.n	801210e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	685a      	ldr	r2, [r3, #4]
 80120ea:	4b34      	ldr	r3, [pc, #208]	; (80121bc <tcp_input+0x4a0>)
 80120ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d10d      	bne.n	801210e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	681a      	ldr	r2, [r3, #0]
 80120f6:	4b31      	ldr	r3, [pc, #196]	; (80121bc <tcp_input+0x4a0>)
 80120f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d107      	bne.n	801210e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80120fe:	69f8      	ldr	r0, [r7, #28]
 8012100:	f000 fb56 	bl	80127b0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f7fd ffe1 	bl	80100cc <pbuf_free>
        return;
 801210a:	e1fd      	b.n	8012508 <tcp_input+0x7ec>
        continue;
 801210c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	61fb      	str	r3, [r7, #28]
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d1bc      	bne.n	8012094 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801211a:	2300      	movs	r3, #0
 801211c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801211e:	4b2f      	ldr	r3, [pc, #188]	; (80121dc <tcp_input+0x4c0>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	617b      	str	r3, [r7, #20]
 8012124:	e02a      	b.n	801217c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	7a1b      	ldrb	r3, [r3, #8]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d00c      	beq.n	8012148 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	7a1a      	ldrb	r2, [r3, #8]
 8012132:	4b22      	ldr	r3, [pc, #136]	; (80121bc <tcp_input+0x4a0>)
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801213a:	3301      	adds	r3, #1
 801213c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801213e:	429a      	cmp	r2, r3
 8012140:	d002      	beq.n	8012148 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	61bb      	str	r3, [r7, #24]
        continue;
 8012146:	e016      	b.n	8012176 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	8ada      	ldrh	r2, [r3, #22]
 801214c:	4b1a      	ldr	r3, [pc, #104]	; (80121b8 <tcp_input+0x49c>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	885b      	ldrh	r3, [r3, #2]
 8012152:	b29b      	uxth	r3, r3
 8012154:	429a      	cmp	r2, r3
 8012156:	d10c      	bne.n	8012172 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	4b17      	ldr	r3, [pc, #92]	; (80121bc <tcp_input+0x4a0>)
 801215e:	695b      	ldr	r3, [r3, #20]
 8012160:	429a      	cmp	r2, r3
 8012162:	d00f      	beq.n	8012184 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00d      	beq.n	8012186 <tcp_input+0x46a>
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d009      	beq.n	8012186 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	617b      	str	r3, [r7, #20]
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d1d1      	bne.n	8012126 <tcp_input+0x40a>
 8012182:	e000      	b.n	8012186 <tcp_input+0x46a>
            break;
 8012184:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d029      	beq.n	80121e0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d00a      	beq.n	80121a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	68da      	ldr	r2, [r3, #12]
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801219a:	4b10      	ldr	r3, [pc, #64]	; (80121dc <tcp_input+0x4c0>)
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80121a2:	4a0e      	ldr	r2, [pc, #56]	; (80121dc <tcp_input+0x4c0>)
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80121a8:	6978      	ldr	r0, [r7, #20]
 80121aa:	f000 fa03 	bl	80125b4 <tcp_listen_input>
      }
      pbuf_free(p);
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f7fd ff8c 	bl	80100cc <pbuf_free>
      return;
 80121b4:	e1a8      	b.n	8012508 <tcp_input+0x7ec>
 80121b6:	bf00      	nop
 80121b8:	20008020 	.word	0x20008020
 80121bc:	200050dc 	.word	0x200050dc
 80121c0:	0801c6a0 	.word	0x0801c6a0
 80121c4:	0801c7cc 	.word	0x0801c7cc
 80121c8:	0801c6ec 	.word	0x0801c6ec
 80121cc:	20008004 	.word	0x20008004
 80121d0:	0801c7f8 	.word	0x0801c7f8
 80121d4:	20008008 	.word	0x20008008
 80121d8:	0801c824 	.word	0x0801c824
 80121dc:	20008000 	.word	0x20008000
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f000 8158 	beq.w	8012498 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80121e8:	4b95      	ldr	r3, [pc, #596]	; (8012440 <tcp_input+0x724>)
 80121ea:	2200      	movs	r2, #0
 80121ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	891a      	ldrh	r2, [r3, #8]
 80121f2:	4b93      	ldr	r3, [pc, #588]	; (8012440 <tcp_input+0x724>)
 80121f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80121f6:	4a92      	ldr	r2, [pc, #584]	; (8012440 <tcp_input+0x724>)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80121fc:	4b91      	ldr	r3, [pc, #580]	; (8012444 <tcp_input+0x728>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4a8f      	ldr	r2, [pc, #572]	; (8012440 <tcp_input+0x724>)
 8012202:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012204:	4b90      	ldr	r3, [pc, #576]	; (8012448 <tcp_input+0x72c>)
 8012206:	2200      	movs	r2, #0
 8012208:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801220a:	4b90      	ldr	r3, [pc, #576]	; (801244c <tcp_input+0x730>)
 801220c:	2200      	movs	r2, #0
 801220e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012210:	4b8f      	ldr	r3, [pc, #572]	; (8012450 <tcp_input+0x734>)
 8012212:	2200      	movs	r2, #0
 8012214:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012216:	4b8f      	ldr	r3, [pc, #572]	; (8012454 <tcp_input+0x738>)
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	f003 0308 	and.w	r3, r3, #8
 801221e:	2b00      	cmp	r3, #0
 8012220:	d006      	beq.n	8012230 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	7b5b      	ldrb	r3, [r3, #13]
 8012226:	f043 0301 	orr.w	r3, r3, #1
 801222a:	b2da      	uxtb	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012234:	2b00      	cmp	r3, #0
 8012236:	d017      	beq.n	8012268 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012238:	69f8      	ldr	r0, [r7, #28]
 801223a:	f7ff f929 	bl	8011490 <tcp_process_refused_data>
 801223e:	4603      	mov	r3, r0
 8012240:	f113 0f0d 	cmn.w	r3, #13
 8012244:	d007      	beq.n	8012256 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012246:	69fb      	ldr	r3, [r7, #28]
 8012248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00c      	beq.n	8012268 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801224e:	4b82      	ldr	r3, [pc, #520]	; (8012458 <tcp_input+0x73c>)
 8012250:	881b      	ldrh	r3, [r3, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d008      	beq.n	8012268 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801225a:	2b00      	cmp	r3, #0
 801225c:	f040 80e3 	bne.w	8012426 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012260:	69f8      	ldr	r0, [r7, #28]
 8012262:	f003 f9ad 	bl	80155c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012266:	e0de      	b.n	8012426 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012268:	4a7c      	ldr	r2, [pc, #496]	; (801245c <tcp_input+0x740>)
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801226e:	69f8      	ldr	r0, [r7, #28]
 8012270:	f000 fb18 	bl	80128a4 <tcp_process>
 8012274:	4603      	mov	r3, r0
 8012276:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012278:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801227c:	f113 0f0d 	cmn.w	r3, #13
 8012280:	f000 80d3 	beq.w	801242a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012284:	4b71      	ldr	r3, [pc, #452]	; (801244c <tcp_input+0x730>)
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	f003 0308 	and.w	r3, r3, #8
 801228c:	2b00      	cmp	r3, #0
 801228e:	d015      	beq.n	80122bc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012290:	69fb      	ldr	r3, [r7, #28]
 8012292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012296:	2b00      	cmp	r3, #0
 8012298:	d008      	beq.n	80122ac <tcp_input+0x590>
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122a0:	69fa      	ldr	r2, [r7, #28]
 80122a2:	6912      	ldr	r2, [r2, #16]
 80122a4:	f06f 010d 	mvn.w	r1, #13
 80122a8:	4610      	mov	r0, r2
 80122aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80122ac:	69f9      	ldr	r1, [r7, #28]
 80122ae:	486c      	ldr	r0, [pc, #432]	; (8012460 <tcp_input+0x744>)
 80122b0:	f7ff fbbc 	bl	8011a2c <tcp_pcb_remove>
        tcp_free(pcb);
 80122b4:	69f8      	ldr	r0, [r7, #28]
 80122b6:	f7fe f9a9 	bl	801060c <tcp_free>
 80122ba:	e0da      	b.n	8012472 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80122bc:	2300      	movs	r3, #0
 80122be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80122c0:	4b63      	ldr	r3, [pc, #396]	; (8012450 <tcp_input+0x734>)
 80122c2:	881b      	ldrh	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d01d      	beq.n	8012304 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80122c8:	4b61      	ldr	r3, [pc, #388]	; (8012450 <tcp_input+0x734>)
 80122ca:	881b      	ldrh	r3, [r3, #0]
 80122cc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80122ce:	69fb      	ldr	r3, [r7, #28]
 80122d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d00a      	beq.n	80122ee <tcp_input+0x5d2>
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80122de:	69fa      	ldr	r2, [r7, #28]
 80122e0:	6910      	ldr	r0, [r2, #16]
 80122e2:	89fa      	ldrh	r2, [r7, #14]
 80122e4:	69f9      	ldr	r1, [r7, #28]
 80122e6:	4798      	blx	r3
 80122e8:	4603      	mov	r3, r0
 80122ea:	74fb      	strb	r3, [r7, #19]
 80122ec:	e001      	b.n	80122f2 <tcp_input+0x5d6>
 80122ee:	2300      	movs	r3, #0
 80122f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80122f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80122f6:	f113 0f0d 	cmn.w	r3, #13
 80122fa:	f000 8098 	beq.w	801242e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80122fe:	4b54      	ldr	r3, [pc, #336]	; (8012450 <tcp_input+0x734>)
 8012300:	2200      	movs	r2, #0
 8012302:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012304:	69f8      	ldr	r0, [r7, #28]
 8012306:	f000 f915 	bl	8012534 <tcp_input_delayed_close>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	f040 8090 	bne.w	8012432 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012312:	4b4d      	ldr	r3, [pc, #308]	; (8012448 <tcp_input+0x72c>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d041      	beq.n	801239e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801231e:	2b00      	cmp	r3, #0
 8012320:	d006      	beq.n	8012330 <tcp_input+0x614>
 8012322:	4b50      	ldr	r3, [pc, #320]	; (8012464 <tcp_input+0x748>)
 8012324:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012328:	494f      	ldr	r1, [pc, #316]	; (8012468 <tcp_input+0x74c>)
 801232a:	4850      	ldr	r0, [pc, #320]	; (801246c <tcp_input+0x750>)
 801232c:	f006 fd8e 	bl	8018e4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012330:	69fb      	ldr	r3, [r7, #28]
 8012332:	8b5b      	ldrh	r3, [r3, #26]
 8012334:	f003 0310 	and.w	r3, r3, #16
 8012338:	2b00      	cmp	r3, #0
 801233a:	d008      	beq.n	801234e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801233c:	4b42      	ldr	r3, [pc, #264]	; (8012448 <tcp_input+0x72c>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4618      	mov	r0, r3
 8012342:	f7fd fec3 	bl	80100cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012346:	69f8      	ldr	r0, [r7, #28]
 8012348:	f7fe fc48 	bl	8010bdc <tcp_abort>
            goto aborted;
 801234c:	e091      	b.n	8012472 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801234e:	69fb      	ldr	r3, [r7, #28]
 8012350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00c      	beq.n	8012372 <tcp_input+0x656>
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	6918      	ldr	r0, [r3, #16]
 8012362:	4b39      	ldr	r3, [pc, #228]	; (8012448 <tcp_input+0x72c>)
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	2300      	movs	r3, #0
 8012368:	69f9      	ldr	r1, [r7, #28]
 801236a:	47a0      	blx	r4
 801236c:	4603      	mov	r3, r0
 801236e:	74fb      	strb	r3, [r7, #19]
 8012370:	e008      	b.n	8012384 <tcp_input+0x668>
 8012372:	4b35      	ldr	r3, [pc, #212]	; (8012448 <tcp_input+0x72c>)
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	2300      	movs	r3, #0
 8012378:	69f9      	ldr	r1, [r7, #28]
 801237a:	2000      	movs	r0, #0
 801237c:	f7ff f95e 	bl	801163c <tcp_recv_null>
 8012380:	4603      	mov	r3, r0
 8012382:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012388:	f113 0f0d 	cmn.w	r3, #13
 801238c:	d053      	beq.n	8012436 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801238e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d003      	beq.n	801239e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012396:	4b2c      	ldr	r3, [pc, #176]	; (8012448 <tcp_input+0x72c>)
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801239e:	4b2b      	ldr	r3, [pc, #172]	; (801244c <tcp_input+0x730>)
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	f003 0320 	and.w	r3, r3, #32
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d030      	beq.n	801240c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d009      	beq.n	80123c6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123b6:	7b5a      	ldrb	r2, [r3, #13]
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123bc:	f042 0220 	orr.w	r2, r2, #32
 80123c0:	b2d2      	uxtb	r2, r2
 80123c2:	735a      	strb	r2, [r3, #13]
 80123c4:	e022      	b.n	801240c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80123ce:	d005      	beq.n	80123dc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123d4:	3301      	adds	r3, #1
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	69fb      	ldr	r3, [r7, #28]
 80123da:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d00b      	beq.n	80123fe <tcp_input+0x6e2>
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	6918      	ldr	r0, [r3, #16]
 80123f0:	2300      	movs	r3, #0
 80123f2:	2200      	movs	r2, #0
 80123f4:	69f9      	ldr	r1, [r7, #28]
 80123f6:	47a0      	blx	r4
 80123f8:	4603      	mov	r3, r0
 80123fa:	74fb      	strb	r3, [r7, #19]
 80123fc:	e001      	b.n	8012402 <tcp_input+0x6e6>
 80123fe:	2300      	movs	r3, #0
 8012400:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012402:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012406:	f113 0f0d 	cmn.w	r3, #13
 801240a:	d016      	beq.n	801243a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801240c:	4b13      	ldr	r3, [pc, #76]	; (801245c <tcp_input+0x740>)
 801240e:	2200      	movs	r2, #0
 8012410:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012412:	69f8      	ldr	r0, [r7, #28]
 8012414:	f000 f88e 	bl	8012534 <tcp_input_delayed_close>
 8012418:	4603      	mov	r3, r0
 801241a:	2b00      	cmp	r3, #0
 801241c:	d128      	bne.n	8012470 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801241e:	69f8      	ldr	r0, [r7, #28]
 8012420:	f002 fac8 	bl	80149b4 <tcp_output>
 8012424:	e025      	b.n	8012472 <tcp_input+0x756>
        goto aborted;
 8012426:	bf00      	nop
 8012428:	e023      	b.n	8012472 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801242a:	bf00      	nop
 801242c:	e021      	b.n	8012472 <tcp_input+0x756>
              goto aborted;
 801242e:	bf00      	nop
 8012430:	e01f      	b.n	8012472 <tcp_input+0x756>
          goto aborted;
 8012432:	bf00      	nop
 8012434:	e01d      	b.n	8012472 <tcp_input+0x756>
            goto aborted;
 8012436:	bf00      	nop
 8012438:	e01b      	b.n	8012472 <tcp_input+0x756>
              goto aborted;
 801243a:	bf00      	nop
 801243c:	e019      	b.n	8012472 <tcp_input+0x756>
 801243e:	bf00      	nop
 8012440:	20008010 	.word	0x20008010
 8012444:	20008020 	.word	0x20008020
 8012448:	20008040 	.word	0x20008040
 801244c:	2000803d 	.word	0x2000803d
 8012450:	20008038 	.word	0x20008038
 8012454:	2000803c 	.word	0x2000803c
 8012458:	2000803a 	.word	0x2000803a
 801245c:	20008044 	.word	0x20008044
 8012460:	20008004 	.word	0x20008004
 8012464:	0801c6a0 	.word	0x0801c6a0
 8012468:	0801c854 	.word	0x0801c854
 801246c:	0801c6ec 	.word	0x0801c6ec
          goto aborted;
 8012470:	bf00      	nop
    tcp_input_pcb = NULL;
 8012472:	4b27      	ldr	r3, [pc, #156]	; (8012510 <tcp_input+0x7f4>)
 8012474:	2200      	movs	r2, #0
 8012476:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012478:	4b26      	ldr	r3, [pc, #152]	; (8012514 <tcp_input+0x7f8>)
 801247a:	2200      	movs	r2, #0
 801247c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801247e:	4b26      	ldr	r3, [pc, #152]	; (8012518 <tcp_input+0x7fc>)
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d03f      	beq.n	8012506 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012486:	4b24      	ldr	r3, [pc, #144]	; (8012518 <tcp_input+0x7fc>)
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	4618      	mov	r0, r3
 801248c:	f7fd fe1e 	bl	80100cc <pbuf_free>
      inseg.p = NULL;
 8012490:	4b21      	ldr	r3, [pc, #132]	; (8012518 <tcp_input+0x7fc>)
 8012492:	2200      	movs	r2, #0
 8012494:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012496:	e036      	b.n	8012506 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012498:	4b20      	ldr	r3, [pc, #128]	; (801251c <tcp_input+0x800>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	899b      	ldrh	r3, [r3, #12]
 801249e:	b29b      	uxth	r3, r3
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fc fa1d 	bl	800e8e0 <lwip_htons>
 80124a6:	4603      	mov	r3, r0
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	f003 0304 	and.w	r3, r3, #4
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d118      	bne.n	80124e4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80124b2:	4b1b      	ldr	r3, [pc, #108]	; (8012520 <tcp_input+0x804>)
 80124b4:	6819      	ldr	r1, [r3, #0]
 80124b6:	4b1b      	ldr	r3, [pc, #108]	; (8012524 <tcp_input+0x808>)
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	4b1a      	ldr	r3, [pc, #104]	; (8012528 <tcp_input+0x80c>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80124c2:	4b16      	ldr	r3, [pc, #88]	; (801251c <tcp_input+0x800>)
 80124c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80124c6:	885b      	ldrh	r3, [r3, #2]
 80124c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80124ca:	4a14      	ldr	r2, [pc, #80]	; (801251c <tcp_input+0x800>)
 80124cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80124ce:	8812      	ldrh	r2, [r2, #0]
 80124d0:	b292      	uxth	r2, r2
 80124d2:	9202      	str	r2, [sp, #8]
 80124d4:	9301      	str	r3, [sp, #4]
 80124d6:	4b15      	ldr	r3, [pc, #84]	; (801252c <tcp_input+0x810>)
 80124d8:	9300      	str	r3, [sp, #0]
 80124da:	4b15      	ldr	r3, [pc, #84]	; (8012530 <tcp_input+0x814>)
 80124dc:	4602      	mov	r2, r0
 80124de:	2000      	movs	r0, #0
 80124e0:	f003 f81c 	bl	801551c <tcp_rst>
    pbuf_free(p);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7fd fdf1 	bl	80100cc <pbuf_free>
  return;
 80124ea:	e00c      	b.n	8012506 <tcp_input+0x7ea>
    goto dropped;
 80124ec:	bf00      	nop
 80124ee:	e006      	b.n	80124fe <tcp_input+0x7e2>
    goto dropped;
 80124f0:	bf00      	nop
 80124f2:	e004      	b.n	80124fe <tcp_input+0x7e2>
    goto dropped;
 80124f4:	bf00      	nop
 80124f6:	e002      	b.n	80124fe <tcp_input+0x7e2>
      goto dropped;
 80124f8:	bf00      	nop
 80124fa:	e000      	b.n	80124fe <tcp_input+0x7e2>
      goto dropped;
 80124fc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f7fd fde4 	bl	80100cc <pbuf_free>
 8012504:	e000      	b.n	8012508 <tcp_input+0x7ec>
  return;
 8012506:	bf00      	nop
}
 8012508:	3724      	adds	r7, #36	; 0x24
 801250a:	46bd      	mov	sp, r7
 801250c:	bd90      	pop	{r4, r7, pc}
 801250e:	bf00      	nop
 8012510:	20008044 	.word	0x20008044
 8012514:	20008040 	.word	0x20008040
 8012518:	20008010 	.word	0x20008010
 801251c:	20008020 	.word	0x20008020
 8012520:	20008034 	.word	0x20008034
 8012524:	2000803a 	.word	0x2000803a
 8012528:	20008030 	.word	0x20008030
 801252c:	200050ec 	.word	0x200050ec
 8012530:	200050f0 	.word	0x200050f0

08012534 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d106      	bne.n	8012550 <tcp_input_delayed_close+0x1c>
 8012542:	4b17      	ldr	r3, [pc, #92]	; (80125a0 <tcp_input_delayed_close+0x6c>)
 8012544:	f240 225a 	movw	r2, #602	; 0x25a
 8012548:	4916      	ldr	r1, [pc, #88]	; (80125a4 <tcp_input_delayed_close+0x70>)
 801254a:	4817      	ldr	r0, [pc, #92]	; (80125a8 <tcp_input_delayed_close+0x74>)
 801254c:	f006 fc7e 	bl	8018e4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012550:	4b16      	ldr	r3, [pc, #88]	; (80125ac <tcp_input_delayed_close+0x78>)
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	f003 0310 	and.w	r3, r3, #16
 8012558:	2b00      	cmp	r3, #0
 801255a:	d01c      	beq.n	8012596 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	8b5b      	ldrh	r3, [r3, #26]
 8012560:	f003 0310 	and.w	r3, r3, #16
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10d      	bne.n	8012584 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801256e:	2b00      	cmp	r3, #0
 8012570:	d008      	beq.n	8012584 <tcp_input_delayed_close+0x50>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	6912      	ldr	r2, [r2, #16]
 801257c:	f06f 010e 	mvn.w	r1, #14
 8012580:	4610      	mov	r0, r2
 8012582:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012584:	6879      	ldr	r1, [r7, #4]
 8012586:	480a      	ldr	r0, [pc, #40]	; (80125b0 <tcp_input_delayed_close+0x7c>)
 8012588:	f7ff fa50 	bl	8011a2c <tcp_pcb_remove>
    tcp_free(pcb);
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f7fe f83d 	bl	801060c <tcp_free>
    return 1;
 8012592:	2301      	movs	r3, #1
 8012594:	e000      	b.n	8012598 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012596:	2300      	movs	r3, #0
}
 8012598:	4618      	mov	r0, r3
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	0801c6a0 	.word	0x0801c6a0
 80125a4:	0801c870 	.word	0x0801c870
 80125a8:	0801c6ec 	.word	0x0801c6ec
 80125ac:	2000803d 	.word	0x2000803d
 80125b0:	20008004 	.word	0x20008004

080125b4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80125b4:	b590      	push	{r4, r7, lr}
 80125b6:	b08b      	sub	sp, #44	; 0x2c
 80125b8:	af04      	add	r7, sp, #16
 80125ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80125bc:	4b6f      	ldr	r3, [pc, #444]	; (801277c <tcp_listen_input+0x1c8>)
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	f003 0304 	and.w	r3, r3, #4
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f040 80d2 	bne.w	801276e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d106      	bne.n	80125de <tcp_listen_input+0x2a>
 80125d0:	4b6b      	ldr	r3, [pc, #428]	; (8012780 <tcp_listen_input+0x1cc>)
 80125d2:	f240 2281 	movw	r2, #641	; 0x281
 80125d6:	496b      	ldr	r1, [pc, #428]	; (8012784 <tcp_listen_input+0x1d0>)
 80125d8:	486b      	ldr	r0, [pc, #428]	; (8012788 <tcp_listen_input+0x1d4>)
 80125da:	f006 fc37 	bl	8018e4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80125de:	4b67      	ldr	r3, [pc, #412]	; (801277c <tcp_listen_input+0x1c8>)
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	f003 0310 	and.w	r3, r3, #16
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d019      	beq.n	801261e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125ea:	4b68      	ldr	r3, [pc, #416]	; (801278c <tcp_listen_input+0x1d8>)
 80125ec:	6819      	ldr	r1, [r3, #0]
 80125ee:	4b68      	ldr	r3, [pc, #416]	; (8012790 <tcp_listen_input+0x1dc>)
 80125f0:	881b      	ldrh	r3, [r3, #0]
 80125f2:	461a      	mov	r2, r3
 80125f4:	4b67      	ldr	r3, [pc, #412]	; (8012794 <tcp_listen_input+0x1e0>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125fa:	4b67      	ldr	r3, [pc, #412]	; (8012798 <tcp_listen_input+0x1e4>)
 80125fc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125fe:	885b      	ldrh	r3, [r3, #2]
 8012600:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012602:	4a65      	ldr	r2, [pc, #404]	; (8012798 <tcp_listen_input+0x1e4>)
 8012604:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012606:	8812      	ldrh	r2, [r2, #0]
 8012608:	b292      	uxth	r2, r2
 801260a:	9202      	str	r2, [sp, #8]
 801260c:	9301      	str	r3, [sp, #4]
 801260e:	4b63      	ldr	r3, [pc, #396]	; (801279c <tcp_listen_input+0x1e8>)
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	4b63      	ldr	r3, [pc, #396]	; (80127a0 <tcp_listen_input+0x1ec>)
 8012614:	4602      	mov	r2, r0
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f002 ff80 	bl	801551c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801261c:	e0a9      	b.n	8012772 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801261e:	4b57      	ldr	r3, [pc, #348]	; (801277c <tcp_listen_input+0x1c8>)
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	f003 0302 	and.w	r3, r3, #2
 8012626:	2b00      	cmp	r3, #0
 8012628:	f000 80a3 	beq.w	8012772 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	7d5b      	ldrb	r3, [r3, #21]
 8012630:	4618      	mov	r0, r3
 8012632:	f7ff f927 	bl	8011884 <tcp_alloc>
 8012636:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d111      	bne.n	8012662 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	699b      	ldr	r3, [r3, #24]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d00a      	beq.n	801265c <tcp_listen_input+0xa8>
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	699b      	ldr	r3, [r3, #24]
 801264a:	687a      	ldr	r2, [r7, #4]
 801264c:	6910      	ldr	r0, [r2, #16]
 801264e:	f04f 32ff 	mov.w	r2, #4294967295
 8012652:	2100      	movs	r1, #0
 8012654:	4798      	blx	r3
 8012656:	4603      	mov	r3, r0
 8012658:	73bb      	strb	r3, [r7, #14]
      return;
 801265a:	e08b      	b.n	8012774 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801265c:	23f0      	movs	r3, #240	; 0xf0
 801265e:	73bb      	strb	r3, [r7, #14]
      return;
 8012660:	e088      	b.n	8012774 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012662:	4b50      	ldr	r3, [pc, #320]	; (80127a4 <tcp_listen_input+0x1f0>)
 8012664:	695a      	ldr	r2, [r3, #20]
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801266a:	4b4e      	ldr	r3, [pc, #312]	; (80127a4 <tcp_listen_input+0x1f0>)
 801266c:	691a      	ldr	r2, [r3, #16]
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	8ada      	ldrh	r2, [r3, #22]
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801267a:	4b47      	ldr	r3, [pc, #284]	; (8012798 <tcp_listen_input+0x1e4>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	881b      	ldrh	r3, [r3, #0]
 8012680:	b29a      	uxth	r2, r3
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	2203      	movs	r2, #3
 801268a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801268c:	4b41      	ldr	r3, [pc, #260]	; (8012794 <tcp_listen_input+0x1e0>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	1c5a      	adds	r2, r3, #1
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801269e:	6978      	ldr	r0, [r7, #20]
 80126a0:	f7ff fa58 	bl	8011b54 <tcp_next_iss>
 80126a4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	693a      	ldr	r2, [r7, #16]
 80126aa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	693a      	ldr	r2, [r7, #16]
 80126b0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	693a      	ldr	r2, [r7, #16]
 80126b6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	693a      	ldr	r2, [r7, #16]
 80126bc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80126be:	4b35      	ldr	r3, [pc, #212]	; (8012794 <tcp_listen_input+0x1e0>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	1e5a      	subs	r2, r3, #1
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	691a      	ldr	r2, [r3, #16]
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	7a5b      	ldrb	r3, [r3, #9]
 80126da:	f003 030c 	and.w	r3, r3, #12
 80126de:	b2da      	uxtb	r2, r3
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	7a1a      	ldrb	r2, [r3, #8]
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80126ec:	4b2e      	ldr	r3, [pc, #184]	; (80127a8 <tcp_listen_input+0x1f4>)
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	60da      	str	r2, [r3, #12]
 80126f4:	4a2c      	ldr	r2, [pc, #176]	; (80127a8 <tcp_listen_input+0x1f4>)
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	6013      	str	r3, [r2, #0]
 80126fa:	f003 f8d1 	bl	80158a0 <tcp_timer_needed>
 80126fe:	4b2b      	ldr	r3, [pc, #172]	; (80127ac <tcp_listen_input+0x1f8>)
 8012700:	2201      	movs	r2, #1
 8012702:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012704:	6978      	ldr	r0, [r7, #20]
 8012706:	f001 fd8f 	bl	8014228 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801270a:	4b23      	ldr	r3, [pc, #140]	; (8012798 <tcp_listen_input+0x1e4>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	89db      	ldrh	r3, [r3, #14]
 8012710:	b29a      	uxth	r2, r3
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	3304      	adds	r3, #4
 801272c:	4618      	mov	r0, r3
 801272e:	f004 fc79 	bl	8017024 <ip4_route>
 8012732:	4601      	mov	r1, r0
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	3304      	adds	r3, #4
 8012738:	461a      	mov	r2, r3
 801273a:	4620      	mov	r0, r4
 801273c:	f7ff fa30 	bl	8011ba0 <tcp_eff_send_mss_netif>
 8012740:	4603      	mov	r3, r0
 8012742:	461a      	mov	r2, r3
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012748:	2112      	movs	r1, #18
 801274a:	6978      	ldr	r0, [r7, #20]
 801274c:	f002 f844 	bl	80147d8 <tcp_enqueue_flags>
 8012750:	4603      	mov	r3, r0
 8012752:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d004      	beq.n	8012766 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801275c:	2100      	movs	r1, #0
 801275e:	6978      	ldr	r0, [r7, #20]
 8012760:	f7fe f97e 	bl	8010a60 <tcp_abandon>
      return;
 8012764:	e006      	b.n	8012774 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012766:	6978      	ldr	r0, [r7, #20]
 8012768:	f002 f924 	bl	80149b4 <tcp_output>
  return;
 801276c:	e001      	b.n	8012772 <tcp_listen_input+0x1be>
    return;
 801276e:	bf00      	nop
 8012770:	e000      	b.n	8012774 <tcp_listen_input+0x1c0>
  return;
 8012772:	bf00      	nop
}
 8012774:	371c      	adds	r7, #28
 8012776:	46bd      	mov	sp, r7
 8012778:	bd90      	pop	{r4, r7, pc}
 801277a:	bf00      	nop
 801277c:	2000803c 	.word	0x2000803c
 8012780:	0801c6a0 	.word	0x0801c6a0
 8012784:	0801c898 	.word	0x0801c898
 8012788:	0801c6ec 	.word	0x0801c6ec
 801278c:	20008034 	.word	0x20008034
 8012790:	2000803a 	.word	0x2000803a
 8012794:	20008030 	.word	0x20008030
 8012798:	20008020 	.word	0x20008020
 801279c:	200050ec 	.word	0x200050ec
 80127a0:	200050f0 	.word	0x200050f0
 80127a4:	200050dc 	.word	0x200050dc
 80127a8:	20008004 	.word	0x20008004
 80127ac:	2000800c 	.word	0x2000800c

080127b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b086      	sub	sp, #24
 80127b4:	af04      	add	r7, sp, #16
 80127b6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80127b8:	4b2f      	ldr	r3, [pc, #188]	; (8012878 <tcp_timewait_input+0xc8>)
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	f003 0304 	and.w	r3, r3, #4
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d153      	bne.n	801286c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d106      	bne.n	80127d8 <tcp_timewait_input+0x28>
 80127ca:	4b2c      	ldr	r3, [pc, #176]	; (801287c <tcp_timewait_input+0xcc>)
 80127cc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80127d0:	492b      	ldr	r1, [pc, #172]	; (8012880 <tcp_timewait_input+0xd0>)
 80127d2:	482c      	ldr	r0, [pc, #176]	; (8012884 <tcp_timewait_input+0xd4>)
 80127d4:	f006 fb3a 	bl	8018e4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80127d8:	4b27      	ldr	r3, [pc, #156]	; (8012878 <tcp_timewait_input+0xc8>)
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	f003 0302 	and.w	r3, r3, #2
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d02a      	beq.n	801283a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80127e4:	4b28      	ldr	r3, [pc, #160]	; (8012888 <tcp_timewait_input+0xd8>)
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ec:	1ad3      	subs	r3, r2, r3
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	db2d      	blt.n	801284e <tcp_timewait_input+0x9e>
 80127f2:	4b25      	ldr	r3, [pc, #148]	; (8012888 <tcp_timewait_input+0xd8>)
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127fa:	6879      	ldr	r1, [r7, #4]
 80127fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80127fe:	440b      	add	r3, r1
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	2b00      	cmp	r3, #0
 8012804:	dc23      	bgt.n	801284e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012806:	4b21      	ldr	r3, [pc, #132]	; (801288c <tcp_timewait_input+0xdc>)
 8012808:	6819      	ldr	r1, [r3, #0]
 801280a:	4b21      	ldr	r3, [pc, #132]	; (8012890 <tcp_timewait_input+0xe0>)
 801280c:	881b      	ldrh	r3, [r3, #0]
 801280e:	461a      	mov	r2, r3
 8012810:	4b1d      	ldr	r3, [pc, #116]	; (8012888 <tcp_timewait_input+0xd8>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012816:	4b1f      	ldr	r3, [pc, #124]	; (8012894 <tcp_timewait_input+0xe4>)
 8012818:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801281a:	885b      	ldrh	r3, [r3, #2]
 801281c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801281e:	4a1d      	ldr	r2, [pc, #116]	; (8012894 <tcp_timewait_input+0xe4>)
 8012820:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012822:	8812      	ldrh	r2, [r2, #0]
 8012824:	b292      	uxth	r2, r2
 8012826:	9202      	str	r2, [sp, #8]
 8012828:	9301      	str	r3, [sp, #4]
 801282a:	4b1b      	ldr	r3, [pc, #108]	; (8012898 <tcp_timewait_input+0xe8>)
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	4b1b      	ldr	r3, [pc, #108]	; (801289c <tcp_timewait_input+0xec>)
 8012830:	4602      	mov	r2, r0
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f002 fe72 	bl	801551c <tcp_rst>
      return;
 8012838:	e01b      	b.n	8012872 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801283a:	4b0f      	ldr	r3, [pc, #60]	; (8012878 <tcp_timewait_input+0xc8>)
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	f003 0301 	and.w	r3, r3, #1
 8012842:	2b00      	cmp	r3, #0
 8012844:	d003      	beq.n	801284e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012846:	4b16      	ldr	r3, [pc, #88]	; (80128a0 <tcp_timewait_input+0xf0>)
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801284e:	4b10      	ldr	r3, [pc, #64]	; (8012890 <tcp_timewait_input+0xe0>)
 8012850:	881b      	ldrh	r3, [r3, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00c      	beq.n	8012870 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	8b5b      	ldrh	r3, [r3, #26]
 801285a:	f043 0302 	orr.w	r3, r3, #2
 801285e:	b29a      	uxth	r2, r3
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f002 f8a5 	bl	80149b4 <tcp_output>
  }
  return;
 801286a:	e001      	b.n	8012870 <tcp_timewait_input+0xc0>
    return;
 801286c:	bf00      	nop
 801286e:	e000      	b.n	8012872 <tcp_timewait_input+0xc2>
  return;
 8012870:	bf00      	nop
}
 8012872:	3708      	adds	r7, #8
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	2000803c 	.word	0x2000803c
 801287c:	0801c6a0 	.word	0x0801c6a0
 8012880:	0801c8b8 	.word	0x0801c8b8
 8012884:	0801c6ec 	.word	0x0801c6ec
 8012888:	20008030 	.word	0x20008030
 801288c:	20008034 	.word	0x20008034
 8012890:	2000803a 	.word	0x2000803a
 8012894:	20008020 	.word	0x20008020
 8012898:	200050ec 	.word	0x200050ec
 801289c:	200050f0 	.word	0x200050f0
 80128a0:	20007ff8 	.word	0x20007ff8

080128a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80128a4:	b590      	push	{r4, r7, lr}
 80128a6:	b08d      	sub	sp, #52	; 0x34
 80128a8:	af04      	add	r7, sp, #16
 80128aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80128ac:	2300      	movs	r3, #0
 80128ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80128b0:	2300      	movs	r3, #0
 80128b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d106      	bne.n	80128c8 <tcp_process+0x24>
 80128ba:	4b9d      	ldr	r3, [pc, #628]	; (8012b30 <tcp_process+0x28c>)
 80128bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80128c0:	499c      	ldr	r1, [pc, #624]	; (8012b34 <tcp_process+0x290>)
 80128c2:	489d      	ldr	r0, [pc, #628]	; (8012b38 <tcp_process+0x294>)
 80128c4:	f006 fac2 	bl	8018e4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80128c8:	4b9c      	ldr	r3, [pc, #624]	; (8012b3c <tcp_process+0x298>)
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	f003 0304 	and.w	r3, r3, #4
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d04e      	beq.n	8012972 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	7d1b      	ldrb	r3, [r3, #20]
 80128d8:	2b02      	cmp	r3, #2
 80128da:	d108      	bne.n	80128ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80128e0:	4b97      	ldr	r3, [pc, #604]	; (8012b40 <tcp_process+0x29c>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d123      	bne.n	8012930 <tcp_process+0x8c>
        acceptable = 1;
 80128e8:	2301      	movs	r3, #1
 80128ea:	76fb      	strb	r3, [r7, #27]
 80128ec:	e020      	b.n	8012930 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128f2:	4b94      	ldr	r3, [pc, #592]	; (8012b44 <tcp_process+0x2a0>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d102      	bne.n	8012900 <tcp_process+0x5c>
        acceptable = 1;
 80128fa:	2301      	movs	r3, #1
 80128fc:	76fb      	strb	r3, [r7, #27]
 80128fe:	e017      	b.n	8012930 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012900:	4b90      	ldr	r3, [pc, #576]	; (8012b44 <tcp_process+0x2a0>)
 8012902:	681a      	ldr	r2, [r3, #0]
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012908:	1ad3      	subs	r3, r2, r3
 801290a:	2b00      	cmp	r3, #0
 801290c:	db10      	blt.n	8012930 <tcp_process+0x8c>
 801290e:	4b8d      	ldr	r3, [pc, #564]	; (8012b44 <tcp_process+0x2a0>)
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012916:	6879      	ldr	r1, [r7, #4]
 8012918:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801291a:	440b      	add	r3, r1
 801291c:	1ad3      	subs	r3, r2, r3
 801291e:	2b00      	cmp	r3, #0
 8012920:	dc06      	bgt.n	8012930 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	8b5b      	ldrh	r3, [r3, #26]
 8012926:	f043 0302 	orr.w	r3, r3, #2
 801292a:	b29a      	uxth	r2, r3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012930:	7efb      	ldrb	r3, [r7, #27]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d01b      	beq.n	801296e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	7d1b      	ldrb	r3, [r3, #20]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d106      	bne.n	801294c <tcp_process+0xa8>
 801293e:	4b7c      	ldr	r3, [pc, #496]	; (8012b30 <tcp_process+0x28c>)
 8012940:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012944:	4980      	ldr	r1, [pc, #512]	; (8012b48 <tcp_process+0x2a4>)
 8012946:	487c      	ldr	r0, [pc, #496]	; (8012b38 <tcp_process+0x294>)
 8012948:	f006 fa80 	bl	8018e4c <iprintf>
      recv_flags |= TF_RESET;
 801294c:	4b7f      	ldr	r3, [pc, #508]	; (8012b4c <tcp_process+0x2a8>)
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	f043 0308 	orr.w	r3, r3, #8
 8012954:	b2da      	uxtb	r2, r3
 8012956:	4b7d      	ldr	r3, [pc, #500]	; (8012b4c <tcp_process+0x2a8>)
 8012958:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	8b5b      	ldrh	r3, [r3, #26]
 801295e:	f023 0301 	bic.w	r3, r3, #1
 8012962:	b29a      	uxth	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012968:	f06f 030d 	mvn.w	r3, #13
 801296c:	e37a      	b.n	8013064 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801296e:	2300      	movs	r3, #0
 8012970:	e378      	b.n	8013064 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012972:	4b72      	ldr	r3, [pc, #456]	; (8012b3c <tcp_process+0x298>)
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	f003 0302 	and.w	r3, r3, #2
 801297a:	2b00      	cmp	r3, #0
 801297c:	d010      	beq.n	80129a0 <tcp_process+0xfc>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	7d1b      	ldrb	r3, [r3, #20]
 8012982:	2b02      	cmp	r3, #2
 8012984:	d00c      	beq.n	80129a0 <tcp_process+0xfc>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	7d1b      	ldrb	r3, [r3, #20]
 801298a:	2b03      	cmp	r3, #3
 801298c:	d008      	beq.n	80129a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	8b5b      	ldrh	r3, [r3, #26]
 8012992:	f043 0302 	orr.w	r3, r3, #2
 8012996:	b29a      	uxth	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801299c:	2300      	movs	r3, #0
 801299e:	e361      	b.n	8013064 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	8b5b      	ldrh	r3, [r3, #26]
 80129a4:	f003 0310 	and.w	r3, r3, #16
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d103      	bne.n	80129b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80129ac:	4b68      	ldr	r3, [pc, #416]	; (8012b50 <tcp_process+0x2ac>)
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2200      	movs	r2, #0
 80129b8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2200      	movs	r2, #0
 80129c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f001 fc2f 	bl	8014228 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	7d1b      	ldrb	r3, [r3, #20]
 80129ce:	3b02      	subs	r3, #2
 80129d0:	2b07      	cmp	r3, #7
 80129d2:	f200 8337 	bhi.w	8013044 <tcp_process+0x7a0>
 80129d6:	a201      	add	r2, pc, #4	; (adr r2, 80129dc <tcp_process+0x138>)
 80129d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129dc:	080129fd 	.word	0x080129fd
 80129e0:	08012c2d 	.word	0x08012c2d
 80129e4:	08012da5 	.word	0x08012da5
 80129e8:	08012dcf 	.word	0x08012dcf
 80129ec:	08012ef3 	.word	0x08012ef3
 80129f0:	08012da5 	.word	0x08012da5
 80129f4:	08012f7f 	.word	0x08012f7f
 80129f8:	0801300f 	.word	0x0801300f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80129fc:	4b4f      	ldr	r3, [pc, #316]	; (8012b3c <tcp_process+0x298>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	f003 0310 	and.w	r3, r3, #16
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f000 80e4 	beq.w	8012bd2 <tcp_process+0x32e>
 8012a0a:	4b4c      	ldr	r3, [pc, #304]	; (8012b3c <tcp_process+0x298>)
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	f003 0302 	and.w	r3, r3, #2
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f000 80dd 	beq.w	8012bd2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a1c:	1c5a      	adds	r2, r3, #1
 8012a1e:	4b48      	ldr	r3, [pc, #288]	; (8012b40 <tcp_process+0x29c>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	f040 80d5 	bne.w	8012bd2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012a28:	4b46      	ldr	r3, [pc, #280]	; (8012b44 <tcp_process+0x2a0>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	1c5a      	adds	r2, r3, #1
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012a3a:	4b41      	ldr	r3, [pc, #260]	; (8012b40 <tcp_process+0x29c>)
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012a42:	4b44      	ldr	r3, [pc, #272]	; (8012b54 <tcp_process+0x2b0>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	89db      	ldrh	r3, [r3, #14]
 8012a48:	b29a      	uxth	r2, r3
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012a5c:	4b39      	ldr	r3, [pc, #228]	; (8012b44 <tcp_process+0x2a0>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	1e5a      	subs	r2, r3, #1
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2204      	movs	r2, #4
 8012a6a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	3304      	adds	r3, #4
 8012a74:	4618      	mov	r0, r3
 8012a76:	f004 fad5 	bl	8017024 <ip4_route>
 8012a7a:	4601      	mov	r1, r0
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	3304      	adds	r3, #4
 8012a80:	461a      	mov	r2, r3
 8012a82:	4620      	mov	r0, r4
 8012a84:	f7ff f88c 	bl	8011ba0 <tcp_eff_send_mss_netif>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a94:	009a      	lsls	r2, r3, #2
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a9a:	005b      	lsls	r3, r3, #1
 8012a9c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012aa0:	428b      	cmp	r3, r1
 8012aa2:	bf38      	it	cc
 8012aa4:	460b      	movcc	r3, r1
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d204      	bcs.n	8012ab4 <tcp_process+0x210>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	e00d      	b.n	8012ad0 <tcp_process+0x22c>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ab8:	005b      	lsls	r3, r3, #1
 8012aba:	f241 121c 	movw	r2, #4380	; 0x111c
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	d904      	bls.n	8012acc <tcp_process+0x228>
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ac6:	005b      	lsls	r3, r3, #1
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	e001      	b.n	8012ad0 <tcp_process+0x22c>
 8012acc:	f241 131c 	movw	r3, #4380	; 0x111c
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d106      	bne.n	8012aee <tcp_process+0x24a>
 8012ae0:	4b13      	ldr	r3, [pc, #76]	; (8012b30 <tcp_process+0x28c>)
 8012ae2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012ae6:	491c      	ldr	r1, [pc, #112]	; (8012b58 <tcp_process+0x2b4>)
 8012ae8:	4813      	ldr	r0, [pc, #76]	; (8012b38 <tcp_process+0x294>)
 8012aea:	f006 f9af 	bl	8018e4c <iprintf>
        --pcb->snd_queuelen;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012af4:	3b01      	subs	r3, #1
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b02:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012b04:	69fb      	ldr	r3, [r7, #28]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d12a      	bne.n	8012b60 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b0e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d106      	bne.n	8012b24 <tcp_process+0x280>
 8012b16:	4b06      	ldr	r3, [pc, #24]	; (8012b30 <tcp_process+0x28c>)
 8012b18:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012b1c:	490f      	ldr	r1, [pc, #60]	; (8012b5c <tcp_process+0x2b8>)
 8012b1e:	4806      	ldr	r0, [pc, #24]	; (8012b38 <tcp_process+0x294>)
 8012b20:	f006 f994 	bl	8018e4c <iprintf>
          pcb->unsent = rseg->next;
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	66da      	str	r2, [r3, #108]	; 0x6c
 8012b2c:	e01c      	b.n	8012b68 <tcp_process+0x2c4>
 8012b2e:	bf00      	nop
 8012b30:	0801c6a0 	.word	0x0801c6a0
 8012b34:	0801c8d8 	.word	0x0801c8d8
 8012b38:	0801c6ec 	.word	0x0801c6ec
 8012b3c:	2000803c 	.word	0x2000803c
 8012b40:	20008034 	.word	0x20008034
 8012b44:	20008030 	.word	0x20008030
 8012b48:	0801c8f4 	.word	0x0801c8f4
 8012b4c:	2000803d 	.word	0x2000803d
 8012b50:	20007ff8 	.word	0x20007ff8
 8012b54:	20008020 	.word	0x20008020
 8012b58:	0801c914 	.word	0x0801c914
 8012b5c:	0801c92c 	.word	0x0801c92c
        } else {
          pcb->unacked = rseg->next;
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012b68:	69f8      	ldr	r0, [r7, #28]
 8012b6a:	f7fe fd22 	bl	80115b2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d104      	bne.n	8012b80 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b7c:	861a      	strh	r2, [r3, #48]	; 0x30
 8012b7e:	e006      	b.n	8012b8e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d00a      	beq.n	8012bae <tcp_process+0x30a>
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	6910      	ldr	r0, [r2, #16]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	6879      	ldr	r1, [r7, #4]
 8012ba6:	4798      	blx	r3
 8012ba8:	4603      	mov	r3, r0
 8012baa:	76bb      	strb	r3, [r7, #26]
 8012bac:	e001      	b.n	8012bb2 <tcp_process+0x30e>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012bb2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012bb6:	f113 0f0d 	cmn.w	r3, #13
 8012bba:	d102      	bne.n	8012bc2 <tcp_process+0x31e>
          return ERR_ABRT;
 8012bbc:	f06f 030c 	mvn.w	r3, #12
 8012bc0:	e250      	b.n	8013064 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	8b5b      	ldrh	r3, [r3, #26]
 8012bc6:	f043 0302 	orr.w	r3, r3, #2
 8012bca:	b29a      	uxth	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012bd0:	e23a      	b.n	8013048 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012bd2:	4b98      	ldr	r3, [pc, #608]	; (8012e34 <tcp_process+0x590>)
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	f003 0310 	and.w	r3, r3, #16
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	f000 8234 	beq.w	8013048 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012be0:	4b95      	ldr	r3, [pc, #596]	; (8012e38 <tcp_process+0x594>)
 8012be2:	6819      	ldr	r1, [r3, #0]
 8012be4:	4b95      	ldr	r3, [pc, #596]	; (8012e3c <tcp_process+0x598>)
 8012be6:	881b      	ldrh	r3, [r3, #0]
 8012be8:	461a      	mov	r2, r3
 8012bea:	4b95      	ldr	r3, [pc, #596]	; (8012e40 <tcp_process+0x59c>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bf0:	4b94      	ldr	r3, [pc, #592]	; (8012e44 <tcp_process+0x5a0>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bf4:	885b      	ldrh	r3, [r3, #2]
 8012bf6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bf8:	4a92      	ldr	r2, [pc, #584]	; (8012e44 <tcp_process+0x5a0>)
 8012bfa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bfc:	8812      	ldrh	r2, [r2, #0]
 8012bfe:	b292      	uxth	r2, r2
 8012c00:	9202      	str	r2, [sp, #8]
 8012c02:	9301      	str	r3, [sp, #4]
 8012c04:	4b90      	ldr	r3, [pc, #576]	; (8012e48 <tcp_process+0x5a4>)
 8012c06:	9300      	str	r3, [sp, #0]
 8012c08:	4b90      	ldr	r3, [pc, #576]	; (8012e4c <tcp_process+0x5a8>)
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f002 fc85 	bl	801551c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c18:	2b05      	cmp	r3, #5
 8012c1a:	f200 8215 	bhi.w	8013048 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2200      	movs	r2, #0
 8012c22:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f002 fa51 	bl	80150cc <tcp_rexmit_rto>
      break;
 8012c2a:	e20d      	b.n	8013048 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012c2c:	4b81      	ldr	r3, [pc, #516]	; (8012e34 <tcp_process+0x590>)
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	f003 0310 	and.w	r3, r3, #16
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	f000 80a1 	beq.w	8012d7c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012c3a:	4b7f      	ldr	r3, [pc, #508]	; (8012e38 <tcp_process+0x594>)
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c42:	1ad3      	subs	r3, r2, r3
 8012c44:	3b01      	subs	r3, #1
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	db7e      	blt.n	8012d48 <tcp_process+0x4a4>
 8012c4a:	4b7b      	ldr	r3, [pc, #492]	; (8012e38 <tcp_process+0x594>)
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c52:	1ad3      	subs	r3, r2, r3
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	dc77      	bgt.n	8012d48 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2204      	movs	r2, #4
 8012c5c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d102      	bne.n	8012c6c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012c66:	23fa      	movs	r3, #250	; 0xfa
 8012c68:	76bb      	strb	r3, [r7, #26]
 8012c6a:	e01d      	b.n	8012ca8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c70:	699b      	ldr	r3, [r3, #24]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d106      	bne.n	8012c84 <tcp_process+0x3e0>
 8012c76:	4b76      	ldr	r3, [pc, #472]	; (8012e50 <tcp_process+0x5ac>)
 8012c78:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012c7c:	4975      	ldr	r1, [pc, #468]	; (8012e54 <tcp_process+0x5b0>)
 8012c7e:	4876      	ldr	r0, [pc, #472]	; (8012e58 <tcp_process+0x5b4>)
 8012c80:	f006 f8e4 	bl	8018e4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c88:	699b      	ldr	r3, [r3, #24]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00a      	beq.n	8012ca4 <tcp_process+0x400>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c92:	699b      	ldr	r3, [r3, #24]
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	6910      	ldr	r0, [r2, #16]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	6879      	ldr	r1, [r7, #4]
 8012c9c:	4798      	blx	r3
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	76bb      	strb	r3, [r7, #26]
 8012ca2:	e001      	b.n	8012ca8 <tcp_process+0x404>
 8012ca4:	23f0      	movs	r3, #240	; 0xf0
 8012ca6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012ca8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00a      	beq.n	8012cc6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012cb0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012cb4:	f113 0f0d 	cmn.w	r3, #13
 8012cb8:	d002      	beq.n	8012cc0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f7fd ff8e 	bl	8010bdc <tcp_abort>
            }
            return ERR_ABRT;
 8012cc0:	f06f 030c 	mvn.w	r3, #12
 8012cc4:	e1ce      	b.n	8013064 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f000 fae0 	bl	801328c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012ccc:	4b63      	ldr	r3, [pc, #396]	; (8012e5c <tcp_process+0x5b8>)
 8012cce:	881b      	ldrh	r3, [r3, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d005      	beq.n	8012ce0 <tcp_process+0x43c>
            recv_acked--;
 8012cd4:	4b61      	ldr	r3, [pc, #388]	; (8012e5c <tcp_process+0x5b8>)
 8012cd6:	881b      	ldrh	r3, [r3, #0]
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	b29a      	uxth	r2, r3
 8012cdc:	4b5f      	ldr	r3, [pc, #380]	; (8012e5c <tcp_process+0x5b8>)
 8012cde:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ce4:	009a      	lsls	r2, r3, #2
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cea:	005b      	lsls	r3, r3, #1
 8012cec:	f241 111c 	movw	r1, #4380	; 0x111c
 8012cf0:	428b      	cmp	r3, r1
 8012cf2:	bf38      	it	cc
 8012cf4:	460b      	movcc	r3, r1
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d204      	bcs.n	8012d04 <tcp_process+0x460>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	e00d      	b.n	8012d20 <tcp_process+0x47c>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d08:	005b      	lsls	r3, r3, #1
 8012d0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d904      	bls.n	8012d1c <tcp_process+0x478>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d16:	005b      	lsls	r3, r3, #1
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	e001      	b.n	8012d20 <tcp_process+0x47c>
 8012d1c:	f241 131c 	movw	r3, #4380	; 0x111c
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012d26:	4b4e      	ldr	r3, [pc, #312]	; (8012e60 <tcp_process+0x5bc>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	f003 0320 	and.w	r3, r3, #32
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d037      	beq.n	8012da2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	8b5b      	ldrh	r3, [r3, #26]
 8012d36:	f043 0302 	orr.w	r3, r3, #2
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2207      	movs	r2, #7
 8012d44:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012d46:	e02c      	b.n	8012da2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d48:	4b3b      	ldr	r3, [pc, #236]	; (8012e38 <tcp_process+0x594>)
 8012d4a:	6819      	ldr	r1, [r3, #0]
 8012d4c:	4b3b      	ldr	r3, [pc, #236]	; (8012e3c <tcp_process+0x598>)
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	461a      	mov	r2, r3
 8012d52:	4b3b      	ldr	r3, [pc, #236]	; (8012e40 <tcp_process+0x59c>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d58:	4b3a      	ldr	r3, [pc, #232]	; (8012e44 <tcp_process+0x5a0>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d5c:	885b      	ldrh	r3, [r3, #2]
 8012d5e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d60:	4a38      	ldr	r2, [pc, #224]	; (8012e44 <tcp_process+0x5a0>)
 8012d62:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d64:	8812      	ldrh	r2, [r2, #0]
 8012d66:	b292      	uxth	r2, r2
 8012d68:	9202      	str	r2, [sp, #8]
 8012d6a:	9301      	str	r3, [sp, #4]
 8012d6c:	4b36      	ldr	r3, [pc, #216]	; (8012e48 <tcp_process+0x5a4>)
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	4b36      	ldr	r3, [pc, #216]	; (8012e4c <tcp_process+0x5a8>)
 8012d72:	4602      	mov	r2, r0
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f002 fbd1 	bl	801551c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012d7a:	e167      	b.n	801304c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012d7c:	4b2d      	ldr	r3, [pc, #180]	; (8012e34 <tcp_process+0x590>)
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	f003 0302 	and.w	r3, r3, #2
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f000 8161 	beq.w	801304c <tcp_process+0x7a8>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d8e:	1e5a      	subs	r2, r3, #1
 8012d90:	4b2b      	ldr	r3, [pc, #172]	; (8012e40 <tcp_process+0x59c>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	f040 8159 	bne.w	801304c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f002 f9b8 	bl	8015110 <tcp_rexmit>
      break;
 8012da0:	e154      	b.n	801304c <tcp_process+0x7a8>
 8012da2:	e153      	b.n	801304c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f000 fa71 	bl	801328c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012daa:	4b2d      	ldr	r3, [pc, #180]	; (8012e60 <tcp_process+0x5bc>)
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	f003 0320 	and.w	r3, r3, #32
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	f000 814c 	beq.w	8013050 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	8b5b      	ldrh	r3, [r3, #26]
 8012dbc:	f043 0302 	orr.w	r3, r3, #2
 8012dc0:	b29a      	uxth	r2, r3
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2207      	movs	r2, #7
 8012dca:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012dcc:	e140      	b.n	8013050 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f000 fa5c 	bl	801328c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012dd4:	4b22      	ldr	r3, [pc, #136]	; (8012e60 <tcp_process+0x5bc>)
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	f003 0320 	and.w	r3, r3, #32
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d071      	beq.n	8012ec4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012de0:	4b14      	ldr	r3, [pc, #80]	; (8012e34 <tcp_process+0x590>)
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	f003 0310 	and.w	r3, r3, #16
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d060      	beq.n	8012eae <tcp_process+0x60a>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012df0:	4b11      	ldr	r3, [pc, #68]	; (8012e38 <tcp_process+0x594>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d15a      	bne.n	8012eae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d156      	bne.n	8012eae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	8b5b      	ldrh	r3, [r3, #26]
 8012e04:	f043 0302 	orr.w	r3, r3, #2
 8012e08:	b29a      	uxth	r2, r3
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f7fe fdbc 	bl	801198c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012e14:	4b13      	ldr	r3, [pc, #76]	; (8012e64 <tcp_process+0x5c0>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d105      	bne.n	8012e2a <tcp_process+0x586>
 8012e1e:	4b11      	ldr	r3, [pc, #68]	; (8012e64 <tcp_process+0x5c0>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	68db      	ldr	r3, [r3, #12]
 8012e24:	4a0f      	ldr	r2, [pc, #60]	; (8012e64 <tcp_process+0x5c0>)
 8012e26:	6013      	str	r3, [r2, #0]
 8012e28:	e02e      	b.n	8012e88 <tcp_process+0x5e4>
 8012e2a:	4b0e      	ldr	r3, [pc, #56]	; (8012e64 <tcp_process+0x5c0>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	617b      	str	r3, [r7, #20]
 8012e30:	e027      	b.n	8012e82 <tcp_process+0x5de>
 8012e32:	bf00      	nop
 8012e34:	2000803c 	.word	0x2000803c
 8012e38:	20008034 	.word	0x20008034
 8012e3c:	2000803a 	.word	0x2000803a
 8012e40:	20008030 	.word	0x20008030
 8012e44:	20008020 	.word	0x20008020
 8012e48:	200050ec 	.word	0x200050ec
 8012e4c:	200050f0 	.word	0x200050f0
 8012e50:	0801c6a0 	.word	0x0801c6a0
 8012e54:	0801c940 	.word	0x0801c940
 8012e58:	0801c6ec 	.word	0x0801c6ec
 8012e5c:	20008038 	.word	0x20008038
 8012e60:	2000803d 	.word	0x2000803d
 8012e64:	20008004 	.word	0x20008004
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d104      	bne.n	8012e7c <tcp_process+0x5d8>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	68da      	ldr	r2, [r3, #12]
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	60da      	str	r2, [r3, #12]
 8012e7a:	e005      	b.n	8012e88 <tcp_process+0x5e4>
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	617b      	str	r3, [r7, #20]
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d1ef      	bne.n	8012e68 <tcp_process+0x5c4>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	60da      	str	r2, [r3, #12]
 8012e8e:	4b77      	ldr	r3, [pc, #476]	; (801306c <tcp_process+0x7c8>)
 8012e90:	2201      	movs	r2, #1
 8012e92:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	220a      	movs	r2, #10
 8012e98:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012e9a:	4b75      	ldr	r3, [pc, #468]	; (8013070 <tcp_process+0x7cc>)
 8012e9c:	681a      	ldr	r2, [r3, #0]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	60da      	str	r2, [r3, #12]
 8012ea2:	4a73      	ldr	r2, [pc, #460]	; (8013070 <tcp_process+0x7cc>)
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6013      	str	r3, [r2, #0]
 8012ea8:	f002 fcfa 	bl	80158a0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012eac:	e0d2      	b.n	8013054 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	8b5b      	ldrh	r3, [r3, #26]
 8012eb2:	f043 0302 	orr.w	r3, r3, #2
 8012eb6:	b29a      	uxth	r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2208      	movs	r2, #8
 8012ec0:	751a      	strb	r2, [r3, #20]
      break;
 8012ec2:	e0c7      	b.n	8013054 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012ec4:	4b6b      	ldr	r3, [pc, #428]	; (8013074 <tcp_process+0x7d0>)
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	f003 0310 	and.w	r3, r3, #16
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	f000 80c1 	beq.w	8013054 <tcp_process+0x7b0>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ed6:	4b68      	ldr	r3, [pc, #416]	; (8013078 <tcp_process+0x7d4>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	f040 80ba 	bne.w	8013054 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	f040 80b5 	bne.w	8013054 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2206      	movs	r2, #6
 8012eee:	751a      	strb	r2, [r3, #20]
      break;
 8012ef0:	e0b0      	b.n	8013054 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 f9ca 	bl	801328c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012ef8:	4b60      	ldr	r3, [pc, #384]	; (801307c <tcp_process+0x7d8>)
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	f003 0320 	and.w	r3, r3, #32
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	f000 80a9 	beq.w	8013058 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	8b5b      	ldrh	r3, [r3, #26]
 8012f0a:	f043 0302 	orr.w	r3, r3, #2
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f7fe fd39 	bl	801198c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012f1a:	4b59      	ldr	r3, [pc, #356]	; (8013080 <tcp_process+0x7dc>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	687a      	ldr	r2, [r7, #4]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d105      	bne.n	8012f30 <tcp_process+0x68c>
 8012f24:	4b56      	ldr	r3, [pc, #344]	; (8013080 <tcp_process+0x7dc>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	68db      	ldr	r3, [r3, #12]
 8012f2a:	4a55      	ldr	r2, [pc, #340]	; (8013080 <tcp_process+0x7dc>)
 8012f2c:	6013      	str	r3, [r2, #0]
 8012f2e:	e013      	b.n	8012f58 <tcp_process+0x6b4>
 8012f30:	4b53      	ldr	r3, [pc, #332]	; (8013080 <tcp_process+0x7dc>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	613b      	str	r3, [r7, #16]
 8012f36:	e00c      	b.n	8012f52 <tcp_process+0x6ae>
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	68db      	ldr	r3, [r3, #12]
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d104      	bne.n	8012f4c <tcp_process+0x6a8>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	68da      	ldr	r2, [r3, #12]
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	60da      	str	r2, [r3, #12]
 8012f4a:	e005      	b.n	8012f58 <tcp_process+0x6b4>
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	68db      	ldr	r3, [r3, #12]
 8012f50:	613b      	str	r3, [r7, #16]
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d1ef      	bne.n	8012f38 <tcp_process+0x694>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	60da      	str	r2, [r3, #12]
 8012f5e:	4b43      	ldr	r3, [pc, #268]	; (801306c <tcp_process+0x7c8>)
 8012f60:	2201      	movs	r2, #1
 8012f62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	220a      	movs	r2, #10
 8012f68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012f6a:	4b41      	ldr	r3, [pc, #260]	; (8013070 <tcp_process+0x7cc>)
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	60da      	str	r2, [r3, #12]
 8012f72:	4a3f      	ldr	r2, [pc, #252]	; (8013070 <tcp_process+0x7cc>)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6013      	str	r3, [r2, #0]
 8012f78:	f002 fc92 	bl	80158a0 <tcp_timer_needed>
      }
      break;
 8012f7c:	e06c      	b.n	8013058 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f000 f984 	bl	801328c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012f84:	4b3b      	ldr	r3, [pc, #236]	; (8013074 <tcp_process+0x7d0>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	f003 0310 	and.w	r3, r3, #16
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d065      	beq.n	801305c <tcp_process+0x7b8>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f94:	4b38      	ldr	r3, [pc, #224]	; (8013078 <tcp_process+0x7d4>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d15f      	bne.n	801305c <tcp_process+0x7b8>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d15b      	bne.n	801305c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7fe fcf1 	bl	801198c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012faa:	4b35      	ldr	r3, [pc, #212]	; (8013080 <tcp_process+0x7dc>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	687a      	ldr	r2, [r7, #4]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d105      	bne.n	8012fc0 <tcp_process+0x71c>
 8012fb4:	4b32      	ldr	r3, [pc, #200]	; (8013080 <tcp_process+0x7dc>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	68db      	ldr	r3, [r3, #12]
 8012fba:	4a31      	ldr	r2, [pc, #196]	; (8013080 <tcp_process+0x7dc>)
 8012fbc:	6013      	str	r3, [r2, #0]
 8012fbe:	e013      	b.n	8012fe8 <tcp_process+0x744>
 8012fc0:	4b2f      	ldr	r3, [pc, #188]	; (8013080 <tcp_process+0x7dc>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	60fb      	str	r3, [r7, #12]
 8012fc6:	e00c      	b.n	8012fe2 <tcp_process+0x73e>
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	687a      	ldr	r2, [r7, #4]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d104      	bne.n	8012fdc <tcp_process+0x738>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	68da      	ldr	r2, [r3, #12]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	60da      	str	r2, [r3, #12]
 8012fda:	e005      	b.n	8012fe8 <tcp_process+0x744>
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	60fb      	str	r3, [r7, #12]
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d1ef      	bne.n	8012fc8 <tcp_process+0x724>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2200      	movs	r2, #0
 8012fec:	60da      	str	r2, [r3, #12]
 8012fee:	4b1f      	ldr	r3, [pc, #124]	; (801306c <tcp_process+0x7c8>)
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	220a      	movs	r2, #10
 8012ff8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012ffa:	4b1d      	ldr	r3, [pc, #116]	; (8013070 <tcp_process+0x7cc>)
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	60da      	str	r2, [r3, #12]
 8013002:	4a1b      	ldr	r2, [pc, #108]	; (8013070 <tcp_process+0x7cc>)
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6013      	str	r3, [r2, #0]
 8013008:	f002 fc4a 	bl	80158a0 <tcp_timer_needed>
      }
      break;
 801300c:	e026      	b.n	801305c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f000 f93c 	bl	801328c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013014:	4b17      	ldr	r3, [pc, #92]	; (8013074 <tcp_process+0x7d0>)
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	f003 0310 	and.w	r3, r3, #16
 801301c:	2b00      	cmp	r3, #0
 801301e:	d01f      	beq.n	8013060 <tcp_process+0x7bc>
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013024:	4b14      	ldr	r3, [pc, #80]	; (8013078 <tcp_process+0x7d4>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	429a      	cmp	r2, r3
 801302a:	d119      	bne.n	8013060 <tcp_process+0x7bc>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013030:	2b00      	cmp	r3, #0
 8013032:	d115      	bne.n	8013060 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013034:	4b11      	ldr	r3, [pc, #68]	; (801307c <tcp_process+0x7d8>)
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	f043 0310 	orr.w	r3, r3, #16
 801303c:	b2da      	uxtb	r2, r3
 801303e:	4b0f      	ldr	r3, [pc, #60]	; (801307c <tcp_process+0x7d8>)
 8013040:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013042:	e00d      	b.n	8013060 <tcp_process+0x7bc>
    default:
      break;
 8013044:	bf00      	nop
 8013046:	e00c      	b.n	8013062 <tcp_process+0x7be>
      break;
 8013048:	bf00      	nop
 801304a:	e00a      	b.n	8013062 <tcp_process+0x7be>
      break;
 801304c:	bf00      	nop
 801304e:	e008      	b.n	8013062 <tcp_process+0x7be>
      break;
 8013050:	bf00      	nop
 8013052:	e006      	b.n	8013062 <tcp_process+0x7be>
      break;
 8013054:	bf00      	nop
 8013056:	e004      	b.n	8013062 <tcp_process+0x7be>
      break;
 8013058:	bf00      	nop
 801305a:	e002      	b.n	8013062 <tcp_process+0x7be>
      break;
 801305c:	bf00      	nop
 801305e:	e000      	b.n	8013062 <tcp_process+0x7be>
      break;
 8013060:	bf00      	nop
  }
  return ERR_OK;
 8013062:	2300      	movs	r3, #0
}
 8013064:	4618      	mov	r0, r3
 8013066:	3724      	adds	r7, #36	; 0x24
 8013068:	46bd      	mov	sp, r7
 801306a:	bd90      	pop	{r4, r7, pc}
 801306c:	2000800c 	.word	0x2000800c
 8013070:	20008008 	.word	0x20008008
 8013074:	2000803c 	.word	0x2000803c
 8013078:	20008034 	.word	0x20008034
 801307c:	2000803d 	.word	0x2000803d
 8013080:	20008004 	.word	0x20008004

08013084 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013084:	b590      	push	{r4, r7, lr}
 8013086:	b085      	sub	sp, #20
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d106      	bne.n	80130a2 <tcp_oos_insert_segment+0x1e>
 8013094:	4b3b      	ldr	r3, [pc, #236]	; (8013184 <tcp_oos_insert_segment+0x100>)
 8013096:	f240 421f 	movw	r2, #1055	; 0x41f
 801309a:	493b      	ldr	r1, [pc, #236]	; (8013188 <tcp_oos_insert_segment+0x104>)
 801309c:	483b      	ldr	r0, [pc, #236]	; (801318c <tcp_oos_insert_segment+0x108>)
 801309e:	f005 fed5 	bl	8018e4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	68db      	ldr	r3, [r3, #12]
 80130a6:	899b      	ldrh	r3, [r3, #12]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fb fc18 	bl	800e8e0 <lwip_htons>
 80130b0:	4603      	mov	r3, r0
 80130b2:	b2db      	uxtb	r3, r3
 80130b4:	f003 0301 	and.w	r3, r3, #1
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d028      	beq.n	801310e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80130bc:	6838      	ldr	r0, [r7, #0]
 80130be:	f7fe fa63 	bl	8011588 <tcp_segs_free>
    next = NULL;
 80130c2:	2300      	movs	r3, #0
 80130c4:	603b      	str	r3, [r7, #0]
 80130c6:	e056      	b.n	8013176 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	899b      	ldrh	r3, [r3, #12]
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7fb fc05 	bl	800e8e0 <lwip_htons>
 80130d6:	4603      	mov	r3, r0
 80130d8:	b2db      	uxtb	r3, r3
 80130da:	f003 0301 	and.w	r3, r3, #1
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d00d      	beq.n	80130fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	899b      	ldrh	r3, [r3, #12]
 80130e8:	b29c      	uxth	r4, r3
 80130ea:	2001      	movs	r0, #1
 80130ec:	f7fb fbf8 	bl	800e8e0 <lwip_htons>
 80130f0:	4603      	mov	r3, r0
 80130f2:	461a      	mov	r2, r3
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	68db      	ldr	r3, [r3, #12]
 80130f8:	4322      	orrs	r2, r4
 80130fa:	b292      	uxth	r2, r2
 80130fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013108:	68f8      	ldr	r0, [r7, #12]
 801310a:	f7fe fa52 	bl	80115b2 <tcp_seg_free>
    while (next &&
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d00e      	beq.n	8013132 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	891b      	ldrh	r3, [r3, #8]
 8013118:	461a      	mov	r2, r3
 801311a:	4b1d      	ldr	r3, [pc, #116]	; (8013190 <tcp_oos_insert_segment+0x10c>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	441a      	add	r2, r3
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	6839      	ldr	r1, [r7, #0]
 8013128:	8909      	ldrh	r1, [r1, #8]
 801312a:	440b      	add	r3, r1
 801312c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801312e:	2b00      	cmp	r3, #0
 8013130:	daca      	bge.n	80130c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d01e      	beq.n	8013176 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	891b      	ldrh	r3, [r3, #8]
 801313c:	461a      	mov	r2, r3
 801313e:	4b14      	ldr	r3, [pc, #80]	; (8013190 <tcp_oos_insert_segment+0x10c>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	441a      	add	r2, r3
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	685b      	ldr	r3, [r3, #4]
 801314a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801314c:	2b00      	cmp	r3, #0
 801314e:	dd12      	ble.n	8013176 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	685b      	ldr	r3, [r3, #4]
 8013156:	b29a      	uxth	r2, r3
 8013158:	4b0d      	ldr	r3, [pc, #52]	; (8013190 <tcp_oos_insert_segment+0x10c>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	b29b      	uxth	r3, r3
 801315e:	1ad3      	subs	r3, r2, r3
 8013160:	b29a      	uxth	r2, r3
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	685a      	ldr	r2, [r3, #4]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	891b      	ldrh	r3, [r3, #8]
 801316e:	4619      	mov	r1, r3
 8013170:	4610      	mov	r0, r2
 8013172:	f7fc fe25 	bl	800fdc0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	683a      	ldr	r2, [r7, #0]
 801317a:	601a      	str	r2, [r3, #0]
}
 801317c:	bf00      	nop
 801317e:	3714      	adds	r7, #20
 8013180:	46bd      	mov	sp, r7
 8013182:	bd90      	pop	{r4, r7, pc}
 8013184:	0801c6a0 	.word	0x0801c6a0
 8013188:	0801c960 	.word	0x0801c960
 801318c:	0801c6ec 	.word	0x0801c6ec
 8013190:	20008030 	.word	0x20008030

08013194 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013194:	b5b0      	push	{r4, r5, r7, lr}
 8013196:	b086      	sub	sp, #24
 8013198:	af00      	add	r7, sp, #0
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	607a      	str	r2, [r7, #4]
 80131a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80131a2:	e03e      	b.n	8013222 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fd f812 	bl	80101dc <pbuf_clen>
 80131b8:	4603      	mov	r3, r0
 80131ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131c2:	8a7a      	ldrh	r2, [r7, #18]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d906      	bls.n	80131d6 <tcp_free_acked_segments+0x42>
 80131c8:	4b2a      	ldr	r3, [pc, #168]	; (8013274 <tcp_free_acked_segments+0xe0>)
 80131ca:	f240 4257 	movw	r2, #1111	; 0x457
 80131ce:	492a      	ldr	r1, [pc, #168]	; (8013278 <tcp_free_acked_segments+0xe4>)
 80131d0:	482a      	ldr	r0, [pc, #168]	; (801327c <tcp_free_acked_segments+0xe8>)
 80131d2:	f005 fe3b 	bl	8018e4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80131dc:	8a7b      	ldrh	r3, [r7, #18]
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	891a      	ldrh	r2, [r3, #8]
 80131ec:	4b24      	ldr	r3, [pc, #144]	; (8013280 <tcp_free_acked_segments+0xec>)
 80131ee:	881b      	ldrh	r3, [r3, #0]
 80131f0:	4413      	add	r3, r2
 80131f2:	b29a      	uxth	r2, r3
 80131f4:	4b22      	ldr	r3, [pc, #136]	; (8013280 <tcp_free_acked_segments+0xec>)
 80131f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80131f8:	6978      	ldr	r0, [r7, #20]
 80131fa:	f7fe f9da 	bl	80115b2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013204:	2b00      	cmp	r3, #0
 8013206:	d00c      	beq.n	8013222 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d109      	bne.n	8013222 <tcp_free_acked_segments+0x8e>
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d106      	bne.n	8013222 <tcp_free_acked_segments+0x8e>
 8013214:	4b17      	ldr	r3, [pc, #92]	; (8013274 <tcp_free_acked_segments+0xe0>)
 8013216:	f240 4261 	movw	r2, #1121	; 0x461
 801321a:	491a      	ldr	r1, [pc, #104]	; (8013284 <tcp_free_acked_segments+0xf0>)
 801321c:	4817      	ldr	r0, [pc, #92]	; (801327c <tcp_free_acked_segments+0xe8>)
 801321e:	f005 fe15 	bl	8018e4c <iprintf>
  while (seg_list != NULL &&
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d020      	beq.n	801326a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	685b      	ldr	r3, [r3, #4]
 801322e:	4618      	mov	r0, r3
 8013230:	f7fb fb6b 	bl	800e90a <lwip_htonl>
 8013234:	4604      	mov	r4, r0
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	891b      	ldrh	r3, [r3, #8]
 801323a:	461d      	mov	r5, r3
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	899b      	ldrh	r3, [r3, #12]
 8013242:	b29b      	uxth	r3, r3
 8013244:	4618      	mov	r0, r3
 8013246:	f7fb fb4b 	bl	800e8e0 <lwip_htons>
 801324a:	4603      	mov	r3, r0
 801324c:	b2db      	uxtb	r3, r3
 801324e:	f003 0303 	and.w	r3, r3, #3
 8013252:	2b00      	cmp	r3, #0
 8013254:	d001      	beq.n	801325a <tcp_free_acked_segments+0xc6>
 8013256:	2301      	movs	r3, #1
 8013258:	e000      	b.n	801325c <tcp_free_acked_segments+0xc8>
 801325a:	2300      	movs	r3, #0
 801325c:	442b      	add	r3, r5
 801325e:	18e2      	adds	r2, r4, r3
 8013260:	4b09      	ldr	r3, [pc, #36]	; (8013288 <tcp_free_acked_segments+0xf4>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013266:	2b00      	cmp	r3, #0
 8013268:	dd9c      	ble.n	80131a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801326a:	68bb      	ldr	r3, [r7, #8]
}
 801326c:	4618      	mov	r0, r3
 801326e:	3718      	adds	r7, #24
 8013270:	46bd      	mov	sp, r7
 8013272:	bdb0      	pop	{r4, r5, r7, pc}
 8013274:	0801c6a0 	.word	0x0801c6a0
 8013278:	0801c988 	.word	0x0801c988
 801327c:	0801c6ec 	.word	0x0801c6ec
 8013280:	20008038 	.word	0x20008038
 8013284:	0801c9b0 	.word	0x0801c9b0
 8013288:	20008034 	.word	0x20008034

0801328c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801328c:	b5b0      	push	{r4, r5, r7, lr}
 801328e:	b094      	sub	sp, #80	; 0x50
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013294:	2300      	movs	r3, #0
 8013296:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <tcp_receive+0x20>
 801329e:	4b91      	ldr	r3, [pc, #580]	; (80134e4 <tcp_receive+0x258>)
 80132a0:	f240 427b 	movw	r2, #1147	; 0x47b
 80132a4:	4990      	ldr	r1, [pc, #576]	; (80134e8 <tcp_receive+0x25c>)
 80132a6:	4891      	ldr	r0, [pc, #580]	; (80134ec <tcp_receive+0x260>)
 80132a8:	f005 fdd0 	bl	8018e4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	7d1b      	ldrb	r3, [r3, #20]
 80132b0:	2b03      	cmp	r3, #3
 80132b2:	d806      	bhi.n	80132c2 <tcp_receive+0x36>
 80132b4:	4b8b      	ldr	r3, [pc, #556]	; (80134e4 <tcp_receive+0x258>)
 80132b6:	f240 427c 	movw	r2, #1148	; 0x47c
 80132ba:	498d      	ldr	r1, [pc, #564]	; (80134f0 <tcp_receive+0x264>)
 80132bc:	488b      	ldr	r0, [pc, #556]	; (80134ec <tcp_receive+0x260>)
 80132be:	f005 fdc5 	bl	8018e4c <iprintf>

  if (flags & TCP_ACK) {
 80132c2:	4b8c      	ldr	r3, [pc, #560]	; (80134f4 <tcp_receive+0x268>)
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	f003 0310 	and.w	r3, r3, #16
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f000 8264 	beq.w	8013798 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132d6:	461a      	mov	r2, r3
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132dc:	4413      	add	r3, r2
 80132de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80132e4:	4b84      	ldr	r3, [pc, #528]	; (80134f8 <tcp_receive+0x26c>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	1ad3      	subs	r3, r2, r3
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	db1b      	blt.n	8013326 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80132f2:	4b81      	ldr	r3, [pc, #516]	; (80134f8 <tcp_receive+0x26c>)
 80132f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d106      	bne.n	8013308 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80132fe:	4b7f      	ldr	r3, [pc, #508]	; (80134fc <tcp_receive+0x270>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	1ad3      	subs	r3, r2, r3
 8013304:	2b00      	cmp	r3, #0
 8013306:	db0e      	blt.n	8013326 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801330c:	4b7b      	ldr	r3, [pc, #492]	; (80134fc <tcp_receive+0x270>)
 801330e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013310:	429a      	cmp	r2, r3
 8013312:	d125      	bne.n	8013360 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013314:	4b7a      	ldr	r3, [pc, #488]	; (8013500 <tcp_receive+0x274>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	89db      	ldrh	r3, [r3, #14]
 801331a:	b29a      	uxth	r2, r3
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013322:	429a      	cmp	r2, r3
 8013324:	d91c      	bls.n	8013360 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013326:	4b76      	ldr	r3, [pc, #472]	; (8013500 <tcp_receive+0x274>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	89db      	ldrh	r3, [r3, #14]
 801332c:	b29a      	uxth	r2, r3
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013340:	429a      	cmp	r2, r3
 8013342:	d205      	bcs.n	8013350 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013350:	4b69      	ldr	r3, [pc, #420]	; (80134f8 <tcp_receive+0x26c>)
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013358:	4b68      	ldr	r3, [pc, #416]	; (80134fc <tcp_receive+0x270>)
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013360:	4b66      	ldr	r3, [pc, #408]	; (80134fc <tcp_receive+0x270>)
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013368:	1ad3      	subs	r3, r2, r3
 801336a:	2b00      	cmp	r3, #0
 801336c:	dc58      	bgt.n	8013420 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801336e:	4b65      	ldr	r3, [pc, #404]	; (8013504 <tcp_receive+0x278>)
 8013370:	881b      	ldrh	r3, [r3, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d14b      	bne.n	801340e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013380:	4413      	add	r3, r2
 8013382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013384:	429a      	cmp	r2, r3
 8013386:	d142      	bne.n	801340e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801338e:	2b00      	cmp	r3, #0
 8013390:	db3d      	blt.n	801340e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013396:	4b59      	ldr	r3, [pc, #356]	; (80134fc <tcp_receive+0x270>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	429a      	cmp	r2, r3
 801339c:	d137      	bne.n	801340e <tcp_receive+0x182>
              found_dupack = 1;
 801339e:	2301      	movs	r3, #1
 80133a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80133a8:	2bff      	cmp	r3, #255	; 0xff
 80133aa:	d007      	beq.n	80133bc <tcp_receive+0x130>
                ++pcb->dupacks;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80133b2:	3301      	adds	r3, #1
 80133b4:	b2da      	uxtb	r2, r3
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80133c2:	2b03      	cmp	r3, #3
 80133c4:	d91b      	bls.n	80133fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133d0:	4413      	add	r3, r2
 80133d2:	b29a      	uxth	r2, r3
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80133da:	429a      	cmp	r2, r3
 80133dc:	d30a      	bcc.n	80133f4 <tcp_receive+0x168>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133e8:	4413      	add	r3, r2
 80133ea:	b29a      	uxth	r2, r3
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80133f2:	e004      	b.n	80133fe <tcp_receive+0x172>
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013404:	2b02      	cmp	r3, #2
 8013406:	d902      	bls.n	801340e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f001 feed 	bl	80151e8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013410:	2b00      	cmp	r3, #0
 8013412:	f040 8161 	bne.w	80136d8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2200      	movs	r2, #0
 801341a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801341e:	e15b      	b.n	80136d8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013420:	4b36      	ldr	r3, [pc, #216]	; (80134fc <tcp_receive+0x270>)
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013428:	1ad3      	subs	r3, r2, r3
 801342a:	3b01      	subs	r3, #1
 801342c:	2b00      	cmp	r3, #0
 801342e:	f2c0 814e 	blt.w	80136ce <tcp_receive+0x442>
 8013432:	4b32      	ldr	r3, [pc, #200]	; (80134fc <tcp_receive+0x270>)
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801343a:	1ad3      	subs	r3, r2, r3
 801343c:	2b00      	cmp	r3, #0
 801343e:	f300 8146 	bgt.w	80136ce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	8b5b      	ldrh	r3, [r3, #26]
 8013446:	f003 0304 	and.w	r3, r3, #4
 801344a:	2b00      	cmp	r3, #0
 801344c:	d010      	beq.n	8013470 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	8b5b      	ldrh	r3, [r3, #26]
 8013452:	f023 0304 	bic.w	r3, r3, #4
 8013456:	b29a      	uxth	r2, r3
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2200      	movs	r2, #0
 801346c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2200      	movs	r2, #0
 8013474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801347e:	10db      	asrs	r3, r3, #3
 8013480:	b21b      	sxth	r3, r3
 8013482:	b29a      	uxth	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801348a:	b29b      	uxth	r3, r3
 801348c:	4413      	add	r3, r2
 801348e:	b29b      	uxth	r3, r3
 8013490:	b21a      	sxth	r2, r3
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013498:	4b18      	ldr	r3, [pc, #96]	; (80134fc <tcp_receive+0x270>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	b29a      	uxth	r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	1ad3      	subs	r3, r2, r3
 80134a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80134b0:	4b12      	ldr	r3, [pc, #72]	; (80134fc <tcp_receive+0x270>)
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	7d1b      	ldrb	r3, [r3, #20]
 80134bc:	2b03      	cmp	r3, #3
 80134be:	f240 8097 	bls.w	80135f0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d245      	bcs.n	801355e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	8b5b      	ldrh	r3, [r3, #26]
 80134d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d014      	beq.n	8013508 <tcp_receive+0x27c>
 80134de:	2301      	movs	r3, #1
 80134e0:	e013      	b.n	801350a <tcp_receive+0x27e>
 80134e2:	bf00      	nop
 80134e4:	0801c6a0 	.word	0x0801c6a0
 80134e8:	0801c9d0 	.word	0x0801c9d0
 80134ec:	0801c6ec 	.word	0x0801c6ec
 80134f0:	0801c9ec 	.word	0x0801c9ec
 80134f4:	2000803c 	.word	0x2000803c
 80134f8:	20008030 	.word	0x20008030
 80134fc:	20008034 	.word	0x20008034
 8013500:	20008020 	.word	0x20008020
 8013504:	2000803a 	.word	0x2000803a
 8013508:	2302      	movs	r3, #2
 801350a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801350e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013512:	b29a      	uxth	r2, r3
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013518:	fb12 f303 	smulbb	r3, r2, r3
 801351c:	b29b      	uxth	r3, r3
 801351e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013520:	4293      	cmp	r3, r2
 8013522:	bf28      	it	cs
 8013524:	4613      	movcs	r3, r2
 8013526:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801352e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013530:	4413      	add	r3, r2
 8013532:	b29a      	uxth	r2, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801353a:	429a      	cmp	r2, r3
 801353c:	d309      	bcc.n	8013552 <tcp_receive+0x2c6>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013544:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013546:	4413      	add	r3, r2
 8013548:	b29a      	uxth	r2, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013550:	e04e      	b.n	80135f0 <tcp_receive+0x364>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013558:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801355c:	e048      	b.n	80135f0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013564:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013566:	4413      	add	r3, r2
 8013568:	b29a      	uxth	r2, r3
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013570:	429a      	cmp	r2, r3
 8013572:	d309      	bcc.n	8013588 <tcp_receive+0x2fc>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801357a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801357c:	4413      	add	r3, r2
 801357e:	b29a      	uxth	r2, r3
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013586:	e004      	b.n	8013592 <tcp_receive+0x306>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801358e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801359e:	429a      	cmp	r2, r3
 80135a0:	d326      	bcc.n	80135f0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135ae:	1ad3      	subs	r3, r2, r3
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135c2:	4413      	add	r3, r2
 80135c4:	b29a      	uxth	r2, r3
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d30a      	bcc.n	80135e6 <tcp_receive+0x35a>
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135da:	4413      	add	r3, r2
 80135dc:	b29a      	uxth	r2, r3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135e4:	e004      	b.n	80135f0 <tcp_receive+0x364>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135f8:	4a98      	ldr	r2, [pc, #608]	; (801385c <tcp_receive+0x5d0>)
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7ff fdca 	bl	8013194 <tcp_free_acked_segments>
 8013600:	4602      	mov	r2, r0
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801360e:	4a94      	ldr	r2, [pc, #592]	; (8013860 <tcp_receive+0x5d4>)
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f7ff fdbf 	bl	8013194 <tcp_free_acked_segments>
 8013616:	4602      	mov	r2, r0
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013620:	2b00      	cmp	r3, #0
 8013622:	d104      	bne.n	801362e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801362a:	861a      	strh	r2, [r3, #48]	; 0x30
 801362c:	e002      	b.n	8013634 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2200      	movs	r2, #0
 8013632:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2200      	movs	r2, #0
 8013638:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801363e:	2b00      	cmp	r3, #0
 8013640:	d103      	bne.n	801364a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2200      	movs	r2, #0
 8013646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013650:	4b84      	ldr	r3, [pc, #528]	; (8013864 <tcp_receive+0x5d8>)
 8013652:	881b      	ldrh	r3, [r3, #0]
 8013654:	4413      	add	r3, r2
 8013656:	b29a      	uxth	r2, r3
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	8b5b      	ldrh	r3, [r3, #26]
 8013662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013666:	2b00      	cmp	r3, #0
 8013668:	d035      	beq.n	80136d6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801366e:	2b00      	cmp	r3, #0
 8013670:	d118      	bne.n	80136a4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013676:	2b00      	cmp	r3, #0
 8013678:	d00c      	beq.n	8013694 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013682:	68db      	ldr	r3, [r3, #12]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	4618      	mov	r0, r3
 8013688:	f7fb f93f 	bl	800e90a <lwip_htonl>
 801368c:	4603      	mov	r3, r0
 801368e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013690:	2b00      	cmp	r3, #0
 8013692:	dc20      	bgt.n	80136d6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	8b5b      	ldrh	r3, [r3, #26]
 8013698:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801369c:	b29a      	uxth	r2, r3
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80136a2:	e018      	b.n	80136d6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fb f92a 	bl	800e90a <lwip_htonl>
 80136b6:	4603      	mov	r3, r0
 80136b8:	1ae3      	subs	r3, r4, r3
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	dc0b      	bgt.n	80136d6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	8b5b      	ldrh	r3, [r3, #26]
 80136c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80136cc:	e003      	b.n	80136d6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f001 ff76 	bl	80155c0 <tcp_send_empty_ack>
 80136d4:	e000      	b.n	80136d8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80136d6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d05b      	beq.n	8013798 <tcp_receive+0x50c>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136e4:	4b60      	ldr	r3, [pc, #384]	; (8013868 <tcp_receive+0x5dc>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	da54      	bge.n	8013798 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80136ee:	4b5f      	ldr	r3, [pc, #380]	; (801386c <tcp_receive+0x5e0>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	1ad3      	subs	r3, r2, r3
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013702:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801370c:	10db      	asrs	r3, r3, #3
 801370e:	b21b      	sxth	r3, r3
 8013710:	b29b      	uxth	r3, r3
 8013712:	1ad3      	subs	r3, r2, r3
 8013714:	b29b      	uxth	r3, r3
 8013716:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013720:	b29a      	uxth	r2, r3
 8013722:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013726:	4413      	add	r3, r2
 8013728:	b29b      	uxth	r3, r3
 801372a:	b21a      	sxth	r2, r3
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013730:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013734:	2b00      	cmp	r3, #0
 8013736:	da05      	bge.n	8013744 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801373c:	425b      	negs	r3, r3
 801373e:	b29b      	uxth	r3, r3
 8013740:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013744:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801374e:	109b      	asrs	r3, r3, #2
 8013750:	b21b      	sxth	r3, r3
 8013752:	b29b      	uxth	r3, r3
 8013754:	1ad3      	subs	r3, r2, r3
 8013756:	b29b      	uxth	r3, r3
 8013758:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013762:	b29a      	uxth	r2, r3
 8013764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013768:	4413      	add	r3, r2
 801376a:	b29b      	uxth	r3, r3
 801376c:	b21a      	sxth	r2, r3
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013778:	10db      	asrs	r3, r3, #3
 801377a:	b21b      	sxth	r3, r3
 801377c:	b29a      	uxth	r2, r3
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013784:	b29b      	uxth	r3, r3
 8013786:	4413      	add	r3, r2
 8013788:	b29b      	uxth	r3, r3
 801378a:	b21a      	sxth	r2, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2200      	movs	r2, #0
 8013796:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013798:	4b35      	ldr	r3, [pc, #212]	; (8013870 <tcp_receive+0x5e4>)
 801379a:	881b      	ldrh	r3, [r3, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	f000 84e2 	beq.w	8014166 <tcp_receive+0xeda>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	7d1b      	ldrb	r3, [r3, #20]
 80137a6:	2b06      	cmp	r3, #6
 80137a8:	f200 84dd 	bhi.w	8014166 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137b0:	4b30      	ldr	r3, [pc, #192]	; (8013874 <tcp_receive+0x5e8>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	1ad3      	subs	r3, r2, r3
 80137b6:	3b01      	subs	r3, #1
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	f2c0 808f 	blt.w	80138dc <tcp_receive+0x650>
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137c2:	4b2b      	ldr	r3, [pc, #172]	; (8013870 <tcp_receive+0x5e4>)
 80137c4:	881b      	ldrh	r3, [r3, #0]
 80137c6:	4619      	mov	r1, r3
 80137c8:	4b2a      	ldr	r3, [pc, #168]	; (8013874 <tcp_receive+0x5e8>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	440b      	add	r3, r1
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	3301      	adds	r3, #1
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	f300 8082 	bgt.w	80138dc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80137d8:	4b27      	ldr	r3, [pc, #156]	; (8013878 <tcp_receive+0x5ec>)
 80137da:	685b      	ldr	r3, [r3, #4]
 80137dc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137e2:	4b24      	ldr	r3, [pc, #144]	; (8013874 <tcp_receive+0x5e8>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	1ad3      	subs	r3, r2, r3
 80137e8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80137ea:	4b23      	ldr	r3, [pc, #140]	; (8013878 <tcp_receive+0x5ec>)
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <tcp_receive+0x574>
 80137f2:	4b22      	ldr	r3, [pc, #136]	; (801387c <tcp_receive+0x5f0>)
 80137f4:	f240 5294 	movw	r2, #1428	; 0x594
 80137f8:	4921      	ldr	r1, [pc, #132]	; (8013880 <tcp_receive+0x5f4>)
 80137fa:	4822      	ldr	r0, [pc, #136]	; (8013884 <tcp_receive+0x5f8>)
 80137fc:	f005 fb26 	bl	8018e4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013802:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013806:	4293      	cmp	r3, r2
 8013808:	d906      	bls.n	8013818 <tcp_receive+0x58c>
 801380a:	4b1c      	ldr	r3, [pc, #112]	; (801387c <tcp_receive+0x5f0>)
 801380c:	f240 5295 	movw	r2, #1429	; 0x595
 8013810:	491d      	ldr	r1, [pc, #116]	; (8013888 <tcp_receive+0x5fc>)
 8013812:	481c      	ldr	r0, [pc, #112]	; (8013884 <tcp_receive+0x5f8>)
 8013814:	f005 fb1a 	bl	8018e4c <iprintf>
      off = (u16_t)off32;
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801381e:	4b16      	ldr	r3, [pc, #88]	; (8013878 <tcp_receive+0x5ec>)
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	891b      	ldrh	r3, [r3, #8]
 8013824:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013828:	429a      	cmp	r2, r3
 801382a:	d906      	bls.n	801383a <tcp_receive+0x5ae>
 801382c:	4b13      	ldr	r3, [pc, #76]	; (801387c <tcp_receive+0x5f0>)
 801382e:	f240 5297 	movw	r2, #1431	; 0x597
 8013832:	4916      	ldr	r1, [pc, #88]	; (801388c <tcp_receive+0x600>)
 8013834:	4813      	ldr	r0, [pc, #76]	; (8013884 <tcp_receive+0x5f8>)
 8013836:	f005 fb09 	bl	8018e4c <iprintf>
      inseg.len -= off;
 801383a:	4b0f      	ldr	r3, [pc, #60]	; (8013878 <tcp_receive+0x5ec>)
 801383c:	891a      	ldrh	r2, [r3, #8]
 801383e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013842:	1ad3      	subs	r3, r2, r3
 8013844:	b29a      	uxth	r2, r3
 8013846:	4b0c      	ldr	r3, [pc, #48]	; (8013878 <tcp_receive+0x5ec>)
 8013848:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801384a:	4b0b      	ldr	r3, [pc, #44]	; (8013878 <tcp_receive+0x5ec>)
 801384c:	685b      	ldr	r3, [r3, #4]
 801384e:	891a      	ldrh	r2, [r3, #8]
 8013850:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013854:	1ad3      	subs	r3, r2, r3
 8013856:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013858:	e02a      	b.n	80138b0 <tcp_receive+0x624>
 801385a:	bf00      	nop
 801385c:	0801ca08 	.word	0x0801ca08
 8013860:	0801ca10 	.word	0x0801ca10
 8013864:	20008038 	.word	0x20008038
 8013868:	20008034 	.word	0x20008034
 801386c:	20007ff8 	.word	0x20007ff8
 8013870:	2000803a 	.word	0x2000803a
 8013874:	20008030 	.word	0x20008030
 8013878:	20008010 	.word	0x20008010
 801387c:	0801c6a0 	.word	0x0801c6a0
 8013880:	0801ca18 	.word	0x0801ca18
 8013884:	0801c6ec 	.word	0x0801c6ec
 8013888:	0801ca28 	.word	0x0801ca28
 801388c:	0801ca38 	.word	0x0801ca38
        off -= p->len;
 8013890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013892:	895b      	ldrh	r3, [r3, #10]
 8013894:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013898:	1ad3      	subs	r3, r2, r3
 801389a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801389e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80138a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80138a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138a6:	2200      	movs	r2, #0
 80138a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80138aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80138b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138b2:	895b      	ldrh	r3, [r3, #10]
 80138b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d8e9      	bhi.n	8013890 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80138bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138c0:	4619      	mov	r1, r3
 80138c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80138c4:	f7fc fb7c 	bl	800ffc0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138cc:	4a91      	ldr	r2, [pc, #580]	; (8013b14 <tcp_receive+0x888>)
 80138ce:	6013      	str	r3, [r2, #0]
 80138d0:	4b91      	ldr	r3, [pc, #580]	; (8013b18 <tcp_receive+0x88c>)
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	4a8f      	ldr	r2, [pc, #572]	; (8013b14 <tcp_receive+0x888>)
 80138d6:	6812      	ldr	r2, [r2, #0]
 80138d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80138da:	e00d      	b.n	80138f8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80138dc:	4b8d      	ldr	r3, [pc, #564]	; (8013b14 <tcp_receive+0x888>)
 80138de:	681a      	ldr	r2, [r3, #0]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e4:	1ad3      	subs	r3, r2, r3
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	da06      	bge.n	80138f8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	8b5b      	ldrh	r3, [r3, #26]
 80138ee:	f043 0302 	orr.w	r3, r3, #2
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80138f8:	4b86      	ldr	r3, [pc, #536]	; (8013b14 <tcp_receive+0x888>)
 80138fa:	681a      	ldr	r2, [r3, #0]
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013900:	1ad3      	subs	r3, r2, r3
 8013902:	2b00      	cmp	r3, #0
 8013904:	f2c0 842a 	blt.w	801415c <tcp_receive+0xed0>
 8013908:	4b82      	ldr	r3, [pc, #520]	; (8013b14 <tcp_receive+0x888>)
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013910:	6879      	ldr	r1, [r7, #4]
 8013912:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013914:	440b      	add	r3, r1
 8013916:	1ad3      	subs	r3, r2, r3
 8013918:	3301      	adds	r3, #1
 801391a:	2b00      	cmp	r3, #0
 801391c:	f300 841e 	bgt.w	801415c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013924:	4b7b      	ldr	r3, [pc, #492]	; (8013b14 <tcp_receive+0x888>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	429a      	cmp	r2, r3
 801392a:	f040 829a 	bne.w	8013e62 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801392e:	4b7a      	ldr	r3, [pc, #488]	; (8013b18 <tcp_receive+0x88c>)
 8013930:	891c      	ldrh	r4, [r3, #8]
 8013932:	4b79      	ldr	r3, [pc, #484]	; (8013b18 <tcp_receive+0x88c>)
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	899b      	ldrh	r3, [r3, #12]
 8013938:	b29b      	uxth	r3, r3
 801393a:	4618      	mov	r0, r3
 801393c:	f7fa ffd0 	bl	800e8e0 <lwip_htons>
 8013940:	4603      	mov	r3, r0
 8013942:	b2db      	uxtb	r3, r3
 8013944:	f003 0303 	and.w	r3, r3, #3
 8013948:	2b00      	cmp	r3, #0
 801394a:	d001      	beq.n	8013950 <tcp_receive+0x6c4>
 801394c:	2301      	movs	r3, #1
 801394e:	e000      	b.n	8013952 <tcp_receive+0x6c6>
 8013950:	2300      	movs	r3, #0
 8013952:	4423      	add	r3, r4
 8013954:	b29a      	uxth	r2, r3
 8013956:	4b71      	ldr	r3, [pc, #452]	; (8013b1c <tcp_receive+0x890>)
 8013958:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801395e:	4b6f      	ldr	r3, [pc, #444]	; (8013b1c <tcp_receive+0x890>)
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	429a      	cmp	r2, r3
 8013964:	d275      	bcs.n	8013a52 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013966:	4b6c      	ldr	r3, [pc, #432]	; (8013b18 <tcp_receive+0x88c>)
 8013968:	68db      	ldr	r3, [r3, #12]
 801396a:	899b      	ldrh	r3, [r3, #12]
 801396c:	b29b      	uxth	r3, r3
 801396e:	4618      	mov	r0, r3
 8013970:	f7fa ffb6 	bl	800e8e0 <lwip_htons>
 8013974:	4603      	mov	r3, r0
 8013976:	b2db      	uxtb	r3, r3
 8013978:	f003 0301 	and.w	r3, r3, #1
 801397c:	2b00      	cmp	r3, #0
 801397e:	d01f      	beq.n	80139c0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013980:	4b65      	ldr	r3, [pc, #404]	; (8013b18 <tcp_receive+0x88c>)
 8013982:	68db      	ldr	r3, [r3, #12]
 8013984:	899b      	ldrh	r3, [r3, #12]
 8013986:	b29b      	uxth	r3, r3
 8013988:	b21b      	sxth	r3, r3
 801398a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801398e:	b21c      	sxth	r4, r3
 8013990:	4b61      	ldr	r3, [pc, #388]	; (8013b18 <tcp_receive+0x88c>)
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	899b      	ldrh	r3, [r3, #12]
 8013996:	b29b      	uxth	r3, r3
 8013998:	4618      	mov	r0, r3
 801399a:	f7fa ffa1 	bl	800e8e0 <lwip_htons>
 801399e:	4603      	mov	r3, r0
 80139a0:	b2db      	uxtb	r3, r3
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fa ff98 	bl	800e8e0 <lwip_htons>
 80139b0:	4603      	mov	r3, r0
 80139b2:	b21b      	sxth	r3, r3
 80139b4:	4323      	orrs	r3, r4
 80139b6:	b21a      	sxth	r2, r3
 80139b8:	4b57      	ldr	r3, [pc, #348]	; (8013b18 <tcp_receive+0x88c>)
 80139ba:	68db      	ldr	r3, [r3, #12]
 80139bc:	b292      	uxth	r2, r2
 80139be:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80139c4:	4b54      	ldr	r3, [pc, #336]	; (8013b18 <tcp_receive+0x88c>)
 80139c6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80139c8:	4b53      	ldr	r3, [pc, #332]	; (8013b18 <tcp_receive+0x88c>)
 80139ca:	68db      	ldr	r3, [r3, #12]
 80139cc:	899b      	ldrh	r3, [r3, #12]
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7fa ff85 	bl	800e8e0 <lwip_htons>
 80139d6:	4603      	mov	r3, r0
 80139d8:	b2db      	uxtb	r3, r3
 80139da:	f003 0302 	and.w	r3, r3, #2
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d005      	beq.n	80139ee <tcp_receive+0x762>
            inseg.len -= 1;
 80139e2:	4b4d      	ldr	r3, [pc, #308]	; (8013b18 <tcp_receive+0x88c>)
 80139e4:	891b      	ldrh	r3, [r3, #8]
 80139e6:	3b01      	subs	r3, #1
 80139e8:	b29a      	uxth	r2, r3
 80139ea:	4b4b      	ldr	r3, [pc, #300]	; (8013b18 <tcp_receive+0x88c>)
 80139ec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80139ee:	4b4a      	ldr	r3, [pc, #296]	; (8013b18 <tcp_receive+0x88c>)
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	4a49      	ldr	r2, [pc, #292]	; (8013b18 <tcp_receive+0x88c>)
 80139f4:	8912      	ldrh	r2, [r2, #8]
 80139f6:	4611      	mov	r1, r2
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fc f9e1 	bl	800fdc0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80139fe:	4b46      	ldr	r3, [pc, #280]	; (8013b18 <tcp_receive+0x88c>)
 8013a00:	891c      	ldrh	r4, [r3, #8]
 8013a02:	4b45      	ldr	r3, [pc, #276]	; (8013b18 <tcp_receive+0x88c>)
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	899b      	ldrh	r3, [r3, #12]
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fa ff68 	bl	800e8e0 <lwip_htons>
 8013a10:	4603      	mov	r3, r0
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	f003 0303 	and.w	r3, r3, #3
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d001      	beq.n	8013a20 <tcp_receive+0x794>
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e000      	b.n	8013a22 <tcp_receive+0x796>
 8013a20:	2300      	movs	r3, #0
 8013a22:	4423      	add	r3, r4
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	4b3d      	ldr	r3, [pc, #244]	; (8013b1c <tcp_receive+0x890>)
 8013a28:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013a2a:	4b3c      	ldr	r3, [pc, #240]	; (8013b1c <tcp_receive+0x890>)
 8013a2c:	881b      	ldrh	r3, [r3, #0]
 8013a2e:	461a      	mov	r2, r3
 8013a30:	4b38      	ldr	r3, [pc, #224]	; (8013b14 <tcp_receive+0x888>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	441a      	add	r2, r3
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a3a:	6879      	ldr	r1, [r7, #4]
 8013a3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013a3e:	440b      	add	r3, r1
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d006      	beq.n	8013a52 <tcp_receive+0x7c6>
 8013a44:	4b36      	ldr	r3, [pc, #216]	; (8013b20 <tcp_receive+0x894>)
 8013a46:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013a4a:	4936      	ldr	r1, [pc, #216]	; (8013b24 <tcp_receive+0x898>)
 8013a4c:	4836      	ldr	r0, [pc, #216]	; (8013b28 <tcp_receive+0x89c>)
 8013a4e:	f005 f9fd 	bl	8018e4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f000 80e7 	beq.w	8013c2a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013a5c:	4b2e      	ldr	r3, [pc, #184]	; (8013b18 <tcp_receive+0x88c>)
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	899b      	ldrh	r3, [r3, #12]
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7fa ff3b 	bl	800e8e0 <lwip_htons>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	f003 0301 	and.w	r3, r3, #1
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d010      	beq.n	8013a98 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013a76:	e00a      	b.n	8013a8e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a7c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	f7fd fd92 	bl	80115b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d1f0      	bne.n	8013a78 <tcp_receive+0x7ec>
 8013a96:	e0c8      	b.n	8013c2a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013a9e:	e052      	b.n	8013b46 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aa2:	68db      	ldr	r3, [r3, #12]
 8013aa4:	899b      	ldrh	r3, [r3, #12]
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7fa ff19 	bl	800e8e0 <lwip_htons>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	b2db      	uxtb	r3, r3
 8013ab2:	f003 0301 	and.w	r3, r3, #1
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d03d      	beq.n	8013b36 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013aba:	4b17      	ldr	r3, [pc, #92]	; (8013b18 <tcp_receive+0x88c>)
 8013abc:	68db      	ldr	r3, [r3, #12]
 8013abe:	899b      	ldrh	r3, [r3, #12]
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7fa ff0c 	bl	800e8e0 <lwip_htons>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d130      	bne.n	8013b36 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013ad4:	4b10      	ldr	r3, [pc, #64]	; (8013b18 <tcp_receive+0x88c>)
 8013ad6:	68db      	ldr	r3, [r3, #12]
 8013ad8:	899b      	ldrh	r3, [r3, #12]
 8013ada:	b29c      	uxth	r4, r3
 8013adc:	2001      	movs	r0, #1
 8013ade:	f7fa feff 	bl	800e8e0 <lwip_htons>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	461a      	mov	r2, r3
 8013ae6:	4b0c      	ldr	r3, [pc, #48]	; (8013b18 <tcp_receive+0x88c>)
 8013ae8:	68db      	ldr	r3, [r3, #12]
 8013aea:	4322      	orrs	r2, r4
 8013aec:	b292      	uxth	r2, r2
 8013aee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013af0:	4b09      	ldr	r3, [pc, #36]	; (8013b18 <tcp_receive+0x88c>)
 8013af2:	891c      	ldrh	r4, [r3, #8]
 8013af4:	4b08      	ldr	r3, [pc, #32]	; (8013b18 <tcp_receive+0x88c>)
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	899b      	ldrh	r3, [r3, #12]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fa feef 	bl	800e8e0 <lwip_htons>
 8013b02:	4603      	mov	r3, r0
 8013b04:	b2db      	uxtb	r3, r3
 8013b06:	f003 0303 	and.w	r3, r3, #3
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d00e      	beq.n	8013b2c <tcp_receive+0x8a0>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	e00d      	b.n	8013b2e <tcp_receive+0x8a2>
 8013b12:	bf00      	nop
 8013b14:	20008030 	.word	0x20008030
 8013b18:	20008010 	.word	0x20008010
 8013b1c:	2000803a 	.word	0x2000803a
 8013b20:	0801c6a0 	.word	0x0801c6a0
 8013b24:	0801ca48 	.word	0x0801ca48
 8013b28:	0801c6ec 	.word	0x0801c6ec
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	4423      	add	r3, r4
 8013b30:	b29a      	uxth	r2, r3
 8013b32:	4b98      	ldr	r3, [pc, #608]	; (8013d94 <tcp_receive+0xb08>)
 8013b34:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b38:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013b40:	6938      	ldr	r0, [r7, #16]
 8013b42:	f7fd fd36 	bl	80115b2 <tcp_seg_free>
            while (next &&
 8013b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00e      	beq.n	8013b6a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013b4c:	4b91      	ldr	r3, [pc, #580]	; (8013d94 <tcp_receive+0xb08>)
 8013b4e:	881b      	ldrh	r3, [r3, #0]
 8013b50:	461a      	mov	r2, r3
 8013b52:	4b91      	ldr	r3, [pc, #580]	; (8013d98 <tcp_receive+0xb0c>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	441a      	add	r2, r3
 8013b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b60:	8909      	ldrh	r1, [r1, #8]
 8013b62:	440b      	add	r3, r1
 8013b64:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	da9a      	bge.n	8013aa0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d059      	beq.n	8013c24 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013b70:	4b88      	ldr	r3, [pc, #544]	; (8013d94 <tcp_receive+0xb08>)
 8013b72:	881b      	ldrh	r3, [r3, #0]
 8013b74:	461a      	mov	r2, r3
 8013b76:	4b88      	ldr	r3, [pc, #544]	; (8013d98 <tcp_receive+0xb0c>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	441a      	add	r2, r3
 8013b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	dd4d      	ble.n	8013c24 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	4b81      	ldr	r3, [pc, #516]	; (8013d98 <tcp_receive+0xb0c>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	b29b      	uxth	r3, r3
 8013b96:	1ad3      	subs	r3, r2, r3
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	4b80      	ldr	r3, [pc, #512]	; (8013d9c <tcp_receive+0xb10>)
 8013b9c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013b9e:	4b7f      	ldr	r3, [pc, #508]	; (8013d9c <tcp_receive+0xb10>)
 8013ba0:	68db      	ldr	r3, [r3, #12]
 8013ba2:	899b      	ldrh	r3, [r3, #12]
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7fa fe9a 	bl	800e8e0 <lwip_htons>
 8013bac:	4603      	mov	r3, r0
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	f003 0302 	and.w	r3, r3, #2
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d005      	beq.n	8013bc4 <tcp_receive+0x938>
                inseg.len -= 1;
 8013bb8:	4b78      	ldr	r3, [pc, #480]	; (8013d9c <tcp_receive+0xb10>)
 8013bba:	891b      	ldrh	r3, [r3, #8]
 8013bbc:	3b01      	subs	r3, #1
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	4b76      	ldr	r3, [pc, #472]	; (8013d9c <tcp_receive+0xb10>)
 8013bc2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013bc4:	4b75      	ldr	r3, [pc, #468]	; (8013d9c <tcp_receive+0xb10>)
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	4a74      	ldr	r2, [pc, #464]	; (8013d9c <tcp_receive+0xb10>)
 8013bca:	8912      	ldrh	r2, [r2, #8]
 8013bcc:	4611      	mov	r1, r2
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7fc f8f6 	bl	800fdc0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013bd4:	4b71      	ldr	r3, [pc, #452]	; (8013d9c <tcp_receive+0xb10>)
 8013bd6:	891c      	ldrh	r4, [r3, #8]
 8013bd8:	4b70      	ldr	r3, [pc, #448]	; (8013d9c <tcp_receive+0xb10>)
 8013bda:	68db      	ldr	r3, [r3, #12]
 8013bdc:	899b      	ldrh	r3, [r3, #12]
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7fa fe7d 	bl	800e8e0 <lwip_htons>
 8013be6:	4603      	mov	r3, r0
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	f003 0303 	and.w	r3, r3, #3
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d001      	beq.n	8013bf6 <tcp_receive+0x96a>
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	e000      	b.n	8013bf8 <tcp_receive+0x96c>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	4423      	add	r3, r4
 8013bfa:	b29a      	uxth	r2, r3
 8013bfc:	4b65      	ldr	r3, [pc, #404]	; (8013d94 <tcp_receive+0xb08>)
 8013bfe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013c00:	4b64      	ldr	r3, [pc, #400]	; (8013d94 <tcp_receive+0xb08>)
 8013c02:	881b      	ldrh	r3, [r3, #0]
 8013c04:	461a      	mov	r2, r3
 8013c06:	4b64      	ldr	r3, [pc, #400]	; (8013d98 <tcp_receive+0xb0c>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	441a      	add	r2, r3
 8013c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c0e:	68db      	ldr	r3, [r3, #12]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d006      	beq.n	8013c24 <tcp_receive+0x998>
 8013c16:	4b62      	ldr	r3, [pc, #392]	; (8013da0 <tcp_receive+0xb14>)
 8013c18:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013c1c:	4961      	ldr	r1, [pc, #388]	; (8013da4 <tcp_receive+0xb18>)
 8013c1e:	4862      	ldr	r0, [pc, #392]	; (8013da8 <tcp_receive+0xb1c>)
 8013c20:	f005 f914 	bl	8018e4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c28:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013c2a:	4b5a      	ldr	r3, [pc, #360]	; (8013d94 <tcp_receive+0xb08>)
 8013c2c:	881b      	ldrh	r3, [r3, #0]
 8013c2e:	461a      	mov	r2, r3
 8013c30:	4b59      	ldr	r3, [pc, #356]	; (8013d98 <tcp_receive+0xb0c>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	441a      	add	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c3e:	4b55      	ldr	r3, [pc, #340]	; (8013d94 <tcp_receive+0xb08>)
 8013c40:	881b      	ldrh	r3, [r3, #0]
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d206      	bcs.n	8013c54 <tcp_receive+0x9c8>
 8013c46:	4b56      	ldr	r3, [pc, #344]	; (8013da0 <tcp_receive+0xb14>)
 8013c48:	f240 6207 	movw	r2, #1543	; 0x607
 8013c4c:	4957      	ldr	r1, [pc, #348]	; (8013dac <tcp_receive+0xb20>)
 8013c4e:	4856      	ldr	r0, [pc, #344]	; (8013da8 <tcp_receive+0xb1c>)
 8013c50:	f005 f8fc 	bl	8018e4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c58:	4b4e      	ldr	r3, [pc, #312]	; (8013d94 <tcp_receive+0xb08>)
 8013c5a:	881b      	ldrh	r3, [r3, #0]
 8013c5c:	1ad3      	subs	r3, r2, r3
 8013c5e:	b29a      	uxth	r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f7fc ffc5 	bl	8010bf4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013c6a:	4b4c      	ldr	r3, [pc, #304]	; (8013d9c <tcp_receive+0xb10>)
 8013c6c:	685b      	ldr	r3, [r3, #4]
 8013c6e:	891b      	ldrh	r3, [r3, #8]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d006      	beq.n	8013c82 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013c74:	4b49      	ldr	r3, [pc, #292]	; (8013d9c <tcp_receive+0xb10>)
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	4a4d      	ldr	r2, [pc, #308]	; (8013db0 <tcp_receive+0xb24>)
 8013c7a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013c7c:	4b47      	ldr	r3, [pc, #284]	; (8013d9c <tcp_receive+0xb10>)
 8013c7e:	2200      	movs	r2, #0
 8013c80:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c82:	4b46      	ldr	r3, [pc, #280]	; (8013d9c <tcp_receive+0xb10>)
 8013c84:	68db      	ldr	r3, [r3, #12]
 8013c86:	899b      	ldrh	r3, [r3, #12]
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7fa fe28 	bl	800e8e0 <lwip_htons>
 8013c90:	4603      	mov	r3, r0
 8013c92:	b2db      	uxtb	r3, r3
 8013c94:	f003 0301 	and.w	r3, r3, #1
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	f000 80b8 	beq.w	8013e0e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013c9e:	4b45      	ldr	r3, [pc, #276]	; (8013db4 <tcp_receive+0xb28>)
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	f043 0320 	orr.w	r3, r3, #32
 8013ca6:	b2da      	uxtb	r2, r3
 8013ca8:	4b42      	ldr	r3, [pc, #264]	; (8013db4 <tcp_receive+0xb28>)
 8013caa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013cac:	e0af      	b.n	8013e0e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cb2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cb8:	68db      	ldr	r3, [r3, #12]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	4a36      	ldr	r2, [pc, #216]	; (8013d98 <tcp_receive+0xb0c>)
 8013cbe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	891b      	ldrh	r3, [r3, #8]
 8013cc4:	461c      	mov	r4, r3
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	68db      	ldr	r3, [r3, #12]
 8013cca:	899b      	ldrh	r3, [r3, #12]
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7fa fe06 	bl	800e8e0 <lwip_htons>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	f003 0303 	and.w	r3, r3, #3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d001      	beq.n	8013ce4 <tcp_receive+0xa58>
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	e000      	b.n	8013ce6 <tcp_receive+0xa5a>
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	191a      	adds	r2, r3, r4
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cec:	441a      	add	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cf6:	461c      	mov	r4, r3
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	891b      	ldrh	r3, [r3, #8]
 8013cfc:	461d      	mov	r5, r3
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	68db      	ldr	r3, [r3, #12]
 8013d02:	899b      	ldrh	r3, [r3, #12]
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7fa fdea 	bl	800e8e0 <lwip_htons>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	f003 0303 	and.w	r3, r3, #3
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d001      	beq.n	8013d1c <tcp_receive+0xa90>
 8013d18:	2301      	movs	r3, #1
 8013d1a:	e000      	b.n	8013d1e <tcp_receive+0xa92>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	442b      	add	r3, r5
 8013d20:	429c      	cmp	r4, r3
 8013d22:	d206      	bcs.n	8013d32 <tcp_receive+0xaa6>
 8013d24:	4b1e      	ldr	r3, [pc, #120]	; (8013da0 <tcp_receive+0xb14>)
 8013d26:	f240 622b 	movw	r2, #1579	; 0x62b
 8013d2a:	4923      	ldr	r1, [pc, #140]	; (8013db8 <tcp_receive+0xb2c>)
 8013d2c:	481e      	ldr	r0, [pc, #120]	; (8013da8 <tcp_receive+0xb1c>)
 8013d2e:	f005 f88d 	bl	8018e4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	891b      	ldrh	r3, [r3, #8]
 8013d36:	461c      	mov	r4, r3
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	899b      	ldrh	r3, [r3, #12]
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fa fdcd 	bl	800e8e0 <lwip_htons>
 8013d46:	4603      	mov	r3, r0
 8013d48:	b2db      	uxtb	r3, r3
 8013d4a:	f003 0303 	and.w	r3, r3, #3
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d001      	beq.n	8013d56 <tcp_receive+0xaca>
 8013d52:	2301      	movs	r3, #1
 8013d54:	e000      	b.n	8013d58 <tcp_receive+0xacc>
 8013d56:	2300      	movs	r3, #0
 8013d58:	1919      	adds	r1, r3, r4
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013d5e:	b28b      	uxth	r3, r1
 8013d60:	1ad3      	subs	r3, r2, r3
 8013d62:	b29a      	uxth	r2, r3
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7fc ff43 	bl	8010bf4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	685b      	ldr	r3, [r3, #4]
 8013d72:	891b      	ldrh	r3, [r3, #8]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d028      	beq.n	8013dca <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013d78:	4b0d      	ldr	r3, [pc, #52]	; (8013db0 <tcp_receive+0xb24>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d01d      	beq.n	8013dbc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8013d80:	4b0b      	ldr	r3, [pc, #44]	; (8013db0 <tcp_receive+0xb24>)
 8013d82:	681a      	ldr	r2, [r3, #0]
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	4619      	mov	r1, r3
 8013d8a:	4610      	mov	r0, r2
 8013d8c:	f7fc fa60 	bl	8010250 <pbuf_cat>
 8013d90:	e018      	b.n	8013dc4 <tcp_receive+0xb38>
 8013d92:	bf00      	nop
 8013d94:	2000803a 	.word	0x2000803a
 8013d98:	20008030 	.word	0x20008030
 8013d9c:	20008010 	.word	0x20008010
 8013da0:	0801c6a0 	.word	0x0801c6a0
 8013da4:	0801ca80 	.word	0x0801ca80
 8013da8:	0801c6ec 	.word	0x0801c6ec
 8013dac:	0801cabc 	.word	0x0801cabc
 8013db0:	20008040 	.word	0x20008040
 8013db4:	2000803d 	.word	0x2000803d
 8013db8:	0801cadc 	.word	0x0801cadc
            } else {
              recv_data = cseg->p;
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	4a70      	ldr	r2, [pc, #448]	; (8013f84 <tcp_receive+0xcf8>)
 8013dc2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	68db      	ldr	r3, [r3, #12]
 8013dce:	899b      	ldrh	r3, [r3, #12]
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fa fd84 	bl	800e8e0 <lwip_htons>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	f003 0301 	and.w	r3, r3, #1
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d00d      	beq.n	8013e00 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013de4:	4b68      	ldr	r3, [pc, #416]	; (8013f88 <tcp_receive+0xcfc>)
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	f043 0320 	orr.w	r3, r3, #32
 8013dec:	b2da      	uxtb	r2, r3
 8013dee:	4b66      	ldr	r3, [pc, #408]	; (8013f88 <tcp_receive+0xcfc>)
 8013df0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	7d1b      	ldrb	r3, [r3, #20]
 8013df6:	2b04      	cmp	r3, #4
 8013df8:	d102      	bne.n	8013e00 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2207      	movs	r2, #7
 8013dfe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	681a      	ldr	r2, [r3, #0]
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013e08:	68b8      	ldr	r0, [r7, #8]
 8013e0a:	f7fd fbd2 	bl	80115b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d008      	beq.n	8013e28 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	685a      	ldr	r2, [r3, #4]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013e22:	429a      	cmp	r2, r3
 8013e24:	f43f af43 	beq.w	8013cae <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	8b5b      	ldrh	r3, [r3, #26]
 8013e2c:	f003 0301 	and.w	r3, r3, #1
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d00e      	beq.n	8013e52 <tcp_receive+0xbc6>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	8b5b      	ldrh	r3, [r3, #26]
 8013e38:	f023 0301 	bic.w	r3, r3, #1
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	835a      	strh	r2, [r3, #26]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	8b5b      	ldrh	r3, [r3, #26]
 8013e46:	f043 0302 	orr.w	r3, r3, #2
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013e50:	e188      	b.n	8014164 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	8b5b      	ldrh	r3, [r3, #26]
 8013e56:	f043 0301 	orr.w	r3, r3, #1
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013e60:	e180      	b.n	8014164 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d106      	bne.n	8013e78 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013e6a:	4848      	ldr	r0, [pc, #288]	; (8013f8c <tcp_receive+0xd00>)
 8013e6c:	f7fd fbba 	bl	80115e4 <tcp_seg_copy>
 8013e70:	4602      	mov	r2, r0
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	675a      	str	r2, [r3, #116]	; 0x74
 8013e76:	e16d      	b.n	8014154 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8013e82:	e157      	b.n	8014134 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8013e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e86:	68db      	ldr	r3, [r3, #12]
 8013e88:	685a      	ldr	r2, [r3, #4]
 8013e8a:	4b41      	ldr	r3, [pc, #260]	; (8013f90 <tcp_receive+0xd04>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d11d      	bne.n	8013ece <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013e92:	4b3e      	ldr	r3, [pc, #248]	; (8013f8c <tcp_receive+0xd00>)
 8013e94:	891a      	ldrh	r2, [r3, #8]
 8013e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e98:	891b      	ldrh	r3, [r3, #8]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	f240 814f 	bls.w	801413e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013ea0:	483a      	ldr	r0, [pc, #232]	; (8013f8c <tcp_receive+0xd00>)
 8013ea2:	f7fd fb9f 	bl	80115e4 <tcp_seg_copy>
 8013ea6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f000 8149 	beq.w	8014142 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8013eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d003      	beq.n	8013ebe <tcp_receive+0xc32>
                    prev->next = cseg;
 8013eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb8:	697a      	ldr	r2, [r7, #20]
 8013eba:	601a      	str	r2, [r3, #0]
 8013ebc:	e002      	b.n	8013ec4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	697a      	ldr	r2, [r7, #20]
 8013ec2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013ec4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ec6:	6978      	ldr	r0, [r7, #20]
 8013ec8:	f7ff f8dc 	bl	8013084 <tcp_oos_insert_segment>
                }
                break;
 8013ecc:	e139      	b.n	8014142 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d117      	bne.n	8013f04 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013ed4:	4b2e      	ldr	r3, [pc, #184]	; (8013f90 <tcp_receive+0xd04>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eda:	68db      	ldr	r3, [r3, #12]
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	1ad3      	subs	r3, r2, r3
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	da57      	bge.n	8013f94 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013ee4:	4829      	ldr	r0, [pc, #164]	; (8013f8c <tcp_receive+0xd00>)
 8013ee6:	f7fd fb7d 	bl	80115e4 <tcp_seg_copy>
 8013eea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013eec:	69bb      	ldr	r3, [r7, #24]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	f000 8129 	beq.w	8014146 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	69ba      	ldr	r2, [r7, #24]
 8013ef8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013efc:	69b8      	ldr	r0, [r7, #24]
 8013efe:	f7ff f8c1 	bl	8013084 <tcp_oos_insert_segment>
                  }
                  break;
 8013f02:	e120      	b.n	8014146 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013f04:	4b22      	ldr	r3, [pc, #136]	; (8013f90 <tcp_receive+0xd04>)
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	1ad3      	subs	r3, r2, r3
 8013f10:	3b01      	subs	r3, #1
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	db3e      	blt.n	8013f94 <tcp_receive+0xd08>
 8013f16:	4b1e      	ldr	r3, [pc, #120]	; (8013f90 <tcp_receive+0xd04>)
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	1ad3      	subs	r3, r2, r3
 8013f22:	3301      	adds	r3, #1
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	dc35      	bgt.n	8013f94 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013f28:	4818      	ldr	r0, [pc, #96]	; (8013f8c <tcp_receive+0xd00>)
 8013f2a:	f7fd fb5b 	bl	80115e4 <tcp_seg_copy>
 8013f2e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	f000 8109 	beq.w	801414a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	685b      	ldr	r3, [r3, #4]
 8013f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f40:	8912      	ldrh	r2, [r2, #8]
 8013f42:	441a      	add	r2, r3
 8013f44:	4b12      	ldr	r3, [pc, #72]	; (8013f90 <tcp_receive+0xd04>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	dd12      	ble.n	8013f74 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013f4e:	4b10      	ldr	r3, [pc, #64]	; (8013f90 <tcp_receive+0xd04>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	b29a      	uxth	r2, r3
 8013f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f56:	68db      	ldr	r3, [r3, #12]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	1ad3      	subs	r3, r2, r3
 8013f5e:	b29a      	uxth	r2, r3
 8013f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f62:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f66:	685a      	ldr	r2, [r3, #4]
 8013f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f6a:	891b      	ldrh	r3, [r3, #8]
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	4610      	mov	r0, r2
 8013f70:	f7fb ff26 	bl	800fdc0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f76:	69fa      	ldr	r2, [r7, #28]
 8013f78:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013f7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f7c:	69f8      	ldr	r0, [r7, #28]
 8013f7e:	f7ff f881 	bl	8013084 <tcp_oos_insert_segment>
                  }
                  break;
 8013f82:	e0e2      	b.n	801414a <tcp_receive+0xebe>
 8013f84:	20008040 	.word	0x20008040
 8013f88:	2000803d 	.word	0x2000803d
 8013f8c:	20008010 	.word	0x20008010
 8013f90:	20008030 	.word	0x20008030
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f96:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	f040 80c6 	bne.w	801412e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013fa2:	4b80      	ldr	r3, [pc, #512]	; (80141a4 <tcp_receive+0xf18>)
 8013fa4:	681a      	ldr	r2, [r3, #0]
 8013fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa8:	68db      	ldr	r3, [r3, #12]
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	f340 80bd 	ble.w	801412e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	899b      	ldrh	r3, [r3, #12]
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7fa fc8f 	bl	800e8e0 <lwip_htons>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	b2db      	uxtb	r3, r3
 8013fc6:	f003 0301 	and.w	r3, r3, #1
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	f040 80bf 	bne.w	801414e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013fd0:	4875      	ldr	r0, [pc, #468]	; (80141a8 <tcp_receive+0xf1c>)
 8013fd2:	f7fd fb07 	bl	80115e4 <tcp_seg_copy>
 8013fd6:	4602      	mov	r2, r0
 8013fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fda:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	f000 80b6 	beq.w	8014152 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013fee:	8912      	ldrh	r2, [r2, #8]
 8013ff0:	441a      	add	r2, r3
 8013ff2:	4b6c      	ldr	r3, [pc, #432]	; (80141a4 <tcp_receive+0xf18>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	1ad3      	subs	r3, r2, r3
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	dd12      	ble.n	8014022 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013ffc:	4b69      	ldr	r3, [pc, #420]	; (80141a4 <tcp_receive+0xf18>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	b29a      	uxth	r2, r3
 8014002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014004:	68db      	ldr	r3, [r3, #12]
 8014006:	685b      	ldr	r3, [r3, #4]
 8014008:	b29b      	uxth	r3, r3
 801400a:	1ad3      	subs	r3, r2, r3
 801400c:	b29a      	uxth	r2, r3
 801400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014010:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014014:	685a      	ldr	r2, [r3, #4]
 8014016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014018:	891b      	ldrh	r3, [r3, #8]
 801401a:	4619      	mov	r1, r3
 801401c:	4610      	mov	r0, r2
 801401e:	f7fb fecf 	bl	800fdc0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014022:	4b62      	ldr	r3, [pc, #392]	; (80141ac <tcp_receive+0xf20>)
 8014024:	881b      	ldrh	r3, [r3, #0]
 8014026:	461a      	mov	r2, r3
 8014028:	4b5e      	ldr	r3, [pc, #376]	; (80141a4 <tcp_receive+0xf18>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	441a      	add	r2, r3
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014032:	6879      	ldr	r1, [r7, #4]
 8014034:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014036:	440b      	add	r3, r1
 8014038:	1ad3      	subs	r3, r2, r3
 801403a:	2b00      	cmp	r3, #0
 801403c:	f340 8089 	ble.w	8014152 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	899b      	ldrh	r3, [r3, #12]
 8014048:	b29b      	uxth	r3, r3
 801404a:	4618      	mov	r0, r3
 801404c:	f7fa fc48 	bl	800e8e0 <lwip_htons>
 8014050:	4603      	mov	r3, r0
 8014052:	b2db      	uxtb	r3, r3
 8014054:	f003 0301 	and.w	r3, r3, #1
 8014058:	2b00      	cmp	r3, #0
 801405a:	d022      	beq.n	80140a2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	899b      	ldrh	r3, [r3, #12]
 8014064:	b29b      	uxth	r3, r3
 8014066:	b21b      	sxth	r3, r3
 8014068:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801406c:	b21c      	sxth	r4, r3
 801406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	68db      	ldr	r3, [r3, #12]
 8014074:	899b      	ldrh	r3, [r3, #12]
 8014076:	b29b      	uxth	r3, r3
 8014078:	4618      	mov	r0, r3
 801407a:	f7fa fc31 	bl	800e8e0 <lwip_htons>
 801407e:	4603      	mov	r3, r0
 8014080:	b2db      	uxtb	r3, r3
 8014082:	b29b      	uxth	r3, r3
 8014084:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014088:	b29b      	uxth	r3, r3
 801408a:	4618      	mov	r0, r3
 801408c:	f7fa fc28 	bl	800e8e0 <lwip_htons>
 8014090:	4603      	mov	r3, r0
 8014092:	b21b      	sxth	r3, r3
 8014094:	4323      	orrs	r3, r4
 8014096:	b21a      	sxth	r2, r3
 8014098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	b292      	uxth	r2, r2
 80140a0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a6:	b29a      	uxth	r2, r3
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80140ac:	4413      	add	r3, r2
 80140ae:	b299      	uxth	r1, r3
 80140b0:	4b3c      	ldr	r3, [pc, #240]	; (80141a4 <tcp_receive+0xf18>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	1a8a      	subs	r2, r1, r2
 80140bc:	b292      	uxth	r2, r2
 80140be:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80140c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	685a      	ldr	r2, [r3, #4]
 80140c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	891b      	ldrh	r3, [r3, #8]
 80140cc:	4619      	mov	r1, r3
 80140ce:	4610      	mov	r0, r2
 80140d0:	f7fb fe76 	bl	800fdc0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80140d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	891c      	ldrh	r4, [r3, #8]
 80140da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	899b      	ldrh	r3, [r3, #12]
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7fa fbfb 	bl	800e8e0 <lwip_htons>
 80140ea:	4603      	mov	r3, r0
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	f003 0303 	and.w	r3, r3, #3
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d001      	beq.n	80140fa <tcp_receive+0xe6e>
 80140f6:	2301      	movs	r3, #1
 80140f8:	e000      	b.n	80140fc <tcp_receive+0xe70>
 80140fa:	2300      	movs	r3, #0
 80140fc:	4423      	add	r3, r4
 80140fe:	b29a      	uxth	r2, r3
 8014100:	4b2a      	ldr	r3, [pc, #168]	; (80141ac <tcp_receive+0xf20>)
 8014102:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014104:	4b29      	ldr	r3, [pc, #164]	; (80141ac <tcp_receive+0xf20>)
 8014106:	881b      	ldrh	r3, [r3, #0]
 8014108:	461a      	mov	r2, r3
 801410a:	4b26      	ldr	r3, [pc, #152]	; (80141a4 <tcp_receive+0xf18>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	441a      	add	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014114:	6879      	ldr	r1, [r7, #4]
 8014116:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014118:	440b      	add	r3, r1
 801411a:	429a      	cmp	r2, r3
 801411c:	d019      	beq.n	8014152 <tcp_receive+0xec6>
 801411e:	4b24      	ldr	r3, [pc, #144]	; (80141b0 <tcp_receive+0xf24>)
 8014120:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014124:	4923      	ldr	r1, [pc, #140]	; (80141b4 <tcp_receive+0xf28>)
 8014126:	4824      	ldr	r0, [pc, #144]	; (80141b8 <tcp_receive+0xf2c>)
 8014128:	f004 fe90 	bl	8018e4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801412c:	e011      	b.n	8014152 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	63bb      	str	r3, [r7, #56]	; 0x38
 8014134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014136:	2b00      	cmp	r3, #0
 8014138:	f47f aea4 	bne.w	8013e84 <tcp_receive+0xbf8>
 801413c:	e00a      	b.n	8014154 <tcp_receive+0xec8>
                break;
 801413e:	bf00      	nop
 8014140:	e008      	b.n	8014154 <tcp_receive+0xec8>
                break;
 8014142:	bf00      	nop
 8014144:	e006      	b.n	8014154 <tcp_receive+0xec8>
                  break;
 8014146:	bf00      	nop
 8014148:	e004      	b.n	8014154 <tcp_receive+0xec8>
                  break;
 801414a:	bf00      	nop
 801414c:	e002      	b.n	8014154 <tcp_receive+0xec8>
                  break;
 801414e:	bf00      	nop
 8014150:	e000      	b.n	8014154 <tcp_receive+0xec8>
                break;
 8014152:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f001 fa33 	bl	80155c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801415a:	e003      	b.n	8014164 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f001 fa2f 	bl	80155c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014162:	e01a      	b.n	801419a <tcp_receive+0xf0e>
 8014164:	e019      	b.n	801419a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014166:	4b0f      	ldr	r3, [pc, #60]	; (80141a4 <tcp_receive+0xf18>)
 8014168:	681a      	ldr	r2, [r3, #0]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801416e:	1ad3      	subs	r3, r2, r3
 8014170:	2b00      	cmp	r3, #0
 8014172:	db0a      	blt.n	801418a <tcp_receive+0xefe>
 8014174:	4b0b      	ldr	r3, [pc, #44]	; (80141a4 <tcp_receive+0xf18>)
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801417c:	6879      	ldr	r1, [r7, #4]
 801417e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014180:	440b      	add	r3, r1
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	3301      	adds	r3, #1
 8014186:	2b00      	cmp	r3, #0
 8014188:	dd07      	ble.n	801419a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	8b5b      	ldrh	r3, [r3, #26]
 801418e:	f043 0302 	orr.w	r3, r3, #2
 8014192:	b29a      	uxth	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014198:	e7ff      	b.n	801419a <tcp_receive+0xf0e>
 801419a:	bf00      	nop
 801419c:	3750      	adds	r7, #80	; 0x50
 801419e:	46bd      	mov	sp, r7
 80141a0:	bdb0      	pop	{r4, r5, r7, pc}
 80141a2:	bf00      	nop
 80141a4:	20008030 	.word	0x20008030
 80141a8:	20008010 	.word	0x20008010
 80141ac:	2000803a 	.word	0x2000803a
 80141b0:	0801c6a0 	.word	0x0801c6a0
 80141b4:	0801ca48 	.word	0x0801ca48
 80141b8:	0801c6ec 	.word	0x0801c6ec

080141bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80141bc:	b480      	push	{r7}
 80141be:	b083      	sub	sp, #12
 80141c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80141c2:	4b15      	ldr	r3, [pc, #84]	; (8014218 <tcp_get_next_optbyte+0x5c>)
 80141c4:	881b      	ldrh	r3, [r3, #0]
 80141c6:	1c5a      	adds	r2, r3, #1
 80141c8:	b291      	uxth	r1, r2
 80141ca:	4a13      	ldr	r2, [pc, #76]	; (8014218 <tcp_get_next_optbyte+0x5c>)
 80141cc:	8011      	strh	r1, [r2, #0]
 80141ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80141d0:	4b12      	ldr	r3, [pc, #72]	; (801421c <tcp_get_next_optbyte+0x60>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d004      	beq.n	80141e2 <tcp_get_next_optbyte+0x26>
 80141d8:	4b11      	ldr	r3, [pc, #68]	; (8014220 <tcp_get_next_optbyte+0x64>)
 80141da:	881b      	ldrh	r3, [r3, #0]
 80141dc:	88fa      	ldrh	r2, [r7, #6]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d208      	bcs.n	80141f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80141e2:	4b10      	ldr	r3, [pc, #64]	; (8014224 <tcp_get_next_optbyte+0x68>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	3314      	adds	r3, #20
 80141e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80141ea:	88fb      	ldrh	r3, [r7, #6]
 80141ec:	683a      	ldr	r2, [r7, #0]
 80141ee:	4413      	add	r3, r2
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	e00b      	b.n	801420c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80141f4:	88fb      	ldrh	r3, [r7, #6]
 80141f6:	b2da      	uxtb	r2, r3
 80141f8:	4b09      	ldr	r3, [pc, #36]	; (8014220 <tcp_get_next_optbyte+0x64>)
 80141fa:	881b      	ldrh	r3, [r3, #0]
 80141fc:	b2db      	uxtb	r3, r3
 80141fe:	1ad3      	subs	r3, r2, r3
 8014200:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014202:	4b06      	ldr	r3, [pc, #24]	; (801421c <tcp_get_next_optbyte+0x60>)
 8014204:	681a      	ldr	r2, [r3, #0]
 8014206:	797b      	ldrb	r3, [r7, #5]
 8014208:	4413      	add	r3, r2
 801420a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801420c:	4618      	mov	r0, r3
 801420e:	370c      	adds	r7, #12
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr
 8014218:	2000802c 	.word	0x2000802c
 801421c:	20008028 	.word	0x20008028
 8014220:	20008026 	.word	0x20008026
 8014224:	20008020 	.word	0x20008020

08014228 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b084      	sub	sp, #16
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d106      	bne.n	8014244 <tcp_parseopt+0x1c>
 8014236:	4b32      	ldr	r3, [pc, #200]	; (8014300 <tcp_parseopt+0xd8>)
 8014238:	f240 727d 	movw	r2, #1917	; 0x77d
 801423c:	4931      	ldr	r1, [pc, #196]	; (8014304 <tcp_parseopt+0xdc>)
 801423e:	4832      	ldr	r0, [pc, #200]	; (8014308 <tcp_parseopt+0xe0>)
 8014240:	f004 fe04 	bl	8018e4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014244:	4b31      	ldr	r3, [pc, #196]	; (801430c <tcp_parseopt+0xe4>)
 8014246:	881b      	ldrh	r3, [r3, #0]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d055      	beq.n	80142f8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801424c:	4b30      	ldr	r3, [pc, #192]	; (8014310 <tcp_parseopt+0xe8>)
 801424e:	2200      	movs	r2, #0
 8014250:	801a      	strh	r2, [r3, #0]
 8014252:	e045      	b.n	80142e0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014254:	f7ff ffb2 	bl	80141bc <tcp_get_next_optbyte>
 8014258:	4603      	mov	r3, r0
 801425a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801425c:	7bfb      	ldrb	r3, [r7, #15]
 801425e:	2b02      	cmp	r3, #2
 8014260:	d006      	beq.n	8014270 <tcp_parseopt+0x48>
 8014262:	2b02      	cmp	r3, #2
 8014264:	dc2b      	bgt.n	80142be <tcp_parseopt+0x96>
 8014266:	2b00      	cmp	r3, #0
 8014268:	d041      	beq.n	80142ee <tcp_parseopt+0xc6>
 801426a:	2b01      	cmp	r3, #1
 801426c:	d127      	bne.n	80142be <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801426e:	e037      	b.n	80142e0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014270:	f7ff ffa4 	bl	80141bc <tcp_get_next_optbyte>
 8014274:	4603      	mov	r3, r0
 8014276:	2b04      	cmp	r3, #4
 8014278:	d13b      	bne.n	80142f2 <tcp_parseopt+0xca>
 801427a:	4b25      	ldr	r3, [pc, #148]	; (8014310 <tcp_parseopt+0xe8>)
 801427c:	881b      	ldrh	r3, [r3, #0]
 801427e:	3301      	adds	r3, #1
 8014280:	4a22      	ldr	r2, [pc, #136]	; (801430c <tcp_parseopt+0xe4>)
 8014282:	8812      	ldrh	r2, [r2, #0]
 8014284:	4293      	cmp	r3, r2
 8014286:	da34      	bge.n	80142f2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014288:	f7ff ff98 	bl	80141bc <tcp_get_next_optbyte>
 801428c:	4603      	mov	r3, r0
 801428e:	b29b      	uxth	r3, r3
 8014290:	021b      	lsls	r3, r3, #8
 8014292:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014294:	f7ff ff92 	bl	80141bc <tcp_get_next_optbyte>
 8014298:	4603      	mov	r3, r0
 801429a:	b29a      	uxth	r2, r3
 801429c:	89bb      	ldrh	r3, [r7, #12]
 801429e:	4313      	orrs	r3, r2
 80142a0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80142a2:	89bb      	ldrh	r3, [r7, #12]
 80142a4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80142a8:	d804      	bhi.n	80142b4 <tcp_parseopt+0x8c>
 80142aa:	89bb      	ldrh	r3, [r7, #12]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d001      	beq.n	80142b4 <tcp_parseopt+0x8c>
 80142b0:	89ba      	ldrh	r2, [r7, #12]
 80142b2:	e001      	b.n	80142b8 <tcp_parseopt+0x90>
 80142b4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80142bc:	e010      	b.n	80142e0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80142be:	f7ff ff7d 	bl	80141bc <tcp_get_next_optbyte>
 80142c2:	4603      	mov	r3, r0
 80142c4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80142c6:	7afb      	ldrb	r3, [r7, #11]
 80142c8:	2b01      	cmp	r3, #1
 80142ca:	d914      	bls.n	80142f6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80142cc:	7afb      	ldrb	r3, [r7, #11]
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	4b0f      	ldr	r3, [pc, #60]	; (8014310 <tcp_parseopt+0xe8>)
 80142d2:	881b      	ldrh	r3, [r3, #0]
 80142d4:	4413      	add	r3, r2
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	3b02      	subs	r3, #2
 80142da:	b29a      	uxth	r2, r3
 80142dc:	4b0c      	ldr	r3, [pc, #48]	; (8014310 <tcp_parseopt+0xe8>)
 80142de:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80142e0:	4b0b      	ldr	r3, [pc, #44]	; (8014310 <tcp_parseopt+0xe8>)
 80142e2:	881a      	ldrh	r2, [r3, #0]
 80142e4:	4b09      	ldr	r3, [pc, #36]	; (801430c <tcp_parseopt+0xe4>)
 80142e6:	881b      	ldrh	r3, [r3, #0]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d3b3      	bcc.n	8014254 <tcp_parseopt+0x2c>
 80142ec:	e004      	b.n	80142f8 <tcp_parseopt+0xd0>
          return;
 80142ee:	bf00      	nop
 80142f0:	e002      	b.n	80142f8 <tcp_parseopt+0xd0>
            return;
 80142f2:	bf00      	nop
 80142f4:	e000      	b.n	80142f8 <tcp_parseopt+0xd0>
            return;
 80142f6:	bf00      	nop
      }
    }
  }
}
 80142f8:	3710      	adds	r7, #16
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	0801c6a0 	.word	0x0801c6a0
 8014304:	0801cb04 	.word	0x0801cb04
 8014308:	0801c6ec 	.word	0x0801c6ec
 801430c:	20008024 	.word	0x20008024
 8014310:	2000802c 	.word	0x2000802c

08014314 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014314:	b480      	push	{r7}
 8014316:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014318:	4b05      	ldr	r3, [pc, #20]	; (8014330 <tcp_trigger_input_pcb_close+0x1c>)
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	f043 0310 	orr.w	r3, r3, #16
 8014320:	b2da      	uxtb	r2, r3
 8014322:	4b03      	ldr	r3, [pc, #12]	; (8014330 <tcp_trigger_input_pcb_close+0x1c>)
 8014324:	701a      	strb	r2, [r3, #0]
}
 8014326:	bf00      	nop
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr
 8014330:	2000803d 	.word	0x2000803d

08014334 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b084      	sub	sp, #16
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00a      	beq.n	801435c <tcp_route+0x28>
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	7a1b      	ldrb	r3, [r3, #8]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d006      	beq.n	801435c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	7a1b      	ldrb	r3, [r3, #8]
 8014352:	4618      	mov	r0, r3
 8014354:	f7fb fb7a 	bl	800fa4c <netif_get_by_index>
 8014358:	4603      	mov	r3, r0
 801435a:	e003      	b.n	8014364 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f002 fe61 	bl	8017024 <ip4_route>
 8014362:	4603      	mov	r3, r0
  }
}
 8014364:	4618      	mov	r0, r3
 8014366:	3710      	adds	r7, #16
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801436c:	b590      	push	{r4, r7, lr}
 801436e:	b087      	sub	sp, #28
 8014370:	af00      	add	r7, sp, #0
 8014372:	60f8      	str	r0, [r7, #12]
 8014374:	60b9      	str	r1, [r7, #8]
 8014376:	603b      	str	r3, [r7, #0]
 8014378:	4613      	mov	r3, r2
 801437a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d105      	bne.n	801438e <tcp_create_segment+0x22>
 8014382:	4b44      	ldr	r3, [pc, #272]	; (8014494 <tcp_create_segment+0x128>)
 8014384:	22a3      	movs	r2, #163	; 0xa3
 8014386:	4944      	ldr	r1, [pc, #272]	; (8014498 <tcp_create_segment+0x12c>)
 8014388:	4844      	ldr	r0, [pc, #272]	; (801449c <tcp_create_segment+0x130>)
 801438a:	f004 fd5f 	bl	8018e4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d105      	bne.n	80143a0 <tcp_create_segment+0x34>
 8014394:	4b3f      	ldr	r3, [pc, #252]	; (8014494 <tcp_create_segment+0x128>)
 8014396:	22a4      	movs	r2, #164	; 0xa4
 8014398:	4941      	ldr	r1, [pc, #260]	; (80144a0 <tcp_create_segment+0x134>)
 801439a:	4840      	ldr	r0, [pc, #256]	; (801449c <tcp_create_segment+0x130>)
 801439c:	f004 fd56 	bl	8018e4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80143a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	b2db      	uxtb	r3, r3
 80143a8:	f003 0304 	and.w	r3, r3, #4
 80143ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80143ae:	2003      	movs	r0, #3
 80143b0:	f7fa ffc6 	bl	800f340 <memp_malloc>
 80143b4:	6138      	str	r0, [r7, #16]
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d104      	bne.n	80143c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80143bc:	68b8      	ldr	r0, [r7, #8]
 80143be:	f7fb fe85 	bl	80100cc <pbuf_free>
    return NULL;
 80143c2:	2300      	movs	r3, #0
 80143c4:	e061      	b.n	801448a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80143cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	2200      	movs	r2, #0
 80143d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	68ba      	ldr	r2, [r7, #8]
 80143d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	891a      	ldrh	r2, [r3, #8]
 80143de:	7dfb      	ldrb	r3, [r7, #23]
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d205      	bcs.n	80143f2 <tcp_create_segment+0x86>
 80143e6:	4b2b      	ldr	r3, [pc, #172]	; (8014494 <tcp_create_segment+0x128>)
 80143e8:	22b0      	movs	r2, #176	; 0xb0
 80143ea:	492e      	ldr	r1, [pc, #184]	; (80144a4 <tcp_create_segment+0x138>)
 80143ec:	482b      	ldr	r0, [pc, #172]	; (801449c <tcp_create_segment+0x130>)
 80143ee:	f004 fd2d 	bl	8018e4c <iprintf>
  seg->len = p->tot_len - optlen;
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	891a      	ldrh	r2, [r3, #8]
 80143f6:	7dfb      	ldrb	r3, [r7, #23]
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	1ad3      	subs	r3, r2, r3
 80143fc:	b29a      	uxth	r2, r3
 80143fe:	693b      	ldr	r3, [r7, #16]
 8014400:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014402:	2114      	movs	r1, #20
 8014404:	68b8      	ldr	r0, [r7, #8]
 8014406:	f7fb fdcb 	bl	800ffa0 <pbuf_add_header>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	d004      	beq.n	801441a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014410:	6938      	ldr	r0, [r7, #16]
 8014412:	f7fd f8ce 	bl	80115b2 <tcp_seg_free>
    return NULL;
 8014416:	2300      	movs	r3, #0
 8014418:	e037      	b.n	801448a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	685a      	ldr	r2, [r3, #4]
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	8ada      	ldrh	r2, [r3, #22]
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	68dc      	ldr	r4, [r3, #12]
 801442c:	4610      	mov	r0, r2
 801442e:	f7fa fa57 	bl	800e8e0 <lwip_htons>
 8014432:	4603      	mov	r3, r0
 8014434:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	8b1a      	ldrh	r2, [r3, #24]
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	68dc      	ldr	r4, [r3, #12]
 801443e:	4610      	mov	r0, r2
 8014440:	f7fa fa4e 	bl	800e8e0 <lwip_htons>
 8014444:	4603      	mov	r3, r0
 8014446:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	68dc      	ldr	r4, [r3, #12]
 801444c:	6838      	ldr	r0, [r7, #0]
 801444e:	f7fa fa5c 	bl	800e90a <lwip_htonl>
 8014452:	4603      	mov	r3, r0
 8014454:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014456:	7dfb      	ldrb	r3, [r7, #23]
 8014458:	089b      	lsrs	r3, r3, #2
 801445a:	b2db      	uxtb	r3, r3
 801445c:	b29b      	uxth	r3, r3
 801445e:	3305      	adds	r3, #5
 8014460:	b29b      	uxth	r3, r3
 8014462:	031b      	lsls	r3, r3, #12
 8014464:	b29a      	uxth	r2, r3
 8014466:	79fb      	ldrb	r3, [r7, #7]
 8014468:	b29b      	uxth	r3, r3
 801446a:	4313      	orrs	r3, r2
 801446c:	b29a      	uxth	r2, r3
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	68dc      	ldr	r4, [r3, #12]
 8014472:	4610      	mov	r0, r2
 8014474:	f7fa fa34 	bl	800e8e0 <lwip_htons>
 8014478:	4603      	mov	r3, r0
 801447a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	68db      	ldr	r3, [r3, #12]
 8014480:	2200      	movs	r2, #0
 8014482:	749a      	strb	r2, [r3, #18]
 8014484:	2200      	movs	r2, #0
 8014486:	74da      	strb	r2, [r3, #19]
  return seg;
 8014488:	693b      	ldr	r3, [r7, #16]
}
 801448a:	4618      	mov	r0, r3
 801448c:	371c      	adds	r7, #28
 801448e:	46bd      	mov	sp, r7
 8014490:	bd90      	pop	{r4, r7, pc}
 8014492:	bf00      	nop
 8014494:	0801cb20 	.word	0x0801cb20
 8014498:	0801cb54 	.word	0x0801cb54
 801449c:	0801cb74 	.word	0x0801cb74
 80144a0:	0801cb9c 	.word	0x0801cb9c
 80144a4:	0801cbc0 	.word	0x0801cbc0

080144a8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80144a8:	b590      	push	{r4, r7, lr}
 80144aa:	b08b      	sub	sp, #44	; 0x2c
 80144ac:	af02      	add	r7, sp, #8
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	460b      	mov	r3, r1
 80144b2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80144b4:	2300      	movs	r3, #0
 80144b6:	61fb      	str	r3, [r7, #28]
 80144b8:	2300      	movs	r3, #0
 80144ba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80144bc:	2300      	movs	r3, #0
 80144be:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d106      	bne.n	80144d4 <tcp_split_unsent_seg+0x2c>
 80144c6:	4b95      	ldr	r3, [pc, #596]	; (801471c <tcp_split_unsent_seg+0x274>)
 80144c8:	f240 324b 	movw	r2, #843	; 0x34b
 80144cc:	4994      	ldr	r1, [pc, #592]	; (8014720 <tcp_split_unsent_seg+0x278>)
 80144ce:	4895      	ldr	r0, [pc, #596]	; (8014724 <tcp_split_unsent_seg+0x27c>)
 80144d0:	f004 fcbc 	bl	8018e4c <iprintf>

  useg = pcb->unsent;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144d8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d102      	bne.n	80144e6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80144e0:	f04f 33ff 	mov.w	r3, #4294967295
 80144e4:	e116      	b.n	8014714 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80144e6:	887b      	ldrh	r3, [r7, #2]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d109      	bne.n	8014500 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80144ec:	4b8b      	ldr	r3, [pc, #556]	; (801471c <tcp_split_unsent_seg+0x274>)
 80144ee:	f240 3253 	movw	r2, #851	; 0x353
 80144f2:	498d      	ldr	r1, [pc, #564]	; (8014728 <tcp_split_unsent_seg+0x280>)
 80144f4:	488b      	ldr	r0, [pc, #556]	; (8014724 <tcp_split_unsent_seg+0x27c>)
 80144f6:	f004 fca9 	bl	8018e4c <iprintf>
    return ERR_VAL;
 80144fa:	f06f 0305 	mvn.w	r3, #5
 80144fe:	e109      	b.n	8014714 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014500:	697b      	ldr	r3, [r7, #20]
 8014502:	891b      	ldrh	r3, [r3, #8]
 8014504:	887a      	ldrh	r2, [r7, #2]
 8014506:	429a      	cmp	r2, r3
 8014508:	d301      	bcc.n	801450e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801450a:	2300      	movs	r3, #0
 801450c:	e102      	b.n	8014714 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014512:	887a      	ldrh	r2, [r7, #2]
 8014514:	429a      	cmp	r2, r3
 8014516:	d906      	bls.n	8014526 <tcp_split_unsent_seg+0x7e>
 8014518:	4b80      	ldr	r3, [pc, #512]	; (801471c <tcp_split_unsent_seg+0x274>)
 801451a:	f240 325b 	movw	r2, #859	; 0x35b
 801451e:	4983      	ldr	r1, [pc, #524]	; (801472c <tcp_split_unsent_seg+0x284>)
 8014520:	4880      	ldr	r0, [pc, #512]	; (8014724 <tcp_split_unsent_seg+0x27c>)
 8014522:	f004 fc93 	bl	8018e4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	891b      	ldrh	r3, [r3, #8]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d106      	bne.n	801453c <tcp_split_unsent_seg+0x94>
 801452e:	4b7b      	ldr	r3, [pc, #492]	; (801471c <tcp_split_unsent_seg+0x274>)
 8014530:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014534:	497e      	ldr	r1, [pc, #504]	; (8014730 <tcp_split_unsent_seg+0x288>)
 8014536:	487b      	ldr	r0, [pc, #492]	; (8014724 <tcp_split_unsent_seg+0x27c>)
 8014538:	f004 fc88 	bl	8018e4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	7a9b      	ldrb	r3, [r3, #10]
 8014540:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014542:	7bfb      	ldrb	r3, [r7, #15]
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	b2db      	uxtb	r3, r3
 8014548:	f003 0304 	and.w	r3, r3, #4
 801454c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801454e:	697b      	ldr	r3, [r7, #20]
 8014550:	891a      	ldrh	r2, [r3, #8]
 8014552:	887b      	ldrh	r3, [r7, #2]
 8014554:	1ad3      	subs	r3, r2, r3
 8014556:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014558:	7bbb      	ldrb	r3, [r7, #14]
 801455a:	b29a      	uxth	r2, r3
 801455c:	89bb      	ldrh	r3, [r7, #12]
 801455e:	4413      	add	r3, r2
 8014560:	b29b      	uxth	r3, r3
 8014562:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014566:	4619      	mov	r1, r3
 8014568:	2036      	movs	r0, #54	; 0x36
 801456a:	f7fb facb 	bl	800fb04 <pbuf_alloc>
 801456e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014570:	693b      	ldr	r3, [r7, #16]
 8014572:	2b00      	cmp	r3, #0
 8014574:	f000 80b7 	beq.w	80146e6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	891a      	ldrh	r2, [r3, #8]
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	891b      	ldrh	r3, [r3, #8]
 8014582:	1ad3      	subs	r3, r2, r3
 8014584:	b29a      	uxth	r2, r3
 8014586:	887b      	ldrh	r3, [r7, #2]
 8014588:	4413      	add	r3, r2
 801458a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801458c:	697b      	ldr	r3, [r7, #20]
 801458e:	6858      	ldr	r0, [r3, #4]
 8014590:	693b      	ldr	r3, [r7, #16]
 8014592:	685a      	ldr	r2, [r3, #4]
 8014594:	7bbb      	ldrb	r3, [r7, #14]
 8014596:	18d1      	adds	r1, r2, r3
 8014598:	897b      	ldrh	r3, [r7, #10]
 801459a:	89ba      	ldrh	r2, [r7, #12]
 801459c:	f7fb ff80 	bl	80104a0 <pbuf_copy_partial>
 80145a0:	4603      	mov	r3, r0
 80145a2:	461a      	mov	r2, r3
 80145a4:	89bb      	ldrh	r3, [r7, #12]
 80145a6:	4293      	cmp	r3, r2
 80145a8:	f040 809f 	bne.w	80146ea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	899b      	ldrh	r3, [r3, #12]
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7fa f993 	bl	800e8e0 <lwip_htons>
 80145ba:	4603      	mov	r3, r0
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80145c2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80145c4:	2300      	movs	r3, #0
 80145c6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80145c8:	7efb      	ldrb	r3, [r7, #27]
 80145ca:	f003 0308 	and.w	r3, r3, #8
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d007      	beq.n	80145e2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80145d2:	7efb      	ldrb	r3, [r7, #27]
 80145d4:	f023 0308 	bic.w	r3, r3, #8
 80145d8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80145da:	7ebb      	ldrb	r3, [r7, #26]
 80145dc:	f043 0308 	orr.w	r3, r3, #8
 80145e0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80145e2:	7efb      	ldrb	r3, [r7, #27]
 80145e4:	f003 0301 	and.w	r3, r3, #1
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d007      	beq.n	80145fc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80145ec:	7efb      	ldrb	r3, [r7, #27]
 80145ee:	f023 0301 	bic.w	r3, r3, #1
 80145f2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80145f4:	7ebb      	ldrb	r3, [r7, #26]
 80145f6:	f043 0301 	orr.w	r3, r3, #1
 80145fa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	4618      	mov	r0, r3
 8014604:	f7fa f981 	bl	800e90a <lwip_htonl>
 8014608:	4602      	mov	r2, r0
 801460a:	887b      	ldrh	r3, [r7, #2]
 801460c:	18d1      	adds	r1, r2, r3
 801460e:	7eba      	ldrb	r2, [r7, #26]
 8014610:	7bfb      	ldrb	r3, [r7, #15]
 8014612:	9300      	str	r3, [sp, #0]
 8014614:	460b      	mov	r3, r1
 8014616:	6939      	ldr	r1, [r7, #16]
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f7ff fea7 	bl	801436c <tcp_create_segment>
 801461e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d063      	beq.n	80146ee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	4618      	mov	r0, r3
 801462c:	f7fb fdd6 	bl	80101dc <pbuf_clen>
 8014630:	4603      	mov	r3, r0
 8014632:	461a      	mov	r2, r3
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801463a:	1a9b      	subs	r3, r3, r2
 801463c:	b29a      	uxth	r2, r3
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	6858      	ldr	r0, [r3, #4]
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	685b      	ldr	r3, [r3, #4]
 801464c:	891a      	ldrh	r2, [r3, #8]
 801464e:	89bb      	ldrh	r3, [r7, #12]
 8014650:	1ad3      	subs	r3, r2, r3
 8014652:	b29b      	uxth	r3, r3
 8014654:	4619      	mov	r1, r3
 8014656:	f7fb fbb3 	bl	800fdc0 <pbuf_realloc>
  useg->len -= remainder;
 801465a:	697b      	ldr	r3, [r7, #20]
 801465c:	891a      	ldrh	r2, [r3, #8]
 801465e:	89bb      	ldrh	r3, [r7, #12]
 8014660:	1ad3      	subs	r3, r2, r3
 8014662:	b29a      	uxth	r2, r3
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	899b      	ldrh	r3, [r3, #12]
 801466e:	b29c      	uxth	r4, r3
 8014670:	7efb      	ldrb	r3, [r7, #27]
 8014672:	b29b      	uxth	r3, r3
 8014674:	4618      	mov	r0, r3
 8014676:	f7fa f933 	bl	800e8e0 <lwip_htons>
 801467a:	4603      	mov	r3, r0
 801467c:	461a      	mov	r2, r3
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	68db      	ldr	r3, [r3, #12]
 8014682:	4322      	orrs	r2, r4
 8014684:	b292      	uxth	r2, r2
 8014686:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	685b      	ldr	r3, [r3, #4]
 801468c:	4618      	mov	r0, r3
 801468e:	f7fb fda5 	bl	80101dc <pbuf_clen>
 8014692:	4603      	mov	r3, r0
 8014694:	461a      	mov	r2, r3
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801469c:	4413      	add	r3, r2
 801469e:	b29a      	uxth	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80146a6:	69fb      	ldr	r3, [r7, #28]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7fb fd96 	bl	80101dc <pbuf_clen>
 80146b0:	4603      	mov	r3, r0
 80146b2:	461a      	mov	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80146ba:	4413      	add	r3, r2
 80146bc:	b29a      	uxth	r2, r3
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	69fb      	ldr	r3, [r7, #28]
 80146ca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	69fa      	ldr	r2, [r7, #28]
 80146d0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80146d2:	69fb      	ldr	r3, [r7, #28]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d103      	bne.n	80146e2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	2200      	movs	r2, #0
 80146de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80146e2:	2300      	movs	r3, #0
 80146e4:	e016      	b.n	8014714 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80146e6:	bf00      	nop
 80146e8:	e002      	b.n	80146f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80146ea:	bf00      	nop
 80146ec:	e000      	b.n	80146f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80146ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d006      	beq.n	8014704 <tcp_split_unsent_seg+0x25c>
 80146f6:	4b09      	ldr	r3, [pc, #36]	; (801471c <tcp_split_unsent_seg+0x274>)
 80146f8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80146fc:	490d      	ldr	r1, [pc, #52]	; (8014734 <tcp_split_unsent_seg+0x28c>)
 80146fe:	4809      	ldr	r0, [pc, #36]	; (8014724 <tcp_split_unsent_seg+0x27c>)
 8014700:	f004 fba4 	bl	8018e4c <iprintf>
  if (p != NULL) {
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d002      	beq.n	8014710 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801470a:	6938      	ldr	r0, [r7, #16]
 801470c:	f7fb fcde 	bl	80100cc <pbuf_free>
  }

  return ERR_MEM;
 8014710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014714:	4618      	mov	r0, r3
 8014716:	3724      	adds	r7, #36	; 0x24
 8014718:	46bd      	mov	sp, r7
 801471a:	bd90      	pop	{r4, r7, pc}
 801471c:	0801cb20 	.word	0x0801cb20
 8014720:	0801ceb4 	.word	0x0801ceb4
 8014724:	0801cb74 	.word	0x0801cb74
 8014728:	0801ced8 	.word	0x0801ced8
 801472c:	0801cefc 	.word	0x0801cefc
 8014730:	0801cf0c 	.word	0x0801cf0c
 8014734:	0801cf1c 	.word	0x0801cf1c

08014738 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014738:	b590      	push	{r4, r7, lr}
 801473a:	b085      	sub	sp, #20
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d106      	bne.n	8014754 <tcp_send_fin+0x1c>
 8014746:	4b21      	ldr	r3, [pc, #132]	; (80147cc <tcp_send_fin+0x94>)
 8014748:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801474c:	4920      	ldr	r1, [pc, #128]	; (80147d0 <tcp_send_fin+0x98>)
 801474e:	4821      	ldr	r0, [pc, #132]	; (80147d4 <tcp_send_fin+0x9c>)
 8014750:	f004 fb7c 	bl	8018e4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014758:	2b00      	cmp	r3, #0
 801475a:	d02e      	beq.n	80147ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014760:	60fb      	str	r3, [r7, #12]
 8014762:	e002      	b.n	801476a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d1f8      	bne.n	8014764 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	68db      	ldr	r3, [r3, #12]
 8014776:	899b      	ldrh	r3, [r3, #12]
 8014778:	b29b      	uxth	r3, r3
 801477a:	4618      	mov	r0, r3
 801477c:	f7fa f8b0 	bl	800e8e0 <lwip_htons>
 8014780:	4603      	mov	r3, r0
 8014782:	b2db      	uxtb	r3, r3
 8014784:	f003 0307 	and.w	r3, r3, #7
 8014788:	2b00      	cmp	r3, #0
 801478a:	d116      	bne.n	80147ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	899b      	ldrh	r3, [r3, #12]
 8014792:	b29c      	uxth	r4, r3
 8014794:	2001      	movs	r0, #1
 8014796:	f7fa f8a3 	bl	800e8e0 <lwip_htons>
 801479a:	4603      	mov	r3, r0
 801479c:	461a      	mov	r2, r3
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	4322      	orrs	r2, r4
 80147a4:	b292      	uxth	r2, r2
 80147a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	8b5b      	ldrh	r3, [r3, #26]
 80147ac:	f043 0320 	orr.w	r3, r3, #32
 80147b0:	b29a      	uxth	r2, r3
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80147b6:	2300      	movs	r3, #0
 80147b8:	e004      	b.n	80147c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80147ba:	2101      	movs	r1, #1
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f000 f80b 	bl	80147d8 <tcp_enqueue_flags>
 80147c2:	4603      	mov	r3, r0
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3714      	adds	r7, #20
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd90      	pop	{r4, r7, pc}
 80147cc:	0801cb20 	.word	0x0801cb20
 80147d0:	0801cf28 	.word	0x0801cf28
 80147d4:	0801cb74 	.word	0x0801cb74

080147d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b08a      	sub	sp, #40	; 0x28
 80147dc:	af02      	add	r7, sp, #8
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	460b      	mov	r3, r1
 80147e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80147e8:	2300      	movs	r3, #0
 80147ea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80147ec:	78fb      	ldrb	r3, [r7, #3]
 80147ee:	f003 0303 	and.w	r3, r3, #3
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d106      	bne.n	8014804 <tcp_enqueue_flags+0x2c>
 80147f6:	4b67      	ldr	r3, [pc, #412]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 80147f8:	f240 4211 	movw	r2, #1041	; 0x411
 80147fc:	4966      	ldr	r1, [pc, #408]	; (8014998 <tcp_enqueue_flags+0x1c0>)
 80147fe:	4867      	ldr	r0, [pc, #412]	; (801499c <tcp_enqueue_flags+0x1c4>)
 8014800:	f004 fb24 	bl	8018e4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d106      	bne.n	8014818 <tcp_enqueue_flags+0x40>
 801480a:	4b62      	ldr	r3, [pc, #392]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 801480c:	f240 4213 	movw	r2, #1043	; 0x413
 8014810:	4963      	ldr	r1, [pc, #396]	; (80149a0 <tcp_enqueue_flags+0x1c8>)
 8014812:	4862      	ldr	r0, [pc, #392]	; (801499c <tcp_enqueue_flags+0x1c4>)
 8014814:	f004 fb1a 	bl	8018e4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014818:	78fb      	ldrb	r3, [r7, #3]
 801481a:	f003 0302 	and.w	r3, r3, #2
 801481e:	2b00      	cmp	r3, #0
 8014820:	d001      	beq.n	8014826 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014822:	2301      	movs	r3, #1
 8014824:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014826:	7ffb      	ldrb	r3, [r7, #31]
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	b2db      	uxtb	r3, r3
 801482c:	f003 0304 	and.w	r3, r3, #4
 8014830:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014832:	7dfb      	ldrb	r3, [r7, #23]
 8014834:	b29b      	uxth	r3, r3
 8014836:	f44f 7220 	mov.w	r2, #640	; 0x280
 801483a:	4619      	mov	r1, r3
 801483c:	2036      	movs	r0, #54	; 0x36
 801483e:	f7fb f961 	bl	800fb04 <pbuf_alloc>
 8014842:	6138      	str	r0, [r7, #16]
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d109      	bne.n	801485e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	8b5b      	ldrh	r3, [r3, #26]
 801484e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014852:	b29a      	uxth	r2, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014858:	f04f 33ff 	mov.w	r3, #4294967295
 801485c:	e095      	b.n	801498a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	895a      	ldrh	r2, [r3, #10]
 8014862:	7dfb      	ldrb	r3, [r7, #23]
 8014864:	b29b      	uxth	r3, r3
 8014866:	429a      	cmp	r2, r3
 8014868:	d206      	bcs.n	8014878 <tcp_enqueue_flags+0xa0>
 801486a:	4b4a      	ldr	r3, [pc, #296]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 801486c:	f240 4239 	movw	r2, #1081	; 0x439
 8014870:	494c      	ldr	r1, [pc, #304]	; (80149a4 <tcp_enqueue_flags+0x1cc>)
 8014872:	484a      	ldr	r0, [pc, #296]	; (801499c <tcp_enqueue_flags+0x1c4>)
 8014874:	f004 faea 	bl	8018e4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801487c:	78fa      	ldrb	r2, [r7, #3]
 801487e:	7ffb      	ldrb	r3, [r7, #31]
 8014880:	9300      	str	r3, [sp, #0]
 8014882:	460b      	mov	r3, r1
 8014884:	6939      	ldr	r1, [r7, #16]
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f7ff fd70 	bl	801436c <tcp_create_segment>
 801488c:	60f8      	str	r0, [r7, #12]
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d109      	bne.n	80148a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	8b5b      	ldrh	r3, [r3, #26]
 8014898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801489c:	b29a      	uxth	r2, r3
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80148a2:	f04f 33ff 	mov.w	r3, #4294967295
 80148a6:	e070      	b.n	801498a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	68db      	ldr	r3, [r3, #12]
 80148ac:	f003 0303 	and.w	r3, r3, #3
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d006      	beq.n	80148c2 <tcp_enqueue_flags+0xea>
 80148b4:	4b37      	ldr	r3, [pc, #220]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 80148b6:	f240 4242 	movw	r2, #1090	; 0x442
 80148ba:	493b      	ldr	r1, [pc, #236]	; (80149a8 <tcp_enqueue_flags+0x1d0>)
 80148bc:	4837      	ldr	r0, [pc, #220]	; (801499c <tcp_enqueue_flags+0x1c4>)
 80148be:	f004 fac5 	bl	8018e4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	891b      	ldrh	r3, [r3, #8]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d006      	beq.n	80148d8 <tcp_enqueue_flags+0x100>
 80148ca:	4b32      	ldr	r3, [pc, #200]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 80148cc:	f240 4243 	movw	r2, #1091	; 0x443
 80148d0:	4936      	ldr	r1, [pc, #216]	; (80149ac <tcp_enqueue_flags+0x1d4>)
 80148d2:	4832      	ldr	r0, [pc, #200]	; (801499c <tcp_enqueue_flags+0x1c4>)
 80148d4:	f004 faba 	bl	8018e4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d103      	bne.n	80148e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	68fa      	ldr	r2, [r7, #12]
 80148e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80148e6:	e00d      	b.n	8014904 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148ec:	61bb      	str	r3, [r7, #24]
 80148ee:	e002      	b.n	80148f6 <tcp_enqueue_flags+0x11e>
 80148f0:	69bb      	ldr	r3, [r7, #24]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	61bb      	str	r3, [r7, #24]
 80148f6:	69bb      	ldr	r3, [r7, #24]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d1f8      	bne.n	80148f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80148fe:	69bb      	ldr	r3, [r7, #24]
 8014900:	68fa      	ldr	r2, [r7, #12]
 8014902:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2200      	movs	r2, #0
 8014908:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801490c:	78fb      	ldrb	r3, [r7, #3]
 801490e:	f003 0302 	and.w	r3, r3, #2
 8014912:	2b00      	cmp	r3, #0
 8014914:	d104      	bne.n	8014920 <tcp_enqueue_flags+0x148>
 8014916:	78fb      	ldrb	r3, [r7, #3]
 8014918:	f003 0301 	and.w	r3, r3, #1
 801491c:	2b00      	cmp	r3, #0
 801491e:	d004      	beq.n	801492a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014924:	1c5a      	adds	r2, r3, #1
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801492a:	78fb      	ldrb	r3, [r7, #3]
 801492c:	f003 0301 	and.w	r3, r3, #1
 8014930:	2b00      	cmp	r3, #0
 8014932:	d006      	beq.n	8014942 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	8b5b      	ldrh	r3, [r3, #26]
 8014938:	f043 0320 	orr.w	r3, r3, #32
 801493c:	b29a      	uxth	r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	4618      	mov	r0, r3
 8014948:	f7fb fc48 	bl	80101dc <pbuf_clen>
 801494c:	4603      	mov	r3, r0
 801494e:	461a      	mov	r2, r3
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014956:	4413      	add	r3, r2
 8014958:	b29a      	uxth	r2, r3
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014966:	2b00      	cmp	r3, #0
 8014968:	d00e      	beq.n	8014988 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801496e:	2b00      	cmp	r3, #0
 8014970:	d10a      	bne.n	8014988 <tcp_enqueue_flags+0x1b0>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014976:	2b00      	cmp	r3, #0
 8014978:	d106      	bne.n	8014988 <tcp_enqueue_flags+0x1b0>
 801497a:	4b06      	ldr	r3, [pc, #24]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 801497c:	f240 4265 	movw	r2, #1125	; 0x465
 8014980:	490b      	ldr	r1, [pc, #44]	; (80149b0 <tcp_enqueue_flags+0x1d8>)
 8014982:	4806      	ldr	r0, [pc, #24]	; (801499c <tcp_enqueue_flags+0x1c4>)
 8014984:	f004 fa62 	bl	8018e4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014988:	2300      	movs	r3, #0
}
 801498a:	4618      	mov	r0, r3
 801498c:	3720      	adds	r7, #32
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	0801cb20 	.word	0x0801cb20
 8014998:	0801cf44 	.word	0x0801cf44
 801499c:	0801cb74 	.word	0x0801cb74
 80149a0:	0801cf9c 	.word	0x0801cf9c
 80149a4:	0801cfbc 	.word	0x0801cfbc
 80149a8:	0801cff8 	.word	0x0801cff8
 80149ac:	0801d010 	.word	0x0801d010
 80149b0:	0801d03c 	.word	0x0801d03c

080149b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80149b4:	b5b0      	push	{r4, r5, r7, lr}
 80149b6:	b08a      	sub	sp, #40	; 0x28
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <tcp_output+0x1c>
 80149c2:	4b8a      	ldr	r3, [pc, #552]	; (8014bec <tcp_output+0x238>)
 80149c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80149c8:	4989      	ldr	r1, [pc, #548]	; (8014bf0 <tcp_output+0x23c>)
 80149ca:	488a      	ldr	r0, [pc, #552]	; (8014bf4 <tcp_output+0x240>)
 80149cc:	f004 fa3e 	bl	8018e4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	7d1b      	ldrb	r3, [r3, #20]
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d106      	bne.n	80149e6 <tcp_output+0x32>
 80149d8:	4b84      	ldr	r3, [pc, #528]	; (8014bec <tcp_output+0x238>)
 80149da:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80149de:	4986      	ldr	r1, [pc, #536]	; (8014bf8 <tcp_output+0x244>)
 80149e0:	4884      	ldr	r0, [pc, #528]	; (8014bf4 <tcp_output+0x240>)
 80149e2:	f004 fa33 	bl	8018e4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80149e6:	4b85      	ldr	r3, [pc, #532]	; (8014bfc <tcp_output+0x248>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d101      	bne.n	80149f4 <tcp_output+0x40>
    return ERR_OK;
 80149f0:	2300      	movs	r3, #0
 80149f2:	e1ce      	b.n	8014d92 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a00:	4293      	cmp	r3, r2
 8014a02:	bf28      	it	cs
 8014a04:	4613      	movcs	r3, r2
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d10b      	bne.n	8014a2e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	8b5b      	ldrh	r3, [r3, #26]
 8014a1a:	f003 0302 	and.w	r3, r3, #2
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	f000 81aa 	beq.w	8014d78 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f000 fdcb 	bl	80155c0 <tcp_send_empty_ack>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	e1b1      	b.n	8014d92 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014a2e:	6879      	ldr	r1, [r7, #4]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	3304      	adds	r3, #4
 8014a34:	461a      	mov	r2, r3
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7ff fc7c 	bl	8014334 <tcp_route>
 8014a3c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d102      	bne.n	8014a4a <tcp_output+0x96>
    return ERR_RTE;
 8014a44:	f06f 0303 	mvn.w	r3, #3
 8014a48:	e1a3      	b.n	8014d92 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d003      	beq.n	8014a58 <tcp_output+0xa4>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d111      	bne.n	8014a7c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d002      	beq.n	8014a64 <tcp_output+0xb0>
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	3304      	adds	r3, #4
 8014a62:	e000      	b.n	8014a66 <tcp_output+0xb2>
 8014a64:	2300      	movs	r3, #0
 8014a66:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014a68:	693b      	ldr	r3, [r7, #16]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d102      	bne.n	8014a74 <tcp_output+0xc0>
      return ERR_RTE;
 8014a6e:	f06f 0303 	mvn.w	r3, #3
 8014a72:	e18e      	b.n	8014d92 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7f9 ff41 	bl	800e90a <lwip_htonl>
 8014a88:	4602      	mov	r2, r0
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a8e:	1ad3      	subs	r3, r2, r3
 8014a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a92:	8912      	ldrh	r2, [r2, #8]
 8014a94:	4413      	add	r3, r2
 8014a96:	69ba      	ldr	r2, [r7, #24]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d227      	bcs.n	8014aec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d114      	bne.n	8014ad4 <tcp_output+0x120>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d110      	bne.n	8014ad4 <tcp_output+0x120>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d10b      	bne.n	8014ad4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2201      	movs	r2, #1
 8014ac8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	8b5b      	ldrh	r3, [r3, #26]
 8014ad8:	f003 0302 	and.w	r3, r3, #2
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	f000 814d 	beq.w	8014d7c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f000 fd6c 	bl	80155c0 <tcp_send_empty_ack>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	e152      	b.n	8014d92 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2200      	movs	r2, #0
 8014af0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014af8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014afa:	6a3b      	ldr	r3, [r7, #32]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	f000 811c 	beq.w	8014d3a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014b02:	e002      	b.n	8014b0a <tcp_output+0x156>
 8014b04:	6a3b      	ldr	r3, [r7, #32]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	623b      	str	r3, [r7, #32]
 8014b0a:	6a3b      	ldr	r3, [r7, #32]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d1f8      	bne.n	8014b04 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014b12:	e112      	b.n	8014d3a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b16:	68db      	ldr	r3, [r3, #12]
 8014b18:	899b      	ldrh	r3, [r3, #12]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7f9 fedf 	bl	800e8e0 <lwip_htons>
 8014b22:	4603      	mov	r3, r0
 8014b24:	b2db      	uxtb	r3, r3
 8014b26:	f003 0304 	and.w	r3, r3, #4
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d006      	beq.n	8014b3c <tcp_output+0x188>
 8014b2e:	4b2f      	ldr	r3, [pc, #188]	; (8014bec <tcp_output+0x238>)
 8014b30:	f240 5236 	movw	r2, #1334	; 0x536
 8014b34:	4932      	ldr	r1, [pc, #200]	; (8014c00 <tcp_output+0x24c>)
 8014b36:	482f      	ldr	r0, [pc, #188]	; (8014bf4 <tcp_output+0x240>)
 8014b38:	f004 f988 	bl	8018e4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d01f      	beq.n	8014b84 <tcp_output+0x1d0>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	8b5b      	ldrh	r3, [r3, #26]
 8014b48:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d119      	bne.n	8014b84 <tcp_output+0x1d0>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d00b      	beq.n	8014b70 <tcp_output+0x1bc>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d110      	bne.n	8014b84 <tcp_output+0x1d0>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b66:	891a      	ldrh	r2, [r3, #8]
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d209      	bcs.n	8014b84 <tcp_output+0x1d0>
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d004      	beq.n	8014b84 <tcp_output+0x1d0>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b80:	2b08      	cmp	r3, #8
 8014b82:	d901      	bls.n	8014b88 <tcp_output+0x1d4>
 8014b84:	2301      	movs	r3, #1
 8014b86:	e000      	b.n	8014b8a <tcp_output+0x1d6>
 8014b88:	2300      	movs	r3, #0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d106      	bne.n	8014b9c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	8b5b      	ldrh	r3, [r3, #26]
 8014b92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 80e4 	beq.w	8014d64 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	7d1b      	ldrb	r3, [r3, #20]
 8014ba0:	2b02      	cmp	r3, #2
 8014ba2:	d00d      	beq.n	8014bc0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba6:	68db      	ldr	r3, [r3, #12]
 8014ba8:	899b      	ldrh	r3, [r3, #12]
 8014baa:	b29c      	uxth	r4, r3
 8014bac:	2010      	movs	r0, #16
 8014bae:	f7f9 fe97 	bl	800e8e0 <lwip_htons>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	4322      	orrs	r2, r4
 8014bbc:	b292      	uxth	r2, r2
 8014bbe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014bc0:	697a      	ldr	r2, [r7, #20]
 8014bc2:	6879      	ldr	r1, [r7, #4]
 8014bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bc6:	f000 f909 	bl	8014ddc <tcp_output_segment>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d016      	beq.n	8014c04 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	8b5b      	ldrh	r3, [r3, #26]
 8014bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bde:	b29a      	uxth	r2, r3
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	835a      	strh	r2, [r3, #26]
      return err;
 8014be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014be8:	e0d3      	b.n	8014d92 <tcp_output+0x3de>
 8014bea:	bf00      	nop
 8014bec:	0801cb20 	.word	0x0801cb20
 8014bf0:	0801d064 	.word	0x0801d064
 8014bf4:	0801cb74 	.word	0x0801cb74
 8014bf8:	0801d07c 	.word	0x0801d07c
 8014bfc:	20008044 	.word	0x20008044
 8014c00:	0801d0a4 	.word	0x0801d0a4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	7d1b      	ldrb	r3, [r3, #20]
 8014c10:	2b02      	cmp	r3, #2
 8014c12:	d006      	beq.n	8014c22 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	8b5b      	ldrh	r3, [r3, #26]
 8014c18:	f023 0303 	bic.w	r3, r3, #3
 8014c1c:	b29a      	uxth	r2, r3
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7f9 fe6e 	bl	800e90a <lwip_htonl>
 8014c2e:	4604      	mov	r4, r0
 8014c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c32:	891b      	ldrh	r3, [r3, #8]
 8014c34:	461d      	mov	r5, r3
 8014c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c38:	68db      	ldr	r3, [r3, #12]
 8014c3a:	899b      	ldrh	r3, [r3, #12]
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7f9 fe4e 	bl	800e8e0 <lwip_htons>
 8014c44:	4603      	mov	r3, r0
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	f003 0303 	and.w	r3, r3, #3
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d001      	beq.n	8014c54 <tcp_output+0x2a0>
 8014c50:	2301      	movs	r3, #1
 8014c52:	e000      	b.n	8014c56 <tcp_output+0x2a2>
 8014c54:	2300      	movs	r3, #0
 8014c56:	442b      	add	r3, r5
 8014c58:	4423      	add	r3, r4
 8014c5a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	1ad3      	subs	r3, r2, r3
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	da02      	bge.n	8014c6e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	68ba      	ldr	r2, [r7, #8]
 8014c6c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c70:	891b      	ldrh	r3, [r3, #8]
 8014c72:	461c      	mov	r4, r3
 8014c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c76:	68db      	ldr	r3, [r3, #12]
 8014c78:	899b      	ldrh	r3, [r3, #12]
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7f9 fe2f 	bl	800e8e0 <lwip_htons>
 8014c82:	4603      	mov	r3, r0
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	f003 0303 	and.w	r3, r3, #3
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d001      	beq.n	8014c92 <tcp_output+0x2de>
 8014c8e:	2301      	movs	r3, #1
 8014c90:	e000      	b.n	8014c94 <tcp_output+0x2e0>
 8014c92:	2300      	movs	r3, #0
 8014c94:	4423      	add	r3, r4
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d049      	beq.n	8014d2e <tcp_output+0x37a>
      seg->next = NULL;
 8014c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d105      	bne.n	8014cb4 <tcp_output+0x300>
        pcb->unacked = seg;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb0:	623b      	str	r3, [r7, #32]
 8014cb2:	e03f      	b.n	8014d34 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7f9 fe25 	bl	800e90a <lwip_htonl>
 8014cc0:	4604      	mov	r4, r0
 8014cc2:	6a3b      	ldr	r3, [r7, #32]
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7f9 fe1e 	bl	800e90a <lwip_htonl>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	1ae3      	subs	r3, r4, r3
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	da24      	bge.n	8014d20 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	3370      	adds	r3, #112	; 0x70
 8014cda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014cdc:	e002      	b.n	8014ce4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014cde:	69fb      	ldr	r3, [r7, #28]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014ce4:	69fb      	ldr	r3, [r7, #28]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d011      	beq.n	8014d10 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	68db      	ldr	r3, [r3, #12]
 8014cf2:	685b      	ldr	r3, [r3, #4]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7f9 fe08 	bl	800e90a <lwip_htonl>
 8014cfa:	4604      	mov	r4, r0
 8014cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7f9 fe01 	bl	800e90a <lwip_htonl>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	dbe6      	blt.n	8014cde <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014d10:	69fb      	ldr	r3, [r7, #28]
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d16:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014d18:	69fb      	ldr	r3, [r7, #28]
 8014d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d1c:	601a      	str	r2, [r3, #0]
 8014d1e:	e009      	b.n	8014d34 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014d20:	6a3b      	ldr	r3, [r7, #32]
 8014d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d24:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014d26:	6a3b      	ldr	r3, [r7, #32]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	623b      	str	r3, [r7, #32]
 8014d2c:	e002      	b.n	8014d34 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d30:	f7fc fc3f 	bl	80115b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d38:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d012      	beq.n	8014d66 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7f9 fddf 	bl	800e90a <lwip_htonl>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d52:	1ad3      	subs	r3, r2, r3
 8014d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d56:	8912      	ldrh	r2, [r2, #8]
 8014d58:	4413      	add	r3, r2
  while (seg != NULL &&
 8014d5a:	69ba      	ldr	r2, [r7, #24]
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	f4bf aed9 	bcs.w	8014b14 <tcp_output+0x160>
 8014d62:	e000      	b.n	8014d66 <tcp_output+0x3b2>
      break;
 8014d64:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d108      	bne.n	8014d80 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2200      	movs	r2, #0
 8014d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014d76:	e004      	b.n	8014d82 <tcp_output+0x3ce>
    goto output_done;
 8014d78:	bf00      	nop
 8014d7a:	e002      	b.n	8014d82 <tcp_output+0x3ce>
    goto output_done;
 8014d7c:	bf00      	nop
 8014d7e:	e000      	b.n	8014d82 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014d80:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	8b5b      	ldrh	r3, [r3, #26]
 8014d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014d90:	2300      	movs	r3, #0
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3728      	adds	r7, #40	; 0x28
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bdb0      	pop	{r4, r5, r7, pc}
 8014d9a:	bf00      	nop

08014d9c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d106      	bne.n	8014db8 <tcp_output_segment_busy+0x1c>
 8014daa:	4b09      	ldr	r3, [pc, #36]	; (8014dd0 <tcp_output_segment_busy+0x34>)
 8014dac:	f240 529a 	movw	r2, #1434	; 0x59a
 8014db0:	4908      	ldr	r1, [pc, #32]	; (8014dd4 <tcp_output_segment_busy+0x38>)
 8014db2:	4809      	ldr	r0, [pc, #36]	; (8014dd8 <tcp_output_segment_busy+0x3c>)
 8014db4:	f004 f84a 	bl	8018e4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	7b9b      	ldrb	r3, [r3, #14]
 8014dbe:	2b01      	cmp	r3, #1
 8014dc0:	d001      	beq.n	8014dc6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	e000      	b.n	8014dc8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014dc6:	2300      	movs	r3, #0
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3708      	adds	r7, #8
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	0801cb20 	.word	0x0801cb20
 8014dd4:	0801d0bc 	.word	0x0801d0bc
 8014dd8:	0801cb74 	.word	0x0801cb74

08014ddc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014ddc:	b5b0      	push	{r4, r5, r7, lr}
 8014dde:	b08c      	sub	sp, #48	; 0x30
 8014de0:	af04      	add	r7, sp, #16
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d106      	bne.n	8014dfc <tcp_output_segment+0x20>
 8014dee:	4b64      	ldr	r3, [pc, #400]	; (8014f80 <tcp_output_segment+0x1a4>)
 8014df0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014df4:	4963      	ldr	r1, [pc, #396]	; (8014f84 <tcp_output_segment+0x1a8>)
 8014df6:	4864      	ldr	r0, [pc, #400]	; (8014f88 <tcp_output_segment+0x1ac>)
 8014df8:	f004 f828 	bl	8018e4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d106      	bne.n	8014e10 <tcp_output_segment+0x34>
 8014e02:	4b5f      	ldr	r3, [pc, #380]	; (8014f80 <tcp_output_segment+0x1a4>)
 8014e04:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014e08:	4960      	ldr	r1, [pc, #384]	; (8014f8c <tcp_output_segment+0x1b0>)
 8014e0a:	485f      	ldr	r0, [pc, #380]	; (8014f88 <tcp_output_segment+0x1ac>)
 8014e0c:	f004 f81e 	bl	8018e4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d106      	bne.n	8014e24 <tcp_output_segment+0x48>
 8014e16:	4b5a      	ldr	r3, [pc, #360]	; (8014f80 <tcp_output_segment+0x1a4>)
 8014e18:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014e1c:	495c      	ldr	r1, [pc, #368]	; (8014f90 <tcp_output_segment+0x1b4>)
 8014e1e:	485a      	ldr	r0, [pc, #360]	; (8014f88 <tcp_output_segment+0x1ac>)
 8014e20:	f004 f814 	bl	8018e4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014e24:	68f8      	ldr	r0, [r7, #12]
 8014e26:	f7ff ffb9 	bl	8014d9c <tcp_output_segment_busy>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d001      	beq.n	8014e34 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014e30:	2300      	movs	r3, #0
 8014e32:	e0a1      	b.n	8014f78 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	68dc      	ldr	r4, [r3, #12]
 8014e3c:	4610      	mov	r0, r2
 8014e3e:	f7f9 fd64 	bl	800e90a <lwip_htonl>
 8014e42:	4603      	mov	r3, r0
 8014e44:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014e46:	68bb      	ldr	r3, [r7, #8]
 8014e48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	68dc      	ldr	r4, [r3, #12]
 8014e4e:	4610      	mov	r0, r2
 8014e50:	f7f9 fd46 	bl	800e8e0 <lwip_htons>
 8014e54:	4603      	mov	r3, r0
 8014e56:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e5c:	68ba      	ldr	r2, [r7, #8]
 8014e5e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014e60:	441a      	add	r2, r3
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	68db      	ldr	r3, [r3, #12]
 8014e6a:	3314      	adds	r3, #20
 8014e6c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	7a9b      	ldrb	r3, [r3, #10]
 8014e72:	f003 0301 	and.w	r3, r3, #1
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d015      	beq.n	8014ea6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	3304      	adds	r3, #4
 8014e7e:	461a      	mov	r2, r3
 8014e80:	6879      	ldr	r1, [r7, #4]
 8014e82:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014e86:	f7fc fe8b 	bl	8011ba0 <tcp_eff_send_mss_netif>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014e8e:	8b7b      	ldrh	r3, [r7, #26]
 8014e90:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014e94:	4618      	mov	r0, r3
 8014e96:	f7f9 fd38 	bl	800e90a <lwip_htonl>
 8014e9a:	4602      	mov	r2, r0
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	3304      	adds	r3, #4
 8014ea4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	da02      	bge.n	8014eb6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014eb0:	68bb      	ldr	r3, [r7, #8]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d10c      	bne.n	8014ed8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014ebe:	4b35      	ldr	r3, [pc, #212]	; (8014f94 <tcp_output_segment+0x1b8>)
 8014ec0:	681a      	ldr	r2, [r3, #0]
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	68db      	ldr	r3, [r3, #12]
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7f9 fd1c 	bl	800e90a <lwip_htonl>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	68da      	ldr	r2, [r3, #12]
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	1ad3      	subs	r3, r2, r3
 8014ee4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	685b      	ldr	r3, [r3, #4]
 8014eea:	8959      	ldrh	r1, [r3, #10]
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	8b3a      	ldrh	r2, [r7, #24]
 8014ef2:	1a8a      	subs	r2, r1, r2
 8014ef4:	b292      	uxth	r2, r2
 8014ef6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	8919      	ldrh	r1, [r3, #8]
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	8b3a      	ldrh	r2, [r7, #24]
 8014f04:	1a8a      	subs	r2, r1, r2
 8014f06:	b292      	uxth	r2, r2
 8014f08:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	68fa      	ldr	r2, [r7, #12]
 8014f10:	68d2      	ldr	r2, [r2, #12]
 8014f12:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	68db      	ldr	r3, [r3, #12]
 8014f18:	2200      	movs	r2, #0
 8014f1a:	741a      	strb	r2, [r3, #16]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	68da      	ldr	r2, [r3, #12]
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	7a9b      	ldrb	r3, [r3, #10]
 8014f28:	f003 0301 	and.w	r3, r3, #1
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d001      	beq.n	8014f34 <tcp_output_segment+0x158>
 8014f30:	2318      	movs	r3, #24
 8014f32:	e000      	b.n	8014f36 <tcp_output_segment+0x15a>
 8014f34:	2314      	movs	r3, #20
 8014f36:	4413      	add	r3, r2
 8014f38:	69fa      	ldr	r2, [r7, #28]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d006      	beq.n	8014f4c <tcp_output_segment+0x170>
 8014f3e:	4b10      	ldr	r3, [pc, #64]	; (8014f80 <tcp_output_segment+0x1a4>)
 8014f40:	f240 621c 	movw	r2, #1564	; 0x61c
 8014f44:	4914      	ldr	r1, [pc, #80]	; (8014f98 <tcp_output_segment+0x1bc>)
 8014f46:	4810      	ldr	r0, [pc, #64]	; (8014f88 <tcp_output_segment+0x1ac>)
 8014f48:	f003 ff80 	bl	8018e4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	6858      	ldr	r0, [r3, #4]
 8014f50:	68b9      	ldr	r1, [r7, #8]
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	1d1c      	adds	r4, r3, #4
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	7add      	ldrb	r5, [r3, #11]
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	7a9b      	ldrb	r3, [r3, #10]
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	9202      	str	r2, [sp, #8]
 8014f62:	2206      	movs	r2, #6
 8014f64:	9201      	str	r2, [sp, #4]
 8014f66:	9300      	str	r3, [sp, #0]
 8014f68:	462b      	mov	r3, r5
 8014f6a:	4622      	mov	r2, r4
 8014f6c:	f002 fa18 	bl	80173a0 <ip4_output_if>
 8014f70:	4603      	mov	r3, r0
 8014f72:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3720      	adds	r7, #32
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8014f80:	0801cb20 	.word	0x0801cb20
 8014f84:	0801d0e4 	.word	0x0801d0e4
 8014f88:	0801cb74 	.word	0x0801cb74
 8014f8c:	0801d104 	.word	0x0801d104
 8014f90:	0801d124 	.word	0x0801d124
 8014f94:	20007ff8 	.word	0x20007ff8
 8014f98:	0801d148 	.word	0x0801d148

08014f9c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014f9c:	b5b0      	push	{r4, r5, r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d106      	bne.n	8014fb8 <tcp_rexmit_rto_prepare+0x1c>
 8014faa:	4b31      	ldr	r3, [pc, #196]	; (8015070 <tcp_rexmit_rto_prepare+0xd4>)
 8014fac:	f240 6263 	movw	r2, #1635	; 0x663
 8014fb0:	4930      	ldr	r1, [pc, #192]	; (8015074 <tcp_rexmit_rto_prepare+0xd8>)
 8014fb2:	4831      	ldr	r0, [pc, #196]	; (8015078 <tcp_rexmit_rto_prepare+0xdc>)
 8014fb4:	f003 ff4a 	bl	8018e4c <iprintf>

  if (pcb->unacked == NULL) {
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d102      	bne.n	8014fc6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014fc0:	f06f 0305 	mvn.w	r3, #5
 8014fc4:	e050      	b.n	8015068 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fca:	60fb      	str	r3, [r7, #12]
 8014fcc:	e00b      	b.n	8014fe6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014fce:	68f8      	ldr	r0, [r7, #12]
 8014fd0:	f7ff fee4 	bl	8014d9c <tcp_output_segment_busy>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d002      	beq.n	8014fe0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014fda:	f06f 0305 	mvn.w	r3, #5
 8014fde:	e043      	b.n	8015068 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	60fb      	str	r3, [r7, #12]
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d1ef      	bne.n	8014fce <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f7ff fed4 	bl	8014d9c <tcp_output_segment_busy>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d002      	beq.n	8015000 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014ffa:	f06f 0305 	mvn.w	r3, #5
 8014ffe:	e033      	b.n	8015068 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2200      	movs	r2, #0
 8015014:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	8b5b      	ldrh	r3, [r3, #26]
 801501a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801501e:	b29a      	uxth	r2, r3
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	68db      	ldr	r3, [r3, #12]
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	4618      	mov	r0, r3
 801502c:	f7f9 fc6d 	bl	800e90a <lwip_htonl>
 8015030:	4604      	mov	r4, r0
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	891b      	ldrh	r3, [r3, #8]
 8015036:	461d      	mov	r5, r3
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	68db      	ldr	r3, [r3, #12]
 801503c:	899b      	ldrh	r3, [r3, #12]
 801503e:	b29b      	uxth	r3, r3
 8015040:	4618      	mov	r0, r3
 8015042:	f7f9 fc4d 	bl	800e8e0 <lwip_htons>
 8015046:	4603      	mov	r3, r0
 8015048:	b2db      	uxtb	r3, r3
 801504a:	f003 0303 	and.w	r3, r3, #3
 801504e:	2b00      	cmp	r3, #0
 8015050:	d001      	beq.n	8015056 <tcp_rexmit_rto_prepare+0xba>
 8015052:	2301      	movs	r3, #1
 8015054:	e000      	b.n	8015058 <tcp_rexmit_rto_prepare+0xbc>
 8015056:	2300      	movs	r3, #0
 8015058:	442b      	add	r3, r5
 801505a:	18e2      	adds	r2, r4, r3
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2200      	movs	r2, #0
 8015064:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015066:	2300      	movs	r3, #0
}
 8015068:	4618      	mov	r0, r3
 801506a:	3710      	adds	r7, #16
 801506c:	46bd      	mov	sp, r7
 801506e:	bdb0      	pop	{r4, r5, r7, pc}
 8015070:	0801cb20 	.word	0x0801cb20
 8015074:	0801d15c 	.word	0x0801d15c
 8015078:	0801cb74 	.word	0x0801cb74

0801507c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d106      	bne.n	8015098 <tcp_rexmit_rto_commit+0x1c>
 801508a:	4b0d      	ldr	r3, [pc, #52]	; (80150c0 <tcp_rexmit_rto_commit+0x44>)
 801508c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015090:	490c      	ldr	r1, [pc, #48]	; (80150c4 <tcp_rexmit_rto_commit+0x48>)
 8015092:	480d      	ldr	r0, [pc, #52]	; (80150c8 <tcp_rexmit_rto_commit+0x4c>)
 8015094:	f003 feda 	bl	8018e4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801509e:	2bff      	cmp	r3, #255	; 0xff
 80150a0:	d007      	beq.n	80150b2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80150a8:	3301      	adds	r3, #1
 80150aa:	b2da      	uxtb	r2, r3
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f7ff fc7e 	bl	80149b4 <tcp_output>
}
 80150b8:	bf00      	nop
 80150ba:	3708      	adds	r7, #8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	0801cb20 	.word	0x0801cb20
 80150c4:	0801d180 	.word	0x0801d180
 80150c8:	0801cb74 	.word	0x0801cb74

080150cc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d106      	bne.n	80150e8 <tcp_rexmit_rto+0x1c>
 80150da:	4b0a      	ldr	r3, [pc, #40]	; (8015104 <tcp_rexmit_rto+0x38>)
 80150dc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80150e0:	4909      	ldr	r1, [pc, #36]	; (8015108 <tcp_rexmit_rto+0x3c>)
 80150e2:	480a      	ldr	r0, [pc, #40]	; (801510c <tcp_rexmit_rto+0x40>)
 80150e4:	f003 feb2 	bl	8018e4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f7ff ff57 	bl	8014f9c <tcp_rexmit_rto_prepare>
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d102      	bne.n	80150fa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f7ff ffc1 	bl	801507c <tcp_rexmit_rto_commit>
  }
}
 80150fa:	bf00      	nop
 80150fc:	3708      	adds	r7, #8
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	0801cb20 	.word	0x0801cb20
 8015108:	0801d1a4 	.word	0x0801d1a4
 801510c:	0801cb74 	.word	0x0801cb74

08015110 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015110:	b590      	push	{r4, r7, lr}
 8015112:	b085      	sub	sp, #20
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d106      	bne.n	801512c <tcp_rexmit+0x1c>
 801511e:	4b2f      	ldr	r3, [pc, #188]	; (80151dc <tcp_rexmit+0xcc>)
 8015120:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015124:	492e      	ldr	r1, [pc, #184]	; (80151e0 <tcp_rexmit+0xd0>)
 8015126:	482f      	ldr	r0, [pc, #188]	; (80151e4 <tcp_rexmit+0xd4>)
 8015128:	f003 fe90 	bl	8018e4c <iprintf>

  if (pcb->unacked == NULL) {
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015130:	2b00      	cmp	r3, #0
 8015132:	d102      	bne.n	801513a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015134:	f06f 0305 	mvn.w	r3, #5
 8015138:	e04c      	b.n	80151d4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801513e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015140:	68b8      	ldr	r0, [r7, #8]
 8015142:	f7ff fe2b 	bl	8014d9c <tcp_output_segment_busy>
 8015146:	4603      	mov	r3, r0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d002      	beq.n	8015152 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801514c:	f06f 0305 	mvn.w	r3, #5
 8015150:	e040      	b.n	80151d4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	336c      	adds	r3, #108	; 0x6c
 801515e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015160:	e002      	b.n	8015168 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d011      	beq.n	8015194 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	68db      	ldr	r3, [r3, #12]
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	4618      	mov	r0, r3
 801517a:	f7f9 fbc6 	bl	800e90a <lwip_htonl>
 801517e:	4604      	mov	r4, r0
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	68db      	ldr	r3, [r3, #12]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	4618      	mov	r0, r3
 8015188:	f7f9 fbbf 	bl	800e90a <lwip_htonl>
 801518c:	4603      	mov	r3, r0
 801518e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015190:	2b00      	cmp	r3, #0
 8015192:	dbe6      	blt.n	8015162 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	681a      	ldr	r2, [r3, #0]
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	68ba      	ldr	r2, [r7, #8]
 80151a0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d103      	bne.n	80151b2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2200      	movs	r2, #0
 80151ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80151b8:	2bff      	cmp	r3, #255	; 0xff
 80151ba:	d007      	beq.n	80151cc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80151c2:	3301      	adds	r3, #1
 80151c4:	b2da      	uxtb	r2, r3
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2200      	movs	r2, #0
 80151d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80151d2:	2300      	movs	r3, #0
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3714      	adds	r7, #20
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd90      	pop	{r4, r7, pc}
 80151dc:	0801cb20 	.word	0x0801cb20
 80151e0:	0801d1c0 	.word	0x0801d1c0
 80151e4:	0801cb74 	.word	0x0801cb74

080151e8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d106      	bne.n	8015204 <tcp_rexmit_fast+0x1c>
 80151f6:	4b2a      	ldr	r3, [pc, #168]	; (80152a0 <tcp_rexmit_fast+0xb8>)
 80151f8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80151fc:	4929      	ldr	r1, [pc, #164]	; (80152a4 <tcp_rexmit_fast+0xbc>)
 80151fe:	482a      	ldr	r0, [pc, #168]	; (80152a8 <tcp_rexmit_fast+0xc0>)
 8015200:	f003 fe24 	bl	8018e4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015208:	2b00      	cmp	r3, #0
 801520a:	d045      	beq.n	8015298 <tcp_rexmit_fast+0xb0>
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	8b5b      	ldrh	r3, [r3, #26]
 8015210:	f003 0304 	and.w	r3, r3, #4
 8015214:	2b00      	cmp	r3, #0
 8015216:	d13f      	bne.n	8015298 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f7ff ff79 	bl	8015110 <tcp_rexmit>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d139      	bne.n	8015298 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015230:	4293      	cmp	r3, r2
 8015232:	bf28      	it	cs
 8015234:	4613      	movcs	r3, r2
 8015236:	b29b      	uxth	r3, r3
 8015238:	2b00      	cmp	r3, #0
 801523a:	da00      	bge.n	801523e <tcp_rexmit_fast+0x56>
 801523c:	3301      	adds	r3, #1
 801523e:	105b      	asrs	r3, r3, #1
 8015240:	b29a      	uxth	r2, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801524e:	461a      	mov	r2, r3
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015254:	005b      	lsls	r3, r3, #1
 8015256:	429a      	cmp	r2, r3
 8015258:	d206      	bcs.n	8015268 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801525e:	005b      	lsls	r3, r3, #1
 8015260:	b29a      	uxth	r2, r3
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015272:	4619      	mov	r1, r3
 8015274:	0049      	lsls	r1, r1, #1
 8015276:	440b      	add	r3, r1
 8015278:	b29b      	uxth	r3, r3
 801527a:	4413      	add	r3, r2
 801527c:	b29a      	uxth	r2, r3
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	8b5b      	ldrh	r3, [r3, #26]
 8015288:	f043 0304 	orr.w	r3, r3, #4
 801528c:	b29a      	uxth	r2, r3
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2200      	movs	r2, #0
 8015296:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015298:	bf00      	nop
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	0801cb20 	.word	0x0801cb20
 80152a4:	0801d1d8 	.word	0x0801d1d8
 80152a8:	0801cb74 	.word	0x0801cb74

080152ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b086      	sub	sp, #24
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	60f8      	str	r0, [r7, #12]
 80152b4:	607b      	str	r3, [r7, #4]
 80152b6:	460b      	mov	r3, r1
 80152b8:	817b      	strh	r3, [r7, #10]
 80152ba:	4613      	mov	r3, r2
 80152bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80152be:	897a      	ldrh	r2, [r7, #10]
 80152c0:	893b      	ldrh	r3, [r7, #8]
 80152c2:	4413      	add	r3, r2
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	3314      	adds	r3, #20
 80152c8:	b29b      	uxth	r3, r3
 80152ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152ce:	4619      	mov	r1, r3
 80152d0:	2022      	movs	r0, #34	; 0x22
 80152d2:	f7fa fc17 	bl	800fb04 <pbuf_alloc>
 80152d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d04d      	beq.n	801537a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80152de:	897b      	ldrh	r3, [r7, #10]
 80152e0:	3313      	adds	r3, #19
 80152e2:	697a      	ldr	r2, [r7, #20]
 80152e4:	8952      	ldrh	r2, [r2, #10]
 80152e6:	4293      	cmp	r3, r2
 80152e8:	db06      	blt.n	80152f8 <tcp_output_alloc_header_common+0x4c>
 80152ea:	4b26      	ldr	r3, [pc, #152]	; (8015384 <tcp_output_alloc_header_common+0xd8>)
 80152ec:	f240 7223 	movw	r2, #1827	; 0x723
 80152f0:	4925      	ldr	r1, [pc, #148]	; (8015388 <tcp_output_alloc_header_common+0xdc>)
 80152f2:	4826      	ldr	r0, [pc, #152]	; (801538c <tcp_output_alloc_header_common+0xe0>)
 80152f4:	f003 fdaa 	bl	8018e4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	685b      	ldr	r3, [r3, #4]
 80152fc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80152fe:	8c3b      	ldrh	r3, [r7, #32]
 8015300:	4618      	mov	r0, r3
 8015302:	f7f9 faed 	bl	800e8e0 <lwip_htons>
 8015306:	4603      	mov	r3, r0
 8015308:	461a      	mov	r2, r3
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801530e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015310:	4618      	mov	r0, r3
 8015312:	f7f9 fae5 	bl	800e8e0 <lwip_htons>
 8015316:	4603      	mov	r3, r0
 8015318:	461a      	mov	r2, r3
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015324:	68f8      	ldr	r0, [r7, #12]
 8015326:	f7f9 faf0 	bl	800e90a <lwip_htonl>
 801532a:	4602      	mov	r2, r0
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015330:	897b      	ldrh	r3, [r7, #10]
 8015332:	089b      	lsrs	r3, r3, #2
 8015334:	b29b      	uxth	r3, r3
 8015336:	3305      	adds	r3, #5
 8015338:	b29b      	uxth	r3, r3
 801533a:	031b      	lsls	r3, r3, #12
 801533c:	b29a      	uxth	r2, r3
 801533e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015342:	b29b      	uxth	r3, r3
 8015344:	4313      	orrs	r3, r2
 8015346:	b29b      	uxth	r3, r3
 8015348:	4618      	mov	r0, r3
 801534a:	f7f9 fac9 	bl	800e8e0 <lwip_htons>
 801534e:	4603      	mov	r3, r0
 8015350:	461a      	mov	r2, r3
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015356:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015358:	4618      	mov	r0, r3
 801535a:	f7f9 fac1 	bl	800e8e0 <lwip_htons>
 801535e:	4603      	mov	r3, r0
 8015360:	461a      	mov	r2, r3
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015366:	693b      	ldr	r3, [r7, #16]
 8015368:	2200      	movs	r2, #0
 801536a:	741a      	strb	r2, [r3, #16]
 801536c:	2200      	movs	r2, #0
 801536e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	2200      	movs	r2, #0
 8015374:	749a      	strb	r2, [r3, #18]
 8015376:	2200      	movs	r2, #0
 8015378:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801537a:	697b      	ldr	r3, [r7, #20]
}
 801537c:	4618      	mov	r0, r3
 801537e:	3718      	adds	r7, #24
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	0801cb20 	.word	0x0801cb20
 8015388:	0801d1f8 	.word	0x0801d1f8
 801538c:	0801cb74 	.word	0x0801cb74

08015390 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015390:	b5b0      	push	{r4, r5, r7, lr}
 8015392:	b08a      	sub	sp, #40	; 0x28
 8015394:	af04      	add	r7, sp, #16
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	607b      	str	r3, [r7, #4]
 801539a:	460b      	mov	r3, r1
 801539c:	817b      	strh	r3, [r7, #10]
 801539e:	4613      	mov	r3, r2
 80153a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d106      	bne.n	80153b6 <tcp_output_alloc_header+0x26>
 80153a8:	4b15      	ldr	r3, [pc, #84]	; (8015400 <tcp_output_alloc_header+0x70>)
 80153aa:	f240 7242 	movw	r2, #1858	; 0x742
 80153ae:	4915      	ldr	r1, [pc, #84]	; (8015404 <tcp_output_alloc_header+0x74>)
 80153b0:	4815      	ldr	r0, [pc, #84]	; (8015408 <tcp_output_alloc_header+0x78>)
 80153b2:	f003 fd4b 	bl	8018e4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	8adb      	ldrh	r3, [r3, #22]
 80153be:	68fa      	ldr	r2, [r7, #12]
 80153c0:	8b12      	ldrh	r2, [r2, #24]
 80153c2:	68f9      	ldr	r1, [r7, #12]
 80153c4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80153c6:	893d      	ldrh	r5, [r7, #8]
 80153c8:	897c      	ldrh	r4, [r7, #10]
 80153ca:	9103      	str	r1, [sp, #12]
 80153cc:	2110      	movs	r1, #16
 80153ce:	9102      	str	r1, [sp, #8]
 80153d0:	9201      	str	r2, [sp, #4]
 80153d2:	9300      	str	r3, [sp, #0]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	462a      	mov	r2, r5
 80153d8:	4621      	mov	r1, r4
 80153da:	f7ff ff67 	bl	80152ac <tcp_output_alloc_header_common>
 80153de:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d006      	beq.n	80153f4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ea:	68fa      	ldr	r2, [r7, #12]
 80153ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80153ee:	441a      	add	r2, r3
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80153f4:	697b      	ldr	r3, [r7, #20]
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3718      	adds	r7, #24
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bdb0      	pop	{r4, r5, r7, pc}
 80153fe:	bf00      	nop
 8015400:	0801cb20 	.word	0x0801cb20
 8015404:	0801d228 	.word	0x0801d228
 8015408:	0801cb74 	.word	0x0801cb74

0801540c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b088      	sub	sp, #32
 8015410:	af00      	add	r7, sp, #0
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	4611      	mov	r1, r2
 8015418:	461a      	mov	r2, r3
 801541a:	460b      	mov	r3, r1
 801541c:	71fb      	strb	r3, [r7, #7]
 801541e:	4613      	mov	r3, r2
 8015420:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015422:	2300      	movs	r3, #0
 8015424:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d106      	bne.n	801543a <tcp_output_fill_options+0x2e>
 801542c:	4b12      	ldr	r3, [pc, #72]	; (8015478 <tcp_output_fill_options+0x6c>)
 801542e:	f240 7256 	movw	r2, #1878	; 0x756
 8015432:	4912      	ldr	r1, [pc, #72]	; (801547c <tcp_output_fill_options+0x70>)
 8015434:	4812      	ldr	r0, [pc, #72]	; (8015480 <tcp_output_fill_options+0x74>)
 8015436:	f003 fd09 	bl	8018e4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015440:	69bb      	ldr	r3, [r7, #24]
 8015442:	3314      	adds	r3, #20
 8015444:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015446:	8bfb      	ldrh	r3, [r7, #30]
 8015448:	009b      	lsls	r3, r3, #2
 801544a:	461a      	mov	r2, r3
 801544c:	79fb      	ldrb	r3, [r7, #7]
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	f003 0304 	and.w	r3, r3, #4
 8015454:	4413      	add	r3, r2
 8015456:	3314      	adds	r3, #20
 8015458:	69ba      	ldr	r2, [r7, #24]
 801545a:	4413      	add	r3, r2
 801545c:	697a      	ldr	r2, [r7, #20]
 801545e:	429a      	cmp	r2, r3
 8015460:	d006      	beq.n	8015470 <tcp_output_fill_options+0x64>
 8015462:	4b05      	ldr	r3, [pc, #20]	; (8015478 <tcp_output_fill_options+0x6c>)
 8015464:	f240 7275 	movw	r2, #1909	; 0x775
 8015468:	4906      	ldr	r1, [pc, #24]	; (8015484 <tcp_output_fill_options+0x78>)
 801546a:	4805      	ldr	r0, [pc, #20]	; (8015480 <tcp_output_fill_options+0x74>)
 801546c:	f003 fcee 	bl	8018e4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015470:	bf00      	nop
 8015472:	3720      	adds	r7, #32
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	0801cb20 	.word	0x0801cb20
 801547c:	0801d250 	.word	0x0801d250
 8015480:	0801cb74 	.word	0x0801cb74
 8015484:	0801d148 	.word	0x0801d148

08015488 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b08a      	sub	sp, #40	; 0x28
 801548c:	af04      	add	r7, sp, #16
 801548e:	60f8      	str	r0, [r7, #12]
 8015490:	60b9      	str	r1, [r7, #8]
 8015492:	607a      	str	r2, [r7, #4]
 8015494:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d106      	bne.n	80154aa <tcp_output_control_segment+0x22>
 801549c:	4b1c      	ldr	r3, [pc, #112]	; (8015510 <tcp_output_control_segment+0x88>)
 801549e:	f240 7287 	movw	r2, #1927	; 0x787
 80154a2:	491c      	ldr	r1, [pc, #112]	; (8015514 <tcp_output_control_segment+0x8c>)
 80154a4:	481c      	ldr	r0, [pc, #112]	; (8015518 <tcp_output_control_segment+0x90>)
 80154a6:	f003 fcd1 	bl	8018e4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80154aa:	683a      	ldr	r2, [r7, #0]
 80154ac:	6879      	ldr	r1, [r7, #4]
 80154ae:	68f8      	ldr	r0, [r7, #12]
 80154b0:	f7fe ff40 	bl	8014334 <tcp_route>
 80154b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d102      	bne.n	80154c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80154bc:	23fc      	movs	r3, #252	; 0xfc
 80154be:	75fb      	strb	r3, [r7, #23]
 80154c0:	e01c      	b.n	80154fc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d006      	beq.n	80154d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	7adb      	ldrb	r3, [r3, #11]
 80154cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	7a9b      	ldrb	r3, [r3, #10]
 80154d2:	757b      	strb	r3, [r7, #21]
 80154d4:	e003      	b.n	80154de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80154d6:	23ff      	movs	r3, #255	; 0xff
 80154d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80154da:	2300      	movs	r3, #0
 80154dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80154de:	7dba      	ldrb	r2, [r7, #22]
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	9302      	str	r3, [sp, #8]
 80154e4:	2306      	movs	r3, #6
 80154e6:	9301      	str	r3, [sp, #4]
 80154e8:	7d7b      	ldrb	r3, [r7, #21]
 80154ea:	9300      	str	r3, [sp, #0]
 80154ec:	4613      	mov	r3, r2
 80154ee:	683a      	ldr	r2, [r7, #0]
 80154f0:	6879      	ldr	r1, [r7, #4]
 80154f2:	68b8      	ldr	r0, [r7, #8]
 80154f4:	f001 ff54 	bl	80173a0 <ip4_output_if>
 80154f8:	4603      	mov	r3, r0
 80154fa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80154fc:	68b8      	ldr	r0, [r7, #8]
 80154fe:	f7fa fde5 	bl	80100cc <pbuf_free>
  return err;
 8015502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015506:	4618      	mov	r0, r3
 8015508:	3718      	adds	r7, #24
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	0801cb20 	.word	0x0801cb20
 8015514:	0801d278 	.word	0x0801d278
 8015518:	0801cb74 	.word	0x0801cb74

0801551c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801551c:	b590      	push	{r4, r7, lr}
 801551e:	b08b      	sub	sp, #44	; 0x2c
 8015520:	af04      	add	r7, sp, #16
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
 8015528:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d106      	bne.n	801553e <tcp_rst+0x22>
 8015530:	4b1f      	ldr	r3, [pc, #124]	; (80155b0 <tcp_rst+0x94>)
 8015532:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015536:	491f      	ldr	r1, [pc, #124]	; (80155b4 <tcp_rst+0x98>)
 8015538:	481f      	ldr	r0, [pc, #124]	; (80155b8 <tcp_rst+0x9c>)
 801553a:	f003 fc87 	bl	8018e4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015540:	2b00      	cmp	r3, #0
 8015542:	d106      	bne.n	8015552 <tcp_rst+0x36>
 8015544:	4b1a      	ldr	r3, [pc, #104]	; (80155b0 <tcp_rst+0x94>)
 8015546:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801554a:	491c      	ldr	r1, [pc, #112]	; (80155bc <tcp_rst+0xa0>)
 801554c:	481a      	ldr	r0, [pc, #104]	; (80155b8 <tcp_rst+0x9c>)
 801554e:	f003 fc7d 	bl	8018e4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015552:	2300      	movs	r3, #0
 8015554:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015556:	f246 0308 	movw	r3, #24584	; 0x6008
 801555a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801555c:	7dfb      	ldrb	r3, [r7, #23]
 801555e:	b29c      	uxth	r4, r3
 8015560:	68b8      	ldr	r0, [r7, #8]
 8015562:	f7f9 f9d2 	bl	800e90a <lwip_htonl>
 8015566:	4602      	mov	r2, r0
 8015568:	8abb      	ldrh	r3, [r7, #20]
 801556a:	9303      	str	r3, [sp, #12]
 801556c:	2314      	movs	r3, #20
 801556e:	9302      	str	r3, [sp, #8]
 8015570:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015572:	9301      	str	r3, [sp, #4]
 8015574:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015576:	9300      	str	r3, [sp, #0]
 8015578:	4613      	mov	r3, r2
 801557a:	2200      	movs	r2, #0
 801557c:	4621      	mov	r1, r4
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f7ff fe94 	bl	80152ac <tcp_output_alloc_header_common>
 8015584:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015586:	693b      	ldr	r3, [r7, #16]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d00c      	beq.n	80155a6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801558c:	7dfb      	ldrb	r3, [r7, #23]
 801558e:	2200      	movs	r2, #0
 8015590:	6939      	ldr	r1, [r7, #16]
 8015592:	68f8      	ldr	r0, [r7, #12]
 8015594:	f7ff ff3a 	bl	801540c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559a:	683a      	ldr	r2, [r7, #0]
 801559c:	6939      	ldr	r1, [r7, #16]
 801559e:	68f8      	ldr	r0, [r7, #12]
 80155a0:	f7ff ff72 	bl	8015488 <tcp_output_control_segment>
 80155a4:	e000      	b.n	80155a8 <tcp_rst+0x8c>
    return;
 80155a6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80155a8:	371c      	adds	r7, #28
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd90      	pop	{r4, r7, pc}
 80155ae:	bf00      	nop
 80155b0:	0801cb20 	.word	0x0801cb20
 80155b4:	0801d2a4 	.word	0x0801d2a4
 80155b8:	0801cb74 	.word	0x0801cb74
 80155bc:	0801d2c0 	.word	0x0801d2c0

080155c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80155c0:	b590      	push	{r4, r7, lr}
 80155c2:	b087      	sub	sp, #28
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80155c8:	2300      	movs	r3, #0
 80155ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80155cc:	2300      	movs	r3, #0
 80155ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d106      	bne.n	80155e4 <tcp_send_empty_ack+0x24>
 80155d6:	4b28      	ldr	r3, [pc, #160]	; (8015678 <tcp_send_empty_ack+0xb8>)
 80155d8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80155dc:	4927      	ldr	r1, [pc, #156]	; (801567c <tcp_send_empty_ack+0xbc>)
 80155de:	4828      	ldr	r0, [pc, #160]	; (8015680 <tcp_send_empty_ack+0xc0>)
 80155e0:	f003 fc34 	bl	8018e4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80155e4:	7dfb      	ldrb	r3, [r7, #23]
 80155e6:	009b      	lsls	r3, r3, #2
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	f003 0304 	and.w	r3, r3, #4
 80155ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80155f0:	7d7b      	ldrb	r3, [r7, #21]
 80155f2:	b29c      	uxth	r4, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7f9 f986 	bl	800e90a <lwip_htonl>
 80155fe:	4603      	mov	r3, r0
 8015600:	2200      	movs	r2, #0
 8015602:	4621      	mov	r1, r4
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f7ff fec3 	bl	8015390 <tcp_output_alloc_header>
 801560a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d109      	bne.n	8015626 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	8b5b      	ldrh	r3, [r3, #26]
 8015616:	f043 0303 	orr.w	r3, r3, #3
 801561a:	b29a      	uxth	r2, r3
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015620:	f06f 0301 	mvn.w	r3, #1
 8015624:	e023      	b.n	801566e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015626:	7dbb      	ldrb	r3, [r7, #22]
 8015628:	7dfa      	ldrb	r2, [r7, #23]
 801562a:	6939      	ldr	r1, [r7, #16]
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f7ff feed 	bl	801540c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	3304      	adds	r3, #4
 8015638:	6939      	ldr	r1, [r7, #16]
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f7ff ff24 	bl	8015488 <tcp_output_control_segment>
 8015640:	4603      	mov	r3, r0
 8015642:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d007      	beq.n	801565c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	8b5b      	ldrh	r3, [r3, #26]
 8015650:	f043 0303 	orr.w	r3, r3, #3
 8015654:	b29a      	uxth	r2, r3
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	835a      	strh	r2, [r3, #26]
 801565a:	e006      	b.n	801566a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	8b5b      	ldrh	r3, [r3, #26]
 8015660:	f023 0303 	bic.w	r3, r3, #3
 8015664:	b29a      	uxth	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801566a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801566e:	4618      	mov	r0, r3
 8015670:	371c      	adds	r7, #28
 8015672:	46bd      	mov	sp, r7
 8015674:	bd90      	pop	{r4, r7, pc}
 8015676:	bf00      	nop
 8015678:	0801cb20 	.word	0x0801cb20
 801567c:	0801d2dc 	.word	0x0801d2dc
 8015680:	0801cb74 	.word	0x0801cb74

08015684 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015684:	b590      	push	{r4, r7, lr}
 8015686:	b087      	sub	sp, #28
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801568c:	2300      	movs	r3, #0
 801568e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d106      	bne.n	80156a4 <tcp_keepalive+0x20>
 8015696:	4b18      	ldr	r3, [pc, #96]	; (80156f8 <tcp_keepalive+0x74>)
 8015698:	f640 0224 	movw	r2, #2084	; 0x824
 801569c:	4917      	ldr	r1, [pc, #92]	; (80156fc <tcp_keepalive+0x78>)
 801569e:	4818      	ldr	r0, [pc, #96]	; (8015700 <tcp_keepalive+0x7c>)
 80156a0:	f003 fbd4 	bl	8018e4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80156a4:	7dfb      	ldrb	r3, [r7, #23]
 80156a6:	b29c      	uxth	r4, r3
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80156ac:	3b01      	subs	r3, #1
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7f9 f92b 	bl	800e90a <lwip_htonl>
 80156b4:	4603      	mov	r3, r0
 80156b6:	2200      	movs	r2, #0
 80156b8:	4621      	mov	r1, r4
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7ff fe68 	bl	8015390 <tcp_output_alloc_header>
 80156c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d102      	bne.n	80156ce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80156c8:	f04f 33ff 	mov.w	r3, #4294967295
 80156cc:	e010      	b.n	80156f0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80156ce:	7dfb      	ldrb	r3, [r7, #23]
 80156d0:	2200      	movs	r2, #0
 80156d2:	6939      	ldr	r1, [r7, #16]
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f7ff fe99 	bl	801540c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80156da:	687a      	ldr	r2, [r7, #4]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	3304      	adds	r3, #4
 80156e0:	6939      	ldr	r1, [r7, #16]
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f7ff fed0 	bl	8015488 <tcp_output_control_segment>
 80156e8:	4603      	mov	r3, r0
 80156ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80156ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	371c      	adds	r7, #28
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd90      	pop	{r4, r7, pc}
 80156f8:	0801cb20 	.word	0x0801cb20
 80156fc:	0801d2fc 	.word	0x0801d2fc
 8015700:	0801cb74 	.word	0x0801cb74

08015704 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015704:	b590      	push	{r4, r7, lr}
 8015706:	b08b      	sub	sp, #44	; 0x2c
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801570c:	2300      	movs	r3, #0
 801570e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d106      	bne.n	8015726 <tcp_zero_window_probe+0x22>
 8015718:	4b4c      	ldr	r3, [pc, #304]	; (801584c <tcp_zero_window_probe+0x148>)
 801571a:	f640 024f 	movw	r2, #2127	; 0x84f
 801571e:	494c      	ldr	r1, [pc, #304]	; (8015850 <tcp_zero_window_probe+0x14c>)
 8015720:	484c      	ldr	r0, [pc, #304]	; (8015854 <tcp_zero_window_probe+0x150>)
 8015722:	f003 fb93 	bl	8018e4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801572a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801572c:	6a3b      	ldr	r3, [r7, #32]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d101      	bne.n	8015736 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015732:	2300      	movs	r3, #0
 8015734:	e086      	b.n	8015844 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801573c:	2bff      	cmp	r3, #255	; 0xff
 801573e:	d007      	beq.n	8015750 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015746:	3301      	adds	r3, #1
 8015748:	b2da      	uxtb	r2, r3
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015750:	6a3b      	ldr	r3, [r7, #32]
 8015752:	68db      	ldr	r3, [r3, #12]
 8015754:	899b      	ldrh	r3, [r3, #12]
 8015756:	b29b      	uxth	r3, r3
 8015758:	4618      	mov	r0, r3
 801575a:	f7f9 f8c1 	bl	800e8e0 <lwip_htons>
 801575e:	4603      	mov	r3, r0
 8015760:	b2db      	uxtb	r3, r3
 8015762:	f003 0301 	and.w	r3, r3, #1
 8015766:	2b00      	cmp	r3, #0
 8015768:	d005      	beq.n	8015776 <tcp_zero_window_probe+0x72>
 801576a:	6a3b      	ldr	r3, [r7, #32]
 801576c:	891b      	ldrh	r3, [r3, #8]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d101      	bne.n	8015776 <tcp_zero_window_probe+0x72>
 8015772:	2301      	movs	r3, #1
 8015774:	e000      	b.n	8015778 <tcp_zero_window_probe+0x74>
 8015776:	2300      	movs	r3, #0
 8015778:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801577a:	7ffb      	ldrb	r3, [r7, #31]
 801577c:	2b00      	cmp	r3, #0
 801577e:	bf0c      	ite	eq
 8015780:	2301      	moveq	r3, #1
 8015782:	2300      	movne	r3, #0
 8015784:	b2db      	uxtb	r3, r3
 8015786:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801578c:	b299      	uxth	r1, r3
 801578e:	6a3b      	ldr	r3, [r7, #32]
 8015790:	68db      	ldr	r3, [r3, #12]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	8bba      	ldrh	r2, [r7, #28]
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f7ff fdfa 	bl	8015390 <tcp_output_alloc_header>
 801579c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801579e:	69bb      	ldr	r3, [r7, #24]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d102      	bne.n	80157aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80157a4:	f04f 33ff 	mov.w	r3, #4294967295
 80157a8:	e04c      	b.n	8015844 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80157aa:	69bb      	ldr	r3, [r7, #24]
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80157b0:	7ffb      	ldrb	r3, [r7, #31]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d011      	beq.n	80157da <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	899b      	ldrh	r3, [r3, #12]
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	b21b      	sxth	r3, r3
 80157be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80157c2:	b21c      	sxth	r4, r3
 80157c4:	2011      	movs	r0, #17
 80157c6:	f7f9 f88b 	bl	800e8e0 <lwip_htons>
 80157ca:	4603      	mov	r3, r0
 80157cc:	b21b      	sxth	r3, r3
 80157ce:	4323      	orrs	r3, r4
 80157d0:	b21b      	sxth	r3, r3
 80157d2:	b29a      	uxth	r2, r3
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	819a      	strh	r2, [r3, #12]
 80157d8:	e010      	b.n	80157fc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80157da:	69bb      	ldr	r3, [r7, #24]
 80157dc:	685b      	ldr	r3, [r3, #4]
 80157de:	3314      	adds	r3, #20
 80157e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80157e2:	6a3b      	ldr	r3, [r7, #32]
 80157e4:	6858      	ldr	r0, [r3, #4]
 80157e6:	6a3b      	ldr	r3, [r7, #32]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	891a      	ldrh	r2, [r3, #8]
 80157ec:	6a3b      	ldr	r3, [r7, #32]
 80157ee:	891b      	ldrh	r3, [r3, #8]
 80157f0:	1ad3      	subs	r3, r2, r3
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	2201      	movs	r2, #1
 80157f6:	6939      	ldr	r1, [r7, #16]
 80157f8:	f7fa fe52 	bl	80104a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80157fc:	6a3b      	ldr	r3, [r7, #32]
 80157fe:	68db      	ldr	r3, [r3, #12]
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	4618      	mov	r0, r3
 8015804:	f7f9 f881 	bl	800e90a <lwip_htonl>
 8015808:	4603      	mov	r3, r0
 801580a:	3301      	adds	r3, #1
 801580c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	1ad3      	subs	r3, r2, r3
 8015816:	2b00      	cmp	r3, #0
 8015818:	da02      	bge.n	8015820 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	68fa      	ldr	r2, [r7, #12]
 801581e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015824:	2200      	movs	r2, #0
 8015826:	69b9      	ldr	r1, [r7, #24]
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f7ff fdef 	bl	801540c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801582e:	687a      	ldr	r2, [r7, #4]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	3304      	adds	r3, #4
 8015834:	69b9      	ldr	r1, [r7, #24]
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f7ff fe26 	bl	8015488 <tcp_output_control_segment>
 801583c:	4603      	mov	r3, r0
 801583e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015840:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015844:	4618      	mov	r0, r3
 8015846:	372c      	adds	r7, #44	; 0x2c
 8015848:	46bd      	mov	sp, r7
 801584a:	bd90      	pop	{r4, r7, pc}
 801584c:	0801cb20 	.word	0x0801cb20
 8015850:	0801d318 	.word	0x0801d318
 8015854:	0801cb74 	.word	0x0801cb74

08015858 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015860:	f7fa ff0c 	bl	801067c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015864:	4b0a      	ldr	r3, [pc, #40]	; (8015890 <tcpip_tcp_timer+0x38>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d103      	bne.n	8015874 <tcpip_tcp_timer+0x1c>
 801586c:	4b09      	ldr	r3, [pc, #36]	; (8015894 <tcpip_tcp_timer+0x3c>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d005      	beq.n	8015880 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015874:	2200      	movs	r2, #0
 8015876:	4908      	ldr	r1, [pc, #32]	; (8015898 <tcpip_tcp_timer+0x40>)
 8015878:	20fa      	movs	r0, #250	; 0xfa
 801587a:	f000 f8f3 	bl	8015a64 <sys_timeout>
 801587e:	e003      	b.n	8015888 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015880:	4b06      	ldr	r3, [pc, #24]	; (801589c <tcpip_tcp_timer+0x44>)
 8015882:	2200      	movs	r2, #0
 8015884:	601a      	str	r2, [r3, #0]
  }
}
 8015886:	bf00      	nop
 8015888:	bf00      	nop
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	20008004 	.word	0x20008004
 8015894:	20008008 	.word	0x20008008
 8015898:	08015859 	.word	0x08015859
 801589c:	20008050 	.word	0x20008050

080158a0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80158a4:	4b0a      	ldr	r3, [pc, #40]	; (80158d0 <tcp_timer_needed+0x30>)
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d10f      	bne.n	80158cc <tcp_timer_needed+0x2c>
 80158ac:	4b09      	ldr	r3, [pc, #36]	; (80158d4 <tcp_timer_needed+0x34>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d103      	bne.n	80158bc <tcp_timer_needed+0x1c>
 80158b4:	4b08      	ldr	r3, [pc, #32]	; (80158d8 <tcp_timer_needed+0x38>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d007      	beq.n	80158cc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80158bc:	4b04      	ldr	r3, [pc, #16]	; (80158d0 <tcp_timer_needed+0x30>)
 80158be:	2201      	movs	r2, #1
 80158c0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80158c2:	2200      	movs	r2, #0
 80158c4:	4905      	ldr	r1, [pc, #20]	; (80158dc <tcp_timer_needed+0x3c>)
 80158c6:	20fa      	movs	r0, #250	; 0xfa
 80158c8:	f000 f8cc 	bl	8015a64 <sys_timeout>
  }
}
 80158cc:	bf00      	nop
 80158ce:	bd80      	pop	{r7, pc}
 80158d0:	20008050 	.word	0x20008050
 80158d4:	20008004 	.word	0x20008004
 80158d8:	20008008 	.word	0x20008008
 80158dc:	08015859 	.word	0x08015859

080158e0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b086      	sub	sp, #24
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	60f8      	str	r0, [r7, #12]
 80158e8:	60b9      	str	r1, [r7, #8]
 80158ea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80158ec:	2006      	movs	r0, #6
 80158ee:	f7f9 fd27 	bl	800f340 <memp_malloc>
 80158f2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d109      	bne.n	801590e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80158fa:	693b      	ldr	r3, [r7, #16]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d151      	bne.n	80159a4 <sys_timeout_abs+0xc4>
 8015900:	4b2a      	ldr	r3, [pc, #168]	; (80159ac <sys_timeout_abs+0xcc>)
 8015902:	22be      	movs	r2, #190	; 0xbe
 8015904:	492a      	ldr	r1, [pc, #168]	; (80159b0 <sys_timeout_abs+0xd0>)
 8015906:	482b      	ldr	r0, [pc, #172]	; (80159b4 <sys_timeout_abs+0xd4>)
 8015908:	f003 faa0 	bl	8018e4c <iprintf>
    return;
 801590c:	e04a      	b.n	80159a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	2200      	movs	r2, #0
 8015912:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015914:	693b      	ldr	r3, [r7, #16]
 8015916:	68ba      	ldr	r2, [r7, #8]
 8015918:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	687a      	ldr	r2, [r7, #4]
 801591e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	68fa      	ldr	r2, [r7, #12]
 8015924:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015926:	4b24      	ldr	r3, [pc, #144]	; (80159b8 <sys_timeout_abs+0xd8>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d103      	bne.n	8015936 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801592e:	4a22      	ldr	r2, [pc, #136]	; (80159b8 <sys_timeout_abs+0xd8>)
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	6013      	str	r3, [r2, #0]
    return;
 8015934:	e037      	b.n	80159a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	685a      	ldr	r2, [r3, #4]
 801593a:	4b1f      	ldr	r3, [pc, #124]	; (80159b8 <sys_timeout_abs+0xd8>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	1ad3      	subs	r3, r2, r3
 8015942:	0fdb      	lsrs	r3, r3, #31
 8015944:	f003 0301 	and.w	r3, r3, #1
 8015948:	b2db      	uxtb	r3, r3
 801594a:	2b00      	cmp	r3, #0
 801594c:	d007      	beq.n	801595e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801594e:	4b1a      	ldr	r3, [pc, #104]	; (80159b8 <sys_timeout_abs+0xd8>)
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015956:	4a18      	ldr	r2, [pc, #96]	; (80159b8 <sys_timeout_abs+0xd8>)
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	6013      	str	r3, [r2, #0]
 801595c:	e023      	b.n	80159a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801595e:	4b16      	ldr	r3, [pc, #88]	; (80159b8 <sys_timeout_abs+0xd8>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	617b      	str	r3, [r7, #20]
 8015964:	e01a      	b.n	801599c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d00b      	beq.n	8015986 <sys_timeout_abs+0xa6>
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	685a      	ldr	r2, [r3, #4]
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	685b      	ldr	r3, [r3, #4]
 8015978:	1ad3      	subs	r3, r2, r3
 801597a:	0fdb      	lsrs	r3, r3, #31
 801597c:	f003 0301 	and.w	r3, r3, #1
 8015980:	b2db      	uxtb	r3, r3
 8015982:	2b00      	cmp	r3, #0
 8015984:	d007      	beq.n	8015996 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	693a      	ldr	r2, [r7, #16]
 8015992:	601a      	str	r2, [r3, #0]
        break;
 8015994:	e007      	b.n	80159a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	617b      	str	r3, [r7, #20]
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d1e1      	bne.n	8015966 <sys_timeout_abs+0x86>
 80159a2:	e000      	b.n	80159a6 <sys_timeout_abs+0xc6>
    return;
 80159a4:	bf00      	nop
      }
    }
  }
}
 80159a6:	3718      	adds	r7, #24
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	0801d33c 	.word	0x0801d33c
 80159b0:	0801d370 	.word	0x0801d370
 80159b4:	0801d3b0 	.word	0x0801d3b0
 80159b8:	20008048 	.word	0x20008048

080159bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b086      	sub	sp, #24
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	685b      	ldr	r3, [r3, #4]
 80159cc:	4798      	blx	r3

  now = sys_now();
 80159ce:	f7f8 fda7 	bl	800e520 <sys_now>
 80159d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80159d4:	697b      	ldr	r3, [r7, #20]
 80159d6:	681a      	ldr	r2, [r3, #0]
 80159d8:	4b0f      	ldr	r3, [pc, #60]	; (8015a18 <lwip_cyclic_timer+0x5c>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	4413      	add	r3, r2
 80159de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80159e0:	68fa      	ldr	r2, [r7, #12]
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	1ad3      	subs	r3, r2, r3
 80159e6:	0fdb      	lsrs	r3, r3, #31
 80159e8:	f003 0301 	and.w	r3, r3, #1
 80159ec:	b2db      	uxtb	r3, r3
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d009      	beq.n	8015a06 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	681a      	ldr	r2, [r3, #0]
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	4413      	add	r3, r2
 80159fa:	687a      	ldr	r2, [r7, #4]
 80159fc:	4907      	ldr	r1, [pc, #28]	; (8015a1c <lwip_cyclic_timer+0x60>)
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff ff6e 	bl	80158e0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015a04:	e004      	b.n	8015a10 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015a06:	687a      	ldr	r2, [r7, #4]
 8015a08:	4904      	ldr	r1, [pc, #16]	; (8015a1c <lwip_cyclic_timer+0x60>)
 8015a0a:	68f8      	ldr	r0, [r7, #12]
 8015a0c:	f7ff ff68 	bl	80158e0 <sys_timeout_abs>
}
 8015a10:	bf00      	nop
 8015a12:	3718      	adds	r7, #24
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}
 8015a18:	2000804c 	.word	0x2000804c
 8015a1c:	080159bd 	.word	0x080159bd

08015a20 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015a26:	2301      	movs	r3, #1
 8015a28:	607b      	str	r3, [r7, #4]
 8015a2a:	e00e      	b.n	8015a4a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015a2c:	4a0b      	ldr	r2, [pc, #44]	; (8015a5c <sys_timeouts_init+0x3c>)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	00db      	lsls	r3, r3, #3
 8015a38:	4a08      	ldr	r2, [pc, #32]	; (8015a5c <sys_timeouts_init+0x3c>)
 8015a3a:	4413      	add	r3, r2
 8015a3c:	461a      	mov	r2, r3
 8015a3e:	4908      	ldr	r1, [pc, #32]	; (8015a60 <sys_timeouts_init+0x40>)
 8015a40:	f000 f810 	bl	8015a64 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	3301      	adds	r3, #1
 8015a48:	607b      	str	r3, [r7, #4]
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2b02      	cmp	r3, #2
 8015a4e:	d9ed      	bls.n	8015a2c <sys_timeouts_init+0xc>
  }
}
 8015a50:	bf00      	nop
 8015a52:	bf00      	nop
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	0801df70 	.word	0x0801df70
 8015a60:	080159bd 	.word	0x080159bd

08015a64 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b086      	sub	sp, #24
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	60f8      	str	r0, [r7, #12]
 8015a6c:	60b9      	str	r1, [r7, #8]
 8015a6e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015a76:	d306      	bcc.n	8015a86 <sys_timeout+0x22>
 8015a78:	4b0a      	ldr	r3, [pc, #40]	; (8015aa4 <sys_timeout+0x40>)
 8015a7a:	f240 1229 	movw	r2, #297	; 0x129
 8015a7e:	490a      	ldr	r1, [pc, #40]	; (8015aa8 <sys_timeout+0x44>)
 8015a80:	480a      	ldr	r0, [pc, #40]	; (8015aac <sys_timeout+0x48>)
 8015a82:	f003 f9e3 	bl	8018e4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015a86:	f7f8 fd4b 	bl	800e520 <sys_now>
 8015a8a:	4602      	mov	r2, r0
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	4413      	add	r3, r2
 8015a90:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	68b9      	ldr	r1, [r7, #8]
 8015a96:	6978      	ldr	r0, [r7, #20]
 8015a98:	f7ff ff22 	bl	80158e0 <sys_timeout_abs>
#endif
}
 8015a9c:	bf00      	nop
 8015a9e:	3718      	adds	r7, #24
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	0801d33c 	.word	0x0801d33c
 8015aa8:	0801d3d8 	.word	0x0801d3d8
 8015aac:	0801d3b0 	.word	0x0801d3b0

08015ab0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015ab4:	f002 fca2 	bl	80183fc <rand>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015ac0:	b29b      	uxth	r3, r3
 8015ac2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015ac6:	b29a      	uxth	r2, r3
 8015ac8:	4b01      	ldr	r3, [pc, #4]	; (8015ad0 <udp_init+0x20>)
 8015aca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015acc:	bf00      	nop
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	2000005c 	.word	0x2000005c

08015ad4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	4613      	mov	r3, r2
 8015ae0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d105      	bne.n	8015af4 <udp_input_local_match+0x20>
 8015ae8:	4b27      	ldr	r3, [pc, #156]	; (8015b88 <udp_input_local_match+0xb4>)
 8015aea:	2287      	movs	r2, #135	; 0x87
 8015aec:	4927      	ldr	r1, [pc, #156]	; (8015b8c <udp_input_local_match+0xb8>)
 8015aee:	4828      	ldr	r0, [pc, #160]	; (8015b90 <udp_input_local_match+0xbc>)
 8015af0:	f003 f9ac 	bl	8018e4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015af4:	68bb      	ldr	r3, [r7, #8]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d105      	bne.n	8015b06 <udp_input_local_match+0x32>
 8015afa:	4b23      	ldr	r3, [pc, #140]	; (8015b88 <udp_input_local_match+0xb4>)
 8015afc:	2288      	movs	r2, #136	; 0x88
 8015afe:	4925      	ldr	r1, [pc, #148]	; (8015b94 <udp_input_local_match+0xc0>)
 8015b00:	4823      	ldr	r0, [pc, #140]	; (8015b90 <udp_input_local_match+0xbc>)
 8015b02:	f003 f9a3 	bl	8018e4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	7a1b      	ldrb	r3, [r3, #8]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d00b      	beq.n	8015b26 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	7a1a      	ldrb	r2, [r3, #8]
 8015b12:	4b21      	ldr	r3, [pc, #132]	; (8015b98 <udp_input_local_match+0xc4>)
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015b1a:	3301      	adds	r3, #1
 8015b1c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d001      	beq.n	8015b26 <udp_input_local_match+0x52>
    return 0;
 8015b22:	2300      	movs	r3, #0
 8015b24:	e02b      	b.n	8015b7e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015b26:	79fb      	ldrb	r3, [r7, #7]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d018      	beq.n	8015b5e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d013      	beq.n	8015b5a <udp_input_local_match+0x86>
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d00f      	beq.n	8015b5a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015b3a:	4b17      	ldr	r3, [pc, #92]	; (8015b98 <udp_input_local_match+0xc4>)
 8015b3c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b42:	d00a      	beq.n	8015b5a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681a      	ldr	r2, [r3, #0]
 8015b48:	4b13      	ldr	r3, [pc, #76]	; (8015b98 <udp_input_local_match+0xc4>)
 8015b4a:	695b      	ldr	r3, [r3, #20]
 8015b4c:	405a      	eors	r2, r3
 8015b4e:	68bb      	ldr	r3, [r7, #8]
 8015b50:	3308      	adds	r3, #8
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d110      	bne.n	8015b7c <udp_input_local_match+0xa8>
          return 1;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	e00f      	b.n	8015b7e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d009      	beq.n	8015b78 <udp_input_local_match+0xa4>
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d005      	beq.n	8015b78 <udp_input_local_match+0xa4>
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	4b09      	ldr	r3, [pc, #36]	; (8015b98 <udp_input_local_match+0xc4>)
 8015b72:	695b      	ldr	r3, [r3, #20]
 8015b74:	429a      	cmp	r2, r3
 8015b76:	d101      	bne.n	8015b7c <udp_input_local_match+0xa8>
        return 1;
 8015b78:	2301      	movs	r3, #1
 8015b7a:	e000      	b.n	8015b7e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015b7c:	2300      	movs	r3, #0
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	0801d424 	.word	0x0801d424
 8015b8c:	0801d454 	.word	0x0801d454
 8015b90:	0801d478 	.word	0x0801d478
 8015b94:	0801d4a0 	.word	0x0801d4a0
 8015b98:	200050dc 	.word	0x200050dc

08015b9c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015b9c:	b590      	push	{r4, r7, lr}
 8015b9e:	b08d      	sub	sp, #52	; 0x34
 8015ba0:	af02      	add	r7, sp, #8
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d105      	bne.n	8015bbc <udp_input+0x20>
 8015bb0:	4b7c      	ldr	r3, [pc, #496]	; (8015da4 <udp_input+0x208>)
 8015bb2:	22cf      	movs	r2, #207	; 0xcf
 8015bb4:	497c      	ldr	r1, [pc, #496]	; (8015da8 <udp_input+0x20c>)
 8015bb6:	487d      	ldr	r0, [pc, #500]	; (8015dac <udp_input+0x210>)
 8015bb8:	f003 f948 	bl	8018e4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d105      	bne.n	8015bce <udp_input+0x32>
 8015bc2:	4b78      	ldr	r3, [pc, #480]	; (8015da4 <udp_input+0x208>)
 8015bc4:	22d0      	movs	r2, #208	; 0xd0
 8015bc6:	497a      	ldr	r1, [pc, #488]	; (8015db0 <udp_input+0x214>)
 8015bc8:	4878      	ldr	r0, [pc, #480]	; (8015dac <udp_input+0x210>)
 8015bca:	f003 f93f 	bl	8018e4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	895b      	ldrh	r3, [r3, #10]
 8015bd2:	2b07      	cmp	r3, #7
 8015bd4:	d803      	bhi.n	8015bde <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f7fa fa78 	bl	80100cc <pbuf_free>
    goto end;
 8015bdc:	e0de      	b.n	8015d9c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015be4:	4b73      	ldr	r3, [pc, #460]	; (8015db4 <udp_input+0x218>)
 8015be6:	695b      	ldr	r3, [r3, #20]
 8015be8:	4a72      	ldr	r2, [pc, #456]	; (8015db4 <udp_input+0x218>)
 8015bea:	6812      	ldr	r2, [r2, #0]
 8015bec:	4611      	mov	r1, r2
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f001 fcae 	bl	8017550 <ip4_addr_isbroadcast_u32>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	881b      	ldrh	r3, [r3, #0]
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7f8 fe6e 	bl	800e8e0 <lwip_htons>
 8015c04:	4603      	mov	r3, r0
 8015c06:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	885b      	ldrh	r3, [r3, #2]
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7f8 fe66 	bl	800e8e0 <lwip_htons>
 8015c14:	4603      	mov	r3, r0
 8015c16:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015c20:	2300      	movs	r3, #0
 8015c22:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c24:	4b64      	ldr	r3, [pc, #400]	; (8015db8 <udp_input+0x21c>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	627b      	str	r3, [r7, #36]	; 0x24
 8015c2a:	e054      	b.n	8015cd6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2e:	8a5b      	ldrh	r3, [r3, #18]
 8015c30:	89fa      	ldrh	r2, [r7, #14]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d14a      	bne.n	8015ccc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015c36:	7cfb      	ldrb	r3, [r7, #19]
 8015c38:	461a      	mov	r2, r3
 8015c3a:	6839      	ldr	r1, [r7, #0]
 8015c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c3e:	f7ff ff49 	bl	8015ad4 <udp_input_local_match>
 8015c42:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d041      	beq.n	8015ccc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4a:	7c1b      	ldrb	r3, [r3, #16]
 8015c4c:	f003 0304 	and.w	r3, r3, #4
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d11d      	bne.n	8015c90 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015c54:	69fb      	ldr	r3, [r7, #28]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d102      	bne.n	8015c60 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5c:	61fb      	str	r3, [r7, #28]
 8015c5e:	e017      	b.n	8015c90 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015c60:	7cfb      	ldrb	r3, [r7, #19]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d014      	beq.n	8015c90 <udp_input+0xf4>
 8015c66:	4b53      	ldr	r3, [pc, #332]	; (8015db4 <udp_input+0x218>)
 8015c68:	695b      	ldr	r3, [r3, #20]
 8015c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c6e:	d10f      	bne.n	8015c90 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015c70:	69fb      	ldr	r3, [r7, #28]
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	3304      	adds	r3, #4
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d008      	beq.n	8015c90 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c80:	681a      	ldr	r2, [r3, #0]
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	3304      	adds	r3, #4
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d101      	bne.n	8015c90 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c92:	8a9b      	ldrh	r3, [r3, #20]
 8015c94:	8a3a      	ldrh	r2, [r7, #16]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d118      	bne.n	8015ccc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d005      	beq.n	8015cae <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca4:	685a      	ldr	r2, [r3, #4]
 8015ca6:	4b43      	ldr	r3, [pc, #268]	; (8015db4 <udp_input+0x218>)
 8015ca8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d10e      	bne.n	8015ccc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015cae:	6a3b      	ldr	r3, [r7, #32]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d014      	beq.n	8015cde <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb6:	68da      	ldr	r2, [r3, #12]
 8015cb8:	6a3b      	ldr	r3, [r7, #32]
 8015cba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015cbc:	4b3e      	ldr	r3, [pc, #248]	; (8015db8 <udp_input+0x21c>)
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015cc4:	4a3c      	ldr	r2, [pc, #240]	; (8015db8 <udp_input+0x21c>)
 8015cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015cca:	e008      	b.n	8015cde <udp_input+0x142>
      }
    }

    prev = pcb;
 8015ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cce:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd2:	68db      	ldr	r3, [r3, #12]
 8015cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8015cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d1a7      	bne.n	8015c2c <udp_input+0x90>
 8015cdc:	e000      	b.n	8015ce0 <udp_input+0x144>
        break;
 8015cde:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d101      	bne.n	8015cea <udp_input+0x14e>
    pcb = uncon_pcb;
 8015ce6:	69fb      	ldr	r3, [r7, #28]
 8015ce8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d002      	beq.n	8015cf6 <udp_input+0x15a>
    for_us = 1;
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	76fb      	strb	r3, [r7, #27]
 8015cf4:	e00a      	b.n	8015d0c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	3304      	adds	r3, #4
 8015cfa:	681a      	ldr	r2, [r3, #0]
 8015cfc:	4b2d      	ldr	r3, [pc, #180]	; (8015db4 <udp_input+0x218>)
 8015cfe:	695b      	ldr	r3, [r3, #20]
 8015d00:	429a      	cmp	r2, r3
 8015d02:	bf0c      	ite	eq
 8015d04:	2301      	moveq	r3, #1
 8015d06:	2300      	movne	r3, #0
 8015d08:	b2db      	uxtb	r3, r3
 8015d0a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015d0c:	7efb      	ldrb	r3, [r7, #27]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d041      	beq.n	8015d96 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015d12:	2108      	movs	r1, #8
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f7fa f953 	bl	800ffc0 <pbuf_remove_header>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00a      	beq.n	8015d36 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015d20:	4b20      	ldr	r3, [pc, #128]	; (8015da4 <udp_input+0x208>)
 8015d22:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015d26:	4925      	ldr	r1, [pc, #148]	; (8015dbc <udp_input+0x220>)
 8015d28:	4820      	ldr	r0, [pc, #128]	; (8015dac <udp_input+0x210>)
 8015d2a:	f003 f88f 	bl	8018e4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f7fa f9cc 	bl	80100cc <pbuf_free>
      goto end;
 8015d34:	e032      	b.n	8015d9c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d012      	beq.n	8015d62 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3e:	699b      	ldr	r3, [r3, #24]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d00a      	beq.n	8015d5a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d46:	699c      	ldr	r4, [r3, #24]
 8015d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d4a:	69d8      	ldr	r0, [r3, #28]
 8015d4c:	8a3b      	ldrh	r3, [r7, #16]
 8015d4e:	9300      	str	r3, [sp, #0]
 8015d50:	4b1b      	ldr	r3, [pc, #108]	; (8015dc0 <udp_input+0x224>)
 8015d52:	687a      	ldr	r2, [r7, #4]
 8015d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d56:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015d58:	e021      	b.n	8015d9e <udp_input+0x202>
        pbuf_free(p);
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	f7fa f9b6 	bl	80100cc <pbuf_free>
        goto end;
 8015d60:	e01c      	b.n	8015d9c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015d62:	7cfb      	ldrb	r3, [r7, #19]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d112      	bne.n	8015d8e <udp_input+0x1f2>
 8015d68:	4b12      	ldr	r3, [pc, #72]	; (8015db4 <udp_input+0x218>)
 8015d6a:	695b      	ldr	r3, [r3, #20]
 8015d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d70:	2be0      	cmp	r3, #224	; 0xe0
 8015d72:	d00c      	beq.n	8015d8e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015d74:	4b0f      	ldr	r3, [pc, #60]	; (8015db4 <udp_input+0x218>)
 8015d76:	899b      	ldrh	r3, [r3, #12]
 8015d78:	3308      	adds	r3, #8
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	b21b      	sxth	r3, r3
 8015d7e:	4619      	mov	r1, r3
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f7fa f990 	bl	80100a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015d86:	2103      	movs	r1, #3
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f001 f8b7 	bl	8016efc <icmp_dest_unreach>
      pbuf_free(p);
 8015d8e:	6878      	ldr	r0, [r7, #4]
 8015d90:	f7fa f99c 	bl	80100cc <pbuf_free>
  return;
 8015d94:	e003      	b.n	8015d9e <udp_input+0x202>
    pbuf_free(p);
 8015d96:	6878      	ldr	r0, [r7, #4]
 8015d98:	f7fa f998 	bl	80100cc <pbuf_free>
  return;
 8015d9c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015d9e:	372c      	adds	r7, #44	; 0x2c
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd90      	pop	{r4, r7, pc}
 8015da4:	0801d424 	.word	0x0801d424
 8015da8:	0801d4c8 	.word	0x0801d4c8
 8015dac:	0801d478 	.word	0x0801d478
 8015db0:	0801d4e0 	.word	0x0801d4e0
 8015db4:	200050dc 	.word	0x200050dc
 8015db8:	20008054 	.word	0x20008054
 8015dbc:	0801d4fc 	.word	0x0801d4fc
 8015dc0:	200050ec 	.word	0x200050ec

08015dc4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015dc4:	b480      	push	{r7}
 8015dc6:	b085      	sub	sp, #20
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
 8015dcc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d01e      	beq.n	8015e12 <udp_netif_ip_addr_changed+0x4e>
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d01a      	beq.n	8015e12 <udp_netif_ip_addr_changed+0x4e>
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d017      	beq.n	8015e12 <udp_netif_ip_addr_changed+0x4e>
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d013      	beq.n	8015e12 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015dea:	4b0d      	ldr	r3, [pc, #52]	; (8015e20 <udp_netif_ip_addr_changed+0x5c>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	60fb      	str	r3, [r7, #12]
 8015df0:	e00c      	b.n	8015e0c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	681a      	ldr	r2, [r3, #0]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	d103      	bne.n	8015e06 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	681a      	ldr	r2, [r3, #0]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	68db      	ldr	r3, [r3, #12]
 8015e0a:	60fb      	str	r3, [r7, #12]
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d1ef      	bne.n	8015df2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015e12:	bf00      	nop
 8015e14:	3714      	adds	r7, #20
 8015e16:	46bd      	mov	sp, r7
 8015e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1c:	4770      	bx	lr
 8015e1e:	bf00      	nop
 8015e20:	20008054 	.word	0x20008054

08015e24 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015e2c:	4915      	ldr	r1, [pc, #84]	; (8015e84 <etharp_free_entry+0x60>)
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	4613      	mov	r3, r2
 8015e32:	005b      	lsls	r3, r3, #1
 8015e34:	4413      	add	r3, r2
 8015e36:	00db      	lsls	r3, r3, #3
 8015e38:	440b      	add	r3, r1
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d013      	beq.n	8015e68 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015e40:	4910      	ldr	r1, [pc, #64]	; (8015e84 <etharp_free_entry+0x60>)
 8015e42:	687a      	ldr	r2, [r7, #4]
 8015e44:	4613      	mov	r3, r2
 8015e46:	005b      	lsls	r3, r3, #1
 8015e48:	4413      	add	r3, r2
 8015e4a:	00db      	lsls	r3, r3, #3
 8015e4c:	440b      	add	r3, r1
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7fa f93b 	bl	80100cc <pbuf_free>
    arp_table[i].q = NULL;
 8015e56:	490b      	ldr	r1, [pc, #44]	; (8015e84 <etharp_free_entry+0x60>)
 8015e58:	687a      	ldr	r2, [r7, #4]
 8015e5a:	4613      	mov	r3, r2
 8015e5c:	005b      	lsls	r3, r3, #1
 8015e5e:	4413      	add	r3, r2
 8015e60:	00db      	lsls	r3, r3, #3
 8015e62:	440b      	add	r3, r1
 8015e64:	2200      	movs	r2, #0
 8015e66:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015e68:	4906      	ldr	r1, [pc, #24]	; (8015e84 <etharp_free_entry+0x60>)
 8015e6a:	687a      	ldr	r2, [r7, #4]
 8015e6c:	4613      	mov	r3, r2
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	4413      	add	r3, r2
 8015e72:	00db      	lsls	r3, r3, #3
 8015e74:	440b      	add	r3, r1
 8015e76:	3314      	adds	r3, #20
 8015e78:	2200      	movs	r2, #0
 8015e7a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015e7c:	bf00      	nop
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	20008058 	.word	0x20008058

08015e88 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e8e:	2300      	movs	r3, #0
 8015e90:	607b      	str	r3, [r7, #4]
 8015e92:	e096      	b.n	8015fc2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015e94:	494f      	ldr	r1, [pc, #316]	; (8015fd4 <etharp_tmr+0x14c>)
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	4613      	mov	r3, r2
 8015e9a:	005b      	lsls	r3, r3, #1
 8015e9c:	4413      	add	r3, r2
 8015e9e:	00db      	lsls	r3, r3, #3
 8015ea0:	440b      	add	r3, r1
 8015ea2:	3314      	adds	r3, #20
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015ea8:	78fb      	ldrb	r3, [r7, #3]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	f000 8086 	beq.w	8015fbc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015eb0:	4948      	ldr	r1, [pc, #288]	; (8015fd4 <etharp_tmr+0x14c>)
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	4613      	mov	r3, r2
 8015eb6:	005b      	lsls	r3, r3, #1
 8015eb8:	4413      	add	r3, r2
 8015eba:	00db      	lsls	r3, r3, #3
 8015ebc:	440b      	add	r3, r1
 8015ebe:	3312      	adds	r3, #18
 8015ec0:	881b      	ldrh	r3, [r3, #0]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	b298      	uxth	r0, r3
 8015ec6:	4943      	ldr	r1, [pc, #268]	; (8015fd4 <etharp_tmr+0x14c>)
 8015ec8:	687a      	ldr	r2, [r7, #4]
 8015eca:	4613      	mov	r3, r2
 8015ecc:	005b      	lsls	r3, r3, #1
 8015ece:	4413      	add	r3, r2
 8015ed0:	00db      	lsls	r3, r3, #3
 8015ed2:	440b      	add	r3, r1
 8015ed4:	3312      	adds	r3, #18
 8015ed6:	4602      	mov	r2, r0
 8015ed8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015eda:	493e      	ldr	r1, [pc, #248]	; (8015fd4 <etharp_tmr+0x14c>)
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	4613      	mov	r3, r2
 8015ee0:	005b      	lsls	r3, r3, #1
 8015ee2:	4413      	add	r3, r2
 8015ee4:	00db      	lsls	r3, r3, #3
 8015ee6:	440b      	add	r3, r1
 8015ee8:	3312      	adds	r3, #18
 8015eea:	881b      	ldrh	r3, [r3, #0]
 8015eec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015ef0:	d215      	bcs.n	8015f1e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015ef2:	4938      	ldr	r1, [pc, #224]	; (8015fd4 <etharp_tmr+0x14c>)
 8015ef4:	687a      	ldr	r2, [r7, #4]
 8015ef6:	4613      	mov	r3, r2
 8015ef8:	005b      	lsls	r3, r3, #1
 8015efa:	4413      	add	r3, r2
 8015efc:	00db      	lsls	r3, r3, #3
 8015efe:	440b      	add	r3, r1
 8015f00:	3314      	adds	r3, #20
 8015f02:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015f04:	2b01      	cmp	r3, #1
 8015f06:	d10e      	bne.n	8015f26 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015f08:	4932      	ldr	r1, [pc, #200]	; (8015fd4 <etharp_tmr+0x14c>)
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	4613      	mov	r3, r2
 8015f0e:	005b      	lsls	r3, r3, #1
 8015f10:	4413      	add	r3, r2
 8015f12:	00db      	lsls	r3, r3, #3
 8015f14:	440b      	add	r3, r1
 8015f16:	3312      	adds	r3, #18
 8015f18:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015f1a:	2b04      	cmp	r3, #4
 8015f1c:	d903      	bls.n	8015f26 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f7ff ff80 	bl	8015e24 <etharp_free_entry>
 8015f24:	e04a      	b.n	8015fbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015f26:	492b      	ldr	r1, [pc, #172]	; (8015fd4 <etharp_tmr+0x14c>)
 8015f28:	687a      	ldr	r2, [r7, #4]
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	005b      	lsls	r3, r3, #1
 8015f2e:	4413      	add	r3, r2
 8015f30:	00db      	lsls	r3, r3, #3
 8015f32:	440b      	add	r3, r1
 8015f34:	3314      	adds	r3, #20
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	2b03      	cmp	r3, #3
 8015f3a:	d10a      	bne.n	8015f52 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015f3c:	4925      	ldr	r1, [pc, #148]	; (8015fd4 <etharp_tmr+0x14c>)
 8015f3e:	687a      	ldr	r2, [r7, #4]
 8015f40:	4613      	mov	r3, r2
 8015f42:	005b      	lsls	r3, r3, #1
 8015f44:	4413      	add	r3, r2
 8015f46:	00db      	lsls	r3, r3, #3
 8015f48:	440b      	add	r3, r1
 8015f4a:	3314      	adds	r3, #20
 8015f4c:	2204      	movs	r2, #4
 8015f4e:	701a      	strb	r2, [r3, #0]
 8015f50:	e034      	b.n	8015fbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015f52:	4920      	ldr	r1, [pc, #128]	; (8015fd4 <etharp_tmr+0x14c>)
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	4613      	mov	r3, r2
 8015f58:	005b      	lsls	r3, r3, #1
 8015f5a:	4413      	add	r3, r2
 8015f5c:	00db      	lsls	r3, r3, #3
 8015f5e:	440b      	add	r3, r1
 8015f60:	3314      	adds	r3, #20
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	2b04      	cmp	r3, #4
 8015f66:	d10a      	bne.n	8015f7e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015f68:	491a      	ldr	r1, [pc, #104]	; (8015fd4 <etharp_tmr+0x14c>)
 8015f6a:	687a      	ldr	r2, [r7, #4]
 8015f6c:	4613      	mov	r3, r2
 8015f6e:	005b      	lsls	r3, r3, #1
 8015f70:	4413      	add	r3, r2
 8015f72:	00db      	lsls	r3, r3, #3
 8015f74:	440b      	add	r3, r1
 8015f76:	3314      	adds	r3, #20
 8015f78:	2202      	movs	r2, #2
 8015f7a:	701a      	strb	r2, [r3, #0]
 8015f7c:	e01e      	b.n	8015fbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015f7e:	4915      	ldr	r1, [pc, #84]	; (8015fd4 <etharp_tmr+0x14c>)
 8015f80:	687a      	ldr	r2, [r7, #4]
 8015f82:	4613      	mov	r3, r2
 8015f84:	005b      	lsls	r3, r3, #1
 8015f86:	4413      	add	r3, r2
 8015f88:	00db      	lsls	r3, r3, #3
 8015f8a:	440b      	add	r3, r1
 8015f8c:	3314      	adds	r3, #20
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d113      	bne.n	8015fbc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015f94:	490f      	ldr	r1, [pc, #60]	; (8015fd4 <etharp_tmr+0x14c>)
 8015f96:	687a      	ldr	r2, [r7, #4]
 8015f98:	4613      	mov	r3, r2
 8015f9a:	005b      	lsls	r3, r3, #1
 8015f9c:	4413      	add	r3, r2
 8015f9e:	00db      	lsls	r3, r3, #3
 8015fa0:	440b      	add	r3, r1
 8015fa2:	3308      	adds	r3, #8
 8015fa4:	6818      	ldr	r0, [r3, #0]
 8015fa6:	687a      	ldr	r2, [r7, #4]
 8015fa8:	4613      	mov	r3, r2
 8015faa:	005b      	lsls	r3, r3, #1
 8015fac:	4413      	add	r3, r2
 8015fae:	00db      	lsls	r3, r3, #3
 8015fb0:	4a08      	ldr	r2, [pc, #32]	; (8015fd4 <etharp_tmr+0x14c>)
 8015fb2:	4413      	add	r3, r2
 8015fb4:	3304      	adds	r3, #4
 8015fb6:	4619      	mov	r1, r3
 8015fb8:	f000 fe6e 	bl	8016c98 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	607b      	str	r3, [r7, #4]
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2b09      	cmp	r3, #9
 8015fc6:	f77f af65 	ble.w	8015e94 <etharp_tmr+0xc>
      }
    }
  }
}
 8015fca:	bf00      	nop
 8015fcc:	bf00      	nop
 8015fce:	3708      	adds	r7, #8
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}
 8015fd4:	20008058 	.word	0x20008058

08015fd8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b08a      	sub	sp, #40	; 0x28
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	60f8      	str	r0, [r7, #12]
 8015fe0:	460b      	mov	r3, r1
 8015fe2:	607a      	str	r2, [r7, #4]
 8015fe4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015fe6:	230a      	movs	r3, #10
 8015fe8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015fea:	230a      	movs	r3, #10
 8015fec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015fee:	230a      	movs	r3, #10
 8015ff0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015ff6:	230a      	movs	r3, #10
 8015ff8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	83bb      	strh	r3, [r7, #28]
 8015ffe:	2300      	movs	r3, #0
 8016000:	837b      	strh	r3, [r7, #26]
 8016002:	2300      	movs	r3, #0
 8016004:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016006:	2300      	movs	r3, #0
 8016008:	843b      	strh	r3, [r7, #32]
 801600a:	e0ae      	b.n	801616a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801600c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016010:	49a6      	ldr	r1, [pc, #664]	; (80162ac <etharp_find_entry+0x2d4>)
 8016012:	4613      	mov	r3, r2
 8016014:	005b      	lsls	r3, r3, #1
 8016016:	4413      	add	r3, r2
 8016018:	00db      	lsls	r3, r3, #3
 801601a:	440b      	add	r3, r1
 801601c:	3314      	adds	r3, #20
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016022:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016026:	2b0a      	cmp	r3, #10
 8016028:	d105      	bne.n	8016036 <etharp_find_entry+0x5e>
 801602a:	7dfb      	ldrb	r3, [r7, #23]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d102      	bne.n	8016036 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016030:	8c3b      	ldrh	r3, [r7, #32]
 8016032:	847b      	strh	r3, [r7, #34]	; 0x22
 8016034:	e095      	b.n	8016162 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016036:	7dfb      	ldrb	r3, [r7, #23]
 8016038:	2b00      	cmp	r3, #0
 801603a:	f000 8092 	beq.w	8016162 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801603e:	7dfb      	ldrb	r3, [r7, #23]
 8016040:	2b01      	cmp	r3, #1
 8016042:	d009      	beq.n	8016058 <etharp_find_entry+0x80>
 8016044:	7dfb      	ldrb	r3, [r7, #23]
 8016046:	2b01      	cmp	r3, #1
 8016048:	d806      	bhi.n	8016058 <etharp_find_entry+0x80>
 801604a:	4b99      	ldr	r3, [pc, #612]	; (80162b0 <etharp_find_entry+0x2d8>)
 801604c:	f240 1223 	movw	r2, #291	; 0x123
 8016050:	4998      	ldr	r1, [pc, #608]	; (80162b4 <etharp_find_entry+0x2dc>)
 8016052:	4899      	ldr	r0, [pc, #612]	; (80162b8 <etharp_find_entry+0x2e0>)
 8016054:	f002 fefa 	bl	8018e4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d020      	beq.n	80160a0 <etharp_find_entry+0xc8>
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	6819      	ldr	r1, [r3, #0]
 8016062:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016066:	4891      	ldr	r0, [pc, #580]	; (80162ac <etharp_find_entry+0x2d4>)
 8016068:	4613      	mov	r3, r2
 801606a:	005b      	lsls	r3, r3, #1
 801606c:	4413      	add	r3, r2
 801606e:	00db      	lsls	r3, r3, #3
 8016070:	4403      	add	r3, r0
 8016072:	3304      	adds	r3, #4
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	4299      	cmp	r1, r3
 8016078:	d112      	bne.n	80160a0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d00c      	beq.n	801609a <etharp_find_entry+0xc2>
 8016080:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016084:	4989      	ldr	r1, [pc, #548]	; (80162ac <etharp_find_entry+0x2d4>)
 8016086:	4613      	mov	r3, r2
 8016088:	005b      	lsls	r3, r3, #1
 801608a:	4413      	add	r3, r2
 801608c:	00db      	lsls	r3, r3, #3
 801608e:	440b      	add	r3, r1
 8016090:	3308      	adds	r3, #8
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	687a      	ldr	r2, [r7, #4]
 8016096:	429a      	cmp	r2, r3
 8016098:	d102      	bne.n	80160a0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801609a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801609e:	e100      	b.n	80162a2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80160a0:	7dfb      	ldrb	r3, [r7, #23]
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d140      	bne.n	8016128 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80160a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160aa:	4980      	ldr	r1, [pc, #512]	; (80162ac <etharp_find_entry+0x2d4>)
 80160ac:	4613      	mov	r3, r2
 80160ae:	005b      	lsls	r3, r3, #1
 80160b0:	4413      	add	r3, r2
 80160b2:	00db      	lsls	r3, r3, #3
 80160b4:	440b      	add	r3, r1
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d01a      	beq.n	80160f2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80160bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160c0:	497a      	ldr	r1, [pc, #488]	; (80162ac <etharp_find_entry+0x2d4>)
 80160c2:	4613      	mov	r3, r2
 80160c4:	005b      	lsls	r3, r3, #1
 80160c6:	4413      	add	r3, r2
 80160c8:	00db      	lsls	r3, r3, #3
 80160ca:	440b      	add	r3, r1
 80160cc:	3312      	adds	r3, #18
 80160ce:	881b      	ldrh	r3, [r3, #0]
 80160d0:	8bba      	ldrh	r2, [r7, #28]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d845      	bhi.n	8016162 <etharp_find_entry+0x18a>
            old_queue = i;
 80160d6:	8c3b      	ldrh	r3, [r7, #32]
 80160d8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80160da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160de:	4973      	ldr	r1, [pc, #460]	; (80162ac <etharp_find_entry+0x2d4>)
 80160e0:	4613      	mov	r3, r2
 80160e2:	005b      	lsls	r3, r3, #1
 80160e4:	4413      	add	r3, r2
 80160e6:	00db      	lsls	r3, r3, #3
 80160e8:	440b      	add	r3, r1
 80160ea:	3312      	adds	r3, #18
 80160ec:	881b      	ldrh	r3, [r3, #0]
 80160ee:	83bb      	strh	r3, [r7, #28]
 80160f0:	e037      	b.n	8016162 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80160f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160f6:	496d      	ldr	r1, [pc, #436]	; (80162ac <etharp_find_entry+0x2d4>)
 80160f8:	4613      	mov	r3, r2
 80160fa:	005b      	lsls	r3, r3, #1
 80160fc:	4413      	add	r3, r2
 80160fe:	00db      	lsls	r3, r3, #3
 8016100:	440b      	add	r3, r1
 8016102:	3312      	adds	r3, #18
 8016104:	881b      	ldrh	r3, [r3, #0]
 8016106:	8b7a      	ldrh	r2, [r7, #26]
 8016108:	429a      	cmp	r2, r3
 801610a:	d82a      	bhi.n	8016162 <etharp_find_entry+0x18a>
            old_pending = i;
 801610c:	8c3b      	ldrh	r3, [r7, #32]
 801610e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016110:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016114:	4965      	ldr	r1, [pc, #404]	; (80162ac <etharp_find_entry+0x2d4>)
 8016116:	4613      	mov	r3, r2
 8016118:	005b      	lsls	r3, r3, #1
 801611a:	4413      	add	r3, r2
 801611c:	00db      	lsls	r3, r3, #3
 801611e:	440b      	add	r3, r1
 8016120:	3312      	adds	r3, #18
 8016122:	881b      	ldrh	r3, [r3, #0]
 8016124:	837b      	strh	r3, [r7, #26]
 8016126:	e01c      	b.n	8016162 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016128:	7dfb      	ldrb	r3, [r7, #23]
 801612a:	2b01      	cmp	r3, #1
 801612c:	d919      	bls.n	8016162 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801612e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016132:	495e      	ldr	r1, [pc, #376]	; (80162ac <etharp_find_entry+0x2d4>)
 8016134:	4613      	mov	r3, r2
 8016136:	005b      	lsls	r3, r3, #1
 8016138:	4413      	add	r3, r2
 801613a:	00db      	lsls	r3, r3, #3
 801613c:	440b      	add	r3, r1
 801613e:	3312      	adds	r3, #18
 8016140:	881b      	ldrh	r3, [r3, #0]
 8016142:	8b3a      	ldrh	r2, [r7, #24]
 8016144:	429a      	cmp	r2, r3
 8016146:	d80c      	bhi.n	8016162 <etharp_find_entry+0x18a>
            old_stable = i;
 8016148:	8c3b      	ldrh	r3, [r7, #32]
 801614a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801614c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016150:	4956      	ldr	r1, [pc, #344]	; (80162ac <etharp_find_entry+0x2d4>)
 8016152:	4613      	mov	r3, r2
 8016154:	005b      	lsls	r3, r3, #1
 8016156:	4413      	add	r3, r2
 8016158:	00db      	lsls	r3, r3, #3
 801615a:	440b      	add	r3, r1
 801615c:	3312      	adds	r3, #18
 801615e:	881b      	ldrh	r3, [r3, #0]
 8016160:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016162:	8c3b      	ldrh	r3, [r7, #32]
 8016164:	3301      	adds	r3, #1
 8016166:	b29b      	uxth	r3, r3
 8016168:	843b      	strh	r3, [r7, #32]
 801616a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801616e:	2b09      	cmp	r3, #9
 8016170:	f77f af4c 	ble.w	801600c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016174:	7afb      	ldrb	r3, [r7, #11]
 8016176:	f003 0302 	and.w	r3, r3, #2
 801617a:	2b00      	cmp	r3, #0
 801617c:	d108      	bne.n	8016190 <etharp_find_entry+0x1b8>
 801617e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016182:	2b0a      	cmp	r3, #10
 8016184:	d107      	bne.n	8016196 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016186:	7afb      	ldrb	r3, [r7, #11]
 8016188:	f003 0301 	and.w	r3, r3, #1
 801618c:	2b00      	cmp	r3, #0
 801618e:	d102      	bne.n	8016196 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016190:	f04f 33ff 	mov.w	r3, #4294967295
 8016194:	e085      	b.n	80162a2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016196:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801619a:	2b09      	cmp	r3, #9
 801619c:	dc02      	bgt.n	80161a4 <etharp_find_entry+0x1cc>
    i = empty;
 801619e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161a0:	843b      	strh	r3, [r7, #32]
 80161a2:	e039      	b.n	8016218 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80161a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80161a8:	2b09      	cmp	r3, #9
 80161aa:	dc14      	bgt.n	80161d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80161ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80161b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161b4:	493d      	ldr	r1, [pc, #244]	; (80162ac <etharp_find_entry+0x2d4>)
 80161b6:	4613      	mov	r3, r2
 80161b8:	005b      	lsls	r3, r3, #1
 80161ba:	4413      	add	r3, r2
 80161bc:	00db      	lsls	r3, r3, #3
 80161be:	440b      	add	r3, r1
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d018      	beq.n	80161f8 <etharp_find_entry+0x220>
 80161c6:	4b3a      	ldr	r3, [pc, #232]	; (80162b0 <etharp_find_entry+0x2d8>)
 80161c8:	f240 126d 	movw	r2, #365	; 0x16d
 80161cc:	493b      	ldr	r1, [pc, #236]	; (80162bc <etharp_find_entry+0x2e4>)
 80161ce:	483a      	ldr	r0, [pc, #232]	; (80162b8 <etharp_find_entry+0x2e0>)
 80161d0:	f002 fe3c 	bl	8018e4c <iprintf>
 80161d4:	e010      	b.n	80161f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80161d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80161da:	2b09      	cmp	r3, #9
 80161dc:	dc02      	bgt.n	80161e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80161de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80161e0:	843b      	strh	r3, [r7, #32]
 80161e2:	e009      	b.n	80161f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80161e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80161e8:	2b09      	cmp	r3, #9
 80161ea:	dc02      	bgt.n	80161f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80161ec:	8bfb      	ldrh	r3, [r7, #30]
 80161ee:	843b      	strh	r3, [r7, #32]
 80161f0:	e002      	b.n	80161f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80161f2:	f04f 33ff 	mov.w	r3, #4294967295
 80161f6:	e054      	b.n	80162a2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80161f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80161fc:	2b09      	cmp	r3, #9
 80161fe:	dd06      	ble.n	801620e <etharp_find_entry+0x236>
 8016200:	4b2b      	ldr	r3, [pc, #172]	; (80162b0 <etharp_find_entry+0x2d8>)
 8016202:	f240 127f 	movw	r2, #383	; 0x17f
 8016206:	492e      	ldr	r1, [pc, #184]	; (80162c0 <etharp_find_entry+0x2e8>)
 8016208:	482b      	ldr	r0, [pc, #172]	; (80162b8 <etharp_find_entry+0x2e0>)
 801620a:	f002 fe1f 	bl	8018e4c <iprintf>
    etharp_free_entry(i);
 801620e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016212:	4618      	mov	r0, r3
 8016214:	f7ff fe06 	bl	8015e24 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016218:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801621c:	2b09      	cmp	r3, #9
 801621e:	dd06      	ble.n	801622e <etharp_find_entry+0x256>
 8016220:	4b23      	ldr	r3, [pc, #140]	; (80162b0 <etharp_find_entry+0x2d8>)
 8016222:	f240 1283 	movw	r2, #387	; 0x183
 8016226:	4926      	ldr	r1, [pc, #152]	; (80162c0 <etharp_find_entry+0x2e8>)
 8016228:	4823      	ldr	r0, [pc, #140]	; (80162b8 <etharp_find_entry+0x2e0>)
 801622a:	f002 fe0f 	bl	8018e4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801622e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016232:	491e      	ldr	r1, [pc, #120]	; (80162ac <etharp_find_entry+0x2d4>)
 8016234:	4613      	mov	r3, r2
 8016236:	005b      	lsls	r3, r3, #1
 8016238:	4413      	add	r3, r2
 801623a:	00db      	lsls	r3, r3, #3
 801623c:	440b      	add	r3, r1
 801623e:	3314      	adds	r3, #20
 8016240:	781b      	ldrb	r3, [r3, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d006      	beq.n	8016254 <etharp_find_entry+0x27c>
 8016246:	4b1a      	ldr	r3, [pc, #104]	; (80162b0 <etharp_find_entry+0x2d8>)
 8016248:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801624c:	491d      	ldr	r1, [pc, #116]	; (80162c4 <etharp_find_entry+0x2ec>)
 801624e:	481a      	ldr	r0, [pc, #104]	; (80162b8 <etharp_find_entry+0x2e0>)
 8016250:	f002 fdfc 	bl	8018e4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d00b      	beq.n	8016272 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801625a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	6819      	ldr	r1, [r3, #0]
 8016262:	4812      	ldr	r0, [pc, #72]	; (80162ac <etharp_find_entry+0x2d4>)
 8016264:	4613      	mov	r3, r2
 8016266:	005b      	lsls	r3, r3, #1
 8016268:	4413      	add	r3, r2
 801626a:	00db      	lsls	r3, r3, #3
 801626c:	4403      	add	r3, r0
 801626e:	3304      	adds	r3, #4
 8016270:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016272:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016276:	490d      	ldr	r1, [pc, #52]	; (80162ac <etharp_find_entry+0x2d4>)
 8016278:	4613      	mov	r3, r2
 801627a:	005b      	lsls	r3, r3, #1
 801627c:	4413      	add	r3, r2
 801627e:	00db      	lsls	r3, r3, #3
 8016280:	440b      	add	r3, r1
 8016282:	3312      	adds	r3, #18
 8016284:	2200      	movs	r2, #0
 8016286:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016288:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801628c:	4907      	ldr	r1, [pc, #28]	; (80162ac <etharp_find_entry+0x2d4>)
 801628e:	4613      	mov	r3, r2
 8016290:	005b      	lsls	r3, r3, #1
 8016292:	4413      	add	r3, r2
 8016294:	00db      	lsls	r3, r3, #3
 8016296:	440b      	add	r3, r1
 8016298:	3308      	adds	r3, #8
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801629e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3728      	adds	r7, #40	; 0x28
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop
 80162ac:	20008058 	.word	0x20008058
 80162b0:	0801d788 	.word	0x0801d788
 80162b4:	0801d7c0 	.word	0x0801d7c0
 80162b8:	0801d800 	.word	0x0801d800
 80162bc:	0801d828 	.word	0x0801d828
 80162c0:	0801d840 	.word	0x0801d840
 80162c4:	0801d854 	.word	0x0801d854

080162c8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b088      	sub	sp, #32
 80162cc:	af02      	add	r7, sp, #8
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	60b9      	str	r1, [r7, #8]
 80162d2:	607a      	str	r2, [r7, #4]
 80162d4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80162dc:	2b06      	cmp	r3, #6
 80162de:	d006      	beq.n	80162ee <etharp_update_arp_entry+0x26>
 80162e0:	4b48      	ldr	r3, [pc, #288]	; (8016404 <etharp_update_arp_entry+0x13c>)
 80162e2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80162e6:	4948      	ldr	r1, [pc, #288]	; (8016408 <etharp_update_arp_entry+0x140>)
 80162e8:	4848      	ldr	r0, [pc, #288]	; (801640c <etharp_update_arp_entry+0x144>)
 80162ea:	f002 fdaf 	bl	8018e4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d012      	beq.n	801631a <etharp_update_arp_entry+0x52>
 80162f4:	68bb      	ldr	r3, [r7, #8]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d00e      	beq.n	801631a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	68f9      	ldr	r1, [r7, #12]
 8016302:	4618      	mov	r0, r3
 8016304:	f001 f924 	bl	8017550 <ip4_addr_isbroadcast_u32>
 8016308:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801630a:	2b00      	cmp	r3, #0
 801630c:	d105      	bne.n	801631a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016316:	2be0      	cmp	r3, #224	; 0xe0
 8016318:	d102      	bne.n	8016320 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801631a:	f06f 030f 	mvn.w	r3, #15
 801631e:	e06c      	b.n	80163fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016320:	78fb      	ldrb	r3, [r7, #3]
 8016322:	68fa      	ldr	r2, [r7, #12]
 8016324:	4619      	mov	r1, r3
 8016326:	68b8      	ldr	r0, [r7, #8]
 8016328:	f7ff fe56 	bl	8015fd8 <etharp_find_entry>
 801632c:	4603      	mov	r3, r0
 801632e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016330:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016334:	2b00      	cmp	r3, #0
 8016336:	da02      	bge.n	801633e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016338:	8afb      	ldrh	r3, [r7, #22]
 801633a:	b25b      	sxtb	r3, r3
 801633c:	e05d      	b.n	80163fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801633e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016342:	4933      	ldr	r1, [pc, #204]	; (8016410 <etharp_update_arp_entry+0x148>)
 8016344:	4613      	mov	r3, r2
 8016346:	005b      	lsls	r3, r3, #1
 8016348:	4413      	add	r3, r2
 801634a:	00db      	lsls	r3, r3, #3
 801634c:	440b      	add	r3, r1
 801634e:	3314      	adds	r3, #20
 8016350:	2202      	movs	r2, #2
 8016352:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016354:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016358:	492d      	ldr	r1, [pc, #180]	; (8016410 <etharp_update_arp_entry+0x148>)
 801635a:	4613      	mov	r3, r2
 801635c:	005b      	lsls	r3, r3, #1
 801635e:	4413      	add	r3, r2
 8016360:	00db      	lsls	r3, r3, #3
 8016362:	440b      	add	r3, r1
 8016364:	3308      	adds	r3, #8
 8016366:	68fa      	ldr	r2, [r7, #12]
 8016368:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801636a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801636e:	4613      	mov	r3, r2
 8016370:	005b      	lsls	r3, r3, #1
 8016372:	4413      	add	r3, r2
 8016374:	00db      	lsls	r3, r3, #3
 8016376:	3308      	adds	r3, #8
 8016378:	4a25      	ldr	r2, [pc, #148]	; (8016410 <etharp_update_arp_entry+0x148>)
 801637a:	4413      	add	r3, r2
 801637c:	3304      	adds	r3, #4
 801637e:	2206      	movs	r2, #6
 8016380:	6879      	ldr	r1, [r7, #4]
 8016382:	4618      	mov	r0, r3
 8016384:	f002 ff30 	bl	80191e8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016388:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801638c:	4920      	ldr	r1, [pc, #128]	; (8016410 <etharp_update_arp_entry+0x148>)
 801638e:	4613      	mov	r3, r2
 8016390:	005b      	lsls	r3, r3, #1
 8016392:	4413      	add	r3, r2
 8016394:	00db      	lsls	r3, r3, #3
 8016396:	440b      	add	r3, r1
 8016398:	3312      	adds	r3, #18
 801639a:	2200      	movs	r2, #0
 801639c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801639e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163a2:	491b      	ldr	r1, [pc, #108]	; (8016410 <etharp_update_arp_entry+0x148>)
 80163a4:	4613      	mov	r3, r2
 80163a6:	005b      	lsls	r3, r3, #1
 80163a8:	4413      	add	r3, r2
 80163aa:	00db      	lsls	r3, r3, #3
 80163ac:	440b      	add	r3, r1
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d021      	beq.n	80163f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80163b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163b8:	4915      	ldr	r1, [pc, #84]	; (8016410 <etharp_update_arp_entry+0x148>)
 80163ba:	4613      	mov	r3, r2
 80163bc:	005b      	lsls	r3, r3, #1
 80163be:	4413      	add	r3, r2
 80163c0:	00db      	lsls	r3, r3, #3
 80163c2:	440b      	add	r3, r1
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80163c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163cc:	4910      	ldr	r1, [pc, #64]	; (8016410 <etharp_update_arp_entry+0x148>)
 80163ce:	4613      	mov	r3, r2
 80163d0:	005b      	lsls	r3, r3, #1
 80163d2:	4413      	add	r3, r2
 80163d4:	00db      	lsls	r3, r3, #3
 80163d6:	440b      	add	r3, r1
 80163d8:	2200      	movs	r2, #0
 80163da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80163e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	6939      	ldr	r1, [r7, #16]
 80163ec:	68f8      	ldr	r0, [r7, #12]
 80163ee:	f001 ffbd 	bl	801836c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80163f2:	6938      	ldr	r0, [r7, #16]
 80163f4:	f7f9 fe6a 	bl	80100cc <pbuf_free>
  }
  return ERR_OK;
 80163f8:	2300      	movs	r3, #0
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3718      	adds	r7, #24
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	0801d788 	.word	0x0801d788
 8016408:	0801d880 	.word	0x0801d880
 801640c:	0801d800 	.word	0x0801d800
 8016410:	20008058 	.word	0x20008058

08016414 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b084      	sub	sp, #16
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801641c:	2300      	movs	r3, #0
 801641e:	60fb      	str	r3, [r7, #12]
 8016420:	e01e      	b.n	8016460 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016422:	4913      	ldr	r1, [pc, #76]	; (8016470 <etharp_cleanup_netif+0x5c>)
 8016424:	68fa      	ldr	r2, [r7, #12]
 8016426:	4613      	mov	r3, r2
 8016428:	005b      	lsls	r3, r3, #1
 801642a:	4413      	add	r3, r2
 801642c:	00db      	lsls	r3, r3, #3
 801642e:	440b      	add	r3, r1
 8016430:	3314      	adds	r3, #20
 8016432:	781b      	ldrb	r3, [r3, #0]
 8016434:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016436:	7afb      	ldrb	r3, [r7, #11]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d00e      	beq.n	801645a <etharp_cleanup_netif+0x46>
 801643c:	490c      	ldr	r1, [pc, #48]	; (8016470 <etharp_cleanup_netif+0x5c>)
 801643e:	68fa      	ldr	r2, [r7, #12]
 8016440:	4613      	mov	r3, r2
 8016442:	005b      	lsls	r3, r3, #1
 8016444:	4413      	add	r3, r2
 8016446:	00db      	lsls	r3, r3, #3
 8016448:	440b      	add	r3, r1
 801644a:	3308      	adds	r3, #8
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	687a      	ldr	r2, [r7, #4]
 8016450:	429a      	cmp	r2, r3
 8016452:	d102      	bne.n	801645a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016454:	68f8      	ldr	r0, [r7, #12]
 8016456:	f7ff fce5 	bl	8015e24 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	3301      	adds	r3, #1
 801645e:	60fb      	str	r3, [r7, #12]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	2b09      	cmp	r3, #9
 8016464:	dddd      	ble.n	8016422 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016466:	bf00      	nop
 8016468:	bf00      	nop
 801646a:	3710      	adds	r7, #16
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}
 8016470:	20008058 	.word	0x20008058

08016474 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016474:	b5b0      	push	{r4, r5, r7, lr}
 8016476:	b08a      	sub	sp, #40	; 0x28
 8016478:	af04      	add	r7, sp, #16
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d107      	bne.n	8016494 <etharp_input+0x20>
 8016484:	4b3d      	ldr	r3, [pc, #244]	; (801657c <etharp_input+0x108>)
 8016486:	f240 228a 	movw	r2, #650	; 0x28a
 801648a:	493d      	ldr	r1, [pc, #244]	; (8016580 <etharp_input+0x10c>)
 801648c:	483d      	ldr	r0, [pc, #244]	; (8016584 <etharp_input+0x110>)
 801648e:	f002 fcdd 	bl	8018e4c <iprintf>
 8016492:	e06f      	b.n	8016574 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801649a:	693b      	ldr	r3, [r7, #16]
 801649c:	881b      	ldrh	r3, [r3, #0]
 801649e:	b29b      	uxth	r3, r3
 80164a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164a4:	d10c      	bne.n	80164c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80164a6:	693b      	ldr	r3, [r7, #16]
 80164a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80164aa:	2b06      	cmp	r3, #6
 80164ac:	d108      	bne.n	80164c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80164b2:	2b04      	cmp	r3, #4
 80164b4:	d104      	bne.n	80164c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80164b6:	693b      	ldr	r3, [r7, #16]
 80164b8:	885b      	ldrh	r3, [r3, #2]
 80164ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80164bc:	2b08      	cmp	r3, #8
 80164be:	d003      	beq.n	80164c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f7f9 fe03 	bl	80100cc <pbuf_free>
    return;
 80164c6:	e055      	b.n	8016574 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80164c8:	693b      	ldr	r3, [r7, #16]
 80164ca:	330e      	adds	r3, #14
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80164d0:	693b      	ldr	r3, [r7, #16]
 80164d2:	3318      	adds	r3, #24
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	3304      	adds	r3, #4
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d102      	bne.n	80164e8 <etharp_input+0x74>
    for_us = 0;
 80164e2:	2300      	movs	r3, #0
 80164e4:	75fb      	strb	r3, [r7, #23]
 80164e6:	e009      	b.n	80164fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80164e8:	68ba      	ldr	r2, [r7, #8]
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	3304      	adds	r3, #4
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	bf0c      	ite	eq
 80164f4:	2301      	moveq	r3, #1
 80164f6:	2300      	movne	r3, #0
 80164f8:	b2db      	uxtb	r3, r3
 80164fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	f103 0208 	add.w	r2, r3, #8
 8016502:	7dfb      	ldrb	r3, [r7, #23]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d001      	beq.n	801650c <etharp_input+0x98>
 8016508:	2301      	movs	r3, #1
 801650a:	e000      	b.n	801650e <etharp_input+0x9a>
 801650c:	2302      	movs	r3, #2
 801650e:	f107 010c 	add.w	r1, r7, #12
 8016512:	6838      	ldr	r0, [r7, #0]
 8016514:	f7ff fed8 	bl	80162c8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	88db      	ldrh	r3, [r3, #6]
 801651c:	b29b      	uxth	r3, r3
 801651e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016522:	d003      	beq.n	801652c <etharp_input+0xb8>
 8016524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016528:	d01e      	beq.n	8016568 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801652a:	e020      	b.n	801656e <etharp_input+0xfa>
      if (for_us) {
 801652c:	7dfb      	ldrb	r3, [r7, #23]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d01c      	beq.n	801656c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016538:	693b      	ldr	r3, [r7, #16]
 801653a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016548:	693a      	ldr	r2, [r7, #16]
 801654a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801654c:	2102      	movs	r1, #2
 801654e:	9103      	str	r1, [sp, #12]
 8016550:	f107 010c 	add.w	r1, r7, #12
 8016554:	9102      	str	r1, [sp, #8]
 8016556:	9201      	str	r2, [sp, #4]
 8016558:	9300      	str	r3, [sp, #0]
 801655a:	462b      	mov	r3, r5
 801655c:	4622      	mov	r2, r4
 801655e:	4601      	mov	r1, r0
 8016560:	6838      	ldr	r0, [r7, #0]
 8016562:	f000 faeb 	bl	8016b3c <etharp_raw>
      break;
 8016566:	e001      	b.n	801656c <etharp_input+0xf8>
      break;
 8016568:	bf00      	nop
 801656a:	e000      	b.n	801656e <etharp_input+0xfa>
      break;
 801656c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f7f9 fdac 	bl	80100cc <pbuf_free>
}
 8016574:	3718      	adds	r7, #24
 8016576:	46bd      	mov	sp, r7
 8016578:	bdb0      	pop	{r4, r5, r7, pc}
 801657a:	bf00      	nop
 801657c:	0801d788 	.word	0x0801d788
 8016580:	0801d8d8 	.word	0x0801d8d8
 8016584:	0801d800 	.word	0x0801d800

08016588 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b086      	sub	sp, #24
 801658c:	af02      	add	r7, sp, #8
 801658e:	60f8      	str	r0, [r7, #12]
 8016590:	60b9      	str	r1, [r7, #8]
 8016592:	4613      	mov	r3, r2
 8016594:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016596:	79fa      	ldrb	r2, [r7, #7]
 8016598:	4944      	ldr	r1, [pc, #272]	; (80166ac <etharp_output_to_arp_index+0x124>)
 801659a:	4613      	mov	r3, r2
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	4413      	add	r3, r2
 80165a0:	00db      	lsls	r3, r3, #3
 80165a2:	440b      	add	r3, r1
 80165a4:	3314      	adds	r3, #20
 80165a6:	781b      	ldrb	r3, [r3, #0]
 80165a8:	2b01      	cmp	r3, #1
 80165aa:	d806      	bhi.n	80165ba <etharp_output_to_arp_index+0x32>
 80165ac:	4b40      	ldr	r3, [pc, #256]	; (80166b0 <etharp_output_to_arp_index+0x128>)
 80165ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 80165b2:	4940      	ldr	r1, [pc, #256]	; (80166b4 <etharp_output_to_arp_index+0x12c>)
 80165b4:	4840      	ldr	r0, [pc, #256]	; (80166b8 <etharp_output_to_arp_index+0x130>)
 80165b6:	f002 fc49 	bl	8018e4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80165ba:	79fa      	ldrb	r2, [r7, #7]
 80165bc:	493b      	ldr	r1, [pc, #236]	; (80166ac <etharp_output_to_arp_index+0x124>)
 80165be:	4613      	mov	r3, r2
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	4413      	add	r3, r2
 80165c4:	00db      	lsls	r3, r3, #3
 80165c6:	440b      	add	r3, r1
 80165c8:	3314      	adds	r3, #20
 80165ca:	781b      	ldrb	r3, [r3, #0]
 80165cc:	2b02      	cmp	r3, #2
 80165ce:	d153      	bne.n	8016678 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80165d0:	79fa      	ldrb	r2, [r7, #7]
 80165d2:	4936      	ldr	r1, [pc, #216]	; (80166ac <etharp_output_to_arp_index+0x124>)
 80165d4:	4613      	mov	r3, r2
 80165d6:	005b      	lsls	r3, r3, #1
 80165d8:	4413      	add	r3, r2
 80165da:	00db      	lsls	r3, r3, #3
 80165dc:	440b      	add	r3, r1
 80165de:	3312      	adds	r3, #18
 80165e0:	881b      	ldrh	r3, [r3, #0]
 80165e2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80165e6:	d919      	bls.n	801661c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80165e8:	79fa      	ldrb	r2, [r7, #7]
 80165ea:	4613      	mov	r3, r2
 80165ec:	005b      	lsls	r3, r3, #1
 80165ee:	4413      	add	r3, r2
 80165f0:	00db      	lsls	r3, r3, #3
 80165f2:	4a2e      	ldr	r2, [pc, #184]	; (80166ac <etharp_output_to_arp_index+0x124>)
 80165f4:	4413      	add	r3, r2
 80165f6:	3304      	adds	r3, #4
 80165f8:	4619      	mov	r1, r3
 80165fa:	68f8      	ldr	r0, [r7, #12]
 80165fc:	f000 fb4c 	bl	8016c98 <etharp_request>
 8016600:	4603      	mov	r3, r0
 8016602:	2b00      	cmp	r3, #0
 8016604:	d138      	bne.n	8016678 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016606:	79fa      	ldrb	r2, [r7, #7]
 8016608:	4928      	ldr	r1, [pc, #160]	; (80166ac <etharp_output_to_arp_index+0x124>)
 801660a:	4613      	mov	r3, r2
 801660c:	005b      	lsls	r3, r3, #1
 801660e:	4413      	add	r3, r2
 8016610:	00db      	lsls	r3, r3, #3
 8016612:	440b      	add	r3, r1
 8016614:	3314      	adds	r3, #20
 8016616:	2203      	movs	r2, #3
 8016618:	701a      	strb	r2, [r3, #0]
 801661a:	e02d      	b.n	8016678 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801661c:	79fa      	ldrb	r2, [r7, #7]
 801661e:	4923      	ldr	r1, [pc, #140]	; (80166ac <etharp_output_to_arp_index+0x124>)
 8016620:	4613      	mov	r3, r2
 8016622:	005b      	lsls	r3, r3, #1
 8016624:	4413      	add	r3, r2
 8016626:	00db      	lsls	r3, r3, #3
 8016628:	440b      	add	r3, r1
 801662a:	3312      	adds	r3, #18
 801662c:	881b      	ldrh	r3, [r3, #0]
 801662e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016632:	d321      	bcc.n	8016678 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016634:	79fa      	ldrb	r2, [r7, #7]
 8016636:	4613      	mov	r3, r2
 8016638:	005b      	lsls	r3, r3, #1
 801663a:	4413      	add	r3, r2
 801663c:	00db      	lsls	r3, r3, #3
 801663e:	4a1b      	ldr	r2, [pc, #108]	; (80166ac <etharp_output_to_arp_index+0x124>)
 8016640:	4413      	add	r3, r2
 8016642:	1d19      	adds	r1, r3, #4
 8016644:	79fa      	ldrb	r2, [r7, #7]
 8016646:	4613      	mov	r3, r2
 8016648:	005b      	lsls	r3, r3, #1
 801664a:	4413      	add	r3, r2
 801664c:	00db      	lsls	r3, r3, #3
 801664e:	3308      	adds	r3, #8
 8016650:	4a16      	ldr	r2, [pc, #88]	; (80166ac <etharp_output_to_arp_index+0x124>)
 8016652:	4413      	add	r3, r2
 8016654:	3304      	adds	r3, #4
 8016656:	461a      	mov	r2, r3
 8016658:	68f8      	ldr	r0, [r7, #12]
 801665a:	f000 fafb 	bl	8016c54 <etharp_request_dst>
 801665e:	4603      	mov	r3, r0
 8016660:	2b00      	cmp	r3, #0
 8016662:	d109      	bne.n	8016678 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016664:	79fa      	ldrb	r2, [r7, #7]
 8016666:	4911      	ldr	r1, [pc, #68]	; (80166ac <etharp_output_to_arp_index+0x124>)
 8016668:	4613      	mov	r3, r2
 801666a:	005b      	lsls	r3, r3, #1
 801666c:	4413      	add	r3, r2
 801666e:	00db      	lsls	r3, r3, #3
 8016670:	440b      	add	r3, r1
 8016672:	3314      	adds	r3, #20
 8016674:	2203      	movs	r2, #3
 8016676:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801667e:	79fa      	ldrb	r2, [r7, #7]
 8016680:	4613      	mov	r3, r2
 8016682:	005b      	lsls	r3, r3, #1
 8016684:	4413      	add	r3, r2
 8016686:	00db      	lsls	r3, r3, #3
 8016688:	3308      	adds	r3, #8
 801668a:	4a08      	ldr	r2, [pc, #32]	; (80166ac <etharp_output_to_arp_index+0x124>)
 801668c:	4413      	add	r3, r2
 801668e:	3304      	adds	r3, #4
 8016690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016694:	9200      	str	r2, [sp, #0]
 8016696:	460a      	mov	r2, r1
 8016698:	68b9      	ldr	r1, [r7, #8]
 801669a:	68f8      	ldr	r0, [r7, #12]
 801669c:	f001 fe66 	bl	801836c <ethernet_output>
 80166a0:	4603      	mov	r3, r0
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3710      	adds	r7, #16
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
 80166aa:	bf00      	nop
 80166ac:	20008058 	.word	0x20008058
 80166b0:	0801d788 	.word	0x0801d788
 80166b4:	0801d8f8 	.word	0x0801d8f8
 80166b8:	0801d800 	.word	0x0801d800

080166bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b08a      	sub	sp, #40	; 0x28
 80166c0:	af02      	add	r7, sp, #8
 80166c2:	60f8      	str	r0, [r7, #12]
 80166c4:	60b9      	str	r1, [r7, #8]
 80166c6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d106      	bne.n	80166e0 <etharp_output+0x24>
 80166d2:	4b73      	ldr	r3, [pc, #460]	; (80168a0 <etharp_output+0x1e4>)
 80166d4:	f240 321e 	movw	r2, #798	; 0x31e
 80166d8:	4972      	ldr	r1, [pc, #456]	; (80168a4 <etharp_output+0x1e8>)
 80166da:	4873      	ldr	r0, [pc, #460]	; (80168a8 <etharp_output+0x1ec>)
 80166dc:	f002 fbb6 	bl	8018e4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80166e0:	68bb      	ldr	r3, [r7, #8]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d106      	bne.n	80166f4 <etharp_output+0x38>
 80166e6:	4b6e      	ldr	r3, [pc, #440]	; (80168a0 <etharp_output+0x1e4>)
 80166e8:	f240 321f 	movw	r2, #799	; 0x31f
 80166ec:	496f      	ldr	r1, [pc, #444]	; (80168ac <etharp_output+0x1f0>)
 80166ee:	486e      	ldr	r0, [pc, #440]	; (80168a8 <etharp_output+0x1ec>)
 80166f0:	f002 fbac 	bl	8018e4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d106      	bne.n	8016708 <etharp_output+0x4c>
 80166fa:	4b69      	ldr	r3, [pc, #420]	; (80168a0 <etharp_output+0x1e4>)
 80166fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016700:	496b      	ldr	r1, [pc, #428]	; (80168b0 <etharp_output+0x1f4>)
 8016702:	4869      	ldr	r0, [pc, #420]	; (80168a8 <etharp_output+0x1ec>)
 8016704:	f002 fba2 	bl	8018e4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	68f9      	ldr	r1, [r7, #12]
 801670e:	4618      	mov	r0, r3
 8016710:	f000 ff1e 	bl	8017550 <ip4_addr_isbroadcast_u32>
 8016714:	4603      	mov	r3, r0
 8016716:	2b00      	cmp	r3, #0
 8016718:	d002      	beq.n	8016720 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801671a:	4b66      	ldr	r3, [pc, #408]	; (80168b4 <etharp_output+0x1f8>)
 801671c:	61fb      	str	r3, [r7, #28]
 801671e:	e0af      	b.n	8016880 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016728:	2be0      	cmp	r3, #224	; 0xe0
 801672a:	d118      	bne.n	801675e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801672c:	2301      	movs	r3, #1
 801672e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016730:	2300      	movs	r3, #0
 8016732:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016734:	235e      	movs	r3, #94	; 0x5e
 8016736:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	3301      	adds	r3, #1
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016742:	b2db      	uxtb	r3, r3
 8016744:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	3302      	adds	r3, #2
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	3303      	adds	r3, #3
 8016752:	781b      	ldrb	r3, [r3, #0]
 8016754:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016756:	f107 0310 	add.w	r3, r7, #16
 801675a:	61fb      	str	r3, [r7, #28]
 801675c:	e090      	b.n	8016880 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681a      	ldr	r2, [r3, #0]
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	3304      	adds	r3, #4
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	405a      	eors	r2, r3
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	3308      	adds	r3, #8
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	4013      	ands	r3, r2
 8016772:	2b00      	cmp	r3, #0
 8016774:	d012      	beq.n	801679c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801677c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016780:	4293      	cmp	r3, r2
 8016782:	d00b      	beq.n	801679c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	330c      	adds	r3, #12
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d003      	beq.n	8016796 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	330c      	adds	r3, #12
 8016792:	61bb      	str	r3, [r7, #24]
 8016794:	e002      	b.n	801679c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016796:	f06f 0303 	mvn.w	r3, #3
 801679a:	e07d      	b.n	8016898 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801679c:	4b46      	ldr	r3, [pc, #280]	; (80168b8 <etharp_output+0x1fc>)
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	4619      	mov	r1, r3
 80167a2:	4a46      	ldr	r2, [pc, #280]	; (80168bc <etharp_output+0x200>)
 80167a4:	460b      	mov	r3, r1
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	440b      	add	r3, r1
 80167aa:	00db      	lsls	r3, r3, #3
 80167ac:	4413      	add	r3, r2
 80167ae:	3314      	adds	r3, #20
 80167b0:	781b      	ldrb	r3, [r3, #0]
 80167b2:	2b01      	cmp	r3, #1
 80167b4:	d925      	bls.n	8016802 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80167b6:	4b40      	ldr	r3, [pc, #256]	; (80168b8 <etharp_output+0x1fc>)
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	4619      	mov	r1, r3
 80167bc:	4a3f      	ldr	r2, [pc, #252]	; (80168bc <etharp_output+0x200>)
 80167be:	460b      	mov	r3, r1
 80167c0:	005b      	lsls	r3, r3, #1
 80167c2:	440b      	add	r3, r1
 80167c4:	00db      	lsls	r3, r3, #3
 80167c6:	4413      	add	r3, r2
 80167c8:	3308      	adds	r3, #8
 80167ca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80167cc:	68fa      	ldr	r2, [r7, #12]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d117      	bne.n	8016802 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80167d2:	69bb      	ldr	r3, [r7, #24]
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	4b38      	ldr	r3, [pc, #224]	; (80168b8 <etharp_output+0x1fc>)
 80167d8:	781b      	ldrb	r3, [r3, #0]
 80167da:	4618      	mov	r0, r3
 80167dc:	4937      	ldr	r1, [pc, #220]	; (80168bc <etharp_output+0x200>)
 80167de:	4603      	mov	r3, r0
 80167e0:	005b      	lsls	r3, r3, #1
 80167e2:	4403      	add	r3, r0
 80167e4:	00db      	lsls	r3, r3, #3
 80167e6:	440b      	add	r3, r1
 80167e8:	3304      	adds	r3, #4
 80167ea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d108      	bne.n	8016802 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80167f0:	4b31      	ldr	r3, [pc, #196]	; (80168b8 <etharp_output+0x1fc>)
 80167f2:	781b      	ldrb	r3, [r3, #0]
 80167f4:	461a      	mov	r2, r3
 80167f6:	68b9      	ldr	r1, [r7, #8]
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f7ff fec5 	bl	8016588 <etharp_output_to_arp_index>
 80167fe:	4603      	mov	r3, r0
 8016800:	e04a      	b.n	8016898 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016802:	2300      	movs	r3, #0
 8016804:	75fb      	strb	r3, [r7, #23]
 8016806:	e031      	b.n	801686c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016808:	7dfa      	ldrb	r2, [r7, #23]
 801680a:	492c      	ldr	r1, [pc, #176]	; (80168bc <etharp_output+0x200>)
 801680c:	4613      	mov	r3, r2
 801680e:	005b      	lsls	r3, r3, #1
 8016810:	4413      	add	r3, r2
 8016812:	00db      	lsls	r3, r3, #3
 8016814:	440b      	add	r3, r1
 8016816:	3314      	adds	r3, #20
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	2b01      	cmp	r3, #1
 801681c:	d923      	bls.n	8016866 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801681e:	7dfa      	ldrb	r2, [r7, #23]
 8016820:	4926      	ldr	r1, [pc, #152]	; (80168bc <etharp_output+0x200>)
 8016822:	4613      	mov	r3, r2
 8016824:	005b      	lsls	r3, r3, #1
 8016826:	4413      	add	r3, r2
 8016828:	00db      	lsls	r3, r3, #3
 801682a:	440b      	add	r3, r1
 801682c:	3308      	adds	r3, #8
 801682e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016830:	68fa      	ldr	r2, [r7, #12]
 8016832:	429a      	cmp	r2, r3
 8016834:	d117      	bne.n	8016866 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016836:	69bb      	ldr	r3, [r7, #24]
 8016838:	6819      	ldr	r1, [r3, #0]
 801683a:	7dfa      	ldrb	r2, [r7, #23]
 801683c:	481f      	ldr	r0, [pc, #124]	; (80168bc <etharp_output+0x200>)
 801683e:	4613      	mov	r3, r2
 8016840:	005b      	lsls	r3, r3, #1
 8016842:	4413      	add	r3, r2
 8016844:	00db      	lsls	r3, r3, #3
 8016846:	4403      	add	r3, r0
 8016848:	3304      	adds	r3, #4
 801684a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801684c:	4299      	cmp	r1, r3
 801684e:	d10a      	bne.n	8016866 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016850:	4a19      	ldr	r2, [pc, #100]	; (80168b8 <etharp_output+0x1fc>)
 8016852:	7dfb      	ldrb	r3, [r7, #23]
 8016854:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016856:	7dfb      	ldrb	r3, [r7, #23]
 8016858:	461a      	mov	r2, r3
 801685a:	68b9      	ldr	r1, [r7, #8]
 801685c:	68f8      	ldr	r0, [r7, #12]
 801685e:	f7ff fe93 	bl	8016588 <etharp_output_to_arp_index>
 8016862:	4603      	mov	r3, r0
 8016864:	e018      	b.n	8016898 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016866:	7dfb      	ldrb	r3, [r7, #23]
 8016868:	3301      	adds	r3, #1
 801686a:	75fb      	strb	r3, [r7, #23]
 801686c:	7dfb      	ldrb	r3, [r7, #23]
 801686e:	2b09      	cmp	r3, #9
 8016870:	d9ca      	bls.n	8016808 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016872:	68ba      	ldr	r2, [r7, #8]
 8016874:	69b9      	ldr	r1, [r7, #24]
 8016876:	68f8      	ldr	r0, [r7, #12]
 8016878:	f000 f822 	bl	80168c0 <etharp_query>
 801687c:	4603      	mov	r3, r0
 801687e:	e00b      	b.n	8016898 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801688a:	9300      	str	r3, [sp, #0]
 801688c:	69fb      	ldr	r3, [r7, #28]
 801688e:	68b9      	ldr	r1, [r7, #8]
 8016890:	68f8      	ldr	r0, [r7, #12]
 8016892:	f001 fd6b 	bl	801836c <ethernet_output>
 8016896:	4603      	mov	r3, r0
}
 8016898:	4618      	mov	r0, r3
 801689a:	3720      	adds	r7, #32
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	0801d788 	.word	0x0801d788
 80168a4:	0801d8d8 	.word	0x0801d8d8
 80168a8:	0801d800 	.word	0x0801d800
 80168ac:	0801d928 	.word	0x0801d928
 80168b0:	0801d8c8 	.word	0x0801d8c8
 80168b4:	0801df8c 	.word	0x0801df8c
 80168b8:	20008148 	.word	0x20008148
 80168bc:	20008058 	.word	0x20008058

080168c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b08c      	sub	sp, #48	; 0x30
 80168c4:	af02      	add	r7, sp, #8
 80168c6:	60f8      	str	r0, [r7, #12]
 80168c8:	60b9      	str	r1, [r7, #8]
 80168ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	3326      	adds	r3, #38	; 0x26
 80168d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80168d2:	23ff      	movs	r3, #255	; 0xff
 80168d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80168d8:	2300      	movs	r3, #0
 80168da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80168dc:	68bb      	ldr	r3, [r7, #8]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	68f9      	ldr	r1, [r7, #12]
 80168e2:	4618      	mov	r0, r3
 80168e4:	f000 fe34 	bl	8017550 <ip4_addr_isbroadcast_u32>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d10c      	bne.n	8016908 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80168ee:	68bb      	ldr	r3, [r7, #8]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80168f6:	2be0      	cmp	r3, #224	; 0xe0
 80168f8:	d006      	beq.n	8016908 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80168fa:	68bb      	ldr	r3, [r7, #8]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d003      	beq.n	8016908 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d102      	bne.n	801690e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016908:	f06f 030f 	mvn.w	r3, #15
 801690c:	e101      	b.n	8016b12 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801690e:	68fa      	ldr	r2, [r7, #12]
 8016910:	2101      	movs	r1, #1
 8016912:	68b8      	ldr	r0, [r7, #8]
 8016914:	f7ff fb60 	bl	8015fd8 <etharp_find_entry>
 8016918:	4603      	mov	r3, r0
 801691a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801691c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016920:	2b00      	cmp	r3, #0
 8016922:	da02      	bge.n	801692a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016924:	8a7b      	ldrh	r3, [r7, #18]
 8016926:	b25b      	sxtb	r3, r3
 8016928:	e0f3      	b.n	8016b12 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801692a:	8a7b      	ldrh	r3, [r7, #18]
 801692c:	2b7e      	cmp	r3, #126	; 0x7e
 801692e:	d906      	bls.n	801693e <etharp_query+0x7e>
 8016930:	4b7a      	ldr	r3, [pc, #488]	; (8016b1c <etharp_query+0x25c>)
 8016932:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016936:	497a      	ldr	r1, [pc, #488]	; (8016b20 <etharp_query+0x260>)
 8016938:	487a      	ldr	r0, [pc, #488]	; (8016b24 <etharp_query+0x264>)
 801693a:	f002 fa87 	bl	8018e4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801693e:	8a7b      	ldrh	r3, [r7, #18]
 8016940:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016942:	7c7a      	ldrb	r2, [r7, #17]
 8016944:	4978      	ldr	r1, [pc, #480]	; (8016b28 <etharp_query+0x268>)
 8016946:	4613      	mov	r3, r2
 8016948:	005b      	lsls	r3, r3, #1
 801694a:	4413      	add	r3, r2
 801694c:	00db      	lsls	r3, r3, #3
 801694e:	440b      	add	r3, r1
 8016950:	3314      	adds	r3, #20
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d115      	bne.n	8016984 <etharp_query+0xc4>
    is_new_entry = 1;
 8016958:	2301      	movs	r3, #1
 801695a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801695c:	7c7a      	ldrb	r2, [r7, #17]
 801695e:	4972      	ldr	r1, [pc, #456]	; (8016b28 <etharp_query+0x268>)
 8016960:	4613      	mov	r3, r2
 8016962:	005b      	lsls	r3, r3, #1
 8016964:	4413      	add	r3, r2
 8016966:	00db      	lsls	r3, r3, #3
 8016968:	440b      	add	r3, r1
 801696a:	3314      	adds	r3, #20
 801696c:	2201      	movs	r2, #1
 801696e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016970:	7c7a      	ldrb	r2, [r7, #17]
 8016972:	496d      	ldr	r1, [pc, #436]	; (8016b28 <etharp_query+0x268>)
 8016974:	4613      	mov	r3, r2
 8016976:	005b      	lsls	r3, r3, #1
 8016978:	4413      	add	r3, r2
 801697a:	00db      	lsls	r3, r3, #3
 801697c:	440b      	add	r3, r1
 801697e:	3308      	adds	r3, #8
 8016980:	68fa      	ldr	r2, [r7, #12]
 8016982:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016984:	7c7a      	ldrb	r2, [r7, #17]
 8016986:	4968      	ldr	r1, [pc, #416]	; (8016b28 <etharp_query+0x268>)
 8016988:	4613      	mov	r3, r2
 801698a:	005b      	lsls	r3, r3, #1
 801698c:	4413      	add	r3, r2
 801698e:	00db      	lsls	r3, r3, #3
 8016990:	440b      	add	r3, r1
 8016992:	3314      	adds	r3, #20
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	2b01      	cmp	r3, #1
 8016998:	d011      	beq.n	80169be <etharp_query+0xfe>
 801699a:	7c7a      	ldrb	r2, [r7, #17]
 801699c:	4962      	ldr	r1, [pc, #392]	; (8016b28 <etharp_query+0x268>)
 801699e:	4613      	mov	r3, r2
 80169a0:	005b      	lsls	r3, r3, #1
 80169a2:	4413      	add	r3, r2
 80169a4:	00db      	lsls	r3, r3, #3
 80169a6:	440b      	add	r3, r1
 80169a8:	3314      	adds	r3, #20
 80169aa:	781b      	ldrb	r3, [r3, #0]
 80169ac:	2b01      	cmp	r3, #1
 80169ae:	d806      	bhi.n	80169be <etharp_query+0xfe>
 80169b0:	4b5a      	ldr	r3, [pc, #360]	; (8016b1c <etharp_query+0x25c>)
 80169b2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80169b6:	495d      	ldr	r1, [pc, #372]	; (8016b2c <etharp_query+0x26c>)
 80169b8:	485a      	ldr	r0, [pc, #360]	; (8016b24 <etharp_query+0x264>)
 80169ba:	f002 fa47 	bl	8018e4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80169be:	6a3b      	ldr	r3, [r7, #32]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d102      	bne.n	80169ca <etharp_query+0x10a>
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d10c      	bne.n	80169e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80169ca:	68b9      	ldr	r1, [r7, #8]
 80169cc:	68f8      	ldr	r0, [r7, #12]
 80169ce:	f000 f963 	bl	8016c98 <etharp_request>
 80169d2:	4603      	mov	r3, r0
 80169d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d102      	bne.n	80169e4 <etharp_query+0x124>
      return result;
 80169de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80169e2:	e096      	b.n	8016b12 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d106      	bne.n	80169f8 <etharp_query+0x138>
 80169ea:	4b4c      	ldr	r3, [pc, #304]	; (8016b1c <etharp_query+0x25c>)
 80169ec:	f240 32e1 	movw	r2, #993	; 0x3e1
 80169f0:	494f      	ldr	r1, [pc, #316]	; (8016b30 <etharp_query+0x270>)
 80169f2:	484c      	ldr	r0, [pc, #304]	; (8016b24 <etharp_query+0x264>)
 80169f4:	f002 fa2a 	bl	8018e4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80169f8:	7c7a      	ldrb	r2, [r7, #17]
 80169fa:	494b      	ldr	r1, [pc, #300]	; (8016b28 <etharp_query+0x268>)
 80169fc:	4613      	mov	r3, r2
 80169fe:	005b      	lsls	r3, r3, #1
 8016a00:	4413      	add	r3, r2
 8016a02:	00db      	lsls	r3, r3, #3
 8016a04:	440b      	add	r3, r1
 8016a06:	3314      	adds	r3, #20
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d917      	bls.n	8016a3e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016a0e:	4a49      	ldr	r2, [pc, #292]	; (8016b34 <etharp_query+0x274>)
 8016a10:	7c7b      	ldrb	r3, [r7, #17]
 8016a12:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016a14:	7c7a      	ldrb	r2, [r7, #17]
 8016a16:	4613      	mov	r3, r2
 8016a18:	005b      	lsls	r3, r3, #1
 8016a1a:	4413      	add	r3, r2
 8016a1c:	00db      	lsls	r3, r3, #3
 8016a1e:	3308      	adds	r3, #8
 8016a20:	4a41      	ldr	r2, [pc, #260]	; (8016b28 <etharp_query+0x268>)
 8016a22:	4413      	add	r3, r2
 8016a24:	3304      	adds	r3, #4
 8016a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016a2a:	9200      	str	r2, [sp, #0]
 8016a2c:	697a      	ldr	r2, [r7, #20]
 8016a2e:	6879      	ldr	r1, [r7, #4]
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	f001 fc9b 	bl	801836c <ethernet_output>
 8016a36:	4603      	mov	r3, r0
 8016a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a3c:	e067      	b.n	8016b0e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016a3e:	7c7a      	ldrb	r2, [r7, #17]
 8016a40:	4939      	ldr	r1, [pc, #228]	; (8016b28 <etharp_query+0x268>)
 8016a42:	4613      	mov	r3, r2
 8016a44:	005b      	lsls	r3, r3, #1
 8016a46:	4413      	add	r3, r2
 8016a48:	00db      	lsls	r3, r3, #3
 8016a4a:	440b      	add	r3, r1
 8016a4c:	3314      	adds	r3, #20
 8016a4e:	781b      	ldrb	r3, [r3, #0]
 8016a50:	2b01      	cmp	r3, #1
 8016a52:	d15c      	bne.n	8016b0e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016a54:	2300      	movs	r3, #0
 8016a56:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016a5c:	e01c      	b.n	8016a98 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016a5e:	69fb      	ldr	r3, [r7, #28]
 8016a60:	895a      	ldrh	r2, [r3, #10]
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	891b      	ldrh	r3, [r3, #8]
 8016a66:	429a      	cmp	r2, r3
 8016a68:	d10a      	bne.n	8016a80 <etharp_query+0x1c0>
 8016a6a:	69fb      	ldr	r3, [r7, #28]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d006      	beq.n	8016a80 <etharp_query+0x1c0>
 8016a72:	4b2a      	ldr	r3, [pc, #168]	; (8016b1c <etharp_query+0x25c>)
 8016a74:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016a78:	492f      	ldr	r1, [pc, #188]	; (8016b38 <etharp_query+0x278>)
 8016a7a:	482a      	ldr	r0, [pc, #168]	; (8016b24 <etharp_query+0x264>)
 8016a7c:	f002 f9e6 	bl	8018e4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016a80:	69fb      	ldr	r3, [r7, #28]
 8016a82:	7b1b      	ldrb	r3, [r3, #12]
 8016a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d002      	beq.n	8016a92 <etharp_query+0x1d2>
        copy_needed = 1;
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	61bb      	str	r3, [r7, #24]
        break;
 8016a90:	e005      	b.n	8016a9e <etharp_query+0x1de>
      }
      p = p->next;
 8016a92:	69fb      	ldr	r3, [r7, #28]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016a98:	69fb      	ldr	r3, [r7, #28]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d1df      	bne.n	8016a5e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016a9e:	69bb      	ldr	r3, [r7, #24]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d007      	beq.n	8016ab4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016aaa:	200e      	movs	r0, #14
 8016aac:	f7f9 fd6a 	bl	8010584 <pbuf_clone>
 8016ab0:	61f8      	str	r0, [r7, #28]
 8016ab2:	e004      	b.n	8016abe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016ab8:	69f8      	ldr	r0, [r7, #28]
 8016aba:	f7f9 fba7 	bl	801020c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016abe:	69fb      	ldr	r3, [r7, #28]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d021      	beq.n	8016b08 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016ac4:	7c7a      	ldrb	r2, [r7, #17]
 8016ac6:	4918      	ldr	r1, [pc, #96]	; (8016b28 <etharp_query+0x268>)
 8016ac8:	4613      	mov	r3, r2
 8016aca:	005b      	lsls	r3, r3, #1
 8016acc:	4413      	add	r3, r2
 8016ace:	00db      	lsls	r3, r3, #3
 8016ad0:	440b      	add	r3, r1
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d00a      	beq.n	8016aee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016ad8:	7c7a      	ldrb	r2, [r7, #17]
 8016ada:	4913      	ldr	r1, [pc, #76]	; (8016b28 <etharp_query+0x268>)
 8016adc:	4613      	mov	r3, r2
 8016ade:	005b      	lsls	r3, r3, #1
 8016ae0:	4413      	add	r3, r2
 8016ae2:	00db      	lsls	r3, r3, #3
 8016ae4:	440b      	add	r3, r1
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7f9 faef 	bl	80100cc <pbuf_free>
      }
      arp_table[i].q = p;
 8016aee:	7c7a      	ldrb	r2, [r7, #17]
 8016af0:	490d      	ldr	r1, [pc, #52]	; (8016b28 <etharp_query+0x268>)
 8016af2:	4613      	mov	r3, r2
 8016af4:	005b      	lsls	r3, r3, #1
 8016af6:	4413      	add	r3, r2
 8016af8:	00db      	lsls	r3, r3, #3
 8016afa:	440b      	add	r3, r1
 8016afc:	69fa      	ldr	r2, [r7, #28]
 8016afe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016b00:	2300      	movs	r3, #0
 8016b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b06:	e002      	b.n	8016b0e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016b08:	23ff      	movs	r3, #255	; 0xff
 8016b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016b0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3728      	adds	r7, #40	; 0x28
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	0801d788 	.word	0x0801d788
 8016b20:	0801d934 	.word	0x0801d934
 8016b24:	0801d800 	.word	0x0801d800
 8016b28:	20008058 	.word	0x20008058
 8016b2c:	0801d944 	.word	0x0801d944
 8016b30:	0801d928 	.word	0x0801d928
 8016b34:	20008148 	.word	0x20008148
 8016b38:	0801d96c 	.word	0x0801d96c

08016b3c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b08a      	sub	sp, #40	; 0x28
 8016b40:	af02      	add	r7, sp, #8
 8016b42:	60f8      	str	r0, [r7, #12]
 8016b44:	60b9      	str	r1, [r7, #8]
 8016b46:	607a      	str	r2, [r7, #4]
 8016b48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d106      	bne.n	8016b62 <etharp_raw+0x26>
 8016b54:	4b3a      	ldr	r3, [pc, #232]	; (8016c40 <etharp_raw+0x104>)
 8016b56:	f240 4257 	movw	r2, #1111	; 0x457
 8016b5a:	493a      	ldr	r1, [pc, #232]	; (8016c44 <etharp_raw+0x108>)
 8016b5c:	483a      	ldr	r0, [pc, #232]	; (8016c48 <etharp_raw+0x10c>)
 8016b5e:	f002 f975 	bl	8018e4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016b62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b66:	211c      	movs	r1, #28
 8016b68:	200e      	movs	r0, #14
 8016b6a:	f7f8 ffcb 	bl	800fb04 <pbuf_alloc>
 8016b6e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016b70:	69bb      	ldr	r3, [r7, #24]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d102      	bne.n	8016b7c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016b76:	f04f 33ff 	mov.w	r3, #4294967295
 8016b7a:	e05d      	b.n	8016c38 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016b7c:	69bb      	ldr	r3, [r7, #24]
 8016b7e:	895b      	ldrh	r3, [r3, #10]
 8016b80:	2b1b      	cmp	r3, #27
 8016b82:	d806      	bhi.n	8016b92 <etharp_raw+0x56>
 8016b84:	4b2e      	ldr	r3, [pc, #184]	; (8016c40 <etharp_raw+0x104>)
 8016b86:	f240 4262 	movw	r2, #1122	; 0x462
 8016b8a:	4930      	ldr	r1, [pc, #192]	; (8016c4c <etharp_raw+0x110>)
 8016b8c:	482e      	ldr	r0, [pc, #184]	; (8016c48 <etharp_raw+0x10c>)
 8016b8e:	f002 f95d 	bl	8018e4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016b98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f7f7 fea0 	bl	800e8e0 <lwip_htons>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016bae:	2b06      	cmp	r3, #6
 8016bb0:	d006      	beq.n	8016bc0 <etharp_raw+0x84>
 8016bb2:	4b23      	ldr	r3, [pc, #140]	; (8016c40 <etharp_raw+0x104>)
 8016bb4:	f240 4269 	movw	r2, #1129	; 0x469
 8016bb8:	4925      	ldr	r1, [pc, #148]	; (8016c50 <etharp_raw+0x114>)
 8016bba:	4823      	ldr	r0, [pc, #140]	; (8016c48 <etharp_raw+0x10c>)
 8016bbc:	f002 f946 	bl	8018e4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	3308      	adds	r3, #8
 8016bc4:	2206      	movs	r2, #6
 8016bc6:	6839      	ldr	r1, [r7, #0]
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f002 fb0d 	bl	80191e8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	3312      	adds	r3, #18
 8016bd2:	2206      	movs	r2, #6
 8016bd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f002 fb06 	bl	80191e8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	330e      	adds	r3, #14
 8016be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016be2:	6812      	ldr	r2, [r2, #0]
 8016be4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	3318      	adds	r3, #24
 8016bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bec:	6812      	ldr	r2, [r2, #0]
 8016bee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	701a      	strb	r2, [r3, #0]
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	f042 0201 	orr.w	r2, r2, #1
 8016bfc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	2200      	movs	r2, #0
 8016c02:	f042 0208 	orr.w	r2, r2, #8
 8016c06:	709a      	strb	r2, [r3, #2]
 8016c08:	2200      	movs	r2, #0
 8016c0a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	2206      	movs	r2, #6
 8016c10:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	2204      	movs	r2, #4
 8016c16:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016c18:	f640 0306 	movw	r3, #2054	; 0x806
 8016c1c:	9300      	str	r3, [sp, #0]
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	68ba      	ldr	r2, [r7, #8]
 8016c22:	69b9      	ldr	r1, [r7, #24]
 8016c24:	68f8      	ldr	r0, [r7, #12]
 8016c26:	f001 fba1 	bl	801836c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016c2a:	69b8      	ldr	r0, [r7, #24]
 8016c2c:	f7f9 fa4e 	bl	80100cc <pbuf_free>
  p = NULL;
 8016c30:	2300      	movs	r3, #0
 8016c32:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016c34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3720      	adds	r7, #32
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	0801d788 	.word	0x0801d788
 8016c44:	0801d8d8 	.word	0x0801d8d8
 8016c48:	0801d800 	.word	0x0801d800
 8016c4c:	0801d988 	.word	0x0801d988
 8016c50:	0801d9bc 	.word	0x0801d9bc

08016c54 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b088      	sub	sp, #32
 8016c58:	af04      	add	r7, sp, #16
 8016c5a:	60f8      	str	r0, [r7, #12]
 8016c5c:	60b9      	str	r1, [r7, #8]
 8016c5e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c70:	2201      	movs	r2, #1
 8016c72:	9203      	str	r2, [sp, #12]
 8016c74:	68ba      	ldr	r2, [r7, #8]
 8016c76:	9202      	str	r2, [sp, #8]
 8016c78:	4a06      	ldr	r2, [pc, #24]	; (8016c94 <etharp_request_dst+0x40>)
 8016c7a:	9201      	str	r2, [sp, #4]
 8016c7c:	9300      	str	r3, [sp, #0]
 8016c7e:	4603      	mov	r3, r0
 8016c80:	687a      	ldr	r2, [r7, #4]
 8016c82:	68f8      	ldr	r0, [r7, #12]
 8016c84:	f7ff ff5a 	bl	8016b3c <etharp_raw>
 8016c88:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3710      	adds	r7, #16
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	0801df94 	.word	0x0801df94

08016c98 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
 8016ca0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016ca2:	4a05      	ldr	r2, [pc, #20]	; (8016cb8 <etharp_request+0x20>)
 8016ca4:	6839      	ldr	r1, [r7, #0]
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f7ff ffd4 	bl	8016c54 <etharp_request_dst>
 8016cac:	4603      	mov	r3, r0
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3708      	adds	r7, #8
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	bf00      	nop
 8016cb8:	0801df8c 	.word	0x0801df8c

08016cbc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b08e      	sub	sp, #56	; 0x38
 8016cc0:	af04      	add	r7, sp, #16
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016cc6:	4b87      	ldr	r3, [pc, #540]	; (8016ee4 <icmp_input+0x228>)
 8016cc8:	689b      	ldr	r3, [r3, #8]
 8016cca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	f003 030f 	and.w	r3, r3, #15
 8016cd4:	b2db      	uxtb	r3, r3
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	b2db      	uxtb	r3, r3
 8016cda:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016cdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016cde:	2b13      	cmp	r3, #19
 8016ce0:	f240 80e8 	bls.w	8016eb4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	895b      	ldrh	r3, [r3, #10]
 8016ce8:	2b03      	cmp	r3, #3
 8016cea:	f240 80e5 	bls.w	8016eb8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	685b      	ldr	r3, [r3, #4]
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016cf8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	f000 80d2 	beq.w	8016ea6 <icmp_input+0x1ea>
 8016d02:	2b08      	cmp	r3, #8
 8016d04:	f040 80d2 	bne.w	8016eac <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016d08:	4b77      	ldr	r3, [pc, #476]	; (8016ee8 <icmp_input+0x22c>)
 8016d0a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d0c:	4b75      	ldr	r3, [pc, #468]	; (8016ee4 <icmp_input+0x228>)
 8016d0e:	695b      	ldr	r3, [r3, #20]
 8016d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d14:	2be0      	cmp	r3, #224	; 0xe0
 8016d16:	f000 80d6 	beq.w	8016ec6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016d1a:	4b72      	ldr	r3, [pc, #456]	; (8016ee4 <icmp_input+0x228>)
 8016d1c:	695b      	ldr	r3, [r3, #20]
 8016d1e:	4a71      	ldr	r2, [pc, #452]	; (8016ee4 <icmp_input+0x228>)
 8016d20:	6812      	ldr	r2, [r2, #0]
 8016d22:	4611      	mov	r1, r2
 8016d24:	4618      	mov	r0, r3
 8016d26:	f000 fc13 	bl	8017550 <ip4_addr_isbroadcast_u32>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	f040 80cc 	bne.w	8016eca <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	891b      	ldrh	r3, [r3, #8]
 8016d36:	2b07      	cmp	r3, #7
 8016d38:	f240 80c0 	bls.w	8016ebc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f7f7 fe6c 	bl	800ea1a <inet_chksum_pbuf>
 8016d42:	4603      	mov	r3, r0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d003      	beq.n	8016d50 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7f9 f9bf 	bl	80100cc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016d4e:	e0c5      	b.n	8016edc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016d50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d52:	330e      	adds	r3, #14
 8016d54:	4619      	mov	r1, r3
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f7f9 f922 	bl	800ffa0 <pbuf_add_header>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d04b      	beq.n	8016dfa <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	891a      	ldrh	r2, [r3, #8]
 8016d66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d68:	4413      	add	r3, r2
 8016d6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	891b      	ldrh	r3, [r3, #8]
 8016d70:	8b7a      	ldrh	r2, [r7, #26]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	f0c0 80ab 	bcc.w	8016ece <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016d78:	8b7b      	ldrh	r3, [r7, #26]
 8016d7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d7e:	4619      	mov	r1, r3
 8016d80:	200e      	movs	r0, #14
 8016d82:	f7f8 febf 	bl	800fb04 <pbuf_alloc>
 8016d86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	f000 80a1 	beq.w	8016ed2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	895b      	ldrh	r3, [r3, #10]
 8016d94:	461a      	mov	r2, r3
 8016d96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d98:	3308      	adds	r3, #8
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d203      	bcs.n	8016da6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016d9e:	6978      	ldr	r0, [r7, #20]
 8016da0:	f7f9 f994 	bl	80100cc <pbuf_free>
          goto icmperr;
 8016da4:	e096      	b.n	8016ed4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	685b      	ldr	r3, [r3, #4]
 8016daa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016dae:	4618      	mov	r0, r3
 8016db0:	f002 fa1a 	bl	80191e8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016db4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016db6:	4619      	mov	r1, r3
 8016db8:	6978      	ldr	r0, [r7, #20]
 8016dba:	f7f9 f901 	bl	800ffc0 <pbuf_remove_header>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d009      	beq.n	8016dd8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016dc4:	4b49      	ldr	r3, [pc, #292]	; (8016eec <icmp_input+0x230>)
 8016dc6:	22b6      	movs	r2, #182	; 0xb6
 8016dc8:	4949      	ldr	r1, [pc, #292]	; (8016ef0 <icmp_input+0x234>)
 8016dca:	484a      	ldr	r0, [pc, #296]	; (8016ef4 <icmp_input+0x238>)
 8016dcc:	f002 f83e 	bl	8018e4c <iprintf>
          pbuf_free(r);
 8016dd0:	6978      	ldr	r0, [r7, #20]
 8016dd2:	f7f9 f97b 	bl	80100cc <pbuf_free>
          goto icmperr;
 8016dd6:	e07d      	b.n	8016ed4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016dd8:	6879      	ldr	r1, [r7, #4]
 8016dda:	6978      	ldr	r0, [r7, #20]
 8016ddc:	f7f9 fa8e 	bl	80102fc <pbuf_copy>
 8016de0:	4603      	mov	r3, r0
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d003      	beq.n	8016dee <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016de6:	6978      	ldr	r0, [r7, #20]
 8016de8:	f7f9 f970 	bl	80100cc <pbuf_free>
          goto icmperr;
 8016dec:	e072      	b.n	8016ed4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f7f9 f96c 	bl	80100cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	607b      	str	r3, [r7, #4]
 8016df8:	e00f      	b.n	8016e1a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016dfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dfc:	330e      	adds	r3, #14
 8016dfe:	4619      	mov	r1, r3
 8016e00:	6878      	ldr	r0, [r7, #4]
 8016e02:	f7f9 f8dd 	bl	800ffc0 <pbuf_remove_header>
 8016e06:	4603      	mov	r3, r0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d006      	beq.n	8016e1a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016e0c:	4b37      	ldr	r3, [pc, #220]	; (8016eec <icmp_input+0x230>)
 8016e0e:	22c7      	movs	r2, #199	; 0xc7
 8016e10:	4939      	ldr	r1, [pc, #228]	; (8016ef8 <icmp_input+0x23c>)
 8016e12:	4838      	ldr	r0, [pc, #224]	; (8016ef4 <icmp_input+0x238>)
 8016e14:	f002 f81a 	bl	8018e4c <iprintf>
          goto icmperr;
 8016e18:	e05c      	b.n	8016ed4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	685b      	ldr	r3, [r3, #4]
 8016e1e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016e20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e22:	4619      	mov	r1, r3
 8016e24:	6878      	ldr	r0, [r7, #4]
 8016e26:	f7f9 f8bb 	bl	800ffa0 <pbuf_add_header>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d13c      	bne.n	8016eaa <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	685b      	ldr	r3, [r3, #4]
 8016e34:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016e36:	69fb      	ldr	r3, [r7, #28]
 8016e38:	681a      	ldr	r2, [r3, #0]
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016e3e:	4b29      	ldr	r3, [pc, #164]	; (8016ee4 <icmp_input+0x228>)
 8016e40:	691a      	ldr	r2, [r3, #16]
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016e46:	693b      	ldr	r3, [r7, #16]
 8016e48:	2200      	movs	r2, #0
 8016e4a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	885b      	ldrh	r3, [r3, #2]
 8016e50:	b29b      	uxth	r3, r3
 8016e52:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d907      	bls.n	8016e6a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8016e5a:	693b      	ldr	r3, [r7, #16]
 8016e5c:	885b      	ldrh	r3, [r3, #2]
 8016e5e:	b29b      	uxth	r3, r3
 8016e60:	3309      	adds	r3, #9
 8016e62:	b29a      	uxth	r2, r3
 8016e64:	693b      	ldr	r3, [r7, #16]
 8016e66:	805a      	strh	r2, [r3, #2]
 8016e68:	e006      	b.n	8016e78 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8016e6a:	693b      	ldr	r3, [r7, #16]
 8016e6c:	885b      	ldrh	r3, [r3, #2]
 8016e6e:	b29b      	uxth	r3, r3
 8016e70:	3308      	adds	r3, #8
 8016e72:	b29a      	uxth	r2, r3
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	22ff      	movs	r2, #255	; 0xff
 8016e7c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	2200      	movs	r2, #0
 8016e82:	729a      	strb	r2, [r3, #10]
 8016e84:	2200      	movs	r2, #0
 8016e86:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	9302      	str	r3, [sp, #8]
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	9301      	str	r3, [sp, #4]
 8016e90:	2300      	movs	r3, #0
 8016e92:	9300      	str	r3, [sp, #0]
 8016e94:	23ff      	movs	r3, #255	; 0xff
 8016e96:	2200      	movs	r2, #0
 8016e98:	69f9      	ldr	r1, [r7, #28]
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 fa80 	bl	80173a0 <ip4_output_if>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016ea4:	e001      	b.n	8016eaa <icmp_input+0x1ee>
      break;
 8016ea6:	bf00      	nop
 8016ea8:	e000      	b.n	8016eac <icmp_input+0x1f0>
      break;
 8016eaa:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f7f9 f90d 	bl	80100cc <pbuf_free>
  return;
 8016eb2:	e013      	b.n	8016edc <icmp_input+0x220>
    goto lenerr;
 8016eb4:	bf00      	nop
 8016eb6:	e002      	b.n	8016ebe <icmp_input+0x202>
    goto lenerr;
 8016eb8:	bf00      	nop
 8016eba:	e000      	b.n	8016ebe <icmp_input+0x202>
        goto lenerr;
 8016ebc:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	f7f9 f904 	bl	80100cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016ec4:	e00a      	b.n	8016edc <icmp_input+0x220>
        goto icmperr;
 8016ec6:	bf00      	nop
 8016ec8:	e004      	b.n	8016ed4 <icmp_input+0x218>
        goto icmperr;
 8016eca:	bf00      	nop
 8016ecc:	e002      	b.n	8016ed4 <icmp_input+0x218>
          goto icmperr;
 8016ece:	bf00      	nop
 8016ed0:	e000      	b.n	8016ed4 <icmp_input+0x218>
          goto icmperr;
 8016ed2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f7f9 f8f9 	bl	80100cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016eda:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016edc:	3728      	adds	r7, #40	; 0x28
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	200050dc 	.word	0x200050dc
 8016ee8:	200050f0 	.word	0x200050f0
 8016eec:	0801da00 	.word	0x0801da00
 8016ef0:	0801da38 	.word	0x0801da38
 8016ef4:	0801da70 	.word	0x0801da70
 8016ef8:	0801da98 	.word	0x0801da98

08016efc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b082      	sub	sp, #8
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	460b      	mov	r3, r1
 8016f06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016f08:	78fb      	ldrb	r3, [r7, #3]
 8016f0a:	461a      	mov	r2, r3
 8016f0c:	2103      	movs	r1, #3
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f000 f814 	bl	8016f3c <icmp_send_response>
}
 8016f14:	bf00      	nop
 8016f16:	3708      	adds	r7, #8
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}

08016f1c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b082      	sub	sp, #8
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
 8016f24:	460b      	mov	r3, r1
 8016f26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016f28:	78fb      	ldrb	r3, [r7, #3]
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	210b      	movs	r1, #11
 8016f2e:	6878      	ldr	r0, [r7, #4]
 8016f30:	f000 f804 	bl	8016f3c <icmp_send_response>
}
 8016f34:	bf00      	nop
 8016f36:	3708      	adds	r7, #8
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}

08016f3c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b08c      	sub	sp, #48	; 0x30
 8016f40:	af04      	add	r7, sp, #16
 8016f42:	6078      	str	r0, [r7, #4]
 8016f44:	460b      	mov	r3, r1
 8016f46:	70fb      	strb	r3, [r7, #3]
 8016f48:	4613      	mov	r3, r2
 8016f4a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016f4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f50:	2124      	movs	r1, #36	; 0x24
 8016f52:	2022      	movs	r0, #34	; 0x22
 8016f54:	f7f8 fdd6 	bl	800fb04 <pbuf_alloc>
 8016f58:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016f5a:	69fb      	ldr	r3, [r7, #28]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d056      	beq.n	801700e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	895b      	ldrh	r3, [r3, #10]
 8016f64:	2b23      	cmp	r3, #35	; 0x23
 8016f66:	d806      	bhi.n	8016f76 <icmp_send_response+0x3a>
 8016f68:	4b2b      	ldr	r3, [pc, #172]	; (8017018 <icmp_send_response+0xdc>)
 8016f6a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016f6e:	492b      	ldr	r1, [pc, #172]	; (801701c <icmp_send_response+0xe0>)
 8016f70:	482b      	ldr	r0, [pc, #172]	; (8017020 <icmp_send_response+0xe4>)
 8016f72:	f001 ff6b 	bl	8018e4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016f7c:	69fb      	ldr	r3, [r7, #28]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016f82:	697b      	ldr	r3, [r7, #20]
 8016f84:	78fa      	ldrb	r2, [r7, #3]
 8016f86:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016f88:	697b      	ldr	r3, [r7, #20]
 8016f8a:	78ba      	ldrb	r2, [r7, #2]
 8016f8c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016f8e:	697b      	ldr	r3, [r7, #20]
 8016f90:	2200      	movs	r2, #0
 8016f92:	711a      	strb	r2, [r3, #4]
 8016f94:	2200      	movs	r2, #0
 8016f96:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016f98:	697b      	ldr	r3, [r7, #20]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	719a      	strb	r2, [r3, #6]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016fa2:	69fb      	ldr	r3, [r7, #28]
 8016fa4:	685b      	ldr	r3, [r3, #4]
 8016fa6:	f103 0008 	add.w	r0, r3, #8
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	221c      	movs	r2, #28
 8016fb0:	4619      	mov	r1, r3
 8016fb2:	f002 f919 	bl	80191e8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016fb6:	69bb      	ldr	r3, [r7, #24]
 8016fb8:	68db      	ldr	r3, [r3, #12]
 8016fba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016fbc:	f107 030c 	add.w	r3, r7, #12
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f000 f82f 	bl	8017024 <ip4_route>
 8016fc6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d01b      	beq.n	8017006 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016fce:	697b      	ldr	r3, [r7, #20]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	709a      	strb	r2, [r3, #2]
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8016fd8:	69fb      	ldr	r3, [r7, #28]
 8016fda:	895b      	ldrh	r3, [r3, #10]
 8016fdc:	4619      	mov	r1, r3
 8016fde:	6978      	ldr	r0, [r7, #20]
 8016fe0:	f7f7 fd09 	bl	800e9f6 <inet_chksum>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016fec:	f107 020c 	add.w	r2, r7, #12
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	9302      	str	r3, [sp, #8]
 8016ff4:	2301      	movs	r3, #1
 8016ff6:	9301      	str	r3, [sp, #4]
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	9300      	str	r3, [sp, #0]
 8016ffc:	23ff      	movs	r3, #255	; 0xff
 8016ffe:	2100      	movs	r1, #0
 8017000:	69f8      	ldr	r0, [r7, #28]
 8017002:	f000 f9cd 	bl	80173a0 <ip4_output_if>
  }
  pbuf_free(q);
 8017006:	69f8      	ldr	r0, [r7, #28]
 8017008:	f7f9 f860 	bl	80100cc <pbuf_free>
 801700c:	e000      	b.n	8017010 <icmp_send_response+0xd4>
    return;
 801700e:	bf00      	nop
}
 8017010:	3720      	adds	r7, #32
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	0801da00 	.word	0x0801da00
 801701c:	0801dacc 	.word	0x0801dacc
 8017020:	0801da70 	.word	0x0801da70

08017024 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017024:	b480      	push	{r7}
 8017026:	b085      	sub	sp, #20
 8017028:	af00      	add	r7, sp, #0
 801702a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801702c:	4b33      	ldr	r3, [pc, #204]	; (80170fc <ip4_route+0xd8>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	60fb      	str	r3, [r7, #12]
 8017032:	e036      	b.n	80170a2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801703a:	f003 0301 	and.w	r3, r3, #1
 801703e:	b2db      	uxtb	r3, r3
 8017040:	2b00      	cmp	r3, #0
 8017042:	d02b      	beq.n	801709c <ip4_route+0x78>
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801704a:	089b      	lsrs	r3, r3, #2
 801704c:	f003 0301 	and.w	r3, r3, #1
 8017050:	b2db      	uxtb	r3, r3
 8017052:	2b00      	cmp	r3, #0
 8017054:	d022      	beq.n	801709c <ip4_route+0x78>
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	3304      	adds	r3, #4
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d01d      	beq.n	801709c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681a      	ldr	r2, [r3, #0]
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	3304      	adds	r3, #4
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	405a      	eors	r2, r3
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	3308      	adds	r3, #8
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	4013      	ands	r3, r2
 8017074:	2b00      	cmp	r3, #0
 8017076:	d101      	bne.n	801707c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	e038      	b.n	80170ee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017082:	f003 0302 	and.w	r3, r3, #2
 8017086:	2b00      	cmp	r3, #0
 8017088:	d108      	bne.n	801709c <ip4_route+0x78>
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681a      	ldr	r2, [r3, #0]
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	330c      	adds	r3, #12
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	429a      	cmp	r2, r3
 8017096:	d101      	bne.n	801709c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	e028      	b.n	80170ee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	60fb      	str	r3, [r7, #12]
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d1c5      	bne.n	8017034 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80170a8:	4b15      	ldr	r3, [pc, #84]	; (8017100 <ip4_route+0xdc>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d01a      	beq.n	80170e6 <ip4_route+0xc2>
 80170b0:	4b13      	ldr	r3, [pc, #76]	; (8017100 <ip4_route+0xdc>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170b8:	f003 0301 	and.w	r3, r3, #1
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d012      	beq.n	80170e6 <ip4_route+0xc2>
 80170c0:	4b0f      	ldr	r3, [pc, #60]	; (8017100 <ip4_route+0xdc>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170c8:	f003 0304 	and.w	r3, r3, #4
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d00a      	beq.n	80170e6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80170d0:	4b0b      	ldr	r3, [pc, #44]	; (8017100 <ip4_route+0xdc>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	3304      	adds	r3, #4
 80170d6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d004      	beq.n	80170e6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	b2db      	uxtb	r3, r3
 80170e2:	2b7f      	cmp	r3, #127	; 0x7f
 80170e4:	d101      	bne.n	80170ea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80170e6:	2300      	movs	r3, #0
 80170e8:	e001      	b.n	80170ee <ip4_route+0xca>
  }

  return netif_default;
 80170ea:	4b05      	ldr	r3, [pc, #20]	; (8017100 <ip4_route+0xdc>)
 80170ec:	681b      	ldr	r3, [r3, #0]
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	3714      	adds	r7, #20
 80170f2:	46bd      	mov	sp, r7
 80170f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f8:	4770      	bx	lr
 80170fa:	bf00      	nop
 80170fc:	20007fec 	.word	0x20007fec
 8017100:	20007ff0 	.word	0x20007ff0

08017104 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017112:	f003 0301 	and.w	r3, r3, #1
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b00      	cmp	r3, #0
 801711a:	d016      	beq.n	801714a <ip4_input_accept+0x46>
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	3304      	adds	r3, #4
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d011      	beq.n	801714a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017126:	4b0b      	ldr	r3, [pc, #44]	; (8017154 <ip4_input_accept+0x50>)
 8017128:	695a      	ldr	r2, [r3, #20]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	3304      	adds	r3, #4
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	429a      	cmp	r2, r3
 8017132:	d008      	beq.n	8017146 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017134:	4b07      	ldr	r3, [pc, #28]	; (8017154 <ip4_input_accept+0x50>)
 8017136:	695b      	ldr	r3, [r3, #20]
 8017138:	6879      	ldr	r1, [r7, #4]
 801713a:	4618      	mov	r0, r3
 801713c:	f000 fa08 	bl	8017550 <ip4_addr_isbroadcast_u32>
 8017140:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017142:	2b00      	cmp	r3, #0
 8017144:	d001      	beq.n	801714a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017146:	2301      	movs	r3, #1
 8017148:	e000      	b.n	801714c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801714a:	2300      	movs	r3, #0
}
 801714c:	4618      	mov	r0, r3
 801714e:	3708      	adds	r7, #8
 8017150:	46bd      	mov	sp, r7
 8017152:	bd80      	pop	{r7, pc}
 8017154:	200050dc 	.word	0x200050dc

08017158 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b086      	sub	sp, #24
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
 8017160:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	685b      	ldr	r3, [r3, #4]
 8017166:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	091b      	lsrs	r3, r3, #4
 801716e:	b2db      	uxtb	r3, r3
 8017170:	2b04      	cmp	r3, #4
 8017172:	d004      	beq.n	801717e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017174:	6878      	ldr	r0, [r7, #4]
 8017176:	f7f8 ffa9 	bl	80100cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801717a:	2300      	movs	r3, #0
 801717c:	e107      	b.n	801738e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801717e:	697b      	ldr	r3, [r7, #20]
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	f003 030f 	and.w	r3, r3, #15
 8017186:	b2db      	uxtb	r3, r3
 8017188:	009b      	lsls	r3, r3, #2
 801718a:	b2db      	uxtb	r3, r3
 801718c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	885b      	ldrh	r3, [r3, #2]
 8017192:	b29b      	uxth	r3, r3
 8017194:	4618      	mov	r0, r3
 8017196:	f7f7 fba3 	bl	800e8e0 <lwip_htons>
 801719a:	4603      	mov	r3, r0
 801719c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	891b      	ldrh	r3, [r3, #8]
 80171a2:	89ba      	ldrh	r2, [r7, #12]
 80171a4:	429a      	cmp	r2, r3
 80171a6:	d204      	bcs.n	80171b2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80171a8:	89bb      	ldrh	r3, [r7, #12]
 80171aa:	4619      	mov	r1, r3
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f7f8 fe07 	bl	800fdc0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	895b      	ldrh	r3, [r3, #10]
 80171b6:	89fa      	ldrh	r2, [r7, #14]
 80171b8:	429a      	cmp	r2, r3
 80171ba:	d807      	bhi.n	80171cc <ip4_input+0x74>
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	891b      	ldrh	r3, [r3, #8]
 80171c0:	89ba      	ldrh	r2, [r7, #12]
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d802      	bhi.n	80171cc <ip4_input+0x74>
 80171c6:	89fb      	ldrh	r3, [r7, #14]
 80171c8:	2b13      	cmp	r3, #19
 80171ca:	d804      	bhi.n	80171d6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f7f8 ff7d 	bl	80100cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80171d2:	2300      	movs	r3, #0
 80171d4:	e0db      	b.n	801738e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80171d6:	697b      	ldr	r3, [r7, #20]
 80171d8:	691b      	ldr	r3, [r3, #16]
 80171da:	4a6f      	ldr	r2, [pc, #444]	; (8017398 <ip4_input+0x240>)
 80171dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	68db      	ldr	r3, [r3, #12]
 80171e2:	4a6d      	ldr	r2, [pc, #436]	; (8017398 <ip4_input+0x240>)
 80171e4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80171e6:	4b6c      	ldr	r3, [pc, #432]	; (8017398 <ip4_input+0x240>)
 80171e8:	695b      	ldr	r3, [r3, #20]
 80171ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80171ee:	2be0      	cmp	r3, #224	; 0xe0
 80171f0:	d112      	bne.n	8017218 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80171f8:	f003 0301 	and.w	r3, r3, #1
 80171fc:	b2db      	uxtb	r3, r3
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d007      	beq.n	8017212 <ip4_input+0xba>
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	3304      	adds	r3, #4
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d002      	beq.n	8017212 <ip4_input+0xba>
      netif = inp;
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	613b      	str	r3, [r7, #16]
 8017210:	e02a      	b.n	8017268 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017212:	2300      	movs	r3, #0
 8017214:	613b      	str	r3, [r7, #16]
 8017216:	e027      	b.n	8017268 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017218:	6838      	ldr	r0, [r7, #0]
 801721a:	f7ff ff73 	bl	8017104 <ip4_input_accept>
 801721e:	4603      	mov	r3, r0
 8017220:	2b00      	cmp	r3, #0
 8017222:	d002      	beq.n	801722a <ip4_input+0xd2>
      netif = inp;
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	613b      	str	r3, [r7, #16]
 8017228:	e01e      	b.n	8017268 <ip4_input+0x110>
    } else {
      netif = NULL;
 801722a:	2300      	movs	r3, #0
 801722c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801722e:	4b5a      	ldr	r3, [pc, #360]	; (8017398 <ip4_input+0x240>)
 8017230:	695b      	ldr	r3, [r3, #20]
 8017232:	b2db      	uxtb	r3, r3
 8017234:	2b7f      	cmp	r3, #127	; 0x7f
 8017236:	d017      	beq.n	8017268 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017238:	4b58      	ldr	r3, [pc, #352]	; (801739c <ip4_input+0x244>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	613b      	str	r3, [r7, #16]
 801723e:	e00e      	b.n	801725e <ip4_input+0x106>
          if (netif == inp) {
 8017240:	693a      	ldr	r2, [r7, #16]
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	429a      	cmp	r2, r3
 8017246:	d006      	beq.n	8017256 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017248:	6938      	ldr	r0, [r7, #16]
 801724a:	f7ff ff5b 	bl	8017104 <ip4_input_accept>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d108      	bne.n	8017266 <ip4_input+0x10e>
 8017254:	e000      	b.n	8017258 <ip4_input+0x100>
            continue;
 8017256:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017258:	693b      	ldr	r3, [r7, #16]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	613b      	str	r3, [r7, #16]
 801725e:	693b      	ldr	r3, [r7, #16]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d1ed      	bne.n	8017240 <ip4_input+0xe8>
 8017264:	e000      	b.n	8017268 <ip4_input+0x110>
            break;
 8017266:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017268:	4b4b      	ldr	r3, [pc, #300]	; (8017398 <ip4_input+0x240>)
 801726a:	691b      	ldr	r3, [r3, #16]
 801726c:	6839      	ldr	r1, [r7, #0]
 801726e:	4618      	mov	r0, r3
 8017270:	f000 f96e 	bl	8017550 <ip4_addr_isbroadcast_u32>
 8017274:	4603      	mov	r3, r0
 8017276:	2b00      	cmp	r3, #0
 8017278:	d105      	bne.n	8017286 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801727a:	4b47      	ldr	r3, [pc, #284]	; (8017398 <ip4_input+0x240>)
 801727c:	691b      	ldr	r3, [r3, #16]
 801727e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017282:	2be0      	cmp	r3, #224	; 0xe0
 8017284:	d104      	bne.n	8017290 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017286:	6878      	ldr	r0, [r7, #4]
 8017288:	f7f8 ff20 	bl	80100cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801728c:	2300      	movs	r3, #0
 801728e:	e07e      	b.n	801738e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017290:	693b      	ldr	r3, [r7, #16]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d104      	bne.n	80172a0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f7f8 ff18 	bl	80100cc <pbuf_free>
    return ERR_OK;
 801729c:	2300      	movs	r3, #0
 801729e:	e076      	b.n	801738e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	88db      	ldrh	r3, [r3, #6]
 80172a4:	b29b      	uxth	r3, r3
 80172a6:	461a      	mov	r2, r3
 80172a8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80172ac:	4013      	ands	r3, r2
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d00b      	beq.n	80172ca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80172b2:	6878      	ldr	r0, [r7, #4]
 80172b4:	f000 fc92 	bl	8017bdc <ip4_reass>
 80172b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d101      	bne.n	80172c4 <ip4_input+0x16c>
      return ERR_OK;
 80172c0:	2300      	movs	r3, #0
 80172c2:	e064      	b.n	801738e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	685b      	ldr	r3, [r3, #4]
 80172c8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80172ca:	4a33      	ldr	r2, [pc, #204]	; (8017398 <ip4_input+0x240>)
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80172d0:	4a31      	ldr	r2, [pc, #196]	; (8017398 <ip4_input+0x240>)
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80172d6:	4a30      	ldr	r2, [pc, #192]	; (8017398 <ip4_input+0x240>)
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	781b      	ldrb	r3, [r3, #0]
 80172e0:	f003 030f 	and.w	r3, r3, #15
 80172e4:	b2db      	uxtb	r3, r3
 80172e6:	009b      	lsls	r3, r3, #2
 80172e8:	b2db      	uxtb	r3, r3
 80172ea:	b29a      	uxth	r2, r3
 80172ec:	4b2a      	ldr	r3, [pc, #168]	; (8017398 <ip4_input+0x240>)
 80172ee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80172f0:	89fb      	ldrh	r3, [r7, #14]
 80172f2:	4619      	mov	r1, r3
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f7f8 fe63 	bl	800ffc0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80172fa:	697b      	ldr	r3, [r7, #20]
 80172fc:	7a5b      	ldrb	r3, [r3, #9]
 80172fe:	2b11      	cmp	r3, #17
 8017300:	d006      	beq.n	8017310 <ip4_input+0x1b8>
 8017302:	2b11      	cmp	r3, #17
 8017304:	dc13      	bgt.n	801732e <ip4_input+0x1d6>
 8017306:	2b01      	cmp	r3, #1
 8017308:	d00c      	beq.n	8017324 <ip4_input+0x1cc>
 801730a:	2b06      	cmp	r3, #6
 801730c:	d005      	beq.n	801731a <ip4_input+0x1c2>
 801730e:	e00e      	b.n	801732e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017310:	6839      	ldr	r1, [r7, #0]
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7fe fc42 	bl	8015b9c <udp_input>
        break;
 8017318:	e026      	b.n	8017368 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801731a:	6839      	ldr	r1, [r7, #0]
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f7fa fcfd 	bl	8011d1c <tcp_input>
        break;
 8017322:	e021      	b.n	8017368 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017324:	6839      	ldr	r1, [r7, #0]
 8017326:	6878      	ldr	r0, [r7, #4]
 8017328:	f7ff fcc8 	bl	8016cbc <icmp_input>
        break;
 801732c:	e01c      	b.n	8017368 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801732e:	4b1a      	ldr	r3, [pc, #104]	; (8017398 <ip4_input+0x240>)
 8017330:	695b      	ldr	r3, [r3, #20]
 8017332:	6939      	ldr	r1, [r7, #16]
 8017334:	4618      	mov	r0, r3
 8017336:	f000 f90b 	bl	8017550 <ip4_addr_isbroadcast_u32>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d10f      	bne.n	8017360 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017340:	4b15      	ldr	r3, [pc, #84]	; (8017398 <ip4_input+0x240>)
 8017342:	695b      	ldr	r3, [r3, #20]
 8017344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017348:	2be0      	cmp	r3, #224	; 0xe0
 801734a:	d009      	beq.n	8017360 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801734c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017350:	4619      	mov	r1, r3
 8017352:	6878      	ldr	r0, [r7, #4]
 8017354:	f7f8 fea7 	bl	80100a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017358:	2102      	movs	r1, #2
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f7ff fdce 	bl	8016efc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f7f8 feb3 	bl	80100cc <pbuf_free>
        break;
 8017366:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017368:	4b0b      	ldr	r3, [pc, #44]	; (8017398 <ip4_input+0x240>)
 801736a:	2200      	movs	r2, #0
 801736c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801736e:	4b0a      	ldr	r3, [pc, #40]	; (8017398 <ip4_input+0x240>)
 8017370:	2200      	movs	r2, #0
 8017372:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017374:	4b08      	ldr	r3, [pc, #32]	; (8017398 <ip4_input+0x240>)
 8017376:	2200      	movs	r2, #0
 8017378:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801737a:	4b07      	ldr	r3, [pc, #28]	; (8017398 <ip4_input+0x240>)
 801737c:	2200      	movs	r2, #0
 801737e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017380:	4b05      	ldr	r3, [pc, #20]	; (8017398 <ip4_input+0x240>)
 8017382:	2200      	movs	r2, #0
 8017384:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017386:	4b04      	ldr	r3, [pc, #16]	; (8017398 <ip4_input+0x240>)
 8017388:	2200      	movs	r2, #0
 801738a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801738c:	2300      	movs	r3, #0
}
 801738e:	4618      	mov	r0, r3
 8017390:	3718      	adds	r7, #24
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}
 8017396:	bf00      	nop
 8017398:	200050dc 	.word	0x200050dc
 801739c:	20007fec 	.word	0x20007fec

080173a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b08a      	sub	sp, #40	; 0x28
 80173a4:	af04      	add	r7, sp, #16
 80173a6:	60f8      	str	r0, [r7, #12]
 80173a8:	60b9      	str	r1, [r7, #8]
 80173aa:	607a      	str	r2, [r7, #4]
 80173ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d009      	beq.n	80173cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d003      	beq.n	80173c6 <ip4_output_if+0x26>
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d102      	bne.n	80173cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80173c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c8:	3304      	adds	r3, #4
 80173ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80173cc:	78fa      	ldrb	r2, [r7, #3]
 80173ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d0:	9302      	str	r3, [sp, #8]
 80173d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173d6:	9301      	str	r3, [sp, #4]
 80173d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80173dc:	9300      	str	r3, [sp, #0]
 80173de:	4613      	mov	r3, r2
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	6979      	ldr	r1, [r7, #20]
 80173e4:	68f8      	ldr	r0, [r7, #12]
 80173e6:	f000 f805 	bl	80173f4 <ip4_output_if_src>
 80173ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	3718      	adds	r7, #24
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}

080173f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b088      	sub	sp, #32
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	60f8      	str	r0, [r7, #12]
 80173fc:	60b9      	str	r1, [r7, #8]
 80173fe:	607a      	str	r2, [r7, #4]
 8017400:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	7b9b      	ldrb	r3, [r3, #14]
 8017406:	2b01      	cmp	r3, #1
 8017408:	d006      	beq.n	8017418 <ip4_output_if_src+0x24>
 801740a:	4b4b      	ldr	r3, [pc, #300]	; (8017538 <ip4_output_if_src+0x144>)
 801740c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017410:	494a      	ldr	r1, [pc, #296]	; (801753c <ip4_output_if_src+0x148>)
 8017412:	484b      	ldr	r0, [pc, #300]	; (8017540 <ip4_output_if_src+0x14c>)
 8017414:	f001 fd1a 	bl	8018e4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d060      	beq.n	80174e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801741e:	2314      	movs	r3, #20
 8017420:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017422:	2114      	movs	r1, #20
 8017424:	68f8      	ldr	r0, [r7, #12]
 8017426:	f7f8 fdbb 	bl	800ffa0 <pbuf_add_header>
 801742a:	4603      	mov	r3, r0
 801742c:	2b00      	cmp	r3, #0
 801742e:	d002      	beq.n	8017436 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017430:	f06f 0301 	mvn.w	r3, #1
 8017434:	e07c      	b.n	8017530 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	685b      	ldr	r3, [r3, #4]
 801743a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	895b      	ldrh	r3, [r3, #10]
 8017440:	2b13      	cmp	r3, #19
 8017442:	d806      	bhi.n	8017452 <ip4_output_if_src+0x5e>
 8017444:	4b3c      	ldr	r3, [pc, #240]	; (8017538 <ip4_output_if_src+0x144>)
 8017446:	f44f 7262 	mov.w	r2, #904	; 0x388
 801744a:	493e      	ldr	r1, [pc, #248]	; (8017544 <ip4_output_if_src+0x150>)
 801744c:	483c      	ldr	r0, [pc, #240]	; (8017540 <ip4_output_if_src+0x14c>)
 801744e:	f001 fcfd 	bl	8018e4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017452:	69fb      	ldr	r3, [r7, #28]
 8017454:	78fa      	ldrb	r2, [r7, #3]
 8017456:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017458:	69fb      	ldr	r3, [r7, #28]
 801745a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801745e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681a      	ldr	r2, [r3, #0]
 8017464:	69fb      	ldr	r3, [r7, #28]
 8017466:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017468:	8b7b      	ldrh	r3, [r7, #26]
 801746a:	089b      	lsrs	r3, r3, #2
 801746c:	b29b      	uxth	r3, r3
 801746e:	b2db      	uxtb	r3, r3
 8017470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017474:	b2da      	uxtb	r2, r3
 8017476:	69fb      	ldr	r3, [r7, #28]
 8017478:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801747a:	69fb      	ldr	r3, [r7, #28]
 801747c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017480:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	891b      	ldrh	r3, [r3, #8]
 8017486:	4618      	mov	r0, r3
 8017488:	f7f7 fa2a 	bl	800e8e0 <lwip_htons>
 801748c:	4603      	mov	r3, r0
 801748e:	461a      	mov	r2, r3
 8017490:	69fb      	ldr	r3, [r7, #28]
 8017492:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017494:	69fb      	ldr	r3, [r7, #28]
 8017496:	2200      	movs	r2, #0
 8017498:	719a      	strb	r2, [r3, #6]
 801749a:	2200      	movs	r2, #0
 801749c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801749e:	4b2a      	ldr	r3, [pc, #168]	; (8017548 <ip4_output_if_src+0x154>)
 80174a0:	881b      	ldrh	r3, [r3, #0]
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7f7 fa1c 	bl	800e8e0 <lwip_htons>
 80174a8:	4603      	mov	r3, r0
 80174aa:	461a      	mov	r2, r3
 80174ac:	69fb      	ldr	r3, [r7, #28]
 80174ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80174b0:	4b25      	ldr	r3, [pc, #148]	; (8017548 <ip4_output_if_src+0x154>)
 80174b2:	881b      	ldrh	r3, [r3, #0]
 80174b4:	3301      	adds	r3, #1
 80174b6:	b29a      	uxth	r2, r3
 80174b8:	4b23      	ldr	r3, [pc, #140]	; (8017548 <ip4_output_if_src+0x154>)
 80174ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d104      	bne.n	80174cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80174c2:	4b22      	ldr	r3, [pc, #136]	; (801754c <ip4_output_if_src+0x158>)
 80174c4:	681a      	ldr	r2, [r3, #0]
 80174c6:	69fb      	ldr	r3, [r7, #28]
 80174c8:	60da      	str	r2, [r3, #12]
 80174ca:	e003      	b.n	80174d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	681a      	ldr	r2, [r3, #0]
 80174d0:	69fb      	ldr	r3, [r7, #28]
 80174d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80174d4:	69fb      	ldr	r3, [r7, #28]
 80174d6:	2200      	movs	r2, #0
 80174d8:	729a      	strb	r2, [r3, #10]
 80174da:	2200      	movs	r2, #0
 80174dc:	72da      	strb	r2, [r3, #11]
 80174de:	e00f      	b.n	8017500 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	895b      	ldrh	r3, [r3, #10]
 80174e4:	2b13      	cmp	r3, #19
 80174e6:	d802      	bhi.n	80174ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80174e8:	f06f 0301 	mvn.w	r3, #1
 80174ec:	e020      	b.n	8017530 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	685b      	ldr	r3, [r3, #4]
 80174f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80174f4:	69fb      	ldr	r3, [r7, #28]
 80174f6:	691b      	ldr	r3, [r3, #16]
 80174f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80174fa:	f107 0314 	add.w	r3, r7, #20
 80174fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017502:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017504:	2b00      	cmp	r3, #0
 8017506:	d00c      	beq.n	8017522 <ip4_output_if_src+0x12e>
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	891a      	ldrh	r2, [r3, #8]
 801750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801750e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017510:	429a      	cmp	r2, r3
 8017512:	d906      	bls.n	8017522 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017518:	68f8      	ldr	r0, [r7, #12]
 801751a:	f000 fd53 	bl	8017fc4 <ip4_frag>
 801751e:	4603      	mov	r3, r0
 8017520:	e006      	b.n	8017530 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017524:	695b      	ldr	r3, [r3, #20]
 8017526:	687a      	ldr	r2, [r7, #4]
 8017528:	68f9      	ldr	r1, [r7, #12]
 801752a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801752c:	4798      	blx	r3
 801752e:	4603      	mov	r3, r0
}
 8017530:	4618      	mov	r0, r3
 8017532:	3720      	adds	r7, #32
 8017534:	46bd      	mov	sp, r7
 8017536:	bd80      	pop	{r7, pc}
 8017538:	0801daf8 	.word	0x0801daf8
 801753c:	0801db2c 	.word	0x0801db2c
 8017540:	0801db38 	.word	0x0801db38
 8017544:	0801db60 	.word	0x0801db60
 8017548:	2000814a 	.word	0x2000814a
 801754c:	0801df88 	.word	0x0801df88

08017550 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017550:	b480      	push	{r7}
 8017552:	b085      	sub	sp, #20
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
 8017558:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017564:	d002      	beq.n	801756c <ip4_addr_isbroadcast_u32+0x1c>
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d101      	bne.n	8017570 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801756c:	2301      	movs	r3, #1
 801756e:	e02a      	b.n	80175c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017576:	f003 0302 	and.w	r3, r3, #2
 801757a:	2b00      	cmp	r3, #0
 801757c:	d101      	bne.n	8017582 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801757e:	2300      	movs	r3, #0
 8017580:	e021      	b.n	80175c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	3304      	adds	r3, #4
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	687a      	ldr	r2, [r7, #4]
 801758a:	429a      	cmp	r2, r3
 801758c:	d101      	bne.n	8017592 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801758e:	2300      	movs	r3, #0
 8017590:	e019      	b.n	80175c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017592:	68fa      	ldr	r2, [r7, #12]
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	3304      	adds	r3, #4
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	405a      	eors	r2, r3
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	3308      	adds	r3, #8
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	4013      	ands	r3, r2
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d10d      	bne.n	80175c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	3308      	adds	r3, #8
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	43da      	mvns	r2, r3
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	3308      	adds	r3, #8
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80175bc:	429a      	cmp	r2, r3
 80175be:	d101      	bne.n	80175c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80175c0:	2301      	movs	r3, #1
 80175c2:	e000      	b.n	80175c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80175c4:	2300      	movs	r3, #0
  }
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3714      	adds	r7, #20
 80175ca:	46bd      	mov	sp, r7
 80175cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d0:	4770      	bx	lr
	...

080175d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b084      	sub	sp, #16
 80175d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80175da:	2300      	movs	r3, #0
 80175dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80175de:	4b12      	ldr	r3, [pc, #72]	; (8017628 <ip_reass_tmr+0x54>)
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80175e4:	e018      	b.n	8017618 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	7fdb      	ldrb	r3, [r3, #31]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d00b      	beq.n	8017606 <ip_reass_tmr+0x32>
      r->timer--;
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	7fdb      	ldrb	r3, [r3, #31]
 80175f2:	3b01      	subs	r3, #1
 80175f4:	b2da      	uxtb	r2, r3
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	60fb      	str	r3, [r7, #12]
 8017604:	e008      	b.n	8017618 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017610:	68b9      	ldr	r1, [r7, #8]
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f000 f80a 	bl	801762c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d1e3      	bne.n	80175e6 <ip_reass_tmr+0x12>
    }
  }
}
 801761e:	bf00      	nop
 8017620:	bf00      	nop
 8017622:	3710      	adds	r7, #16
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}
 8017628:	2000814c 	.word	0x2000814c

0801762c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b088      	sub	sp, #32
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017636:	2300      	movs	r3, #0
 8017638:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801763a:	683a      	ldr	r2, [r7, #0]
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	429a      	cmp	r2, r3
 8017640:	d105      	bne.n	801764e <ip_reass_free_complete_datagram+0x22>
 8017642:	4b45      	ldr	r3, [pc, #276]	; (8017758 <ip_reass_free_complete_datagram+0x12c>)
 8017644:	22ab      	movs	r2, #171	; 0xab
 8017646:	4945      	ldr	r1, [pc, #276]	; (801775c <ip_reass_free_complete_datagram+0x130>)
 8017648:	4845      	ldr	r0, [pc, #276]	; (8017760 <ip_reass_free_complete_datagram+0x134>)
 801764a:	f001 fbff 	bl	8018e4c <iprintf>
  if (prev != NULL) {
 801764e:	683b      	ldr	r3, [r7, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d00a      	beq.n	801766a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	687a      	ldr	r2, [r7, #4]
 801765a:	429a      	cmp	r2, r3
 801765c:	d005      	beq.n	801766a <ip_reass_free_complete_datagram+0x3e>
 801765e:	4b3e      	ldr	r3, [pc, #248]	; (8017758 <ip_reass_free_complete_datagram+0x12c>)
 8017660:	22ad      	movs	r2, #173	; 0xad
 8017662:	4940      	ldr	r1, [pc, #256]	; (8017764 <ip_reass_free_complete_datagram+0x138>)
 8017664:	483e      	ldr	r0, [pc, #248]	; (8017760 <ip_reass_free_complete_datagram+0x134>)
 8017666:	f001 fbf1 	bl	8018e4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	685b      	ldr	r3, [r3, #4]
 801766e:	685b      	ldr	r3, [r3, #4]
 8017670:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017672:	697b      	ldr	r3, [r7, #20]
 8017674:	889b      	ldrh	r3, [r3, #4]
 8017676:	b29b      	uxth	r3, r3
 8017678:	2b00      	cmp	r3, #0
 801767a:	d12a      	bne.n	80176d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017682:	697b      	ldr	r3, [r7, #20]
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801768a:	69bb      	ldr	r3, [r7, #24]
 801768c:	6858      	ldr	r0, [r3, #4]
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	3308      	adds	r3, #8
 8017692:	2214      	movs	r2, #20
 8017694:	4619      	mov	r1, r3
 8017696:	f001 fda7 	bl	80191e8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801769a:	2101      	movs	r1, #1
 801769c:	69b8      	ldr	r0, [r7, #24]
 801769e:	f7ff fc3d 	bl	8016f1c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80176a2:	69b8      	ldr	r0, [r7, #24]
 80176a4:	f7f8 fd9a 	bl	80101dc <pbuf_clen>
 80176a8:	4603      	mov	r3, r0
 80176aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80176ac:	8bfa      	ldrh	r2, [r7, #30]
 80176ae:	8a7b      	ldrh	r3, [r7, #18]
 80176b0:	4413      	add	r3, r2
 80176b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176b6:	db05      	blt.n	80176c4 <ip_reass_free_complete_datagram+0x98>
 80176b8:	4b27      	ldr	r3, [pc, #156]	; (8017758 <ip_reass_free_complete_datagram+0x12c>)
 80176ba:	22bc      	movs	r2, #188	; 0xbc
 80176bc:	492a      	ldr	r1, [pc, #168]	; (8017768 <ip_reass_free_complete_datagram+0x13c>)
 80176be:	4828      	ldr	r0, [pc, #160]	; (8017760 <ip_reass_free_complete_datagram+0x134>)
 80176c0:	f001 fbc4 	bl	8018e4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80176c4:	8bfa      	ldrh	r2, [r7, #30]
 80176c6:	8a7b      	ldrh	r3, [r7, #18]
 80176c8:	4413      	add	r3, r2
 80176ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80176cc:	69b8      	ldr	r0, [r7, #24]
 80176ce:	f7f8 fcfd 	bl	80100cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	685b      	ldr	r3, [r3, #4]
 80176d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80176d8:	e01f      	b.n	801771a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80176da:	69bb      	ldr	r3, [r7, #24]
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80176e0:	69bb      	ldr	r3, [r7, #24]
 80176e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80176e4:	697b      	ldr	r3, [r7, #20]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80176ea:	68f8      	ldr	r0, [r7, #12]
 80176ec:	f7f8 fd76 	bl	80101dc <pbuf_clen>
 80176f0:	4603      	mov	r3, r0
 80176f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80176f4:	8bfa      	ldrh	r2, [r7, #30]
 80176f6:	8a7b      	ldrh	r3, [r7, #18]
 80176f8:	4413      	add	r3, r2
 80176fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176fe:	db05      	blt.n	801770c <ip_reass_free_complete_datagram+0xe0>
 8017700:	4b15      	ldr	r3, [pc, #84]	; (8017758 <ip_reass_free_complete_datagram+0x12c>)
 8017702:	22cc      	movs	r2, #204	; 0xcc
 8017704:	4918      	ldr	r1, [pc, #96]	; (8017768 <ip_reass_free_complete_datagram+0x13c>)
 8017706:	4816      	ldr	r0, [pc, #88]	; (8017760 <ip_reass_free_complete_datagram+0x134>)
 8017708:	f001 fba0 	bl	8018e4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801770c:	8bfa      	ldrh	r2, [r7, #30]
 801770e:	8a7b      	ldrh	r3, [r7, #18]
 8017710:	4413      	add	r3, r2
 8017712:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017714:	68f8      	ldr	r0, [r7, #12]
 8017716:	f7f8 fcd9 	bl	80100cc <pbuf_free>
  while (p != NULL) {
 801771a:	69bb      	ldr	r3, [r7, #24]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d1dc      	bne.n	80176da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017720:	6839      	ldr	r1, [r7, #0]
 8017722:	6878      	ldr	r0, [r7, #4]
 8017724:	f000 f8c2 	bl	80178ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017728:	4b10      	ldr	r3, [pc, #64]	; (801776c <ip_reass_free_complete_datagram+0x140>)
 801772a:	881b      	ldrh	r3, [r3, #0]
 801772c:	8bfa      	ldrh	r2, [r7, #30]
 801772e:	429a      	cmp	r2, r3
 8017730:	d905      	bls.n	801773e <ip_reass_free_complete_datagram+0x112>
 8017732:	4b09      	ldr	r3, [pc, #36]	; (8017758 <ip_reass_free_complete_datagram+0x12c>)
 8017734:	22d2      	movs	r2, #210	; 0xd2
 8017736:	490e      	ldr	r1, [pc, #56]	; (8017770 <ip_reass_free_complete_datagram+0x144>)
 8017738:	4809      	ldr	r0, [pc, #36]	; (8017760 <ip_reass_free_complete_datagram+0x134>)
 801773a:	f001 fb87 	bl	8018e4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801773e:	4b0b      	ldr	r3, [pc, #44]	; (801776c <ip_reass_free_complete_datagram+0x140>)
 8017740:	881a      	ldrh	r2, [r3, #0]
 8017742:	8bfb      	ldrh	r3, [r7, #30]
 8017744:	1ad3      	subs	r3, r2, r3
 8017746:	b29a      	uxth	r2, r3
 8017748:	4b08      	ldr	r3, [pc, #32]	; (801776c <ip_reass_free_complete_datagram+0x140>)
 801774a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801774c:	8bfb      	ldrh	r3, [r7, #30]
}
 801774e:	4618      	mov	r0, r3
 8017750:	3720      	adds	r7, #32
 8017752:	46bd      	mov	sp, r7
 8017754:	bd80      	pop	{r7, pc}
 8017756:	bf00      	nop
 8017758:	0801db90 	.word	0x0801db90
 801775c:	0801dbcc 	.word	0x0801dbcc
 8017760:	0801dbd8 	.word	0x0801dbd8
 8017764:	0801dc00 	.word	0x0801dc00
 8017768:	0801dc14 	.word	0x0801dc14
 801776c:	20008150 	.word	0x20008150
 8017770:	0801dc34 	.word	0x0801dc34

08017774 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b08a      	sub	sp, #40	; 0x28
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
 801777c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801777e:	2300      	movs	r3, #0
 8017780:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017782:	2300      	movs	r3, #0
 8017784:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017786:	2300      	movs	r3, #0
 8017788:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801778a:	2300      	movs	r3, #0
 801778c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801778e:	2300      	movs	r3, #0
 8017790:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017792:	4b28      	ldr	r3, [pc, #160]	; (8017834 <ip_reass_remove_oldest_datagram+0xc0>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017798:	e030      	b.n	80177fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801779c:	695a      	ldr	r2, [r3, #20]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	68db      	ldr	r3, [r3, #12]
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d10c      	bne.n	80177c0 <ip_reass_remove_oldest_datagram+0x4c>
 80177a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a8:	699a      	ldr	r2, [r3, #24]
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	691b      	ldr	r3, [r3, #16]
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d106      	bne.n	80177c0 <ip_reass_remove_oldest_datagram+0x4c>
 80177b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b4:	899a      	ldrh	r2, [r3, #12]
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	889b      	ldrh	r3, [r3, #4]
 80177ba:	b29b      	uxth	r3, r3
 80177bc:	429a      	cmp	r2, r3
 80177be:	d014      	beq.n	80177ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80177c0:	693b      	ldr	r3, [r7, #16]
 80177c2:	3301      	adds	r3, #1
 80177c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80177c6:	6a3b      	ldr	r3, [r7, #32]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d104      	bne.n	80177d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80177cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80177d0:	69fb      	ldr	r3, [r7, #28]
 80177d2:	61bb      	str	r3, [r7, #24]
 80177d4:	e009      	b.n	80177ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80177d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d8:	7fda      	ldrb	r2, [r3, #31]
 80177da:	6a3b      	ldr	r3, [r7, #32]
 80177dc:	7fdb      	ldrb	r3, [r3, #31]
 80177de:	429a      	cmp	r2, r3
 80177e0:	d803      	bhi.n	80177ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80177e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80177e6:	69fb      	ldr	r3, [r7, #28]
 80177e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80177ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d001      	beq.n	80177f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80177f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80177f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80177fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d1cb      	bne.n	801779a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017802:	6a3b      	ldr	r3, [r7, #32]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d008      	beq.n	801781a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017808:	69b9      	ldr	r1, [r7, #24]
 801780a:	6a38      	ldr	r0, [r7, #32]
 801780c:	f7ff ff0e 	bl	801762c <ip_reass_free_complete_datagram>
 8017810:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017812:	697a      	ldr	r2, [r7, #20]
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	4413      	add	r3, r2
 8017818:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801781a:	697a      	ldr	r2, [r7, #20]
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	429a      	cmp	r2, r3
 8017820:	da02      	bge.n	8017828 <ip_reass_remove_oldest_datagram+0xb4>
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	2b01      	cmp	r3, #1
 8017826:	dcac      	bgt.n	8017782 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017828:	697b      	ldr	r3, [r7, #20]
}
 801782a:	4618      	mov	r0, r3
 801782c:	3728      	adds	r7, #40	; 0x28
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}
 8017832:	bf00      	nop
 8017834:	2000814c 	.word	0x2000814c

08017838 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b084      	sub	sp, #16
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
 8017840:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017842:	2004      	movs	r0, #4
 8017844:	f7f7 fd7c 	bl	800f340 <memp_malloc>
 8017848:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d110      	bne.n	8017872 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017850:	6839      	ldr	r1, [r7, #0]
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f7ff ff8e 	bl	8017774 <ip_reass_remove_oldest_datagram>
 8017858:	4602      	mov	r2, r0
 801785a:	683b      	ldr	r3, [r7, #0]
 801785c:	4293      	cmp	r3, r2
 801785e:	dc03      	bgt.n	8017868 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017860:	2004      	movs	r0, #4
 8017862:	f7f7 fd6d 	bl	800f340 <memp_malloc>
 8017866:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d101      	bne.n	8017872 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801786e:	2300      	movs	r3, #0
 8017870:	e016      	b.n	80178a0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017872:	2220      	movs	r2, #32
 8017874:	2100      	movs	r1, #0
 8017876:	68f8      	ldr	r0, [r7, #12]
 8017878:	f001 fc3e 	bl	80190f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	220f      	movs	r2, #15
 8017880:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017882:	4b09      	ldr	r3, [pc, #36]	; (80178a8 <ip_reass_enqueue_new_datagram+0x70>)
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801788a:	4a07      	ldr	r2, [pc, #28]	; (80178a8 <ip_reass_enqueue_new_datagram+0x70>)
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	3308      	adds	r3, #8
 8017894:	2214      	movs	r2, #20
 8017896:	6879      	ldr	r1, [r7, #4]
 8017898:	4618      	mov	r0, r3
 801789a:	f001 fca5 	bl	80191e8 <memcpy>
  return ipr;
 801789e:	68fb      	ldr	r3, [r7, #12]
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	3710      	adds	r7, #16
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}
 80178a8:	2000814c 	.word	0x2000814c

080178ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b082      	sub	sp, #8
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80178b6:	4b10      	ldr	r3, [pc, #64]	; (80178f8 <ip_reass_dequeue_datagram+0x4c>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	687a      	ldr	r2, [r7, #4]
 80178bc:	429a      	cmp	r2, r3
 80178be:	d104      	bne.n	80178ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	4a0c      	ldr	r2, [pc, #48]	; (80178f8 <ip_reass_dequeue_datagram+0x4c>)
 80178c6:	6013      	str	r3, [r2, #0]
 80178c8:	e00d      	b.n	80178e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d106      	bne.n	80178de <ip_reass_dequeue_datagram+0x32>
 80178d0:	4b0a      	ldr	r3, [pc, #40]	; (80178fc <ip_reass_dequeue_datagram+0x50>)
 80178d2:	f240 1245 	movw	r2, #325	; 0x145
 80178d6:	490a      	ldr	r1, [pc, #40]	; (8017900 <ip_reass_dequeue_datagram+0x54>)
 80178d8:	480a      	ldr	r0, [pc, #40]	; (8017904 <ip_reass_dequeue_datagram+0x58>)
 80178da:	f001 fab7 	bl	8018e4c <iprintf>
    prev->next = ipr->next;
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681a      	ldr	r2, [r3, #0]
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80178e6:	6879      	ldr	r1, [r7, #4]
 80178e8:	2004      	movs	r0, #4
 80178ea:	f7f7 fd99 	bl	800f420 <memp_free>
}
 80178ee:	bf00      	nop
 80178f0:	3708      	adds	r7, #8
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	bf00      	nop
 80178f8:	2000814c 	.word	0x2000814c
 80178fc:	0801db90 	.word	0x0801db90
 8017900:	0801dc58 	.word	0x0801dc58
 8017904:	0801dbd8 	.word	0x0801dbd8

08017908 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b08c      	sub	sp, #48	; 0x30
 801790c:	af00      	add	r7, sp, #0
 801790e:	60f8      	str	r0, [r7, #12]
 8017910:	60b9      	str	r1, [r7, #8]
 8017912:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017914:	2300      	movs	r3, #0
 8017916:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017918:	2301      	movs	r3, #1
 801791a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801791c:	68bb      	ldr	r3, [r7, #8]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017922:	69fb      	ldr	r3, [r7, #28]
 8017924:	885b      	ldrh	r3, [r3, #2]
 8017926:	b29b      	uxth	r3, r3
 8017928:	4618      	mov	r0, r3
 801792a:	f7f6 ffd9 	bl	800e8e0 <lwip_htons>
 801792e:	4603      	mov	r3, r0
 8017930:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017932:	69fb      	ldr	r3, [r7, #28]
 8017934:	781b      	ldrb	r3, [r3, #0]
 8017936:	f003 030f 	and.w	r3, r3, #15
 801793a:	b2db      	uxtb	r3, r3
 801793c:	009b      	lsls	r3, r3, #2
 801793e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017940:	7e7b      	ldrb	r3, [r7, #25]
 8017942:	b29b      	uxth	r3, r3
 8017944:	8b7a      	ldrh	r2, [r7, #26]
 8017946:	429a      	cmp	r2, r3
 8017948:	d202      	bcs.n	8017950 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801794a:	f04f 33ff 	mov.w	r3, #4294967295
 801794e:	e135      	b.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017950:	7e7b      	ldrb	r3, [r7, #25]
 8017952:	b29b      	uxth	r3, r3
 8017954:	8b7a      	ldrh	r2, [r7, #26]
 8017956:	1ad3      	subs	r3, r2, r3
 8017958:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801795a:	69fb      	ldr	r3, [r7, #28]
 801795c:	88db      	ldrh	r3, [r3, #6]
 801795e:	b29b      	uxth	r3, r3
 8017960:	4618      	mov	r0, r3
 8017962:	f7f6 ffbd 	bl	800e8e0 <lwip_htons>
 8017966:	4603      	mov	r3, r0
 8017968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801796c:	b29b      	uxth	r3, r3
 801796e:	00db      	lsls	r3, r3, #3
 8017970:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017972:	68bb      	ldr	r3, [r7, #8]
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801797a:	2200      	movs	r2, #0
 801797c:	701a      	strb	r2, [r3, #0]
 801797e:	2200      	movs	r2, #0
 8017980:	705a      	strb	r2, [r3, #1]
 8017982:	2200      	movs	r2, #0
 8017984:	709a      	strb	r2, [r3, #2]
 8017986:	2200      	movs	r2, #0
 8017988:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798c:	8afa      	ldrh	r2, [r7, #22]
 801798e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017990:	8afa      	ldrh	r2, [r7, #22]
 8017992:	8b7b      	ldrh	r3, [r7, #26]
 8017994:	4413      	add	r3, r2
 8017996:	b29a      	uxth	r2, r3
 8017998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801799a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801799e:	88db      	ldrh	r3, [r3, #6]
 80179a0:	b29b      	uxth	r3, r3
 80179a2:	8afa      	ldrh	r2, [r7, #22]
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d902      	bls.n	80179ae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80179a8:	f04f 33ff 	mov.w	r3, #4294967295
 80179ac:	e106      	b.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	685b      	ldr	r3, [r3, #4]
 80179b2:	627b      	str	r3, [r7, #36]	; 0x24
 80179b4:	e068      	b.n	8017a88 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80179b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b8:	685b      	ldr	r3, [r3, #4]
 80179ba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80179bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179be:	889b      	ldrh	r3, [r3, #4]
 80179c0:	b29a      	uxth	r2, r3
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	889b      	ldrh	r3, [r3, #4]
 80179c6:	b29b      	uxth	r3, r3
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d235      	bcs.n	8017a38 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80179cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80179d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d020      	beq.n	8017a1a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80179d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179da:	889b      	ldrh	r3, [r3, #4]
 80179dc:	b29a      	uxth	r2, r3
 80179de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e0:	88db      	ldrh	r3, [r3, #6]
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d307      	bcc.n	80179f8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80179e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ea:	88db      	ldrh	r3, [r3, #6]
 80179ec:	b29a      	uxth	r2, r3
 80179ee:	693b      	ldr	r3, [r7, #16]
 80179f0:	889b      	ldrh	r3, [r3, #4]
 80179f2:	b29b      	uxth	r3, r3
 80179f4:	429a      	cmp	r2, r3
 80179f6:	d902      	bls.n	80179fe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80179f8:	f04f 33ff 	mov.w	r3, #4294967295
 80179fc:	e0de      	b.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80179fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a00:	68ba      	ldr	r2, [r7, #8]
 8017a02:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a06:	88db      	ldrh	r3, [r3, #6]
 8017a08:	b29a      	uxth	r2, r3
 8017a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a0c:	889b      	ldrh	r3, [r3, #4]
 8017a0e:	b29b      	uxth	r3, r3
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d03d      	beq.n	8017a90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017a18:	e03a      	b.n	8017a90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a1c:	88db      	ldrh	r3, [r3, #6]
 8017a1e:	b29a      	uxth	r2, r3
 8017a20:	693b      	ldr	r3, [r7, #16]
 8017a22:	889b      	ldrh	r3, [r3, #4]
 8017a24:	b29b      	uxth	r3, r3
 8017a26:	429a      	cmp	r2, r3
 8017a28:	d902      	bls.n	8017a30 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8017a2e:	e0c5      	b.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	68ba      	ldr	r2, [r7, #8]
 8017a34:	605a      	str	r2, [r3, #4]
      break;
 8017a36:	e02b      	b.n	8017a90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a3a:	889b      	ldrh	r3, [r3, #4]
 8017a3c:	b29a      	uxth	r2, r3
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	889b      	ldrh	r3, [r3, #4]
 8017a42:	b29b      	uxth	r3, r3
 8017a44:	429a      	cmp	r2, r3
 8017a46:	d102      	bne.n	8017a4e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a48:	f04f 33ff 	mov.w	r3, #4294967295
 8017a4c:	e0b6      	b.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a50:	889b      	ldrh	r3, [r3, #4]
 8017a52:	b29a      	uxth	r2, r3
 8017a54:	693b      	ldr	r3, [r7, #16]
 8017a56:	88db      	ldrh	r3, [r3, #6]
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d202      	bcs.n	8017a64 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a62:	e0ab      	b.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d009      	beq.n	8017a7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a6c:	88db      	ldrh	r3, [r3, #6]
 8017a6e:	b29a      	uxth	r2, r3
 8017a70:	693b      	ldr	r3, [r7, #16]
 8017a72:	889b      	ldrh	r3, [r3, #4]
 8017a74:	b29b      	uxth	r3, r3
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d001      	beq.n	8017a7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017a7e:	693b      	ldr	r3, [r7, #16]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017a84:	693b      	ldr	r3, [r7, #16]
 8017a86:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d193      	bne.n	80179b6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017a8e:	e000      	b.n	8017a92 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017a90:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d12d      	bne.n	8017af4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d01c      	beq.n	8017ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aa0:	88db      	ldrh	r3, [r3, #6]
 8017aa2:	b29a      	uxth	r2, r3
 8017aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aa6:	889b      	ldrh	r3, [r3, #4]
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	d906      	bls.n	8017abc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017aae:	4b45      	ldr	r3, [pc, #276]	; (8017bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ab0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017ab4:	4944      	ldr	r1, [pc, #272]	; (8017bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017ab6:	4845      	ldr	r0, [pc, #276]	; (8017bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ab8:	f001 f9c8 	bl	8018e4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017abe:	68ba      	ldr	r2, [r7, #8]
 8017ac0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ac4:	88db      	ldrh	r3, [r3, #6]
 8017ac6:	b29a      	uxth	r2, r3
 8017ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aca:	889b      	ldrh	r3, [r3, #4]
 8017acc:	b29b      	uxth	r3, r3
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	d010      	beq.n	8017af4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	623b      	str	r3, [r7, #32]
 8017ad6:	e00d      	b.n	8017af4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	685b      	ldr	r3, [r3, #4]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d006      	beq.n	8017aee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017ae0:	4b38      	ldr	r3, [pc, #224]	; (8017bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ae2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017ae6:	493a      	ldr	r1, [pc, #232]	; (8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017ae8:	4838      	ldr	r0, [pc, #224]	; (8017bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017aea:	f001 f9af 	bl	8018e4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	68ba      	ldr	r2, [r7, #8]
 8017af2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d105      	bne.n	8017b06 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	7f9b      	ldrb	r3, [r3, #30]
 8017afe:	f003 0301 	and.w	r3, r3, #1
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d059      	beq.n	8017bba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017b06:	6a3b      	ldr	r3, [r7, #32]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d04f      	beq.n	8017bac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	685b      	ldr	r3, [r3, #4]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d006      	beq.n	8017b22 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	685b      	ldr	r3, [r3, #4]
 8017b18:	685b      	ldr	r3, [r3, #4]
 8017b1a:	889b      	ldrh	r3, [r3, #4]
 8017b1c:	b29b      	uxth	r3, r3
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d002      	beq.n	8017b28 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017b22:	2300      	movs	r3, #0
 8017b24:	623b      	str	r3, [r7, #32]
 8017b26:	e041      	b.n	8017bac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017b32:	e012      	b.n	8017b5a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b36:	685b      	ldr	r3, [r3, #4]
 8017b38:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b3c:	88db      	ldrh	r3, [r3, #6]
 8017b3e:	b29a      	uxth	r2, r3
 8017b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b42:	889b      	ldrh	r3, [r3, #4]
 8017b44:	b29b      	uxth	r3, r3
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d002      	beq.n	8017b50 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	623b      	str	r3, [r7, #32]
            break;
 8017b4e:	e007      	b.n	8017b60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b52:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d1e9      	bne.n	8017b34 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017b60:	6a3b      	ldr	r3, [r7, #32]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d022      	beq.n	8017bac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	685b      	ldr	r3, [r3, #4]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d106      	bne.n	8017b7c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017b6e:	4b15      	ldr	r3, [pc, #84]	; (8017bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017b70:	f240 12df 	movw	r2, #479	; 0x1df
 8017b74:	4917      	ldr	r1, [pc, #92]	; (8017bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017b76:	4815      	ldr	r0, [pc, #84]	; (8017bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017b78:	f001 f968 	bl	8018e4c <iprintf>
          LWIP_ASSERT("sanity check",
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	685b      	ldr	r3, [r3, #4]
 8017b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d106      	bne.n	8017b96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017b88:	4b0e      	ldr	r3, [pc, #56]	; (8017bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017b8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017b8e:	4911      	ldr	r1, [pc, #68]	; (8017bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017b90:	480e      	ldr	r0, [pc, #56]	; (8017bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017b92:	f001 f95b 	bl	8018e4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d006      	beq.n	8017bac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017b9e:	4b09      	ldr	r3, [pc, #36]	; (8017bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ba0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017ba4:	490c      	ldr	r1, [pc, #48]	; (8017bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017ba6:	4809      	ldr	r0, [pc, #36]	; (8017bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ba8:	f001 f950 	bl	8018e4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017bac:	6a3b      	ldr	r3, [r7, #32]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	bf14      	ite	ne
 8017bb2:	2301      	movne	r3, #1
 8017bb4:	2300      	moveq	r3, #0
 8017bb6:	b2db      	uxtb	r3, r3
 8017bb8:	e000      	b.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017bba:	2300      	movs	r3, #0
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3730      	adds	r7, #48	; 0x30
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}
 8017bc4:	0801db90 	.word	0x0801db90
 8017bc8:	0801dc74 	.word	0x0801dc74
 8017bcc:	0801dbd8 	.word	0x0801dbd8
 8017bd0:	0801dc94 	.word	0x0801dc94
 8017bd4:	0801dccc 	.word	0x0801dccc
 8017bd8:	0801dcdc 	.word	0x0801dcdc

08017bdc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b08e      	sub	sp, #56	; 0x38
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	685b      	ldr	r3, [r3, #4]
 8017be8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bec:	781b      	ldrb	r3, [r3, #0]
 8017bee:	f003 030f 	and.w	r3, r3, #15
 8017bf2:	b2db      	uxtb	r3, r3
 8017bf4:	009b      	lsls	r3, r3, #2
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	2b14      	cmp	r3, #20
 8017bfa:	f040 8171 	bne.w	8017ee0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c00:	88db      	ldrh	r3, [r3, #6]
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7f6 fe6b 	bl	800e8e0 <lwip_htons>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c10:	b29b      	uxth	r3, r3
 8017c12:	00db      	lsls	r3, r3, #3
 8017c14:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c18:	885b      	ldrh	r3, [r3, #2]
 8017c1a:	b29b      	uxth	r3, r3
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7f6 fe5f 	bl	800e8e0 <lwip_htons>
 8017c22:	4603      	mov	r3, r0
 8017c24:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c28:	781b      	ldrb	r3, [r3, #0]
 8017c2a:	f003 030f 	and.w	r3, r3, #15
 8017c2e:	b2db      	uxtb	r3, r3
 8017c30:	009b      	lsls	r3, r3, #2
 8017c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017c36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	f0c0 8150 	bcc.w	8017ee4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c4c:	1ad3      	subs	r3, r2, r3
 8017c4e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f7f8 fac3 	bl	80101dc <pbuf_clen>
 8017c56:	4603      	mov	r3, r0
 8017c58:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017c5a:	4b8c      	ldr	r3, [pc, #560]	; (8017e8c <ip4_reass+0x2b0>)
 8017c5c:	881b      	ldrh	r3, [r3, #0]
 8017c5e:	461a      	mov	r2, r3
 8017c60:	8c3b      	ldrh	r3, [r7, #32]
 8017c62:	4413      	add	r3, r2
 8017c64:	2b0a      	cmp	r3, #10
 8017c66:	dd10      	ble.n	8017c8a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017c68:	8c3b      	ldrh	r3, [r7, #32]
 8017c6a:	4619      	mov	r1, r3
 8017c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c6e:	f7ff fd81 	bl	8017774 <ip_reass_remove_oldest_datagram>
 8017c72:	4603      	mov	r3, r0
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	f000 8137 	beq.w	8017ee8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017c7a:	4b84      	ldr	r3, [pc, #528]	; (8017e8c <ip4_reass+0x2b0>)
 8017c7c:	881b      	ldrh	r3, [r3, #0]
 8017c7e:	461a      	mov	r2, r3
 8017c80:	8c3b      	ldrh	r3, [r7, #32]
 8017c82:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017c84:	2b0a      	cmp	r3, #10
 8017c86:	f300 812f 	bgt.w	8017ee8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017c8a:	4b81      	ldr	r3, [pc, #516]	; (8017e90 <ip4_reass+0x2b4>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8017c90:	e015      	b.n	8017cbe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c94:	695a      	ldr	r2, [r3, #20]
 8017c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c98:	68db      	ldr	r3, [r3, #12]
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	d10c      	bne.n	8017cb8 <ip4_reass+0xdc>
 8017c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca0:	699a      	ldr	r2, [r3, #24]
 8017ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca4:	691b      	ldr	r3, [r3, #16]
 8017ca6:	429a      	cmp	r2, r3
 8017ca8:	d106      	bne.n	8017cb8 <ip4_reass+0xdc>
 8017caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cac:	899a      	ldrh	r2, [r3, #12]
 8017cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb0:	889b      	ldrh	r3, [r3, #4]
 8017cb2:	b29b      	uxth	r3, r3
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d006      	beq.n	8017cc6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8017cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d1e6      	bne.n	8017c92 <ip4_reass+0xb6>
 8017cc4:	e000      	b.n	8017cc8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017cc6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d109      	bne.n	8017ce2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017cce:	8c3b      	ldrh	r3, [r7, #32]
 8017cd0:	4619      	mov	r1, r3
 8017cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cd4:	f7ff fdb0 	bl	8017838 <ip_reass_enqueue_new_datagram>
 8017cd8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d11c      	bne.n	8017d1a <ip4_reass+0x13e>
      goto nullreturn;
 8017ce0:	e105      	b.n	8017eee <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ce4:	88db      	ldrh	r3, [r3, #6]
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7f6 fdf9 	bl	800e8e0 <lwip_htons>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d110      	bne.n	8017d1a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cfa:	89db      	ldrh	r3, [r3, #14]
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f7f6 fdef 	bl	800e8e0 <lwip_htons>
 8017d02:	4603      	mov	r3, r0
 8017d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d006      	beq.n	8017d1a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0e:	3308      	adds	r3, #8
 8017d10:	2214      	movs	r2, #20
 8017d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d14:	4618      	mov	r0, r3
 8017d16:	f001 fa67 	bl	80191e8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d1c:	88db      	ldrh	r3, [r3, #6]
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	f003 0320 	and.w	r3, r3, #32
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	bf0c      	ite	eq
 8017d28:	2301      	moveq	r3, #1
 8017d2a:	2300      	movne	r3, #0
 8017d2c:	b2db      	uxtb	r3, r3
 8017d2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017d30:	69fb      	ldr	r3, [r7, #28]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d00e      	beq.n	8017d54 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017d36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d3a:	4413      	add	r3, r2
 8017d3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017d3e:	8b7a      	ldrh	r2, [r7, #26]
 8017d40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017d42:	429a      	cmp	r2, r3
 8017d44:	f0c0 80a0 	bcc.w	8017e88 <ip4_reass+0x2ac>
 8017d48:	8b7b      	ldrh	r3, [r7, #26]
 8017d4a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017d4e:	4293      	cmp	r3, r2
 8017d50:	f200 809a 	bhi.w	8017e88 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017d54:	69fa      	ldr	r2, [r7, #28]
 8017d56:	6879      	ldr	r1, [r7, #4]
 8017d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d5a:	f7ff fdd5 	bl	8017908 <ip_reass_chain_frag_into_datagram_and_validate>
 8017d5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017d60:	697b      	ldr	r3, [r7, #20]
 8017d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d66:	f000 809b 	beq.w	8017ea0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017d6a:	4b48      	ldr	r3, [pc, #288]	; (8017e8c <ip4_reass+0x2b0>)
 8017d6c:	881a      	ldrh	r2, [r3, #0]
 8017d6e:	8c3b      	ldrh	r3, [r7, #32]
 8017d70:	4413      	add	r3, r2
 8017d72:	b29a      	uxth	r2, r3
 8017d74:	4b45      	ldr	r3, [pc, #276]	; (8017e8c <ip4_reass+0x2b0>)
 8017d76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017d78:	69fb      	ldr	r3, [r7, #28]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d00d      	beq.n	8017d9a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017d7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d82:	4413      	add	r3, r2
 8017d84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d88:	8a7a      	ldrh	r2, [r7, #18]
 8017d8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d8e:	7f9b      	ldrb	r3, [r3, #30]
 8017d90:	f043 0301 	orr.w	r3, r3, #1
 8017d94:	b2da      	uxtb	r2, r3
 8017d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017d9a:	697b      	ldr	r3, [r7, #20]
 8017d9c:	2b01      	cmp	r3, #1
 8017d9e:	d171      	bne.n	8017e84 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da2:	8b9b      	ldrh	r3, [r3, #28]
 8017da4:	3314      	adds	r3, #20
 8017da6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	685b      	ldr	r3, [r3, #4]
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db4:	685b      	ldr	r3, [r3, #4]
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dbc:	3308      	adds	r3, #8
 8017dbe:	2214      	movs	r2, #20
 8017dc0:	4619      	mov	r1, r3
 8017dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017dc4:	f001 fa10 	bl	80191e8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017dc8:	8a3b      	ldrh	r3, [r7, #16]
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7f6 fd88 	bl	800e8e0 <lwip_htons>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	461a      	mov	r2, r3
 8017dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dda:	2200      	movs	r2, #0
 8017ddc:	719a      	strb	r2, [r3, #6]
 8017dde:	2200      	movs	r2, #0
 8017de0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de4:	2200      	movs	r2, #0
 8017de6:	729a      	strb	r2, [r3, #10]
 8017de8:	2200      	movs	r2, #0
 8017dea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017df2:	e00d      	b.n	8017e10 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017df6:	685b      	ldr	r3, [r3, #4]
 8017df8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017dfa:	2114      	movs	r1, #20
 8017dfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017dfe:	f7f8 f8df 	bl	800ffc0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017e02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017e04:	6878      	ldr	r0, [r7, #4]
 8017e06:	f7f8 fa23 	bl	8010250 <pbuf_cat>
      r = iprh->next_pbuf;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d1ee      	bne.n	8017df4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017e16:	4b1e      	ldr	r3, [pc, #120]	; (8017e90 <ip4_reass+0x2b4>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	d102      	bne.n	8017e26 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017e20:	2300      	movs	r3, #0
 8017e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e24:	e010      	b.n	8017e48 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017e26:	4b1a      	ldr	r3, [pc, #104]	; (8017e90 <ip4_reass+0x2b4>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e2c:	e007      	b.n	8017e3e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e34:	429a      	cmp	r2, r3
 8017e36:	d006      	beq.n	8017e46 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d1f4      	bne.n	8017e2e <ip4_reass+0x252>
 8017e44:	e000      	b.n	8017e48 <ip4_reass+0x26c>
          break;
 8017e46:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e4c:	f7ff fd2e 	bl	80178ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017e50:	6878      	ldr	r0, [r7, #4]
 8017e52:	f7f8 f9c3 	bl	80101dc <pbuf_clen>
 8017e56:	4603      	mov	r3, r0
 8017e58:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017e5a:	4b0c      	ldr	r3, [pc, #48]	; (8017e8c <ip4_reass+0x2b0>)
 8017e5c:	881b      	ldrh	r3, [r3, #0]
 8017e5e:	8c3a      	ldrh	r2, [r7, #32]
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d906      	bls.n	8017e72 <ip4_reass+0x296>
 8017e64:	4b0b      	ldr	r3, [pc, #44]	; (8017e94 <ip4_reass+0x2b8>)
 8017e66:	f240 229b 	movw	r2, #667	; 0x29b
 8017e6a:	490b      	ldr	r1, [pc, #44]	; (8017e98 <ip4_reass+0x2bc>)
 8017e6c:	480b      	ldr	r0, [pc, #44]	; (8017e9c <ip4_reass+0x2c0>)
 8017e6e:	f000 ffed 	bl	8018e4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017e72:	4b06      	ldr	r3, [pc, #24]	; (8017e8c <ip4_reass+0x2b0>)
 8017e74:	881a      	ldrh	r2, [r3, #0]
 8017e76:	8c3b      	ldrh	r3, [r7, #32]
 8017e78:	1ad3      	subs	r3, r2, r3
 8017e7a:	b29a      	uxth	r2, r3
 8017e7c:	4b03      	ldr	r3, [pc, #12]	; (8017e8c <ip4_reass+0x2b0>)
 8017e7e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	e038      	b.n	8017ef6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017e84:	2300      	movs	r3, #0
 8017e86:	e036      	b.n	8017ef6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017e88:	bf00      	nop
 8017e8a:	e00a      	b.n	8017ea2 <ip4_reass+0x2c6>
 8017e8c:	20008150 	.word	0x20008150
 8017e90:	2000814c 	.word	0x2000814c
 8017e94:	0801db90 	.word	0x0801db90
 8017e98:	0801dd00 	.word	0x0801dd00
 8017e9c:	0801dbd8 	.word	0x0801dbd8
    goto nullreturn_ipr;
 8017ea0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d106      	bne.n	8017eb6 <ip4_reass+0x2da>
 8017ea8:	4b15      	ldr	r3, [pc, #84]	; (8017f00 <ip4_reass+0x324>)
 8017eaa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017eae:	4915      	ldr	r1, [pc, #84]	; (8017f04 <ip4_reass+0x328>)
 8017eb0:	4815      	ldr	r0, [pc, #84]	; (8017f08 <ip4_reass+0x32c>)
 8017eb2:	f000 ffcb 	bl	8018e4c <iprintf>
  if (ipr->p == NULL) {
 8017eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb8:	685b      	ldr	r3, [r3, #4]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d116      	bne.n	8017eec <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017ebe:	4b13      	ldr	r3, [pc, #76]	; (8017f0c <ip4_reass+0x330>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d006      	beq.n	8017ed6 <ip4_reass+0x2fa>
 8017ec8:	4b0d      	ldr	r3, [pc, #52]	; (8017f00 <ip4_reass+0x324>)
 8017eca:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017ece:	4910      	ldr	r1, [pc, #64]	; (8017f10 <ip4_reass+0x334>)
 8017ed0:	480d      	ldr	r0, [pc, #52]	; (8017f08 <ip4_reass+0x32c>)
 8017ed2:	f000 ffbb 	bl	8018e4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017ed6:	2100      	movs	r1, #0
 8017ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017eda:	f7ff fce7 	bl	80178ac <ip_reass_dequeue_datagram>
 8017ede:	e006      	b.n	8017eee <ip4_reass+0x312>
    goto nullreturn;
 8017ee0:	bf00      	nop
 8017ee2:	e004      	b.n	8017eee <ip4_reass+0x312>
    goto nullreturn;
 8017ee4:	bf00      	nop
 8017ee6:	e002      	b.n	8017eee <ip4_reass+0x312>
      goto nullreturn;
 8017ee8:	bf00      	nop
 8017eea:	e000      	b.n	8017eee <ip4_reass+0x312>
  }

nullreturn:
 8017eec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017eee:	6878      	ldr	r0, [r7, #4]
 8017ef0:	f7f8 f8ec 	bl	80100cc <pbuf_free>
  return NULL;
 8017ef4:	2300      	movs	r3, #0
}
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	3738      	adds	r7, #56	; 0x38
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}
 8017efe:	bf00      	nop
 8017f00:	0801db90 	.word	0x0801db90
 8017f04:	0801dd1c 	.word	0x0801dd1c
 8017f08:	0801dbd8 	.word	0x0801dbd8
 8017f0c:	2000814c 	.word	0x2000814c
 8017f10:	0801dd28 	.word	0x0801dd28

08017f14 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017f18:	2005      	movs	r0, #5
 8017f1a:	f7f7 fa11 	bl	800f340 <memp_malloc>
 8017f1e:	4603      	mov	r3, r0
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	bd80      	pop	{r7, pc}

08017f24 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b082      	sub	sp, #8
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d106      	bne.n	8017f40 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017f32:	4b07      	ldr	r3, [pc, #28]	; (8017f50 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017f34:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017f38:	4906      	ldr	r1, [pc, #24]	; (8017f54 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017f3a:	4807      	ldr	r0, [pc, #28]	; (8017f58 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017f3c:	f000 ff86 	bl	8018e4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017f40:	6879      	ldr	r1, [r7, #4]
 8017f42:	2005      	movs	r0, #5
 8017f44:	f7f7 fa6c 	bl	800f420 <memp_free>
}
 8017f48:	bf00      	nop
 8017f4a:	3708      	adds	r7, #8
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	0801db90 	.word	0x0801db90
 8017f54:	0801dd48 	.word	0x0801dd48
 8017f58:	0801dbd8 	.word	0x0801dbd8

08017f5c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b084      	sub	sp, #16
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d106      	bne.n	8017f7c <ipfrag_free_pbuf_custom+0x20>
 8017f6e:	4b11      	ldr	r3, [pc, #68]	; (8017fb4 <ipfrag_free_pbuf_custom+0x58>)
 8017f70:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017f74:	4910      	ldr	r1, [pc, #64]	; (8017fb8 <ipfrag_free_pbuf_custom+0x5c>)
 8017f76:	4811      	ldr	r0, [pc, #68]	; (8017fbc <ipfrag_free_pbuf_custom+0x60>)
 8017f78:	f000 ff68 	bl	8018e4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017f7c:	68fa      	ldr	r2, [r7, #12]
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	429a      	cmp	r2, r3
 8017f82:	d006      	beq.n	8017f92 <ipfrag_free_pbuf_custom+0x36>
 8017f84:	4b0b      	ldr	r3, [pc, #44]	; (8017fb4 <ipfrag_free_pbuf_custom+0x58>)
 8017f86:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017f8a:	490d      	ldr	r1, [pc, #52]	; (8017fc0 <ipfrag_free_pbuf_custom+0x64>)
 8017f8c:	480b      	ldr	r0, [pc, #44]	; (8017fbc <ipfrag_free_pbuf_custom+0x60>)
 8017f8e:	f000 ff5d 	bl	8018e4c <iprintf>
  if (pcr->original != NULL) {
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	695b      	ldr	r3, [r3, #20]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d004      	beq.n	8017fa4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	695b      	ldr	r3, [r3, #20]
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f7f8 f894 	bl	80100cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017fa4:	68f8      	ldr	r0, [r7, #12]
 8017fa6:	f7ff ffbd 	bl	8017f24 <ip_frag_free_pbuf_custom_ref>
}
 8017faa:	bf00      	nop
 8017fac:	3710      	adds	r7, #16
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}
 8017fb2:	bf00      	nop
 8017fb4:	0801db90 	.word	0x0801db90
 8017fb8:	0801dd54 	.word	0x0801dd54
 8017fbc:	0801dbd8 	.word	0x0801dbd8
 8017fc0:	0801dd60 	.word	0x0801dd60

08017fc4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b094      	sub	sp, #80	; 0x50
 8017fc8:	af02      	add	r7, sp, #8
 8017fca:	60f8      	str	r0, [r7, #12]
 8017fcc:	60b9      	str	r1, [r7, #8]
 8017fce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017fd6:	68bb      	ldr	r3, [r7, #8]
 8017fd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017fda:	3b14      	subs	r3, #20
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	da00      	bge.n	8017fe2 <ip4_frag+0x1e>
 8017fe0:	3307      	adds	r3, #7
 8017fe2:	10db      	asrs	r3, r3, #3
 8017fe4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017fe6:	2314      	movs	r3, #20
 8017fe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	685b      	ldr	r3, [r3, #4]
 8017fee:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ff2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff6:	781b      	ldrb	r3, [r3, #0]
 8017ff8:	f003 030f 	and.w	r3, r3, #15
 8017ffc:	b2db      	uxtb	r3, r3
 8017ffe:	009b      	lsls	r3, r3, #2
 8018000:	b2db      	uxtb	r3, r3
 8018002:	2b14      	cmp	r3, #20
 8018004:	d002      	beq.n	801800c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018006:	f06f 0305 	mvn.w	r3, #5
 801800a:	e110      	b.n	801822e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	895b      	ldrh	r3, [r3, #10]
 8018010:	2b13      	cmp	r3, #19
 8018012:	d809      	bhi.n	8018028 <ip4_frag+0x64>
 8018014:	4b88      	ldr	r3, [pc, #544]	; (8018238 <ip4_frag+0x274>)
 8018016:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801801a:	4988      	ldr	r1, [pc, #544]	; (801823c <ip4_frag+0x278>)
 801801c:	4888      	ldr	r0, [pc, #544]	; (8018240 <ip4_frag+0x27c>)
 801801e:	f000 ff15 	bl	8018e4c <iprintf>
 8018022:	f06f 0305 	mvn.w	r3, #5
 8018026:	e102      	b.n	801822e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801802a:	88db      	ldrh	r3, [r3, #6]
 801802c:	b29b      	uxth	r3, r3
 801802e:	4618      	mov	r0, r3
 8018030:	f7f6 fc56 	bl	800e8e0 <lwip_htons>
 8018034:	4603      	mov	r3, r0
 8018036:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018038:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801803a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801803e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018042:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018048:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	891b      	ldrh	r3, [r3, #8]
 801804e:	3b14      	subs	r3, #20
 8018050:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018054:	e0e1      	b.n	801821a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018056:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018058:	00db      	lsls	r3, r3, #3
 801805a:	b29b      	uxth	r3, r3
 801805c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018060:	4293      	cmp	r3, r2
 8018062:	bf28      	it	cs
 8018064:	4613      	movcs	r3, r2
 8018066:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018068:	f44f 7220 	mov.w	r2, #640	; 0x280
 801806c:	2114      	movs	r1, #20
 801806e:	200e      	movs	r0, #14
 8018070:	f7f7 fd48 	bl	800fb04 <pbuf_alloc>
 8018074:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018078:	2b00      	cmp	r3, #0
 801807a:	f000 80d5 	beq.w	8018228 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018080:	895b      	ldrh	r3, [r3, #10]
 8018082:	2b13      	cmp	r3, #19
 8018084:	d806      	bhi.n	8018094 <ip4_frag+0xd0>
 8018086:	4b6c      	ldr	r3, [pc, #432]	; (8018238 <ip4_frag+0x274>)
 8018088:	f44f 7249 	mov.w	r2, #804	; 0x324
 801808c:	496d      	ldr	r1, [pc, #436]	; (8018244 <ip4_frag+0x280>)
 801808e:	486c      	ldr	r0, [pc, #432]	; (8018240 <ip4_frag+0x27c>)
 8018090:	f000 fedc 	bl	8018e4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018096:	685b      	ldr	r3, [r3, #4]
 8018098:	2214      	movs	r2, #20
 801809a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801809c:	4618      	mov	r0, r3
 801809e:	f001 f8a3 	bl	80191e8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80180a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a4:	685b      	ldr	r3, [r3, #4]
 80180a6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80180a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80180aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80180ae:	e064      	b.n	801817a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	895a      	ldrh	r2, [r3, #10]
 80180b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80180b6:	1ad3      	subs	r3, r2, r3
 80180b8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	895b      	ldrh	r3, [r3, #10]
 80180be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80180c0:	429a      	cmp	r2, r3
 80180c2:	d906      	bls.n	80180d2 <ip4_frag+0x10e>
 80180c4:	4b5c      	ldr	r3, [pc, #368]	; (8018238 <ip4_frag+0x274>)
 80180c6:	f240 322d 	movw	r2, #813	; 0x32d
 80180ca:	495f      	ldr	r1, [pc, #380]	; (8018248 <ip4_frag+0x284>)
 80180cc:	485c      	ldr	r0, [pc, #368]	; (8018240 <ip4_frag+0x27c>)
 80180ce:	f000 febd 	bl	8018e4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80180d2:	8bfa      	ldrh	r2, [r7, #30]
 80180d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80180d8:	4293      	cmp	r3, r2
 80180da:	bf28      	it	cs
 80180dc:	4613      	movcs	r3, r2
 80180de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80180e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d105      	bne.n	80180f6 <ip4_frag+0x132>
        poff = 0;
 80180ea:	2300      	movs	r3, #0
 80180ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	60fb      	str	r3, [r7, #12]
        continue;
 80180f4:	e041      	b.n	801817a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80180f6:	f7ff ff0d 	bl	8017f14 <ip_frag_alloc_pbuf_custom_ref>
 80180fa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80180fc:	69bb      	ldr	r3, [r7, #24]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d103      	bne.n	801810a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018104:	f7f7 ffe2 	bl	80100cc <pbuf_free>
        goto memerr;
 8018108:	e08f      	b.n	801822a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801810a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018110:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018112:	4413      	add	r3, r2
 8018114:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018118:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801811c:	9201      	str	r2, [sp, #4]
 801811e:	9300      	str	r3, [sp, #0]
 8018120:	4603      	mov	r3, r0
 8018122:	2241      	movs	r2, #65	; 0x41
 8018124:	2000      	movs	r0, #0
 8018126:	f7f7 fe17 	bl	800fd58 <pbuf_alloced_custom>
 801812a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801812c:	697b      	ldr	r3, [r7, #20]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d106      	bne.n	8018140 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018132:	69b8      	ldr	r0, [r7, #24]
 8018134:	f7ff fef6 	bl	8017f24 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801813a:	f7f7 ffc7 	bl	80100cc <pbuf_free>
        goto memerr;
 801813e:	e074      	b.n	801822a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018140:	68f8      	ldr	r0, [r7, #12]
 8018142:	f7f8 f863 	bl	801020c <pbuf_ref>
      pcr->original = p;
 8018146:	69bb      	ldr	r3, [r7, #24]
 8018148:	68fa      	ldr	r2, [r7, #12]
 801814a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801814c:	69bb      	ldr	r3, [r7, #24]
 801814e:	4a3f      	ldr	r2, [pc, #252]	; (801824c <ip4_frag+0x288>)
 8018150:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018152:	6979      	ldr	r1, [r7, #20]
 8018154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018156:	f7f8 f87b 	bl	8010250 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801815a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801815e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018162:	1ad3      	subs	r3, r2, r3
 8018164:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018168:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801816c:	2b00      	cmp	r3, #0
 801816e:	d004      	beq.n	801817a <ip4_frag+0x1b6>
        poff = 0;
 8018170:	2300      	movs	r3, #0
 8018172:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801817a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801817e:	2b00      	cmp	r3, #0
 8018180:	d196      	bne.n	80180b0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018182:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018184:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018188:	4413      	add	r3, r2
 801818a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801818c:	68bb      	ldr	r3, [r7, #8]
 801818e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018190:	f1a3 0213 	sub.w	r2, r3, #19
 8018194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018198:	429a      	cmp	r2, r3
 801819a:	bfcc      	ite	gt
 801819c:	2301      	movgt	r3, #1
 801819e:	2300      	movle	r3, #0
 80181a0:	b2db      	uxtb	r3, r3
 80181a2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80181a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80181a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80181ae:	6a3b      	ldr	r3, [r7, #32]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d002      	beq.n	80181ba <ip4_frag+0x1f6>
 80181b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d003      	beq.n	80181c2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80181ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80181c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80181c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7f6 fb8b 	bl	800e8e0 <lwip_htons>
 80181ca:	4603      	mov	r3, r0
 80181cc:	461a      	mov	r2, r3
 80181ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80181d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80181d4:	3314      	adds	r3, #20
 80181d6:	b29b      	uxth	r3, r3
 80181d8:	4618      	mov	r0, r3
 80181da:	f7f6 fb81 	bl	800e8e0 <lwip_htons>
 80181de:	4603      	mov	r3, r0
 80181e0:	461a      	mov	r2, r3
 80181e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80181e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e8:	2200      	movs	r2, #0
 80181ea:	729a      	strb	r2, [r3, #10]
 80181ec:	2200      	movs	r2, #0
 80181ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	695b      	ldr	r3, [r3, #20]
 80181f4:	687a      	ldr	r2, [r7, #4]
 80181f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80181f8:	68b8      	ldr	r0, [r7, #8]
 80181fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80181fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181fe:	f7f7 ff65 	bl	80100cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018202:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018206:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018208:	1ad3      	subs	r3, r2, r3
 801820a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801820e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018212:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018214:	4413      	add	r3, r2
 8018216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801821a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801821e:	2b00      	cmp	r3, #0
 8018220:	f47f af19 	bne.w	8018056 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018224:	2300      	movs	r3, #0
 8018226:	e002      	b.n	801822e <ip4_frag+0x26a>
      goto memerr;
 8018228:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801822a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801822e:	4618      	mov	r0, r3
 8018230:	3748      	adds	r7, #72	; 0x48
 8018232:	46bd      	mov	sp, r7
 8018234:	bd80      	pop	{r7, pc}
 8018236:	bf00      	nop
 8018238:	0801db90 	.word	0x0801db90
 801823c:	0801dd6c 	.word	0x0801dd6c
 8018240:	0801dbd8 	.word	0x0801dbd8
 8018244:	0801dd88 	.word	0x0801dd88
 8018248:	0801dda8 	.word	0x0801dda8
 801824c:	08017f5d 	.word	0x08017f5d

08018250 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b086      	sub	sp, #24
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
 8018258:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801825a:	230e      	movs	r3, #14
 801825c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	895b      	ldrh	r3, [r3, #10]
 8018262:	2b0e      	cmp	r3, #14
 8018264:	d96e      	bls.n	8018344 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	7bdb      	ldrb	r3, [r3, #15]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d106      	bne.n	801827c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801826e:	683b      	ldr	r3, [r7, #0]
 8018270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018274:	3301      	adds	r3, #1
 8018276:	b2da      	uxtb	r2, r3
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	685b      	ldr	r3, [r3, #4]
 8018280:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018282:	693b      	ldr	r3, [r7, #16]
 8018284:	7b1a      	ldrb	r2, [r3, #12]
 8018286:	7b5b      	ldrb	r3, [r3, #13]
 8018288:	021b      	lsls	r3, r3, #8
 801828a:	4313      	orrs	r3, r2
 801828c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801828e:	693b      	ldr	r3, [r7, #16]
 8018290:	781b      	ldrb	r3, [r3, #0]
 8018292:	f003 0301 	and.w	r3, r3, #1
 8018296:	2b00      	cmp	r3, #0
 8018298:	d023      	beq.n	80182e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801829a:	693b      	ldr	r3, [r7, #16]
 801829c:	781b      	ldrb	r3, [r3, #0]
 801829e:	2b01      	cmp	r3, #1
 80182a0:	d10f      	bne.n	80182c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80182a2:	693b      	ldr	r3, [r7, #16]
 80182a4:	785b      	ldrb	r3, [r3, #1]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d11b      	bne.n	80182e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80182aa:	693b      	ldr	r3, [r7, #16]
 80182ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80182ae:	2b5e      	cmp	r3, #94	; 0x5e
 80182b0:	d117      	bne.n	80182e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	7b5b      	ldrb	r3, [r3, #13]
 80182b6:	f043 0310 	orr.w	r3, r3, #16
 80182ba:	b2da      	uxtb	r2, r3
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	735a      	strb	r2, [r3, #13]
 80182c0:	e00f      	b.n	80182e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80182c2:	693b      	ldr	r3, [r7, #16]
 80182c4:	2206      	movs	r2, #6
 80182c6:	4928      	ldr	r1, [pc, #160]	; (8018368 <ethernet_input+0x118>)
 80182c8:	4618      	mov	r0, r3
 80182ca:	f000 ff05 	bl	80190d8 <memcmp>
 80182ce:	4603      	mov	r3, r0
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d106      	bne.n	80182e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	7b5b      	ldrb	r3, [r3, #13]
 80182d8:	f043 0308 	orr.w	r3, r3, #8
 80182dc:	b2da      	uxtb	r2, r3
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80182e2:	89fb      	ldrh	r3, [r7, #14]
 80182e4:	2b08      	cmp	r3, #8
 80182e6:	d003      	beq.n	80182f0 <ethernet_input+0xa0>
 80182e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80182ec:	d014      	beq.n	8018318 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80182ee:	e032      	b.n	8018356 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80182f6:	f003 0308 	and.w	r3, r3, #8
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d024      	beq.n	8018348 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80182fe:	8afb      	ldrh	r3, [r7, #22]
 8018300:	4619      	mov	r1, r3
 8018302:	6878      	ldr	r0, [r7, #4]
 8018304:	f7f7 fe5c 	bl	800ffc0 <pbuf_remove_header>
 8018308:	4603      	mov	r3, r0
 801830a:	2b00      	cmp	r3, #0
 801830c:	d11e      	bne.n	801834c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801830e:	6839      	ldr	r1, [r7, #0]
 8018310:	6878      	ldr	r0, [r7, #4]
 8018312:	f7fe ff21 	bl	8017158 <ip4_input>
      break;
 8018316:	e013      	b.n	8018340 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018318:	683b      	ldr	r3, [r7, #0]
 801831a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801831e:	f003 0308 	and.w	r3, r3, #8
 8018322:	2b00      	cmp	r3, #0
 8018324:	d014      	beq.n	8018350 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018326:	8afb      	ldrh	r3, [r7, #22]
 8018328:	4619      	mov	r1, r3
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f7f7 fe48 	bl	800ffc0 <pbuf_remove_header>
 8018330:	4603      	mov	r3, r0
 8018332:	2b00      	cmp	r3, #0
 8018334:	d10e      	bne.n	8018354 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018336:	6839      	ldr	r1, [r7, #0]
 8018338:	6878      	ldr	r0, [r7, #4]
 801833a:	f7fe f89b 	bl	8016474 <etharp_input>
      break;
 801833e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018340:	2300      	movs	r3, #0
 8018342:	e00c      	b.n	801835e <ethernet_input+0x10e>
    goto free_and_return;
 8018344:	bf00      	nop
 8018346:	e006      	b.n	8018356 <ethernet_input+0x106>
        goto free_and_return;
 8018348:	bf00      	nop
 801834a:	e004      	b.n	8018356 <ethernet_input+0x106>
        goto free_and_return;
 801834c:	bf00      	nop
 801834e:	e002      	b.n	8018356 <ethernet_input+0x106>
        goto free_and_return;
 8018350:	bf00      	nop
 8018352:	e000      	b.n	8018356 <ethernet_input+0x106>
        goto free_and_return;
 8018354:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018356:	6878      	ldr	r0, [r7, #4]
 8018358:	f7f7 feb8 	bl	80100cc <pbuf_free>
  return ERR_OK;
 801835c:	2300      	movs	r3, #0
}
 801835e:	4618      	mov	r0, r3
 8018360:	3718      	adds	r7, #24
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
 8018366:	bf00      	nop
 8018368:	0801df8c 	.word	0x0801df8c

0801836c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801836c:	b580      	push	{r7, lr}
 801836e:	b086      	sub	sp, #24
 8018370:	af00      	add	r7, sp, #0
 8018372:	60f8      	str	r0, [r7, #12]
 8018374:	60b9      	str	r1, [r7, #8]
 8018376:	607a      	str	r2, [r7, #4]
 8018378:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801837a:	8c3b      	ldrh	r3, [r7, #32]
 801837c:	4618      	mov	r0, r3
 801837e:	f7f6 faaf 	bl	800e8e0 <lwip_htons>
 8018382:	4603      	mov	r3, r0
 8018384:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018386:	210e      	movs	r1, #14
 8018388:	68b8      	ldr	r0, [r7, #8]
 801838a:	f7f7 fe09 	bl	800ffa0 <pbuf_add_header>
 801838e:	4603      	mov	r3, r0
 8018390:	2b00      	cmp	r3, #0
 8018392:	d125      	bne.n	80183e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018394:	68bb      	ldr	r3, [r7, #8]
 8018396:	685b      	ldr	r3, [r3, #4]
 8018398:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801839a:	693b      	ldr	r3, [r7, #16]
 801839c:	8afa      	ldrh	r2, [r7, #22]
 801839e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	2206      	movs	r2, #6
 80183a4:	6839      	ldr	r1, [r7, #0]
 80183a6:	4618      	mov	r0, r3
 80183a8:	f000 ff1e 	bl	80191e8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80183ac:	693b      	ldr	r3, [r7, #16]
 80183ae:	3306      	adds	r3, #6
 80183b0:	2206      	movs	r2, #6
 80183b2:	6879      	ldr	r1, [r7, #4]
 80183b4:	4618      	mov	r0, r3
 80183b6:	f000 ff17 	bl	80191e8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80183c0:	2b06      	cmp	r3, #6
 80183c2:	d006      	beq.n	80183d2 <ethernet_output+0x66>
 80183c4:	4b0a      	ldr	r3, [pc, #40]	; (80183f0 <ethernet_output+0x84>)
 80183c6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80183ca:	490a      	ldr	r1, [pc, #40]	; (80183f4 <ethernet_output+0x88>)
 80183cc:	480a      	ldr	r0, [pc, #40]	; (80183f8 <ethernet_output+0x8c>)
 80183ce:	f000 fd3d 	bl	8018e4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	699b      	ldr	r3, [r3, #24]
 80183d6:	68b9      	ldr	r1, [r7, #8]
 80183d8:	68f8      	ldr	r0, [r7, #12]
 80183da:	4798      	blx	r3
 80183dc:	4603      	mov	r3, r0
 80183de:	e002      	b.n	80183e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80183e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80183e2:	f06f 0301 	mvn.w	r3, #1
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3718      	adds	r7, #24
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
 80183ee:	bf00      	nop
 80183f0:	0801ddb8 	.word	0x0801ddb8
 80183f4:	0801ddf0 	.word	0x0801ddf0
 80183f8:	0801de24 	.word	0x0801de24

080183fc <rand>:
 80183fc:	4b16      	ldr	r3, [pc, #88]	; (8018458 <rand+0x5c>)
 80183fe:	b510      	push	{r4, lr}
 8018400:	681c      	ldr	r4, [r3, #0]
 8018402:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018404:	b9b3      	cbnz	r3, 8018434 <rand+0x38>
 8018406:	2018      	movs	r0, #24
 8018408:	f001 fd5a 	bl	8019ec0 <malloc>
 801840c:	4602      	mov	r2, r0
 801840e:	6320      	str	r0, [r4, #48]	; 0x30
 8018410:	b920      	cbnz	r0, 801841c <rand+0x20>
 8018412:	4b12      	ldr	r3, [pc, #72]	; (801845c <rand+0x60>)
 8018414:	4812      	ldr	r0, [pc, #72]	; (8018460 <rand+0x64>)
 8018416:	2152      	movs	r1, #82	; 0x52
 8018418:	f000 fef4 	bl	8019204 <__assert_func>
 801841c:	4911      	ldr	r1, [pc, #68]	; (8018464 <rand+0x68>)
 801841e:	4b12      	ldr	r3, [pc, #72]	; (8018468 <rand+0x6c>)
 8018420:	e9c0 1300 	strd	r1, r3, [r0]
 8018424:	4b11      	ldr	r3, [pc, #68]	; (801846c <rand+0x70>)
 8018426:	6083      	str	r3, [r0, #8]
 8018428:	230b      	movs	r3, #11
 801842a:	8183      	strh	r3, [r0, #12]
 801842c:	2100      	movs	r1, #0
 801842e:	2001      	movs	r0, #1
 8018430:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018434:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018436:	480e      	ldr	r0, [pc, #56]	; (8018470 <rand+0x74>)
 8018438:	690b      	ldr	r3, [r1, #16]
 801843a:	694c      	ldr	r4, [r1, #20]
 801843c:	4a0d      	ldr	r2, [pc, #52]	; (8018474 <rand+0x78>)
 801843e:	4358      	muls	r0, r3
 8018440:	fb02 0004 	mla	r0, r2, r4, r0
 8018444:	fba3 3202 	umull	r3, r2, r3, r2
 8018448:	3301      	adds	r3, #1
 801844a:	eb40 0002 	adc.w	r0, r0, r2
 801844e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018452:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018456:	bd10      	pop	{r4, pc}
 8018458:	200000b8 	.word	0x200000b8
 801845c:	0801df9a 	.word	0x0801df9a
 8018460:	0801dfb1 	.word	0x0801dfb1
 8018464:	abcd330e 	.word	0xabcd330e
 8018468:	e66d1234 	.word	0xe66d1234
 801846c:	0005deec 	.word	0x0005deec
 8018470:	5851f42d 	.word	0x5851f42d
 8018474:	4c957f2d 	.word	0x4c957f2d

08018478 <__cvt>:
 8018478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801847a:	ed2d 8b02 	vpush	{d8}
 801847e:	eeb0 8b40 	vmov.f64	d8, d0
 8018482:	b085      	sub	sp, #20
 8018484:	4617      	mov	r7, r2
 8018486:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018488:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801848a:	ee18 2a90 	vmov	r2, s17
 801848e:	f025 0520 	bic.w	r5, r5, #32
 8018492:	2a00      	cmp	r2, #0
 8018494:	bfb6      	itet	lt
 8018496:	222d      	movlt	r2, #45	; 0x2d
 8018498:	2200      	movge	r2, #0
 801849a:	eeb1 8b40 	vneglt.f64	d8, d0
 801849e:	2d46      	cmp	r5, #70	; 0x46
 80184a0:	460c      	mov	r4, r1
 80184a2:	701a      	strb	r2, [r3, #0]
 80184a4:	d004      	beq.n	80184b0 <__cvt+0x38>
 80184a6:	2d45      	cmp	r5, #69	; 0x45
 80184a8:	d100      	bne.n	80184ac <__cvt+0x34>
 80184aa:	3401      	adds	r4, #1
 80184ac:	2102      	movs	r1, #2
 80184ae:	e000      	b.n	80184b2 <__cvt+0x3a>
 80184b0:	2103      	movs	r1, #3
 80184b2:	ab03      	add	r3, sp, #12
 80184b4:	9301      	str	r3, [sp, #4]
 80184b6:	ab02      	add	r3, sp, #8
 80184b8:	9300      	str	r3, [sp, #0]
 80184ba:	4622      	mov	r2, r4
 80184bc:	4633      	mov	r3, r6
 80184be:	eeb0 0b48 	vmov.f64	d0, d8
 80184c2:	f000 ff45 	bl	8019350 <_dtoa_r>
 80184c6:	2d47      	cmp	r5, #71	; 0x47
 80184c8:	d101      	bne.n	80184ce <__cvt+0x56>
 80184ca:	07fb      	lsls	r3, r7, #31
 80184cc:	d51a      	bpl.n	8018504 <__cvt+0x8c>
 80184ce:	2d46      	cmp	r5, #70	; 0x46
 80184d0:	eb00 0204 	add.w	r2, r0, r4
 80184d4:	d10c      	bne.n	80184f0 <__cvt+0x78>
 80184d6:	7803      	ldrb	r3, [r0, #0]
 80184d8:	2b30      	cmp	r3, #48	; 0x30
 80184da:	d107      	bne.n	80184ec <__cvt+0x74>
 80184dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80184e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184e4:	bf1c      	itt	ne
 80184e6:	f1c4 0401 	rsbne	r4, r4, #1
 80184ea:	6034      	strne	r4, [r6, #0]
 80184ec:	6833      	ldr	r3, [r6, #0]
 80184ee:	441a      	add	r2, r3
 80184f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80184f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184f8:	bf08      	it	eq
 80184fa:	9203      	streq	r2, [sp, #12]
 80184fc:	2130      	movs	r1, #48	; 0x30
 80184fe:	9b03      	ldr	r3, [sp, #12]
 8018500:	4293      	cmp	r3, r2
 8018502:	d307      	bcc.n	8018514 <__cvt+0x9c>
 8018504:	9b03      	ldr	r3, [sp, #12]
 8018506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018508:	1a1b      	subs	r3, r3, r0
 801850a:	6013      	str	r3, [r2, #0]
 801850c:	b005      	add	sp, #20
 801850e:	ecbd 8b02 	vpop	{d8}
 8018512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018514:	1c5c      	adds	r4, r3, #1
 8018516:	9403      	str	r4, [sp, #12]
 8018518:	7019      	strb	r1, [r3, #0]
 801851a:	e7f0      	b.n	80184fe <__cvt+0x86>

0801851c <__exponent>:
 801851c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801851e:	4603      	mov	r3, r0
 8018520:	2900      	cmp	r1, #0
 8018522:	bfb8      	it	lt
 8018524:	4249      	neglt	r1, r1
 8018526:	f803 2b02 	strb.w	r2, [r3], #2
 801852a:	bfb4      	ite	lt
 801852c:	222d      	movlt	r2, #45	; 0x2d
 801852e:	222b      	movge	r2, #43	; 0x2b
 8018530:	2909      	cmp	r1, #9
 8018532:	7042      	strb	r2, [r0, #1]
 8018534:	dd2a      	ble.n	801858c <__exponent+0x70>
 8018536:	f10d 0207 	add.w	r2, sp, #7
 801853a:	4617      	mov	r7, r2
 801853c:	260a      	movs	r6, #10
 801853e:	4694      	mov	ip, r2
 8018540:	fb91 f5f6 	sdiv	r5, r1, r6
 8018544:	fb06 1415 	mls	r4, r6, r5, r1
 8018548:	3430      	adds	r4, #48	; 0x30
 801854a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801854e:	460c      	mov	r4, r1
 8018550:	2c63      	cmp	r4, #99	; 0x63
 8018552:	f102 32ff 	add.w	r2, r2, #4294967295
 8018556:	4629      	mov	r1, r5
 8018558:	dcf1      	bgt.n	801853e <__exponent+0x22>
 801855a:	3130      	adds	r1, #48	; 0x30
 801855c:	f1ac 0402 	sub.w	r4, ip, #2
 8018560:	f802 1c01 	strb.w	r1, [r2, #-1]
 8018564:	1c41      	adds	r1, r0, #1
 8018566:	4622      	mov	r2, r4
 8018568:	42ba      	cmp	r2, r7
 801856a:	d30a      	bcc.n	8018582 <__exponent+0x66>
 801856c:	f10d 0209 	add.w	r2, sp, #9
 8018570:	eba2 020c 	sub.w	r2, r2, ip
 8018574:	42bc      	cmp	r4, r7
 8018576:	bf88      	it	hi
 8018578:	2200      	movhi	r2, #0
 801857a:	4413      	add	r3, r2
 801857c:	1a18      	subs	r0, r3, r0
 801857e:	b003      	add	sp, #12
 8018580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018582:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018586:	f801 5f01 	strb.w	r5, [r1, #1]!
 801858a:	e7ed      	b.n	8018568 <__exponent+0x4c>
 801858c:	2330      	movs	r3, #48	; 0x30
 801858e:	3130      	adds	r1, #48	; 0x30
 8018590:	7083      	strb	r3, [r0, #2]
 8018592:	70c1      	strb	r1, [r0, #3]
 8018594:	1d03      	adds	r3, r0, #4
 8018596:	e7f1      	b.n	801857c <__exponent+0x60>

08018598 <_printf_float>:
 8018598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801859c:	b08b      	sub	sp, #44	; 0x2c
 801859e:	460c      	mov	r4, r1
 80185a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80185a4:	4616      	mov	r6, r2
 80185a6:	461f      	mov	r7, r3
 80185a8:	4605      	mov	r5, r0
 80185aa:	f000 fdad 	bl	8019108 <_localeconv_r>
 80185ae:	f8d0 b000 	ldr.w	fp, [r0]
 80185b2:	4658      	mov	r0, fp
 80185b4:	f7e8 fe84 	bl	80012c0 <strlen>
 80185b8:	2300      	movs	r3, #0
 80185ba:	9308      	str	r3, [sp, #32]
 80185bc:	f8d8 3000 	ldr.w	r3, [r8]
 80185c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80185c4:	6822      	ldr	r2, [r4, #0]
 80185c6:	3307      	adds	r3, #7
 80185c8:	f023 0307 	bic.w	r3, r3, #7
 80185cc:	f103 0108 	add.w	r1, r3, #8
 80185d0:	f8c8 1000 	str.w	r1, [r8]
 80185d4:	ed93 0b00 	vldr	d0, [r3]
 80185d8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8018838 <_printf_float+0x2a0>
 80185dc:	eeb0 7bc0 	vabs.f64	d7, d0
 80185e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80185e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185e8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80185ec:	4682      	mov	sl, r0
 80185ee:	dd24      	ble.n	801863a <_printf_float+0xa2>
 80185f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80185f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185f8:	d502      	bpl.n	8018600 <_printf_float+0x68>
 80185fa:	232d      	movs	r3, #45	; 0x2d
 80185fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018600:	498f      	ldr	r1, [pc, #572]	; (8018840 <_printf_float+0x2a8>)
 8018602:	4b90      	ldr	r3, [pc, #576]	; (8018844 <_printf_float+0x2ac>)
 8018604:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8018608:	bf94      	ite	ls
 801860a:	4688      	movls	r8, r1
 801860c:	4698      	movhi	r8, r3
 801860e:	2303      	movs	r3, #3
 8018610:	6123      	str	r3, [r4, #16]
 8018612:	f022 0204 	bic.w	r2, r2, #4
 8018616:	2300      	movs	r3, #0
 8018618:	6022      	str	r2, [r4, #0]
 801861a:	9304      	str	r3, [sp, #16]
 801861c:	9700      	str	r7, [sp, #0]
 801861e:	4633      	mov	r3, r6
 8018620:	aa09      	add	r2, sp, #36	; 0x24
 8018622:	4621      	mov	r1, r4
 8018624:	4628      	mov	r0, r5
 8018626:	f000 f9d1 	bl	80189cc <_printf_common>
 801862a:	3001      	adds	r0, #1
 801862c:	f040 808a 	bne.w	8018744 <_printf_float+0x1ac>
 8018630:	f04f 30ff 	mov.w	r0, #4294967295
 8018634:	b00b      	add	sp, #44	; 0x2c
 8018636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801863a:	eeb4 0b40 	vcmp.f64	d0, d0
 801863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018642:	d709      	bvc.n	8018658 <_printf_float+0xc0>
 8018644:	ee10 3a90 	vmov	r3, s1
 8018648:	2b00      	cmp	r3, #0
 801864a:	bfbc      	itt	lt
 801864c:	232d      	movlt	r3, #45	; 0x2d
 801864e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018652:	497d      	ldr	r1, [pc, #500]	; (8018848 <_printf_float+0x2b0>)
 8018654:	4b7d      	ldr	r3, [pc, #500]	; (801884c <_printf_float+0x2b4>)
 8018656:	e7d5      	b.n	8018604 <_printf_float+0x6c>
 8018658:	6863      	ldr	r3, [r4, #4]
 801865a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801865e:	9104      	str	r1, [sp, #16]
 8018660:	1c59      	adds	r1, r3, #1
 8018662:	d13c      	bne.n	80186de <_printf_float+0x146>
 8018664:	2306      	movs	r3, #6
 8018666:	6063      	str	r3, [r4, #4]
 8018668:	2300      	movs	r3, #0
 801866a:	9303      	str	r3, [sp, #12]
 801866c:	ab08      	add	r3, sp, #32
 801866e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018676:	ab07      	add	r3, sp, #28
 8018678:	6861      	ldr	r1, [r4, #4]
 801867a:	9300      	str	r3, [sp, #0]
 801867c:	6022      	str	r2, [r4, #0]
 801867e:	f10d 031b 	add.w	r3, sp, #27
 8018682:	4628      	mov	r0, r5
 8018684:	f7ff fef8 	bl	8018478 <__cvt>
 8018688:	9b04      	ldr	r3, [sp, #16]
 801868a:	9907      	ldr	r1, [sp, #28]
 801868c:	2b47      	cmp	r3, #71	; 0x47
 801868e:	4680      	mov	r8, r0
 8018690:	d108      	bne.n	80186a4 <_printf_float+0x10c>
 8018692:	1cc8      	adds	r0, r1, #3
 8018694:	db02      	blt.n	801869c <_printf_float+0x104>
 8018696:	6863      	ldr	r3, [r4, #4]
 8018698:	4299      	cmp	r1, r3
 801869a:	dd41      	ble.n	8018720 <_printf_float+0x188>
 801869c:	f1a9 0902 	sub.w	r9, r9, #2
 80186a0:	fa5f f989 	uxtb.w	r9, r9
 80186a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80186a8:	d820      	bhi.n	80186ec <_printf_float+0x154>
 80186aa:	3901      	subs	r1, #1
 80186ac:	464a      	mov	r2, r9
 80186ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80186b2:	9107      	str	r1, [sp, #28]
 80186b4:	f7ff ff32 	bl	801851c <__exponent>
 80186b8:	9a08      	ldr	r2, [sp, #32]
 80186ba:	9004      	str	r0, [sp, #16]
 80186bc:	1813      	adds	r3, r2, r0
 80186be:	2a01      	cmp	r2, #1
 80186c0:	6123      	str	r3, [r4, #16]
 80186c2:	dc02      	bgt.n	80186ca <_printf_float+0x132>
 80186c4:	6822      	ldr	r2, [r4, #0]
 80186c6:	07d2      	lsls	r2, r2, #31
 80186c8:	d501      	bpl.n	80186ce <_printf_float+0x136>
 80186ca:	3301      	adds	r3, #1
 80186cc:	6123      	str	r3, [r4, #16]
 80186ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d0a2      	beq.n	801861c <_printf_float+0x84>
 80186d6:	232d      	movs	r3, #45	; 0x2d
 80186d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80186dc:	e79e      	b.n	801861c <_printf_float+0x84>
 80186de:	9904      	ldr	r1, [sp, #16]
 80186e0:	2947      	cmp	r1, #71	; 0x47
 80186e2:	d1c1      	bne.n	8018668 <_printf_float+0xd0>
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d1bf      	bne.n	8018668 <_printf_float+0xd0>
 80186e8:	2301      	movs	r3, #1
 80186ea:	e7bc      	b.n	8018666 <_printf_float+0xce>
 80186ec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80186f0:	d118      	bne.n	8018724 <_printf_float+0x18c>
 80186f2:	2900      	cmp	r1, #0
 80186f4:	6863      	ldr	r3, [r4, #4]
 80186f6:	dd0b      	ble.n	8018710 <_printf_float+0x178>
 80186f8:	6121      	str	r1, [r4, #16]
 80186fa:	b913      	cbnz	r3, 8018702 <_printf_float+0x16a>
 80186fc:	6822      	ldr	r2, [r4, #0]
 80186fe:	07d0      	lsls	r0, r2, #31
 8018700:	d502      	bpl.n	8018708 <_printf_float+0x170>
 8018702:	3301      	adds	r3, #1
 8018704:	440b      	add	r3, r1
 8018706:	6123      	str	r3, [r4, #16]
 8018708:	2300      	movs	r3, #0
 801870a:	65a1      	str	r1, [r4, #88]	; 0x58
 801870c:	9304      	str	r3, [sp, #16]
 801870e:	e7de      	b.n	80186ce <_printf_float+0x136>
 8018710:	b913      	cbnz	r3, 8018718 <_printf_float+0x180>
 8018712:	6822      	ldr	r2, [r4, #0]
 8018714:	07d2      	lsls	r2, r2, #31
 8018716:	d501      	bpl.n	801871c <_printf_float+0x184>
 8018718:	3302      	adds	r3, #2
 801871a:	e7f4      	b.n	8018706 <_printf_float+0x16e>
 801871c:	2301      	movs	r3, #1
 801871e:	e7f2      	b.n	8018706 <_printf_float+0x16e>
 8018720:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018724:	9b08      	ldr	r3, [sp, #32]
 8018726:	4299      	cmp	r1, r3
 8018728:	db05      	blt.n	8018736 <_printf_float+0x19e>
 801872a:	6823      	ldr	r3, [r4, #0]
 801872c:	6121      	str	r1, [r4, #16]
 801872e:	07d8      	lsls	r0, r3, #31
 8018730:	d5ea      	bpl.n	8018708 <_printf_float+0x170>
 8018732:	1c4b      	adds	r3, r1, #1
 8018734:	e7e7      	b.n	8018706 <_printf_float+0x16e>
 8018736:	2900      	cmp	r1, #0
 8018738:	bfd4      	ite	le
 801873a:	f1c1 0202 	rsble	r2, r1, #2
 801873e:	2201      	movgt	r2, #1
 8018740:	4413      	add	r3, r2
 8018742:	e7e0      	b.n	8018706 <_printf_float+0x16e>
 8018744:	6823      	ldr	r3, [r4, #0]
 8018746:	055a      	lsls	r2, r3, #21
 8018748:	d407      	bmi.n	801875a <_printf_float+0x1c2>
 801874a:	6923      	ldr	r3, [r4, #16]
 801874c:	4642      	mov	r2, r8
 801874e:	4631      	mov	r1, r6
 8018750:	4628      	mov	r0, r5
 8018752:	47b8      	blx	r7
 8018754:	3001      	adds	r0, #1
 8018756:	d12a      	bne.n	80187ae <_printf_float+0x216>
 8018758:	e76a      	b.n	8018630 <_printf_float+0x98>
 801875a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801875e:	f240 80e0 	bls.w	8018922 <_printf_float+0x38a>
 8018762:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018766:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801876a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801876e:	d133      	bne.n	80187d8 <_printf_float+0x240>
 8018770:	4a37      	ldr	r2, [pc, #220]	; (8018850 <_printf_float+0x2b8>)
 8018772:	2301      	movs	r3, #1
 8018774:	4631      	mov	r1, r6
 8018776:	4628      	mov	r0, r5
 8018778:	47b8      	blx	r7
 801877a:	3001      	adds	r0, #1
 801877c:	f43f af58 	beq.w	8018630 <_printf_float+0x98>
 8018780:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018784:	429a      	cmp	r2, r3
 8018786:	db02      	blt.n	801878e <_printf_float+0x1f6>
 8018788:	6823      	ldr	r3, [r4, #0]
 801878a:	07d8      	lsls	r0, r3, #31
 801878c:	d50f      	bpl.n	80187ae <_printf_float+0x216>
 801878e:	4653      	mov	r3, sl
 8018790:	465a      	mov	r2, fp
 8018792:	4631      	mov	r1, r6
 8018794:	4628      	mov	r0, r5
 8018796:	47b8      	blx	r7
 8018798:	3001      	adds	r0, #1
 801879a:	f43f af49 	beq.w	8018630 <_printf_float+0x98>
 801879e:	f04f 0800 	mov.w	r8, #0
 80187a2:	f104 091a 	add.w	r9, r4, #26
 80187a6:	9b08      	ldr	r3, [sp, #32]
 80187a8:	3b01      	subs	r3, #1
 80187aa:	4543      	cmp	r3, r8
 80187ac:	dc09      	bgt.n	80187c2 <_printf_float+0x22a>
 80187ae:	6823      	ldr	r3, [r4, #0]
 80187b0:	079b      	lsls	r3, r3, #30
 80187b2:	f100 8106 	bmi.w	80189c2 <_printf_float+0x42a>
 80187b6:	68e0      	ldr	r0, [r4, #12]
 80187b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187ba:	4298      	cmp	r0, r3
 80187bc:	bfb8      	it	lt
 80187be:	4618      	movlt	r0, r3
 80187c0:	e738      	b.n	8018634 <_printf_float+0x9c>
 80187c2:	2301      	movs	r3, #1
 80187c4:	464a      	mov	r2, r9
 80187c6:	4631      	mov	r1, r6
 80187c8:	4628      	mov	r0, r5
 80187ca:	47b8      	blx	r7
 80187cc:	3001      	adds	r0, #1
 80187ce:	f43f af2f 	beq.w	8018630 <_printf_float+0x98>
 80187d2:	f108 0801 	add.w	r8, r8, #1
 80187d6:	e7e6      	b.n	80187a6 <_printf_float+0x20e>
 80187d8:	9b07      	ldr	r3, [sp, #28]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	dc3a      	bgt.n	8018854 <_printf_float+0x2bc>
 80187de:	4a1c      	ldr	r2, [pc, #112]	; (8018850 <_printf_float+0x2b8>)
 80187e0:	2301      	movs	r3, #1
 80187e2:	4631      	mov	r1, r6
 80187e4:	4628      	mov	r0, r5
 80187e6:	47b8      	blx	r7
 80187e8:	3001      	adds	r0, #1
 80187ea:	f43f af21 	beq.w	8018630 <_printf_float+0x98>
 80187ee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80187f2:	4313      	orrs	r3, r2
 80187f4:	d102      	bne.n	80187fc <_printf_float+0x264>
 80187f6:	6823      	ldr	r3, [r4, #0]
 80187f8:	07d9      	lsls	r1, r3, #31
 80187fa:	d5d8      	bpl.n	80187ae <_printf_float+0x216>
 80187fc:	4653      	mov	r3, sl
 80187fe:	465a      	mov	r2, fp
 8018800:	4631      	mov	r1, r6
 8018802:	4628      	mov	r0, r5
 8018804:	47b8      	blx	r7
 8018806:	3001      	adds	r0, #1
 8018808:	f43f af12 	beq.w	8018630 <_printf_float+0x98>
 801880c:	f04f 0900 	mov.w	r9, #0
 8018810:	f104 0a1a 	add.w	sl, r4, #26
 8018814:	9b07      	ldr	r3, [sp, #28]
 8018816:	425b      	negs	r3, r3
 8018818:	454b      	cmp	r3, r9
 801881a:	dc01      	bgt.n	8018820 <_printf_float+0x288>
 801881c:	9b08      	ldr	r3, [sp, #32]
 801881e:	e795      	b.n	801874c <_printf_float+0x1b4>
 8018820:	2301      	movs	r3, #1
 8018822:	4652      	mov	r2, sl
 8018824:	4631      	mov	r1, r6
 8018826:	4628      	mov	r0, r5
 8018828:	47b8      	blx	r7
 801882a:	3001      	adds	r0, #1
 801882c:	f43f af00 	beq.w	8018630 <_printf_float+0x98>
 8018830:	f109 0901 	add.w	r9, r9, #1
 8018834:	e7ee      	b.n	8018814 <_printf_float+0x27c>
 8018836:	bf00      	nop
 8018838:	ffffffff 	.word	0xffffffff
 801883c:	7fefffff 	.word	0x7fefffff
 8018840:	0801e10a 	.word	0x0801e10a
 8018844:	0801e10e 	.word	0x0801e10e
 8018848:	0801e112 	.word	0x0801e112
 801884c:	0801e116 	.word	0x0801e116
 8018850:	0801e11a 	.word	0x0801e11a
 8018854:	9a08      	ldr	r2, [sp, #32]
 8018856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018858:	429a      	cmp	r2, r3
 801885a:	bfa8      	it	ge
 801885c:	461a      	movge	r2, r3
 801885e:	2a00      	cmp	r2, #0
 8018860:	4691      	mov	r9, r2
 8018862:	dc38      	bgt.n	80188d6 <_printf_float+0x33e>
 8018864:	2300      	movs	r3, #0
 8018866:	9305      	str	r3, [sp, #20]
 8018868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801886c:	f104 021a 	add.w	r2, r4, #26
 8018870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018872:	9905      	ldr	r1, [sp, #20]
 8018874:	9304      	str	r3, [sp, #16]
 8018876:	eba3 0309 	sub.w	r3, r3, r9
 801887a:	428b      	cmp	r3, r1
 801887c:	dc33      	bgt.n	80188e6 <_printf_float+0x34e>
 801887e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018882:	429a      	cmp	r2, r3
 8018884:	db3c      	blt.n	8018900 <_printf_float+0x368>
 8018886:	6823      	ldr	r3, [r4, #0]
 8018888:	07da      	lsls	r2, r3, #31
 801888a:	d439      	bmi.n	8018900 <_printf_float+0x368>
 801888c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8018890:	eba2 0903 	sub.w	r9, r2, r3
 8018894:	9b04      	ldr	r3, [sp, #16]
 8018896:	1ad2      	subs	r2, r2, r3
 8018898:	4591      	cmp	r9, r2
 801889a:	bfa8      	it	ge
 801889c:	4691      	movge	r9, r2
 801889e:	f1b9 0f00 	cmp.w	r9, #0
 80188a2:	dc35      	bgt.n	8018910 <_printf_float+0x378>
 80188a4:	f04f 0800 	mov.w	r8, #0
 80188a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80188ac:	f104 0a1a 	add.w	sl, r4, #26
 80188b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80188b4:	1a9b      	subs	r3, r3, r2
 80188b6:	eba3 0309 	sub.w	r3, r3, r9
 80188ba:	4543      	cmp	r3, r8
 80188bc:	f77f af77 	ble.w	80187ae <_printf_float+0x216>
 80188c0:	2301      	movs	r3, #1
 80188c2:	4652      	mov	r2, sl
 80188c4:	4631      	mov	r1, r6
 80188c6:	4628      	mov	r0, r5
 80188c8:	47b8      	blx	r7
 80188ca:	3001      	adds	r0, #1
 80188cc:	f43f aeb0 	beq.w	8018630 <_printf_float+0x98>
 80188d0:	f108 0801 	add.w	r8, r8, #1
 80188d4:	e7ec      	b.n	80188b0 <_printf_float+0x318>
 80188d6:	4613      	mov	r3, r2
 80188d8:	4631      	mov	r1, r6
 80188da:	4642      	mov	r2, r8
 80188dc:	4628      	mov	r0, r5
 80188de:	47b8      	blx	r7
 80188e0:	3001      	adds	r0, #1
 80188e2:	d1bf      	bne.n	8018864 <_printf_float+0x2cc>
 80188e4:	e6a4      	b.n	8018630 <_printf_float+0x98>
 80188e6:	2301      	movs	r3, #1
 80188e8:	4631      	mov	r1, r6
 80188ea:	4628      	mov	r0, r5
 80188ec:	9204      	str	r2, [sp, #16]
 80188ee:	47b8      	blx	r7
 80188f0:	3001      	adds	r0, #1
 80188f2:	f43f ae9d 	beq.w	8018630 <_printf_float+0x98>
 80188f6:	9b05      	ldr	r3, [sp, #20]
 80188f8:	9a04      	ldr	r2, [sp, #16]
 80188fa:	3301      	adds	r3, #1
 80188fc:	9305      	str	r3, [sp, #20]
 80188fe:	e7b7      	b.n	8018870 <_printf_float+0x2d8>
 8018900:	4653      	mov	r3, sl
 8018902:	465a      	mov	r2, fp
 8018904:	4631      	mov	r1, r6
 8018906:	4628      	mov	r0, r5
 8018908:	47b8      	blx	r7
 801890a:	3001      	adds	r0, #1
 801890c:	d1be      	bne.n	801888c <_printf_float+0x2f4>
 801890e:	e68f      	b.n	8018630 <_printf_float+0x98>
 8018910:	9a04      	ldr	r2, [sp, #16]
 8018912:	464b      	mov	r3, r9
 8018914:	4442      	add	r2, r8
 8018916:	4631      	mov	r1, r6
 8018918:	4628      	mov	r0, r5
 801891a:	47b8      	blx	r7
 801891c:	3001      	adds	r0, #1
 801891e:	d1c1      	bne.n	80188a4 <_printf_float+0x30c>
 8018920:	e686      	b.n	8018630 <_printf_float+0x98>
 8018922:	9a08      	ldr	r2, [sp, #32]
 8018924:	2a01      	cmp	r2, #1
 8018926:	dc01      	bgt.n	801892c <_printf_float+0x394>
 8018928:	07db      	lsls	r3, r3, #31
 801892a:	d537      	bpl.n	801899c <_printf_float+0x404>
 801892c:	2301      	movs	r3, #1
 801892e:	4642      	mov	r2, r8
 8018930:	4631      	mov	r1, r6
 8018932:	4628      	mov	r0, r5
 8018934:	47b8      	blx	r7
 8018936:	3001      	adds	r0, #1
 8018938:	f43f ae7a 	beq.w	8018630 <_printf_float+0x98>
 801893c:	4653      	mov	r3, sl
 801893e:	465a      	mov	r2, fp
 8018940:	4631      	mov	r1, r6
 8018942:	4628      	mov	r0, r5
 8018944:	47b8      	blx	r7
 8018946:	3001      	adds	r0, #1
 8018948:	f43f ae72 	beq.w	8018630 <_printf_float+0x98>
 801894c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018950:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018958:	9b08      	ldr	r3, [sp, #32]
 801895a:	d01a      	beq.n	8018992 <_printf_float+0x3fa>
 801895c:	3b01      	subs	r3, #1
 801895e:	f108 0201 	add.w	r2, r8, #1
 8018962:	4631      	mov	r1, r6
 8018964:	4628      	mov	r0, r5
 8018966:	47b8      	blx	r7
 8018968:	3001      	adds	r0, #1
 801896a:	d10e      	bne.n	801898a <_printf_float+0x3f2>
 801896c:	e660      	b.n	8018630 <_printf_float+0x98>
 801896e:	2301      	movs	r3, #1
 8018970:	464a      	mov	r2, r9
 8018972:	4631      	mov	r1, r6
 8018974:	4628      	mov	r0, r5
 8018976:	47b8      	blx	r7
 8018978:	3001      	adds	r0, #1
 801897a:	f43f ae59 	beq.w	8018630 <_printf_float+0x98>
 801897e:	f108 0801 	add.w	r8, r8, #1
 8018982:	9b08      	ldr	r3, [sp, #32]
 8018984:	3b01      	subs	r3, #1
 8018986:	4543      	cmp	r3, r8
 8018988:	dcf1      	bgt.n	801896e <_printf_float+0x3d6>
 801898a:	9b04      	ldr	r3, [sp, #16]
 801898c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018990:	e6dd      	b.n	801874e <_printf_float+0x1b6>
 8018992:	f04f 0800 	mov.w	r8, #0
 8018996:	f104 091a 	add.w	r9, r4, #26
 801899a:	e7f2      	b.n	8018982 <_printf_float+0x3ea>
 801899c:	2301      	movs	r3, #1
 801899e:	4642      	mov	r2, r8
 80189a0:	e7df      	b.n	8018962 <_printf_float+0x3ca>
 80189a2:	2301      	movs	r3, #1
 80189a4:	464a      	mov	r2, r9
 80189a6:	4631      	mov	r1, r6
 80189a8:	4628      	mov	r0, r5
 80189aa:	47b8      	blx	r7
 80189ac:	3001      	adds	r0, #1
 80189ae:	f43f ae3f 	beq.w	8018630 <_printf_float+0x98>
 80189b2:	f108 0801 	add.w	r8, r8, #1
 80189b6:	68e3      	ldr	r3, [r4, #12]
 80189b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80189ba:	1a5b      	subs	r3, r3, r1
 80189bc:	4543      	cmp	r3, r8
 80189be:	dcf0      	bgt.n	80189a2 <_printf_float+0x40a>
 80189c0:	e6f9      	b.n	80187b6 <_printf_float+0x21e>
 80189c2:	f04f 0800 	mov.w	r8, #0
 80189c6:	f104 0919 	add.w	r9, r4, #25
 80189ca:	e7f4      	b.n	80189b6 <_printf_float+0x41e>

080189cc <_printf_common>:
 80189cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189d0:	4616      	mov	r6, r2
 80189d2:	4699      	mov	r9, r3
 80189d4:	688a      	ldr	r2, [r1, #8]
 80189d6:	690b      	ldr	r3, [r1, #16]
 80189d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80189dc:	4293      	cmp	r3, r2
 80189de:	bfb8      	it	lt
 80189e0:	4613      	movlt	r3, r2
 80189e2:	6033      	str	r3, [r6, #0]
 80189e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80189e8:	4607      	mov	r7, r0
 80189ea:	460c      	mov	r4, r1
 80189ec:	b10a      	cbz	r2, 80189f2 <_printf_common+0x26>
 80189ee:	3301      	adds	r3, #1
 80189f0:	6033      	str	r3, [r6, #0]
 80189f2:	6823      	ldr	r3, [r4, #0]
 80189f4:	0699      	lsls	r1, r3, #26
 80189f6:	bf42      	ittt	mi
 80189f8:	6833      	ldrmi	r3, [r6, #0]
 80189fa:	3302      	addmi	r3, #2
 80189fc:	6033      	strmi	r3, [r6, #0]
 80189fe:	6825      	ldr	r5, [r4, #0]
 8018a00:	f015 0506 	ands.w	r5, r5, #6
 8018a04:	d106      	bne.n	8018a14 <_printf_common+0x48>
 8018a06:	f104 0a19 	add.w	sl, r4, #25
 8018a0a:	68e3      	ldr	r3, [r4, #12]
 8018a0c:	6832      	ldr	r2, [r6, #0]
 8018a0e:	1a9b      	subs	r3, r3, r2
 8018a10:	42ab      	cmp	r3, r5
 8018a12:	dc26      	bgt.n	8018a62 <_printf_common+0x96>
 8018a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018a18:	1e13      	subs	r3, r2, #0
 8018a1a:	6822      	ldr	r2, [r4, #0]
 8018a1c:	bf18      	it	ne
 8018a1e:	2301      	movne	r3, #1
 8018a20:	0692      	lsls	r2, r2, #26
 8018a22:	d42b      	bmi.n	8018a7c <_printf_common+0xb0>
 8018a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018a28:	4649      	mov	r1, r9
 8018a2a:	4638      	mov	r0, r7
 8018a2c:	47c0      	blx	r8
 8018a2e:	3001      	adds	r0, #1
 8018a30:	d01e      	beq.n	8018a70 <_printf_common+0xa4>
 8018a32:	6823      	ldr	r3, [r4, #0]
 8018a34:	6922      	ldr	r2, [r4, #16]
 8018a36:	f003 0306 	and.w	r3, r3, #6
 8018a3a:	2b04      	cmp	r3, #4
 8018a3c:	bf02      	ittt	eq
 8018a3e:	68e5      	ldreq	r5, [r4, #12]
 8018a40:	6833      	ldreq	r3, [r6, #0]
 8018a42:	1aed      	subeq	r5, r5, r3
 8018a44:	68a3      	ldr	r3, [r4, #8]
 8018a46:	bf0c      	ite	eq
 8018a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018a4c:	2500      	movne	r5, #0
 8018a4e:	4293      	cmp	r3, r2
 8018a50:	bfc4      	itt	gt
 8018a52:	1a9b      	subgt	r3, r3, r2
 8018a54:	18ed      	addgt	r5, r5, r3
 8018a56:	2600      	movs	r6, #0
 8018a58:	341a      	adds	r4, #26
 8018a5a:	42b5      	cmp	r5, r6
 8018a5c:	d11a      	bne.n	8018a94 <_printf_common+0xc8>
 8018a5e:	2000      	movs	r0, #0
 8018a60:	e008      	b.n	8018a74 <_printf_common+0xa8>
 8018a62:	2301      	movs	r3, #1
 8018a64:	4652      	mov	r2, sl
 8018a66:	4649      	mov	r1, r9
 8018a68:	4638      	mov	r0, r7
 8018a6a:	47c0      	blx	r8
 8018a6c:	3001      	adds	r0, #1
 8018a6e:	d103      	bne.n	8018a78 <_printf_common+0xac>
 8018a70:	f04f 30ff 	mov.w	r0, #4294967295
 8018a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a78:	3501      	adds	r5, #1
 8018a7a:	e7c6      	b.n	8018a0a <_printf_common+0x3e>
 8018a7c:	18e1      	adds	r1, r4, r3
 8018a7e:	1c5a      	adds	r2, r3, #1
 8018a80:	2030      	movs	r0, #48	; 0x30
 8018a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018a86:	4422      	add	r2, r4
 8018a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018a90:	3302      	adds	r3, #2
 8018a92:	e7c7      	b.n	8018a24 <_printf_common+0x58>
 8018a94:	2301      	movs	r3, #1
 8018a96:	4622      	mov	r2, r4
 8018a98:	4649      	mov	r1, r9
 8018a9a:	4638      	mov	r0, r7
 8018a9c:	47c0      	blx	r8
 8018a9e:	3001      	adds	r0, #1
 8018aa0:	d0e6      	beq.n	8018a70 <_printf_common+0xa4>
 8018aa2:	3601      	adds	r6, #1
 8018aa4:	e7d9      	b.n	8018a5a <_printf_common+0x8e>
	...

08018aa8 <_printf_i>:
 8018aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018aac:	7e0f      	ldrb	r7, [r1, #24]
 8018aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018ab0:	2f78      	cmp	r7, #120	; 0x78
 8018ab2:	4691      	mov	r9, r2
 8018ab4:	4680      	mov	r8, r0
 8018ab6:	460c      	mov	r4, r1
 8018ab8:	469a      	mov	sl, r3
 8018aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018abe:	d807      	bhi.n	8018ad0 <_printf_i+0x28>
 8018ac0:	2f62      	cmp	r7, #98	; 0x62
 8018ac2:	d80a      	bhi.n	8018ada <_printf_i+0x32>
 8018ac4:	2f00      	cmp	r7, #0
 8018ac6:	f000 80d4 	beq.w	8018c72 <_printf_i+0x1ca>
 8018aca:	2f58      	cmp	r7, #88	; 0x58
 8018acc:	f000 80c0 	beq.w	8018c50 <_printf_i+0x1a8>
 8018ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018ad8:	e03a      	b.n	8018b50 <_printf_i+0xa8>
 8018ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018ade:	2b15      	cmp	r3, #21
 8018ae0:	d8f6      	bhi.n	8018ad0 <_printf_i+0x28>
 8018ae2:	a101      	add	r1, pc, #4	; (adr r1, 8018ae8 <_printf_i+0x40>)
 8018ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018ae8:	08018b41 	.word	0x08018b41
 8018aec:	08018b55 	.word	0x08018b55
 8018af0:	08018ad1 	.word	0x08018ad1
 8018af4:	08018ad1 	.word	0x08018ad1
 8018af8:	08018ad1 	.word	0x08018ad1
 8018afc:	08018ad1 	.word	0x08018ad1
 8018b00:	08018b55 	.word	0x08018b55
 8018b04:	08018ad1 	.word	0x08018ad1
 8018b08:	08018ad1 	.word	0x08018ad1
 8018b0c:	08018ad1 	.word	0x08018ad1
 8018b10:	08018ad1 	.word	0x08018ad1
 8018b14:	08018c59 	.word	0x08018c59
 8018b18:	08018b81 	.word	0x08018b81
 8018b1c:	08018c13 	.word	0x08018c13
 8018b20:	08018ad1 	.word	0x08018ad1
 8018b24:	08018ad1 	.word	0x08018ad1
 8018b28:	08018c7b 	.word	0x08018c7b
 8018b2c:	08018ad1 	.word	0x08018ad1
 8018b30:	08018b81 	.word	0x08018b81
 8018b34:	08018ad1 	.word	0x08018ad1
 8018b38:	08018ad1 	.word	0x08018ad1
 8018b3c:	08018c1b 	.word	0x08018c1b
 8018b40:	682b      	ldr	r3, [r5, #0]
 8018b42:	1d1a      	adds	r2, r3, #4
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	602a      	str	r2, [r5, #0]
 8018b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018b50:	2301      	movs	r3, #1
 8018b52:	e09f      	b.n	8018c94 <_printf_i+0x1ec>
 8018b54:	6820      	ldr	r0, [r4, #0]
 8018b56:	682b      	ldr	r3, [r5, #0]
 8018b58:	0607      	lsls	r7, r0, #24
 8018b5a:	f103 0104 	add.w	r1, r3, #4
 8018b5e:	6029      	str	r1, [r5, #0]
 8018b60:	d501      	bpl.n	8018b66 <_printf_i+0xbe>
 8018b62:	681e      	ldr	r6, [r3, #0]
 8018b64:	e003      	b.n	8018b6e <_printf_i+0xc6>
 8018b66:	0646      	lsls	r6, r0, #25
 8018b68:	d5fb      	bpl.n	8018b62 <_printf_i+0xba>
 8018b6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018b6e:	2e00      	cmp	r6, #0
 8018b70:	da03      	bge.n	8018b7a <_printf_i+0xd2>
 8018b72:	232d      	movs	r3, #45	; 0x2d
 8018b74:	4276      	negs	r6, r6
 8018b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b7a:	485a      	ldr	r0, [pc, #360]	; (8018ce4 <_printf_i+0x23c>)
 8018b7c:	230a      	movs	r3, #10
 8018b7e:	e012      	b.n	8018ba6 <_printf_i+0xfe>
 8018b80:	682b      	ldr	r3, [r5, #0]
 8018b82:	6820      	ldr	r0, [r4, #0]
 8018b84:	1d19      	adds	r1, r3, #4
 8018b86:	6029      	str	r1, [r5, #0]
 8018b88:	0605      	lsls	r5, r0, #24
 8018b8a:	d501      	bpl.n	8018b90 <_printf_i+0xe8>
 8018b8c:	681e      	ldr	r6, [r3, #0]
 8018b8e:	e002      	b.n	8018b96 <_printf_i+0xee>
 8018b90:	0641      	lsls	r1, r0, #25
 8018b92:	d5fb      	bpl.n	8018b8c <_printf_i+0xe4>
 8018b94:	881e      	ldrh	r6, [r3, #0]
 8018b96:	4853      	ldr	r0, [pc, #332]	; (8018ce4 <_printf_i+0x23c>)
 8018b98:	2f6f      	cmp	r7, #111	; 0x6f
 8018b9a:	bf0c      	ite	eq
 8018b9c:	2308      	moveq	r3, #8
 8018b9e:	230a      	movne	r3, #10
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018ba6:	6865      	ldr	r5, [r4, #4]
 8018ba8:	60a5      	str	r5, [r4, #8]
 8018baa:	2d00      	cmp	r5, #0
 8018bac:	bfa2      	ittt	ge
 8018bae:	6821      	ldrge	r1, [r4, #0]
 8018bb0:	f021 0104 	bicge.w	r1, r1, #4
 8018bb4:	6021      	strge	r1, [r4, #0]
 8018bb6:	b90e      	cbnz	r6, 8018bbc <_printf_i+0x114>
 8018bb8:	2d00      	cmp	r5, #0
 8018bba:	d04b      	beq.n	8018c54 <_printf_i+0x1ac>
 8018bbc:	4615      	mov	r5, r2
 8018bbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8018bc2:	fb03 6711 	mls	r7, r3, r1, r6
 8018bc6:	5dc7      	ldrb	r7, [r0, r7]
 8018bc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018bcc:	4637      	mov	r7, r6
 8018bce:	42bb      	cmp	r3, r7
 8018bd0:	460e      	mov	r6, r1
 8018bd2:	d9f4      	bls.n	8018bbe <_printf_i+0x116>
 8018bd4:	2b08      	cmp	r3, #8
 8018bd6:	d10b      	bne.n	8018bf0 <_printf_i+0x148>
 8018bd8:	6823      	ldr	r3, [r4, #0]
 8018bda:	07de      	lsls	r6, r3, #31
 8018bdc:	d508      	bpl.n	8018bf0 <_printf_i+0x148>
 8018bde:	6923      	ldr	r3, [r4, #16]
 8018be0:	6861      	ldr	r1, [r4, #4]
 8018be2:	4299      	cmp	r1, r3
 8018be4:	bfde      	ittt	le
 8018be6:	2330      	movle	r3, #48	; 0x30
 8018be8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018bec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018bf0:	1b52      	subs	r2, r2, r5
 8018bf2:	6122      	str	r2, [r4, #16]
 8018bf4:	f8cd a000 	str.w	sl, [sp]
 8018bf8:	464b      	mov	r3, r9
 8018bfa:	aa03      	add	r2, sp, #12
 8018bfc:	4621      	mov	r1, r4
 8018bfe:	4640      	mov	r0, r8
 8018c00:	f7ff fee4 	bl	80189cc <_printf_common>
 8018c04:	3001      	adds	r0, #1
 8018c06:	d14a      	bne.n	8018c9e <_printf_i+0x1f6>
 8018c08:	f04f 30ff 	mov.w	r0, #4294967295
 8018c0c:	b004      	add	sp, #16
 8018c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c12:	6823      	ldr	r3, [r4, #0]
 8018c14:	f043 0320 	orr.w	r3, r3, #32
 8018c18:	6023      	str	r3, [r4, #0]
 8018c1a:	4833      	ldr	r0, [pc, #204]	; (8018ce8 <_printf_i+0x240>)
 8018c1c:	2778      	movs	r7, #120	; 0x78
 8018c1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018c22:	6823      	ldr	r3, [r4, #0]
 8018c24:	6829      	ldr	r1, [r5, #0]
 8018c26:	061f      	lsls	r7, r3, #24
 8018c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8018c2c:	d402      	bmi.n	8018c34 <_printf_i+0x18c>
 8018c2e:	065f      	lsls	r7, r3, #25
 8018c30:	bf48      	it	mi
 8018c32:	b2b6      	uxthmi	r6, r6
 8018c34:	07df      	lsls	r7, r3, #31
 8018c36:	bf48      	it	mi
 8018c38:	f043 0320 	orrmi.w	r3, r3, #32
 8018c3c:	6029      	str	r1, [r5, #0]
 8018c3e:	bf48      	it	mi
 8018c40:	6023      	strmi	r3, [r4, #0]
 8018c42:	b91e      	cbnz	r6, 8018c4c <_printf_i+0x1a4>
 8018c44:	6823      	ldr	r3, [r4, #0]
 8018c46:	f023 0320 	bic.w	r3, r3, #32
 8018c4a:	6023      	str	r3, [r4, #0]
 8018c4c:	2310      	movs	r3, #16
 8018c4e:	e7a7      	b.n	8018ba0 <_printf_i+0xf8>
 8018c50:	4824      	ldr	r0, [pc, #144]	; (8018ce4 <_printf_i+0x23c>)
 8018c52:	e7e4      	b.n	8018c1e <_printf_i+0x176>
 8018c54:	4615      	mov	r5, r2
 8018c56:	e7bd      	b.n	8018bd4 <_printf_i+0x12c>
 8018c58:	682b      	ldr	r3, [r5, #0]
 8018c5a:	6826      	ldr	r6, [r4, #0]
 8018c5c:	6961      	ldr	r1, [r4, #20]
 8018c5e:	1d18      	adds	r0, r3, #4
 8018c60:	6028      	str	r0, [r5, #0]
 8018c62:	0635      	lsls	r5, r6, #24
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	d501      	bpl.n	8018c6c <_printf_i+0x1c4>
 8018c68:	6019      	str	r1, [r3, #0]
 8018c6a:	e002      	b.n	8018c72 <_printf_i+0x1ca>
 8018c6c:	0670      	lsls	r0, r6, #25
 8018c6e:	d5fb      	bpl.n	8018c68 <_printf_i+0x1c0>
 8018c70:	8019      	strh	r1, [r3, #0]
 8018c72:	2300      	movs	r3, #0
 8018c74:	6123      	str	r3, [r4, #16]
 8018c76:	4615      	mov	r5, r2
 8018c78:	e7bc      	b.n	8018bf4 <_printf_i+0x14c>
 8018c7a:	682b      	ldr	r3, [r5, #0]
 8018c7c:	1d1a      	adds	r2, r3, #4
 8018c7e:	602a      	str	r2, [r5, #0]
 8018c80:	681d      	ldr	r5, [r3, #0]
 8018c82:	6862      	ldr	r2, [r4, #4]
 8018c84:	2100      	movs	r1, #0
 8018c86:	4628      	mov	r0, r5
 8018c88:	f7e8 faca 	bl	8001220 <memchr>
 8018c8c:	b108      	cbz	r0, 8018c92 <_printf_i+0x1ea>
 8018c8e:	1b40      	subs	r0, r0, r5
 8018c90:	6060      	str	r0, [r4, #4]
 8018c92:	6863      	ldr	r3, [r4, #4]
 8018c94:	6123      	str	r3, [r4, #16]
 8018c96:	2300      	movs	r3, #0
 8018c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c9c:	e7aa      	b.n	8018bf4 <_printf_i+0x14c>
 8018c9e:	6923      	ldr	r3, [r4, #16]
 8018ca0:	462a      	mov	r2, r5
 8018ca2:	4649      	mov	r1, r9
 8018ca4:	4640      	mov	r0, r8
 8018ca6:	47d0      	blx	sl
 8018ca8:	3001      	adds	r0, #1
 8018caa:	d0ad      	beq.n	8018c08 <_printf_i+0x160>
 8018cac:	6823      	ldr	r3, [r4, #0]
 8018cae:	079b      	lsls	r3, r3, #30
 8018cb0:	d413      	bmi.n	8018cda <_printf_i+0x232>
 8018cb2:	68e0      	ldr	r0, [r4, #12]
 8018cb4:	9b03      	ldr	r3, [sp, #12]
 8018cb6:	4298      	cmp	r0, r3
 8018cb8:	bfb8      	it	lt
 8018cba:	4618      	movlt	r0, r3
 8018cbc:	e7a6      	b.n	8018c0c <_printf_i+0x164>
 8018cbe:	2301      	movs	r3, #1
 8018cc0:	4632      	mov	r2, r6
 8018cc2:	4649      	mov	r1, r9
 8018cc4:	4640      	mov	r0, r8
 8018cc6:	47d0      	blx	sl
 8018cc8:	3001      	adds	r0, #1
 8018cca:	d09d      	beq.n	8018c08 <_printf_i+0x160>
 8018ccc:	3501      	adds	r5, #1
 8018cce:	68e3      	ldr	r3, [r4, #12]
 8018cd0:	9903      	ldr	r1, [sp, #12]
 8018cd2:	1a5b      	subs	r3, r3, r1
 8018cd4:	42ab      	cmp	r3, r5
 8018cd6:	dcf2      	bgt.n	8018cbe <_printf_i+0x216>
 8018cd8:	e7eb      	b.n	8018cb2 <_printf_i+0x20a>
 8018cda:	2500      	movs	r5, #0
 8018cdc:	f104 0619 	add.w	r6, r4, #25
 8018ce0:	e7f5      	b.n	8018cce <_printf_i+0x226>
 8018ce2:	bf00      	nop
 8018ce4:	0801e11c 	.word	0x0801e11c
 8018ce8:	0801e12d 	.word	0x0801e12d

08018cec <std>:
 8018cec:	2300      	movs	r3, #0
 8018cee:	b510      	push	{r4, lr}
 8018cf0:	4604      	mov	r4, r0
 8018cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8018cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018cfa:	6083      	str	r3, [r0, #8]
 8018cfc:	8181      	strh	r1, [r0, #12]
 8018cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8018d00:	81c2      	strh	r2, [r0, #14]
 8018d02:	6183      	str	r3, [r0, #24]
 8018d04:	4619      	mov	r1, r3
 8018d06:	2208      	movs	r2, #8
 8018d08:	305c      	adds	r0, #92	; 0x5c
 8018d0a:	f000 f9f5 	bl	80190f8 <memset>
 8018d0e:	4b05      	ldr	r3, [pc, #20]	; (8018d24 <std+0x38>)
 8018d10:	6263      	str	r3, [r4, #36]	; 0x24
 8018d12:	4b05      	ldr	r3, [pc, #20]	; (8018d28 <std+0x3c>)
 8018d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8018d16:	4b05      	ldr	r3, [pc, #20]	; (8018d2c <std+0x40>)
 8018d18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018d1a:	4b05      	ldr	r3, [pc, #20]	; (8018d30 <std+0x44>)
 8018d1c:	6224      	str	r4, [r4, #32]
 8018d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8018d20:	bd10      	pop	{r4, pc}
 8018d22:	bf00      	nop
 8018d24:	08018f29 	.word	0x08018f29
 8018d28:	08018f4b 	.word	0x08018f4b
 8018d2c:	08018f83 	.word	0x08018f83
 8018d30:	08018fa7 	.word	0x08018fa7

08018d34 <stdio_exit_handler>:
 8018d34:	4a02      	ldr	r2, [pc, #8]	; (8018d40 <stdio_exit_handler+0xc>)
 8018d36:	4903      	ldr	r1, [pc, #12]	; (8018d44 <stdio_exit_handler+0x10>)
 8018d38:	4803      	ldr	r0, [pc, #12]	; (8018d48 <stdio_exit_handler+0x14>)
 8018d3a:	f000 b869 	b.w	8018e10 <_fwalk_sglue>
 8018d3e:	bf00      	nop
 8018d40:	20000060 	.word	0x20000060
 8018d44:	0801aab5 	.word	0x0801aab5
 8018d48:	2000006c 	.word	0x2000006c

08018d4c <cleanup_stdio>:
 8018d4c:	6841      	ldr	r1, [r0, #4]
 8018d4e:	4b0c      	ldr	r3, [pc, #48]	; (8018d80 <cleanup_stdio+0x34>)
 8018d50:	4299      	cmp	r1, r3
 8018d52:	b510      	push	{r4, lr}
 8018d54:	4604      	mov	r4, r0
 8018d56:	d001      	beq.n	8018d5c <cleanup_stdio+0x10>
 8018d58:	f001 feac 	bl	801aab4 <_fflush_r>
 8018d5c:	68a1      	ldr	r1, [r4, #8]
 8018d5e:	4b09      	ldr	r3, [pc, #36]	; (8018d84 <cleanup_stdio+0x38>)
 8018d60:	4299      	cmp	r1, r3
 8018d62:	d002      	beq.n	8018d6a <cleanup_stdio+0x1e>
 8018d64:	4620      	mov	r0, r4
 8018d66:	f001 fea5 	bl	801aab4 <_fflush_r>
 8018d6a:	68e1      	ldr	r1, [r4, #12]
 8018d6c:	4b06      	ldr	r3, [pc, #24]	; (8018d88 <cleanup_stdio+0x3c>)
 8018d6e:	4299      	cmp	r1, r3
 8018d70:	d004      	beq.n	8018d7c <cleanup_stdio+0x30>
 8018d72:	4620      	mov	r0, r4
 8018d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d78:	f001 be9c 	b.w	801aab4 <_fflush_r>
 8018d7c:	bd10      	pop	{r4, pc}
 8018d7e:	bf00      	nop
 8018d80:	20008154 	.word	0x20008154
 8018d84:	200081bc 	.word	0x200081bc
 8018d88:	20008224 	.word	0x20008224

08018d8c <global_stdio_init.part.0>:
 8018d8c:	b510      	push	{r4, lr}
 8018d8e:	4b0b      	ldr	r3, [pc, #44]	; (8018dbc <global_stdio_init.part.0+0x30>)
 8018d90:	4c0b      	ldr	r4, [pc, #44]	; (8018dc0 <global_stdio_init.part.0+0x34>)
 8018d92:	4a0c      	ldr	r2, [pc, #48]	; (8018dc4 <global_stdio_init.part.0+0x38>)
 8018d94:	601a      	str	r2, [r3, #0]
 8018d96:	4620      	mov	r0, r4
 8018d98:	2200      	movs	r2, #0
 8018d9a:	2104      	movs	r1, #4
 8018d9c:	f7ff ffa6 	bl	8018cec <std>
 8018da0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018da4:	2201      	movs	r2, #1
 8018da6:	2109      	movs	r1, #9
 8018da8:	f7ff ffa0 	bl	8018cec <std>
 8018dac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018db0:	2202      	movs	r2, #2
 8018db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018db6:	2112      	movs	r1, #18
 8018db8:	f7ff bf98 	b.w	8018cec <std>
 8018dbc:	2000828c 	.word	0x2000828c
 8018dc0:	20008154 	.word	0x20008154
 8018dc4:	08018d35 	.word	0x08018d35

08018dc8 <__sfp_lock_acquire>:
 8018dc8:	4801      	ldr	r0, [pc, #4]	; (8018dd0 <__sfp_lock_acquire+0x8>)
 8018dca:	f000 ba0b 	b.w	80191e4 <__retarget_lock_acquire_recursive>
 8018dce:	bf00      	nop
 8018dd0:	20008295 	.word	0x20008295

08018dd4 <__sfp_lock_release>:
 8018dd4:	4801      	ldr	r0, [pc, #4]	; (8018ddc <__sfp_lock_release+0x8>)
 8018dd6:	f000 ba06 	b.w	80191e6 <__retarget_lock_release_recursive>
 8018dda:	bf00      	nop
 8018ddc:	20008295 	.word	0x20008295

08018de0 <__sinit>:
 8018de0:	b510      	push	{r4, lr}
 8018de2:	4604      	mov	r4, r0
 8018de4:	f7ff fff0 	bl	8018dc8 <__sfp_lock_acquire>
 8018de8:	6a23      	ldr	r3, [r4, #32]
 8018dea:	b11b      	cbz	r3, 8018df4 <__sinit+0x14>
 8018dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018df0:	f7ff bff0 	b.w	8018dd4 <__sfp_lock_release>
 8018df4:	4b04      	ldr	r3, [pc, #16]	; (8018e08 <__sinit+0x28>)
 8018df6:	6223      	str	r3, [r4, #32]
 8018df8:	4b04      	ldr	r3, [pc, #16]	; (8018e0c <__sinit+0x2c>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d1f5      	bne.n	8018dec <__sinit+0xc>
 8018e00:	f7ff ffc4 	bl	8018d8c <global_stdio_init.part.0>
 8018e04:	e7f2      	b.n	8018dec <__sinit+0xc>
 8018e06:	bf00      	nop
 8018e08:	08018d4d 	.word	0x08018d4d
 8018e0c:	2000828c 	.word	0x2000828c

08018e10 <_fwalk_sglue>:
 8018e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e14:	4607      	mov	r7, r0
 8018e16:	4688      	mov	r8, r1
 8018e18:	4614      	mov	r4, r2
 8018e1a:	2600      	movs	r6, #0
 8018e1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018e20:	f1b9 0901 	subs.w	r9, r9, #1
 8018e24:	d505      	bpl.n	8018e32 <_fwalk_sglue+0x22>
 8018e26:	6824      	ldr	r4, [r4, #0]
 8018e28:	2c00      	cmp	r4, #0
 8018e2a:	d1f7      	bne.n	8018e1c <_fwalk_sglue+0xc>
 8018e2c:	4630      	mov	r0, r6
 8018e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e32:	89ab      	ldrh	r3, [r5, #12]
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	d907      	bls.n	8018e48 <_fwalk_sglue+0x38>
 8018e38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018e3c:	3301      	adds	r3, #1
 8018e3e:	d003      	beq.n	8018e48 <_fwalk_sglue+0x38>
 8018e40:	4629      	mov	r1, r5
 8018e42:	4638      	mov	r0, r7
 8018e44:	47c0      	blx	r8
 8018e46:	4306      	orrs	r6, r0
 8018e48:	3568      	adds	r5, #104	; 0x68
 8018e4a:	e7e9      	b.n	8018e20 <_fwalk_sglue+0x10>

08018e4c <iprintf>:
 8018e4c:	b40f      	push	{r0, r1, r2, r3}
 8018e4e:	b507      	push	{r0, r1, r2, lr}
 8018e50:	4906      	ldr	r1, [pc, #24]	; (8018e6c <iprintf+0x20>)
 8018e52:	ab04      	add	r3, sp, #16
 8018e54:	6808      	ldr	r0, [r1, #0]
 8018e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e5a:	6881      	ldr	r1, [r0, #8]
 8018e5c:	9301      	str	r3, [sp, #4]
 8018e5e:	f001 fc89 	bl	801a774 <_vfiprintf_r>
 8018e62:	b003      	add	sp, #12
 8018e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e68:	b004      	add	sp, #16
 8018e6a:	4770      	bx	lr
 8018e6c:	200000b8 	.word	0x200000b8

08018e70 <_puts_r>:
 8018e70:	6a03      	ldr	r3, [r0, #32]
 8018e72:	b570      	push	{r4, r5, r6, lr}
 8018e74:	6884      	ldr	r4, [r0, #8]
 8018e76:	4605      	mov	r5, r0
 8018e78:	460e      	mov	r6, r1
 8018e7a:	b90b      	cbnz	r3, 8018e80 <_puts_r+0x10>
 8018e7c:	f7ff ffb0 	bl	8018de0 <__sinit>
 8018e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e82:	07db      	lsls	r3, r3, #31
 8018e84:	d405      	bmi.n	8018e92 <_puts_r+0x22>
 8018e86:	89a3      	ldrh	r3, [r4, #12]
 8018e88:	0598      	lsls	r0, r3, #22
 8018e8a:	d402      	bmi.n	8018e92 <_puts_r+0x22>
 8018e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e8e:	f000 f9a9 	bl	80191e4 <__retarget_lock_acquire_recursive>
 8018e92:	89a3      	ldrh	r3, [r4, #12]
 8018e94:	0719      	lsls	r1, r3, #28
 8018e96:	d513      	bpl.n	8018ec0 <_puts_r+0x50>
 8018e98:	6923      	ldr	r3, [r4, #16]
 8018e9a:	b18b      	cbz	r3, 8018ec0 <_puts_r+0x50>
 8018e9c:	3e01      	subs	r6, #1
 8018e9e:	68a3      	ldr	r3, [r4, #8]
 8018ea0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018ea4:	3b01      	subs	r3, #1
 8018ea6:	60a3      	str	r3, [r4, #8]
 8018ea8:	b9e9      	cbnz	r1, 8018ee6 <_puts_r+0x76>
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	da2e      	bge.n	8018f0c <_puts_r+0x9c>
 8018eae:	4622      	mov	r2, r4
 8018eb0:	210a      	movs	r1, #10
 8018eb2:	4628      	mov	r0, r5
 8018eb4:	f000 f87b 	bl	8018fae <__swbuf_r>
 8018eb8:	3001      	adds	r0, #1
 8018eba:	d007      	beq.n	8018ecc <_puts_r+0x5c>
 8018ebc:	250a      	movs	r5, #10
 8018ebe:	e007      	b.n	8018ed0 <_puts_r+0x60>
 8018ec0:	4621      	mov	r1, r4
 8018ec2:	4628      	mov	r0, r5
 8018ec4:	f000 f8b0 	bl	8019028 <__swsetup_r>
 8018ec8:	2800      	cmp	r0, #0
 8018eca:	d0e7      	beq.n	8018e9c <_puts_r+0x2c>
 8018ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8018ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ed2:	07da      	lsls	r2, r3, #31
 8018ed4:	d405      	bmi.n	8018ee2 <_puts_r+0x72>
 8018ed6:	89a3      	ldrh	r3, [r4, #12]
 8018ed8:	059b      	lsls	r3, r3, #22
 8018eda:	d402      	bmi.n	8018ee2 <_puts_r+0x72>
 8018edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ede:	f000 f982 	bl	80191e6 <__retarget_lock_release_recursive>
 8018ee2:	4628      	mov	r0, r5
 8018ee4:	bd70      	pop	{r4, r5, r6, pc}
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	da04      	bge.n	8018ef4 <_puts_r+0x84>
 8018eea:	69a2      	ldr	r2, [r4, #24]
 8018eec:	429a      	cmp	r2, r3
 8018eee:	dc06      	bgt.n	8018efe <_puts_r+0x8e>
 8018ef0:	290a      	cmp	r1, #10
 8018ef2:	d004      	beq.n	8018efe <_puts_r+0x8e>
 8018ef4:	6823      	ldr	r3, [r4, #0]
 8018ef6:	1c5a      	adds	r2, r3, #1
 8018ef8:	6022      	str	r2, [r4, #0]
 8018efa:	7019      	strb	r1, [r3, #0]
 8018efc:	e7cf      	b.n	8018e9e <_puts_r+0x2e>
 8018efe:	4622      	mov	r2, r4
 8018f00:	4628      	mov	r0, r5
 8018f02:	f000 f854 	bl	8018fae <__swbuf_r>
 8018f06:	3001      	adds	r0, #1
 8018f08:	d1c9      	bne.n	8018e9e <_puts_r+0x2e>
 8018f0a:	e7df      	b.n	8018ecc <_puts_r+0x5c>
 8018f0c:	6823      	ldr	r3, [r4, #0]
 8018f0e:	250a      	movs	r5, #10
 8018f10:	1c5a      	adds	r2, r3, #1
 8018f12:	6022      	str	r2, [r4, #0]
 8018f14:	701d      	strb	r5, [r3, #0]
 8018f16:	e7db      	b.n	8018ed0 <_puts_r+0x60>

08018f18 <puts>:
 8018f18:	4b02      	ldr	r3, [pc, #8]	; (8018f24 <puts+0xc>)
 8018f1a:	4601      	mov	r1, r0
 8018f1c:	6818      	ldr	r0, [r3, #0]
 8018f1e:	f7ff bfa7 	b.w	8018e70 <_puts_r>
 8018f22:	bf00      	nop
 8018f24:	200000b8 	.word	0x200000b8

08018f28 <__sread>:
 8018f28:	b510      	push	{r4, lr}
 8018f2a:	460c      	mov	r4, r1
 8018f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f30:	f000 f910 	bl	8019154 <_read_r>
 8018f34:	2800      	cmp	r0, #0
 8018f36:	bfab      	itete	ge
 8018f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8018f3c:	181b      	addge	r3, r3, r0
 8018f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018f42:	bfac      	ite	ge
 8018f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8018f46:	81a3      	strhlt	r3, [r4, #12]
 8018f48:	bd10      	pop	{r4, pc}

08018f4a <__swrite>:
 8018f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f4e:	461f      	mov	r7, r3
 8018f50:	898b      	ldrh	r3, [r1, #12]
 8018f52:	05db      	lsls	r3, r3, #23
 8018f54:	4605      	mov	r5, r0
 8018f56:	460c      	mov	r4, r1
 8018f58:	4616      	mov	r6, r2
 8018f5a:	d505      	bpl.n	8018f68 <__swrite+0x1e>
 8018f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f60:	2302      	movs	r3, #2
 8018f62:	2200      	movs	r2, #0
 8018f64:	f000 f8e4 	bl	8019130 <_lseek_r>
 8018f68:	89a3      	ldrh	r3, [r4, #12]
 8018f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018f72:	81a3      	strh	r3, [r4, #12]
 8018f74:	4632      	mov	r2, r6
 8018f76:	463b      	mov	r3, r7
 8018f78:	4628      	mov	r0, r5
 8018f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f7e:	f000 b8fb 	b.w	8019178 <_write_r>

08018f82 <__sseek>:
 8018f82:	b510      	push	{r4, lr}
 8018f84:	460c      	mov	r4, r1
 8018f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f8a:	f000 f8d1 	bl	8019130 <_lseek_r>
 8018f8e:	1c43      	adds	r3, r0, #1
 8018f90:	89a3      	ldrh	r3, [r4, #12]
 8018f92:	bf15      	itete	ne
 8018f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f9e:	81a3      	strheq	r3, [r4, #12]
 8018fa0:	bf18      	it	ne
 8018fa2:	81a3      	strhne	r3, [r4, #12]
 8018fa4:	bd10      	pop	{r4, pc}

08018fa6 <__sclose>:
 8018fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018faa:	f000 b8b1 	b.w	8019110 <_close_r>

08018fae <__swbuf_r>:
 8018fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fb0:	460e      	mov	r6, r1
 8018fb2:	4614      	mov	r4, r2
 8018fb4:	4605      	mov	r5, r0
 8018fb6:	b118      	cbz	r0, 8018fc0 <__swbuf_r+0x12>
 8018fb8:	6a03      	ldr	r3, [r0, #32]
 8018fba:	b90b      	cbnz	r3, 8018fc0 <__swbuf_r+0x12>
 8018fbc:	f7ff ff10 	bl	8018de0 <__sinit>
 8018fc0:	69a3      	ldr	r3, [r4, #24]
 8018fc2:	60a3      	str	r3, [r4, #8]
 8018fc4:	89a3      	ldrh	r3, [r4, #12]
 8018fc6:	071a      	lsls	r2, r3, #28
 8018fc8:	d525      	bpl.n	8019016 <__swbuf_r+0x68>
 8018fca:	6923      	ldr	r3, [r4, #16]
 8018fcc:	b31b      	cbz	r3, 8019016 <__swbuf_r+0x68>
 8018fce:	6823      	ldr	r3, [r4, #0]
 8018fd0:	6922      	ldr	r2, [r4, #16]
 8018fd2:	1a98      	subs	r0, r3, r2
 8018fd4:	6963      	ldr	r3, [r4, #20]
 8018fd6:	b2f6      	uxtb	r6, r6
 8018fd8:	4283      	cmp	r3, r0
 8018fda:	4637      	mov	r7, r6
 8018fdc:	dc04      	bgt.n	8018fe8 <__swbuf_r+0x3a>
 8018fde:	4621      	mov	r1, r4
 8018fe0:	4628      	mov	r0, r5
 8018fe2:	f001 fd67 	bl	801aab4 <_fflush_r>
 8018fe6:	b9e0      	cbnz	r0, 8019022 <__swbuf_r+0x74>
 8018fe8:	68a3      	ldr	r3, [r4, #8]
 8018fea:	3b01      	subs	r3, #1
 8018fec:	60a3      	str	r3, [r4, #8]
 8018fee:	6823      	ldr	r3, [r4, #0]
 8018ff0:	1c5a      	adds	r2, r3, #1
 8018ff2:	6022      	str	r2, [r4, #0]
 8018ff4:	701e      	strb	r6, [r3, #0]
 8018ff6:	6962      	ldr	r2, [r4, #20]
 8018ff8:	1c43      	adds	r3, r0, #1
 8018ffa:	429a      	cmp	r2, r3
 8018ffc:	d004      	beq.n	8019008 <__swbuf_r+0x5a>
 8018ffe:	89a3      	ldrh	r3, [r4, #12]
 8019000:	07db      	lsls	r3, r3, #31
 8019002:	d506      	bpl.n	8019012 <__swbuf_r+0x64>
 8019004:	2e0a      	cmp	r6, #10
 8019006:	d104      	bne.n	8019012 <__swbuf_r+0x64>
 8019008:	4621      	mov	r1, r4
 801900a:	4628      	mov	r0, r5
 801900c:	f001 fd52 	bl	801aab4 <_fflush_r>
 8019010:	b938      	cbnz	r0, 8019022 <__swbuf_r+0x74>
 8019012:	4638      	mov	r0, r7
 8019014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019016:	4621      	mov	r1, r4
 8019018:	4628      	mov	r0, r5
 801901a:	f000 f805 	bl	8019028 <__swsetup_r>
 801901e:	2800      	cmp	r0, #0
 8019020:	d0d5      	beq.n	8018fce <__swbuf_r+0x20>
 8019022:	f04f 37ff 	mov.w	r7, #4294967295
 8019026:	e7f4      	b.n	8019012 <__swbuf_r+0x64>

08019028 <__swsetup_r>:
 8019028:	b538      	push	{r3, r4, r5, lr}
 801902a:	4b2a      	ldr	r3, [pc, #168]	; (80190d4 <__swsetup_r+0xac>)
 801902c:	4605      	mov	r5, r0
 801902e:	6818      	ldr	r0, [r3, #0]
 8019030:	460c      	mov	r4, r1
 8019032:	b118      	cbz	r0, 801903c <__swsetup_r+0x14>
 8019034:	6a03      	ldr	r3, [r0, #32]
 8019036:	b90b      	cbnz	r3, 801903c <__swsetup_r+0x14>
 8019038:	f7ff fed2 	bl	8018de0 <__sinit>
 801903c:	89a3      	ldrh	r3, [r4, #12]
 801903e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019042:	0718      	lsls	r0, r3, #28
 8019044:	d422      	bmi.n	801908c <__swsetup_r+0x64>
 8019046:	06d9      	lsls	r1, r3, #27
 8019048:	d407      	bmi.n	801905a <__swsetup_r+0x32>
 801904a:	2309      	movs	r3, #9
 801904c:	602b      	str	r3, [r5, #0]
 801904e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019052:	81a3      	strh	r3, [r4, #12]
 8019054:	f04f 30ff 	mov.w	r0, #4294967295
 8019058:	e034      	b.n	80190c4 <__swsetup_r+0x9c>
 801905a:	0758      	lsls	r0, r3, #29
 801905c:	d512      	bpl.n	8019084 <__swsetup_r+0x5c>
 801905e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019060:	b141      	cbz	r1, 8019074 <__swsetup_r+0x4c>
 8019062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019066:	4299      	cmp	r1, r3
 8019068:	d002      	beq.n	8019070 <__swsetup_r+0x48>
 801906a:	4628      	mov	r0, r5
 801906c:	f000 fedc 	bl	8019e28 <_free_r>
 8019070:	2300      	movs	r3, #0
 8019072:	6363      	str	r3, [r4, #52]	; 0x34
 8019074:	89a3      	ldrh	r3, [r4, #12]
 8019076:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801907a:	81a3      	strh	r3, [r4, #12]
 801907c:	2300      	movs	r3, #0
 801907e:	6063      	str	r3, [r4, #4]
 8019080:	6923      	ldr	r3, [r4, #16]
 8019082:	6023      	str	r3, [r4, #0]
 8019084:	89a3      	ldrh	r3, [r4, #12]
 8019086:	f043 0308 	orr.w	r3, r3, #8
 801908a:	81a3      	strh	r3, [r4, #12]
 801908c:	6923      	ldr	r3, [r4, #16]
 801908e:	b94b      	cbnz	r3, 80190a4 <__swsetup_r+0x7c>
 8019090:	89a3      	ldrh	r3, [r4, #12]
 8019092:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801909a:	d003      	beq.n	80190a4 <__swsetup_r+0x7c>
 801909c:	4621      	mov	r1, r4
 801909e:	4628      	mov	r0, r5
 80190a0:	f001 fd68 	bl	801ab74 <__smakebuf_r>
 80190a4:	89a0      	ldrh	r0, [r4, #12]
 80190a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80190aa:	f010 0301 	ands.w	r3, r0, #1
 80190ae:	d00a      	beq.n	80190c6 <__swsetup_r+0x9e>
 80190b0:	2300      	movs	r3, #0
 80190b2:	60a3      	str	r3, [r4, #8]
 80190b4:	6963      	ldr	r3, [r4, #20]
 80190b6:	425b      	negs	r3, r3
 80190b8:	61a3      	str	r3, [r4, #24]
 80190ba:	6923      	ldr	r3, [r4, #16]
 80190bc:	b943      	cbnz	r3, 80190d0 <__swsetup_r+0xa8>
 80190be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80190c2:	d1c4      	bne.n	801904e <__swsetup_r+0x26>
 80190c4:	bd38      	pop	{r3, r4, r5, pc}
 80190c6:	0781      	lsls	r1, r0, #30
 80190c8:	bf58      	it	pl
 80190ca:	6963      	ldrpl	r3, [r4, #20]
 80190cc:	60a3      	str	r3, [r4, #8]
 80190ce:	e7f4      	b.n	80190ba <__swsetup_r+0x92>
 80190d0:	2000      	movs	r0, #0
 80190d2:	e7f7      	b.n	80190c4 <__swsetup_r+0x9c>
 80190d4:	200000b8 	.word	0x200000b8

080190d8 <memcmp>:
 80190d8:	b510      	push	{r4, lr}
 80190da:	3901      	subs	r1, #1
 80190dc:	4402      	add	r2, r0
 80190de:	4290      	cmp	r0, r2
 80190e0:	d101      	bne.n	80190e6 <memcmp+0xe>
 80190e2:	2000      	movs	r0, #0
 80190e4:	e005      	b.n	80190f2 <memcmp+0x1a>
 80190e6:	7803      	ldrb	r3, [r0, #0]
 80190e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80190ec:	42a3      	cmp	r3, r4
 80190ee:	d001      	beq.n	80190f4 <memcmp+0x1c>
 80190f0:	1b18      	subs	r0, r3, r4
 80190f2:	bd10      	pop	{r4, pc}
 80190f4:	3001      	adds	r0, #1
 80190f6:	e7f2      	b.n	80190de <memcmp+0x6>

080190f8 <memset>:
 80190f8:	4402      	add	r2, r0
 80190fa:	4603      	mov	r3, r0
 80190fc:	4293      	cmp	r3, r2
 80190fe:	d100      	bne.n	8019102 <memset+0xa>
 8019100:	4770      	bx	lr
 8019102:	f803 1b01 	strb.w	r1, [r3], #1
 8019106:	e7f9      	b.n	80190fc <memset+0x4>

08019108 <_localeconv_r>:
 8019108:	4800      	ldr	r0, [pc, #0]	; (801910c <_localeconv_r+0x4>)
 801910a:	4770      	bx	lr
 801910c:	200001ac 	.word	0x200001ac

08019110 <_close_r>:
 8019110:	b538      	push	{r3, r4, r5, lr}
 8019112:	4d06      	ldr	r5, [pc, #24]	; (801912c <_close_r+0x1c>)
 8019114:	2300      	movs	r3, #0
 8019116:	4604      	mov	r4, r0
 8019118:	4608      	mov	r0, r1
 801911a:	602b      	str	r3, [r5, #0]
 801911c:	f7e9 fca1 	bl	8002a62 <_close>
 8019120:	1c43      	adds	r3, r0, #1
 8019122:	d102      	bne.n	801912a <_close_r+0x1a>
 8019124:	682b      	ldr	r3, [r5, #0]
 8019126:	b103      	cbz	r3, 801912a <_close_r+0x1a>
 8019128:	6023      	str	r3, [r4, #0]
 801912a:	bd38      	pop	{r3, r4, r5, pc}
 801912c:	20008290 	.word	0x20008290

08019130 <_lseek_r>:
 8019130:	b538      	push	{r3, r4, r5, lr}
 8019132:	4d07      	ldr	r5, [pc, #28]	; (8019150 <_lseek_r+0x20>)
 8019134:	4604      	mov	r4, r0
 8019136:	4608      	mov	r0, r1
 8019138:	4611      	mov	r1, r2
 801913a:	2200      	movs	r2, #0
 801913c:	602a      	str	r2, [r5, #0]
 801913e:	461a      	mov	r2, r3
 8019140:	f7e9 fcb6 	bl	8002ab0 <_lseek>
 8019144:	1c43      	adds	r3, r0, #1
 8019146:	d102      	bne.n	801914e <_lseek_r+0x1e>
 8019148:	682b      	ldr	r3, [r5, #0]
 801914a:	b103      	cbz	r3, 801914e <_lseek_r+0x1e>
 801914c:	6023      	str	r3, [r4, #0]
 801914e:	bd38      	pop	{r3, r4, r5, pc}
 8019150:	20008290 	.word	0x20008290

08019154 <_read_r>:
 8019154:	b538      	push	{r3, r4, r5, lr}
 8019156:	4d07      	ldr	r5, [pc, #28]	; (8019174 <_read_r+0x20>)
 8019158:	4604      	mov	r4, r0
 801915a:	4608      	mov	r0, r1
 801915c:	4611      	mov	r1, r2
 801915e:	2200      	movs	r2, #0
 8019160:	602a      	str	r2, [r5, #0]
 8019162:	461a      	mov	r2, r3
 8019164:	f7e9 fc44 	bl	80029f0 <_read>
 8019168:	1c43      	adds	r3, r0, #1
 801916a:	d102      	bne.n	8019172 <_read_r+0x1e>
 801916c:	682b      	ldr	r3, [r5, #0]
 801916e:	b103      	cbz	r3, 8019172 <_read_r+0x1e>
 8019170:	6023      	str	r3, [r4, #0]
 8019172:	bd38      	pop	{r3, r4, r5, pc}
 8019174:	20008290 	.word	0x20008290

08019178 <_write_r>:
 8019178:	b538      	push	{r3, r4, r5, lr}
 801917a:	4d07      	ldr	r5, [pc, #28]	; (8019198 <_write_r+0x20>)
 801917c:	4604      	mov	r4, r0
 801917e:	4608      	mov	r0, r1
 8019180:	4611      	mov	r1, r2
 8019182:	2200      	movs	r2, #0
 8019184:	602a      	str	r2, [r5, #0]
 8019186:	461a      	mov	r2, r3
 8019188:	f7e9 fc4f 	bl	8002a2a <_write>
 801918c:	1c43      	adds	r3, r0, #1
 801918e:	d102      	bne.n	8019196 <_write_r+0x1e>
 8019190:	682b      	ldr	r3, [r5, #0]
 8019192:	b103      	cbz	r3, 8019196 <_write_r+0x1e>
 8019194:	6023      	str	r3, [r4, #0]
 8019196:	bd38      	pop	{r3, r4, r5, pc}
 8019198:	20008290 	.word	0x20008290

0801919c <__libc_init_array>:
 801919c:	b570      	push	{r4, r5, r6, lr}
 801919e:	4d0d      	ldr	r5, [pc, #52]	; (80191d4 <__libc_init_array+0x38>)
 80191a0:	4c0d      	ldr	r4, [pc, #52]	; (80191d8 <__libc_init_array+0x3c>)
 80191a2:	1b64      	subs	r4, r4, r5
 80191a4:	10a4      	asrs	r4, r4, #2
 80191a6:	2600      	movs	r6, #0
 80191a8:	42a6      	cmp	r6, r4
 80191aa:	d109      	bne.n	80191c0 <__libc_init_array+0x24>
 80191ac:	4d0b      	ldr	r5, [pc, #44]	; (80191dc <__libc_init_array+0x40>)
 80191ae:	4c0c      	ldr	r4, [pc, #48]	; (80191e0 <__libc_init_array+0x44>)
 80191b0:	f001 fdce 	bl	801ad50 <_init>
 80191b4:	1b64      	subs	r4, r4, r5
 80191b6:	10a4      	asrs	r4, r4, #2
 80191b8:	2600      	movs	r6, #0
 80191ba:	42a6      	cmp	r6, r4
 80191bc:	d105      	bne.n	80191ca <__libc_init_array+0x2e>
 80191be:	bd70      	pop	{r4, r5, r6, pc}
 80191c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80191c4:	4798      	blx	r3
 80191c6:	3601      	adds	r6, #1
 80191c8:	e7ee      	b.n	80191a8 <__libc_init_array+0xc>
 80191ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80191ce:	4798      	blx	r3
 80191d0:	3601      	adds	r6, #1
 80191d2:	e7f2      	b.n	80191ba <__libc_init_array+0x1e>
 80191d4:	0801e370 	.word	0x0801e370
 80191d8:	0801e370 	.word	0x0801e370
 80191dc:	0801e370 	.word	0x0801e370
 80191e0:	0801e374 	.word	0x0801e374

080191e4 <__retarget_lock_acquire_recursive>:
 80191e4:	4770      	bx	lr

080191e6 <__retarget_lock_release_recursive>:
 80191e6:	4770      	bx	lr

080191e8 <memcpy>:
 80191e8:	440a      	add	r2, r1
 80191ea:	4291      	cmp	r1, r2
 80191ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80191f0:	d100      	bne.n	80191f4 <memcpy+0xc>
 80191f2:	4770      	bx	lr
 80191f4:	b510      	push	{r4, lr}
 80191f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80191fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80191fe:	4291      	cmp	r1, r2
 8019200:	d1f9      	bne.n	80191f6 <memcpy+0xe>
 8019202:	bd10      	pop	{r4, pc}

08019204 <__assert_func>:
 8019204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019206:	4614      	mov	r4, r2
 8019208:	461a      	mov	r2, r3
 801920a:	4b09      	ldr	r3, [pc, #36]	; (8019230 <__assert_func+0x2c>)
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	4605      	mov	r5, r0
 8019210:	68d8      	ldr	r0, [r3, #12]
 8019212:	b14c      	cbz	r4, 8019228 <__assert_func+0x24>
 8019214:	4b07      	ldr	r3, [pc, #28]	; (8019234 <__assert_func+0x30>)
 8019216:	9100      	str	r1, [sp, #0]
 8019218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801921c:	4906      	ldr	r1, [pc, #24]	; (8019238 <__assert_func+0x34>)
 801921e:	462b      	mov	r3, r5
 8019220:	f001 fc70 	bl	801ab04 <fiprintf>
 8019224:	f001 fd14 	bl	801ac50 <abort>
 8019228:	4b04      	ldr	r3, [pc, #16]	; (801923c <__assert_func+0x38>)
 801922a:	461c      	mov	r4, r3
 801922c:	e7f3      	b.n	8019216 <__assert_func+0x12>
 801922e:	bf00      	nop
 8019230:	200000b8 	.word	0x200000b8
 8019234:	0801e13e 	.word	0x0801e13e
 8019238:	0801e14b 	.word	0x0801e14b
 801923c:	0801e179 	.word	0x0801e179

08019240 <quorem>:
 8019240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019244:	6903      	ldr	r3, [r0, #16]
 8019246:	690c      	ldr	r4, [r1, #16]
 8019248:	42a3      	cmp	r3, r4
 801924a:	4607      	mov	r7, r0
 801924c:	db7e      	blt.n	801934c <quorem+0x10c>
 801924e:	3c01      	subs	r4, #1
 8019250:	f101 0814 	add.w	r8, r1, #20
 8019254:	f100 0514 	add.w	r5, r0, #20
 8019258:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801925c:	9301      	str	r3, [sp, #4]
 801925e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019262:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019266:	3301      	adds	r3, #1
 8019268:	429a      	cmp	r2, r3
 801926a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801926e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019272:	fbb2 f6f3 	udiv	r6, r2, r3
 8019276:	d331      	bcc.n	80192dc <quorem+0x9c>
 8019278:	f04f 0e00 	mov.w	lr, #0
 801927c:	4640      	mov	r0, r8
 801927e:	46ac      	mov	ip, r5
 8019280:	46f2      	mov	sl, lr
 8019282:	f850 2b04 	ldr.w	r2, [r0], #4
 8019286:	b293      	uxth	r3, r2
 8019288:	fb06 e303 	mla	r3, r6, r3, lr
 801928c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019290:	0c1a      	lsrs	r2, r3, #16
 8019292:	b29b      	uxth	r3, r3
 8019294:	ebaa 0303 	sub.w	r3, sl, r3
 8019298:	f8dc a000 	ldr.w	sl, [ip]
 801929c:	fa13 f38a 	uxtah	r3, r3, sl
 80192a0:	fb06 220e 	mla	r2, r6, lr, r2
 80192a4:	9300      	str	r3, [sp, #0]
 80192a6:	9b00      	ldr	r3, [sp, #0]
 80192a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80192ac:	b292      	uxth	r2, r2
 80192ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80192b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80192b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80192ba:	4581      	cmp	r9, r0
 80192bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80192c0:	f84c 3b04 	str.w	r3, [ip], #4
 80192c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80192c8:	d2db      	bcs.n	8019282 <quorem+0x42>
 80192ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80192ce:	b92b      	cbnz	r3, 80192dc <quorem+0x9c>
 80192d0:	9b01      	ldr	r3, [sp, #4]
 80192d2:	3b04      	subs	r3, #4
 80192d4:	429d      	cmp	r5, r3
 80192d6:	461a      	mov	r2, r3
 80192d8:	d32c      	bcc.n	8019334 <quorem+0xf4>
 80192da:	613c      	str	r4, [r7, #16]
 80192dc:	4638      	mov	r0, r7
 80192de:	f001 f91f 	bl	801a520 <__mcmp>
 80192e2:	2800      	cmp	r0, #0
 80192e4:	db22      	blt.n	801932c <quorem+0xec>
 80192e6:	3601      	adds	r6, #1
 80192e8:	4629      	mov	r1, r5
 80192ea:	2000      	movs	r0, #0
 80192ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80192f0:	f8d1 c000 	ldr.w	ip, [r1]
 80192f4:	b293      	uxth	r3, r2
 80192f6:	1ac3      	subs	r3, r0, r3
 80192f8:	0c12      	lsrs	r2, r2, #16
 80192fa:	fa13 f38c 	uxtah	r3, r3, ip
 80192fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8019302:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019306:	b29b      	uxth	r3, r3
 8019308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801930c:	45c1      	cmp	r9, r8
 801930e:	f841 3b04 	str.w	r3, [r1], #4
 8019312:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019316:	d2e9      	bcs.n	80192ec <quorem+0xac>
 8019318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801931c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019320:	b922      	cbnz	r2, 801932c <quorem+0xec>
 8019322:	3b04      	subs	r3, #4
 8019324:	429d      	cmp	r5, r3
 8019326:	461a      	mov	r2, r3
 8019328:	d30a      	bcc.n	8019340 <quorem+0x100>
 801932a:	613c      	str	r4, [r7, #16]
 801932c:	4630      	mov	r0, r6
 801932e:	b003      	add	sp, #12
 8019330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019334:	6812      	ldr	r2, [r2, #0]
 8019336:	3b04      	subs	r3, #4
 8019338:	2a00      	cmp	r2, #0
 801933a:	d1ce      	bne.n	80192da <quorem+0x9a>
 801933c:	3c01      	subs	r4, #1
 801933e:	e7c9      	b.n	80192d4 <quorem+0x94>
 8019340:	6812      	ldr	r2, [r2, #0]
 8019342:	3b04      	subs	r3, #4
 8019344:	2a00      	cmp	r2, #0
 8019346:	d1f0      	bne.n	801932a <quorem+0xea>
 8019348:	3c01      	subs	r4, #1
 801934a:	e7eb      	b.n	8019324 <quorem+0xe4>
 801934c:	2000      	movs	r0, #0
 801934e:	e7ee      	b.n	801932e <quorem+0xee>

08019350 <_dtoa_r>:
 8019350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019354:	ed2d 8b02 	vpush	{d8}
 8019358:	69c5      	ldr	r5, [r0, #28]
 801935a:	b091      	sub	sp, #68	; 0x44
 801935c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019360:	ec59 8b10 	vmov	r8, r9, d0
 8019364:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019366:	9106      	str	r1, [sp, #24]
 8019368:	4606      	mov	r6, r0
 801936a:	9208      	str	r2, [sp, #32]
 801936c:	930c      	str	r3, [sp, #48]	; 0x30
 801936e:	b975      	cbnz	r5, 801938e <_dtoa_r+0x3e>
 8019370:	2010      	movs	r0, #16
 8019372:	f000 fda5 	bl	8019ec0 <malloc>
 8019376:	4602      	mov	r2, r0
 8019378:	61f0      	str	r0, [r6, #28]
 801937a:	b920      	cbnz	r0, 8019386 <_dtoa_r+0x36>
 801937c:	4ba6      	ldr	r3, [pc, #664]	; (8019618 <_dtoa_r+0x2c8>)
 801937e:	21ef      	movs	r1, #239	; 0xef
 8019380:	48a6      	ldr	r0, [pc, #664]	; (801961c <_dtoa_r+0x2cc>)
 8019382:	f7ff ff3f 	bl	8019204 <__assert_func>
 8019386:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801938a:	6005      	str	r5, [r0, #0]
 801938c:	60c5      	str	r5, [r0, #12]
 801938e:	69f3      	ldr	r3, [r6, #28]
 8019390:	6819      	ldr	r1, [r3, #0]
 8019392:	b151      	cbz	r1, 80193aa <_dtoa_r+0x5a>
 8019394:	685a      	ldr	r2, [r3, #4]
 8019396:	604a      	str	r2, [r1, #4]
 8019398:	2301      	movs	r3, #1
 801939a:	4093      	lsls	r3, r2
 801939c:	608b      	str	r3, [r1, #8]
 801939e:	4630      	mov	r0, r6
 80193a0:	f000 fe82 	bl	801a0a8 <_Bfree>
 80193a4:	69f3      	ldr	r3, [r6, #28]
 80193a6:	2200      	movs	r2, #0
 80193a8:	601a      	str	r2, [r3, #0]
 80193aa:	f1b9 0300 	subs.w	r3, r9, #0
 80193ae:	bfbb      	ittet	lt
 80193b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80193b4:	9303      	strlt	r3, [sp, #12]
 80193b6:	2300      	movge	r3, #0
 80193b8:	2201      	movlt	r2, #1
 80193ba:	bfac      	ite	ge
 80193bc:	6023      	strge	r3, [r4, #0]
 80193be:	6022      	strlt	r2, [r4, #0]
 80193c0:	4b97      	ldr	r3, [pc, #604]	; (8019620 <_dtoa_r+0x2d0>)
 80193c2:	9c03      	ldr	r4, [sp, #12]
 80193c4:	43a3      	bics	r3, r4
 80193c6:	d11c      	bne.n	8019402 <_dtoa_r+0xb2>
 80193c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80193ce:	6013      	str	r3, [r2, #0]
 80193d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80193d4:	ea53 0308 	orrs.w	r3, r3, r8
 80193d8:	f000 84fb 	beq.w	8019dd2 <_dtoa_r+0xa82>
 80193dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80193de:	b963      	cbnz	r3, 80193fa <_dtoa_r+0xaa>
 80193e0:	4b90      	ldr	r3, [pc, #576]	; (8019624 <_dtoa_r+0x2d4>)
 80193e2:	e020      	b.n	8019426 <_dtoa_r+0xd6>
 80193e4:	4b90      	ldr	r3, [pc, #576]	; (8019628 <_dtoa_r+0x2d8>)
 80193e6:	9301      	str	r3, [sp, #4]
 80193e8:	3308      	adds	r3, #8
 80193ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80193ec:	6013      	str	r3, [r2, #0]
 80193ee:	9801      	ldr	r0, [sp, #4]
 80193f0:	b011      	add	sp, #68	; 0x44
 80193f2:	ecbd 8b02 	vpop	{d8}
 80193f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193fa:	4b8a      	ldr	r3, [pc, #552]	; (8019624 <_dtoa_r+0x2d4>)
 80193fc:	9301      	str	r3, [sp, #4]
 80193fe:	3303      	adds	r3, #3
 8019400:	e7f3      	b.n	80193ea <_dtoa_r+0x9a>
 8019402:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019406:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801940a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801940e:	d10c      	bne.n	801942a <_dtoa_r+0xda>
 8019410:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019412:	2301      	movs	r3, #1
 8019414:	6013      	str	r3, [r2, #0]
 8019416:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019418:	2b00      	cmp	r3, #0
 801941a:	f000 84d7 	beq.w	8019dcc <_dtoa_r+0xa7c>
 801941e:	4b83      	ldr	r3, [pc, #524]	; (801962c <_dtoa_r+0x2dc>)
 8019420:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019422:	6013      	str	r3, [r2, #0]
 8019424:	3b01      	subs	r3, #1
 8019426:	9301      	str	r3, [sp, #4]
 8019428:	e7e1      	b.n	80193ee <_dtoa_r+0x9e>
 801942a:	aa0e      	add	r2, sp, #56	; 0x38
 801942c:	a90f      	add	r1, sp, #60	; 0x3c
 801942e:	4630      	mov	r0, r6
 8019430:	eeb0 0b48 	vmov.f64	d0, d8
 8019434:	f001 f91a 	bl	801a66c <__d2b>
 8019438:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801943c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801943e:	4605      	mov	r5, r0
 8019440:	2b00      	cmp	r3, #0
 8019442:	d046      	beq.n	80194d2 <_dtoa_r+0x182>
 8019444:	eeb0 7b48 	vmov.f64	d7, d8
 8019448:	ee18 1a90 	vmov	r1, s17
 801944c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019450:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8019454:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8019458:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801945c:	2000      	movs	r0, #0
 801945e:	ee07 1a90 	vmov	s15, r1
 8019462:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8019466:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019600 <_dtoa_r+0x2b0>
 801946a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801946e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8019608 <_dtoa_r+0x2b8>
 8019472:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019476:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019610 <_dtoa_r+0x2c0>
 801947a:	ee07 3a90 	vmov	s15, r3
 801947e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019482:	eeb0 7b46 	vmov.f64	d7, d6
 8019486:	eea4 7b05 	vfma.f64	d7, d4, d5
 801948a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801948e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019496:	ee16 ba90 	vmov	fp, s13
 801949a:	9009      	str	r0, [sp, #36]	; 0x24
 801949c:	d508      	bpl.n	80194b0 <_dtoa_r+0x160>
 801949e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80194a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80194a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194aa:	bf18      	it	ne
 80194ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80194b0:	f1bb 0f16 	cmp.w	fp, #22
 80194b4:	d82b      	bhi.n	801950e <_dtoa_r+0x1be>
 80194b6:	495e      	ldr	r1, [pc, #376]	; (8019630 <_dtoa_r+0x2e0>)
 80194b8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80194bc:	ed91 7b00 	vldr	d7, [r1]
 80194c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80194c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c8:	d501      	bpl.n	80194ce <_dtoa_r+0x17e>
 80194ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80194ce:	2100      	movs	r1, #0
 80194d0:	e01e      	b.n	8019510 <_dtoa_r+0x1c0>
 80194d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194d4:	4413      	add	r3, r2
 80194d6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80194da:	2920      	cmp	r1, #32
 80194dc:	bfc1      	itttt	gt
 80194de:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80194e2:	408c      	lslgt	r4, r1
 80194e4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80194e8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80194ec:	bfd6      	itet	le
 80194ee:	f1c1 0120 	rsble	r1, r1, #32
 80194f2:	4321      	orrgt	r1, r4
 80194f4:	fa08 f101 	lslle.w	r1, r8, r1
 80194f8:	ee07 1a90 	vmov	s15, r1
 80194fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019500:	3b01      	subs	r3, #1
 8019502:	ee17 1a90 	vmov	r1, s15
 8019506:	2001      	movs	r0, #1
 8019508:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801950c:	e7a7      	b.n	801945e <_dtoa_r+0x10e>
 801950e:	2101      	movs	r1, #1
 8019510:	1ad2      	subs	r2, r2, r3
 8019512:	1e53      	subs	r3, r2, #1
 8019514:	9305      	str	r3, [sp, #20]
 8019516:	bf45      	ittet	mi
 8019518:	f1c2 0301 	rsbmi	r3, r2, #1
 801951c:	9304      	strmi	r3, [sp, #16]
 801951e:	2300      	movpl	r3, #0
 8019520:	2300      	movmi	r3, #0
 8019522:	bf4c      	ite	mi
 8019524:	9305      	strmi	r3, [sp, #20]
 8019526:	9304      	strpl	r3, [sp, #16]
 8019528:	f1bb 0f00 	cmp.w	fp, #0
 801952c:	910b      	str	r1, [sp, #44]	; 0x2c
 801952e:	db18      	blt.n	8019562 <_dtoa_r+0x212>
 8019530:	9b05      	ldr	r3, [sp, #20]
 8019532:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8019536:	445b      	add	r3, fp
 8019538:	9305      	str	r3, [sp, #20]
 801953a:	2300      	movs	r3, #0
 801953c:	9a06      	ldr	r2, [sp, #24]
 801953e:	2a09      	cmp	r2, #9
 8019540:	d848      	bhi.n	80195d4 <_dtoa_r+0x284>
 8019542:	2a05      	cmp	r2, #5
 8019544:	bfc4      	itt	gt
 8019546:	3a04      	subgt	r2, #4
 8019548:	9206      	strgt	r2, [sp, #24]
 801954a:	9a06      	ldr	r2, [sp, #24]
 801954c:	f1a2 0202 	sub.w	r2, r2, #2
 8019550:	bfcc      	ite	gt
 8019552:	2400      	movgt	r4, #0
 8019554:	2401      	movle	r4, #1
 8019556:	2a03      	cmp	r2, #3
 8019558:	d847      	bhi.n	80195ea <_dtoa_r+0x29a>
 801955a:	e8df f002 	tbb	[pc, r2]
 801955e:	2d0b      	.short	0x2d0b
 8019560:	392b      	.short	0x392b
 8019562:	9b04      	ldr	r3, [sp, #16]
 8019564:	2200      	movs	r2, #0
 8019566:	eba3 030b 	sub.w	r3, r3, fp
 801956a:	9304      	str	r3, [sp, #16]
 801956c:	920a      	str	r2, [sp, #40]	; 0x28
 801956e:	f1cb 0300 	rsb	r3, fp, #0
 8019572:	e7e3      	b.n	801953c <_dtoa_r+0x1ec>
 8019574:	2200      	movs	r2, #0
 8019576:	9207      	str	r2, [sp, #28]
 8019578:	9a08      	ldr	r2, [sp, #32]
 801957a:	2a00      	cmp	r2, #0
 801957c:	dc38      	bgt.n	80195f0 <_dtoa_r+0x2a0>
 801957e:	f04f 0a01 	mov.w	sl, #1
 8019582:	46d1      	mov	r9, sl
 8019584:	4652      	mov	r2, sl
 8019586:	f8cd a020 	str.w	sl, [sp, #32]
 801958a:	69f7      	ldr	r7, [r6, #28]
 801958c:	2100      	movs	r1, #0
 801958e:	2004      	movs	r0, #4
 8019590:	f100 0c14 	add.w	ip, r0, #20
 8019594:	4594      	cmp	ip, r2
 8019596:	d930      	bls.n	80195fa <_dtoa_r+0x2aa>
 8019598:	6079      	str	r1, [r7, #4]
 801959a:	4630      	mov	r0, r6
 801959c:	930d      	str	r3, [sp, #52]	; 0x34
 801959e:	f000 fd43 	bl	801a028 <_Balloc>
 80195a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195a4:	9001      	str	r0, [sp, #4]
 80195a6:	4602      	mov	r2, r0
 80195a8:	2800      	cmp	r0, #0
 80195aa:	d145      	bne.n	8019638 <_dtoa_r+0x2e8>
 80195ac:	4b21      	ldr	r3, [pc, #132]	; (8019634 <_dtoa_r+0x2e4>)
 80195ae:	f240 11af 	movw	r1, #431	; 0x1af
 80195b2:	e6e5      	b.n	8019380 <_dtoa_r+0x30>
 80195b4:	2201      	movs	r2, #1
 80195b6:	e7de      	b.n	8019576 <_dtoa_r+0x226>
 80195b8:	2200      	movs	r2, #0
 80195ba:	9207      	str	r2, [sp, #28]
 80195bc:	9a08      	ldr	r2, [sp, #32]
 80195be:	eb0b 0a02 	add.w	sl, fp, r2
 80195c2:	f10a 0901 	add.w	r9, sl, #1
 80195c6:	464a      	mov	r2, r9
 80195c8:	2a01      	cmp	r2, #1
 80195ca:	bfb8      	it	lt
 80195cc:	2201      	movlt	r2, #1
 80195ce:	e7dc      	b.n	801958a <_dtoa_r+0x23a>
 80195d0:	2201      	movs	r2, #1
 80195d2:	e7f2      	b.n	80195ba <_dtoa_r+0x26a>
 80195d4:	2401      	movs	r4, #1
 80195d6:	2200      	movs	r2, #0
 80195d8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80195dc:	f04f 3aff 	mov.w	sl, #4294967295
 80195e0:	2100      	movs	r1, #0
 80195e2:	46d1      	mov	r9, sl
 80195e4:	2212      	movs	r2, #18
 80195e6:	9108      	str	r1, [sp, #32]
 80195e8:	e7cf      	b.n	801958a <_dtoa_r+0x23a>
 80195ea:	2201      	movs	r2, #1
 80195ec:	9207      	str	r2, [sp, #28]
 80195ee:	e7f5      	b.n	80195dc <_dtoa_r+0x28c>
 80195f0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80195f4:	46d1      	mov	r9, sl
 80195f6:	4652      	mov	r2, sl
 80195f8:	e7c7      	b.n	801958a <_dtoa_r+0x23a>
 80195fa:	3101      	adds	r1, #1
 80195fc:	0040      	lsls	r0, r0, #1
 80195fe:	e7c7      	b.n	8019590 <_dtoa_r+0x240>
 8019600:	636f4361 	.word	0x636f4361
 8019604:	3fd287a7 	.word	0x3fd287a7
 8019608:	8b60c8b3 	.word	0x8b60c8b3
 801960c:	3fc68a28 	.word	0x3fc68a28
 8019610:	509f79fb 	.word	0x509f79fb
 8019614:	3fd34413 	.word	0x3fd34413
 8019618:	0801df9a 	.word	0x0801df9a
 801961c:	0801e187 	.word	0x0801e187
 8019620:	7ff00000 	.word	0x7ff00000
 8019624:	0801e183 	.word	0x0801e183
 8019628:	0801e17a 	.word	0x0801e17a
 801962c:	0801e11b 	.word	0x0801e11b
 8019630:	0801e278 	.word	0x0801e278
 8019634:	0801e1df 	.word	0x0801e1df
 8019638:	69f2      	ldr	r2, [r6, #28]
 801963a:	9901      	ldr	r1, [sp, #4]
 801963c:	6011      	str	r1, [r2, #0]
 801963e:	f1b9 0f0e 	cmp.w	r9, #14
 8019642:	d86c      	bhi.n	801971e <_dtoa_r+0x3ce>
 8019644:	2c00      	cmp	r4, #0
 8019646:	d06a      	beq.n	801971e <_dtoa_r+0x3ce>
 8019648:	f1bb 0f00 	cmp.w	fp, #0
 801964c:	f340 80a0 	ble.w	8019790 <_dtoa_r+0x440>
 8019650:	4ac1      	ldr	r2, [pc, #772]	; (8019958 <_dtoa_r+0x608>)
 8019652:	f00b 010f 	and.w	r1, fp, #15
 8019656:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801965a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801965e:	ed92 7b00 	vldr	d7, [r2]
 8019662:	ea4f 122b 	mov.w	r2, fp, asr #4
 8019666:	f000 8087 	beq.w	8019778 <_dtoa_r+0x428>
 801966a:	49bc      	ldr	r1, [pc, #752]	; (801995c <_dtoa_r+0x60c>)
 801966c:	ed91 6b08 	vldr	d6, [r1, #32]
 8019670:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019674:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019678:	f002 020f 	and.w	r2, r2, #15
 801967c:	2103      	movs	r1, #3
 801967e:	48b7      	ldr	r0, [pc, #732]	; (801995c <_dtoa_r+0x60c>)
 8019680:	2a00      	cmp	r2, #0
 8019682:	d17b      	bne.n	801977c <_dtoa_r+0x42c>
 8019684:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019688:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801968c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019692:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019696:	2a00      	cmp	r2, #0
 8019698:	f000 80a0 	beq.w	80197dc <_dtoa_r+0x48c>
 801969c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80196a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80196a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196a8:	f140 8098 	bpl.w	80197dc <_dtoa_r+0x48c>
 80196ac:	f1b9 0f00 	cmp.w	r9, #0
 80196b0:	f000 8094 	beq.w	80197dc <_dtoa_r+0x48c>
 80196b4:	f1ba 0f00 	cmp.w	sl, #0
 80196b8:	dd2f      	ble.n	801971a <_dtoa_r+0x3ca>
 80196ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80196be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80196c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80196c6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80196ca:	3101      	adds	r1, #1
 80196cc:	4654      	mov	r4, sl
 80196ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80196d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80196d6:	ee07 1a90 	vmov	s15, r1
 80196da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80196de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80196e2:	ee15 7a90 	vmov	r7, s11
 80196e6:	ec51 0b15 	vmov	r0, r1, d5
 80196ea:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80196ee:	2c00      	cmp	r4, #0
 80196f0:	d177      	bne.n	80197e2 <_dtoa_r+0x492>
 80196f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80196f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80196fa:	ec41 0b17 	vmov	d7, r0, r1
 80196fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019706:	f300 826a 	bgt.w	8019bde <_dtoa_r+0x88e>
 801970a:	eeb1 7b47 	vneg.f64	d7, d7
 801970e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019716:	f100 8260 	bmi.w	8019bda <_dtoa_r+0x88a>
 801971a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801971e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019720:	2a00      	cmp	r2, #0
 8019722:	f2c0 811d 	blt.w	8019960 <_dtoa_r+0x610>
 8019726:	f1bb 0f0e 	cmp.w	fp, #14
 801972a:	f300 8119 	bgt.w	8019960 <_dtoa_r+0x610>
 801972e:	4b8a      	ldr	r3, [pc, #552]	; (8019958 <_dtoa_r+0x608>)
 8019730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019734:	ed93 6b00 	vldr	d6, [r3]
 8019738:	9b08      	ldr	r3, [sp, #32]
 801973a:	2b00      	cmp	r3, #0
 801973c:	f280 80b7 	bge.w	80198ae <_dtoa_r+0x55e>
 8019740:	f1b9 0f00 	cmp.w	r9, #0
 8019744:	f300 80b3 	bgt.w	80198ae <_dtoa_r+0x55e>
 8019748:	f040 8246 	bne.w	8019bd8 <_dtoa_r+0x888>
 801974c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019750:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019754:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019758:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019760:	464c      	mov	r4, r9
 8019762:	464f      	mov	r7, r9
 8019764:	f280 821c 	bge.w	8019ba0 <_dtoa_r+0x850>
 8019768:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801976c:	2331      	movs	r3, #49	; 0x31
 801976e:	f808 3b01 	strb.w	r3, [r8], #1
 8019772:	f10b 0b01 	add.w	fp, fp, #1
 8019776:	e218      	b.n	8019baa <_dtoa_r+0x85a>
 8019778:	2102      	movs	r1, #2
 801977a:	e780      	b.n	801967e <_dtoa_r+0x32e>
 801977c:	07d4      	lsls	r4, r2, #31
 801977e:	d504      	bpl.n	801978a <_dtoa_r+0x43a>
 8019780:	ed90 6b00 	vldr	d6, [r0]
 8019784:	3101      	adds	r1, #1
 8019786:	ee27 7b06 	vmul.f64	d7, d7, d6
 801978a:	1052      	asrs	r2, r2, #1
 801978c:	3008      	adds	r0, #8
 801978e:	e777      	b.n	8019680 <_dtoa_r+0x330>
 8019790:	d022      	beq.n	80197d8 <_dtoa_r+0x488>
 8019792:	f1cb 0200 	rsb	r2, fp, #0
 8019796:	4970      	ldr	r1, [pc, #448]	; (8019958 <_dtoa_r+0x608>)
 8019798:	f002 000f 	and.w	r0, r2, #15
 801979c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80197a0:	ed91 7b00 	vldr	d7, [r1]
 80197a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80197a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80197ac:	486b      	ldr	r0, [pc, #428]	; (801995c <_dtoa_r+0x60c>)
 80197ae:	1112      	asrs	r2, r2, #4
 80197b0:	2400      	movs	r4, #0
 80197b2:	2102      	movs	r1, #2
 80197b4:	b92a      	cbnz	r2, 80197c2 <_dtoa_r+0x472>
 80197b6:	2c00      	cmp	r4, #0
 80197b8:	f43f af6a 	beq.w	8019690 <_dtoa_r+0x340>
 80197bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80197c0:	e766      	b.n	8019690 <_dtoa_r+0x340>
 80197c2:	07d7      	lsls	r7, r2, #31
 80197c4:	d505      	bpl.n	80197d2 <_dtoa_r+0x482>
 80197c6:	ed90 6b00 	vldr	d6, [r0]
 80197ca:	3101      	adds	r1, #1
 80197cc:	2401      	movs	r4, #1
 80197ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80197d2:	1052      	asrs	r2, r2, #1
 80197d4:	3008      	adds	r0, #8
 80197d6:	e7ed      	b.n	80197b4 <_dtoa_r+0x464>
 80197d8:	2102      	movs	r1, #2
 80197da:	e759      	b.n	8019690 <_dtoa_r+0x340>
 80197dc:	465a      	mov	r2, fp
 80197de:	464c      	mov	r4, r9
 80197e0:	e775      	b.n	80196ce <_dtoa_r+0x37e>
 80197e2:	ec41 0b17 	vmov	d7, r0, r1
 80197e6:	495c      	ldr	r1, [pc, #368]	; (8019958 <_dtoa_r+0x608>)
 80197e8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80197ec:	ed11 4b02 	vldr	d4, [r1, #-8]
 80197f0:	9901      	ldr	r1, [sp, #4]
 80197f2:	440c      	add	r4, r1
 80197f4:	9907      	ldr	r1, [sp, #28]
 80197f6:	b351      	cbz	r1, 801984e <_dtoa_r+0x4fe>
 80197f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80197fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8019800:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019804:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019808:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801980c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019810:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019814:	ee14 1a90 	vmov	r1, s9
 8019818:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801981c:	3130      	adds	r1, #48	; 0x30
 801981e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019822:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801982a:	f808 1b01 	strb.w	r1, [r8], #1
 801982e:	d439      	bmi.n	80198a4 <_dtoa_r+0x554>
 8019830:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019834:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801983c:	d472      	bmi.n	8019924 <_dtoa_r+0x5d4>
 801983e:	45a0      	cmp	r8, r4
 8019840:	f43f af6b 	beq.w	801971a <_dtoa_r+0x3ca>
 8019844:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019848:	ee26 6b03 	vmul.f64	d6, d6, d3
 801984c:	e7e0      	b.n	8019810 <_dtoa_r+0x4c0>
 801984e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019852:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019856:	4620      	mov	r0, r4
 8019858:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801985c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019860:	ee14 1a90 	vmov	r1, s9
 8019864:	3130      	adds	r1, #48	; 0x30
 8019866:	f808 1b01 	strb.w	r1, [r8], #1
 801986a:	45a0      	cmp	r8, r4
 801986c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019870:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019874:	d118      	bne.n	80198a8 <_dtoa_r+0x558>
 8019876:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801987a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801987e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019886:	dc4d      	bgt.n	8019924 <_dtoa_r+0x5d4>
 8019888:	ee35 5b47 	vsub.f64	d5, d5, d7
 801988c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019894:	f57f af41 	bpl.w	801971a <_dtoa_r+0x3ca>
 8019898:	4680      	mov	r8, r0
 801989a:	3801      	subs	r0, #1
 801989c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80198a0:	2b30      	cmp	r3, #48	; 0x30
 80198a2:	d0f9      	beq.n	8019898 <_dtoa_r+0x548>
 80198a4:	4693      	mov	fp, r2
 80198a6:	e02a      	b.n	80198fe <_dtoa_r+0x5ae>
 80198a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80198ac:	e7d6      	b.n	801985c <_dtoa_r+0x50c>
 80198ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80198b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80198ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80198be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80198c2:	ee15 3a10 	vmov	r3, s10
 80198c6:	3330      	adds	r3, #48	; 0x30
 80198c8:	f808 3b01 	strb.w	r3, [r8], #1
 80198cc:	9b01      	ldr	r3, [sp, #4]
 80198ce:	eba8 0303 	sub.w	r3, r8, r3
 80198d2:	4599      	cmp	r9, r3
 80198d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80198d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80198dc:	d133      	bne.n	8019946 <_dtoa_r+0x5f6>
 80198de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80198e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80198e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ea:	dc1a      	bgt.n	8019922 <_dtoa_r+0x5d2>
 80198ec:	eeb4 7b46 	vcmp.f64	d7, d6
 80198f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198f4:	d103      	bne.n	80198fe <_dtoa_r+0x5ae>
 80198f6:	ee15 3a10 	vmov	r3, s10
 80198fa:	07d9      	lsls	r1, r3, #31
 80198fc:	d411      	bmi.n	8019922 <_dtoa_r+0x5d2>
 80198fe:	4629      	mov	r1, r5
 8019900:	4630      	mov	r0, r6
 8019902:	f000 fbd1 	bl	801a0a8 <_Bfree>
 8019906:	2300      	movs	r3, #0
 8019908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801990a:	f888 3000 	strb.w	r3, [r8]
 801990e:	f10b 0301 	add.w	r3, fp, #1
 8019912:	6013      	str	r3, [r2, #0]
 8019914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019916:	2b00      	cmp	r3, #0
 8019918:	f43f ad69 	beq.w	80193ee <_dtoa_r+0x9e>
 801991c:	f8c3 8000 	str.w	r8, [r3]
 8019920:	e565      	b.n	80193ee <_dtoa_r+0x9e>
 8019922:	465a      	mov	r2, fp
 8019924:	4643      	mov	r3, r8
 8019926:	4698      	mov	r8, r3
 8019928:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801992c:	2939      	cmp	r1, #57	; 0x39
 801992e:	d106      	bne.n	801993e <_dtoa_r+0x5ee>
 8019930:	9901      	ldr	r1, [sp, #4]
 8019932:	4299      	cmp	r1, r3
 8019934:	d1f7      	bne.n	8019926 <_dtoa_r+0x5d6>
 8019936:	9801      	ldr	r0, [sp, #4]
 8019938:	2130      	movs	r1, #48	; 0x30
 801993a:	3201      	adds	r2, #1
 801993c:	7001      	strb	r1, [r0, #0]
 801993e:	7819      	ldrb	r1, [r3, #0]
 8019940:	3101      	adds	r1, #1
 8019942:	7019      	strb	r1, [r3, #0]
 8019944:	e7ae      	b.n	80198a4 <_dtoa_r+0x554>
 8019946:	ee27 7b04 	vmul.f64	d7, d7, d4
 801994a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019952:	d1b2      	bne.n	80198ba <_dtoa_r+0x56a>
 8019954:	e7d3      	b.n	80198fe <_dtoa_r+0x5ae>
 8019956:	bf00      	nop
 8019958:	0801e278 	.word	0x0801e278
 801995c:	0801e250 	.word	0x0801e250
 8019960:	9907      	ldr	r1, [sp, #28]
 8019962:	2900      	cmp	r1, #0
 8019964:	f000 80d0 	beq.w	8019b08 <_dtoa_r+0x7b8>
 8019968:	9906      	ldr	r1, [sp, #24]
 801996a:	2901      	cmp	r1, #1
 801996c:	f300 80b4 	bgt.w	8019ad8 <_dtoa_r+0x788>
 8019970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019972:	2900      	cmp	r1, #0
 8019974:	f000 80ac 	beq.w	8019ad0 <_dtoa_r+0x780>
 8019978:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801997c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019980:	461c      	mov	r4, r3
 8019982:	9309      	str	r3, [sp, #36]	; 0x24
 8019984:	9b04      	ldr	r3, [sp, #16]
 8019986:	4413      	add	r3, r2
 8019988:	9304      	str	r3, [sp, #16]
 801998a:	9b05      	ldr	r3, [sp, #20]
 801998c:	2101      	movs	r1, #1
 801998e:	4413      	add	r3, r2
 8019990:	4630      	mov	r0, r6
 8019992:	9305      	str	r3, [sp, #20]
 8019994:	f000 fc3e 	bl	801a214 <__i2b>
 8019998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801999a:	4607      	mov	r7, r0
 801999c:	f1b8 0f00 	cmp.w	r8, #0
 80199a0:	d00d      	beq.n	80199be <_dtoa_r+0x66e>
 80199a2:	9a05      	ldr	r2, [sp, #20]
 80199a4:	2a00      	cmp	r2, #0
 80199a6:	dd0a      	ble.n	80199be <_dtoa_r+0x66e>
 80199a8:	4542      	cmp	r2, r8
 80199aa:	9904      	ldr	r1, [sp, #16]
 80199ac:	bfa8      	it	ge
 80199ae:	4642      	movge	r2, r8
 80199b0:	1a89      	subs	r1, r1, r2
 80199b2:	9104      	str	r1, [sp, #16]
 80199b4:	9905      	ldr	r1, [sp, #20]
 80199b6:	eba8 0802 	sub.w	r8, r8, r2
 80199ba:	1a8a      	subs	r2, r1, r2
 80199bc:	9205      	str	r2, [sp, #20]
 80199be:	b303      	cbz	r3, 8019a02 <_dtoa_r+0x6b2>
 80199c0:	9a07      	ldr	r2, [sp, #28]
 80199c2:	2a00      	cmp	r2, #0
 80199c4:	f000 80a5 	beq.w	8019b12 <_dtoa_r+0x7c2>
 80199c8:	2c00      	cmp	r4, #0
 80199ca:	dd13      	ble.n	80199f4 <_dtoa_r+0x6a4>
 80199cc:	4639      	mov	r1, r7
 80199ce:	4622      	mov	r2, r4
 80199d0:	4630      	mov	r0, r6
 80199d2:	930d      	str	r3, [sp, #52]	; 0x34
 80199d4:	f000 fcde 	bl	801a394 <__pow5mult>
 80199d8:	462a      	mov	r2, r5
 80199da:	4601      	mov	r1, r0
 80199dc:	4607      	mov	r7, r0
 80199de:	4630      	mov	r0, r6
 80199e0:	f000 fc2e 	bl	801a240 <__multiply>
 80199e4:	4629      	mov	r1, r5
 80199e6:	9009      	str	r0, [sp, #36]	; 0x24
 80199e8:	4630      	mov	r0, r6
 80199ea:	f000 fb5d 	bl	801a0a8 <_Bfree>
 80199ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199f2:	4615      	mov	r5, r2
 80199f4:	1b1a      	subs	r2, r3, r4
 80199f6:	d004      	beq.n	8019a02 <_dtoa_r+0x6b2>
 80199f8:	4629      	mov	r1, r5
 80199fa:	4630      	mov	r0, r6
 80199fc:	f000 fcca 	bl	801a394 <__pow5mult>
 8019a00:	4605      	mov	r5, r0
 8019a02:	2101      	movs	r1, #1
 8019a04:	4630      	mov	r0, r6
 8019a06:	f000 fc05 	bl	801a214 <__i2b>
 8019a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	4604      	mov	r4, r0
 8019a10:	f340 8081 	ble.w	8019b16 <_dtoa_r+0x7c6>
 8019a14:	461a      	mov	r2, r3
 8019a16:	4601      	mov	r1, r0
 8019a18:	4630      	mov	r0, r6
 8019a1a:	f000 fcbb 	bl	801a394 <__pow5mult>
 8019a1e:	9b06      	ldr	r3, [sp, #24]
 8019a20:	2b01      	cmp	r3, #1
 8019a22:	4604      	mov	r4, r0
 8019a24:	dd7a      	ble.n	8019b1c <_dtoa_r+0x7cc>
 8019a26:	2300      	movs	r3, #0
 8019a28:	9309      	str	r3, [sp, #36]	; 0x24
 8019a2a:	6922      	ldr	r2, [r4, #16]
 8019a2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019a30:	6910      	ldr	r0, [r2, #16]
 8019a32:	f000 fba1 	bl	801a178 <__hi0bits>
 8019a36:	f1c0 0020 	rsb	r0, r0, #32
 8019a3a:	9b05      	ldr	r3, [sp, #20]
 8019a3c:	4418      	add	r0, r3
 8019a3e:	f010 001f 	ands.w	r0, r0, #31
 8019a42:	f000 8093 	beq.w	8019b6c <_dtoa_r+0x81c>
 8019a46:	f1c0 0220 	rsb	r2, r0, #32
 8019a4a:	2a04      	cmp	r2, #4
 8019a4c:	f340 8085 	ble.w	8019b5a <_dtoa_r+0x80a>
 8019a50:	9b04      	ldr	r3, [sp, #16]
 8019a52:	f1c0 001c 	rsb	r0, r0, #28
 8019a56:	4403      	add	r3, r0
 8019a58:	9304      	str	r3, [sp, #16]
 8019a5a:	9b05      	ldr	r3, [sp, #20]
 8019a5c:	4480      	add	r8, r0
 8019a5e:	4403      	add	r3, r0
 8019a60:	9305      	str	r3, [sp, #20]
 8019a62:	9b04      	ldr	r3, [sp, #16]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	dd05      	ble.n	8019a74 <_dtoa_r+0x724>
 8019a68:	4629      	mov	r1, r5
 8019a6a:	461a      	mov	r2, r3
 8019a6c:	4630      	mov	r0, r6
 8019a6e:	f000 fceb 	bl	801a448 <__lshift>
 8019a72:	4605      	mov	r5, r0
 8019a74:	9b05      	ldr	r3, [sp, #20]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	dd05      	ble.n	8019a86 <_dtoa_r+0x736>
 8019a7a:	4621      	mov	r1, r4
 8019a7c:	461a      	mov	r2, r3
 8019a7e:	4630      	mov	r0, r6
 8019a80:	f000 fce2 	bl	801a448 <__lshift>
 8019a84:	4604      	mov	r4, r0
 8019a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d071      	beq.n	8019b70 <_dtoa_r+0x820>
 8019a8c:	4621      	mov	r1, r4
 8019a8e:	4628      	mov	r0, r5
 8019a90:	f000 fd46 	bl	801a520 <__mcmp>
 8019a94:	2800      	cmp	r0, #0
 8019a96:	da6b      	bge.n	8019b70 <_dtoa_r+0x820>
 8019a98:	2300      	movs	r3, #0
 8019a9a:	4629      	mov	r1, r5
 8019a9c:	220a      	movs	r2, #10
 8019a9e:	4630      	mov	r0, r6
 8019aa0:	f000 fb24 	bl	801a0ec <__multadd>
 8019aa4:	9b07      	ldr	r3, [sp, #28]
 8019aa6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019aaa:	4605      	mov	r5, r0
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	f000 8197 	beq.w	8019de0 <_dtoa_r+0xa90>
 8019ab2:	4639      	mov	r1, r7
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	220a      	movs	r2, #10
 8019ab8:	4630      	mov	r0, r6
 8019aba:	f000 fb17 	bl	801a0ec <__multadd>
 8019abe:	f1ba 0f00 	cmp.w	sl, #0
 8019ac2:	4607      	mov	r7, r0
 8019ac4:	f300 8093 	bgt.w	8019bee <_dtoa_r+0x89e>
 8019ac8:	9b06      	ldr	r3, [sp, #24]
 8019aca:	2b02      	cmp	r3, #2
 8019acc:	dc57      	bgt.n	8019b7e <_dtoa_r+0x82e>
 8019ace:	e08e      	b.n	8019bee <_dtoa_r+0x89e>
 8019ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ad2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019ad6:	e751      	b.n	801997c <_dtoa_r+0x62c>
 8019ad8:	f109 34ff 	add.w	r4, r9, #4294967295
 8019adc:	42a3      	cmp	r3, r4
 8019ade:	bfbf      	itttt	lt
 8019ae0:	1ae2      	sublt	r2, r4, r3
 8019ae2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8019ae4:	189b      	addlt	r3, r3, r2
 8019ae6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8019ae8:	bfae      	itee	ge
 8019aea:	1b1c      	subge	r4, r3, r4
 8019aec:	4623      	movlt	r3, r4
 8019aee:	2400      	movlt	r4, #0
 8019af0:	f1b9 0f00 	cmp.w	r9, #0
 8019af4:	bfb5      	itete	lt
 8019af6:	9a04      	ldrlt	r2, [sp, #16]
 8019af8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8019afc:	eba2 0809 	sublt.w	r8, r2, r9
 8019b00:	464a      	movge	r2, r9
 8019b02:	bfb8      	it	lt
 8019b04:	2200      	movlt	r2, #0
 8019b06:	e73c      	b.n	8019982 <_dtoa_r+0x632>
 8019b08:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019b0c:	9f07      	ldr	r7, [sp, #28]
 8019b0e:	461c      	mov	r4, r3
 8019b10:	e744      	b.n	801999c <_dtoa_r+0x64c>
 8019b12:	461a      	mov	r2, r3
 8019b14:	e770      	b.n	80199f8 <_dtoa_r+0x6a8>
 8019b16:	9b06      	ldr	r3, [sp, #24]
 8019b18:	2b01      	cmp	r3, #1
 8019b1a:	dc18      	bgt.n	8019b4e <_dtoa_r+0x7fe>
 8019b1c:	9b02      	ldr	r3, [sp, #8]
 8019b1e:	b9b3      	cbnz	r3, 8019b4e <_dtoa_r+0x7fe>
 8019b20:	9b03      	ldr	r3, [sp, #12]
 8019b22:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019b26:	b9a2      	cbnz	r2, 8019b52 <_dtoa_r+0x802>
 8019b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019b2c:	0d12      	lsrs	r2, r2, #20
 8019b2e:	0512      	lsls	r2, r2, #20
 8019b30:	b18a      	cbz	r2, 8019b56 <_dtoa_r+0x806>
 8019b32:	9b04      	ldr	r3, [sp, #16]
 8019b34:	3301      	adds	r3, #1
 8019b36:	9304      	str	r3, [sp, #16]
 8019b38:	9b05      	ldr	r3, [sp, #20]
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	9305      	str	r3, [sp, #20]
 8019b3e:	2301      	movs	r3, #1
 8019b40:	9309      	str	r3, [sp, #36]	; 0x24
 8019b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	f47f af70 	bne.w	8019a2a <_dtoa_r+0x6da>
 8019b4a:	2001      	movs	r0, #1
 8019b4c:	e775      	b.n	8019a3a <_dtoa_r+0x6ea>
 8019b4e:	2300      	movs	r3, #0
 8019b50:	e7f6      	b.n	8019b40 <_dtoa_r+0x7f0>
 8019b52:	9b02      	ldr	r3, [sp, #8]
 8019b54:	e7f4      	b.n	8019b40 <_dtoa_r+0x7f0>
 8019b56:	9209      	str	r2, [sp, #36]	; 0x24
 8019b58:	e7f3      	b.n	8019b42 <_dtoa_r+0x7f2>
 8019b5a:	d082      	beq.n	8019a62 <_dtoa_r+0x712>
 8019b5c:	9b04      	ldr	r3, [sp, #16]
 8019b5e:	321c      	adds	r2, #28
 8019b60:	4413      	add	r3, r2
 8019b62:	9304      	str	r3, [sp, #16]
 8019b64:	9b05      	ldr	r3, [sp, #20]
 8019b66:	4490      	add	r8, r2
 8019b68:	4413      	add	r3, r2
 8019b6a:	e779      	b.n	8019a60 <_dtoa_r+0x710>
 8019b6c:	4602      	mov	r2, r0
 8019b6e:	e7f5      	b.n	8019b5c <_dtoa_r+0x80c>
 8019b70:	f1b9 0f00 	cmp.w	r9, #0
 8019b74:	dc36      	bgt.n	8019be4 <_dtoa_r+0x894>
 8019b76:	9b06      	ldr	r3, [sp, #24]
 8019b78:	2b02      	cmp	r3, #2
 8019b7a:	dd33      	ble.n	8019be4 <_dtoa_r+0x894>
 8019b7c:	46ca      	mov	sl, r9
 8019b7e:	f1ba 0f00 	cmp.w	sl, #0
 8019b82:	d10d      	bne.n	8019ba0 <_dtoa_r+0x850>
 8019b84:	4621      	mov	r1, r4
 8019b86:	4653      	mov	r3, sl
 8019b88:	2205      	movs	r2, #5
 8019b8a:	4630      	mov	r0, r6
 8019b8c:	f000 faae 	bl	801a0ec <__multadd>
 8019b90:	4601      	mov	r1, r0
 8019b92:	4604      	mov	r4, r0
 8019b94:	4628      	mov	r0, r5
 8019b96:	f000 fcc3 	bl	801a520 <__mcmp>
 8019b9a:	2800      	cmp	r0, #0
 8019b9c:	f73f ade4 	bgt.w	8019768 <_dtoa_r+0x418>
 8019ba0:	9b08      	ldr	r3, [sp, #32]
 8019ba2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019ba6:	ea6f 0b03 	mvn.w	fp, r3
 8019baa:	f04f 0900 	mov.w	r9, #0
 8019bae:	4621      	mov	r1, r4
 8019bb0:	4630      	mov	r0, r6
 8019bb2:	f000 fa79 	bl	801a0a8 <_Bfree>
 8019bb6:	2f00      	cmp	r7, #0
 8019bb8:	f43f aea1 	beq.w	80198fe <_dtoa_r+0x5ae>
 8019bbc:	f1b9 0f00 	cmp.w	r9, #0
 8019bc0:	d005      	beq.n	8019bce <_dtoa_r+0x87e>
 8019bc2:	45b9      	cmp	r9, r7
 8019bc4:	d003      	beq.n	8019bce <_dtoa_r+0x87e>
 8019bc6:	4649      	mov	r1, r9
 8019bc8:	4630      	mov	r0, r6
 8019bca:	f000 fa6d 	bl	801a0a8 <_Bfree>
 8019bce:	4639      	mov	r1, r7
 8019bd0:	4630      	mov	r0, r6
 8019bd2:	f000 fa69 	bl	801a0a8 <_Bfree>
 8019bd6:	e692      	b.n	80198fe <_dtoa_r+0x5ae>
 8019bd8:	2400      	movs	r4, #0
 8019bda:	4627      	mov	r7, r4
 8019bdc:	e7e0      	b.n	8019ba0 <_dtoa_r+0x850>
 8019bde:	4693      	mov	fp, r2
 8019be0:	4627      	mov	r7, r4
 8019be2:	e5c1      	b.n	8019768 <_dtoa_r+0x418>
 8019be4:	9b07      	ldr	r3, [sp, #28]
 8019be6:	46ca      	mov	sl, r9
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	f000 8100 	beq.w	8019dee <_dtoa_r+0xa9e>
 8019bee:	f1b8 0f00 	cmp.w	r8, #0
 8019bf2:	dd05      	ble.n	8019c00 <_dtoa_r+0x8b0>
 8019bf4:	4639      	mov	r1, r7
 8019bf6:	4642      	mov	r2, r8
 8019bf8:	4630      	mov	r0, r6
 8019bfa:	f000 fc25 	bl	801a448 <__lshift>
 8019bfe:	4607      	mov	r7, r0
 8019c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d05d      	beq.n	8019cc2 <_dtoa_r+0x972>
 8019c06:	6879      	ldr	r1, [r7, #4]
 8019c08:	4630      	mov	r0, r6
 8019c0a:	f000 fa0d 	bl	801a028 <_Balloc>
 8019c0e:	4680      	mov	r8, r0
 8019c10:	b928      	cbnz	r0, 8019c1e <_dtoa_r+0x8ce>
 8019c12:	4b82      	ldr	r3, [pc, #520]	; (8019e1c <_dtoa_r+0xacc>)
 8019c14:	4602      	mov	r2, r0
 8019c16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019c1a:	f7ff bbb1 	b.w	8019380 <_dtoa_r+0x30>
 8019c1e:	693a      	ldr	r2, [r7, #16]
 8019c20:	3202      	adds	r2, #2
 8019c22:	0092      	lsls	r2, r2, #2
 8019c24:	f107 010c 	add.w	r1, r7, #12
 8019c28:	300c      	adds	r0, #12
 8019c2a:	f7ff fadd 	bl	80191e8 <memcpy>
 8019c2e:	2201      	movs	r2, #1
 8019c30:	4641      	mov	r1, r8
 8019c32:	4630      	mov	r0, r6
 8019c34:	f000 fc08 	bl	801a448 <__lshift>
 8019c38:	9b01      	ldr	r3, [sp, #4]
 8019c3a:	3301      	adds	r3, #1
 8019c3c:	9304      	str	r3, [sp, #16]
 8019c3e:	9b01      	ldr	r3, [sp, #4]
 8019c40:	4453      	add	r3, sl
 8019c42:	9308      	str	r3, [sp, #32]
 8019c44:	9b02      	ldr	r3, [sp, #8]
 8019c46:	f003 0301 	and.w	r3, r3, #1
 8019c4a:	46b9      	mov	r9, r7
 8019c4c:	9307      	str	r3, [sp, #28]
 8019c4e:	4607      	mov	r7, r0
 8019c50:	9b04      	ldr	r3, [sp, #16]
 8019c52:	4621      	mov	r1, r4
 8019c54:	3b01      	subs	r3, #1
 8019c56:	4628      	mov	r0, r5
 8019c58:	9302      	str	r3, [sp, #8]
 8019c5a:	f7ff faf1 	bl	8019240 <quorem>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	3330      	adds	r3, #48	; 0x30
 8019c62:	9005      	str	r0, [sp, #20]
 8019c64:	4649      	mov	r1, r9
 8019c66:	4628      	mov	r0, r5
 8019c68:	9309      	str	r3, [sp, #36]	; 0x24
 8019c6a:	f000 fc59 	bl	801a520 <__mcmp>
 8019c6e:	463a      	mov	r2, r7
 8019c70:	4682      	mov	sl, r0
 8019c72:	4621      	mov	r1, r4
 8019c74:	4630      	mov	r0, r6
 8019c76:	f000 fc6f 	bl	801a558 <__mdiff>
 8019c7a:	68c2      	ldr	r2, [r0, #12]
 8019c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c7e:	4680      	mov	r8, r0
 8019c80:	bb0a      	cbnz	r2, 8019cc6 <_dtoa_r+0x976>
 8019c82:	4601      	mov	r1, r0
 8019c84:	4628      	mov	r0, r5
 8019c86:	f000 fc4b 	bl	801a520 <__mcmp>
 8019c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c8c:	4602      	mov	r2, r0
 8019c8e:	4641      	mov	r1, r8
 8019c90:	4630      	mov	r0, r6
 8019c92:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8019c96:	f000 fa07 	bl	801a0a8 <_Bfree>
 8019c9a:	9b06      	ldr	r3, [sp, #24]
 8019c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c9e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019ca2:	ea43 0102 	orr.w	r1, r3, r2
 8019ca6:	9b07      	ldr	r3, [sp, #28]
 8019ca8:	4319      	orrs	r1, r3
 8019caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cac:	d10d      	bne.n	8019cca <_dtoa_r+0x97a>
 8019cae:	2b39      	cmp	r3, #57	; 0x39
 8019cb0:	d029      	beq.n	8019d06 <_dtoa_r+0x9b6>
 8019cb2:	f1ba 0f00 	cmp.w	sl, #0
 8019cb6:	dd01      	ble.n	8019cbc <_dtoa_r+0x96c>
 8019cb8:	9b05      	ldr	r3, [sp, #20]
 8019cba:	3331      	adds	r3, #49	; 0x31
 8019cbc:	9a02      	ldr	r2, [sp, #8]
 8019cbe:	7013      	strb	r3, [r2, #0]
 8019cc0:	e775      	b.n	8019bae <_dtoa_r+0x85e>
 8019cc2:	4638      	mov	r0, r7
 8019cc4:	e7b8      	b.n	8019c38 <_dtoa_r+0x8e8>
 8019cc6:	2201      	movs	r2, #1
 8019cc8:	e7e1      	b.n	8019c8e <_dtoa_r+0x93e>
 8019cca:	f1ba 0f00 	cmp.w	sl, #0
 8019cce:	db06      	blt.n	8019cde <_dtoa_r+0x98e>
 8019cd0:	9906      	ldr	r1, [sp, #24]
 8019cd2:	ea41 0a0a 	orr.w	sl, r1, sl
 8019cd6:	9907      	ldr	r1, [sp, #28]
 8019cd8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8019cdc:	d120      	bne.n	8019d20 <_dtoa_r+0x9d0>
 8019cde:	2a00      	cmp	r2, #0
 8019ce0:	ddec      	ble.n	8019cbc <_dtoa_r+0x96c>
 8019ce2:	4629      	mov	r1, r5
 8019ce4:	2201      	movs	r2, #1
 8019ce6:	4630      	mov	r0, r6
 8019ce8:	9304      	str	r3, [sp, #16]
 8019cea:	f000 fbad 	bl	801a448 <__lshift>
 8019cee:	4621      	mov	r1, r4
 8019cf0:	4605      	mov	r5, r0
 8019cf2:	f000 fc15 	bl	801a520 <__mcmp>
 8019cf6:	2800      	cmp	r0, #0
 8019cf8:	9b04      	ldr	r3, [sp, #16]
 8019cfa:	dc02      	bgt.n	8019d02 <_dtoa_r+0x9b2>
 8019cfc:	d1de      	bne.n	8019cbc <_dtoa_r+0x96c>
 8019cfe:	07da      	lsls	r2, r3, #31
 8019d00:	d5dc      	bpl.n	8019cbc <_dtoa_r+0x96c>
 8019d02:	2b39      	cmp	r3, #57	; 0x39
 8019d04:	d1d8      	bne.n	8019cb8 <_dtoa_r+0x968>
 8019d06:	9a02      	ldr	r2, [sp, #8]
 8019d08:	2339      	movs	r3, #57	; 0x39
 8019d0a:	7013      	strb	r3, [r2, #0]
 8019d0c:	4643      	mov	r3, r8
 8019d0e:	4698      	mov	r8, r3
 8019d10:	3b01      	subs	r3, #1
 8019d12:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8019d16:	2a39      	cmp	r2, #57	; 0x39
 8019d18:	d051      	beq.n	8019dbe <_dtoa_r+0xa6e>
 8019d1a:	3201      	adds	r2, #1
 8019d1c:	701a      	strb	r2, [r3, #0]
 8019d1e:	e746      	b.n	8019bae <_dtoa_r+0x85e>
 8019d20:	2a00      	cmp	r2, #0
 8019d22:	dd03      	ble.n	8019d2c <_dtoa_r+0x9dc>
 8019d24:	2b39      	cmp	r3, #57	; 0x39
 8019d26:	d0ee      	beq.n	8019d06 <_dtoa_r+0x9b6>
 8019d28:	3301      	adds	r3, #1
 8019d2a:	e7c7      	b.n	8019cbc <_dtoa_r+0x96c>
 8019d2c:	9a04      	ldr	r2, [sp, #16]
 8019d2e:	9908      	ldr	r1, [sp, #32]
 8019d30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019d34:	428a      	cmp	r2, r1
 8019d36:	d02b      	beq.n	8019d90 <_dtoa_r+0xa40>
 8019d38:	4629      	mov	r1, r5
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	220a      	movs	r2, #10
 8019d3e:	4630      	mov	r0, r6
 8019d40:	f000 f9d4 	bl	801a0ec <__multadd>
 8019d44:	45b9      	cmp	r9, r7
 8019d46:	4605      	mov	r5, r0
 8019d48:	f04f 0300 	mov.w	r3, #0
 8019d4c:	f04f 020a 	mov.w	r2, #10
 8019d50:	4649      	mov	r1, r9
 8019d52:	4630      	mov	r0, r6
 8019d54:	d107      	bne.n	8019d66 <_dtoa_r+0xa16>
 8019d56:	f000 f9c9 	bl	801a0ec <__multadd>
 8019d5a:	4681      	mov	r9, r0
 8019d5c:	4607      	mov	r7, r0
 8019d5e:	9b04      	ldr	r3, [sp, #16]
 8019d60:	3301      	adds	r3, #1
 8019d62:	9304      	str	r3, [sp, #16]
 8019d64:	e774      	b.n	8019c50 <_dtoa_r+0x900>
 8019d66:	f000 f9c1 	bl	801a0ec <__multadd>
 8019d6a:	4639      	mov	r1, r7
 8019d6c:	4681      	mov	r9, r0
 8019d6e:	2300      	movs	r3, #0
 8019d70:	220a      	movs	r2, #10
 8019d72:	4630      	mov	r0, r6
 8019d74:	f000 f9ba 	bl	801a0ec <__multadd>
 8019d78:	4607      	mov	r7, r0
 8019d7a:	e7f0      	b.n	8019d5e <_dtoa_r+0xa0e>
 8019d7c:	f1ba 0f00 	cmp.w	sl, #0
 8019d80:	9a01      	ldr	r2, [sp, #4]
 8019d82:	bfcc      	ite	gt
 8019d84:	46d0      	movgt	r8, sl
 8019d86:	f04f 0801 	movle.w	r8, #1
 8019d8a:	4490      	add	r8, r2
 8019d8c:	f04f 0900 	mov.w	r9, #0
 8019d90:	4629      	mov	r1, r5
 8019d92:	2201      	movs	r2, #1
 8019d94:	4630      	mov	r0, r6
 8019d96:	9302      	str	r3, [sp, #8]
 8019d98:	f000 fb56 	bl	801a448 <__lshift>
 8019d9c:	4621      	mov	r1, r4
 8019d9e:	4605      	mov	r5, r0
 8019da0:	f000 fbbe 	bl	801a520 <__mcmp>
 8019da4:	2800      	cmp	r0, #0
 8019da6:	dcb1      	bgt.n	8019d0c <_dtoa_r+0x9bc>
 8019da8:	d102      	bne.n	8019db0 <_dtoa_r+0xa60>
 8019daa:	9b02      	ldr	r3, [sp, #8]
 8019dac:	07db      	lsls	r3, r3, #31
 8019dae:	d4ad      	bmi.n	8019d0c <_dtoa_r+0x9bc>
 8019db0:	4643      	mov	r3, r8
 8019db2:	4698      	mov	r8, r3
 8019db4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019db8:	2a30      	cmp	r2, #48	; 0x30
 8019dba:	d0fa      	beq.n	8019db2 <_dtoa_r+0xa62>
 8019dbc:	e6f7      	b.n	8019bae <_dtoa_r+0x85e>
 8019dbe:	9a01      	ldr	r2, [sp, #4]
 8019dc0:	429a      	cmp	r2, r3
 8019dc2:	d1a4      	bne.n	8019d0e <_dtoa_r+0x9be>
 8019dc4:	f10b 0b01 	add.w	fp, fp, #1
 8019dc8:	2331      	movs	r3, #49	; 0x31
 8019dca:	e778      	b.n	8019cbe <_dtoa_r+0x96e>
 8019dcc:	4b14      	ldr	r3, [pc, #80]	; (8019e20 <_dtoa_r+0xad0>)
 8019dce:	f7ff bb2a 	b.w	8019426 <_dtoa_r+0xd6>
 8019dd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	f47f ab05 	bne.w	80193e4 <_dtoa_r+0x94>
 8019dda:	4b12      	ldr	r3, [pc, #72]	; (8019e24 <_dtoa_r+0xad4>)
 8019ddc:	f7ff bb23 	b.w	8019426 <_dtoa_r+0xd6>
 8019de0:	f1ba 0f00 	cmp.w	sl, #0
 8019de4:	dc03      	bgt.n	8019dee <_dtoa_r+0xa9e>
 8019de6:	9b06      	ldr	r3, [sp, #24]
 8019de8:	2b02      	cmp	r3, #2
 8019dea:	f73f aec8 	bgt.w	8019b7e <_dtoa_r+0x82e>
 8019dee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019df2:	4621      	mov	r1, r4
 8019df4:	4628      	mov	r0, r5
 8019df6:	f7ff fa23 	bl	8019240 <quorem>
 8019dfa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019dfe:	f808 3b01 	strb.w	r3, [r8], #1
 8019e02:	9a01      	ldr	r2, [sp, #4]
 8019e04:	eba8 0202 	sub.w	r2, r8, r2
 8019e08:	4592      	cmp	sl, r2
 8019e0a:	ddb7      	ble.n	8019d7c <_dtoa_r+0xa2c>
 8019e0c:	4629      	mov	r1, r5
 8019e0e:	2300      	movs	r3, #0
 8019e10:	220a      	movs	r2, #10
 8019e12:	4630      	mov	r0, r6
 8019e14:	f000 f96a 	bl	801a0ec <__multadd>
 8019e18:	4605      	mov	r5, r0
 8019e1a:	e7ea      	b.n	8019df2 <_dtoa_r+0xaa2>
 8019e1c:	0801e1df 	.word	0x0801e1df
 8019e20:	0801e11a 	.word	0x0801e11a
 8019e24:	0801e17a 	.word	0x0801e17a

08019e28 <_free_r>:
 8019e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e2a:	2900      	cmp	r1, #0
 8019e2c:	d044      	beq.n	8019eb8 <_free_r+0x90>
 8019e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e32:	9001      	str	r0, [sp, #4]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	f1a1 0404 	sub.w	r4, r1, #4
 8019e3a:	bfb8      	it	lt
 8019e3c:	18e4      	addlt	r4, r4, r3
 8019e3e:	f000 f8e7 	bl	801a010 <__malloc_lock>
 8019e42:	4a1e      	ldr	r2, [pc, #120]	; (8019ebc <_free_r+0x94>)
 8019e44:	9801      	ldr	r0, [sp, #4]
 8019e46:	6813      	ldr	r3, [r2, #0]
 8019e48:	b933      	cbnz	r3, 8019e58 <_free_r+0x30>
 8019e4a:	6063      	str	r3, [r4, #4]
 8019e4c:	6014      	str	r4, [r2, #0]
 8019e4e:	b003      	add	sp, #12
 8019e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e54:	f000 b8e2 	b.w	801a01c <__malloc_unlock>
 8019e58:	42a3      	cmp	r3, r4
 8019e5a:	d908      	bls.n	8019e6e <_free_r+0x46>
 8019e5c:	6825      	ldr	r5, [r4, #0]
 8019e5e:	1961      	adds	r1, r4, r5
 8019e60:	428b      	cmp	r3, r1
 8019e62:	bf01      	itttt	eq
 8019e64:	6819      	ldreq	r1, [r3, #0]
 8019e66:	685b      	ldreq	r3, [r3, #4]
 8019e68:	1949      	addeq	r1, r1, r5
 8019e6a:	6021      	streq	r1, [r4, #0]
 8019e6c:	e7ed      	b.n	8019e4a <_free_r+0x22>
 8019e6e:	461a      	mov	r2, r3
 8019e70:	685b      	ldr	r3, [r3, #4]
 8019e72:	b10b      	cbz	r3, 8019e78 <_free_r+0x50>
 8019e74:	42a3      	cmp	r3, r4
 8019e76:	d9fa      	bls.n	8019e6e <_free_r+0x46>
 8019e78:	6811      	ldr	r1, [r2, #0]
 8019e7a:	1855      	adds	r5, r2, r1
 8019e7c:	42a5      	cmp	r5, r4
 8019e7e:	d10b      	bne.n	8019e98 <_free_r+0x70>
 8019e80:	6824      	ldr	r4, [r4, #0]
 8019e82:	4421      	add	r1, r4
 8019e84:	1854      	adds	r4, r2, r1
 8019e86:	42a3      	cmp	r3, r4
 8019e88:	6011      	str	r1, [r2, #0]
 8019e8a:	d1e0      	bne.n	8019e4e <_free_r+0x26>
 8019e8c:	681c      	ldr	r4, [r3, #0]
 8019e8e:	685b      	ldr	r3, [r3, #4]
 8019e90:	6053      	str	r3, [r2, #4]
 8019e92:	440c      	add	r4, r1
 8019e94:	6014      	str	r4, [r2, #0]
 8019e96:	e7da      	b.n	8019e4e <_free_r+0x26>
 8019e98:	d902      	bls.n	8019ea0 <_free_r+0x78>
 8019e9a:	230c      	movs	r3, #12
 8019e9c:	6003      	str	r3, [r0, #0]
 8019e9e:	e7d6      	b.n	8019e4e <_free_r+0x26>
 8019ea0:	6825      	ldr	r5, [r4, #0]
 8019ea2:	1961      	adds	r1, r4, r5
 8019ea4:	428b      	cmp	r3, r1
 8019ea6:	bf04      	itt	eq
 8019ea8:	6819      	ldreq	r1, [r3, #0]
 8019eaa:	685b      	ldreq	r3, [r3, #4]
 8019eac:	6063      	str	r3, [r4, #4]
 8019eae:	bf04      	itt	eq
 8019eb0:	1949      	addeq	r1, r1, r5
 8019eb2:	6021      	streq	r1, [r4, #0]
 8019eb4:	6054      	str	r4, [r2, #4]
 8019eb6:	e7ca      	b.n	8019e4e <_free_r+0x26>
 8019eb8:	b003      	add	sp, #12
 8019eba:	bd30      	pop	{r4, r5, pc}
 8019ebc:	20008298 	.word	0x20008298

08019ec0 <malloc>:
 8019ec0:	4b02      	ldr	r3, [pc, #8]	; (8019ecc <malloc+0xc>)
 8019ec2:	4601      	mov	r1, r0
 8019ec4:	6818      	ldr	r0, [r3, #0]
 8019ec6:	f000 b823 	b.w	8019f10 <_malloc_r>
 8019eca:	bf00      	nop
 8019ecc:	200000b8 	.word	0x200000b8

08019ed0 <sbrk_aligned>:
 8019ed0:	b570      	push	{r4, r5, r6, lr}
 8019ed2:	4e0e      	ldr	r6, [pc, #56]	; (8019f0c <sbrk_aligned+0x3c>)
 8019ed4:	460c      	mov	r4, r1
 8019ed6:	6831      	ldr	r1, [r6, #0]
 8019ed8:	4605      	mov	r5, r0
 8019eda:	b911      	cbnz	r1, 8019ee2 <sbrk_aligned+0x12>
 8019edc:	f000 fea8 	bl	801ac30 <_sbrk_r>
 8019ee0:	6030      	str	r0, [r6, #0]
 8019ee2:	4621      	mov	r1, r4
 8019ee4:	4628      	mov	r0, r5
 8019ee6:	f000 fea3 	bl	801ac30 <_sbrk_r>
 8019eea:	1c43      	adds	r3, r0, #1
 8019eec:	d00a      	beq.n	8019f04 <sbrk_aligned+0x34>
 8019eee:	1cc4      	adds	r4, r0, #3
 8019ef0:	f024 0403 	bic.w	r4, r4, #3
 8019ef4:	42a0      	cmp	r0, r4
 8019ef6:	d007      	beq.n	8019f08 <sbrk_aligned+0x38>
 8019ef8:	1a21      	subs	r1, r4, r0
 8019efa:	4628      	mov	r0, r5
 8019efc:	f000 fe98 	bl	801ac30 <_sbrk_r>
 8019f00:	3001      	adds	r0, #1
 8019f02:	d101      	bne.n	8019f08 <sbrk_aligned+0x38>
 8019f04:	f04f 34ff 	mov.w	r4, #4294967295
 8019f08:	4620      	mov	r0, r4
 8019f0a:	bd70      	pop	{r4, r5, r6, pc}
 8019f0c:	2000829c 	.word	0x2000829c

08019f10 <_malloc_r>:
 8019f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f14:	1ccd      	adds	r5, r1, #3
 8019f16:	f025 0503 	bic.w	r5, r5, #3
 8019f1a:	3508      	adds	r5, #8
 8019f1c:	2d0c      	cmp	r5, #12
 8019f1e:	bf38      	it	cc
 8019f20:	250c      	movcc	r5, #12
 8019f22:	2d00      	cmp	r5, #0
 8019f24:	4607      	mov	r7, r0
 8019f26:	db01      	blt.n	8019f2c <_malloc_r+0x1c>
 8019f28:	42a9      	cmp	r1, r5
 8019f2a:	d905      	bls.n	8019f38 <_malloc_r+0x28>
 8019f2c:	230c      	movs	r3, #12
 8019f2e:	603b      	str	r3, [r7, #0]
 8019f30:	2600      	movs	r6, #0
 8019f32:	4630      	mov	r0, r6
 8019f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a00c <_malloc_r+0xfc>
 8019f3c:	f000 f868 	bl	801a010 <__malloc_lock>
 8019f40:	f8d8 3000 	ldr.w	r3, [r8]
 8019f44:	461c      	mov	r4, r3
 8019f46:	bb5c      	cbnz	r4, 8019fa0 <_malloc_r+0x90>
 8019f48:	4629      	mov	r1, r5
 8019f4a:	4638      	mov	r0, r7
 8019f4c:	f7ff ffc0 	bl	8019ed0 <sbrk_aligned>
 8019f50:	1c43      	adds	r3, r0, #1
 8019f52:	4604      	mov	r4, r0
 8019f54:	d155      	bne.n	801a002 <_malloc_r+0xf2>
 8019f56:	f8d8 4000 	ldr.w	r4, [r8]
 8019f5a:	4626      	mov	r6, r4
 8019f5c:	2e00      	cmp	r6, #0
 8019f5e:	d145      	bne.n	8019fec <_malloc_r+0xdc>
 8019f60:	2c00      	cmp	r4, #0
 8019f62:	d048      	beq.n	8019ff6 <_malloc_r+0xe6>
 8019f64:	6823      	ldr	r3, [r4, #0]
 8019f66:	4631      	mov	r1, r6
 8019f68:	4638      	mov	r0, r7
 8019f6a:	eb04 0903 	add.w	r9, r4, r3
 8019f6e:	f000 fe5f 	bl	801ac30 <_sbrk_r>
 8019f72:	4581      	cmp	r9, r0
 8019f74:	d13f      	bne.n	8019ff6 <_malloc_r+0xe6>
 8019f76:	6821      	ldr	r1, [r4, #0]
 8019f78:	1a6d      	subs	r5, r5, r1
 8019f7a:	4629      	mov	r1, r5
 8019f7c:	4638      	mov	r0, r7
 8019f7e:	f7ff ffa7 	bl	8019ed0 <sbrk_aligned>
 8019f82:	3001      	adds	r0, #1
 8019f84:	d037      	beq.n	8019ff6 <_malloc_r+0xe6>
 8019f86:	6823      	ldr	r3, [r4, #0]
 8019f88:	442b      	add	r3, r5
 8019f8a:	6023      	str	r3, [r4, #0]
 8019f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d038      	beq.n	801a006 <_malloc_r+0xf6>
 8019f94:	685a      	ldr	r2, [r3, #4]
 8019f96:	42a2      	cmp	r2, r4
 8019f98:	d12b      	bne.n	8019ff2 <_malloc_r+0xe2>
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	605a      	str	r2, [r3, #4]
 8019f9e:	e00f      	b.n	8019fc0 <_malloc_r+0xb0>
 8019fa0:	6822      	ldr	r2, [r4, #0]
 8019fa2:	1b52      	subs	r2, r2, r5
 8019fa4:	d41f      	bmi.n	8019fe6 <_malloc_r+0xd6>
 8019fa6:	2a0b      	cmp	r2, #11
 8019fa8:	d917      	bls.n	8019fda <_malloc_r+0xca>
 8019faa:	1961      	adds	r1, r4, r5
 8019fac:	42a3      	cmp	r3, r4
 8019fae:	6025      	str	r5, [r4, #0]
 8019fb0:	bf18      	it	ne
 8019fb2:	6059      	strne	r1, [r3, #4]
 8019fb4:	6863      	ldr	r3, [r4, #4]
 8019fb6:	bf08      	it	eq
 8019fb8:	f8c8 1000 	streq.w	r1, [r8]
 8019fbc:	5162      	str	r2, [r4, r5]
 8019fbe:	604b      	str	r3, [r1, #4]
 8019fc0:	4638      	mov	r0, r7
 8019fc2:	f104 060b 	add.w	r6, r4, #11
 8019fc6:	f000 f829 	bl	801a01c <__malloc_unlock>
 8019fca:	f026 0607 	bic.w	r6, r6, #7
 8019fce:	1d23      	adds	r3, r4, #4
 8019fd0:	1af2      	subs	r2, r6, r3
 8019fd2:	d0ae      	beq.n	8019f32 <_malloc_r+0x22>
 8019fd4:	1b9b      	subs	r3, r3, r6
 8019fd6:	50a3      	str	r3, [r4, r2]
 8019fd8:	e7ab      	b.n	8019f32 <_malloc_r+0x22>
 8019fda:	42a3      	cmp	r3, r4
 8019fdc:	6862      	ldr	r2, [r4, #4]
 8019fde:	d1dd      	bne.n	8019f9c <_malloc_r+0x8c>
 8019fe0:	f8c8 2000 	str.w	r2, [r8]
 8019fe4:	e7ec      	b.n	8019fc0 <_malloc_r+0xb0>
 8019fe6:	4623      	mov	r3, r4
 8019fe8:	6864      	ldr	r4, [r4, #4]
 8019fea:	e7ac      	b.n	8019f46 <_malloc_r+0x36>
 8019fec:	4634      	mov	r4, r6
 8019fee:	6876      	ldr	r6, [r6, #4]
 8019ff0:	e7b4      	b.n	8019f5c <_malloc_r+0x4c>
 8019ff2:	4613      	mov	r3, r2
 8019ff4:	e7cc      	b.n	8019f90 <_malloc_r+0x80>
 8019ff6:	230c      	movs	r3, #12
 8019ff8:	603b      	str	r3, [r7, #0]
 8019ffa:	4638      	mov	r0, r7
 8019ffc:	f000 f80e 	bl	801a01c <__malloc_unlock>
 801a000:	e797      	b.n	8019f32 <_malloc_r+0x22>
 801a002:	6025      	str	r5, [r4, #0]
 801a004:	e7dc      	b.n	8019fc0 <_malloc_r+0xb0>
 801a006:	605b      	str	r3, [r3, #4]
 801a008:	deff      	udf	#255	; 0xff
 801a00a:	bf00      	nop
 801a00c:	20008298 	.word	0x20008298

0801a010 <__malloc_lock>:
 801a010:	4801      	ldr	r0, [pc, #4]	; (801a018 <__malloc_lock+0x8>)
 801a012:	f7ff b8e7 	b.w	80191e4 <__retarget_lock_acquire_recursive>
 801a016:	bf00      	nop
 801a018:	20008294 	.word	0x20008294

0801a01c <__malloc_unlock>:
 801a01c:	4801      	ldr	r0, [pc, #4]	; (801a024 <__malloc_unlock+0x8>)
 801a01e:	f7ff b8e2 	b.w	80191e6 <__retarget_lock_release_recursive>
 801a022:	bf00      	nop
 801a024:	20008294 	.word	0x20008294

0801a028 <_Balloc>:
 801a028:	b570      	push	{r4, r5, r6, lr}
 801a02a:	69c6      	ldr	r6, [r0, #28]
 801a02c:	4604      	mov	r4, r0
 801a02e:	460d      	mov	r5, r1
 801a030:	b976      	cbnz	r6, 801a050 <_Balloc+0x28>
 801a032:	2010      	movs	r0, #16
 801a034:	f7ff ff44 	bl	8019ec0 <malloc>
 801a038:	4602      	mov	r2, r0
 801a03a:	61e0      	str	r0, [r4, #28]
 801a03c:	b920      	cbnz	r0, 801a048 <_Balloc+0x20>
 801a03e:	4b18      	ldr	r3, [pc, #96]	; (801a0a0 <_Balloc+0x78>)
 801a040:	4818      	ldr	r0, [pc, #96]	; (801a0a4 <_Balloc+0x7c>)
 801a042:	216b      	movs	r1, #107	; 0x6b
 801a044:	f7ff f8de 	bl	8019204 <__assert_func>
 801a048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a04c:	6006      	str	r6, [r0, #0]
 801a04e:	60c6      	str	r6, [r0, #12]
 801a050:	69e6      	ldr	r6, [r4, #28]
 801a052:	68f3      	ldr	r3, [r6, #12]
 801a054:	b183      	cbz	r3, 801a078 <_Balloc+0x50>
 801a056:	69e3      	ldr	r3, [r4, #28]
 801a058:	68db      	ldr	r3, [r3, #12]
 801a05a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a05e:	b9b8      	cbnz	r0, 801a090 <_Balloc+0x68>
 801a060:	2101      	movs	r1, #1
 801a062:	fa01 f605 	lsl.w	r6, r1, r5
 801a066:	1d72      	adds	r2, r6, #5
 801a068:	0092      	lsls	r2, r2, #2
 801a06a:	4620      	mov	r0, r4
 801a06c:	f000 fdf7 	bl	801ac5e <_calloc_r>
 801a070:	b160      	cbz	r0, 801a08c <_Balloc+0x64>
 801a072:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a076:	e00e      	b.n	801a096 <_Balloc+0x6e>
 801a078:	2221      	movs	r2, #33	; 0x21
 801a07a:	2104      	movs	r1, #4
 801a07c:	4620      	mov	r0, r4
 801a07e:	f000 fdee 	bl	801ac5e <_calloc_r>
 801a082:	69e3      	ldr	r3, [r4, #28]
 801a084:	60f0      	str	r0, [r6, #12]
 801a086:	68db      	ldr	r3, [r3, #12]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d1e4      	bne.n	801a056 <_Balloc+0x2e>
 801a08c:	2000      	movs	r0, #0
 801a08e:	bd70      	pop	{r4, r5, r6, pc}
 801a090:	6802      	ldr	r2, [r0, #0]
 801a092:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a096:	2300      	movs	r3, #0
 801a098:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a09c:	e7f7      	b.n	801a08e <_Balloc+0x66>
 801a09e:	bf00      	nop
 801a0a0:	0801df9a 	.word	0x0801df9a
 801a0a4:	0801e1f0 	.word	0x0801e1f0

0801a0a8 <_Bfree>:
 801a0a8:	b570      	push	{r4, r5, r6, lr}
 801a0aa:	69c6      	ldr	r6, [r0, #28]
 801a0ac:	4605      	mov	r5, r0
 801a0ae:	460c      	mov	r4, r1
 801a0b0:	b976      	cbnz	r6, 801a0d0 <_Bfree+0x28>
 801a0b2:	2010      	movs	r0, #16
 801a0b4:	f7ff ff04 	bl	8019ec0 <malloc>
 801a0b8:	4602      	mov	r2, r0
 801a0ba:	61e8      	str	r0, [r5, #28]
 801a0bc:	b920      	cbnz	r0, 801a0c8 <_Bfree+0x20>
 801a0be:	4b09      	ldr	r3, [pc, #36]	; (801a0e4 <_Bfree+0x3c>)
 801a0c0:	4809      	ldr	r0, [pc, #36]	; (801a0e8 <_Bfree+0x40>)
 801a0c2:	218f      	movs	r1, #143	; 0x8f
 801a0c4:	f7ff f89e 	bl	8019204 <__assert_func>
 801a0c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a0cc:	6006      	str	r6, [r0, #0]
 801a0ce:	60c6      	str	r6, [r0, #12]
 801a0d0:	b13c      	cbz	r4, 801a0e2 <_Bfree+0x3a>
 801a0d2:	69eb      	ldr	r3, [r5, #28]
 801a0d4:	6862      	ldr	r2, [r4, #4]
 801a0d6:	68db      	ldr	r3, [r3, #12]
 801a0d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a0dc:	6021      	str	r1, [r4, #0]
 801a0de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a0e2:	bd70      	pop	{r4, r5, r6, pc}
 801a0e4:	0801df9a 	.word	0x0801df9a
 801a0e8:	0801e1f0 	.word	0x0801e1f0

0801a0ec <__multadd>:
 801a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0f0:	690d      	ldr	r5, [r1, #16]
 801a0f2:	4607      	mov	r7, r0
 801a0f4:	460c      	mov	r4, r1
 801a0f6:	461e      	mov	r6, r3
 801a0f8:	f101 0c14 	add.w	ip, r1, #20
 801a0fc:	2000      	movs	r0, #0
 801a0fe:	f8dc 3000 	ldr.w	r3, [ip]
 801a102:	b299      	uxth	r1, r3
 801a104:	fb02 6101 	mla	r1, r2, r1, r6
 801a108:	0c1e      	lsrs	r6, r3, #16
 801a10a:	0c0b      	lsrs	r3, r1, #16
 801a10c:	fb02 3306 	mla	r3, r2, r6, r3
 801a110:	b289      	uxth	r1, r1
 801a112:	3001      	adds	r0, #1
 801a114:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a118:	4285      	cmp	r5, r0
 801a11a:	f84c 1b04 	str.w	r1, [ip], #4
 801a11e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a122:	dcec      	bgt.n	801a0fe <__multadd+0x12>
 801a124:	b30e      	cbz	r6, 801a16a <__multadd+0x7e>
 801a126:	68a3      	ldr	r3, [r4, #8]
 801a128:	42ab      	cmp	r3, r5
 801a12a:	dc19      	bgt.n	801a160 <__multadd+0x74>
 801a12c:	6861      	ldr	r1, [r4, #4]
 801a12e:	4638      	mov	r0, r7
 801a130:	3101      	adds	r1, #1
 801a132:	f7ff ff79 	bl	801a028 <_Balloc>
 801a136:	4680      	mov	r8, r0
 801a138:	b928      	cbnz	r0, 801a146 <__multadd+0x5a>
 801a13a:	4602      	mov	r2, r0
 801a13c:	4b0c      	ldr	r3, [pc, #48]	; (801a170 <__multadd+0x84>)
 801a13e:	480d      	ldr	r0, [pc, #52]	; (801a174 <__multadd+0x88>)
 801a140:	21ba      	movs	r1, #186	; 0xba
 801a142:	f7ff f85f 	bl	8019204 <__assert_func>
 801a146:	6922      	ldr	r2, [r4, #16]
 801a148:	3202      	adds	r2, #2
 801a14a:	f104 010c 	add.w	r1, r4, #12
 801a14e:	0092      	lsls	r2, r2, #2
 801a150:	300c      	adds	r0, #12
 801a152:	f7ff f849 	bl	80191e8 <memcpy>
 801a156:	4621      	mov	r1, r4
 801a158:	4638      	mov	r0, r7
 801a15a:	f7ff ffa5 	bl	801a0a8 <_Bfree>
 801a15e:	4644      	mov	r4, r8
 801a160:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a164:	3501      	adds	r5, #1
 801a166:	615e      	str	r6, [r3, #20]
 801a168:	6125      	str	r5, [r4, #16]
 801a16a:	4620      	mov	r0, r4
 801a16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a170:	0801e1df 	.word	0x0801e1df
 801a174:	0801e1f0 	.word	0x0801e1f0

0801a178 <__hi0bits>:
 801a178:	0c03      	lsrs	r3, r0, #16
 801a17a:	041b      	lsls	r3, r3, #16
 801a17c:	b9d3      	cbnz	r3, 801a1b4 <__hi0bits+0x3c>
 801a17e:	0400      	lsls	r0, r0, #16
 801a180:	2310      	movs	r3, #16
 801a182:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a186:	bf04      	itt	eq
 801a188:	0200      	lsleq	r0, r0, #8
 801a18a:	3308      	addeq	r3, #8
 801a18c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a190:	bf04      	itt	eq
 801a192:	0100      	lsleq	r0, r0, #4
 801a194:	3304      	addeq	r3, #4
 801a196:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a19a:	bf04      	itt	eq
 801a19c:	0080      	lsleq	r0, r0, #2
 801a19e:	3302      	addeq	r3, #2
 801a1a0:	2800      	cmp	r0, #0
 801a1a2:	db05      	blt.n	801a1b0 <__hi0bits+0x38>
 801a1a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a1a8:	f103 0301 	add.w	r3, r3, #1
 801a1ac:	bf08      	it	eq
 801a1ae:	2320      	moveq	r3, #32
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	4770      	bx	lr
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	e7e4      	b.n	801a182 <__hi0bits+0xa>

0801a1b8 <__lo0bits>:
 801a1b8:	6803      	ldr	r3, [r0, #0]
 801a1ba:	f013 0207 	ands.w	r2, r3, #7
 801a1be:	d00c      	beq.n	801a1da <__lo0bits+0x22>
 801a1c0:	07d9      	lsls	r1, r3, #31
 801a1c2:	d422      	bmi.n	801a20a <__lo0bits+0x52>
 801a1c4:	079a      	lsls	r2, r3, #30
 801a1c6:	bf49      	itett	mi
 801a1c8:	085b      	lsrmi	r3, r3, #1
 801a1ca:	089b      	lsrpl	r3, r3, #2
 801a1cc:	6003      	strmi	r3, [r0, #0]
 801a1ce:	2201      	movmi	r2, #1
 801a1d0:	bf5c      	itt	pl
 801a1d2:	6003      	strpl	r3, [r0, #0]
 801a1d4:	2202      	movpl	r2, #2
 801a1d6:	4610      	mov	r0, r2
 801a1d8:	4770      	bx	lr
 801a1da:	b299      	uxth	r1, r3
 801a1dc:	b909      	cbnz	r1, 801a1e2 <__lo0bits+0x2a>
 801a1de:	0c1b      	lsrs	r3, r3, #16
 801a1e0:	2210      	movs	r2, #16
 801a1e2:	b2d9      	uxtb	r1, r3
 801a1e4:	b909      	cbnz	r1, 801a1ea <__lo0bits+0x32>
 801a1e6:	3208      	adds	r2, #8
 801a1e8:	0a1b      	lsrs	r3, r3, #8
 801a1ea:	0719      	lsls	r1, r3, #28
 801a1ec:	bf04      	itt	eq
 801a1ee:	091b      	lsreq	r3, r3, #4
 801a1f0:	3204      	addeq	r2, #4
 801a1f2:	0799      	lsls	r1, r3, #30
 801a1f4:	bf04      	itt	eq
 801a1f6:	089b      	lsreq	r3, r3, #2
 801a1f8:	3202      	addeq	r2, #2
 801a1fa:	07d9      	lsls	r1, r3, #31
 801a1fc:	d403      	bmi.n	801a206 <__lo0bits+0x4e>
 801a1fe:	085b      	lsrs	r3, r3, #1
 801a200:	f102 0201 	add.w	r2, r2, #1
 801a204:	d003      	beq.n	801a20e <__lo0bits+0x56>
 801a206:	6003      	str	r3, [r0, #0]
 801a208:	e7e5      	b.n	801a1d6 <__lo0bits+0x1e>
 801a20a:	2200      	movs	r2, #0
 801a20c:	e7e3      	b.n	801a1d6 <__lo0bits+0x1e>
 801a20e:	2220      	movs	r2, #32
 801a210:	e7e1      	b.n	801a1d6 <__lo0bits+0x1e>
	...

0801a214 <__i2b>:
 801a214:	b510      	push	{r4, lr}
 801a216:	460c      	mov	r4, r1
 801a218:	2101      	movs	r1, #1
 801a21a:	f7ff ff05 	bl	801a028 <_Balloc>
 801a21e:	4602      	mov	r2, r0
 801a220:	b928      	cbnz	r0, 801a22e <__i2b+0x1a>
 801a222:	4b05      	ldr	r3, [pc, #20]	; (801a238 <__i2b+0x24>)
 801a224:	4805      	ldr	r0, [pc, #20]	; (801a23c <__i2b+0x28>)
 801a226:	f240 1145 	movw	r1, #325	; 0x145
 801a22a:	f7fe ffeb 	bl	8019204 <__assert_func>
 801a22e:	2301      	movs	r3, #1
 801a230:	6144      	str	r4, [r0, #20]
 801a232:	6103      	str	r3, [r0, #16]
 801a234:	bd10      	pop	{r4, pc}
 801a236:	bf00      	nop
 801a238:	0801e1df 	.word	0x0801e1df
 801a23c:	0801e1f0 	.word	0x0801e1f0

0801a240 <__multiply>:
 801a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a244:	4691      	mov	r9, r2
 801a246:	690a      	ldr	r2, [r1, #16]
 801a248:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a24c:	429a      	cmp	r2, r3
 801a24e:	bfb8      	it	lt
 801a250:	460b      	movlt	r3, r1
 801a252:	460c      	mov	r4, r1
 801a254:	bfbc      	itt	lt
 801a256:	464c      	movlt	r4, r9
 801a258:	4699      	movlt	r9, r3
 801a25a:	6927      	ldr	r7, [r4, #16]
 801a25c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a260:	68a3      	ldr	r3, [r4, #8]
 801a262:	6861      	ldr	r1, [r4, #4]
 801a264:	eb07 060a 	add.w	r6, r7, sl
 801a268:	42b3      	cmp	r3, r6
 801a26a:	b085      	sub	sp, #20
 801a26c:	bfb8      	it	lt
 801a26e:	3101      	addlt	r1, #1
 801a270:	f7ff feda 	bl	801a028 <_Balloc>
 801a274:	b930      	cbnz	r0, 801a284 <__multiply+0x44>
 801a276:	4602      	mov	r2, r0
 801a278:	4b44      	ldr	r3, [pc, #272]	; (801a38c <__multiply+0x14c>)
 801a27a:	4845      	ldr	r0, [pc, #276]	; (801a390 <__multiply+0x150>)
 801a27c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801a280:	f7fe ffc0 	bl	8019204 <__assert_func>
 801a284:	f100 0514 	add.w	r5, r0, #20
 801a288:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a28c:	462b      	mov	r3, r5
 801a28e:	2200      	movs	r2, #0
 801a290:	4543      	cmp	r3, r8
 801a292:	d321      	bcc.n	801a2d8 <__multiply+0x98>
 801a294:	f104 0314 	add.w	r3, r4, #20
 801a298:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a29c:	f109 0314 	add.w	r3, r9, #20
 801a2a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a2a4:	9202      	str	r2, [sp, #8]
 801a2a6:	1b3a      	subs	r2, r7, r4
 801a2a8:	3a15      	subs	r2, #21
 801a2aa:	f022 0203 	bic.w	r2, r2, #3
 801a2ae:	3204      	adds	r2, #4
 801a2b0:	f104 0115 	add.w	r1, r4, #21
 801a2b4:	428f      	cmp	r7, r1
 801a2b6:	bf38      	it	cc
 801a2b8:	2204      	movcc	r2, #4
 801a2ba:	9201      	str	r2, [sp, #4]
 801a2bc:	9a02      	ldr	r2, [sp, #8]
 801a2be:	9303      	str	r3, [sp, #12]
 801a2c0:	429a      	cmp	r2, r3
 801a2c2:	d80c      	bhi.n	801a2de <__multiply+0x9e>
 801a2c4:	2e00      	cmp	r6, #0
 801a2c6:	dd03      	ble.n	801a2d0 <__multiply+0x90>
 801a2c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d05b      	beq.n	801a388 <__multiply+0x148>
 801a2d0:	6106      	str	r6, [r0, #16]
 801a2d2:	b005      	add	sp, #20
 801a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2d8:	f843 2b04 	str.w	r2, [r3], #4
 801a2dc:	e7d8      	b.n	801a290 <__multiply+0x50>
 801a2de:	f8b3 a000 	ldrh.w	sl, [r3]
 801a2e2:	f1ba 0f00 	cmp.w	sl, #0
 801a2e6:	d024      	beq.n	801a332 <__multiply+0xf2>
 801a2e8:	f104 0e14 	add.w	lr, r4, #20
 801a2ec:	46a9      	mov	r9, r5
 801a2ee:	f04f 0c00 	mov.w	ip, #0
 801a2f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a2f6:	f8d9 1000 	ldr.w	r1, [r9]
 801a2fa:	fa1f fb82 	uxth.w	fp, r2
 801a2fe:	b289      	uxth	r1, r1
 801a300:	fb0a 110b 	mla	r1, sl, fp, r1
 801a304:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a308:	f8d9 2000 	ldr.w	r2, [r9]
 801a30c:	4461      	add	r1, ip
 801a30e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a312:	fb0a c20b 	mla	r2, sl, fp, ip
 801a316:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a31a:	b289      	uxth	r1, r1
 801a31c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a320:	4577      	cmp	r7, lr
 801a322:	f849 1b04 	str.w	r1, [r9], #4
 801a326:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a32a:	d8e2      	bhi.n	801a2f2 <__multiply+0xb2>
 801a32c:	9a01      	ldr	r2, [sp, #4]
 801a32e:	f845 c002 	str.w	ip, [r5, r2]
 801a332:	9a03      	ldr	r2, [sp, #12]
 801a334:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a338:	3304      	adds	r3, #4
 801a33a:	f1b9 0f00 	cmp.w	r9, #0
 801a33e:	d021      	beq.n	801a384 <__multiply+0x144>
 801a340:	6829      	ldr	r1, [r5, #0]
 801a342:	f104 0c14 	add.w	ip, r4, #20
 801a346:	46ae      	mov	lr, r5
 801a348:	f04f 0a00 	mov.w	sl, #0
 801a34c:	f8bc b000 	ldrh.w	fp, [ip]
 801a350:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a354:	fb09 220b 	mla	r2, r9, fp, r2
 801a358:	4452      	add	r2, sl
 801a35a:	b289      	uxth	r1, r1
 801a35c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a360:	f84e 1b04 	str.w	r1, [lr], #4
 801a364:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a368:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a36c:	f8be 1000 	ldrh.w	r1, [lr]
 801a370:	fb09 110a 	mla	r1, r9, sl, r1
 801a374:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a378:	4567      	cmp	r7, ip
 801a37a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a37e:	d8e5      	bhi.n	801a34c <__multiply+0x10c>
 801a380:	9a01      	ldr	r2, [sp, #4]
 801a382:	50a9      	str	r1, [r5, r2]
 801a384:	3504      	adds	r5, #4
 801a386:	e799      	b.n	801a2bc <__multiply+0x7c>
 801a388:	3e01      	subs	r6, #1
 801a38a:	e79b      	b.n	801a2c4 <__multiply+0x84>
 801a38c:	0801e1df 	.word	0x0801e1df
 801a390:	0801e1f0 	.word	0x0801e1f0

0801a394 <__pow5mult>:
 801a394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a398:	4615      	mov	r5, r2
 801a39a:	f012 0203 	ands.w	r2, r2, #3
 801a39e:	4606      	mov	r6, r0
 801a3a0:	460f      	mov	r7, r1
 801a3a2:	d007      	beq.n	801a3b4 <__pow5mult+0x20>
 801a3a4:	4c25      	ldr	r4, [pc, #148]	; (801a43c <__pow5mult+0xa8>)
 801a3a6:	3a01      	subs	r2, #1
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a3ae:	f7ff fe9d 	bl	801a0ec <__multadd>
 801a3b2:	4607      	mov	r7, r0
 801a3b4:	10ad      	asrs	r5, r5, #2
 801a3b6:	d03d      	beq.n	801a434 <__pow5mult+0xa0>
 801a3b8:	69f4      	ldr	r4, [r6, #28]
 801a3ba:	b97c      	cbnz	r4, 801a3dc <__pow5mult+0x48>
 801a3bc:	2010      	movs	r0, #16
 801a3be:	f7ff fd7f 	bl	8019ec0 <malloc>
 801a3c2:	4602      	mov	r2, r0
 801a3c4:	61f0      	str	r0, [r6, #28]
 801a3c6:	b928      	cbnz	r0, 801a3d4 <__pow5mult+0x40>
 801a3c8:	4b1d      	ldr	r3, [pc, #116]	; (801a440 <__pow5mult+0xac>)
 801a3ca:	481e      	ldr	r0, [pc, #120]	; (801a444 <__pow5mult+0xb0>)
 801a3cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a3d0:	f7fe ff18 	bl	8019204 <__assert_func>
 801a3d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a3d8:	6004      	str	r4, [r0, #0]
 801a3da:	60c4      	str	r4, [r0, #12]
 801a3dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a3e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a3e4:	b94c      	cbnz	r4, 801a3fa <__pow5mult+0x66>
 801a3e6:	f240 2171 	movw	r1, #625	; 0x271
 801a3ea:	4630      	mov	r0, r6
 801a3ec:	f7ff ff12 	bl	801a214 <__i2b>
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	f8c8 0008 	str.w	r0, [r8, #8]
 801a3f6:	4604      	mov	r4, r0
 801a3f8:	6003      	str	r3, [r0, #0]
 801a3fa:	f04f 0900 	mov.w	r9, #0
 801a3fe:	07eb      	lsls	r3, r5, #31
 801a400:	d50a      	bpl.n	801a418 <__pow5mult+0x84>
 801a402:	4639      	mov	r1, r7
 801a404:	4622      	mov	r2, r4
 801a406:	4630      	mov	r0, r6
 801a408:	f7ff ff1a 	bl	801a240 <__multiply>
 801a40c:	4639      	mov	r1, r7
 801a40e:	4680      	mov	r8, r0
 801a410:	4630      	mov	r0, r6
 801a412:	f7ff fe49 	bl	801a0a8 <_Bfree>
 801a416:	4647      	mov	r7, r8
 801a418:	106d      	asrs	r5, r5, #1
 801a41a:	d00b      	beq.n	801a434 <__pow5mult+0xa0>
 801a41c:	6820      	ldr	r0, [r4, #0]
 801a41e:	b938      	cbnz	r0, 801a430 <__pow5mult+0x9c>
 801a420:	4622      	mov	r2, r4
 801a422:	4621      	mov	r1, r4
 801a424:	4630      	mov	r0, r6
 801a426:	f7ff ff0b 	bl	801a240 <__multiply>
 801a42a:	6020      	str	r0, [r4, #0]
 801a42c:	f8c0 9000 	str.w	r9, [r0]
 801a430:	4604      	mov	r4, r0
 801a432:	e7e4      	b.n	801a3fe <__pow5mult+0x6a>
 801a434:	4638      	mov	r0, r7
 801a436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a43a:	bf00      	nop
 801a43c:	0801e340 	.word	0x0801e340
 801a440:	0801df9a 	.word	0x0801df9a
 801a444:	0801e1f0 	.word	0x0801e1f0

0801a448 <__lshift>:
 801a448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a44c:	460c      	mov	r4, r1
 801a44e:	6849      	ldr	r1, [r1, #4]
 801a450:	6923      	ldr	r3, [r4, #16]
 801a452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a456:	68a3      	ldr	r3, [r4, #8]
 801a458:	4607      	mov	r7, r0
 801a45a:	4691      	mov	r9, r2
 801a45c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a460:	f108 0601 	add.w	r6, r8, #1
 801a464:	42b3      	cmp	r3, r6
 801a466:	db0b      	blt.n	801a480 <__lshift+0x38>
 801a468:	4638      	mov	r0, r7
 801a46a:	f7ff fddd 	bl	801a028 <_Balloc>
 801a46e:	4605      	mov	r5, r0
 801a470:	b948      	cbnz	r0, 801a486 <__lshift+0x3e>
 801a472:	4602      	mov	r2, r0
 801a474:	4b28      	ldr	r3, [pc, #160]	; (801a518 <__lshift+0xd0>)
 801a476:	4829      	ldr	r0, [pc, #164]	; (801a51c <__lshift+0xd4>)
 801a478:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a47c:	f7fe fec2 	bl	8019204 <__assert_func>
 801a480:	3101      	adds	r1, #1
 801a482:	005b      	lsls	r3, r3, #1
 801a484:	e7ee      	b.n	801a464 <__lshift+0x1c>
 801a486:	2300      	movs	r3, #0
 801a488:	f100 0114 	add.w	r1, r0, #20
 801a48c:	f100 0210 	add.w	r2, r0, #16
 801a490:	4618      	mov	r0, r3
 801a492:	4553      	cmp	r3, sl
 801a494:	db33      	blt.n	801a4fe <__lshift+0xb6>
 801a496:	6920      	ldr	r0, [r4, #16]
 801a498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a49c:	f104 0314 	add.w	r3, r4, #20
 801a4a0:	f019 091f 	ands.w	r9, r9, #31
 801a4a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a4a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a4ac:	d02b      	beq.n	801a506 <__lshift+0xbe>
 801a4ae:	f1c9 0e20 	rsb	lr, r9, #32
 801a4b2:	468a      	mov	sl, r1
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	6818      	ldr	r0, [r3, #0]
 801a4b8:	fa00 f009 	lsl.w	r0, r0, r9
 801a4bc:	4310      	orrs	r0, r2
 801a4be:	f84a 0b04 	str.w	r0, [sl], #4
 801a4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4c6:	459c      	cmp	ip, r3
 801a4c8:	fa22 f20e 	lsr.w	r2, r2, lr
 801a4cc:	d8f3      	bhi.n	801a4b6 <__lshift+0x6e>
 801a4ce:	ebac 0304 	sub.w	r3, ip, r4
 801a4d2:	3b15      	subs	r3, #21
 801a4d4:	f023 0303 	bic.w	r3, r3, #3
 801a4d8:	3304      	adds	r3, #4
 801a4da:	f104 0015 	add.w	r0, r4, #21
 801a4de:	4584      	cmp	ip, r0
 801a4e0:	bf38      	it	cc
 801a4e2:	2304      	movcc	r3, #4
 801a4e4:	50ca      	str	r2, [r1, r3]
 801a4e6:	b10a      	cbz	r2, 801a4ec <__lshift+0xa4>
 801a4e8:	f108 0602 	add.w	r6, r8, #2
 801a4ec:	3e01      	subs	r6, #1
 801a4ee:	4638      	mov	r0, r7
 801a4f0:	612e      	str	r6, [r5, #16]
 801a4f2:	4621      	mov	r1, r4
 801a4f4:	f7ff fdd8 	bl	801a0a8 <_Bfree>
 801a4f8:	4628      	mov	r0, r5
 801a4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4fe:	f842 0f04 	str.w	r0, [r2, #4]!
 801a502:	3301      	adds	r3, #1
 801a504:	e7c5      	b.n	801a492 <__lshift+0x4a>
 801a506:	3904      	subs	r1, #4
 801a508:	f853 2b04 	ldr.w	r2, [r3], #4
 801a50c:	f841 2f04 	str.w	r2, [r1, #4]!
 801a510:	459c      	cmp	ip, r3
 801a512:	d8f9      	bhi.n	801a508 <__lshift+0xc0>
 801a514:	e7ea      	b.n	801a4ec <__lshift+0xa4>
 801a516:	bf00      	nop
 801a518:	0801e1df 	.word	0x0801e1df
 801a51c:	0801e1f0 	.word	0x0801e1f0

0801a520 <__mcmp>:
 801a520:	b530      	push	{r4, r5, lr}
 801a522:	6902      	ldr	r2, [r0, #16]
 801a524:	690c      	ldr	r4, [r1, #16]
 801a526:	1b12      	subs	r2, r2, r4
 801a528:	d10e      	bne.n	801a548 <__mcmp+0x28>
 801a52a:	f100 0314 	add.w	r3, r0, #20
 801a52e:	3114      	adds	r1, #20
 801a530:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a534:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a538:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a53c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a540:	42a5      	cmp	r5, r4
 801a542:	d003      	beq.n	801a54c <__mcmp+0x2c>
 801a544:	d305      	bcc.n	801a552 <__mcmp+0x32>
 801a546:	2201      	movs	r2, #1
 801a548:	4610      	mov	r0, r2
 801a54a:	bd30      	pop	{r4, r5, pc}
 801a54c:	4283      	cmp	r3, r0
 801a54e:	d3f3      	bcc.n	801a538 <__mcmp+0x18>
 801a550:	e7fa      	b.n	801a548 <__mcmp+0x28>
 801a552:	f04f 32ff 	mov.w	r2, #4294967295
 801a556:	e7f7      	b.n	801a548 <__mcmp+0x28>

0801a558 <__mdiff>:
 801a558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a55c:	460c      	mov	r4, r1
 801a55e:	4606      	mov	r6, r0
 801a560:	4611      	mov	r1, r2
 801a562:	4620      	mov	r0, r4
 801a564:	4690      	mov	r8, r2
 801a566:	f7ff ffdb 	bl	801a520 <__mcmp>
 801a56a:	1e05      	subs	r5, r0, #0
 801a56c:	d110      	bne.n	801a590 <__mdiff+0x38>
 801a56e:	4629      	mov	r1, r5
 801a570:	4630      	mov	r0, r6
 801a572:	f7ff fd59 	bl	801a028 <_Balloc>
 801a576:	b930      	cbnz	r0, 801a586 <__mdiff+0x2e>
 801a578:	4b3a      	ldr	r3, [pc, #232]	; (801a664 <__mdiff+0x10c>)
 801a57a:	4602      	mov	r2, r0
 801a57c:	f240 2137 	movw	r1, #567	; 0x237
 801a580:	4839      	ldr	r0, [pc, #228]	; (801a668 <__mdiff+0x110>)
 801a582:	f7fe fe3f 	bl	8019204 <__assert_func>
 801a586:	2301      	movs	r3, #1
 801a588:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a58c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a590:	bfa4      	itt	ge
 801a592:	4643      	movge	r3, r8
 801a594:	46a0      	movge	r8, r4
 801a596:	4630      	mov	r0, r6
 801a598:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a59c:	bfa6      	itte	ge
 801a59e:	461c      	movge	r4, r3
 801a5a0:	2500      	movge	r5, #0
 801a5a2:	2501      	movlt	r5, #1
 801a5a4:	f7ff fd40 	bl	801a028 <_Balloc>
 801a5a8:	b920      	cbnz	r0, 801a5b4 <__mdiff+0x5c>
 801a5aa:	4b2e      	ldr	r3, [pc, #184]	; (801a664 <__mdiff+0x10c>)
 801a5ac:	4602      	mov	r2, r0
 801a5ae:	f240 2145 	movw	r1, #581	; 0x245
 801a5b2:	e7e5      	b.n	801a580 <__mdiff+0x28>
 801a5b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a5b8:	6926      	ldr	r6, [r4, #16]
 801a5ba:	60c5      	str	r5, [r0, #12]
 801a5bc:	f104 0914 	add.w	r9, r4, #20
 801a5c0:	f108 0514 	add.w	r5, r8, #20
 801a5c4:	f100 0e14 	add.w	lr, r0, #20
 801a5c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a5cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a5d0:	f108 0210 	add.w	r2, r8, #16
 801a5d4:	46f2      	mov	sl, lr
 801a5d6:	2100      	movs	r1, #0
 801a5d8:	f859 3b04 	ldr.w	r3, [r9], #4
 801a5dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a5e0:	fa11 f88b 	uxtah	r8, r1, fp
 801a5e4:	b299      	uxth	r1, r3
 801a5e6:	0c1b      	lsrs	r3, r3, #16
 801a5e8:	eba8 0801 	sub.w	r8, r8, r1
 801a5ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a5f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a5f4:	fa1f f888 	uxth.w	r8, r8
 801a5f8:	1419      	asrs	r1, r3, #16
 801a5fa:	454e      	cmp	r6, r9
 801a5fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a600:	f84a 3b04 	str.w	r3, [sl], #4
 801a604:	d8e8      	bhi.n	801a5d8 <__mdiff+0x80>
 801a606:	1b33      	subs	r3, r6, r4
 801a608:	3b15      	subs	r3, #21
 801a60a:	f023 0303 	bic.w	r3, r3, #3
 801a60e:	3304      	adds	r3, #4
 801a610:	3415      	adds	r4, #21
 801a612:	42a6      	cmp	r6, r4
 801a614:	bf38      	it	cc
 801a616:	2304      	movcc	r3, #4
 801a618:	441d      	add	r5, r3
 801a61a:	4473      	add	r3, lr
 801a61c:	469e      	mov	lr, r3
 801a61e:	462e      	mov	r6, r5
 801a620:	4566      	cmp	r6, ip
 801a622:	d30e      	bcc.n	801a642 <__mdiff+0xea>
 801a624:	f10c 0203 	add.w	r2, ip, #3
 801a628:	1b52      	subs	r2, r2, r5
 801a62a:	f022 0203 	bic.w	r2, r2, #3
 801a62e:	3d03      	subs	r5, #3
 801a630:	45ac      	cmp	ip, r5
 801a632:	bf38      	it	cc
 801a634:	2200      	movcc	r2, #0
 801a636:	4413      	add	r3, r2
 801a638:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a63c:	b17a      	cbz	r2, 801a65e <__mdiff+0x106>
 801a63e:	6107      	str	r7, [r0, #16]
 801a640:	e7a4      	b.n	801a58c <__mdiff+0x34>
 801a642:	f856 8b04 	ldr.w	r8, [r6], #4
 801a646:	fa11 f288 	uxtah	r2, r1, r8
 801a64a:	1414      	asrs	r4, r2, #16
 801a64c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a650:	b292      	uxth	r2, r2
 801a652:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a656:	f84e 2b04 	str.w	r2, [lr], #4
 801a65a:	1421      	asrs	r1, r4, #16
 801a65c:	e7e0      	b.n	801a620 <__mdiff+0xc8>
 801a65e:	3f01      	subs	r7, #1
 801a660:	e7ea      	b.n	801a638 <__mdiff+0xe0>
 801a662:	bf00      	nop
 801a664:	0801e1df 	.word	0x0801e1df
 801a668:	0801e1f0 	.word	0x0801e1f0

0801a66c <__d2b>:
 801a66c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a670:	460f      	mov	r7, r1
 801a672:	2101      	movs	r1, #1
 801a674:	ec59 8b10 	vmov	r8, r9, d0
 801a678:	4616      	mov	r6, r2
 801a67a:	f7ff fcd5 	bl	801a028 <_Balloc>
 801a67e:	4604      	mov	r4, r0
 801a680:	b930      	cbnz	r0, 801a690 <__d2b+0x24>
 801a682:	4602      	mov	r2, r0
 801a684:	4b24      	ldr	r3, [pc, #144]	; (801a718 <__d2b+0xac>)
 801a686:	4825      	ldr	r0, [pc, #148]	; (801a71c <__d2b+0xb0>)
 801a688:	f240 310f 	movw	r1, #783	; 0x30f
 801a68c:	f7fe fdba 	bl	8019204 <__assert_func>
 801a690:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a698:	bb2d      	cbnz	r5, 801a6e6 <__d2b+0x7a>
 801a69a:	9301      	str	r3, [sp, #4]
 801a69c:	f1b8 0300 	subs.w	r3, r8, #0
 801a6a0:	d026      	beq.n	801a6f0 <__d2b+0x84>
 801a6a2:	4668      	mov	r0, sp
 801a6a4:	9300      	str	r3, [sp, #0]
 801a6a6:	f7ff fd87 	bl	801a1b8 <__lo0bits>
 801a6aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a6ae:	b1e8      	cbz	r0, 801a6ec <__d2b+0x80>
 801a6b0:	f1c0 0320 	rsb	r3, r0, #32
 801a6b4:	fa02 f303 	lsl.w	r3, r2, r3
 801a6b8:	430b      	orrs	r3, r1
 801a6ba:	40c2      	lsrs	r2, r0
 801a6bc:	6163      	str	r3, [r4, #20]
 801a6be:	9201      	str	r2, [sp, #4]
 801a6c0:	9b01      	ldr	r3, [sp, #4]
 801a6c2:	61a3      	str	r3, [r4, #24]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	bf14      	ite	ne
 801a6c8:	2202      	movne	r2, #2
 801a6ca:	2201      	moveq	r2, #1
 801a6cc:	6122      	str	r2, [r4, #16]
 801a6ce:	b1bd      	cbz	r5, 801a700 <__d2b+0x94>
 801a6d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a6d4:	4405      	add	r5, r0
 801a6d6:	603d      	str	r5, [r7, #0]
 801a6d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a6dc:	6030      	str	r0, [r6, #0]
 801a6de:	4620      	mov	r0, r4
 801a6e0:	b003      	add	sp, #12
 801a6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a6ea:	e7d6      	b.n	801a69a <__d2b+0x2e>
 801a6ec:	6161      	str	r1, [r4, #20]
 801a6ee:	e7e7      	b.n	801a6c0 <__d2b+0x54>
 801a6f0:	a801      	add	r0, sp, #4
 801a6f2:	f7ff fd61 	bl	801a1b8 <__lo0bits>
 801a6f6:	9b01      	ldr	r3, [sp, #4]
 801a6f8:	6163      	str	r3, [r4, #20]
 801a6fa:	3020      	adds	r0, #32
 801a6fc:	2201      	movs	r2, #1
 801a6fe:	e7e5      	b.n	801a6cc <__d2b+0x60>
 801a700:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a704:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a708:	6038      	str	r0, [r7, #0]
 801a70a:	6918      	ldr	r0, [r3, #16]
 801a70c:	f7ff fd34 	bl	801a178 <__hi0bits>
 801a710:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a714:	e7e2      	b.n	801a6dc <__d2b+0x70>
 801a716:	bf00      	nop
 801a718:	0801e1df 	.word	0x0801e1df
 801a71c:	0801e1f0 	.word	0x0801e1f0

0801a720 <__sfputc_r>:
 801a720:	6893      	ldr	r3, [r2, #8]
 801a722:	3b01      	subs	r3, #1
 801a724:	2b00      	cmp	r3, #0
 801a726:	b410      	push	{r4}
 801a728:	6093      	str	r3, [r2, #8]
 801a72a:	da08      	bge.n	801a73e <__sfputc_r+0x1e>
 801a72c:	6994      	ldr	r4, [r2, #24]
 801a72e:	42a3      	cmp	r3, r4
 801a730:	db01      	blt.n	801a736 <__sfputc_r+0x16>
 801a732:	290a      	cmp	r1, #10
 801a734:	d103      	bne.n	801a73e <__sfputc_r+0x1e>
 801a736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a73a:	f7fe bc38 	b.w	8018fae <__swbuf_r>
 801a73e:	6813      	ldr	r3, [r2, #0]
 801a740:	1c58      	adds	r0, r3, #1
 801a742:	6010      	str	r0, [r2, #0]
 801a744:	7019      	strb	r1, [r3, #0]
 801a746:	4608      	mov	r0, r1
 801a748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a74c:	4770      	bx	lr

0801a74e <__sfputs_r>:
 801a74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a750:	4606      	mov	r6, r0
 801a752:	460f      	mov	r7, r1
 801a754:	4614      	mov	r4, r2
 801a756:	18d5      	adds	r5, r2, r3
 801a758:	42ac      	cmp	r4, r5
 801a75a:	d101      	bne.n	801a760 <__sfputs_r+0x12>
 801a75c:	2000      	movs	r0, #0
 801a75e:	e007      	b.n	801a770 <__sfputs_r+0x22>
 801a760:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a764:	463a      	mov	r2, r7
 801a766:	4630      	mov	r0, r6
 801a768:	f7ff ffda 	bl	801a720 <__sfputc_r>
 801a76c:	1c43      	adds	r3, r0, #1
 801a76e:	d1f3      	bne.n	801a758 <__sfputs_r+0xa>
 801a770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a774 <_vfiprintf_r>:
 801a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a778:	460d      	mov	r5, r1
 801a77a:	b09d      	sub	sp, #116	; 0x74
 801a77c:	4614      	mov	r4, r2
 801a77e:	4698      	mov	r8, r3
 801a780:	4606      	mov	r6, r0
 801a782:	b118      	cbz	r0, 801a78c <_vfiprintf_r+0x18>
 801a784:	6a03      	ldr	r3, [r0, #32]
 801a786:	b90b      	cbnz	r3, 801a78c <_vfiprintf_r+0x18>
 801a788:	f7fe fb2a 	bl	8018de0 <__sinit>
 801a78c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a78e:	07d9      	lsls	r1, r3, #31
 801a790:	d405      	bmi.n	801a79e <_vfiprintf_r+0x2a>
 801a792:	89ab      	ldrh	r3, [r5, #12]
 801a794:	059a      	lsls	r2, r3, #22
 801a796:	d402      	bmi.n	801a79e <_vfiprintf_r+0x2a>
 801a798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a79a:	f7fe fd23 	bl	80191e4 <__retarget_lock_acquire_recursive>
 801a79e:	89ab      	ldrh	r3, [r5, #12]
 801a7a0:	071b      	lsls	r3, r3, #28
 801a7a2:	d501      	bpl.n	801a7a8 <_vfiprintf_r+0x34>
 801a7a4:	692b      	ldr	r3, [r5, #16]
 801a7a6:	b99b      	cbnz	r3, 801a7d0 <_vfiprintf_r+0x5c>
 801a7a8:	4629      	mov	r1, r5
 801a7aa:	4630      	mov	r0, r6
 801a7ac:	f7fe fc3c 	bl	8019028 <__swsetup_r>
 801a7b0:	b170      	cbz	r0, 801a7d0 <_vfiprintf_r+0x5c>
 801a7b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7b4:	07dc      	lsls	r4, r3, #31
 801a7b6:	d504      	bpl.n	801a7c2 <_vfiprintf_r+0x4e>
 801a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a7bc:	b01d      	add	sp, #116	; 0x74
 801a7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c2:	89ab      	ldrh	r3, [r5, #12]
 801a7c4:	0598      	lsls	r0, r3, #22
 801a7c6:	d4f7      	bmi.n	801a7b8 <_vfiprintf_r+0x44>
 801a7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7ca:	f7fe fd0c 	bl	80191e6 <__retarget_lock_release_recursive>
 801a7ce:	e7f3      	b.n	801a7b8 <_vfiprintf_r+0x44>
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	9309      	str	r3, [sp, #36]	; 0x24
 801a7d4:	2320      	movs	r3, #32
 801a7d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a7da:	f8cd 800c 	str.w	r8, [sp, #12]
 801a7de:	2330      	movs	r3, #48	; 0x30
 801a7e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a994 <_vfiprintf_r+0x220>
 801a7e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a7e8:	f04f 0901 	mov.w	r9, #1
 801a7ec:	4623      	mov	r3, r4
 801a7ee:	469a      	mov	sl, r3
 801a7f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a7f4:	b10a      	cbz	r2, 801a7fa <_vfiprintf_r+0x86>
 801a7f6:	2a25      	cmp	r2, #37	; 0x25
 801a7f8:	d1f9      	bne.n	801a7ee <_vfiprintf_r+0x7a>
 801a7fa:	ebba 0b04 	subs.w	fp, sl, r4
 801a7fe:	d00b      	beq.n	801a818 <_vfiprintf_r+0xa4>
 801a800:	465b      	mov	r3, fp
 801a802:	4622      	mov	r2, r4
 801a804:	4629      	mov	r1, r5
 801a806:	4630      	mov	r0, r6
 801a808:	f7ff ffa1 	bl	801a74e <__sfputs_r>
 801a80c:	3001      	adds	r0, #1
 801a80e:	f000 80a9 	beq.w	801a964 <_vfiprintf_r+0x1f0>
 801a812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a814:	445a      	add	r2, fp
 801a816:	9209      	str	r2, [sp, #36]	; 0x24
 801a818:	f89a 3000 	ldrb.w	r3, [sl]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	f000 80a1 	beq.w	801a964 <_vfiprintf_r+0x1f0>
 801a822:	2300      	movs	r3, #0
 801a824:	f04f 32ff 	mov.w	r2, #4294967295
 801a828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a82c:	f10a 0a01 	add.w	sl, sl, #1
 801a830:	9304      	str	r3, [sp, #16]
 801a832:	9307      	str	r3, [sp, #28]
 801a834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a838:	931a      	str	r3, [sp, #104]	; 0x68
 801a83a:	4654      	mov	r4, sl
 801a83c:	2205      	movs	r2, #5
 801a83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a842:	4854      	ldr	r0, [pc, #336]	; (801a994 <_vfiprintf_r+0x220>)
 801a844:	f7e6 fcec 	bl	8001220 <memchr>
 801a848:	9a04      	ldr	r2, [sp, #16]
 801a84a:	b9d8      	cbnz	r0, 801a884 <_vfiprintf_r+0x110>
 801a84c:	06d1      	lsls	r1, r2, #27
 801a84e:	bf44      	itt	mi
 801a850:	2320      	movmi	r3, #32
 801a852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a856:	0713      	lsls	r3, r2, #28
 801a858:	bf44      	itt	mi
 801a85a:	232b      	movmi	r3, #43	; 0x2b
 801a85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a860:	f89a 3000 	ldrb.w	r3, [sl]
 801a864:	2b2a      	cmp	r3, #42	; 0x2a
 801a866:	d015      	beq.n	801a894 <_vfiprintf_r+0x120>
 801a868:	9a07      	ldr	r2, [sp, #28]
 801a86a:	4654      	mov	r4, sl
 801a86c:	2000      	movs	r0, #0
 801a86e:	f04f 0c0a 	mov.w	ip, #10
 801a872:	4621      	mov	r1, r4
 801a874:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a878:	3b30      	subs	r3, #48	; 0x30
 801a87a:	2b09      	cmp	r3, #9
 801a87c:	d94d      	bls.n	801a91a <_vfiprintf_r+0x1a6>
 801a87e:	b1b0      	cbz	r0, 801a8ae <_vfiprintf_r+0x13a>
 801a880:	9207      	str	r2, [sp, #28]
 801a882:	e014      	b.n	801a8ae <_vfiprintf_r+0x13a>
 801a884:	eba0 0308 	sub.w	r3, r0, r8
 801a888:	fa09 f303 	lsl.w	r3, r9, r3
 801a88c:	4313      	orrs	r3, r2
 801a88e:	9304      	str	r3, [sp, #16]
 801a890:	46a2      	mov	sl, r4
 801a892:	e7d2      	b.n	801a83a <_vfiprintf_r+0xc6>
 801a894:	9b03      	ldr	r3, [sp, #12]
 801a896:	1d19      	adds	r1, r3, #4
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	9103      	str	r1, [sp, #12]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	bfbb      	ittet	lt
 801a8a0:	425b      	neglt	r3, r3
 801a8a2:	f042 0202 	orrlt.w	r2, r2, #2
 801a8a6:	9307      	strge	r3, [sp, #28]
 801a8a8:	9307      	strlt	r3, [sp, #28]
 801a8aa:	bfb8      	it	lt
 801a8ac:	9204      	strlt	r2, [sp, #16]
 801a8ae:	7823      	ldrb	r3, [r4, #0]
 801a8b0:	2b2e      	cmp	r3, #46	; 0x2e
 801a8b2:	d10c      	bne.n	801a8ce <_vfiprintf_r+0x15a>
 801a8b4:	7863      	ldrb	r3, [r4, #1]
 801a8b6:	2b2a      	cmp	r3, #42	; 0x2a
 801a8b8:	d134      	bne.n	801a924 <_vfiprintf_r+0x1b0>
 801a8ba:	9b03      	ldr	r3, [sp, #12]
 801a8bc:	1d1a      	adds	r2, r3, #4
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	9203      	str	r2, [sp, #12]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	bfb8      	it	lt
 801a8c6:	f04f 33ff 	movlt.w	r3, #4294967295
 801a8ca:	3402      	adds	r4, #2
 801a8cc:	9305      	str	r3, [sp, #20]
 801a8ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a9a4 <_vfiprintf_r+0x230>
 801a8d2:	7821      	ldrb	r1, [r4, #0]
 801a8d4:	2203      	movs	r2, #3
 801a8d6:	4650      	mov	r0, sl
 801a8d8:	f7e6 fca2 	bl	8001220 <memchr>
 801a8dc:	b138      	cbz	r0, 801a8ee <_vfiprintf_r+0x17a>
 801a8de:	9b04      	ldr	r3, [sp, #16]
 801a8e0:	eba0 000a 	sub.w	r0, r0, sl
 801a8e4:	2240      	movs	r2, #64	; 0x40
 801a8e6:	4082      	lsls	r2, r0
 801a8e8:	4313      	orrs	r3, r2
 801a8ea:	3401      	adds	r4, #1
 801a8ec:	9304      	str	r3, [sp, #16]
 801a8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8f2:	4829      	ldr	r0, [pc, #164]	; (801a998 <_vfiprintf_r+0x224>)
 801a8f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a8f8:	2206      	movs	r2, #6
 801a8fa:	f7e6 fc91 	bl	8001220 <memchr>
 801a8fe:	2800      	cmp	r0, #0
 801a900:	d03f      	beq.n	801a982 <_vfiprintf_r+0x20e>
 801a902:	4b26      	ldr	r3, [pc, #152]	; (801a99c <_vfiprintf_r+0x228>)
 801a904:	bb1b      	cbnz	r3, 801a94e <_vfiprintf_r+0x1da>
 801a906:	9b03      	ldr	r3, [sp, #12]
 801a908:	3307      	adds	r3, #7
 801a90a:	f023 0307 	bic.w	r3, r3, #7
 801a90e:	3308      	adds	r3, #8
 801a910:	9303      	str	r3, [sp, #12]
 801a912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a914:	443b      	add	r3, r7
 801a916:	9309      	str	r3, [sp, #36]	; 0x24
 801a918:	e768      	b.n	801a7ec <_vfiprintf_r+0x78>
 801a91a:	fb0c 3202 	mla	r2, ip, r2, r3
 801a91e:	460c      	mov	r4, r1
 801a920:	2001      	movs	r0, #1
 801a922:	e7a6      	b.n	801a872 <_vfiprintf_r+0xfe>
 801a924:	2300      	movs	r3, #0
 801a926:	3401      	adds	r4, #1
 801a928:	9305      	str	r3, [sp, #20]
 801a92a:	4619      	mov	r1, r3
 801a92c:	f04f 0c0a 	mov.w	ip, #10
 801a930:	4620      	mov	r0, r4
 801a932:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a936:	3a30      	subs	r2, #48	; 0x30
 801a938:	2a09      	cmp	r2, #9
 801a93a:	d903      	bls.n	801a944 <_vfiprintf_r+0x1d0>
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d0c6      	beq.n	801a8ce <_vfiprintf_r+0x15a>
 801a940:	9105      	str	r1, [sp, #20]
 801a942:	e7c4      	b.n	801a8ce <_vfiprintf_r+0x15a>
 801a944:	fb0c 2101 	mla	r1, ip, r1, r2
 801a948:	4604      	mov	r4, r0
 801a94a:	2301      	movs	r3, #1
 801a94c:	e7f0      	b.n	801a930 <_vfiprintf_r+0x1bc>
 801a94e:	ab03      	add	r3, sp, #12
 801a950:	9300      	str	r3, [sp, #0]
 801a952:	462a      	mov	r2, r5
 801a954:	4b12      	ldr	r3, [pc, #72]	; (801a9a0 <_vfiprintf_r+0x22c>)
 801a956:	a904      	add	r1, sp, #16
 801a958:	4630      	mov	r0, r6
 801a95a:	f7fd fe1d 	bl	8018598 <_printf_float>
 801a95e:	4607      	mov	r7, r0
 801a960:	1c78      	adds	r0, r7, #1
 801a962:	d1d6      	bne.n	801a912 <_vfiprintf_r+0x19e>
 801a964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a966:	07d9      	lsls	r1, r3, #31
 801a968:	d405      	bmi.n	801a976 <_vfiprintf_r+0x202>
 801a96a:	89ab      	ldrh	r3, [r5, #12]
 801a96c:	059a      	lsls	r2, r3, #22
 801a96e:	d402      	bmi.n	801a976 <_vfiprintf_r+0x202>
 801a970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a972:	f7fe fc38 	bl	80191e6 <__retarget_lock_release_recursive>
 801a976:	89ab      	ldrh	r3, [r5, #12]
 801a978:	065b      	lsls	r3, r3, #25
 801a97a:	f53f af1d 	bmi.w	801a7b8 <_vfiprintf_r+0x44>
 801a97e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a980:	e71c      	b.n	801a7bc <_vfiprintf_r+0x48>
 801a982:	ab03      	add	r3, sp, #12
 801a984:	9300      	str	r3, [sp, #0]
 801a986:	462a      	mov	r2, r5
 801a988:	4b05      	ldr	r3, [pc, #20]	; (801a9a0 <_vfiprintf_r+0x22c>)
 801a98a:	a904      	add	r1, sp, #16
 801a98c:	4630      	mov	r0, r6
 801a98e:	f7fe f88b 	bl	8018aa8 <_printf_i>
 801a992:	e7e4      	b.n	801a95e <_vfiprintf_r+0x1ea>
 801a994:	0801e34c 	.word	0x0801e34c
 801a998:	0801e356 	.word	0x0801e356
 801a99c:	08018599 	.word	0x08018599
 801a9a0:	0801a74f 	.word	0x0801a74f
 801a9a4:	0801e352 	.word	0x0801e352

0801a9a8 <__sflush_r>:
 801a9a8:	898a      	ldrh	r2, [r1, #12]
 801a9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ae:	4605      	mov	r5, r0
 801a9b0:	0710      	lsls	r0, r2, #28
 801a9b2:	460c      	mov	r4, r1
 801a9b4:	d458      	bmi.n	801aa68 <__sflush_r+0xc0>
 801a9b6:	684b      	ldr	r3, [r1, #4]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	dc05      	bgt.n	801a9c8 <__sflush_r+0x20>
 801a9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	dc02      	bgt.n	801a9c8 <__sflush_r+0x20>
 801a9c2:	2000      	movs	r0, #0
 801a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9ca:	2e00      	cmp	r6, #0
 801a9cc:	d0f9      	beq.n	801a9c2 <__sflush_r+0x1a>
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a9d4:	682f      	ldr	r7, [r5, #0]
 801a9d6:	6a21      	ldr	r1, [r4, #32]
 801a9d8:	602b      	str	r3, [r5, #0]
 801a9da:	d032      	beq.n	801aa42 <__sflush_r+0x9a>
 801a9dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a9de:	89a3      	ldrh	r3, [r4, #12]
 801a9e0:	075a      	lsls	r2, r3, #29
 801a9e2:	d505      	bpl.n	801a9f0 <__sflush_r+0x48>
 801a9e4:	6863      	ldr	r3, [r4, #4]
 801a9e6:	1ac0      	subs	r0, r0, r3
 801a9e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a9ea:	b10b      	cbz	r3, 801a9f0 <__sflush_r+0x48>
 801a9ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a9ee:	1ac0      	subs	r0, r0, r3
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	4602      	mov	r2, r0
 801a9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9f6:	6a21      	ldr	r1, [r4, #32]
 801a9f8:	4628      	mov	r0, r5
 801a9fa:	47b0      	blx	r6
 801a9fc:	1c43      	adds	r3, r0, #1
 801a9fe:	89a3      	ldrh	r3, [r4, #12]
 801aa00:	d106      	bne.n	801aa10 <__sflush_r+0x68>
 801aa02:	6829      	ldr	r1, [r5, #0]
 801aa04:	291d      	cmp	r1, #29
 801aa06:	d82b      	bhi.n	801aa60 <__sflush_r+0xb8>
 801aa08:	4a29      	ldr	r2, [pc, #164]	; (801aab0 <__sflush_r+0x108>)
 801aa0a:	410a      	asrs	r2, r1
 801aa0c:	07d6      	lsls	r6, r2, #31
 801aa0e:	d427      	bmi.n	801aa60 <__sflush_r+0xb8>
 801aa10:	2200      	movs	r2, #0
 801aa12:	6062      	str	r2, [r4, #4]
 801aa14:	04d9      	lsls	r1, r3, #19
 801aa16:	6922      	ldr	r2, [r4, #16]
 801aa18:	6022      	str	r2, [r4, #0]
 801aa1a:	d504      	bpl.n	801aa26 <__sflush_r+0x7e>
 801aa1c:	1c42      	adds	r2, r0, #1
 801aa1e:	d101      	bne.n	801aa24 <__sflush_r+0x7c>
 801aa20:	682b      	ldr	r3, [r5, #0]
 801aa22:	b903      	cbnz	r3, 801aa26 <__sflush_r+0x7e>
 801aa24:	6560      	str	r0, [r4, #84]	; 0x54
 801aa26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa28:	602f      	str	r7, [r5, #0]
 801aa2a:	2900      	cmp	r1, #0
 801aa2c:	d0c9      	beq.n	801a9c2 <__sflush_r+0x1a>
 801aa2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa32:	4299      	cmp	r1, r3
 801aa34:	d002      	beq.n	801aa3c <__sflush_r+0x94>
 801aa36:	4628      	mov	r0, r5
 801aa38:	f7ff f9f6 	bl	8019e28 <_free_r>
 801aa3c:	2000      	movs	r0, #0
 801aa3e:	6360      	str	r0, [r4, #52]	; 0x34
 801aa40:	e7c0      	b.n	801a9c4 <__sflush_r+0x1c>
 801aa42:	2301      	movs	r3, #1
 801aa44:	4628      	mov	r0, r5
 801aa46:	47b0      	blx	r6
 801aa48:	1c41      	adds	r1, r0, #1
 801aa4a:	d1c8      	bne.n	801a9de <__sflush_r+0x36>
 801aa4c:	682b      	ldr	r3, [r5, #0]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d0c5      	beq.n	801a9de <__sflush_r+0x36>
 801aa52:	2b1d      	cmp	r3, #29
 801aa54:	d001      	beq.n	801aa5a <__sflush_r+0xb2>
 801aa56:	2b16      	cmp	r3, #22
 801aa58:	d101      	bne.n	801aa5e <__sflush_r+0xb6>
 801aa5a:	602f      	str	r7, [r5, #0]
 801aa5c:	e7b1      	b.n	801a9c2 <__sflush_r+0x1a>
 801aa5e:	89a3      	ldrh	r3, [r4, #12]
 801aa60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa64:	81a3      	strh	r3, [r4, #12]
 801aa66:	e7ad      	b.n	801a9c4 <__sflush_r+0x1c>
 801aa68:	690f      	ldr	r7, [r1, #16]
 801aa6a:	2f00      	cmp	r7, #0
 801aa6c:	d0a9      	beq.n	801a9c2 <__sflush_r+0x1a>
 801aa6e:	0793      	lsls	r3, r2, #30
 801aa70:	680e      	ldr	r6, [r1, #0]
 801aa72:	bf08      	it	eq
 801aa74:	694b      	ldreq	r3, [r1, #20]
 801aa76:	600f      	str	r7, [r1, #0]
 801aa78:	bf18      	it	ne
 801aa7a:	2300      	movne	r3, #0
 801aa7c:	eba6 0807 	sub.w	r8, r6, r7
 801aa80:	608b      	str	r3, [r1, #8]
 801aa82:	f1b8 0f00 	cmp.w	r8, #0
 801aa86:	dd9c      	ble.n	801a9c2 <__sflush_r+0x1a>
 801aa88:	6a21      	ldr	r1, [r4, #32]
 801aa8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aa8c:	4643      	mov	r3, r8
 801aa8e:	463a      	mov	r2, r7
 801aa90:	4628      	mov	r0, r5
 801aa92:	47b0      	blx	r6
 801aa94:	2800      	cmp	r0, #0
 801aa96:	dc06      	bgt.n	801aaa6 <__sflush_r+0xfe>
 801aa98:	89a3      	ldrh	r3, [r4, #12]
 801aa9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa9e:	81a3      	strh	r3, [r4, #12]
 801aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 801aaa4:	e78e      	b.n	801a9c4 <__sflush_r+0x1c>
 801aaa6:	4407      	add	r7, r0
 801aaa8:	eba8 0800 	sub.w	r8, r8, r0
 801aaac:	e7e9      	b.n	801aa82 <__sflush_r+0xda>
 801aaae:	bf00      	nop
 801aab0:	dfbffffe 	.word	0xdfbffffe

0801aab4 <_fflush_r>:
 801aab4:	b538      	push	{r3, r4, r5, lr}
 801aab6:	690b      	ldr	r3, [r1, #16]
 801aab8:	4605      	mov	r5, r0
 801aaba:	460c      	mov	r4, r1
 801aabc:	b913      	cbnz	r3, 801aac4 <_fflush_r+0x10>
 801aabe:	2500      	movs	r5, #0
 801aac0:	4628      	mov	r0, r5
 801aac2:	bd38      	pop	{r3, r4, r5, pc}
 801aac4:	b118      	cbz	r0, 801aace <_fflush_r+0x1a>
 801aac6:	6a03      	ldr	r3, [r0, #32]
 801aac8:	b90b      	cbnz	r3, 801aace <_fflush_r+0x1a>
 801aaca:	f7fe f989 	bl	8018de0 <__sinit>
 801aace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d0f3      	beq.n	801aabe <_fflush_r+0xa>
 801aad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aad8:	07d0      	lsls	r0, r2, #31
 801aada:	d404      	bmi.n	801aae6 <_fflush_r+0x32>
 801aadc:	0599      	lsls	r1, r3, #22
 801aade:	d402      	bmi.n	801aae6 <_fflush_r+0x32>
 801aae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aae2:	f7fe fb7f 	bl	80191e4 <__retarget_lock_acquire_recursive>
 801aae6:	4628      	mov	r0, r5
 801aae8:	4621      	mov	r1, r4
 801aaea:	f7ff ff5d 	bl	801a9a8 <__sflush_r>
 801aaee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aaf0:	07da      	lsls	r2, r3, #31
 801aaf2:	4605      	mov	r5, r0
 801aaf4:	d4e4      	bmi.n	801aac0 <_fflush_r+0xc>
 801aaf6:	89a3      	ldrh	r3, [r4, #12]
 801aaf8:	059b      	lsls	r3, r3, #22
 801aafa:	d4e1      	bmi.n	801aac0 <_fflush_r+0xc>
 801aafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aafe:	f7fe fb72 	bl	80191e6 <__retarget_lock_release_recursive>
 801ab02:	e7dd      	b.n	801aac0 <_fflush_r+0xc>

0801ab04 <fiprintf>:
 801ab04:	b40e      	push	{r1, r2, r3}
 801ab06:	b503      	push	{r0, r1, lr}
 801ab08:	4601      	mov	r1, r0
 801ab0a:	ab03      	add	r3, sp, #12
 801ab0c:	4805      	ldr	r0, [pc, #20]	; (801ab24 <fiprintf+0x20>)
 801ab0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab12:	6800      	ldr	r0, [r0, #0]
 801ab14:	9301      	str	r3, [sp, #4]
 801ab16:	f7ff fe2d 	bl	801a774 <_vfiprintf_r>
 801ab1a:	b002      	add	sp, #8
 801ab1c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab20:	b003      	add	sp, #12
 801ab22:	4770      	bx	lr
 801ab24:	200000b8 	.word	0x200000b8

0801ab28 <__swhatbuf_r>:
 801ab28:	b570      	push	{r4, r5, r6, lr}
 801ab2a:	460c      	mov	r4, r1
 801ab2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab30:	2900      	cmp	r1, #0
 801ab32:	b096      	sub	sp, #88	; 0x58
 801ab34:	4615      	mov	r5, r2
 801ab36:	461e      	mov	r6, r3
 801ab38:	da0d      	bge.n	801ab56 <__swhatbuf_r+0x2e>
 801ab3a:	89a3      	ldrh	r3, [r4, #12]
 801ab3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ab40:	f04f 0100 	mov.w	r1, #0
 801ab44:	bf0c      	ite	eq
 801ab46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ab4a:	2340      	movne	r3, #64	; 0x40
 801ab4c:	2000      	movs	r0, #0
 801ab4e:	6031      	str	r1, [r6, #0]
 801ab50:	602b      	str	r3, [r5, #0]
 801ab52:	b016      	add	sp, #88	; 0x58
 801ab54:	bd70      	pop	{r4, r5, r6, pc}
 801ab56:	466a      	mov	r2, sp
 801ab58:	f000 f848 	bl	801abec <_fstat_r>
 801ab5c:	2800      	cmp	r0, #0
 801ab5e:	dbec      	blt.n	801ab3a <__swhatbuf_r+0x12>
 801ab60:	9901      	ldr	r1, [sp, #4]
 801ab62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801ab66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ab6a:	4259      	negs	r1, r3
 801ab6c:	4159      	adcs	r1, r3
 801ab6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ab72:	e7eb      	b.n	801ab4c <__swhatbuf_r+0x24>

0801ab74 <__smakebuf_r>:
 801ab74:	898b      	ldrh	r3, [r1, #12]
 801ab76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab78:	079d      	lsls	r5, r3, #30
 801ab7a:	4606      	mov	r6, r0
 801ab7c:	460c      	mov	r4, r1
 801ab7e:	d507      	bpl.n	801ab90 <__smakebuf_r+0x1c>
 801ab80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ab84:	6023      	str	r3, [r4, #0]
 801ab86:	6123      	str	r3, [r4, #16]
 801ab88:	2301      	movs	r3, #1
 801ab8a:	6163      	str	r3, [r4, #20]
 801ab8c:	b002      	add	sp, #8
 801ab8e:	bd70      	pop	{r4, r5, r6, pc}
 801ab90:	ab01      	add	r3, sp, #4
 801ab92:	466a      	mov	r2, sp
 801ab94:	f7ff ffc8 	bl	801ab28 <__swhatbuf_r>
 801ab98:	9900      	ldr	r1, [sp, #0]
 801ab9a:	4605      	mov	r5, r0
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	f7ff f9b7 	bl	8019f10 <_malloc_r>
 801aba2:	b948      	cbnz	r0, 801abb8 <__smakebuf_r+0x44>
 801aba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aba8:	059a      	lsls	r2, r3, #22
 801abaa:	d4ef      	bmi.n	801ab8c <__smakebuf_r+0x18>
 801abac:	f023 0303 	bic.w	r3, r3, #3
 801abb0:	f043 0302 	orr.w	r3, r3, #2
 801abb4:	81a3      	strh	r3, [r4, #12]
 801abb6:	e7e3      	b.n	801ab80 <__smakebuf_r+0xc>
 801abb8:	89a3      	ldrh	r3, [r4, #12]
 801abba:	6020      	str	r0, [r4, #0]
 801abbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801abc0:	81a3      	strh	r3, [r4, #12]
 801abc2:	9b00      	ldr	r3, [sp, #0]
 801abc4:	6163      	str	r3, [r4, #20]
 801abc6:	9b01      	ldr	r3, [sp, #4]
 801abc8:	6120      	str	r0, [r4, #16]
 801abca:	b15b      	cbz	r3, 801abe4 <__smakebuf_r+0x70>
 801abcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801abd0:	4630      	mov	r0, r6
 801abd2:	f000 f81d 	bl	801ac10 <_isatty_r>
 801abd6:	b128      	cbz	r0, 801abe4 <__smakebuf_r+0x70>
 801abd8:	89a3      	ldrh	r3, [r4, #12]
 801abda:	f023 0303 	bic.w	r3, r3, #3
 801abde:	f043 0301 	orr.w	r3, r3, #1
 801abe2:	81a3      	strh	r3, [r4, #12]
 801abe4:	89a3      	ldrh	r3, [r4, #12]
 801abe6:	431d      	orrs	r5, r3
 801abe8:	81a5      	strh	r5, [r4, #12]
 801abea:	e7cf      	b.n	801ab8c <__smakebuf_r+0x18>

0801abec <_fstat_r>:
 801abec:	b538      	push	{r3, r4, r5, lr}
 801abee:	4d07      	ldr	r5, [pc, #28]	; (801ac0c <_fstat_r+0x20>)
 801abf0:	2300      	movs	r3, #0
 801abf2:	4604      	mov	r4, r0
 801abf4:	4608      	mov	r0, r1
 801abf6:	4611      	mov	r1, r2
 801abf8:	602b      	str	r3, [r5, #0]
 801abfa:	f7e7 ff3e 	bl	8002a7a <_fstat>
 801abfe:	1c43      	adds	r3, r0, #1
 801ac00:	d102      	bne.n	801ac08 <_fstat_r+0x1c>
 801ac02:	682b      	ldr	r3, [r5, #0]
 801ac04:	b103      	cbz	r3, 801ac08 <_fstat_r+0x1c>
 801ac06:	6023      	str	r3, [r4, #0]
 801ac08:	bd38      	pop	{r3, r4, r5, pc}
 801ac0a:	bf00      	nop
 801ac0c:	20008290 	.word	0x20008290

0801ac10 <_isatty_r>:
 801ac10:	b538      	push	{r3, r4, r5, lr}
 801ac12:	4d06      	ldr	r5, [pc, #24]	; (801ac2c <_isatty_r+0x1c>)
 801ac14:	2300      	movs	r3, #0
 801ac16:	4604      	mov	r4, r0
 801ac18:	4608      	mov	r0, r1
 801ac1a:	602b      	str	r3, [r5, #0]
 801ac1c:	f7e7 ff3d 	bl	8002a9a <_isatty>
 801ac20:	1c43      	adds	r3, r0, #1
 801ac22:	d102      	bne.n	801ac2a <_isatty_r+0x1a>
 801ac24:	682b      	ldr	r3, [r5, #0]
 801ac26:	b103      	cbz	r3, 801ac2a <_isatty_r+0x1a>
 801ac28:	6023      	str	r3, [r4, #0]
 801ac2a:	bd38      	pop	{r3, r4, r5, pc}
 801ac2c:	20008290 	.word	0x20008290

0801ac30 <_sbrk_r>:
 801ac30:	b538      	push	{r3, r4, r5, lr}
 801ac32:	4d06      	ldr	r5, [pc, #24]	; (801ac4c <_sbrk_r+0x1c>)
 801ac34:	2300      	movs	r3, #0
 801ac36:	4604      	mov	r4, r0
 801ac38:	4608      	mov	r0, r1
 801ac3a:	602b      	str	r3, [r5, #0]
 801ac3c:	f7e7 ff46 	bl	8002acc <_sbrk>
 801ac40:	1c43      	adds	r3, r0, #1
 801ac42:	d102      	bne.n	801ac4a <_sbrk_r+0x1a>
 801ac44:	682b      	ldr	r3, [r5, #0]
 801ac46:	b103      	cbz	r3, 801ac4a <_sbrk_r+0x1a>
 801ac48:	6023      	str	r3, [r4, #0]
 801ac4a:	bd38      	pop	{r3, r4, r5, pc}
 801ac4c:	20008290 	.word	0x20008290

0801ac50 <abort>:
 801ac50:	b508      	push	{r3, lr}
 801ac52:	2006      	movs	r0, #6
 801ac54:	f000 f860 	bl	801ad18 <raise>
 801ac58:	2001      	movs	r0, #1
 801ac5a:	f7e7 febf 	bl	80029dc <_exit>

0801ac5e <_calloc_r>:
 801ac5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac60:	fba1 2402 	umull	r2, r4, r1, r2
 801ac64:	b94c      	cbnz	r4, 801ac7a <_calloc_r+0x1c>
 801ac66:	4611      	mov	r1, r2
 801ac68:	9201      	str	r2, [sp, #4]
 801ac6a:	f7ff f951 	bl	8019f10 <_malloc_r>
 801ac6e:	9a01      	ldr	r2, [sp, #4]
 801ac70:	4605      	mov	r5, r0
 801ac72:	b930      	cbnz	r0, 801ac82 <_calloc_r+0x24>
 801ac74:	4628      	mov	r0, r5
 801ac76:	b003      	add	sp, #12
 801ac78:	bd30      	pop	{r4, r5, pc}
 801ac7a:	220c      	movs	r2, #12
 801ac7c:	6002      	str	r2, [r0, #0]
 801ac7e:	2500      	movs	r5, #0
 801ac80:	e7f8      	b.n	801ac74 <_calloc_r+0x16>
 801ac82:	4621      	mov	r1, r4
 801ac84:	f7fe fa38 	bl	80190f8 <memset>
 801ac88:	e7f4      	b.n	801ac74 <_calloc_r+0x16>

0801ac8a <__ascii_mbtowc>:
 801ac8a:	b082      	sub	sp, #8
 801ac8c:	b901      	cbnz	r1, 801ac90 <__ascii_mbtowc+0x6>
 801ac8e:	a901      	add	r1, sp, #4
 801ac90:	b142      	cbz	r2, 801aca4 <__ascii_mbtowc+0x1a>
 801ac92:	b14b      	cbz	r3, 801aca8 <__ascii_mbtowc+0x1e>
 801ac94:	7813      	ldrb	r3, [r2, #0]
 801ac96:	600b      	str	r3, [r1, #0]
 801ac98:	7812      	ldrb	r2, [r2, #0]
 801ac9a:	1e10      	subs	r0, r2, #0
 801ac9c:	bf18      	it	ne
 801ac9e:	2001      	movne	r0, #1
 801aca0:	b002      	add	sp, #8
 801aca2:	4770      	bx	lr
 801aca4:	4610      	mov	r0, r2
 801aca6:	e7fb      	b.n	801aca0 <__ascii_mbtowc+0x16>
 801aca8:	f06f 0001 	mvn.w	r0, #1
 801acac:	e7f8      	b.n	801aca0 <__ascii_mbtowc+0x16>

0801acae <__ascii_wctomb>:
 801acae:	b149      	cbz	r1, 801acc4 <__ascii_wctomb+0x16>
 801acb0:	2aff      	cmp	r2, #255	; 0xff
 801acb2:	bf85      	ittet	hi
 801acb4:	238a      	movhi	r3, #138	; 0x8a
 801acb6:	6003      	strhi	r3, [r0, #0]
 801acb8:	700a      	strbls	r2, [r1, #0]
 801acba:	f04f 30ff 	movhi.w	r0, #4294967295
 801acbe:	bf98      	it	ls
 801acc0:	2001      	movls	r0, #1
 801acc2:	4770      	bx	lr
 801acc4:	4608      	mov	r0, r1
 801acc6:	4770      	bx	lr

0801acc8 <_raise_r>:
 801acc8:	291f      	cmp	r1, #31
 801acca:	b538      	push	{r3, r4, r5, lr}
 801accc:	4604      	mov	r4, r0
 801acce:	460d      	mov	r5, r1
 801acd0:	d904      	bls.n	801acdc <_raise_r+0x14>
 801acd2:	2316      	movs	r3, #22
 801acd4:	6003      	str	r3, [r0, #0]
 801acd6:	f04f 30ff 	mov.w	r0, #4294967295
 801acda:	bd38      	pop	{r3, r4, r5, pc}
 801acdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801acde:	b112      	cbz	r2, 801ace6 <_raise_r+0x1e>
 801ace0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ace4:	b94b      	cbnz	r3, 801acfa <_raise_r+0x32>
 801ace6:	4620      	mov	r0, r4
 801ace8:	f000 f830 	bl	801ad4c <_getpid_r>
 801acec:	462a      	mov	r2, r5
 801acee:	4601      	mov	r1, r0
 801acf0:	4620      	mov	r0, r4
 801acf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801acf6:	f000 b817 	b.w	801ad28 <_kill_r>
 801acfa:	2b01      	cmp	r3, #1
 801acfc:	d00a      	beq.n	801ad14 <_raise_r+0x4c>
 801acfe:	1c59      	adds	r1, r3, #1
 801ad00:	d103      	bne.n	801ad0a <_raise_r+0x42>
 801ad02:	2316      	movs	r3, #22
 801ad04:	6003      	str	r3, [r0, #0]
 801ad06:	2001      	movs	r0, #1
 801ad08:	e7e7      	b.n	801acda <_raise_r+0x12>
 801ad0a:	2400      	movs	r4, #0
 801ad0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ad10:	4628      	mov	r0, r5
 801ad12:	4798      	blx	r3
 801ad14:	2000      	movs	r0, #0
 801ad16:	e7e0      	b.n	801acda <_raise_r+0x12>

0801ad18 <raise>:
 801ad18:	4b02      	ldr	r3, [pc, #8]	; (801ad24 <raise+0xc>)
 801ad1a:	4601      	mov	r1, r0
 801ad1c:	6818      	ldr	r0, [r3, #0]
 801ad1e:	f7ff bfd3 	b.w	801acc8 <_raise_r>
 801ad22:	bf00      	nop
 801ad24:	200000b8 	.word	0x200000b8

0801ad28 <_kill_r>:
 801ad28:	b538      	push	{r3, r4, r5, lr}
 801ad2a:	4d07      	ldr	r5, [pc, #28]	; (801ad48 <_kill_r+0x20>)
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	4604      	mov	r4, r0
 801ad30:	4608      	mov	r0, r1
 801ad32:	4611      	mov	r1, r2
 801ad34:	602b      	str	r3, [r5, #0]
 801ad36:	f7e7 fe3f 	bl	80029b8 <_kill>
 801ad3a:	1c43      	adds	r3, r0, #1
 801ad3c:	d102      	bne.n	801ad44 <_kill_r+0x1c>
 801ad3e:	682b      	ldr	r3, [r5, #0]
 801ad40:	b103      	cbz	r3, 801ad44 <_kill_r+0x1c>
 801ad42:	6023      	str	r3, [r4, #0]
 801ad44:	bd38      	pop	{r3, r4, r5, pc}
 801ad46:	bf00      	nop
 801ad48:	20008290 	.word	0x20008290

0801ad4c <_getpid_r>:
 801ad4c:	f7e7 be2c 	b.w	80029a8 <_getpid>

0801ad50 <_init>:
 801ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad52:	bf00      	nop
 801ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad56:	bc08      	pop	{r3}
 801ad58:	469e      	mov	lr, r3
 801ad5a:	4770      	bx	lr

0801ad5c <_fini>:
 801ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad5e:	bf00      	nop
 801ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad62:	bc08      	pop	{r3}
 801ad64:	469e      	mov	lr, r3
 801ad66:	4770      	bx	lr

0801ad68 <__init_synthesiser_veneer>:
 801ad68:	f85f f000 	ldr.w	pc, [pc]	; 801ad6c <__init_synthesiser_veneer+0x4>
 801ad6c:	00000181 	.word	0x00000181

0801ad70 <__timer_delay_veneer>:
 801ad70:	f85f f000 	ldr.w	pc, [pc]	; 801ad74 <__timer_delay_veneer+0x4>
 801ad74:	00000d4d 	.word	0x00000d4d

0801ad78 <__calc_defined_step_MW_sweep_veneer>:
 801ad78:	f85f f000 	ldr.w	pc, [pc]	; 801ad7c <__calc_defined_step_MW_sweep_veneer+0x4>
 801ad7c:	00000699 	.word	0x00000699

0801ad80 <__set_aom_atten_veneer>:
 801ad80:	f85f f000 	ldr.w	pc, [pc]	; 801ad84 <__set_aom_atten_veneer+0x4>
 801ad84:	00000e49 	.word	0x00000e49

0801ad88 <__MW_update_veneer>:
 801ad88:	f85f f000 	ldr.w	pc, [pc]	; 801ad8c <__MW_update_veneer+0x4>
 801ad8c:	00000991 	.word	0x00000991

0801ad90 <__start_pop_veneer>:
 801ad90:	f85f f000 	ldr.w	pc, [pc]	; 801ad94 <__start_pop_veneer+0x4>
 801ad94:	00000d79 	.word	0x00000d79

0801ad98 <__stop_pop_veneer>:
 801ad98:	f85f f000 	ldr.w	pc, [pc]	; 801ad9c <__stop_pop_veneer+0x4>
 801ad9c:	00000dd5 	.word	0x00000dd5

0801ada0 <__start_MW_sweep_veneer>:
 801ada0:	f85f f000 	ldr.w	pc, [pc]	; 801ada4 <__start_MW_sweep_veneer+0x4>
 801ada4:	00000929 	.word	0x00000929

0801ada8 <__set_MW_power_veneer>:
 801ada8:	f85f f000 	ldr.w	pc, [pc]	; 801adac <__set_MW_power_veneer+0x4>
 801adac:	00000123 	.word	0x00000123
