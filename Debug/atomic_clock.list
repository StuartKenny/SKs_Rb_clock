
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000890  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b740  08000b30  08000b30  00020b30  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0003020c  2**0
                  CONTENTS
  4 .rodata       00000774  0800c270  0800c270  0002c270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800c9e4  0800c9e4  0002c9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0800c9ec  0800c9ec  0002c9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9f0  0800c9f0  0002c9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c9f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000020c  0800cc00  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800cc00  000304a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f717  00000000  00000000  0003023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003102  00000000  00000000  0004f951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00052a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f0  00000000  00000000  00054270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a709  00000000  00000000  00055960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb0b  00000000  00000000  00090069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c890  00000000  00000000  000acb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00229404  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007738  00000000  00000000  00229454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);

}

uint32_t start_timer(TIM_TypeDef * timer) {
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
   8:	687b      	ldr	r3, [r7, #4]
   a:	681b      	ldr	r3, [r3, #0]
   c:	f023 0201 	bic.w	r2, r3, #1
  10:	687b      	ldr	r3, [r7, #4]
  12:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  14:	687b      	ldr	r3, [r7, #4]
  16:	695b      	ldr	r3, [r3, #20]
  18:	f043 0201 	orr.w	r2, r3, #1
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
  20:	687b      	ldr	r3, [r7, #4]
  22:	681b      	ldr	r3, [r3, #0]
  24:	f043 0201 	orr.w	r2, r3, #1
  28:	687b      	ldr	r3, [r7, #4]
  2a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
  30:	4618      	mov	r0, r3
  32:	370c      	adds	r7, #12
  34:	46bd      	mov	sp, r7
  36:	f85d 7b04 	ldr.w	r7, [sp], #4
  3a:	4770      	bx	lr

0000003c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
  3c:	b480      	push	{r7}
  3e:	b083      	sub	sp, #12
  40:	af00      	add	r7, sp, #0
  42:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
  44:	687b      	ldr	r3, [r7, #4]
  46:	681b      	ldr	r3, [r3, #0]
  48:	f023 0201 	bic.w	r2, r3, #1
  4c:	687b      	ldr	r3, [r7, #4]
  4e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  50:	687b      	ldr	r3, [r7, #4]
  52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  54:	4618      	mov	r0, r3
  56:	370c      	adds	r7, #12
  58:	46bd      	mov	sp, r7
  5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  5e:	4770      	bx	lr

00000060 <timer_delay>:

void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
  60:	b480      	push	{r7}
  62:	b085      	sub	sp, #20
  64:	af00      	add	r7, sp, #0
  66:	6078      	str	r0, [r7, #4]
  68:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  6a:	687b      	ldr	r3, [r7, #4]
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f023 0201 	bic.w	r2, r3, #1
  72:	687b      	ldr	r3, [r7, #4]
  74:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  76:	687b      	ldr	r3, [r7, #4]
  78:	695b      	ldr	r3, [r3, #20]
  7a:	f043 0201 	orr.w	r2, r3, #1
  7e:	687b      	ldr	r3, [r7, #4]
  80:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
  82:	687b      	ldr	r3, [r7, #4]
  84:	681b      	ldr	r3, [r3, #0]
  86:	f043 0201 	orr.w	r2, r3, #1
  8a:	687b      	ldr	r3, [r7, #4]
  8c:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
  8e:	687b      	ldr	r3, [r7, #4]
  90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  92:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
  94:	bf00      	nop
  96:	687b      	ldr	r3, [r7, #4]
  98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  9a:	68fb      	ldr	r3, [r7, #12]
  9c:	1ad3      	subs	r3, r2, r3
  9e:	683a      	ldr	r2, [r7, #0]
  a0:	429a      	cmp	r2, r3
  a2:	d8f8      	bhi.n	96 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  a4:	687b      	ldr	r3, [r7, #4]
  a6:	681b      	ldr	r3, [r3, #0]
  a8:	f023 0201 	bic.w	r2, r3, #1
  ac:	687b      	ldr	r3, [r7, #4]
  ae:	601a      	str	r2, [r3, #0]

}
  b0:	bf00      	nop
  b2:	3714      	adds	r7, #20
  b4:	46bd      	mov	sp, r7
  b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  ba:	4770      	bx	lr

000000bc <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
  bc:	b580      	push	{r7, lr}
  be:	b082      	sub	sp, #8
  c0:	af00      	add	r7, sp, #0
  c2:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
  c4:	2201      	movs	r2, #1
  c6:	2180      	movs	r1, #128	; 0x80
  c8:	4822      	ldr	r0, [pc, #136]	; (154 <set_aom_atten+0x98>)
  ca:	f000 fbd9 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
  ce:	793b      	ldrb	r3, [r7, #4]
  d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
  d4:	b2db      	uxtb	r3, r3
  d6:	461a      	mov	r2, r3
  d8:	2140      	movs	r1, #64	; 0x40
  da:	481e      	ldr	r0, [pc, #120]	; (154 <set_aom_atten+0x98>)
  dc:	f000 fbd0 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
  e0:	793b      	ldrb	r3, [r7, #4]
  e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
  e6:	b2db      	uxtb	r3, r3
  e8:	461a      	mov	r2, r3
  ea:	2120      	movs	r1, #32
  ec:	4819      	ldr	r0, [pc, #100]	; (154 <set_aom_atten+0x98>)
  ee:	f000 fbc7 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
  f2:	793b      	ldrb	r3, [r7, #4]
  f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
  f8:	b2db      	uxtb	r3, r3
  fa:	461a      	mov	r2, r3
  fc:	2110      	movs	r1, #16
  fe:	4815      	ldr	r0, [pc, #84]	; (154 <set_aom_atten+0x98>)
 100:	f000 fbbe 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 104:	793b      	ldrb	r3, [r7, #4]
 106:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 10a:	b2db      	uxtb	r3, r3
 10c:	461a      	mov	r2, r3
 10e:	2108      	movs	r1, #8
 110:	4810      	ldr	r0, [pc, #64]	; (154 <set_aom_atten+0x98>)
 112:	f000 fbb5 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 116:	793b      	ldrb	r3, [r7, #4]
 118:	f3c3 1300 	ubfx	r3, r3, #4, #1
 11c:	b2db      	uxtb	r3, r3
 11e:	461a      	mov	r2, r3
 120:	2104      	movs	r1, #4
 122:	480d      	ldr	r0, [pc, #52]	; (158 <set_aom_atten+0x9c>)
 124:	f000 fbac 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 128:	793b      	ldrb	r3, [r7, #4]
 12a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 12e:	b2db      	uxtb	r3, r3
 130:	461a      	mov	r2, r3
 132:	2110      	movs	r1, #16
 134:	4808      	ldr	r0, [pc, #32]	; (158 <set_aom_atten+0x9c>)
 136:	f000 fba3 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 13a:	793b      	ldrb	r3, [r7, #4]
 13c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 140:	b2db      	uxtb	r3, r3
 142:	461a      	mov	r2, r3
 144:	2120      	movs	r1, #32
 146:	4804      	ldr	r0, [pc, #16]	; (158 <set_aom_atten+0x9c>)
 148:	f000 fb9a 	bl	880 <__HAL_GPIO_WritePin_veneer>
}
 14c:	bf00      	nop
 14e:	3708      	adds	r7, #8
 150:	46bd      	mov	sp, r7
 152:	bd80      	pop	{r7, pc}
 154:	58020c00 	.word	0x58020c00
 158:	58021000 	.word	0x58021000

0000015c <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
 15c:	b580      	push	{r7, lr}
 15e:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 160:	f240 1103 	movw	r1, #259	; 0x103
 164:	4821      	ldr	r0, [pc, #132]	; (1ec <start_pop+0x90>)
 166:	f000 fb6b 	bl	840 <__HAL_HRTIM_WaveformOutputStart_veneer>
 16a:	4603      	mov	r3, r0
 16c:	2b00      	cmp	r3, #0
 16e:	d004      	beq.n	17a <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
 170:	481f      	ldr	r0, [pc, #124]	; (1f0 <start_pop+0x94>)
 172:	f000 fb6d 	bl	850 <__puts_veneer>
		Error_Handler();
 176:	f000 fb87 	bl	888 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 17a:	2302      	movs	r3, #2
 17c:	2202      	movs	r2, #2
 17e:	2100      	movs	r1, #0
 180:	481a      	ldr	r0, [pc, #104]	; (1ec <start_pop+0x90>)
 182:	f000 fb79 	bl	878 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 186:	4603      	mov	r3, r0
 188:	2b00      	cmp	r3, #0
 18a:	d004      	beq.n	196 <start_pop+0x3a>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		printf("POP failure point C!\r\n");
 18c:	4819      	ldr	r0, [pc, #100]	; (1f4 <start_pop+0x98>)
 18e:	f000 fb5f 	bl	850 <__puts_veneer>
		Error_Handler();
 192:	f000 fb79 	bl	888 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000);
 196:	4b18      	ldr	r3, [pc, #96]	; (1f8 <start_pop+0x9c>)
 198:	681b      	ldr	r3, [r3, #0]
 19a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 19e:	4618      	mov	r0, r3
 1a0:	f7ff ff5e 	bl	60 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 1a4:	2301      	movs	r3, #1
 1a6:	2202      	movs	r2, #2
 1a8:	2100      	movs	r1, #0
 1aa:	4810      	ldr	r0, [pc, #64]	; (1ec <start_pop+0x90>)
 1ac:	f000 fb64 	bl	878 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 1b0:	4603      	mov	r3, r0
 1b2:	2b00      	cmp	r3, #0
 1b4:	d004      	beq.n	1c0 <start_pop+0x64>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		printf("POP failure point D!\r\n");
 1b6:	4811      	ldr	r0, [pc, #68]	; (1fc <start_pop+0xa0>)
 1b8:	f000 fb4a 	bl	850 <__puts_veneer>
		Error_Handler();
 1bc:	f000 fb64 	bl	888 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 1c0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 1c4:	4809      	ldr	r0, [pc, #36]	; (1ec <start_pop+0x90>)
 1c6:	f000 fb4b 	bl	860 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 1ca:	4603      	mov	r3, r0
 1cc:	2b00      	cmp	r3, #0
 1ce:	d004      	beq.n	1da <start_pop+0x7e>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 1d0:	480b      	ldr	r0, [pc, #44]	; (200 <_Min_Heap_Size>)
 1d2:	f000 fb3d 	bl	850 <__puts_veneer>
		Error_Handler();
 1d6:	f000 fb57 	bl	888 <__Error_Handler_veneer>
	}

	pop_running = true;
 1da:	4b0a      	ldr	r3, [pc, #40]	; (204 <_Min_Heap_Size+0x4>)
 1dc:	2201      	movs	r2, #1
 1de:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 1e0:	4809      	ldr	r0, [pc, #36]	; (208 <_Min_Heap_Size+0x8>)
 1e2:	f000 fb35 	bl	850 <__puts_veneer>

}
 1e6:	bf00      	nop
 1e8:	bd80      	pop	{r7, pc}
 1ea:	bf00      	nop
 1ec:	2000023c 	.word	0x2000023c
 1f0:	0800c270 	.word	0x0800c270
 1f4:	0800c288 	.word	0x0800c288
 1f8:	20000000 	.word	0x20000000
 1fc:	0800c2a0 	.word	0x0800c2a0
 200:	0800c2b8 	.word	0x0800c2b8
 204:	2000047c 	.word	0x2000047c
 208:	0800c2d0 	.word	0x0800c2d0

0000020c <stop_pop>:
static void stop_pop() {
 20c:	b580      	push	{r7, lr}
 20e:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 210:	f240 1103 	movw	r1, #259	; 0x103
 214:	4813      	ldr	r0, [pc, #76]	; (264 <stop_pop+0x58>)
 216:	f000 fb0f 	bl	838 <__HAL_HRTIM_WaveformOutputStop_veneer>
 21a:	4603      	mov	r3, r0
 21c:	2b00      	cmp	r3, #0
 21e:	d004      	beq.n	22a <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 220:	4811      	ldr	r0, [pc, #68]	; (268 <stop_pop+0x5c>)
 222:	f000 fb15 	bl	850 <__puts_veneer>
		Error_Handler();
 226:	f000 fb2f 	bl	888 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 22a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 22e:	480d      	ldr	r0, [pc, #52]	; (264 <stop_pop+0x58>)
 230:	f000 fb12 	bl	858 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 234:	4603      	mov	r3, r0
 236:	2b00      	cmp	r3, #0
 238:	d004      	beq.n	244 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 23a:	480c      	ldr	r0, [pc, #48]	; (26c <stop_pop+0x60>)
 23c:	f000 fb08 	bl	850 <__puts_veneer>
		Error_Handler();
 240:	f000 fb22 	bl	888 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 244:	4b0a      	ldr	r3, [pc, #40]	; (270 <stop_pop+0x64>)
 246:	2200      	movs	r2, #0
 248:	601a      	str	r2, [r3, #0]
	pop_running = false;
 24a:	4b0a      	ldr	r3, [pc, #40]	; (274 <stop_pop+0x68>)
 24c:	2200      	movs	r2, #0
 24e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 250:	2200      	movs	r2, #0
 252:	2102      	movs	r1, #2
 254:	4808      	ldr	r0, [pc, #32]	; (278 <stop_pop+0x6c>)
 256:	f000 fb13 	bl	880 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 25a:	4808      	ldr	r0, [pc, #32]	; (27c <stop_pop+0x70>)
 25c:	f000 faf8 	bl	850 <__puts_veneer>
}
 260:	bf00      	nop
 262:	bd80      	pop	{r7, pc}
 264:	2000023c 	.word	0x2000023c
 268:	0800c2e4 	.word	0x0800c2e4
 26c:	0800c2fc 	.word	0x0800c2fc
 270:	20000480 	.word	0x20000480
 274:	2000047c 	.word	0x2000047c
 278:	58021000 	.word	0x58021000
 27c:	0800c314 	.word	0x0800c314

00000280 <synth_writereg>:
extern uint32_t start_timer(TIM_TypeDef * timer);
extern uint32_t stop_timer(TIM_TypeDef * timer);
extern void timer_delay(TIM_TypeDef *timer, uint32_t delay_us);
extern void Error_Handler(void);

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
 280:	b580      	push	{r7, lr}
 282:	b08a      	sub	sp, #40	; 0x28
 284:	af00      	add	r7, sp, #0
 286:	60f8      	str	r0, [r7, #12]
 288:	60b9      	str	r1, [r7, #8]
 28a:	607a      	str	r2, [r7, #4]
 28c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
 28e:	2300      	movs	r3, #0
 290:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	021a      	lsls	r2, r3, #8
 296:	68bb      	ldr	r3, [r7, #8]
 298:	00db      	lsls	r3, r3, #3
 29a:	4313      	orrs	r3, r2
 29c:	687a      	ldr	r2, [r7, #4]
 29e:	4313      	orrs	r3, r2
 2a0:	61fb      	str	r3, [r7, #28]

	//printf("SPI BYTES WRITTEN: 0x%08x \r\n", write_data);

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2a2:	2200      	movs	r2, #0
 2a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 2a8:	4830      	ldr	r0, [pc, #192]	; (36c <synth_writereg+0xec>)
 2aa:	f000 fae9 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
 2ae:	2200      	movs	r2, #0
 2b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 2b4:	482d      	ldr	r0, [pc, #180]	; (36c <synth_writereg+0xec>)
 2b6:	f000 fae3 	bl	880 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 2ba:	2300      	movs	r3, #0
 2bc:	623b      	str	r3, [r7, #32]
 2be:	e036      	b.n	32e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
 2c0:	2220      	movs	r2, #32
 2c2:	6a3b      	ldr	r3, [r7, #32]
 2c4:	1ad3      	subs	r3, r2, r3
 2c6:	3b01      	subs	r3, #1
 2c8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
 2ca:	2201      	movs	r2, #1
 2cc:	697b      	ldr	r3, [r7, #20]
 2ce:	fa02 f303 	lsl.w	r3, r2, r3
 2d2:	461a      	mov	r2, r3
 2d4:	69fb      	ldr	r3, [r7, #28]
 2d6:	4013      	ands	r3, r2
 2d8:	2b00      	cmp	r3, #0
 2da:	bf14      	ite	ne
 2dc:	2301      	movne	r3, #1
 2de:	2300      	moveq	r3, #0
 2e0:	b2db      	uxtb	r3, r3
 2e2:	461a      	mov	r2, r3
 2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 2e8:	4820      	ldr	r0, [pc, #128]	; (36c <synth_writereg+0xec>)
 2ea:	f000 fac9 	bl	880 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
 2ee:	2201      	movs	r2, #1
 2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 2f4:	481d      	ldr	r0, [pc, #116]	; (36c <synth_writereg+0xec>)
 2f6:	f000 fac3 	bl	880 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2fa:	2200      	movs	r2, #0
 2fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 300:	481a      	ldr	r0, [pc, #104]	; (36c <synth_writereg+0xec>)
 302:	f000 fabd 	bl	880 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
 306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 30a:	4818      	ldr	r0, [pc, #96]	; (36c <synth_writereg+0xec>)
 30c:	f000 fab0 	bl	870 <__HAL_GPIO_ReadPin_veneer>
 310:	4603      	mov	r3, r0
 312:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
 314:	2220      	movs	r2, #32
 316:	6a3b      	ldr	r3, [r7, #32]
 318:	1ad3      	subs	r3, r2, r3
 31a:	3b01      	subs	r3, #1
 31c:	fa01 f303 	lsl.w	r3, r1, r3
 320:	461a      	mov	r2, r3
		read_data = read_data
 322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 324:	4313      	orrs	r3, r2
 326:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 328:	6a3b      	ldr	r3, [r7, #32]
 32a:	3301      	adds	r3, #1
 32c:	623b      	str	r3, [r7, #32]
 32e:	2220      	movs	r2, #32
 330:	6a3b      	ldr	r3, [r7, #32]
 332:	4293      	cmp	r3, r2
 334:	d3c4      	bcc.n	2c0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
 336:	2201      	movs	r2, #1
 338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 33c:	480b      	ldr	r0, [pc, #44]	; (36c <synth_writereg+0xec>)
 33e:	f000 fa9f 	bl	880 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
 342:	78fb      	ldrb	r3, [r7, #3]
 344:	2b00      	cmp	r3, #0
 346:	d00c      	beq.n	362 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
 348:	68b8      	ldr	r0, [r7, #8]
 34a:	f000 f813 	bl	374 <synth_readreg>
 34e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
 350:	69ba      	ldr	r2, [r7, #24]
 352:	68fb      	ldr	r3, [r7, #12]
 354:	429a      	cmp	r2, r3
 356:	d004      	beq.n	362 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
 358:	4805      	ldr	r0, [pc, #20]	; (370 <synth_writereg+0xf0>)
 35a:	f000 fa79 	bl	850 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
 35e:	f000 fa93 	bl	888 <__Error_Handler_veneer>
		}
	}

	return read_data;
 362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 364:	4618      	mov	r0, r3
 366:	3728      	adds	r7, #40	; 0x28
 368:	46bd      	mov	sp, r7
 36a:	bd80      	pop	{r7, pc}
 36c:	58020800 	.word	0x58020800
 370:	0800c48c 	.word	0x0800c48c

00000374 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
 374:	b580      	push	{r7, lr}
 376:	b084      	sub	sp, #16
 378:	af00      	add	r7, sp, #0
 37a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, false); // First cycle to send the read address
 37c:	2300      	movs	r3, #0
 37e:	2200      	movs	r2, #0
 380:	2100      	movs	r1, #0
 382:	6878      	ldr	r0, [r7, #4]
 384:	f7ff ff7c 	bl	280 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, false);  // Data returned on the second cycle
 388:	2300      	movs	r3, #0
 38a:	2200      	movs	r2, #0
 38c:	2100      	movs	r1, #0
 38e:	6878      	ldr	r0, [r7, #4]
 390:	f7ff ff76 	bl	280 <synth_writereg>
 394:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 396:	68fb      	ldr	r3, [r7, #12]
 398:	0a1b      	lsrs	r3, r3, #8

}
 39a:	4618      	mov	r0, r3
 39c:	3710      	adds	r7, #16
 39e:	46bd      	mov	sp, r7
 3a0:	bd80      	pop	{r7, pc}

000003a2 <init_synthesiser>:

uint32_t init_synthesiser() {
 3a2:	b580      	push	{r7, lr}
 3a4:	b082      	sub	sp, #8
 3a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the lock LED
 3a8:	2200      	movs	r2, #0
 3aa:	2102      	movs	r1, #2
 3ac:	4835      	ldr	r0, [pc, #212]	; (484 <_Min_Stack_Size+0x84>)
 3ae:	f000 fa67 	bl	880 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 3b2:	2200      	movs	r2, #0
 3b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 3b8:	4833      	ldr	r0, [pc, #204]	; (488 <_Min_Stack_Size+0x88>)
 3ba:	f000 fa61 	bl	880 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 3be:	2201      	movs	r2, #1
 3c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 3c4:	4830      	ldr	r0, [pc, #192]	; (488 <_Min_Stack_Size+0x88>)
 3c6:	f000 fa5b 	bl	880 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 3ca:	2201      	movs	r2, #1
 3cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 3d0:	482d      	ldr	r0, [pc, #180]	; (488 <_Min_Stack_Size+0x88>)
 3d2:	f000 fa55 	bl	880 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 3d6:	2064      	movs	r0, #100	; 0x64
 3d8:	f000 fa46 	bl	868 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, 0x0, 0x0, false); // Soft reset.
 3dc:	2300      	movs	r3, #0
 3de:	2200      	movs	r2, #0
 3e0:	2100      	movs	r1, #0
 3e2:	2020      	movs	r0, #32
 3e4:	f7ff ff4c 	bl	280 <synth_writereg>
	synth_writereg(0x41BFFF, 0x08, 0x0, true); // Set the SDO output level to 3.3 Volts
 3e8:	2301      	movs	r3, #1
 3ea:	2200      	movs	r2, #0
 3ec:	2108      	movs	r1, #8
 3ee:	4827      	ldr	r0, [pc, #156]	; (48c <_Min_Stack_Size+0x8c>)
 3f0:	f7ff ff46 	bl	280 <synth_writereg>

	uint32_t read_data = synth_readreg(0x00); // Read the ID register to check the chip is communicating
 3f4:	2000      	movs	r0, #0
 3f6:	f7ff ffbd 	bl	374 <synth_readreg>
 3fa:	6078      	str	r0, [r7, #4]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 3fc:	4a24      	ldr	r2, [pc, #144]	; (490 <_Min_Stack_Size+0x90>)
 3fe:	687b      	ldr	r3, [r7, #4]
 400:	4293      	cmp	r3, r2
 402:	d00a      	beq.n	41a <_Min_Stack_Size+0x1a>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 404:	2200      	movs	r2, #0
 406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 40a:	481f      	ldr	r0, [pc, #124]	; (488 <_Min_Stack_Size+0x88>)
 40c:	f000 fa38 	bl	880 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 410:	4820      	ldr	r0, [pc, #128]	; (494 <_Min_Stack_Size+0x94>)
 412:	f000 fa1d 	bl	850 <__puts_veneer>
		return ERROR;
 416:	2301      	movs	r3, #1
 418:	e030      	b.n	47c <_Min_Stack_Size+0x7c>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 41a:	481f      	ldr	r0, [pc, #124]	; (498 <_Min_Stack_Size+0x98>)
 41c:	f000 fa18 	bl	850 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(0x17); // Get the current value of the modes register
 420:	2017      	movs	r0, #23
 422:	f7ff ffa7 	bl	374 <synth_readreg>
 426:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 428:	687b      	ldr	r3, [r7, #4]
 42a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 42e:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, 0x17, 0x0, true); // Send
 430:	2301      	movs	r3, #1
 432:	2200      	movs	r2, #0
 434:	2117      	movs	r1, #23
 436:	6878      	ldr	r0, [r7, #4]
 438:	f7ff ff22 	bl	280 <synth_writereg>
	//read_data = synth_readreg(0x7); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, 0x07, 0x0, true); // Update the VCO divide register.

	synth_writereg(1, 0x02, 0x0, true); // Reference divider setting.
 43c:	2301      	movs	r3, #1
 43e:	2200      	movs	r2, #0
 440:	2102      	movs	r1, #2
 442:	2001      	movs	r0, #1
 444:	f7ff ff1c 	bl	280 <synth_writereg>

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(0x16); // Get the current value
 448:	2016      	movs	r0, #22
 44a:	f7ff ff93 	bl	374 <synth_readreg>
 44e:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 450:	687b      	ldr	r3, [r7, #4]
 452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 456:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 458:	687b      	ldr	r3, [r7, #4]
 45a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 45e:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 460:	687b      	ldr	r3, [r7, #4]
 462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 466:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, 0x07, 0x0, true); // Send
 468:	2301      	movs	r3, #1
 46a:	2200      	movs	r2, #0
 46c:	2107      	movs	r1, #7
 46e:	6878      	ldr	r0, [r7, #4]
 470:	f7ff ff06 	bl	280 <synth_writereg>
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 474:	200a      	movs	r0, #10
 476:	f000 f9f7 	bl	868 <__HAL_Delay_veneer>

	return SUCCESS;
 47a:	2300      	movs	r3, #0

}
 47c:	4618      	mov	r0, r3
 47e:	3708      	adds	r7, #8
 480:	46bd      	mov	sp, r7
 482:	bd80      	pop	{r7, pc}
 484:	58021000 	.word	0x58021000
 488:	58020800 	.word	0x58020800
 48c:	0041bfff 	.word	0x0041bfff
 490:	00c7701a 	.word	0x00c7701a
 494:	0800c4a4 	.word	0x0800c4a4
 498:	0800c4c0 	.word	0x0800c4c0

0000049c <check_lock>:

static const bool check_lock(uint32_t timeout) {
 49c:	b580      	push	{r7, lr}
 49e:	b084      	sub	sp, #16
 4a0:	af00      	add	r7, sp, #0
 4a2:	6078      	str	r0, [r7, #4]

	bool locked = false;
 4a4:	2300      	movs	r3, #0
 4a6:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 4a8:	4b16      	ldr	r3, [pc, #88]	; (504 <check_lock+0x68>)
 4aa:	681b      	ldr	r3, [r3, #0]
 4ac:	4618      	mov	r0, r3
 4ae:	f7ff fda7 	bl	0 <start_timer>
 4b2:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 4b4:	e014      	b.n	4e0 <check_lock+0x44>
		locked = synth_readreg(0x12) & (1UL << 1);
 4b6:	2012      	movs	r0, #18
 4b8:	f7ff ff5c 	bl	374 <synth_readreg>
 4bc:	4603      	mov	r3, r0
 4be:	f003 0302 	and.w	r3, r3, #2
 4c2:	2b00      	cmp	r3, #0
 4c4:	bf14      	ite	ne
 4c6:	2301      	movne	r3, #1
 4c8:	2300      	moveq	r3, #0
 4ca:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 4cc:	7bfb      	ldrb	r3, [r7, #15]
 4ce:	2b00      	cmp	r3, #0
 4d0:	d006      	beq.n	4e0 <check_lock+0x44>
			stop_timer(FAST_TIMER);
 4d2:	4b0c      	ldr	r3, [pc, #48]	; (504 <check_lock+0x68>)
 4d4:	681b      	ldr	r3, [r3, #0]
 4d6:	4618      	mov	r0, r3
 4d8:	f7ff fdb0 	bl	3c <stop_timer>
			return true;
 4dc:	2301      	movs	r3, #1
 4de:	e00d      	b.n	4fc <check_lock+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 4e0:	4b08      	ldr	r3, [pc, #32]	; (504 <check_lock+0x68>)
 4e2:	681b      	ldr	r3, [r3, #0]
 4e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 4e6:	68bb      	ldr	r3, [r7, #8]
 4e8:	1ad3      	subs	r3, r2, r3
 4ea:	687a      	ldr	r2, [r7, #4]
 4ec:	429a      	cmp	r2, r3
 4ee:	d8e2      	bhi.n	4b6 <check_lock+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 4f0:	4b04      	ldr	r3, [pc, #16]	; (504 <check_lock+0x68>)
 4f2:	681b      	ldr	r3, [r3, #0]
 4f4:	4618      	mov	r0, r3
 4f6:	f7ff fda1 	bl	3c <stop_timer>
	return false;
 4fa:	2300      	movs	r3, #0
}
 4fc:	4618      	mov	r0, r3
 4fe:	3710      	adds	r7, #16
 500:	46bd      	mov	sp, r7
 502:	bd80      	pop	{r7, pc}
 504:	20000004 	.word	0x20000004

00000508 <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 508:	b580      	push	{r7, lr}
 50a:	b086      	sub	sp, #24
 50c:	af00      	add	r7, sp, #0
 50e:	60f8      	str	r0, [r7, #12]
 510:	60b9      	str	r1, [r7, #8]
 512:	607a      	str	r2, [r7, #4]
 514:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 516:	2300      	movs	r3, #0
 518:	617b      	str	r3, [r7, #20]

	if (mute) {
 51a:	78fb      	ldrb	r3, [r7, #3]
 51c:	2b00      	cmp	r3, #0
 51e:	d00d      	beq.n	53c <set_frequency+0x34>
		/* Mute the outputs */
		read_data = synth_readreg(0x16); // Get the current value.
 520:	2016      	movs	r0, #22
 522:	f7ff ff27 	bl	374 <synth_readreg>
 526:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 528:	697b      	ldr	r3, [r7, #20]
 52a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 52e:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
 530:	2301      	movs	r3, #1
 532:	2200      	movs	r2, #0
 534:	2116      	movs	r1, #22
 536:	6978      	ldr	r0, [r7, #20]
 538:	f7ff fea2 	bl	280 <synth_writereg>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 53c:	4b2e      	ldr	r3, [pc, #184]	; (5f8 <set_frequency+0xf0>)
 53e:	681b      	ldr	r3, [r3, #0]
 540:	f1b3 3fff 	cmp.w	r3, #4294967295
 544:	d004      	beq.n	550 <set_frequency+0x48>
 546:	4b2c      	ldr	r3, [pc, #176]	; (5f8 <set_frequency+0xf0>)
 548:	681b      	ldr	r3, [r3, #0]
 54a:	68fa      	ldr	r2, [r7, #12]
 54c:	429a      	cmp	r2, r3
 54e:	d008      	beq.n	562 <set_frequency+0x5a>
		synth_writereg(integer, 0x03, 0x0, true);   // Integer register.
 550:	2301      	movs	r3, #1
 552:	2200      	movs	r2, #0
 554:	2103      	movs	r1, #3
 556:	68f8      	ldr	r0, [r7, #12]
 558:	f7ff fe92 	bl	280 <synth_writereg>
		last_integer = integer;
 55c:	4a26      	ldr	r2, [pc, #152]	; (5f8 <set_frequency+0xf0>)
 55e:	68fb      	ldr	r3, [r7, #12]
 560:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 562:	4b26      	ldr	r3, [pc, #152]	; (5fc <set_frequency+0xf4>)
 564:	681b      	ldr	r3, [r3, #0]
 566:	f1b3 3fff 	cmp.w	r3, #4294967295
 56a:	d004      	beq.n	576 <set_frequency+0x6e>
 56c:	4b23      	ldr	r3, [pc, #140]	; (5fc <set_frequency+0xf4>)
 56e:	681b      	ldr	r3, [r3, #0]
 570:	68ba      	ldr	r2, [r7, #8]
 572:	429a      	cmp	r2, r3
 574:	d008      	beq.n	588 <set_frequency+0x80>
		synth_writereg(fraction, 0x04, 0x0, true);  // Fractional register.
 576:	2301      	movs	r3, #1
 578:	2200      	movs	r2, #0
 57a:	2104      	movs	r1, #4
 57c:	68b8      	ldr	r0, [r7, #8]
 57e:	f7ff fe7f 	bl	280 <synth_writereg>
		last_fraction = fraction;
 582:	4a1e      	ldr	r2, [pc, #120]	; (5fc <set_frequency+0xf4>)
 584:	68bb      	ldr	r3, [r7, #8]
 586:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
 588:	4b1d      	ldr	r3, [pc, #116]	; (600 <set_frequency+0xf8>)
 58a:	681b      	ldr	r3, [r3, #0]
 58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 590:	d004      	beq.n	59c <set_frequency+0x94>
 592:	4b1b      	ldr	r3, [pc, #108]	; (600 <set_frequency+0xf8>)
 594:	681b      	ldr	r3, [r3, #0]
 596:	687a      	ldr	r2, [r7, #4]
 598:	429a      	cmp	r2, r3
 59a:	d014      	beq.n	5c6 <set_frequency+0xbe>
		read_data = synth_readreg(0x16); // Get the current value.
 59c:	2016      	movs	r0, #22
 59e:	f7ff fee9 	bl	374 <synth_readreg>
 5a2:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 5a4:	697b      	ldr	r3, [r7, #20]
 5a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 5aa:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will un-mute the outputs */
 5ac:	697a      	ldr	r2, [r7, #20]
 5ae:	687b      	ldr	r3, [r7, #4]
 5b0:	4313      	orrs	r3, r2
 5b2:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
 5b4:	2301      	movs	r3, #1
 5b6:	2200      	movs	r2, #0
 5b8:	2116      	movs	r1, #22
 5ba:	6978      	ldr	r0, [r7, #20]
 5bc:	f7ff fe60 	bl	280 <synth_writereg>
		last_vcodiv = vco_divider;
 5c0:	4a0f      	ldr	r2, [pc, #60]	; (600 <set_frequency+0xf8>)
 5c2:	687b      	ldr	r3, [r7, #4]
 5c4:	6013      	str	r3, [r2, #0]
	}

	if (!check_lock(LOCK_WAIT_US)) {
 5c6:	230a      	movs	r3, #10
 5c8:	4618      	mov	r0, r3
 5ca:	f7ff ff67 	bl	49c <check_lock>
 5ce:	4603      	mov	r3, r0
 5d0:	f083 0301 	eor.w	r3, r3, #1
 5d4:	b2db      	uxtb	r3, r3
 5d6:	2b00      	cmp	r3, #0
 5d8:	d009      	beq.n	5ee <set_frequency+0xe6>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 5da:	2200      	movs	r2, #0
 5dc:	2102      	movs	r1, #2
 5de:	4809      	ldr	r0, [pc, #36]	; (604 <set_frequency+0xfc>)
 5e0:	f000 f94e 	bl	880 <__HAL_GPIO_WritePin_veneer>
		printf("Lock failed!\r\n");
 5e4:	4808      	ldr	r0, [pc, #32]	; (608 <set_frequency+0x100>)
 5e6:	f000 f933 	bl	850 <__puts_veneer>
		Error_Handler();
 5ea:	f000 f94d 	bl	888 <__Error_Handler_veneer>
	}

}
 5ee:	bf00      	nop
 5f0:	3718      	adds	r7, #24
 5f2:	46bd      	mov	sp, r7
 5f4:	bd80      	pop	{r7, pc}
 5f6:	bf00      	nop
 5f8:	20000008 	.word	0x20000008
 5fc:	2000000c 	.word	0x2000000c
 600:	20000010 	.word	0x20000010
 604:	58021000 	.word	0x58021000
 608:	0800c4d4 	.word	0x0800c4d4

0000060c <set_frequency_hz>:

void set_frequency_hz(const double fo) {
 60c:	b580      	push	{r7, lr}
 60e:	b08e      	sub	sp, #56	; 0x38
 610:	af02      	add	r7, sp, #8
 612:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 616:	ed9f 5b56 	vldr	d5, [pc, #344]	; 770 <set_frequency_hz+0x164>
 61a:	ed97 6b00 	vldr	d6, [r7]
 61e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 622:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 626:	ee17 3a90 	vmov	r3, s15
 62a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (k != 1) {
 62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 62e:	2b01      	cmp	r3, #1
 630:	d00b      	beq.n	64a <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 632:	e002      	b.n	63a <set_frequency_hz+0x2e>
			k = k - 1;
 634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 636:	3b01      	subs	r3, #1
 638:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (k > 62 || k % 2) {
 63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 63c:	2b3e      	cmp	r3, #62	; 0x3e
 63e:	d8f9      	bhi.n	634 <set_frequency_hz+0x28>
 640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 642:	f003 0301 	and.w	r3, r3, #1
 646:	2b00      	cmp	r3, #0
 648:	d1f4      	bne.n	634 <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 64c:	ee07 3a90 	vmov	s15, r3
 650:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 654:	ed97 7b00 	vldr	d7, [r7]
 658:	ee26 6b07 	vmul.f64	d6, d6, d7
 65c:	ed9f 5b46 	vldr	d5, [pc, #280]	; 778 <set_frequency_hz+0x16c>
 660:	ee86 7b05 	vdiv.f64	d7, d6, d5
 664:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 668:	ed97 7b08 	vldr	d7, [r7, #32]
 66c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 670:	ee17 3a90 	vmov	r3, s15
 674:	61fb      	str	r3, [r7, #28]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 676:	69fb      	ldr	r3, [r7, #28]
 678:	ee07 3a90 	vmov	s15, r3
 67c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 680:	ed97 6b08 	vldr	d6, [r7, #32]
 684:	ee36 7b47 	vsub.f64	d7, d6, d7
 688:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 780 <set_frequency_hz+0x174>
 68c:	ee27 7b06 	vmul.f64	d7, d7, d6
 690:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 694:	ee37 7b06 	vadd.f64	d7, d7, d6
 698:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 69c:	ee17 3a90 	vmov	r3, s15
 6a0:	61bb      	str	r3, [r7, #24]
	const double fo_check = (REF_FREQ * (NINT + (NFRAC / (double) (1 << 24)))) / k;
 6a2:	69fb      	ldr	r3, [r7, #28]
 6a4:	ee07 3a90 	vmov	s15, r3
 6a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 6ac:	69bb      	ldr	r3, [r7, #24]
 6ae:	ee07 3a90 	vmov	s15, r3
 6b2:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 6b6:	ed9f 4b32 	vldr	d4, [pc, #200]	; 780 <set_frequency_hz+0x174>
 6ba:	ee85 7b04 	vdiv.f64	d7, d5, d4
 6be:	ee36 7b07 	vadd.f64	d7, d6, d7
 6c2:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 778 <set_frequency_hz+0x16c>
 6c6:	ee27 5b06 	vmul.f64	d5, d7, d6
 6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 6cc:	ee07 3a90 	vmov	s15, r3
 6d0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 6d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 6d8:	ed87 7b04 	vstr	d7, [r7, #16]

#ifdef MW_F_CHECK
	const double fo_error = fo - fo_check;
 6dc:	ed97 6b00 	vldr	d6, [r7]
 6e0:	ed97 7b04 	vldr	d7, [r7, #16]
 6e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 6e8:	ed87 7b02 	vstr	d7, [r7, #8]
	//add "-u _printf_float" to GCC linker flags to enable printf float support
	printf("Frequency requested: %.17g Hz\r\n", fo);
 6ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 6f0:	4825      	ldr	r0, [pc, #148]	; (788 <set_frequency_hz+0x17c>)
 6f2:	f000 f8a9 	bl	848 <__printf_veneer>
	printf("Setting frequency: k=%ld; N=%.17g; NINT=%ld; NFRAC=%ld\r\n", k,N, NINT, NFRAC);
 6f6:	69bb      	ldr	r3, [r7, #24]
 6f8:	9301      	str	r3, [sp, #4]
 6fa:	69fb      	ldr	r3, [r7, #28]
 6fc:	9300      	str	r3, [sp, #0]
 6fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 704:	4821      	ldr	r0, [pc, #132]	; (78c <set_frequency_hz+0x180>)
 706:	f000 f89f 	bl	848 <__printf_veneer>
	printf("Frequency error: %.4g Hz\r\n", fo_error);
 70a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 70e:	4820      	ldr	r0, [pc, #128]	; (790 <set_frequency_hz+0x184>)
 710:	f000 f89a 	bl	848 <__printf_veneer>
	if ((fo_error > 3) | (fo_error < -3)) {
 714:	ed97 7b02 	vldr	d7, [r7, #8]
 718:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 71c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 724:	bfcc      	ite	gt
 726:	2301      	movgt	r3, #1
 728:	2300      	movle	r3, #0
 72a:	b2da      	uxtb	r2, r3
 72c:	ed97 7b02 	vldr	d7, [r7, #8]
 730:	eeb8 6b08 	vmov.f64	d6, #136	; 0xc0400000 -3.0
 734:	eeb4 7bc6 	vcmpe.f64	d7, d6
 738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 73c:	bf4c      	ite	mi
 73e:	2301      	movmi	r3, #1
 740:	2300      	movpl	r3, #0
 742:	b2db      	uxtb	r3, r3
 744:	4313      	orrs	r3, r2
 746:	b2db      	uxtb	r3, r3
 748:	2b00      	cmp	r3, #0
 74a:	d004      	beq.n	756 <set_frequency_hz+0x14a>
		printf("Failed to establish synthesiser frequency accurately\r\n");
 74c:	4811      	ldr	r0, [pc, #68]	; (794 <set_frequency_hz+0x188>)
 74e:	f000 f87f 	bl	850 <__puts_veneer>
		Error_Handler();
 752:	f000 f899 	bl	888 <__Error_Handler_veneer>
	}
#endif

	set_frequency(NINT, NFRAC, k, false);
 756:	2300      	movs	r3, #0
 758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 75a:	69b9      	ldr	r1, [r7, #24]
 75c:	69f8      	ldr	r0, [r7, #28]
 75e:	f7ff fed3 	bl	508 <set_frequency>

}
 762:	bf00      	nop
 764:	3730      	adds	r7, #48	; 0x30
 766:	46bd      	mov	sp, r7
 768:	bd80      	pop	{r7, pc}
 76a:	bf00      	nop
 76c:	f3af 8000 	nop.w
 770:	20000000 	.word	0x20000000
 774:	41ee8c21 	.word	0x41ee8c21
 778:	00000000 	.word	0x00000000
 77c:	4187d784 	.word	0x4187d784
 780:	00000000 	.word	0x00000000
 784:	41700000 	.word	0x41700000
 788:	0800c4e4 	.word	0x0800c4e4
 78c:	0800c504 	.word	0x0800c504
 790:	0800c540 	.word	0x0800c540
 794:	0800c55c 	.word	0x0800c55c

00000798 <run_sweep>:

void run_sweep() {
 798:	b580      	push	{r7, lr}
 79a:	b084      	sub	sp, #16
 79c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 79e:	2201      	movs	r2, #1
 7a0:	2102      	movs	r1, #2
 7a2:	481f      	ldr	r0, [pc, #124]	; (820 <run_sweep+0x88>)
 7a4:	f000 f86c 	bl	880 <__HAL_GPIO_WritePin_veneer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 7a8:	b672      	cpsid	i
}
 7aa:	bf00      	nop
	double dac_val = 0;
#endif

	__disable_irq();

	for (uint32_t i = 0; i < num_points; i++) {
 7ac:	2300      	movs	r3, #0
 7ae:	60fb      	str	r3, [r7, #12]
 7b0:	e01d      	b.n	7ee <run_sweep+0x56>

		double fo = start_freq + (i * sweep_settings.step_size);
 7b2:	68fb      	ldr	r3, [r7, #12]
 7b4:	ee07 3a90 	vmov	s15, r3
 7b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 7bc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 810 <run_sweep+0x78>
 7c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 7c4:	4b17      	ldr	r3, [pc, #92]	; (824 <run_sweep+0x8c>)
 7c6:	ed93 7b00 	vldr	d7, [r3]
 7ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 7ce:	ed87 7b00 	vstr	d7, [r7]
		//set_frequency_hz(fo);
		set_frequency_hz(3035732439);
 7d2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 818 <run_sweep+0x80>
 7d6:	f7ff ff19 	bl	60c <set_frequency_hz>
			printf("DAC setup failed!\r\n");
			Error_Handler();
		}
#endif

		timer_delay(FAST_TIMER, DWELL_TIME_US);
 7da:	4b13      	ldr	r3, [pc, #76]	; (828 <run_sweep+0x90>)
 7dc:	681b      	ldr	r3, [r3, #0]
 7de:	2264      	movs	r2, #100	; 0x64
 7e0:	4611      	mov	r1, r2
 7e2:	4618      	mov	r0, r3
 7e4:	f7ff fc3c 	bl	60 <timer_delay>
	for (uint32_t i = 0; i < num_points; i++) {
 7e8:	68fb      	ldr	r3, [r7, #12]
 7ea:	3301      	adds	r3, #1
 7ec:	60fb      	str	r3, [r7, #12]
 7ee:	4b0f      	ldr	r3, [pc, #60]	; (82c <run_sweep+0x94>)
 7f0:	681b      	ldr	r3, [r3, #0]
 7f2:	68fa      	ldr	r2, [r7, #12]
 7f4:	429a      	cmp	r2, r3
 7f6:	d3dc      	bcc.n	7b2 <run_sweep+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 7f8:	b662      	cpsie	i
}
 7fa:	bf00      	nop

	}

	__enable_irq();

	printf("Total Points: %lu; s\r\n", num_points);
 7fc:	4b0b      	ldr	r3, [pc, #44]	; (82c <run_sweep+0x94>)
 7fe:	681b      	ldr	r3, [r3, #0]
 800:	4619      	mov	r1, r3
 802:	480b      	ldr	r0, [pc, #44]	; (830 <run_sweep+0x98>)
 804:	f000 f820 	bl	848 <__printf_veneer>
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 808:	bf00      	nop
 80a:	3710      	adds	r7, #16
 80c:	46bd      	mov	sp, r7
 80e:	bd80      	pop	{r7, pc}
 810:	00000000 	.word	0x00000000
 814:	4007d784 	.word	0x4007d784
 818:	3ae00000 	.word	0x3ae00000
 81c:	41e69e33 	.word	0x41e69e33
 820:	58021000 	.word	0x58021000
 824:	0800c5c8 	.word	0x0800c5c8
 828:	20000004 	.word	0x20000004
 82c:	0800c5d0 	.word	0x0800c5d0
 830:	0800c594 	.word	0x0800c594
 834:	00000000 	.word	0x00000000

00000838 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 838:	f85f f000 	ldr.w	pc, [pc]	; 83c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 83c:	08003867 	.word	0x08003867

00000840 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 840:	f85f f000 	ldr.w	pc, [pc]	; 844 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 844:	0800380d 	.word	0x0800380d

00000848 <__printf_veneer>:
 848:	f85f f000 	ldr.w	pc, [pc]	; 84c <__printf_veneer+0x4>
 84c:	0800a0cd 	.word	0x0800a0cd

00000850 <__puts_veneer>:
 850:	f85f f000 	ldr.w	pc, [pc]	; 854 <__puts_veneer+0x4>
 854:	0800a1d9 	.word	0x0800a1d9

00000858 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 858:	f85f f000 	ldr.w	pc, [pc]	; 85c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 85c:	080039a1 	.word	0x080039a1

00000860 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 860:	f85f f000 	ldr.w	pc, [pc]	; 864 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 864:	080038c1 	.word	0x080038c1

00000868 <__HAL_Delay_veneer>:
 868:	f85f f000 	ldr.w	pc, [pc]	; 86c <__HAL_Delay_veneer+0x4>
 86c:	08002661 	.word	0x08002661

00000870 <__HAL_GPIO_ReadPin_veneer>:
 870:	f85f f000 	ldr.w	pc, [pc]	; 874 <__HAL_GPIO_ReadPin_veneer+0x4>
 874:	08002f41 	.word	0x08002f41

00000878 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 878:	f85f f000 	ldr.w	pc, [pc]	; 87c <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 87c:	08003621 	.word	0x08003621

00000880 <__HAL_GPIO_WritePin_veneer>:
 880:	f85f f000 	ldr.w	pc, [pc]	; 884 <__HAL_GPIO_WritePin_veneer+0x4>
 884:	08002f71 	.word	0x08002f71

00000888 <__Error_Handler_veneer>:
 888:	f85f f000 	ldr.w	pc, [pc]	; 88c <__Error_Handler_veneer+0x4>
 88c:	08001d59 	.word	0x08001d59

Disassembly of section .text:

08000b30 <__do_global_dtors_aux>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c05      	ldr	r4, [pc, #20]	; (8000b48 <__do_global_dtors_aux+0x18>)
 8000b34:	7823      	ldrb	r3, [r4, #0]
 8000b36:	b933      	cbnz	r3, 8000b46 <__do_global_dtors_aux+0x16>
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__do_global_dtors_aux+0x1c>)
 8000b3a:	b113      	cbz	r3, 8000b42 <__do_global_dtors_aux+0x12>
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <__do_global_dtors_aux+0x20>)
 8000b3e:	f3af 8000 	nop.w
 8000b42:	2301      	movs	r3, #1
 8000b44:	7023      	strb	r3, [r4, #0]
 8000b46:	bd10      	pop	{r4, pc}
 8000b48:	2000020c 	.word	0x2000020c
 8000b4c:	00000000 	.word	0x00000000
 8000b50:	0800c220 	.word	0x0800c220

08000b54 <frame_dummy>:
 8000b54:	b508      	push	{r3, lr}
 8000b56:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <frame_dummy+0x10>)
 8000b58:	b11b      	cbz	r3, 8000b62 <frame_dummy+0xe>
 8000b5a:	4903      	ldr	r1, [pc, #12]	; (8000b68 <frame_dummy+0x14>)
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <frame_dummy+0x18>)
 8000b5e:	f3af 8000 	nop.w
 8000b62:	bd08      	pop	{r3, pc}
 8000b64:	00000000 	.word	0x00000000
 8000b68:	20000210 	.word	0x20000210
 8000b6c:	0800c220 	.word	0x0800c220

08000b70 <strlen>:
 8000b70:	4603      	mov	r3, r0
 8000b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d1fb      	bne.n	8000b72 <strlen+0x2>
 8000b7a:	1a18      	subs	r0, r3, r0
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <memchr>:
 8000b80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b84:	2a10      	cmp	r2, #16
 8000b86:	db2b      	blt.n	8000be0 <memchr+0x60>
 8000b88:	f010 0f07 	tst.w	r0, #7
 8000b8c:	d008      	beq.n	8000ba0 <memchr+0x20>
 8000b8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b92:	3a01      	subs	r2, #1
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d02d      	beq.n	8000bf4 <memchr+0x74>
 8000b98:	f010 0f07 	tst.w	r0, #7
 8000b9c:	b342      	cbz	r2, 8000bf0 <memchr+0x70>
 8000b9e:	d1f6      	bne.n	8000b8e <memchr+0xe>
 8000ba0:	b4f0      	push	{r4, r5, r6, r7}
 8000ba2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000ba6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000baa:	f022 0407 	bic.w	r4, r2, #7
 8000bae:	f07f 0700 	mvns.w	r7, #0
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000bb8:	3c08      	subs	r4, #8
 8000bba:	ea85 0501 	eor.w	r5, r5, r1
 8000bbe:	ea86 0601 	eor.w	r6, r6, r1
 8000bc2:	fa85 f547 	uadd8	r5, r5, r7
 8000bc6:	faa3 f587 	sel	r5, r3, r7
 8000bca:	fa86 f647 	uadd8	r6, r6, r7
 8000bce:	faa5 f687 	sel	r6, r5, r7
 8000bd2:	b98e      	cbnz	r6, 8000bf8 <memchr+0x78>
 8000bd4:	d1ee      	bne.n	8000bb4 <memchr+0x34>
 8000bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000bdc:	f002 0207 	and.w	r2, r2, #7
 8000be0:	b132      	cbz	r2, 8000bf0 <memchr+0x70>
 8000be2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000be6:	3a01      	subs	r2, #1
 8000be8:	ea83 0301 	eor.w	r3, r3, r1
 8000bec:	b113      	cbz	r3, 8000bf4 <memchr+0x74>
 8000bee:	d1f8      	bne.n	8000be2 <memchr+0x62>
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	bf06      	itte	eq
 8000bfc:	4635      	moveq	r5, r6
 8000bfe:	3803      	subeq	r0, #3
 8000c00:	3807      	subne	r0, #7
 8000c02:	f015 0f01 	tst.w	r5, #1
 8000c06:	d107      	bne.n	8000c18 <memchr+0x98>
 8000c08:	3001      	adds	r0, #1
 8000c0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000c0e:	bf02      	ittt	eq
 8000c10:	3001      	addeq	r0, #1
 8000c12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000c16:	3001      	addeq	r0, #1
 8000c18:	bcf0      	pop	{r4, r5, r6, r7}
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b974 	b.w	8000f20 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	4604      	mov	r4, r0
 8000c58:	468e      	mov	lr, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d14d      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	4694      	mov	ip, r2
 8000c62:	d969      	bls.n	8000d38 <__udivmoddi4+0xe8>
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	b152      	cbz	r2, 8000c80 <__udivmoddi4+0x30>
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	f1c2 0120 	rsb	r1, r2, #32
 8000c72:	fa20 f101 	lsr.w	r1, r0, r1
 8000c76:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7e:	4094      	lsls	r4, r2
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	0c21      	lsrs	r1, r4, #16
 8000c86:	fbbe f6f8 	udiv	r6, lr, r8
 8000c8a:	fa1f f78c 	uxth.w	r7, ip
 8000c8e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c96:	fb06 f107 	mul.w	r1, r6, r7
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca6:	f080 811f 	bcs.w	8000ee8 <__udivmoddi4+0x298>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 811c 	bls.w	8000ee8 <__udivmoddi4+0x298>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb00 f707 	mul.w	r7, r0, r7
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x92>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd4:	f080 810a 	bcs.w	8000eec <__udivmoddi4+0x29c>
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	f240 8107 	bls.w	8000eec <__udivmoddi4+0x29c>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce6:	1be4      	subs	r4, r4, r7
 8000ce8:	2600      	movs	r6, #0
 8000cea:	b11d      	cbz	r5, 8000cf4 <__udivmoddi4+0xa4>
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0xc2>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80ef 	beq.w	8000ee2 <__udivmoddi4+0x292>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x160>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xd4>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80f9 	bhi.w	8000f16 <__udivmoddi4+0x2c6>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0e0      	beq.n	8000cf4 <__udivmoddi4+0xa4>
 8000d32:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d36:	e7dd      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000d38:	b902      	cbnz	r2, 8000d3c <__udivmoddi4+0xec>
 8000d3a:	deff      	udf	#255	; 0xff
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	f040 8092 	bne.w	8000e6a <__udivmoddi4+0x21a>
 8000d46:	eba1 010c 	sub.w	r1, r1, ip
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2601      	movs	r6, #1
 8000d54:	0c20      	lsrs	r0, r4, #16
 8000d56:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d5a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d62:	fb0e f003 	mul.w	r0, lr, r3
 8000d66:	4288      	cmp	r0, r1
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x12c>
 8000d6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x12a>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2c0>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	1a09      	subs	r1, r1, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d84:	fb07 1110 	mls	r1, r7, r0, r1
 8000d88:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x156>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x154>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2ca>
 8000da4:	4608      	mov	r0, r1
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dae:	e79c      	b.n	8000cea <__udivmoddi4+0x9a>
 8000db0:	f1c6 0720 	rsb	r7, r6, #32
 8000db4:	40b3      	lsls	r3, r6
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa20 f407 	lsr.w	r4, r0, r7
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	40f9      	lsrs	r1, r7
 8000dca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dce:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd6:	0c20      	lsrs	r0, r4, #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fb09 1118 	mls	r1, r9, r8, r1
 8000de0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de4:	fb08 f00e 	mul.w	r0, r8, lr
 8000de8:	4288      	cmp	r0, r1
 8000dea:	fa02 f206 	lsl.w	r2, r2, r6
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b8>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2bc>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2bc>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	1a09      	subs	r1, r1, r0
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e10:	fb09 1110 	mls	r1, r9, r0, r1
 8000e14:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e1c:	458e      	cmp	lr, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1e2>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2a:	458e      	cmp	lr, r1
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e36:	fba0 9402 	umull	r9, r4, r0, r2
 8000e3a:	eba1 010e 	sub.w	r1, r1, lr
 8000e3e:	42a1      	cmp	r1, r4
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46a6      	mov	lr, r4
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x212>
 8000e4a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e52:	fa01 f707 	lsl.w	r7, r1, r7
 8000e56:	fa22 f306 	lsr.w	r3, r2, r6
 8000e5a:	40f1      	lsrs	r1, r6
 8000e5c:	431f      	orrs	r7, r3
 8000e5e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	f1c2 0320 	rsb	r3, r2, #32
 8000e6e:	40d8      	lsrs	r0, r3
 8000e70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e74:	fa21 f303 	lsr.w	r3, r1, r3
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	4301      	orrs	r1, r0
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e88:	fb07 3610 	mls	r6, r7, r0, r3
 8000e8c:	0c0b      	lsrs	r3, r1, #16
 8000e8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e92:	fb00 f60e 	mul.w	r6, r0, lr
 8000e96:	429e      	cmp	r6, r3
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x260>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b8>
 8000ea8:	429e      	cmp	r6, r3
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b8>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	b289      	uxth	r1, r1
 8000eb4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x28a>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed6:	3e02      	subs	r6, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0x104>
 8000ee2:	462e      	mov	r6, r5
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e705      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	e6e3      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6f8      	b.n	8000ce2 <__udivmoddi4+0x92>
 8000ef0:	454b      	cmp	r3, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f8>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000efc:	3801      	subs	r0, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f8>
 8000f00:	4646      	mov	r6, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x28a>
 8000f04:	4620      	mov	r0, r4
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1e2>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x260>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b8>
 8000f10:	3b02      	subs	r3, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x12c>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e709      	b.n	8000d2e <__udivmoddi4+0xde>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x156>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000f2c:	1d39      	adds	r1, r7, #4
 8000f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f32:	2201      	movs	r2, #1
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <__io_putchar+0x20>)
 8000f36:	f007 fb33 	bl	80085a0 <HAL_UART_Transmit>
	return ch;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200003e8 	.word	0x200003e8

08000f48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]

#ifdef RAMP_DAC
	static bool dac_enabled = false;
#endif

	SystemClock_Config(); // We were in STOP mode so the HSI is selected.
 8000f52:	f000 fa35 	bl	80013c0 <SystemClock_Config>
	HAL_ResumeTick();
 8000f56:	f001 fbb7 	bl	80026c8 <HAL_ResumeTick>
		dac_enabled = true;
	}
#endif

#ifdef SYNTH_ENABLE
	if (!synth_init) {
 8000f5a:	4b42      	ldr	r3, [pc, #264]	; (8001064 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f083 0301 	eor.w	r3, r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00c      	beq.n	8000f82 <HAL_GPIO_EXTI_Callback+0x3a>
		if (init_synthesiser() != SUCCESS) {
 8000f68:	f00b f97a 	bl	800c260 <__init_synthesiser_veneer>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <HAL_GPIO_EXTI_Callback+0x34>
			printf("Synthesiser initialisation failed!\r\n");
 8000f72:	483d      	ldr	r0, [pc, #244]	; (8001068 <HAL_GPIO_EXTI_Callback+0x120>)
 8000f74:	f009 f930 	bl	800a1d8 <puts>
			Error_Handler();
 8000f78:	f000 feee 	bl	8001d58 <Error_Handler>
		}
		synth_init = true;
 8000f7c:	4b39      	ldr	r3, [pc, #228]	; (8001064 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
	}
#endif

	if (GPIO_Pin == GPIO_PIN_13) { // Blue button
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f88:	d169      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x116>
		printf("Blue button pressed....\r\n");
 8000f8a:	4838      	ldr	r0, [pc, #224]	; (800106c <HAL_GPIO_EXTI_Callback+0x124>)
 8000f8c:	f009 f924 	bl	800a1d8 <puts>

		/* If the button is held down for more than one second then run the POP cycle */
		HAL_Delay(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f94:	f001 fb64 	bl	8002660 <HAL_Delay>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4834      	ldr	r0, [pc, #208]	; (8001070 <HAL_GPIO_EXTI_Callback+0x128>)
 8000f9e:	f001 ffcf 	bl	8002f40 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00a      	beq.n	8000fbe <HAL_GPIO_EXTI_Callback+0x76>
			printf("Long press\r\n");
 8000fa8:	4832      	ldr	r0, [pc, #200]	; (8001074 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000faa:	f009 f915 	bl	800a1d8 <puts>
			if (pop_running) {
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <HAL_GPIO_EXTI_Callback+0x130>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d151      	bne.n	800105c <HAL_GPIO_EXTI_Callback+0x114>
				return;
			}

			start_pop();
 8000fb8:	f00b f942 	bl	800c240 <__start_pop_veneer>
 8000fbc:	e04f      	b.n	800105e <HAL_GPIO_EXTI_Callback+0x116>

		} else {
			printf("Short press\r\n");
 8000fbe:	482f      	ldr	r0, [pc, #188]	; (800107c <HAL_GPIO_EXTI_Callback+0x134>)
 8000fc0:	f009 f90a 	bl	800a1d8 <puts>
			/* We want to run CW so stop the POP cycle if it's running */
			if (pop_running) {
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_GPIO_EXTI_Callback+0x130>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x8c>
				stop_pop();
 8000fce:	f00b f93f 	bl	800c250 <__stop_pop_veneer>
 8000fd2:	e044      	b.n	800105e <HAL_GPIO_EXTI_Callback+0x116>
				return;
			}

			/* Set the attenuator for minimum attenuation */
			const struct AttenuatorSettings attenuator_settings = {0,0,0,0,0,0,0}; // 0 dB
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	733b      	strb	r3, [r7, #12]
			set_aom_atten(attenuator_settings);
 8000fd8:	7b38      	ldrb	r0, [r7, #12]
 8000fda:	f00b f935 	bl	800c248 <__set_aom_atten_veneer>

			/* Enable the AOM drive power */
			if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 8000fde:	f240 1103 	movw	r1, #259	; 0x103
 8000fe2:	4827      	ldr	r0, [pc, #156]	; (8001080 <HAL_GPIO_EXTI_Callback+0x138>)
 8000fe4:	f002 fc12 	bl	800380c <HAL_HRTIM_WaveformOutputStart>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <HAL_GPIO_EXTI_Callback+0xb0>
			HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
				printf("Failure point H!\r\n");
 8000fee:	4825      	ldr	r0, [pc, #148]	; (8001084 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000ff0:	f009 f8f2 	bl	800a1d8 <puts>
				Error_Handler();
 8000ff4:	f000 feb0 	bl	8001d58 <Error_Handler>
			}

			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4820      	ldr	r0, [pc, #128]	; (8001080 <HAL_GPIO_EXTI_Callback+0x138>)
 8001000:	f002 fb0e 	bl	8003620 <HAL_HRTIM_WaveformSetOutputLevel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <HAL_GPIO_EXTI_Callback+0xcc>
					HRTIM_TIMERINDEX_TIMER_A,
					HRTIM_OUTPUT_TA1, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
				printf("Failure point I!\r\n");
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <HAL_GPIO_EXTI_Callback+0x140>)
 800100c:	f009 f8e4 	bl	800a1d8 <puts>
				Error_Handler();
 8001010:	f000 fea2 	bl	8001d58 <Error_Handler>
			}

			/* Enable the Microwaves */
			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8001014:	2301      	movs	r3, #1
 8001016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101a:	2104      	movs	r1, #4
 800101c:	4818      	ldr	r0, [pc, #96]	; (8001080 <HAL_GPIO_EXTI_Callback+0x138>)
 800101e:	f002 faff 	bl	8003620 <HAL_HRTIM_WaveformSetOutputLevel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <HAL_GPIO_EXTI_Callback+0xea>
					HRTIM_TIMERINDEX_TIMER_E,
					HRTIM_OUTPUT_TE1, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
				printf("Failure point J!\r\n");
 8001028:	4818      	ldr	r0, [pc, #96]	; (800108c <HAL_GPIO_EXTI_Callback+0x144>)
 800102a:	f009 f8d5 	bl	800a1d8 <puts>
				Error_Handler();
 800102e:	f000 fe93 	bl	8001d58 <Error_Handler>
			};

			/* Run the frequency sweep */
			while (1) {
				printf("Sweep running.\r\n");
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <HAL_GPIO_EXTI_Callback+0x148>)
 8001034:	f009 f8d0 	bl	800a1d8 <puts>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103e:	4815      	ldr	r0, [pc, #84]	; (8001094 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001040:	f001 ff96 	bl	8002f70 <HAL_GPIO_WritePin>
				run_sweep();
 8001044:	f00b f908 	bl	800c258 <__run_sweep_veneer>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001050:	f001 ff8e 	bl	8002f70 <HAL_GPIO_WritePin>
				printf("Sweep complete.\r\n");
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_GPIO_EXTI_Callback+0x150>)
 8001056:	f009 f8bf 	bl	800a1d8 <puts>
				printf("Sweep running.\r\n");
 800105a:	e7ea      	b.n	8001032 <HAL_GPIO_EXTI_Callback+0xea>
				return;
 800105c:	bf00      	nop
			}
		}

	}
}
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000484 	.word	0x20000484
 8001068:	0800c328 	.word	0x0800c328
 800106c:	0800c34c 	.word	0x0800c34c
 8001070:	58020800 	.word	0x58020800
 8001074:	0800c368 	.word	0x0800c368
 8001078:	2000047c 	.word	0x2000047c
 800107c:	0800c374 	.word	0x0800c374
 8001080:	2000023c 	.word	0x2000023c
 8001084:	0800c384 	.word	0x0800c384
 8001088:	0800c398 	.word	0x0800c398
 800108c:	0800c3ac 	.word	0x0800c3ac
 8001090:	0800c3c0 	.word	0x0800c3c0
 8001094:	58020400 	.word	0x58020400
 8001098:	0800c3d0 	.word	0x0800c3d0

0800109c <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80010a4:	2101      	movs	r1, #1
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 80010a8:	f001 ff7b 	bl	8002fa2 <HAL_GPIO_TogglePin>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58020400 	.word	0x58020400

080010b8 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d11e      	bne.n	8001106 <HAL_HRTIM_Compare2EventCallback+0x4e>
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	f36f 0300 	bfc	r3, #0, #1
 80010ce:	733b      	strb	r3, [r7, #12]
 80010d0:	7b3b      	ldrb	r3, [r7, #12]
 80010d2:	f36f 0341 	bfc	r3, #1, #1
 80010d6:	733b      	strb	r3, [r7, #12]
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	f36f 0382 	bfc	r3, #2, #1
 80010de:	733b      	strb	r3, [r7, #12]
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	f36f 03c3 	bfc	r3, #3, #1
 80010e6:	733b      	strb	r3, [r7, #12]
 80010e8:	7b3b      	ldrb	r3, [r7, #12]
 80010ea:	f36f 1304 	bfc	r3, #4, #1
 80010ee:	733b      	strb	r3, [r7, #12]
 80010f0:	7b3b      	ldrb	r3, [r7, #12]
 80010f2:	f043 0320 	orr.w	r3, r3, #32
 80010f6:	733b      	strb	r3, [r7, #12]
 80010f8:	7b3b      	ldrb	r3, [r7, #12]
 80010fa:	f36f 1386 	bfc	r3, #6, #1
 80010fe:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8001100:	7b38      	ldrb	r0, [r7, #12]
 8001102:	f00b f8a1 	bl	800c248 <__set_aom_atten_veneer>
	}

}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d175      	bne.n	800120c <HAL_HRTIM_Compare3EventCallback+0xfc>

		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 8001120:	2300      	movs	r3, #0
 8001122:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 8001124:	7a38      	ldrb	r0, [r7, #8]
 8001126:	f00b f88f 	bl	800c248 <__set_aom_atten_veneer>

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 800112a:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <HAL_HRTIM_Compare3EventCallback+0x104>)
 800112c:	ed93 5b00 	vldr	d5, [r3]
 8001130:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001132:	ed93 6b04 	vldr	d6, [r3, #16]
 8001136:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800113a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800113e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001144:	ed93 7b04 	vldr	d7, [r3, #16]
 8001148:	ee26 7b07 	vmul.f64	d7, d6, d7
 800114c:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001152:	ed93 5b02 	vldr	d5, [r3, #8]
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001158:	ed93 6b04 	vldr	d6, [r3, #16]
 800115c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001160:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001164:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001168:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800116c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001172:	ed93 7b04 	vldr	d7, [r3, #16]
 8001176:	ee26 7b07 	vmul.f64	d7, d6, d7
 800117a:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 800117e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001182:	ed97 7b06 	vldr	d7, [r7, #24]
 8001186:	ee36 5b47 	vsub.f64	d5, d6, d7
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_HRTIM_Compare3EventCallback+0x104>)
 800118c:	ed93 6b04 	vldr	d6, [r3, #16]
 8001190:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001194:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001198:	ee37 7b06 	vadd.f64	d7, d7, d6
 800119c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011a0:	ee17 3a90 	vmov	r3, s15
 80011a4:	60fb      	str	r3, [r7, #12]
//		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
//		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_HRTIM_Compare3EventCallback+0x108>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d106      	bne.n	80011be <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 80011b0:	f00b f84e 	bl	800c250 <__stop_pop_veneer>
			i = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_HRTIM_Compare3EventCallback+0x108>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
			start_pop();
 80011ba:	f00b f841 	bl	800c240 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_HRTIM_Compare3EventCallback+0x108>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80011cc:	ed93 7b04 	vldr	d7, [r3, #16]
 80011d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80011d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011dc:	eeb0 0b47 	vmov.f64	d0, d7
 80011e0:	f00b f842 	bl	800c268 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_HRTIM_Compare3EventCallback+0x108>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_HRTIM_Compare3EventCallback+0x108>)
 80011ec:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_HRTIM_Compare3EventCallback+0x10c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_HRTIM_Compare3EventCallback+0x10c>)
 80011f6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011f8:	2102      	movs	r1, #2
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <HAL_HRTIM_Compare3EventCallback+0x110>)
 80011fc:	f001 fed1 	bl	8002fa2 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_HRTIM_Compare3EventCallback+0x10c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <HAL_HRTIM_Compare3EventCallback+0x114>)
 8001208:	f008 ff60 	bl	800a0cc <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800c5b0 	.word	0x0800c5b0
 8001218:	20000488 	.word	0x20000488
 800121c:	20000480 	.word	0x20000480
 8001220:	58021000 	.word	0x58021000
 8001224:	0800c3e4 	.word	0x0800c3e4

08001228 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8001246:	4a54      	ldr	r2, [pc, #336]	; (8001398 <main+0x158>)
 8001248:	4b54      	ldr	r3, [pc, #336]	; (800139c <main+0x15c>)
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4954      	ldr	r1, [pc, #336]	; (80013a0 <main+0x160>)
 8001250:	4852      	ldr	r0, [pc, #328]	; (800139c <main+0x15c>)
 8001252:	f008 fae3 	bl	800981c <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001256:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <main+0x164>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d11b      	bne.n	800129a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001262:	f3bf 8f4f 	dsb	sy
}
 8001266:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001268:	f3bf 8f6f 	isb	sy
}
 800126c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126e:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <main+0x164>)
 8001270:	2200      	movs	r2, #0
 8001272:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001276:	f3bf 8f4f 	dsb	sy
}
 800127a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127c:	f3bf 8f6f 	isb	sy
}
 8001280:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001282:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <main+0x164>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a47      	ldr	r2, [pc, #284]	; (80013a4 <main+0x164>)
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800128e:	f3bf 8f4f 	dsb	sy
}
 8001292:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001294:	f3bf 8f6f 	isb	sy
}
 8001298:	e000      	b.n	800129c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800129a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800129c:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <main+0x164>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d138      	bne.n	800131a <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80012a8:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <main+0x164>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012b0:	f3bf 8f4f 	dsb	sy
}
 80012b4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <main+0x164>)
 80012b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012bc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	0b5b      	lsrs	r3, r3, #13
 80012c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012c6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012d0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	015a      	lsls	r2, r3, #5
 80012d6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80012da:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012e0:	4930      	ldr	r1, [pc, #192]	; (80013a4 <main+0x164>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ef      	bne.n	80012d2 <main+0x92>
    } while(sets-- != 0U);
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	60ba      	str	r2, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e5      	bne.n	80012c8 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80012fc:	f3bf 8f4f 	dsb	sy
}
 8001300:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <main+0x164>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <main+0x164>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	e000      	b.n	800131c <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800131a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131c:	f001 f90e 	bl	800253c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001320:	f000 f84e 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001324:	f000 fbac 	bl	8001a80 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001328:	f000 fa8c 	bl	8001844 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 800132c:	f000 f906 	bl	800153c <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8001330:	f000 fb58 	bl	80019e4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001334:	f000 fb08 	bl	8001948 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001338:	f000 fab2 	bl	80018a0 <MX_TIM1_Init>
  MX_HRTIM_Init();
 800133c:	f000 f930 	bl	80015a0 <MX_HRTIM_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8001340:	4819      	ldr	r0, [pc, #100]	; (80013a8 <main+0x168>)
 8001342:	f008 fec3 	bl	800a0cc <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 8001346:	4919      	ldr	r1, [pc, #100]	; (80013ac <main+0x16c>)
 8001348:	4819      	ldr	r0, [pc, #100]	; (80013b0 <main+0x170>)
 800134a:	f008 febf 	bl	800a0cc <iprintf>

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800134e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001352:	4818      	ldr	r0, [pc, #96]	; (80013b4 <main+0x174>)
 8001354:	f003 fb2a 	bl	80049ac <HAL_LPTIM_Counter_Start_IT>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <main+0x128>
		printf("Failed to start slow fashing LED!\r\n");
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <main+0x178>)
 8001360:	f008 ff3a 	bl	800a1d8 <puts>
		Error_Handler();
 8001364:	f000 fcf8 	bl	8001d58 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (!pop_running) {
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <main+0x17c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f083 0301 	eor.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <main+0x14a>
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of STOP mode.
 8001378:	f001 f996 	bl	80026a8 <HAL_SuspendTick>
			HAL_PWREx_EnableFlashPowerDown();
 800137c:	f003 ff06 	bl	800518c <HAL_PWREx_EnableFlashPowerDown>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs
 8001380:	2101      	movs	r1, #1
 8001382:	2001      	movs	r0, #1
 8001384:	f003 fe8c 	bl	80050a0 <HAL_PWR_EnterSTOPMode>
 8001388:	e7ee      	b.n	8001368 <main+0x128>
		} else {
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of SLEEP mode.
 800138a:	f001 f98d 	bl	80026a8 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs.
 800138e:	2101      	movs	r1, #1
 8001390:	2000      	movs	r0, #0
 8001392:	f003 fe6b 	bl	800506c <HAL_PWR_EnterSLEEPMode>
		if (!pop_running) {
 8001396:	e7e7      	b.n	8001368 <main+0x128>
 8001398:	00000890 	.word	0x00000890
 800139c:	00000000 	.word	0x00000000
 80013a0:	08000298 	.word	0x08000298
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	0800c3fc 	.word	0x0800c3fc
 80013ac:	0800c400 	.word	0x0800c400
 80013b0:	0800c41c 	.word	0x0800c41c
 80013b4:	20000318 	.word	0x20000318
 80013b8:	0800c448 	.word	0x0800c448
 80013bc:	2000047c 	.word	0x2000047c

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0a4      	sub	sp, #144	; 0x90
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013ca:	224c      	movs	r2, #76	; 0x4c
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f008 fa32 	bl	8009838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 fa2b 	bl	8009838 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013f4:	2002      	movs	r0, #2
 80013f6:	f003 fe8f 	bl	8005118 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <SystemClock_Config+0x170>)
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	4a4b      	ldr	r2, [pc, #300]	; (8001530 <SystemClock_Config+0x170>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	62d3      	str	r3, [r2, #44]	; 0x2c
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <SystemClock_Config+0x170>)
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <SystemClock_Config+0x174>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a46      	ldr	r2, [pc, #280]	; (8001534 <SystemClock_Config+0x174>)
 800141a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <SystemClock_Config+0x174>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800142c:	bf00      	nop
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <SystemClock_Config+0x174>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143a:	d1f8      	bne.n	800142e <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800143c:	f003 fe06 	bl	800504c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001440:	f001 f952 	bl	80026e8 <HAL_GetREVID>
 8001444:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <SystemClock_Config+0x178>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <SystemClock_Config+0x178>)
 800144a:	f023 0318 	bic.w	r3, r3, #24
 800144e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001450:	2325      	movs	r3, #37	; 0x25
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001454:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800145a:	2301      	movs	r3, #1
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800145e:	2301      	movs	r3, #1
 8001460:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	2302      	movs	r3, #2
 8001464:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001466:	2302      	movs	r3, #2
 8001468:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 96;
 800146e:	2360      	movs	r3, #96	; 0x60
 8001470:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001472:	2302      	movs	r3, #2
 8001474:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001476:	2304      	movs	r3, #4
 8001478:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001480:	230c      	movs	r3, #12
 8001482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fe88 	bl	80051ac <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80014a2:	f000 fc59 	bl	8001d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	233f      	movs	r3, #63	; 0x3f
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2303      	movs	r3, #3
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80014b2:	2309      	movs	r3, #9
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80014be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fac6 	bl	8005a60 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80014da:	f000 fc3d 	bl	8001d58 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80014de:	f004 fc75 	bl	8005dcc <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <SystemClock_Config+0x178>)
 80014e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <SystemClock_Config+0x178>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <SystemClock_Config+0x178>)
 80014f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001508:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800150e:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001512:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001514:	2322      	movs	r3, #34	; 0x22
 8001516:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001518:	2320      	movs	r3, #32
 800151a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4618      	mov	r0, r3
 8001522:	f006 fb1d 	bl	8007b60 <HAL_RCCEx_CRSConfig>
}
 8001526:	bf00      	nop
 8001528:	3790      	adds	r7, #144	; 0x90
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	58000400 	.word	0x58000400
 8001534:	58024800 	.word	0x58024800
 8001538:	58024400 	.word	0x58024400

0800153c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2224      	movs	r2, #36	; 0x24
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f008 f975 	bl	8009838 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_DAC1_Init+0x5c>)
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_DAC1_Init+0x60>)
 8001552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001554:	4810      	ldr	r0, [pc, #64]	; (8001598 <MX_DAC1_Init+0x5c>)
 8001556:	f001 f9e2 	bl	800291e <HAL_DAC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001560:	f000 fbfa 	bl	8001d58 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_DAC1_Init+0x5c>)
 8001580:	f001 f9f0 	bl	8002964 <HAL_DAC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800158a:	f000 fbe5 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000228 	.word	0x20000228
 800159c:	40007400 	.word	0x40007400

080015a0 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0a4      	sub	sp, #144	; 0x90
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80015a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80015b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b8:	2254      	movs	r2, #84	; 0x54
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f008 f93b 	bl	8009838 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2220      	movs	r2, #32
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f008 f92f 	bl	8009838 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 80015da:	4b98      	ldr	r3, [pc, #608]	; (800183c <MX_HRTIM_Init+0x29c>)
 80015dc:	4a98      	ldr	r2, [pc, #608]	; (8001840 <MX_HRTIM_Init+0x2a0>)
 80015de:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80015e0:	4b96      	ldr	r3, [pc, #600]	; (800183c <MX_HRTIM_Init+0x29c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80015e6:	4b95      	ldr	r3, [pc, #596]	; (800183c <MX_HRTIM_Init+0x29c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80015ec:	4893      	ldr	r0, [pc, #588]	; (800183c <MX_HRTIM_Init+0x29c>)
 80015ee:	f001 fd0d 	bl	800300c <HAL_HRTIM_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 80015f8:	f000 fbae 	bl	8001d58 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80015fc:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 800160a:	2307      	movs	r3, #7
 800160c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001610:	2308      	movs	r3, #8
 8001612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001616:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800161a:	461a      	mov	r2, r3
 800161c:	2100      	movs	r1, #0
 800161e:	4887      	ldr	r0, [pc, #540]	; (800183c <MX_HRTIM_Init+0x29c>)
 8001620:	f001 fdc4 	bl	80031ac <HAL_HRTIM_TimeBaseConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 800162a:	f000 fb95 	bl	8001d58 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 800162e:	2314      	movs	r3, #20
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001636:	2300      	movs	r3, #0
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800163a:	2300      	movs	r3, #0
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 800163e:	2301      	movs	r3, #1
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001642:	2300      	movs	r3, #0
 8001644:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001646:	2300      	movs	r3, #0
 8001648:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800164a:	2300      	movs	r3, #0
 800164c:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800164e:	2300      	movs	r3, #0
 8001650:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001652:	2300      	movs	r3, #0
 8001654:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001656:	2300      	movs	r3, #0
 8001658:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800165a:	2300      	movs	r3, #0
 800165c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800165e:	2300      	movs	r3, #0
 8001660:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001662:	2300      	movs	r3, #0
 8001664:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800166a:	2300      	movs	r3, #0
 800166c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800166e:	2300      	movs	r3, #0
 8001670:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001672:	2300      	movs	r3, #0
 8001674:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001676:	2300      	movs	r3, #0
 8001678:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800167a:	2300      	movs	r3, #0
 800167c:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800167e:	2300      	movs	r3, #0
 8001680:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001686:	461a      	mov	r2, r3
 8001688:	2100      	movs	r1, #0
 800168a:	486c      	ldr	r0, [pc, #432]	; (800183c <MX_HRTIM_Init+0x29c>)
 800168c:	f001 fdb6 	bl	80031fc <HAL_HRTIM_WaveformTimerConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001696:	f000 fb5f 	bl	8001d58 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 800169a:	2306      	movs	r3, #6
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800169e:	2300      	movs	r3, #0
 80016a0:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80016a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a6:	461a      	mov	r2, r3
 80016a8:	2104      	movs	r1, #4
 80016aa:	4864      	ldr	r0, [pc, #400]	; (800183c <MX_HRTIM_Init+0x29c>)
 80016ac:	f001 fda6 	bl	80031fc <HAL_HRTIM_WaveformTimerConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 80016b6:	f000 fb4f 	bl	8001d58 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 80016ba:	f240 631b 	movw	r3, #1563	; 0x61b
 80016be:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	2201      	movs	r2, #1
 80016c6:	2100      	movs	r1, #0
 80016c8:	485c      	ldr	r0, [pc, #368]	; (800183c <MX_HRTIM_Init+0x29c>)
 80016ca:	f001 fe09 	bl	80032e0 <HAL_HRTIM_WaveformCompareConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 80016d4:	f000 fb40 	bl	8001d58 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 80016d8:	f244 5395 	movw	r3, #17813	; 0x4595
 80016dc:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2202      	movs	r2, #2
 80016ec:	2100      	movs	r1, #0
 80016ee:	4853      	ldr	r0, [pc, #332]	; (800183c <MX_HRTIM_Init+0x29c>)
 80016f0:	f001 fdf6 	bl	80032e0 <HAL_HRTIM_WaveformCompareConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 80016fa:	f000 fb2d 	bl	8001d58 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80016fe:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001702:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	2202      	movs	r2, #2
 800170a:	2104      	movs	r1, #4
 800170c:	484b      	ldr	r0, [pc, #300]	; (800183c <MX_HRTIM_Init+0x29c>)
 800170e:	f001 fde7 	bl	80032e0 <HAL_HRTIM_WaveformCompareConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8001718:	f000 fb1e 	bl	8001d58 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 800171c:	f644 0306 	movw	r3, #18438	; 0x4806
 8001720:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2204      	movs	r2, #4
 8001728:	2100      	movs	r1, #0
 800172a:	4844      	ldr	r0, [pc, #272]	; (800183c <MX_HRTIM_Init+0x29c>)
 800172c:	f001 fdd8 	bl	80032e0 <HAL_HRTIM_WaveformCompareConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8001736:	f000 fb0f 	bl	8001d58 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 800173a:	f244 435d 	movw	r3, #17501	; 0x445d
 800173e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	2208      	movs	r2, #8
 8001746:	2104      	movs	r1, #4
 8001748:	483c      	ldr	r0, [pc, #240]	; (800183c <MX_HRTIM_Init+0x29c>)
 800174a:	f001 fdc9 	bl	80032e0 <HAL_HRTIM_WaveformCompareConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001754:	f000 fb00 	bl	8001d58 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001758:	2302      	movs	r3, #2
 800175a:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 800175c:	2328      	movs	r3, #40	; 0x28
 800175e:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001760:	2314      	movs	r3, #20
 8001762:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001768:	2308      	movs	r3, #8
 800176a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	2201      	movs	r2, #1
 800177c:	2100      	movs	r1, #0
 800177e:	482f      	ldr	r0, [pc, #188]	; (800183c <MX_HRTIM_Init+0x29c>)
 8001780:	f001 ff1c 	bl	80035bc <HAL_HRTIM_WaveformOutputConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 800178a:	f000 fae5 	bl	8001d58 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8001792:	2350      	movs	r3, #80	; 0x50
 8001794:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a0:	2104      	movs	r1, #4
 80017a2:	4826      	ldr	r0, [pc, #152]	; (800183c <MX_HRTIM_Init+0x29c>)
 80017a4:	f001 ff0a 	bl	80035bc <HAL_HRTIM_WaveformOutputConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 80017ae:	f000 fad3 	bl	8001d58 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80017b2:	2302      	movs	r3, #2
 80017b4:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 80017b6:	2320      	movs	r3, #32
 80017b8:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 80017ba:	2310      	movs	r3, #16
 80017bc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80017be:	2308      	movs	r3, #8
 80017c0:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	2202      	movs	r2, #2
 80017c6:	2100      	movs	r1, #0
 80017c8:	481c      	ldr	r0, [pc, #112]	; (800183c <MX_HRTIM_Init+0x29c>)
 80017ca:	f001 fef7 	bl	80035bc <HAL_HRTIM_WaveformOutputConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 80017d4:	f000 fac0 	bl	8001d58 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80017d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017dc:	461a      	mov	r2, r3
 80017de:	2104      	movs	r1, #4
 80017e0:	4816      	ldr	r0, [pc, #88]	; (800183c <MX_HRTIM_Init+0x29c>)
 80017e2:	f001 fce3 	bl	80031ac <HAL_HRTIM_TimeBaseConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 80017ec:	f000 fab4 	bl	8001d58 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 80017f0:	f240 7353 	movw	r3, #1875	; 0x753
 80017f4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80017f6:	f107 0320 	add.w	r3, r7, #32
 80017fa:	2201      	movs	r2, #1
 80017fc:	2104      	movs	r1, #4
 80017fe:	480f      	ldr	r0, [pc, #60]	; (800183c <MX_HRTIM_Init+0x29c>)
 8001800:	f001 fd6e 	bl	80032e0 <HAL_HRTIM_WaveformCompareConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 800180a:	f000 faa5 	bl	8001d58 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 800180e:	f643 6342 	movw	r3, #15938	; 0x3e42
 8001812:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	2204      	movs	r2, #4
 800181a:	2104      	movs	r1, #4
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_HRTIM_Init+0x29c>)
 800181e:	f001 fd5f 	bl	80032e0 <HAL_HRTIM_WaveformCompareConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8001828:	f000 fa96 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_HRTIM_Init+0x29c>)
 800182e:	f000 fb6d 	bl	8001f0c <HAL_HRTIM_MspPostInit>

}
 8001832:	bf00      	nop
 8001834:	3790      	adds	r7, #144	; 0x90
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000023c 	.word	0x2000023c
 8001840:	40017400 	.word	0x40017400

08001844 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_LPTIM1_Init+0x54>)
 800184a:	4a14      	ldr	r2, [pc, #80]	; (800189c <MX_LPTIM1_Init+0x58>)
 800184c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_LPTIM1_Init+0x54>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_LPTIM1_Init+0x54>)
 8001856:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800185a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_LPTIM1_Init+0x54>)
 800185e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001862:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_LPTIM1_Init+0x54>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_LPTIM1_Init+0x54>)
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_LPTIM1_Init+0x54>)
 8001872:	2200      	movs	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_LPTIM1_Init+0x54>)
 8001878:	2200      	movs	r2, #0
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_LPTIM1_Init+0x54>)
 800187e:	2200      	movs	r2, #0
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_LPTIM1_Init+0x54>)
 8001884:	f002 ffe2 	bl	800484c <HAL_LPTIM_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800188e:	f000 fa63 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000318 	.word	0x20000318
 800189c:	40002400 	.word	0x40002400

080018a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <MX_TIM1_Init+0xa4>)
 80018c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018c6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80018ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ec:	4814      	ldr	r0, [pc, #80]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018ee:	f006 faf1 	bl	8007ed4 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80018f8:	f000 fa2e 	bl	8001d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4619      	mov	r1, r3
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_TIM1_Init+0xa0>)
 800190a:	f006 fb3b 	bl	8007f84 <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001914:	f000 fa20 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_TIM1_Init+0xa0>)
 800192a:	f006 fd5b 	bl	80083e4 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001934:	f000 fa10 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000350 	.word	0x20000350
 8001944:	40010000 	.word	0x40010000

08001948 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_TIM3_Init+0x94>)
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <MX_TIM3_Init+0x98>)
 800196a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_TIM3_Init+0x94>)
 800196e:	227c      	movs	r2, #124	; 0x7c
 8001970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_TIM3_Init+0x94>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_TIM3_Init+0x94>)
 800197a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800197e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_TIM3_Init+0x94>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_TIM3_Init+0x94>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <MX_TIM3_Init+0x94>)
 800198e:	f006 faa1 	bl	8007ed4 <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001998:	f000 f9de 	bl	8001d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <MX_TIM3_Init+0x94>)
 80019aa:	f006 faeb 	bl	8007f84 <HAL_TIM_ConfigClockSource>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80019b4:	f000 f9d0 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_TIM3_Init+0x94>)
 80019c6:	f006 fd0d 	bl	80083e4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80019d0:	f000 f9c2 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000039c 	.word	0x2000039c
 80019e0:	40000400 	.word	0x40000400

080019e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 80019ea:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <MX_USART3_UART_Init+0x94>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <MX_USART3_UART_Init+0x98>)
 80019f2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a08:	220c      	movs	r2, #12
 8001a0a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a2a:	4812      	ldr	r0, [pc, #72]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a2c:	f006 fd68 	bl	8008500 <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001a36:	f000 f98f 	bl	8001d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a3e:	f007 fdf8 	bl	8009632 <HAL_UARTEx_SetTxFifoThreshold>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001a48:	f000 f986 	bl	8001d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a50:	f007 fe2d 	bl	80096ae <HAL_UARTEx_SetRxFifoThreshold>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001a5a:	f000 f97d 	bl	8001d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a60:	f007 fdae 	bl	80095c0 <HAL_UARTEx_DisableFifoMode>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001a6a:	f000 f975 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200003e8 	.word	0x200003e8
 8001a78:	40004800 	.word	0x40004800
 8001a7c:	000f4240 	.word	0x000f4240

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a96:	4ba9      	ldr	r3, [pc, #676]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	4aa7      	ldr	r2, [pc, #668]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa6:	4ba5      	ldr	r3, [pc, #660]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab4:	4ba1      	ldr	r3, [pc, #644]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	4aa0      	ldr	r2, [pc, #640]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac4:	4b9d      	ldr	r3, [pc, #628]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad2:	4b9a      	ldr	r3, [pc, #616]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	4a98      	ldr	r2, [pc, #608]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae2:	4b96      	ldr	r3, [pc, #600]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b92      	ldr	r3, [pc, #584]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	4a91      	ldr	r2, [pc, #580]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b00:	4b8e      	ldr	r3, [pc, #568]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	4a89      	ldr	r2, [pc, #548]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1e:	4b87      	ldr	r3, [pc, #540]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2c:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	4a82      	ldr	r2, [pc, #520]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3c:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	4a7a      	ldr	r2, [pc, #488]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5a:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <MX_GPIO_Init+0x2bc>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2134      	movs	r1, #52	; 0x34
 8001b6c:	4874      	ldr	r0, [pc, #464]	; (8001d40 <MX_GPIO_Init+0x2c0>)
 8001b6e:	f001 f9ff 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	f244 0101 	movw	r1, #16385	; 0x4001
 8001b78:	4872      	ldr	r0, [pc, #456]	; (8001d44 <MX_GPIO_Init+0x2c4>)
 8001b7a:	f001 f9f9 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b84:	4870      	ldr	r0, [pc, #448]	; (8001d48 <MX_GPIO_Init+0x2c8>)
 8001b86:	f001 f9f3 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001b90:	486e      	ldr	r0, [pc, #440]	; (8001d4c <MX_GPIO_Init+0x2cc>)
 8001b92:	f001 f9ed 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b9c:	486b      	ldr	r0, [pc, #428]	; (8001d4c <MX_GPIO_Init+0x2cc>)
 8001b9e:	f001 f9e7 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	21f8      	movs	r1, #248	; 0xf8
 8001ba6:	4868      	ldr	r0, [pc, #416]	; (8001d48 <MX_GPIO_Init+0x2c8>)
 8001ba8:	f001 f9e2 	bl	8002f70 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4863      	ldr	r0, [pc, #396]	; (8001d40 <MX_GPIO_Init+0x2c0>)
 8001bb2:	f001 f9dd 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001bb6:	2336      	movs	r3, #54	; 0x36
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	4619      	mov	r1, r3
 8001bcc:	485c      	ldr	r0, [pc, #368]	; (8001d40 <MX_GPIO_Init+0x2c0>)
 8001bce:	f001 f807 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4858      	ldr	r0, [pc, #352]	; (8001d4c <MX_GPIO_Init+0x2cc>)
 8001bea:	f000 fff9 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001bee:	2332      	movs	r3, #50	; 0x32
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bfe:	230b      	movs	r3, #11
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	4850      	ldr	r0, [pc, #320]	; (8001d4c <MX_GPIO_Init+0x2cc>)
 8001c0a:	f000 ffe9 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001c0e:	2386      	movs	r3, #134	; 0x86
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c1e:	230b      	movs	r3, #11
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4849      	ldr	r0, [pc, #292]	; (8001d50 <MX_GPIO_Init+0x2d0>)
 8001c2a:	f000 ffd9 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001c2e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	483f      	ldr	r0, [pc, #252]	; (8001d44 <MX_GPIO_Init+0x2c4>)
 8001c48:	f000 ffca 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c5e:	230b      	movs	r3, #11
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	4836      	ldr	r0, [pc, #216]	; (8001d44 <MX_GPIO_Init+0x2c4>)
 8001c6a:	f000 ffb9 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001c6e:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001c72:	61fb      	str	r3, [r7, #28]
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	4830      	ldr	r0, [pc, #192]	; (8001d48 <MX_GPIO_Init+0x2c8>)
 8001c88:	f000 ffaa 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	482c      	ldr	r0, [pc, #176]	; (8001d54 <MX_GPIO_Init+0x2d4>)
 8001ca2:	f000 ff9d 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001ca6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4823      	ldr	r0, [pc, #140]	; (8001d4c <MX_GPIO_Init+0x2cc>)
 8001cc0:	f000 ff8e 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001cc4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	481b      	ldr	r0, [pc, #108]	; (8001d50 <MX_GPIO_Init+0x2d0>)
 8001ce2:	f000 ff7d 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4814      	ldr	r0, [pc, #80]	; (8001d4c <MX_GPIO_Init+0x2cc>)
 8001cfc:	f000 ff70 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001d00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d12:	230b      	movs	r3, #11
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <MX_GPIO_Init+0x2d4>)
 8001d1e:	f000 ff5f 	bl	8002be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	210f      	movs	r1, #15
 8001d26:	2028      	movs	r0, #40	; 0x28
 8001d28:	f000 fdc5 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d2c:	2028      	movs	r0, #40	; 0x28
 8001d2e:	f000 fddc 	bl	80028ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d32:	bf00      	nop
 8001d34:	3730      	adds	r7, #48	; 0x30
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	58021000 	.word	0x58021000
 8001d44:	58020400 	.word	0x58020400
 8001d48:	58020c00 	.word	0x58020c00
 8001d4c:	58020800 	.word	0x58020800
 8001d50:	58020000 	.word	0x58020000
 8001d54:	58021800 	.word	0x58021800

08001d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8001d60:	4810      	ldr	r0, [pc, #64]	; (8001da4 <Error_Handler+0x4c>)
 8001d62:	f008 fa39 	bl	800a1d8 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001d66:	f240 1103 	movw	r1, #259	; 0x103
 8001d6a:	480f      	ldr	r0, [pc, #60]	; (8001da8 <Error_Handler+0x50>)
 8001d6c:	f001 fd7b 	bl	8003866 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001d70:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <Error_Handler+0x50>)
 8001d76:	f001 fe13 	bl	80039a0 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d80:	480a      	ldr	r0, [pc, #40]	; (8001dac <Error_Handler+0x54>)
 8001d82:	f001 f8f5 	bl	8002f70 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d8a:	4809      	ldr	r0, [pc, #36]	; (8001db0 <Error_Handler+0x58>)
 8001d8c:	f001 f909 	bl	8002fa2 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <Error_Handler+0x5c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f00a fa4c 	bl	800c238 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001da0:	e7f1      	b.n	8001d86 <Error_Handler+0x2e>
 8001da2:	bf00      	nop
 8001da4:	0800c46c 	.word	0x0800c46c
 8001da8:	2000023c 	.word	0x2000023c
 8001dac:	58020800 	.word	0x58020800
 8001db0:	58020400 	.word	0x58020400
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_MspInit+0x30>)
 8001dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_MspInit+0x30>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_MspInit+0x30>)
 8001dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	58024400 	.word	0x58024400

08001dec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <HAL_DAC_MspInit+0x80>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d129      	bne.n	8001e62 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e14:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e4a:	2310      	movs	r3, #16
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_DAC_MspInit+0x88>)
 8001e5e:	f000 febf 	bl	8002be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40007400 	.word	0x40007400
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58020000 	.word	0x58020000

08001e78 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b4      	sub	sp, #208	; 0xd0
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	22c0      	movs	r2, #192	; 0xc0
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f007 fcd5 	bl	8009838 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_HRTIM_MspInit+0x8c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d131      	bne.n	8001efc <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 f98e 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001eba:	f7ff ff4d 	bl	8001d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_HRTIM_MspInit+0x90>)
 8001ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_HRTIM_MspInit+0x90>)
 8001ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_HRTIM_MspInit+0x90>)
 8001ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2068      	movs	r0, #104	; 0x68
 8001ee2:	f000 fce8 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8001ee6:	2068      	movs	r0, #104	; 0x68
 8001ee8:	f000 fcff 	bl	80028ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	206c      	movs	r0, #108	; 0x6c
 8001ef2:	f000 fce0 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8001ef6:	206c      	movs	r0, #108	; 0x6c
 8001ef8:	f000 fcf7 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	37d0      	adds	r7, #208	; 0xd0
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40017400 	.word	0x40017400
 8001f08:	58024400 	.word	0x58024400

08001f0c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_HRTIM_MspPostInit+0xa8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d13d      	bne.n	8001faa <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f52:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <HAL_HRTIM_MspPostInit+0xb0>)
 8001f86:	f000 fe2b 	bl	8002be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f8a:	23c0      	movs	r3, #192	; 0xc0
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <HAL_HRTIM_MspPostInit+0xb4>)
 8001fa6:	f000 fe1b 	bl	8002be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40017400 	.word	0x40017400
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	58021800 	.word	0x58021800
 8001fc0:	58020800 	.word	0x58020800

08001fc4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b0b4      	sub	sp, #208	; 0xd0
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	22c0      	movs	r2, #192	; 0xc0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f007 fc2f 	bl	8009838 <memset>
  if(hlptim->Instance==LPTIM1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_LPTIM_MspInit+0x80>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d12a      	bne.n	800203a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001fe4:	f04f 0220 	mov.w	r2, #32
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001ff0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ff4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f8e7 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002008:	f7ff fea6 	bl	8001d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_LPTIM_MspInit+0x84>)
 800200e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002012:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_LPTIM_MspInit+0x84>)
 8002014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002018:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_LPTIM_MspInit+0x84>)
 800201e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	205d      	movs	r0, #93	; 0x5d
 8002030:	f000 fc41 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002034:	205d      	movs	r0, #93	; 0x5d
 8002036:	f000 fc58 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	37d0      	adds	r7, #208	; 0xd0
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40002400 	.word	0x40002400
 8002048:	58024400 	.word	0x58024400

0800204c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10f      	bne.n	800207e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800207c:	e013      	b.n	80020a6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_TIM_Base_MspInit+0x70>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10e      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 800208a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 800209a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40010000 	.word	0x40010000
 80020b8:	58024400 	.word	0x58024400
 80020bc:	40000400 	.word	0x40000400

080020c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0ba      	sub	sp, #232	; 0xe8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	22c0      	movs	r2, #192	; 0xc0
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f007 fba9 	bl	8009838 <memset>
  if(huart->Instance==USART3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_UART_MspInit+0xc8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d146      	bne.n	800217e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020f0:	f04f 0202 	mov.w	r2, #2
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f862 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002112:	f7ff fe21 	bl	8001d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_UART_MspInit+0xcc>)
 8002118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_UART_MspInit+0xcc>)
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_UART_MspInit+0xcc>)
 8002128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_UART_MspInit+0xcc>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_UART_MspInit+0xcc>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_UART_MspInit+0xcc>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800216c:	2307      	movs	r3, #7
 800216e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002172:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <HAL_UART_MspInit+0xd0>)
 800217a:	f000 fd31 	bl	8002be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	37e8      	adds	r7, #232	; 0xe8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40004800 	.word	0x40004800
 800218c:	58024400 	.word	0x58024400
 8002190:	58020c00 	.word	0x58020c00

08002194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002198:	f003 fffe 	bl	8006198 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 800219c:	f7ff fddc 	bl	8001d58 <Error_Handler>
 80021a0:	e7fc      	b.n	800219c <NMI_Handler+0x8>

080021a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80021a6:	f7ff fdd7 	bl	8001d58 <Error_Handler>
 80021aa:	e7fc      	b.n	80021a6 <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80021b0:	f7ff fdd2 	bl	8001d58 <Error_Handler>
 80021b4:	e7fc      	b.n	80021b0 <MemManage_Handler+0x4>

080021b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80021ba:	f7ff fdcd 	bl	8001d58 <Error_Handler>
 80021be:	e7fc      	b.n	80021ba <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80021c4:	f7ff fdc8 	bl	8001d58 <Error_Handler>
 80021c8:	e7fc      	b.n	80021c4 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 fa12 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002204:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002208:	f000 fee5 	bl	8002fd6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <LPTIM1_IRQHandler+0x10>)
 8002216:	f002 fc30 	bl	8004a7a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000318 	.word	0x20000318

08002224 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002228:	2100      	movs	r1, #0
 800222a:	4802      	ldr	r0, [pc, #8]	; (8002234 <HRTIM1_TIMA_IRQHandler+0x10>)
 800222c:	f001 fc36 	bl	8003a9c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000023c 	.word	0x2000023c

08002238 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 800223c:	2104      	movs	r1, #4
 800223e:	4802      	ldr	r0, [pc, #8]	; (8002248 <HRTIM1_TIME_IRQHandler+0x10>)
 8002240:	f001 fc2c 	bl	8003a9c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000023c 	.word	0x2000023c

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002266:	f007 faaf 	bl	80097c8 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
	return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
	while (1) {}		/* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
	}

return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e009      	b.n	80022f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fe1d 	bl	8000f24 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf1      	blt.n	80022dc <_write+0x12>
	}
	return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_close>:

int _close(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232a:	605a      	str	r2, [r3, #4]
	return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_isatty>:

int _isatty(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return 1;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
	return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f007 fa14 	bl	80097c8 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20020000 	.word	0x20020000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	2000048c 	.word	0x2000048c
 80023d4:	200004a8 	.word	0x200004a8

080023d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023dc:	4b37      	ldr	r3, [pc, #220]	; (80024bc <SystemInit+0xe4>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4a36      	ldr	r2, [pc, #216]	; (80024bc <SystemInit+0xe4>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023ec:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <SystemInit+0xe8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	2b06      	cmp	r3, #6
 80023f6:	d807      	bhi.n	8002408 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <SystemInit+0xe8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 030f 	bic.w	r3, r3, #15
 8002400:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <SystemInit+0xe8>)
 8002402:	f043 0307 	orr.w	r3, r3, #7
 8002406:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002408:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <SystemInit+0xec>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2d      	ldr	r2, [pc, #180]	; (80024c4 <SystemInit+0xec>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <SystemInit+0xec>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800241a:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <SystemInit+0xec>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4929      	ldr	r1, [pc, #164]	; (80024c4 <SystemInit+0xec>)
 8002420:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <SystemInit+0xf0>)
 8002422:	4013      	ands	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <SystemInit+0xe8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <SystemInit+0xe8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 030f 	bic.w	r3, r3, #15
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <SystemInit+0xe8>)
 800243c:	f043 0307 	orr.w	r3, r3, #7
 8002440:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <SystemInit+0xec>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <SystemInit+0xec>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <SystemInit+0xec>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <SystemInit+0xec>)
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <SystemInit+0xf4>)
 8002458:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <SystemInit+0xec>)
 800245c:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <SystemInit+0xf8>)
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <SystemInit+0xec>)
 8002462:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <SystemInit+0xfc>)
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <SystemInit+0xec>)
 8002468:	2200      	movs	r2, #0
 800246a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <SystemInit+0xec>)
 800246e:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <SystemInit+0xfc>)
 8002470:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <SystemInit+0xec>)
 8002474:	2200      	movs	r2, #0
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <SystemInit+0xec>)
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <SystemInit+0xfc>)
 800247c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <SystemInit+0xec>)
 8002480:	2200      	movs	r2, #0
 8002482:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <SystemInit+0xec>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <SystemInit+0xec>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <SystemInit+0xec>)
 8002492:	2200      	movs	r2, #0
 8002494:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <SystemInit+0x100>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <SystemInit+0x104>)
 800249c:	4013      	ands	r3, r2
 800249e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a2:	d202      	bcs.n	80024aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <SystemInit+0x108>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <SystemInit+0x10c>)
 80024ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00
 80024c0:	52002000 	.word	0x52002000
 80024c4:	58024400 	.word	0x58024400
 80024c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80024cc:	02020200 	.word	0x02020200
 80024d0:	01ff0000 	.word	0x01ff0000
 80024d4:	01010280 	.word	0x01010280
 80024d8:	5c001000 	.word	0x5c001000
 80024dc:	ffff0000 	.word	0xffff0000
 80024e0:	51008108 	.word	0x51008108
 80024e4:	52004000 	.word	0x52004000

080024e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024ec:	f7ff ff74 	bl	80023d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f2:	490d      	ldr	r1, [pc, #52]	; (8002528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002508:	4c0a      	ldr	r4, [pc, #40]	; (8002534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002516:	f007 f95d 	bl	80097d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251a:	f7fe fe91 	bl	8001240 <main>
  bx  lr
 800251e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800252c:	0800c9f4 	.word	0x0800c9f4
  ldr r2, =_sbss
 8002530:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002534:	200004a4 	.word	0x200004a4

08002538 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC3_IRQHandler>
	...

0800253c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002542:	2003      	movs	r0, #3
 8002544:	f000 f9ac 	bl	80028a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002548:	f003 fc50 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_Init+0x68>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	4913      	ldr	r1, [pc, #76]	; (80025a8 <HAL_Init+0x6c>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_Init+0x68>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_Init+0x6c>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <HAL_Init+0x70>)
 800257e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_Init+0x74>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002586:	2000      	movs	r0, #0
 8002588:	f000 f814 	bl	80025b4 <HAL_InitTick>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e002      	b.n	800259c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002596:	f7ff fc0f 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58024400 	.word	0x58024400
 80025a8:	0800c5d4 	.word	0x0800c5d4
 80025ac:	20000018 	.word	0x20000018
 80025b0:	20000014 	.word	0x20000014

080025b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_InitTick+0x60>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e021      	b.n	800260c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_InitTick+0x64>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_InitTick+0x60>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f991 	bl	8002906 <HAL_SYSTICK_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00e      	b.n	800260c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d80a      	bhi.n	800260a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f4:	2200      	movs	r2, #0
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f000 f95b 	bl	80028b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_InitTick+0x68>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000020 	.word	0x20000020
 8002618:	20000014 	.word	0x20000014
 800261c:	2000001c 	.word	0x2000001c

08002620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x20>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x24>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_IncTick+0x24>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000020 	.word	0x20000020
 8002644:	20000490 	.word	0x20000490

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000490 	.word	0x20000490

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffde 	bl	8002648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000020 	.word	0x20000020

080026a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_SuspendTick+0x1c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_SuspendTick+0x1c>)
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_ResumeTick+0x1c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_ResumeTick+0x1c>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_GetREVID+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0c1b      	lsrs	r3, r3, #16
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	5c001000 	.word	0x5c001000

08002700 <__NVIC_SetPriorityGrouping>:
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <__NVIC_SetPriorityGrouping+0x40>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800271c:	4013      	ands	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	4313      	orrs	r3, r2
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x40>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00
 8002744:	05fa0000 	.word	0x05fa0000

08002748 <__NVIC_GetPriorityGrouping>:
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_GetPriorityGrouping+0x18>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 0307 	and.w	r3, r3, #7
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_EnableIRQ>:
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800276e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db0b      	blt.n	800278e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <__NVIC_EnableIRQ+0x38>)
 800277e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2001      	movs	r0, #1
 8002786:	fa00 f202 	lsl.w	r2, r0, r2
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000e100 	.word	0xe000e100

080027a0 <__NVIC_SetPriority>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	490c      	ldr	r1, [pc, #48]	; (80027ec <__NVIC_SetPriority+0x4c>)
 80027ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	440b      	add	r3, r1
 80027c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027c8:	e00a      	b.n	80027e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4908      	ldr	r1, [pc, #32]	; (80027f0 <__NVIC_SetPriority+0x50>)
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3b04      	subs	r3, #4
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	440b      	add	r3, r1
 80027de:	761a      	strb	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <NVIC_EncodePriority>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1c3 0307 	rsb	r3, r3, #7
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf28      	it	cs
 8002812:	2304      	movcs	r3, #4
 8002814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3304      	adds	r3, #4
 800281a:	2b06      	cmp	r3, #6
 800281c:	d902      	bls.n	8002824 <NVIC_EncodePriority+0x30>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3b03      	subs	r3, #3
 8002822:	e000      	b.n	8002826 <NVIC_EncodePriority+0x32>
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43d9      	mvns	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	4313      	orrs	r3, r2
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	; 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800286c:	d301      	bcc.n	8002872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286e:	2301      	movs	r3, #1
 8002870:	e00f      	b.n	8002892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002872:	4a0a      	ldr	r2, [pc, #40]	; (800289c <SysTick_Config+0x40>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287a:	210f      	movs	r1, #15
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f7ff ff8e 	bl	80027a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <SysTick_Config+0x40>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <SysTick_Config+0x40>)
 800288c:	2207      	movs	r2, #7
 800288e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	e000e010 	.word	0xe000e010

080028a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ff29 	bl	8002700 <__NVIC_SetPriorityGrouping>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff40 	bl	8002748 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff90 	bl	80027f4 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5f 	bl	80027a0 <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff33 	bl	8002764 <__NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa4 	bl	800285c <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e014      	b.n	800295a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	791b      	ldrb	r3, [r3, #4]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fa53 	bl	8001dec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	795b      	ldrb	r3, [r3, #5]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_DAC_ConfigChannel+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e12a      	b.n	8002bd2 <HAL_DAC_ConfigChannel+0x26e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2202      	movs	r2, #2
 8002986:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b04      	cmp	r3, #4
 800298e:	f040 8081 	bne.w	8002a94 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002992:	f7ff fe59 	bl	8002648 <HAL_GetTick>
 8002996:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d140      	bne.n	8002a20 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800299e:	e018      	b.n	80029d2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029a0:	f7ff fe52 	bl	8002648 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d911      	bls.n	80029d2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b4:	4b89      	ldr	r3, [pc, #548]	; (8002bdc <HAL_DAC_ConfigChannel+0x278>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f043 0208 	orr.w	r2, r3, #8
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2203      	movs	r2, #3
 80029cc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0ff      	b.n	8002bd2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d8:	4b80      	ldr	r3, [pc, #512]	; (8002bdc <HAL_DAC_ConfigChannel+0x278>)
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1df      	bne.n	80029a0 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff fe3d 	bl	8002660 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	6992      	ldr	r2, [r2, #24]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
 80029f0:	e023      	b.n	8002a3a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029f2:	f7ff fe29 	bl	8002648 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d90f      	bls.n	8002a20 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da0a      	bge.n	8002a20 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f043 0208 	orr.w	r2, r3, #8
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0d8      	b.n	8002bd2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	dbe3      	blt.n	80029f2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7ff fe18 	bl	8002660 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	6992      	ldr	r2, [r2, #24]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	ea02 0103 	and.w	r1, r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	21ff      	movs	r1, #255	; 0xff
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	ea02 0103 	and.w	r1, r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d11d      	bne.n	8002ad8 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	221f      	movs	r2, #31
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	e00f      	b.n	8002b22 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d102      	bne.n	8002b10 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e008      	b.n	8002b22 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	e001      	b.n	8002b22 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43da      	mvns	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	400a      	ands	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4013      	ands	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	22c0      	movs	r2, #192	; 0xc0
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20008000 	.word	0x20008000

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bee:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <HAL_GPIO_Init+0x234>)
 8002bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bf2:	e194      	b.n	8002f1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8186 	beq.w	8002f18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d005      	beq.n	8002c24 <HAL_GPIO_Init+0x44>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d130      	bne.n	8002c86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 0201 	and.w	r2, r3, #1
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d017      	beq.n	8002cc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d123      	bne.n	8002d16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	08da      	lsrs	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3208      	adds	r2, #8
 8002cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0203 	and.w	r2, r3, #3
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 80e0 	beq.w	8002f18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <HAL_GPIO_Init+0x238>)
 8002d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d5e:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <HAL_GPIO_Init+0x238>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_GPIO_Init+0x238>)
 8002d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d76:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <HAL_GPIO_Init+0x23c>)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <HAL_GPIO_Init+0x240>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d052      	beq.n	8002e48 <HAL_GPIO_Init+0x268>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <HAL_GPIO_Init+0x244>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_GPIO_Init+0x22e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_GPIO_Init+0x248>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d02b      	beq.n	8002e0a <HAL_GPIO_Init+0x22a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_GPIO_Init+0x24c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d025      	beq.n	8002e06 <HAL_GPIO_Init+0x226>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_GPIO_Init+0x250>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01f      	beq.n	8002e02 <HAL_GPIO_Init+0x222>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <HAL_GPIO_Init+0x254>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_GPIO_Init+0x21e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_GPIO_Init+0x258>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x21a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_GPIO_Init+0x25c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x216>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <HAL_GPIO_Init+0x260>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x212>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_GPIO_Init+0x264>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x20e>
 8002dea:	2309      	movs	r3, #9
 8002dec:	e02d      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002dee:	230a      	movs	r3, #10
 8002df0:	e02b      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002df2:	2308      	movs	r3, #8
 8002df4:	e029      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002df6:	2307      	movs	r3, #7
 8002df8:	e027      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002dfa:	2306      	movs	r3, #6
 8002dfc:	e025      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002dfe:	2305      	movs	r3, #5
 8002e00:	e023      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002e02:	2304      	movs	r3, #4
 8002e04:	e021      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e01f      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e01d      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e01b      	b.n	8002e4a <HAL_GPIO_Init+0x26a>
 8002e12:	bf00      	nop
 8002e14:	58000080 	.word	0x58000080
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	58000400 	.word	0x58000400
 8002e20:	58020000 	.word	0x58020000
 8002e24:	58020400 	.word	0x58020400
 8002e28:	58020800 	.word	0x58020800
 8002e2c:	58020c00 	.word	0x58020c00
 8002e30:	58021000 	.word	0x58021000
 8002e34:	58021400 	.word	0x58021400
 8002e38:	58021800 	.word	0x58021800
 8002e3c:	58021c00 	.word	0x58021c00
 8002e40:	58022000 	.word	0x58022000
 8002e44:	58022400 	.word	0x58022400
 8002e48:	2300      	movs	r3, #0
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4093      	lsls	r3, r2
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e5a:	4938      	ldr	r1, [pc, #224]	; (8002f3c <HAL_GPIO_Init+0x35c>)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f47f ae63 	bne.w	8002bf4 <HAL_GPIO_Init+0x14>
  }
}
 8002f2e:	bf00      	nop
 8002f30:	bf00      	nop
 8002f32:	3724      	adds	r7, #36	; 0x24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	58000400 	.word	0x58000400

08002f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e001      	b.n	8002f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f80:	787b      	ldrb	r3, [r7, #1]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f8c:	e003      	b.n	8002f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	619a      	str	r2, [r3, #24]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fb4:	887a      	ldrh	r2, [r7, #2]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	041a      	lsls	r2, r3, #16
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	619a      	str	r2, [r3, #24]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd ffa3 	bl	8000f48 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0bd      	b.n	800319a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d031      	beq.n	80030c6 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4f      	ldr	r2, [pc, #316]	; (80031a4 <HAL_HRTIM_Init+0x198>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d10e      	bne.n	800308a <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800306c:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <HAL_HRTIM_Init+0x19c>)
 800306e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003072:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_HRTIM_Init+0x19c>)
 8003074:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003078:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800307c:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_HRTIM_Init+0x19c>)
 800307e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003098:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ae:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fed6 	bl	8001e78 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
 8003112:	e03e      	b.n	8003192 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003114:	7dfa      	ldrb	r2, [r7, #23]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3318      	adds	r3, #24
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003128:	7dfa      	ldrb	r2, [r7, #23]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	331c      	adds	r3, #28
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800313c:	7dfa      	ldrb	r2, [r7, #23]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3320      	adds	r3, #32
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003150:	7dfa      	ldrb	r2, [r7, #23]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3324      	adds	r3, #36	; 0x24
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003164:	7dfa      	ldrb	r2, [r7, #23]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3328      	adds	r3, #40	; 0x28
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003178:	7dfa      	ldrb	r2, [r7, #23]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3330      	adds	r3, #48	; 0x30
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	3301      	adds	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b05      	cmp	r3, #5
 8003196:	d9bd      	bls.n	8003114 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40017400 	.word	0x40017400
 80031a8:	58024400 	.word	0x58024400

080031ac <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d101      	bne.n	80031c8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
 80031c6:	e015      	b.n	80031f4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d104      	bne.n	80031e0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fd43 	bl	8003c64 <HRTIM_MasterBase_Config>
 80031de:	e004      	b.n	80031ea <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fd6c 	bl	8003cc2 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d101      	bne.n	8003218 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
 8003216:	e05f      	b.n	80032d8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003222:	2302      	movs	r3, #2
 8003224:	e058      	b.n	80032d8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d104      	bne.n	8003246 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fd7f 	bl	8003d42 <HRTIM_MasterWaveform_Config>
 8003244:	e004      	b.n	8003250 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fde0 	bl	8003e10 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4403      	add	r3, r0
 8003262:	3320      	adds	r3, #32
 8003264:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4403      	add	r3, r0
 8003278:	3324      	adds	r3, #36	; 0x24
 800327a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4403      	add	r3, r0
 800328e:	3328      	adds	r3, #40	; 0x28
 8003290:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4403      	add	r3, r0
 80032a4:	332c      	adds	r3, #44	; 0x2c
 80032a6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6919      	ldr	r1, [r3, #16]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4403      	add	r3, r0
 80032ba:	3330      	adds	r3, #48	; 0x30
 80032bc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 ffe3 	bl	800428c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d101      	bne.n	80032fe <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
 80032fc:	e157      	b.n	80035ae <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003308:	2302      	movs	r3, #2
 800330a:	e150      	b.n	80035ae <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b05      	cmp	r3, #5
 8003320:	d140      	bne.n	80033a4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3b01      	subs	r3, #1
 8003326:	2b07      	cmp	r3, #7
 8003328:	d82a      	bhi.n	8003380 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800332a:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003351 	.word	0x08003351
 8003334:	0800335d 	.word	0x0800335d
 8003338:	08003381 	.word	0x08003381
 800333c:	08003369 	.word	0x08003369
 8003340:	08003381 	.word	0x08003381
 8003344:	08003381 	.word	0x08003381
 8003348:	08003381 	.word	0x08003381
 800334c:	08003375 	.word	0x08003375
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	61da      	str	r2, [r3, #28]
        break;
 800335a:	e01a      	b.n	8003392 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8003366:	e014      	b.n	8003392 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8003372:	e00e      	b.n	8003392 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800337e:	e008      	b.n	8003392 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2207      	movs	r2, #7
 8003384:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8003390:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b07      	cmp	r3, #7
 800339c:	f040 80fe 	bne.w	800359c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e104      	b.n	80035ae <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	f200 80e3 	bhi.w	8003574 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80033ae:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033d5 	.word	0x080033d5
 80033b8:	080033e9 	.word	0x080033e9
 80033bc:	08003575 	.word	0x08003575
 80033c0:	080034a5 	.word	0x080034a5
 80033c4:	08003575 	.word	0x08003575
 80033c8:	08003575 	.word	0x08003575
 80033cc:	08003575 	.word	0x08003575
 80033d0:	080034b9 	.word	0x080034b9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6819      	ldr	r1, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	01db      	lsls	r3, r3, #7
 80033e0:	440b      	add	r3, r1
 80033e2:	339c      	adds	r3, #156	; 0x9c
 80033e4:	601a      	str	r2, [r3, #0]
        break;
 80033e6:	e0d1      	b.n	800358c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	01db      	lsls	r3, r3, #7
 80033f4:	440b      	add	r3, r1
 80033f6:	33a4      	adds	r3, #164	; 0xa4
 80033f8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03f      	beq.n	8003482 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3301      	adds	r3, #1
 800340a:	01db      	lsls	r3, r3, #7
 800340c:	4413      	add	r3, r2
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	6811      	ldr	r1, [r2, #0]
 8003414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3301      	adds	r3, #1
 800341c:	01db      	lsls	r3, r3, #7
 800341e:	440b      	add	r3, r1
 8003420:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3301      	adds	r3, #1
 800342a:	01db      	lsls	r3, r3, #7
 800342c:	4413      	add	r3, r2
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	6809      	ldr	r1, [r1, #0]
 8003438:	431a      	orrs	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3301      	adds	r3, #1
 800343e:	01db      	lsls	r3, r3, #7
 8003440:	440b      	add	r3, r1
 8003442:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344c:	d109      	bne.n	8003462 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	01db      	lsls	r3, r3, #7
 800345a:	440b      	add	r3, r1
 800345c:	339c      	adds	r3, #156	; 0x9c
 800345e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003460:	e091      	b.n	8003586 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800346a:	f040 808c 	bne.w	8003586 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	01db      	lsls	r3, r3, #7
 800347a:	440b      	add	r3, r1
 800347c:	33a8      	adds	r3, #168	; 0xa8
 800347e:	601a      	str	r2, [r3, #0]
         break;
 8003480:	e081      	b.n	8003586 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3301      	adds	r3, #1
 800348a:	01db      	lsls	r3, r3, #7
 800348c:	4413      	add	r3, r2
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	6811      	ldr	r1, [r2, #0]
 8003494:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3301      	adds	r3, #1
 800349c:	01db      	lsls	r3, r3, #7
 800349e:	440b      	add	r3, r1
 80034a0:	601a      	str	r2, [r3, #0]
         break;
 80034a2:	e070      	b.n	8003586 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	01db      	lsls	r3, r3, #7
 80034b0:	440b      	add	r3, r1
 80034b2:	33a8      	adds	r3, #168	; 0xa8
 80034b4:	601a      	str	r2, [r3, #0]
        break;
 80034b6:	e069      	b.n	800358c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	01db      	lsls	r3, r3, #7
 80034c4:	440b      	add	r3, r1
 80034c6:	33ac      	adds	r3, #172	; 0xac
 80034c8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d03f      	beq.n	8003552 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	01db      	lsls	r3, r3, #7
 80034dc:	4413      	add	r3, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	6811      	ldr	r1, [r2, #0]
 80034e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3301      	adds	r3, #1
 80034ec:	01db      	lsls	r3, r3, #7
 80034ee:	440b      	add	r3, r1
 80034f0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	3301      	adds	r3, #1
 80034fa:	01db      	lsls	r3, r3, #7
 80034fc:	4413      	add	r3, r2
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	6809      	ldr	r1, [r1, #0]
 800350a:	431a      	orrs	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3301      	adds	r3, #1
 8003510:	01db      	lsls	r3, r3, #7
 8003512:	440b      	add	r3, r1
 8003514:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351e:	d109      	bne.n	8003534 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	01db      	lsls	r3, r3, #7
 800352c:	440b      	add	r3, r1
 800352e:	339c      	adds	r3, #156	; 0x9c
 8003530:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8003532:	e02a      	b.n	800358a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800353c:	d125      	bne.n	800358a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	01db      	lsls	r3, r3, #7
 800354a:	440b      	add	r3, r1
 800354c:	33a8      	adds	r3, #168	; 0xa8
 800354e:	601a      	str	r2, [r3, #0]
         break;
 8003550:	e01b      	b.n	800358a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3301      	adds	r3, #1
 800355a:	01db      	lsls	r3, r3, #7
 800355c:	4413      	add	r3, r2
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	6811      	ldr	r1, [r2, #0]
 8003564:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	3301      	adds	r3, #1
 800356c:	01db      	lsls	r3, r3, #7
 800356e:	440b      	add	r3, r1
 8003570:	601a      	str	r2, [r3, #0]
         break;
 8003572:	e00a      	b.n	800358a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2207      	movs	r2, #7
 8003578:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003584:	e002      	b.n	800358c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800358a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b07      	cmp	r3, #7
 8003596:	d101      	bne.n	800359c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e008      	b.n	80035ae <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d101      	bne.n	80035da <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
 80035d8:	e01d      	b.n	8003616 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e016      	b.n	8003616 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fd46 	bl	8004090 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d101      	bne.n	800363e <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
 800363c:	e0df      	b.n	80037fe <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 8003648:	2302      	movs	r3, #2
 800364a:	e0d8      	b.n	80037fe <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003662:	f000 808d 	beq.w	8003780 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366c:	f200 80ad 	bhi.w	80037ca <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003676:	d05e      	beq.n	8003736 <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367e:	f200 80a4 	bhi.w	80037ca <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d07b      	beq.n	8003780 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b80      	cmp	r3, #128	; 0x80
 800368c:	f200 809d 	bhi.w	80037ca <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b20      	cmp	r3, #32
 8003694:	d84c      	bhi.n	8003730 <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8096 	beq.w	80037ca <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	2b1f      	cmp	r3, #31
 80036a4:	f200 8091 	bhi.w	80037ca <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	08003737 	.word	0x08003737
 80036b4:	08003781 	.word	0x08003781
 80036b8:	080037cb 	.word	0x080037cb
 80036bc:	08003737 	.word	0x08003737
 80036c0:	080037cb 	.word	0x080037cb
 80036c4:	080037cb 	.word	0x080037cb
 80036c8:	080037cb 	.word	0x080037cb
 80036cc:	08003781 	.word	0x08003781
 80036d0:	080037cb 	.word	0x080037cb
 80036d4:	080037cb 	.word	0x080037cb
 80036d8:	080037cb 	.word	0x080037cb
 80036dc:	080037cb 	.word	0x080037cb
 80036e0:	080037cb 	.word	0x080037cb
 80036e4:	080037cb 	.word	0x080037cb
 80036e8:	080037cb 	.word	0x080037cb
 80036ec:	08003737 	.word	0x08003737
 80036f0:	080037cb 	.word	0x080037cb
 80036f4:	080037cb 	.word	0x080037cb
 80036f8:	080037cb 	.word	0x080037cb
 80036fc:	080037cb 	.word	0x080037cb
 8003700:	080037cb 	.word	0x080037cb
 8003704:	080037cb 	.word	0x080037cb
 8003708:	080037cb 	.word	0x080037cb
 800370c:	080037cb 	.word	0x080037cb
 8003710:	080037cb 	.word	0x080037cb
 8003714:	080037cb 	.word	0x080037cb
 8003718:	080037cb 	.word	0x080037cb
 800371c:	080037cb 	.word	0x080037cb
 8003720:	080037cb 	.word	0x080037cb
 8003724:	080037cb 	.word	0x080037cb
 8003728:	080037cb 	.word	0x080037cb
 800372c:	08003781 	.word	0x08003781
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d149      	bne.n	80037ca <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d110      	bne.n	800375e <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	01db      	lsls	r3, r3, #7
 8003744:	4413      	add	r3, r2
 8003746:	33bc      	adds	r3, #188	; 0xbc
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	6811      	ldr	r1, [r2, #0]
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	01db      	lsls	r3, r3, #7
 8003756:	440b      	add	r3, r1
 8003758:	33bc      	adds	r3, #188	; 0xbc
 800375a:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 800375c:	e03e      	b.n	80037dc <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	01db      	lsls	r3, r3, #7
 8003766:	4413      	add	r3, r2
 8003768:	33c0      	adds	r3, #192	; 0xc0
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	6811      	ldr	r1, [r2, #0]
 8003770:	f043 0201 	orr.w	r2, r3, #1
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	01db      	lsls	r3, r3, #7
 8003778:	440b      	add	r3, r1
 800377a:	33c0      	adds	r3, #192	; 0xc0
 800377c:	601a      	str	r2, [r3, #0]
      break;
 800377e:	e02d      	b.n	80037dc <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d110      	bne.n	80037a8 <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	01db      	lsls	r3, r3, #7
 800378e:	4413      	add	r3, r2
 8003790:	33c4      	adds	r3, #196	; 0xc4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	6811      	ldr	r1, [r2, #0]
 8003798:	f043 0201 	orr.w	r2, r3, #1
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	01db      	lsls	r3, r3, #7
 80037a0:	440b      	add	r3, r1
 80037a2:	33c4      	adds	r3, #196	; 0xc4
 80037a4:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 80037a6:	e019      	b.n	80037dc <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	01db      	lsls	r3, r3, #7
 80037b0:	4413      	add	r3, r2
 80037b2:	33c8      	adds	r3, #200	; 0xc8
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	6811      	ldr	r1, [r2, #0]
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	01db      	lsls	r3, r3, #7
 80037c2:	440b      	add	r3, r1
 80037c4:	33c8      	adds	r3, #200	; 0xc8
 80037c6:	601a      	str	r2, [r3, #0]
      break;
 80037c8:	e008      	b.n	80037dc <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2207      	movs	r2, #7
 80037ce:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80037da:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	d101      	bne.n	80037ec <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e008      	b.n	80037fe <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop

0800380c <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_HRTIM_WaveformOutputStart+0x18>
 8003820:	2302      	movs	r3, #2
 8003822:	e01a      	b.n	800385a <HAL_HRTIM_WaveformOutputStart+0x4e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_HRTIM_WaveformOutputStop+0x18>
 800387a:	2302      	movs	r3, #2
 800387c:	e01a      	b.n	80038b4 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e05b      	b.n	8003990 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68d9      	ldr	r1, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e022      	b.n	8003968 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8003926:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d017      	beq.n	8003962 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	01db      	lsls	r3, r3, #7
 800393a:	4413      	add	r3, r2
 800393c:	338c      	adds	r3, #140	; 0x8c
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	3320      	adds	r3, #32
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	4302      	orrs	r2, r0
 800395a:	01db      	lsls	r3, r3, #7
 800395c:	440b      	add	r3, r1
 800395e:	338c      	adds	r3, #140	; 0x8c
 8003960:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	3301      	adds	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d9d9      	bls.n	8003922 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 800398e:	2300      	movs	r3, #0
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	20000024 	.word	0x20000024

080039a0 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80039aa:	f240 137f 	movw	r3, #383	; 0x17f
 80039ae:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e065      	b.n	8003a8a <HAL_HRTIM_WaveformCountStop_IT+0xea>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	43da      	mvns	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	400a      	ands	r2, r1
 80039e2:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68d9      	ldr	r1, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039fc:	43da      	mvns	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	400a      	ands	r2, r1
 8003a04:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
 8003a0a:	e023      	b.n	8003a54 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8003a10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d018      	beq.n	8003a4e <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	01db      	lsls	r3, r3, #7
 8003a24:	4413      	add	r3, r2
 8003a26:	338c      	adds	r3, #140	; 0x8c
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3320      	adds	r3, #32
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	4002      	ands	r2, r0
 8003a46:	01db      	lsls	r3, r3, #7
 8003a48:	440b      	add	r3, r1
 8003a4a:	338c      	adds	r3, #140	; 0x8c
 8003a4c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	3301      	adds	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d9d8      	bls.n	8003a0c <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f9      	bne.n	8003a5a <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6819      	ldr	r1, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	400a      	ands	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000024 	.word	0x20000024

08003a9c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2bff      	cmp	r3, #255	; 0xff
 8003aaa:	d103      	bne.n	8003ab4 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fc4f 	bl	8004350 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8003ab2:	e00a      	b.n	8003aca <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d103      	bne.n	8003ac2 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fcc6 	bl	800444c <HRTIM_Master_ISR>
}
 8003ac0:	e003      	b.n	8003aca <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fd6b 	bl	80045a0 <HRTIM_Timer_ISR>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f023 0307 	bic.w	r3, r3, #7
 8003c7c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0318 	bic.w	r3, r3, #24
 8003c8e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	6852      	ldr	r2, [r2, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b087      	sub	sp, #28
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	01db      	lsls	r3, r3, #7
 8003cd8:	4413      	add	r3, r2
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f023 0307 	bic.w	r3, r3, #7
 8003ce4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0318 	bic.w	r3, r3, #24
 8003cf6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	01db      	lsls	r3, r3, #7
 8003d0c:	4413      	add	r3, r2
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	01db      	lsls	r3, r3, #7
 8003d1e:	440b      	add	r3, r1
 8003d20:	3394      	adds	r3, #148	; 0x94
 8003d22:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6819      	ldr	r1, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	01db      	lsls	r3, r3, #7
 8003d30:	440b      	add	r3, r1
 8003d32:	3398      	adds	r3, #152	; 0x98
 8003d34:	601a      	str	r2, [r3, #0]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003d5c:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f023 0320 	bic.w	r3, r3, #32
 8003d64:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d76:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d88:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d9a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003dac:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003dbe:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003dd2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b08b      	sub	sp, #44	; 0x2c
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3301      	adds	r3, #1
 8003e24:	01db      	lsls	r3, r3, #7
 8003e26:	4413      	add	r3, r2
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	6811      	ldr	r1, [r2, #0]
 8003e2e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3301      	adds	r3, #1
 8003e36:	01db      	lsls	r3, r3, #7
 8003e38:	440b      	add	r3, r1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	3301      	adds	r3, #1
 8003e44:	01db      	lsls	r3, r3, #7
 8003e46:	4413      	add	r3, r2
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	01db      	lsls	r3, r3, #7
 8003e54:	4413      	add	r3, r2
 8003e56:	33e8      	adds	r3, #232	; 0xe8
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	01db      	lsls	r3, r3, #7
 8003e64:	4413      	add	r3, r2
 8003e66:	33e4      	adds	r3, #228	; 0xe4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003e74:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	f023 0320 	bic.w	r3, r3, #32
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	4313      	orrs	r3, r2
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	4313      	orrs	r3, r2
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef2:	d103      	bne.n	8003efc <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f023 031f 	bic.w	r3, r3, #31
 8003f38:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f4e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d108      	bne.n	8003f74 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f68:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003f7c:	d004      	beq.n	8003f88 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003f86:	d103      	bne.n	8003f90 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d108      	bne.n	8003fa2 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003f96:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d843      	bhi.n	8004036 <HRTIM_TimingUnitWaveform_Config+0x226>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fc9 	.word	0x08003fc9
 8003fb8:	08003fdf 	.word	0x08003fdf
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	0800400b 	.word	0x0800400b
 8003fc4:	08004021 	.word	0x08004021
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fce:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
      break;
 8003fdc:	e02c      	b.n	8004038 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61fb      	str	r3, [r7, #28]
      break;
 8003ff2:	e021      	b.n	8004038 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003ffa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	4313      	orrs	r3, r2
 8004006:	61fb      	str	r3, [r7, #28]
      break;
 8004008:	e016      	b.n	8004038 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004010:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	4313      	orrs	r3, r2
 800401c:	61fb      	str	r3, [r7, #28]
      break;
 800401e:	e00b      	b.n	8004038 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004026:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	015b      	lsls	r3, r3, #5
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	4313      	orrs	r3, r2
 8004032:	61fb      	str	r3, [r7, #28]
      break;
 8004034:	e000      	b.n	8004038 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8004036:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3301      	adds	r3, #1
 8004040:	01db      	lsls	r3, r3, #7
 8004042:	4413      	add	r3, r2
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	01db      	lsls	r3, r3, #7
 8004050:	4413      	add	r3, r2
 8004052:	33e8      	adds	r3, #232	; 0xe8
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	01db      	lsls	r3, r3, #7
 8004060:	4413      	add	r3, r2
 8004062:	33e4      	adds	r3, #228	; 0xe4
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	01db      	lsls	r3, r3, #7
 8004070:	4413      	add	r3, r2
 8004072:	33d4      	adds	r3, #212	; 0xd4
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004082:	bf00      	nop
 8004084:	372c      	adds	r7, #44	; 0x2c
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	; 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	01db      	lsls	r3, r3, #7
 80040aa:	4413      	add	r3, r2
 80040ac:	33e4      	adds	r3, #228	; 0xe4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	01db      	lsls	r3, r3, #7
 80040ba:	4413      	add	r3, r2
 80040bc:	33b8      	adds	r3, #184	; 0xb8
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c8:	d076      	beq.n	80041b8 <HRTIM_OutputConfig+0x128>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d0:	f200 8087 	bhi.w	80041e2 <HRTIM_OutputConfig+0x152>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040da:	d05a      	beq.n	8004192 <HRTIM_OutputConfig+0x102>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	d87e      	bhi.n	80041e2 <HRTIM_OutputConfig+0x152>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d066      	beq.n	80041b8 <HRTIM_OutputConfig+0x128>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b80      	cmp	r3, #128	; 0x80
 80040ee:	d878      	bhi.n	80041e2 <HRTIM_OutputConfig+0x152>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d84a      	bhi.n	800418c <HRTIM_OutputConfig+0xfc>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d072      	beq.n	80041e2 <HRTIM_OutputConfig+0x152>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	2b1f      	cmp	r3, #31
 8004102:	d86e      	bhi.n	80041e2 <HRTIM_OutputConfig+0x152>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HRTIM_OutputConfig+0x7c>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004193 	.word	0x08004193
 8004110:	080041b9 	.word	0x080041b9
 8004114:	080041e3 	.word	0x080041e3
 8004118:	08004193 	.word	0x08004193
 800411c:	080041e3 	.word	0x080041e3
 8004120:	080041e3 	.word	0x080041e3
 8004124:	080041e3 	.word	0x080041e3
 8004128:	080041b9 	.word	0x080041b9
 800412c:	080041e3 	.word	0x080041e3
 8004130:	080041e3 	.word	0x080041e3
 8004134:	080041e3 	.word	0x080041e3
 8004138:	080041e3 	.word	0x080041e3
 800413c:	080041e3 	.word	0x080041e3
 8004140:	080041e3 	.word	0x080041e3
 8004144:	080041e3 	.word	0x080041e3
 8004148:	08004193 	.word	0x08004193
 800414c:	080041e3 	.word	0x080041e3
 8004150:	080041e3 	.word	0x080041e3
 8004154:	080041e3 	.word	0x080041e3
 8004158:	080041e3 	.word	0x080041e3
 800415c:	080041e3 	.word	0x080041e3
 8004160:	080041e3 	.word	0x080041e3
 8004164:	080041e3 	.word	0x080041e3
 8004168:	080041e3 	.word	0x080041e3
 800416c:	080041e3 	.word	0x080041e3
 8004170:	080041e3 	.word	0x080041e3
 8004174:	080041e3 	.word	0x080041e3
 8004178:	080041e3 	.word	0x080041e3
 800417c:	080041e3 	.word	0x080041e3
 8004180:	080041e3 	.word	0x080041e3
 8004184:	080041e3 	.word	0x080041e3
 8004188:	080041b9 	.word	0x080041b9
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d127      	bne.n	80041e2 <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	01db      	lsls	r3, r3, #7
 800419e:	440b      	add	r3, r1
 80041a0:	33bc      	adds	r3, #188	; 0xbc
 80041a2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	01db      	lsls	r3, r3, #7
 80041b0:	440b      	add	r3, r1
 80041b2:	33c0      	adds	r3, #192	; 0xc0
 80041b4:	601a      	str	r2, [r3, #0]
      break;
 80041b6:	e015      	b.n	80041e4 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6819      	ldr	r1, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	01db      	lsls	r3, r3, #7
 80041c4:	440b      	add	r3, r1
 80041c6:	33c4      	adds	r3, #196	; 0xc4
 80041c8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	01db      	lsls	r3, r3, #7
 80041d6:	440b      	add	r3, r1
 80041d8:	33c8      	adds	r3, #200	; 0xc8
 80041da:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80041dc:	2310      	movs	r3, #16
 80041de:	61bb      	str	r3, [r7, #24]
      break;
 80041e0:	e000      	b.n	80041e4 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 80041e2:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80041e4:	22fe      	movs	r2, #254	; 0xfe
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	4313      	orrs	r3, r2
 8004202:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	4313      	orrs	r3, r2
 8004212:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	4313      	orrs	r3, r2
 8004222:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	4313      	orrs	r3, r2
 8004232:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	4313      	orrs	r3, r2
 8004242:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d111      	bne.n	8004270 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800425c:	2b00      	cmp	r3, #0
 800425e:	d107      	bne.n	8004270 <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	4313      	orrs	r3, r2
 800426e:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	01db      	lsls	r3, r3, #7
 8004278:	4413      	add	r3, r2
 800427a:	33e4      	adds	r3, #228	; 0xe4
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	601a      	str	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3724      	adds	r7, #36	; 0x24
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b05      	cmp	r3, #5
 800429a:	d851      	bhi.n	8004340 <HRTIM_ForceRegistersUpdate+0xb4>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HRTIM_ForceRegistersUpdate+0x18>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042d3 	.word	0x080042d3
 80042a8:	080042e9 	.word	0x080042e9
 80042ac:	080042ff 	.word	0x080042ff
 80042b0:	08004315 	.word	0x08004315
 80042b4:	0800432b 	.word	0x0800432b
 80042b8:	080042bd 	.word	0x080042bd
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042d0:	e037      	b.n	8004342 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0202 	orr.w	r2, r2, #2
 80042e2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042e6:	e02c      	b.n	8004342 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0204 	orr.w	r2, r2, #4
 80042f8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042fc:	e021      	b.n	8004342 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0208 	orr.w	r2, r2, #8
 800430e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004312:	e016      	b.n	8004342 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0210 	orr.w	r2, r2, #16
 8004324:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004328:	e00b      	b.n	8004342 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0220 	orr.w	r2, r2, #32
 800433a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800433e:	e000      	b.n	8004342 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8004340:	bf00      	nop
  }
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop

08004350 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800436a:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00c      	beq.n	8004390 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fba1 	bl	8003ad2 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00c      	beq.n	80043b4 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fb99 	bl	8003ae6 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2204      	movs	r2, #4
 80043ce:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fb91 	bl	8003afa <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2208      	movs	r2, #8
 80043f2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fb89 	bl	8003b0e <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2210      	movs	r2, #16
 8004416:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fb81 	bl	8003b22 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00c      	beq.n	8004444 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2220      	movs	r2, #32
 800443a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fb79 	bl	8003b36 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800445c:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8004466:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004494:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fb56 	bl	8003b4a <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00c      	beq.n	80044c2 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2201      	movs	r2, #1
 80044b8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044ba:	2105      	movs	r1, #5
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fb63 	bl	8003b88 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00c      	beq.n	80044e6 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2202      	movs	r2, #2
 80044dc:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044de:	2105      	movs	r1, #5
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fc fde9 	bl	80010b8 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00c      	beq.n	800450a <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2204      	movs	r2, #4
 8004500:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004502:	2105      	movs	r1, #5
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fc fe03 	bl	8001110 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00c      	beq.n	800452e <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2208      	movs	r2, #8
 8004524:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004526:	2105      	movs	r1, #5
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff fb38 	bl	8003b9e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00c      	beq.n	8004552 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2210      	movs	r2, #16
 8004548:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800454a:	2105      	movs	r1, #5
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fc fe6b 	bl	8001228 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2220      	movs	r2, #32
 800456c:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff faf5 	bl	8003b5e <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2240      	movs	r2, #64	; 0x40
 800458e:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004590:	2105      	movs	r1, #5
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff faed 	bl	8003b72 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004598:	bf00      	nop
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	4413      	add	r3, r2
 80045b6:	3304      	adds	r3, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	4413      	add	r3, r2
 80045c6:	338c      	adds	r3, #140	; 0x8c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d010      	beq.n	80045f8 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	01db      	lsls	r3, r3, #7
 80045e8:	4413      	add	r3, r2
 80045ea:	3388      	adds	r3, #136	; 0x88
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fac8 	bl	8003b88 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d010      	beq.n	8004624 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	01db      	lsls	r3, r3, #7
 8004614:	4413      	add	r3, r2
 8004616:	3388      	adds	r3, #136	; 0x88
 8004618:	2202      	movs	r2, #2
 800461a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 800461c:	6839      	ldr	r1, [r7, #0]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc fd4a 	bl	80010b8 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d010      	beq.n	8004650 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	01db      	lsls	r3, r3, #7
 8004640:	4413      	add	r3, r2
 8004642:	3388      	adds	r3, #136	; 0x88
 8004644:	2204      	movs	r2, #4
 8004646:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8004648:	6839      	ldr	r1, [r7, #0]
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc fd60 	bl	8001110 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d010      	beq.n	800467c <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	01db      	lsls	r3, r3, #7
 800466c:	4413      	add	r3, r2
 800466e:	3388      	adds	r3, #136	; 0x88
 8004670:	2208      	movs	r2, #8
 8004672:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fa91 	bl	8003b9e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b00      	cmp	r3, #0
 8004684:	d010      	beq.n	80046a8 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	01db      	lsls	r3, r3, #7
 8004698:	4413      	add	r3, r2
 800469a:	3388      	adds	r3, #136	; 0x88
 800469c:	2210      	movs	r2, #16
 800469e:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fdc0 	bl	8001228 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	01db      	lsls	r3, r3, #7
 80046c4:	4413      	add	r3, r2
 80046c6:	3388      	adds	r3, #136	; 0x88
 80046c8:	2240      	movs	r2, #64	; 0x40
 80046ca:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fa4f 	bl	8003b72 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d010      	beq.n	8004700 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	4413      	add	r3, r2
 80046f2:	3388      	adds	r3, #136	; 0x88
 80046f4:	2280      	movs	r2, #128	; 0x80
 80046f6:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fa5a 	bl	8003bb4 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d011      	beq.n	800472e <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00c      	beq.n	800472e <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	01db      	lsls	r3, r3, #7
 800471c:	4413      	add	r3, r2
 800471e:	3388      	adds	r3, #136	; 0x88
 8004720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004724:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fa4e 	bl	8003bca <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004734:	2b00      	cmp	r3, #0
 8004736:	d011      	beq.n	800475c <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	01db      	lsls	r3, r3, #7
 800474a:	4413      	add	r3, r2
 800474c:	3388      	adds	r3, #136	; 0x88
 800474e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004752:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8004754:	6839      	ldr	r1, [r7, #0]
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff fa58 	bl	8003c0c <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00c      	beq.n	800478a <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	01db      	lsls	r3, r3, #7
 8004778:	4413      	add	r3, r2
 800477a:	3388      	adds	r3, #136	; 0x88
 800477c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004780:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8004782:	6839      	ldr	r1, [r7, #0]
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fa4c 	bl	8003c22 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004790:	2b00      	cmp	r3, #0
 8004792:	d011      	beq.n	80047b8 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	01db      	lsls	r3, r3, #7
 80047a6:	4413      	add	r3, r2
 80047a8:	3388      	adds	r3, #136	; 0x88
 80047aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ae:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fa40 	bl	8003c38 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d011      	beq.n	80047e6 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00c      	beq.n	80047e6 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	01db      	lsls	r3, r3, #7
 80047d4:	4413      	add	r3, r2
 80047d6:	3388      	adds	r3, #136	; 0x88
 80047d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047dc:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fa34 	bl	8003c4e <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d011      	beq.n	8004814 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	01db      	lsls	r3, r3, #7
 8004802:	4413      	add	r3, r2
 8004804:	3388      	adds	r3, #136	; 0x88
 8004806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800480a:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff f9f1 	bl	8003bf6 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d011      	beq.n	8004842 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	01db      	lsls	r3, r3, #7
 8004830:	4413      	add	r3, r2
 8004832:	3388      	adds	r3, #136	; 0x88
 8004834:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004838:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff f9cf 	bl	8003be0 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e097      	b.n	800498e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fd fba3 	bl	8001fc4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d004      	beq.n	80048a0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800489e:	d103      	bne.n	80048a8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 031e 	bic.w	r3, r3, #30
 80048a6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4b38      	ldr	r3, [pc, #224]	; (8004998 <HAL_LPTIM_Init+0x14c>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4b37      	ldr	r3, [pc, #220]	; (800499c <HAL_LPTIM_Init+0x150>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80048cc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80048d2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80048d8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80048de:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d107      	bne.n	80048fe <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80048f6:	4313      	orrs	r3, r2
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d004      	beq.n	8004910 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800490e:	d107      	bne.n	8004920 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004918:	4313      	orrs	r3, r2
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004928:	4293      	cmp	r3, r2
 800492a:	d00a      	beq.n	8004942 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004934:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800493a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <HAL_LPTIM_Init+0x154>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_LPTIM_Init+0x112>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <HAL_LPTIM_Init+0x158>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
 800496e:	e009      	b.n	8004984 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <HAL_LPTIM_Init+0x15c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d104      	bne.n	8004984 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004982:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	ffff1f3f 	.word	0xffff1f3f
 800499c:	ff19f1fe 	.word	0xff19f1fe
 80049a0:	40002400 	.word	0x40002400
 80049a4:	58002400 	.word	0x58002400
 80049a8:	58002800 	.word	0x58002800

080049ac <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d00c      	beq.n	80049e0 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ce:	d107      	bne.n	80049e0 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80049de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2210      	movs	r2, #16
 80049f6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004a00:	2110      	movs	r1, #16
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f91e 	bl	8004c44 <LPTIM_WaitForFlag>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d101      	bne.n	8004a12 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e02f      	b.n	8004a72 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f946 	bl	8004ca4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f905 	bl	8004c28 <HAL_LPTIM_GetState>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d101      	bne.n	8004a28 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e024      	b.n	8004a72 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0210 	orr.w	r2, r2, #16
 8004a36:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0202 	orr.w	r2, r2, #2
 8004a46:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0204 	orr.w	r2, r2, #4
 8004a66:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10d      	bne.n	8004aac <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d106      	bne.n	8004aac <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f882 	bl	8004bb0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d106      	bne.n	8004ad6 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2202      	movs	r2, #2
 8004ace:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fc fae3 	bl	800109c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d10d      	bne.n	8004b00 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d106      	bne.n	8004b00 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2204      	movs	r2, #4
 8004af8:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f862 	bl	8004bc4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d10d      	bne.n	8004b2a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d106      	bne.n	8004b2a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2208      	movs	r2, #8
 8004b22:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f857 	bl	8004bd8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d10d      	bne.n	8004b54 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d106      	bne.n	8004b54 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f84c 	bl	8004bec <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d10d      	bne.n	8004b7e <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d106      	bne.n	8004b7e <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2220      	movs	r2, #32
 8004b76:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f841 	bl	8004c00 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d10d      	bne.n	8004ba8 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d106      	bne.n	8004ba8 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f836 	bl	8004c14 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004c36:	b2db      	uxtb	r3, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <LPTIM_WaitForFlag+0x58>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <LPTIM_WaitForFlag+0x5c>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	0b9b      	lsrs	r3, r3, #14
 8004c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	4013      	ands	r3, r2
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d002      	beq.n	8004c8e <LPTIM_WaitForFlag+0x4a>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ec      	bne.n	8004c68 <LPTIM_WaitForFlag+0x24>

  return result;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000014 	.word	0x20000014
 8004ca0:	d1b71759 	.word	0xd1b71759

08004ca4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cba:	2301      	movs	r3, #1
 8004cbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f383 8810 	msr	PRIMASK, r3
}
 8004cc4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a81      	ldr	r2, [pc, #516]	; (8004ed0 <LPTIM_Disable+0x22c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d02d      	beq.n	8004d2c <LPTIM_Disable+0x88>
 8004cd0:	4a7f      	ldr	r2, [pc, #508]	; (8004ed0 <LPTIM_Disable+0x22c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d830      	bhi.n	8004d38 <LPTIM_Disable+0x94>
 8004cd6:	4a7f      	ldr	r2, [pc, #508]	; (8004ed4 <LPTIM_Disable+0x230>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d021      	beq.n	8004d20 <LPTIM_Disable+0x7c>
 8004cdc:	4a7d      	ldr	r2, [pc, #500]	; (8004ed4 <LPTIM_Disable+0x230>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d82a      	bhi.n	8004d38 <LPTIM_Disable+0x94>
 8004ce2:	4a7d      	ldr	r2, [pc, #500]	; (8004ed8 <LPTIM_Disable+0x234>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d015      	beq.n	8004d14 <LPTIM_Disable+0x70>
 8004ce8:	4a7b      	ldr	r2, [pc, #492]	; (8004ed8 <LPTIM_Disable+0x234>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d824      	bhi.n	8004d38 <LPTIM_Disable+0x94>
 8004cee:	4a7b      	ldr	r2, [pc, #492]	; (8004edc <LPTIM_Disable+0x238>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <LPTIM_Disable+0x58>
 8004cf4:	4a7a      	ldr	r2, [pc, #488]	; (8004ee0 <LPTIM_Disable+0x23c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d006      	beq.n	8004d08 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004cfa:	e01d      	b.n	8004d38 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004cfc:	4b79      	ldr	r3, [pc, #484]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004d06:	e018      	b.n	8004d3a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004d08:	4b76      	ldr	r3, [pc, #472]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004d12:	e012      	b.n	8004d3a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004d14:	4b73      	ldr	r3, [pc, #460]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004d1e:	e00c      	b.n	8004d3a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004d20:	4b70      	ldr	r3, [pc, #448]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004d2a:	e006      	b.n	8004d3a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004d2c:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004d36:	e000      	b.n	8004d3a <LPTIM_Disable+0x96>
      break;
 8004d38:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a5a      	ldr	r2, [pc, #360]	; (8004ed0 <LPTIM_Disable+0x22c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d059      	beq.n	8004e20 <LPTIM_Disable+0x17c>
 8004d6c:	4a58      	ldr	r2, [pc, #352]	; (8004ed0 <LPTIM_Disable+0x22c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d867      	bhi.n	8004e42 <LPTIM_Disable+0x19e>
 8004d72:	4a58      	ldr	r2, [pc, #352]	; (8004ed4 <LPTIM_Disable+0x230>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d042      	beq.n	8004dfe <LPTIM_Disable+0x15a>
 8004d78:	4a56      	ldr	r2, [pc, #344]	; (8004ed4 <LPTIM_Disable+0x230>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d861      	bhi.n	8004e42 <LPTIM_Disable+0x19e>
 8004d7e:	4a56      	ldr	r2, [pc, #344]	; (8004ed8 <LPTIM_Disable+0x234>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d02b      	beq.n	8004ddc <LPTIM_Disable+0x138>
 8004d84:	4a54      	ldr	r2, [pc, #336]	; (8004ed8 <LPTIM_Disable+0x234>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d85b      	bhi.n	8004e42 <LPTIM_Disable+0x19e>
 8004d8a:	4a54      	ldr	r2, [pc, #336]	; (8004edc <LPTIM_Disable+0x238>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <LPTIM_Disable+0xf4>
 8004d90:	4a53      	ldr	r2, [pc, #332]	; (8004ee0 <LPTIM_Disable+0x23c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d011      	beq.n	8004dba <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004d96:	e054      	b.n	8004e42 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004d98:	4b52      	ldr	r3, [pc, #328]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	4a51      	ldr	r2, [pc, #324]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004da8:	4b4e      	ldr	r3, [pc, #312]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	4a4d      	ldr	r2, [pc, #308]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8004db8:	e044      	b.n	8004e44 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004dba:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc0:	4a48      	ldr	r2, [pc, #288]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004dca:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dd0:	4a44      	ldr	r2, [pc, #272]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004dd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004dda:	e033      	b.n	8004e44 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004ddc:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de2:	4a40      	ldr	r2, [pc, #256]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004dec:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df2:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004df4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004df8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004dfc:	e022      	b.n	8004e44 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8004dfe:	4b39      	ldr	r3, [pc, #228]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e04:	4a37      	ldr	r2, [pc, #220]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8004e0e:	4b35      	ldr	r3, [pc, #212]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e14:	4a33      	ldr	r2, [pc, #204]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004e1e:	e011      	b.n	8004e44 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8004e20:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e26:	4a2f      	ldr	r2, [pc, #188]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e2c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8004e30:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e36:	4a2b      	ldr	r2, [pc, #172]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004e40:	e000      	b.n	8004e44 <LPTIM_Disable+0x1a0>
      break;
 8004e42:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <LPTIM_Disable+0x1ae>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80d0 	beq.w	8004ff2 <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <LPTIM_Disable+0x22c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d031      	beq.n	8004ec0 <LPTIM_Disable+0x21c>
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <LPTIM_Disable+0x22c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d842      	bhi.n	8004ee8 <LPTIM_Disable+0x244>
 8004e62:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <LPTIM_Disable+0x230>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d024      	beq.n	8004eb2 <LPTIM_Disable+0x20e>
 8004e68:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <LPTIM_Disable+0x230>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d83c      	bhi.n	8004ee8 <LPTIM_Disable+0x244>
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	; (8004ed8 <LPTIM_Disable+0x234>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d017      	beq.n	8004ea4 <LPTIM_Disable+0x200>
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <LPTIM_Disable+0x234>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d836      	bhi.n	8004ee8 <LPTIM_Disable+0x244>
 8004e7a:	4a18      	ldr	r2, [pc, #96]	; (8004edc <LPTIM_Disable+0x238>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <LPTIM_Disable+0x1e4>
 8004e80:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <LPTIM_Disable+0x23c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004e86:	e02f      	b.n	8004ee8 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8004e88:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e8e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004e92:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8004e94:	e029      	b.n	8004eea <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004e9c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004ea0:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004ea2:	e022      	b.n	8004eea <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004eaa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004eae:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004eb0:	e01b      	b.n	8004eea <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004eb8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004ebc:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004ebe:	e014      	b.n	8004eea <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	4a07      	ldr	r2, [pc, #28]	; (8004ee4 <LPTIM_Disable+0x240>)
 8004ec6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004eca:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004ecc:	e00d      	b.n	8004eea <LPTIM_Disable+0x246>
 8004ece:	bf00      	nop
 8004ed0:	58003000 	.word	0x58003000
 8004ed4:	58002c00 	.word	0x58002c00
 8004ed8:	58002800 	.word	0x58002800
 8004edc:	40002400 	.word	0x40002400
 8004ee0:	58002400 	.word	0x58002400
 8004ee4:	58024400 	.word	0x58024400
        break;
 8004ee8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01a      	beq.n	8004f26 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004f08:	2108      	movs	r1, #8
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fe9a 	bl	8004c44 <LPTIM_WaitForFlag>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d103      	bne.n	8004f1e <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2203      	movs	r2, #3
 8004f1a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2208      	movs	r2, #8
 8004f24:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01a      	beq.n	8004f62 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004f44:	2110      	movs	r1, #16
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fe7c 	bl	8004c44 <LPTIM_WaitForFlag>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d103      	bne.n	8004f5a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2210      	movs	r2, #16
 8004f60:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a33      	ldr	r2, [pc, #204]	; (8005034 <LPTIM_Disable+0x390>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d039      	beq.n	8004fe0 <LPTIM_Disable+0x33c>
 8004f6c:	4a31      	ldr	r2, [pc, #196]	; (8005034 <LPTIM_Disable+0x390>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d841      	bhi.n	8004ff6 <LPTIM_Disable+0x352>
 8004f72:	4a31      	ldr	r2, [pc, #196]	; (8005038 <LPTIM_Disable+0x394>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d02a      	beq.n	8004fce <LPTIM_Disable+0x32a>
 8004f78:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <LPTIM_Disable+0x394>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d83b      	bhi.n	8004ff6 <LPTIM_Disable+0x352>
 8004f7e:	4a2f      	ldr	r2, [pc, #188]	; (800503c <LPTIM_Disable+0x398>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d01b      	beq.n	8004fbc <LPTIM_Disable+0x318>
 8004f84:	4a2d      	ldr	r2, [pc, #180]	; (800503c <LPTIM_Disable+0x398>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d835      	bhi.n	8004ff6 <LPTIM_Disable+0x352>
 8004f8a:	4a2d      	ldr	r2, [pc, #180]	; (8005040 <LPTIM_Disable+0x39c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <LPTIM_Disable+0x2f4>
 8004f90:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <LPTIM_Disable+0x3a0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d009      	beq.n	8004faa <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004f96:	e02e      	b.n	8004ff6 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004f98:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004fa0:	4929      	ldr	r1, [pc, #164]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8004fa8:	e026      	b.n	8004ff8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004faa:	4b27      	ldr	r3, [pc, #156]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fb2:	4925      	ldr	r1, [pc, #148]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004fba:	e01d      	b.n	8004ff8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004fbc:	4b22      	ldr	r3, [pc, #136]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fc4:	4920      	ldr	r1, [pc, #128]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004fcc:	e014      	b.n	8004ff8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8004fce:	4b1e      	ldr	r3, [pc, #120]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fd6:	491c      	ldr	r1, [pc, #112]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004fde:	e00b      	b.n	8004ff8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fe8:	4917      	ldr	r1, [pc, #92]	; (8005048 <LPTIM_Disable+0x3a4>)
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	4313      	orrs	r3, r2
 8004fee:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004ff0:	e002      	b.n	8004ff8 <LPTIM_Disable+0x354>
    }
  }
 8004ff2:	bf00      	nop
 8004ff4:	e000      	b.n	8004ff8 <LPTIM_Disable+0x354>
        break;
 8004ff6:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a3a      	ldr	r2, [r7, #32]
 8005016:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f383 8810 	msr	PRIMASK, r3
}
 800502a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800502c:	bf00      	nop
 800502e:	3730      	adds	r7, #48	; 0x30
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	58003000 	.word	0x58003000
 8005038:	58002c00 	.word	0x58002c00
 800503c:	58002800 	.word	0x58002800
 8005040:	40002400 	.word	0x40002400
 8005044:	58002400 	.word	0x58002400
 8005048:	58024400 	.word	0x58024400

0800504c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a04      	ldr	r2, [pc, #16]	; (8005068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	58024800 	.word	0x58024800

0800506c <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <HAL_PWR_EnterSLEEPMode+0x30>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	4a07      	ldr	r2, [pc, #28]	; (800509c <HAL_PWR_EnterSLEEPMode+0x30>)
 800507e:	f023 0304 	bic.w	r3, r3, #4
 8005082:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800508a:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 800508c:	e000      	b.n	8005090 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 800508e:	bf20      	wfe
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80050ac:	4b18      	ldr	r3, [pc, #96]	; (8005110 <HAL_PWR_EnterSTOPMode+0x70>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 0201 	bic.w	r2, r3, #1
 80050b4:	4916      	ldr	r1, [pc, #88]	; (8005110 <HAL_PWR_EnterSTOPMode+0x70>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80050bc:	4b14      	ldr	r3, [pc, #80]	; (8005110 <HAL_PWR_EnterSTOPMode+0x70>)
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	4a13      	ldr	r2, [pc, #76]	; (8005110 <HAL_PWR_EnterSTOPMode+0x70>)
 80050c2:	f023 0305 	bic.w	r3, r3, #5
 80050c6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80050c8:	4b11      	ldr	r3, [pc, #68]	; (8005110 <HAL_PWR_EnterSTOPMode+0x70>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	4a10      	ldr	r2, [pc, #64]	; (8005110 <HAL_PWR_EnterSTOPMode+0x70>)
 80050ce:	f023 0302 	bic.w	r3, r3, #2
 80050d2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80050d4:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <HAL_PWR_EnterSTOPMode+0x74>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <HAL_PWR_EnterSTOPMode+0x74>)
 80050da:	f043 0304 	orr.w	r3, r3, #4
 80050de:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80050e0:	f3bf 8f4f 	dsb	sy
}
 80050e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050e6:	f3bf 8f6f 	isb	sy
}
 80050ea:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80050f2:	bf30      	wfi
 80050f4:	e000      	b.n	80050f8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80050f6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_PWR_EnterSTOPMode+0x74>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4a05      	ldr	r2, [pc, #20]	; (8005114 <HAL_PWR_EnterSTOPMode+0x74>)
 80050fe:	f023 0304 	bic.w	r3, r3, #4
 8005102:	6113      	str	r3, [r2, #16]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	58024800 	.word	0x58024800
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_PWREx_ConfigSupply+0x70>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b04      	cmp	r3, #4
 800512a:	d00a      	beq.n	8005142 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <HAL_PWREx_ConfigSupply+0x70>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d001      	beq.n	800513e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e01f      	b.n	800517e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e01d      	b.n	800517e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_PWREx_ConfigSupply+0x70>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f023 0207 	bic.w	r2, r3, #7
 800514a:	490f      	ldr	r1, [pc, #60]	; (8005188 <HAL_PWREx_ConfigSupply+0x70>)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4313      	orrs	r3, r2
 8005150:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005152:	f7fd fa79 	bl	8002648 <HAL_GetTick>
 8005156:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005158:	e009      	b.n	800516e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800515a:	f7fd fa75 	bl	8002648 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005168:	d901      	bls.n	800516e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e007      	b.n	800517e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_PWREx_ConfigSupply+0x70>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517a:	d1ee      	bne.n	800515a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	58024800 	.word	0x58024800

0800518c <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 8005196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	58024800 	.word	0x58024800

080051ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	; 0x30
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d102      	bne.n	80051c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f000 bc48 	b.w	8005a50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8088 	beq.w	80052de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ce:	4b99      	ldr	r3, [pc, #612]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051d8:	4b96      	ldr	r3, [pc, #600]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d007      	beq.n	80051f4 <HAL_RCC_OscConfig+0x48>
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2b18      	cmp	r3, #24
 80051e8:	d111      	bne.n	800520e <HAL_RCC_OscConfig+0x62>
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d10c      	bne.n	800520e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f4:	4b8f      	ldr	r3, [pc, #572]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d06d      	beq.n	80052dc <HAL_RCC_OscConfig+0x130>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d169      	bne.n	80052dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f000 bc21 	b.w	8005a50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005216:	d106      	bne.n	8005226 <HAL_RCC_OscConfig+0x7a>
 8005218:	4b86      	ldr	r3, [pc, #536]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a85      	ldr	r2, [pc, #532]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e02e      	b.n	8005284 <HAL_RCC_OscConfig+0xd8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <HAL_RCC_OscConfig+0x9c>
 800522e:	4b81      	ldr	r3, [pc, #516]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a80      	ldr	r2, [pc, #512]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	4b7e      	ldr	r3, [pc, #504]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a7d      	ldr	r2, [pc, #500]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e01d      	b.n	8005284 <HAL_RCC_OscConfig+0xd8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0xc0>
 8005252:	4b78      	ldr	r3, [pc, #480]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a77      	ldr	r2, [pc, #476]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4b75      	ldr	r3, [pc, #468]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a74      	ldr	r2, [pc, #464]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0xd8>
 800526c:	4b71      	ldr	r3, [pc, #452]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a70      	ldr	r2, [pc, #448]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b6e      	ldr	r3, [pc, #440]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a6d      	ldr	r2, [pc, #436]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800527e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fd f9dc 	bl	8002648 <HAL_GetTick>
 8005290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005294:	f7fd f9d8 	bl	8002648 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	; 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e3d4      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052a6:	4b63      	ldr	r3, [pc, #396]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0xe8>
 80052b2:	e014      	b.n	80052de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fd f9c8 	bl	8002648 <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052bc:	f7fd f9c4 	bl	8002648 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e3c0      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ce:	4b59      	ldr	r3, [pc, #356]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x110>
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 80ca 	beq.w	8005480 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ec:	4b51      	ldr	r3, [pc, #324]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052f6:	4b4f      	ldr	r3, [pc, #316]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_RCC_OscConfig+0x166>
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2b18      	cmp	r3, #24
 8005306:	d156      	bne.n	80053b6 <HAL_RCC_OscConfig+0x20a>
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d151      	bne.n	80053b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005312:	4b48      	ldr	r3, [pc, #288]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_RCC_OscConfig+0x17e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e392      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800532a:	4b42      	ldr	r3, [pc, #264]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 0219 	bic.w	r2, r3, #25
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	493f      	ldr	r1, [pc, #252]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fd f984 	bl	8002648 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005344:	f7fd f980 	bl	8002648 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e37c      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005356:	4b37      	ldr	r3, [pc, #220]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005362:	f7fd f9c1 	bl	80026e8 <HAL_GetREVID>
 8005366:	4603      	mov	r3, r0
 8005368:	f241 0203 	movw	r2, #4099	; 0x1003
 800536c:	4293      	cmp	r3, r2
 800536e:	d817      	bhi.n	80053a0 <HAL_RCC_OscConfig+0x1f4>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d108      	bne.n	800538a <HAL_RCC_OscConfig+0x1de>
 8005378:	4b2e      	ldr	r3, [pc, #184]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005380:	4a2c      	ldr	r2, [pc, #176]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005388:	e07a      	b.n	8005480 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	031b      	lsls	r3, r3, #12
 8005398:	4926      	ldr	r1, [pc, #152]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800539e:	e06f      	b.n	8005480 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b24      	ldr	r3, [pc, #144]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	4921      	ldr	r1, [pc, #132]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053b4:	e064      	b.n	8005480 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d047      	beq.n	800544e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053be:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 0219 	bic.w	r2, r3, #25
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	491a      	ldr	r1, [pc, #104]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fd f93a 	bl	8002648 <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fd f936 	bl	8002648 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e332      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f6:	f7fd f977 	bl	80026e8 <HAL_GetREVID>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005400:	4293      	cmp	r3, r2
 8005402:	d819      	bhi.n	8005438 <HAL_RCC_OscConfig+0x28c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d108      	bne.n	800541e <HAL_RCC_OscConfig+0x272>
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005414:	4a07      	ldr	r2, [pc, #28]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541a:	6053      	str	r3, [r2, #4]
 800541c:	e030      	b.n	8005480 <HAL_RCC_OscConfig+0x2d4>
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	031b      	lsls	r3, r3, #12
 800542c:	4901      	ldr	r1, [pc, #4]	; (8005434 <HAL_RCC_OscConfig+0x288>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]
 8005432:	e025      	b.n	8005480 <HAL_RCC_OscConfig+0x2d4>
 8005434:	58024400 	.word	0x58024400
 8005438:	4b9a      	ldr	r3, [pc, #616]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	061b      	lsls	r3, r3, #24
 8005446:	4997      	ldr	r1, [pc, #604]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	604b      	str	r3, [r1, #4]
 800544c:	e018      	b.n	8005480 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800544e:	4b95      	ldr	r3, [pc, #596]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a94      	ldr	r2, [pc, #592]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7fd f8f5 	bl	8002648 <HAL_GetTick>
 800545e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005462:	f7fd f8f1 	bl	8002648 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e2ed      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005474:	4b8b      	ldr	r3, [pc, #556]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f0      	bne.n	8005462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80a9 	beq.w	80055e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548e:	4b85      	ldr	r3, [pc, #532]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005496:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005498:	4b82      	ldr	r3, [pc, #520]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d007      	beq.n	80054b4 <HAL_RCC_OscConfig+0x308>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b18      	cmp	r3, #24
 80054a8:	d13a      	bne.n	8005520 <HAL_RCC_OscConfig+0x374>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d135      	bne.n	8005520 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054b4:	4b7b      	ldr	r3, [pc, #492]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_OscConfig+0x320>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b80      	cmp	r3, #128	; 0x80
 80054c6:	d001      	beq.n	80054cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e2c1      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054cc:	f7fd f90c 	bl	80026e8 <HAL_GetREVID>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d817      	bhi.n	800550a <HAL_RCC_OscConfig+0x35e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d108      	bne.n	80054f4 <HAL_RCC_OscConfig+0x348>
 80054e2:	4b70      	ldr	r3, [pc, #448]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054ea:	4a6e      	ldr	r2, [pc, #440]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80054ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054f2:	e075      	b.n	80055e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054f4:	4b6b      	ldr	r3, [pc, #428]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	069b      	lsls	r3, r3, #26
 8005502:	4968      	ldr	r1, [pc, #416]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005504:	4313      	orrs	r3, r2
 8005506:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005508:	e06a      	b.n	80055e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800550a:	4b66      	ldr	r3, [pc, #408]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	061b      	lsls	r3, r3, #24
 8005518:	4962      	ldr	r1, [pc, #392]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800551a:	4313      	orrs	r3, r2
 800551c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800551e:	e05f      	b.n	80055e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d042      	beq.n	80055ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005528:	4b5e      	ldr	r3, [pc, #376]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5d      	ldr	r2, [pc, #372]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800552e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fd f888 	bl	8002648 <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800553c:	f7fd f884 	bl	8002648 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e280      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800554e:	4b55      	ldr	r3, [pc, #340]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800555a:	f7fd f8c5 	bl	80026e8 <HAL_GetREVID>
 800555e:	4603      	mov	r3, r0
 8005560:	f241 0203 	movw	r2, #4099	; 0x1003
 8005564:	4293      	cmp	r3, r2
 8005566:	d817      	bhi.n	8005598 <HAL_RCC_OscConfig+0x3ec>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	2b20      	cmp	r3, #32
 800556e:	d108      	bne.n	8005582 <HAL_RCC_OscConfig+0x3d6>
 8005570:	4b4c      	ldr	r3, [pc, #304]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005578:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800557a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800557e:	6053      	str	r3, [r2, #4]
 8005580:	e02e      	b.n	80055e0 <HAL_RCC_OscConfig+0x434>
 8005582:	4b48      	ldr	r3, [pc, #288]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	069b      	lsls	r3, r3, #26
 8005590:	4944      	ldr	r1, [pc, #272]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005592:	4313      	orrs	r3, r2
 8005594:	604b      	str	r3, [r1, #4]
 8005596:	e023      	b.n	80055e0 <HAL_RCC_OscConfig+0x434>
 8005598:	4b42      	ldr	r3, [pc, #264]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	061b      	lsls	r3, r3, #24
 80055a6:	493f      	ldr	r1, [pc, #252]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60cb      	str	r3, [r1, #12]
 80055ac:	e018      	b.n	80055e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055ae:	4b3d      	ldr	r3, [pc, #244]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fd f845 	bl	8002648 <HAL_GetTick>
 80055be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055c2:	f7fd f841 	bl	8002648 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e23d      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055d4:	4b33      	ldr	r3, [pc, #204]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f0      	bne.n	80055c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d036      	beq.n	800565a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d019      	beq.n	8005628 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f4:	4b2b      	ldr	r3, [pc, #172]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80055f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f8:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fd f822 	bl	8002648 <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005608:	f7fd f81e 	bl	8002648 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e21a      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800561a:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800561c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x45c>
 8005626:	e018      	b.n	800565a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005628:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800562a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562c:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fd f808 	bl	8002648 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563c:	f7fd f804 	bl	8002648 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e200      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800564e:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d039      	beq.n	80056da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01c      	beq.n	80056a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005678:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800567a:	f7fc ffe5 	bl	8002648 <HAL_GetTick>
 800567e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005682:	f7fc ffe1 	bl	8002648 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e1dd      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_OscConfig+0x4f8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x4d6>
 80056a0:	e01b      	b.n	80056da <HAL_RCC_OscConfig+0x52e>
 80056a2:	bf00      	nop
 80056a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056a8:	4b9b      	ldr	r3, [pc, #620]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a9a      	ldr	r2, [pc, #616]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80056ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056b4:	f7fc ffc8 	bl	8002648 <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056bc:	f7fc ffc4 	bl	8002648 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e1c0      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056ce:	4b92      	ldr	r3, [pc, #584]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 8081 	beq.w	80057ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056e8:	4b8c      	ldr	r3, [pc, #560]	; (800591c <HAL_RCC_OscConfig+0x770>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a8b      	ldr	r2, [pc, #556]	; (800591c <HAL_RCC_OscConfig+0x770>)
 80056ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056f4:	f7fc ffa8 	bl	8002648 <HAL_GetTick>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056fc:	f7fc ffa4 	bl	8002648 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1a0      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800570e:	4b83      	ldr	r3, [pc, #524]	; (800591c <HAL_RCC_OscConfig+0x770>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d106      	bne.n	8005730 <HAL_RCC_OscConfig+0x584>
 8005722:	4b7d      	ldr	r3, [pc, #500]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	4a7c      	ldr	r2, [pc, #496]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6713      	str	r3, [r2, #112]	; 0x70
 800572e:	e02d      	b.n	800578c <HAL_RCC_OscConfig+0x5e0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10c      	bne.n	8005752 <HAL_RCC_OscConfig+0x5a6>
 8005738:	4b77      	ldr	r3, [pc, #476]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	4a76      	ldr	r2, [pc, #472]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800573e:	f023 0301 	bic.w	r3, r3, #1
 8005742:	6713      	str	r3, [r2, #112]	; 0x70
 8005744:	4b74      	ldr	r3, [pc, #464]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	4a73      	ldr	r2, [pc, #460]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800574a:	f023 0304 	bic.w	r3, r3, #4
 800574e:	6713      	str	r3, [r2, #112]	; 0x70
 8005750:	e01c      	b.n	800578c <HAL_RCC_OscConfig+0x5e0>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b05      	cmp	r3, #5
 8005758:	d10c      	bne.n	8005774 <HAL_RCC_OscConfig+0x5c8>
 800575a:	4b6f      	ldr	r3, [pc, #444]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a6e      	ldr	r2, [pc, #440]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005760:	f043 0304 	orr.w	r3, r3, #4
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
 8005766:	4b6c      	ldr	r3, [pc, #432]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a6b      	ldr	r2, [pc, #428]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
 8005772:	e00b      	b.n	800578c <HAL_RCC_OscConfig+0x5e0>
 8005774:	4b68      	ldr	r3, [pc, #416]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	4a67      	ldr	r2, [pc, #412]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	6713      	str	r3, [r2, #112]	; 0x70
 8005780:	4b65      	ldr	r3, [pc, #404]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	4a64      	ldr	r2, [pc, #400]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005786:	f023 0304 	bic.w	r3, r3, #4
 800578a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d015      	beq.n	80057c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fc ff58 	bl	8002648 <HAL_GetTick>
 8005798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800579c:	f7fc ff54 	bl	8002648 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e14e      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057b2:	4b59      	ldr	r3, [pc, #356]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ee      	beq.n	800579c <HAL_RCC_OscConfig+0x5f0>
 80057be:	e014      	b.n	80057ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c0:	f7fc ff42 	bl	8002648 <HAL_GetTick>
 80057c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057c6:	e00a      	b.n	80057de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c8:	f7fc ff3e 	bl	8002648 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e138      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057de:	4b4e      	ldr	r3, [pc, #312]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1ee      	bne.n	80057c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 812d 	beq.w	8005a4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057f4:	4b48      	ldr	r3, [pc, #288]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057fc:	2b18      	cmp	r3, #24
 80057fe:	f000 80bd 	beq.w	800597c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	2b02      	cmp	r3, #2
 8005808:	f040 809e 	bne.w	8005948 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580c:	4b42      	ldr	r3, [pc, #264]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a41      	ldr	r2, [pc, #260]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fc ff16 	bl	8002648 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc ff12 	bl	8002648 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e10e      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005842:	4b37      	ldr	r3, [pc, #220]	; (8005920 <HAL_RCC_OscConfig+0x774>)
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800584e:	0112      	lsls	r2, r2, #4
 8005850:	430a      	orrs	r2, r1
 8005852:	4931      	ldr	r1, [pc, #196]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005854:	4313      	orrs	r3, r2
 8005856:	628b      	str	r3, [r1, #40]	; 0x28
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	3b01      	subs	r3, #1
 800585e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	3b01      	subs	r3, #1
 8005868:	025b      	lsls	r3, r3, #9
 800586a:	b29b      	uxth	r3, r3
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	3b01      	subs	r3, #1
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005880:	3b01      	subs	r3, #1
 8005882:	061b      	lsls	r3, r3, #24
 8005884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005888:	4923      	ldr	r1, [pc, #140]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800588a:	4313      	orrs	r3, r2
 800588c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	4a21      	ldr	r2, [pc, #132]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800589a:	4b1f      	ldr	r3, [pc, #124]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 800589c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <HAL_RCC_OscConfig+0x778>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058a6:	00d2      	lsls	r2, r2, #3
 80058a8:	491b      	ldr	r1, [pc, #108]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058ae:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	f023 020c 	bic.w	r2, r3, #12
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	4917      	ldr	r1, [pc, #92]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058c0:	4b15      	ldr	r3, [pc, #84]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	f023 0202 	bic.w	r2, r3, #2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	4912      	ldr	r1, [pc, #72]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058d2:	4b11      	ldr	r3, [pc, #68]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	4a10      	ldr	r2, [pc, #64]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058de:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058f6:	4b08      	ldr	r3, [pc, #32]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	4a07      	ldr	r2, [pc, #28]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a04      	ldr	r2, [pc, #16]	; (8005918 <HAL_RCC_OscConfig+0x76c>)
 8005908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590e:	f7fc fe9b 	bl	8002648 <HAL_GetTick>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005914:	e011      	b.n	800593a <HAL_RCC_OscConfig+0x78e>
 8005916:	bf00      	nop
 8005918:	58024400 	.word	0x58024400
 800591c:	58024800 	.word	0x58024800
 8005920:	fffffc0c 	.word	0xfffffc0c
 8005924:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005928:	f7fc fe8e 	bl	8002648 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e08a      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800593a:	4b47      	ldr	r3, [pc, #284]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x77c>
 8005946:	e082      	b.n	8005a4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005948:	4b43      	ldr	r3, [pc, #268]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a42      	ldr	r2, [pc, #264]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 800594e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005954:	f7fc fe78 	bl	8002648 <HAL_GetTick>
 8005958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595c:	f7fc fe74 	bl	8002648 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e070      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800596e:	4b3a      	ldr	r3, [pc, #232]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x7b0>
 800597a:	e068      	b.n	8005a4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800597c:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005982:	4b35      	ldr	r3, [pc, #212]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	2b01      	cmp	r3, #1
 800598e:	d031      	beq.n	80059f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f003 0203 	and.w	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d12a      	bne.n	80059f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d122      	bne.n	80059f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d11a      	bne.n	80059f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	0a5b      	lsrs	r3, r3, #9
 80059c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d111      	bne.n	80059f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	0c1b      	lsrs	r3, r3, #16
 80059d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059de:	429a      	cmp	r2, r3
 80059e0:	d108      	bne.n	80059f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	0e1b      	lsrs	r3, r3, #24
 80059e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e02b      	b.n	8005a50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80059f8:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	08db      	lsrs	r3, r3, #3
 80059fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d01f      	beq.n	8005a4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	4a11      	ldr	r2, [pc, #68]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a1a:	f7fc fe15 	bl	8002648 <HAL_GetTick>
 8005a1e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a20:	bf00      	nop
 8005a22:	f7fc fe11 	bl	8002648 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d0f9      	beq.n	8005a22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 8005a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a32:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <HAL_RCC_OscConfig+0x8b0>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a3a:	00d2      	lsls	r2, r2, #3
 8005a3c:	4906      	ldr	r1, [pc, #24]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <HAL_RCC_OscConfig+0x8ac>)
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3730      	adds	r7, #48	; 0x30
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	ffff0007 	.word	0xffff0007

08005a60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e19c      	b.n	8005dae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a74:	4b8a      	ldr	r3, [pc, #552]	; (8005ca0 <HAL_RCC_ClockConfig+0x240>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d910      	bls.n	8005aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a82:	4b87      	ldr	r3, [pc, #540]	; (8005ca0 <HAL_RCC_ClockConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 020f 	bic.w	r2, r3, #15
 8005a8a:	4985      	ldr	r1, [pc, #532]	; (8005ca0 <HAL_RCC_ClockConfig+0x240>)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b83      	ldr	r3, [pc, #524]	; (8005ca0 <HAL_RCC_ClockConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e184      	b.n	8005dae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d010      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	4b7b      	ldr	r3, [pc, #492]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d908      	bls.n	8005ad2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ac0:	4b78      	ldr	r3, [pc, #480]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	4975      	ldr	r1, [pc, #468]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d010      	beq.n	8005b00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	4b70      	ldr	r3, [pc, #448]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d908      	bls.n	8005b00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005aee:	4b6d      	ldr	r3, [pc, #436]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	496a      	ldr	r1, [pc, #424]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d010      	beq.n	8005b2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	4b64      	ldr	r3, [pc, #400]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d908      	bls.n	8005b2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b1c:	4b61      	ldr	r3, [pc, #388]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	495e      	ldr	r1, [pc, #376]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d010      	beq.n	8005b5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	4b59      	ldr	r3, [pc, #356]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d908      	bls.n	8005b5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b4a:	4b56      	ldr	r3, [pc, #344]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	4953      	ldr	r1, [pc, #332]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d010      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d908      	bls.n	8005b8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b78:	4b4a      	ldr	r3, [pc, #296]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f023 020f 	bic.w	r2, r3, #15
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4947      	ldr	r1, [pc, #284]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d055      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b96:	4b43      	ldr	r3, [pc, #268]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	4940      	ldr	r1, [pc, #256]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bb0:	4b3c      	ldr	r3, [pc, #240]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d121      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0f6      	b.n	8005dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d107      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bc8:	4b36      	ldr	r3, [pc, #216]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d115      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0ea      	b.n	8005dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d107      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005be0:	4b30      	ldr	r3, [pc, #192]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d109      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0de      	b.n	8005dae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bf0:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0d6      	b.n	8005dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c00:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f023 0207 	bic.w	r2, r3, #7
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4925      	ldr	r1, [pc, #148]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c12:	f7fc fd19 	bl	8002648 <HAL_GetTick>
 8005c16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c18:	e00a      	b.n	8005c30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c1a:	f7fc fd15 	bl	8002648 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e0be      	b.n	8005dae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c30:	4b1c      	ldr	r3, [pc, #112]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d1eb      	bne.n	8005c1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d010      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d208      	bcs.n	8005c70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f023 020f 	bic.w	r2, r3, #15
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	490e      	ldr	r1, [pc, #56]	; (8005ca4 <HAL_RCC_ClockConfig+0x244>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <HAL_RCC_ClockConfig+0x240>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d214      	bcs.n	8005ca8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <HAL_RCC_ClockConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 020f 	bic.w	r2, r3, #15
 8005c86:	4906      	ldr	r1, [pc, #24]	; (8005ca0 <HAL_RCC_ClockConfig+0x240>)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <HAL_RCC_ClockConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e086      	b.n	8005dae <HAL_RCC_ClockConfig+0x34e>
 8005ca0:	52002000 	.word	0x52002000
 8005ca4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	4b3f      	ldr	r3, [pc, #252]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d208      	bcs.n	8005cd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cc4:	4b3c      	ldr	r3, [pc, #240]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	4939      	ldr	r1, [pc, #228]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d010      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d208      	bcs.n	8005d04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cf2:	4b31      	ldr	r3, [pc, #196]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	492e      	ldr	r1, [pc, #184]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d010      	beq.n	8005d32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	4b28      	ldr	r3, [pc, #160]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d208      	bcs.n	8005d32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	4922      	ldr	r1, [pc, #136]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d010      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d208      	bcs.n	8005d60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d4e:	4b1a      	ldr	r3, [pc, #104]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	4917      	ldr	r1, [pc, #92]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d60:	f000 f844 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	0a1b      	lsrs	r3, r3, #8
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	4912      	ldr	r1, [pc, #72]	; (8005dbc <HAL_RCC_ClockConfig+0x35c>)
 8005d72:	5ccb      	ldrb	r3, [r1, r3]
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d7e:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <HAL_RCC_ClockConfig+0x358>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <HAL_RCC_ClockConfig+0x35c>)
 8005d88:	5cd3      	ldrb	r3, [r2, r3]
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
 8005d94:	4a0a      	ldr	r2, [pc, #40]	; (8005dc0 <HAL_RCC_ClockConfig+0x360>)
 8005d96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d98:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <HAL_RCC_ClockConfig+0x364>)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <HAL_RCC_ClockConfig+0x368>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fc fc06 	bl	80025b4 <HAL_InitTick>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	0800c5d4 	.word	0x0800c5d4
 8005dc0:	20000018 	.word	0x20000018
 8005dc4:	20000014 	.word	0x20000014
 8005dc8:	2000001c 	.word	0x2000001c

08005dcc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCC_EnableCSS+0x1c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a04      	ldr	r2, [pc, #16]	; (8005de8 <HAL_RCC_EnableCSS+0x1c>)
 8005dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dda:	6013      	str	r3, [r2, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	58024400 	.word	0x58024400

08005dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	; 0x24
 8005df0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005df2:	4bb3      	ldr	r3, [pc, #716]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dfa:	2b18      	cmp	r3, #24
 8005dfc:	f200 8155 	bhi.w	80060aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e6d 	.word	0x08005e6d
 8005e0c:	080060ab 	.word	0x080060ab
 8005e10:	080060ab 	.word	0x080060ab
 8005e14:	080060ab 	.word	0x080060ab
 8005e18:	080060ab 	.word	0x080060ab
 8005e1c:	080060ab 	.word	0x080060ab
 8005e20:	080060ab 	.word	0x080060ab
 8005e24:	080060ab 	.word	0x080060ab
 8005e28:	08005e93 	.word	0x08005e93
 8005e2c:	080060ab 	.word	0x080060ab
 8005e30:	080060ab 	.word	0x080060ab
 8005e34:	080060ab 	.word	0x080060ab
 8005e38:	080060ab 	.word	0x080060ab
 8005e3c:	080060ab 	.word	0x080060ab
 8005e40:	080060ab 	.word	0x080060ab
 8005e44:	080060ab 	.word	0x080060ab
 8005e48:	08005e99 	.word	0x08005e99
 8005e4c:	080060ab 	.word	0x080060ab
 8005e50:	080060ab 	.word	0x080060ab
 8005e54:	080060ab 	.word	0x080060ab
 8005e58:	080060ab 	.word	0x080060ab
 8005e5c:	080060ab 	.word	0x080060ab
 8005e60:	080060ab 	.word	0x080060ab
 8005e64:	080060ab 	.word	0x080060ab
 8005e68:	08005e9f 	.word	0x08005e9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6c:	4b94      	ldr	r3, [pc, #592]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e78:	4b91      	ldr	r3, [pc, #580]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	4a90      	ldr	r2, [pc, #576]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
 8005e88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e8a:	e111      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e8c:	4b8d      	ldr	r3, [pc, #564]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e8e:	61bb      	str	r3, [r7, #24]
      break;
 8005e90:	e10e      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e92:	4b8d      	ldr	r3, [pc, #564]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e94:	61bb      	str	r3, [r7, #24]
      break;
 8005e96:	e10b      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e98:	4b8c      	ldr	r3, [pc, #560]	; (80060cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e9a:	61bb      	str	r3, [r7, #24]
      break;
 8005e9c:	e108      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e9e:	4b88      	ldr	r3, [pc, #544]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ea8:	4b85      	ldr	r3, [pc, #532]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005eb4:	4b82      	ldr	r3, [pc, #520]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ebe:	4b80      	ldr	r3, [pc, #512]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80e1 	beq.w	80060a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	f000 8083 	beq.w	8005ff0 <HAL_RCC_GetSysClockFreq+0x204>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f200 80a1 	bhi.w	8006034 <HAL_RCC_GetSysClockFreq+0x248>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCC_GetSysClockFreq+0x114>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d056      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x1c0>
 8005efe:	e099      	b.n	8006034 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f00:	4b6f      	ldr	r3, [pc, #444]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02d      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f0c:	4b6c      	ldr	r3, [pc, #432]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	4a6b      	ldr	r2, [pc, #428]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f66:	e087      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b51      	ldr	r3, [pc, #324]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005faa:	e065      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b40      	ldr	r3, [pc, #256]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fd2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fee:	e043      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060dc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a02 	vldr	s12, [r7, #8]
 8006016:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006032:	e021      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006056:	ed97 6a02 	vldr	s12, [r7, #8]
 800605a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006076:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006078:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006082:	3301      	adds	r3, #1
 8006084:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006090:	edd7 6a07 	vldr	s13, [r7, #28]
 8006094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609c:	ee17 3a90 	vmov	r3, s15
 80060a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060a2:	e005      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
      break;
 80060a8:	e002      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060ac:	61bb      	str	r3, [r7, #24]
      break;
 80060ae:	bf00      	nop
  }

  return sysclockfreq;
 80060b0:	69bb      	ldr	r3, [r7, #24]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3724      	adds	r7, #36	; 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	58024400 	.word	0x58024400
 80060c4:	03d09000 	.word	0x03d09000
 80060c8:	003d0900 	.word	0x003d0900
 80060cc:	007f2815 	.word	0x007f2815
 80060d0:	46000000 	.word	0x46000000
 80060d4:	4c742400 	.word	0x4c742400
 80060d8:	4a742400 	.word	0x4a742400
 80060dc:	4afe502a 	.word	0x4afe502a

080060e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060e6:	f7ff fe81 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <HAL_RCC_GetHCLKFreq+0x50>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	490f      	ldr	r1, [pc, #60]	; (8006134 <HAL_RCC_GetHCLKFreq+0x54>)
 80060f8:	5ccb      	ldrb	r3, [r1, r3]
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006102:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <HAL_RCC_GetHCLKFreq+0x50>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <HAL_RCC_GetHCLKFreq+0x54>)
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	4a07      	ldr	r2, [pc, #28]	; (8006138 <HAL_RCC_GetHCLKFreq+0x58>)
 800611c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800611e:	4a07      	ldr	r2, [pc, #28]	; (800613c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006124:	4b04      	ldr	r3, [pc, #16]	; (8006138 <HAL_RCC_GetHCLKFreq+0x58>)
 8006126:	681b      	ldr	r3, [r3, #0]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	58024400 	.word	0x58024400
 8006134:	0800c5d4 	.word	0x0800c5d4
 8006138:	20000018 	.word	0x20000018
 800613c:	20000014 	.word	0x20000014

08006140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006144:	f7ff ffcc 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 8006148:	4602      	mov	r2, r0
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	091b      	lsrs	r3, r3, #4
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	4904      	ldr	r1, [pc, #16]	; (8006168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006156:	5ccb      	ldrb	r3, [r1, r3]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd80      	pop	{r7, pc}
 8006164:	58024400 	.word	0x58024400
 8006168:	0800c5d4 	.word	0x0800c5d4

0800616c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006170:	f7ff ffb6 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 8006174:	4602      	mov	r2, r0
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	0a1b      	lsrs	r3, r3, #8
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	4904      	ldr	r1, [pc, #16]	; (8006194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006182:	5ccb      	ldrb	r3, [r1, r3]
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	58024400 	.word	0x58024400
 8006194:	0800c5d4 	.word	0x0800c5d4

08006198 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800619c:	4b07      	ldr	r3, [pc, #28]	; (80061bc <HAL_RCC_NMI_IRQHandler+0x24>)
 800619e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a8:	d105      	bne.n	80061b6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80061aa:	f000 f809 	bl	80061c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80061ae:	4b03      	ldr	r3, [pc, #12]	; (80061bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80061b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061b4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80061b6:	bf00      	nop
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	58024400 	.word	0x58024400

080061c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061d4:	b0ca      	sub	sp, #296	; 0x128
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061e2:	2300      	movs	r3, #0
 80061e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80061f4:	2500      	movs	r5, #0
 80061f6:	ea54 0305 	orrs.w	r3, r4, r5
 80061fa:	d049      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006202:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006206:	d02f      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006208:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800620c:	d828      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800620e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006212:	d01a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006218:	d822      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800621e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006222:	d007      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006224:	e01c      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006226:	4bb8      	ldr	r3, [pc, #736]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	4ab7      	ldr	r2, [pc, #732]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800622c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006230:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006232:	e01a      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006238:	3308      	adds	r3, #8
 800623a:	2102      	movs	r1, #2
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fce5 	bl	8007c0c <RCCEx_PLL2_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006248:	e00f      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800624a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624e:	3328      	adds	r3, #40	; 0x28
 8006250:	2102      	movs	r1, #2
 8006252:	4618      	mov	r0, r3
 8006254:	f001 fd8c 	bl	8007d70 <RCCEx_PLL3_Config>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800625e:	e004      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006266:	e000      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006272:	4ba5      	ldr	r3, [pc, #660]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006276:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006280:	4aa1      	ldr	r2, [pc, #644]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006282:	430b      	orrs	r3, r1
 8006284:	6513      	str	r3, [r2, #80]	; 0x50
 8006286:	e003      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800628c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800629c:	f04f 0900 	mov.w	r9, #0
 80062a0:	ea58 0309 	orrs.w	r3, r8, r9
 80062a4:	d047      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80062a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d82a      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062cd 	.word	0x080062cd
 80062bc:	080062db 	.word	0x080062db
 80062c0:	080062f1 	.word	0x080062f1
 80062c4:	0800630f 	.word	0x0800630f
 80062c8:	0800630f 	.word	0x0800630f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062cc:	4b8e      	ldr	r3, [pc, #568]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4a8d      	ldr	r2, [pc, #564]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062d8:	e01a      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062de:	3308      	adds	r3, #8
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 fc92 	bl	8007c0c <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062ee:	e00f      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	3328      	adds	r3, #40	; 0x28
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fd39 	bl	8007d70 <RCCEx_PLL3_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006304:	e004      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800630c:	e000      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800630e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006318:	4b7b      	ldr	r3, [pc, #492]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800631a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631c:	f023 0107 	bic.w	r1, r3, #7
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006326:	4a78      	ldr	r2, [pc, #480]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006328:	430b      	orrs	r3, r1
 800632a:	6513      	str	r3, [r2, #80]	; 0x50
 800632c:	e003      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006342:	f04f 0b00 	mov.w	fp, #0
 8006346:	ea5a 030b 	orrs.w	r3, sl, fp
 800634a:	d04c      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800634c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006356:	d030      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635c:	d829      	bhi.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800635e:	2bc0      	cmp	r3, #192	; 0xc0
 8006360:	d02d      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006362:	2bc0      	cmp	r3, #192	; 0xc0
 8006364:	d825      	bhi.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d018      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d821      	bhi.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d007      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006376:	e01c      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006378:	4b63      	ldr	r3, [pc, #396]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	4a62      	ldr	r2, [pc, #392]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800637e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006384:	e01c      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638a:	3308      	adds	r3, #8
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f001 fc3c 	bl	8007c0c <RCCEx_PLL2_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800639a:	e011      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a0:	3328      	adds	r3, #40	; 0x28
 80063a2:	2100      	movs	r1, #0
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 fce3 	bl	8007d70 <RCCEx_PLL3_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80063b0:	e006      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063b8:	e002      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063ba:	bf00      	nop
 80063bc:	e000      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063c8:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d6:	4a4c      	ldr	r2, [pc, #304]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063d8:	430b      	orrs	r3, r1
 80063da:	6513      	str	r3, [r2, #80]	; 0x50
 80063dc:	e003      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80063f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063f6:	2300      	movs	r3, #0
 80063f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006400:	460b      	mov	r3, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	d053      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800640e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006412:	d035      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006414:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006418:	d82e      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800641a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800641e:	d031      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006420:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006424:	d828      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800642a:	d01a      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800642c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006430:	d822      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800643a:	d007      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800643c:	e01c      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800643e:	4b32      	ldr	r3, [pc, #200]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	4a31      	ldr	r2, [pc, #196]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006448:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800644a:	e01c      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006450:	3308      	adds	r3, #8
 8006452:	2100      	movs	r1, #0
 8006454:	4618      	mov	r0, r3
 8006456:	f001 fbd9 	bl	8007c0c <RCCEx_PLL2_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006460:	e011      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006466:	3328      	adds	r3, #40	; 0x28
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f001 fc80 	bl	8007d70 <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006476:	e006      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800647e:	e002      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800648e:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006492:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800649e:	4a1a      	ldr	r2, [pc, #104]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6593      	str	r3, [r2, #88]	; 0x58
 80064a4:	e003      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80064ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064be:	2300      	movs	r3, #0
 80064c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80064c8:	460b      	mov	r3, r1
 80064ca:	4313      	orrs	r3, r2
 80064cc:	d056      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064da:	d038      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80064dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064e0:	d831      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064e6:	d034      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80064e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064ec:	d82b      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064f2:	d01d      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064f8:	d825      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d006      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80064fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006504:	e01f      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4ba2      	ldr	r3, [pc, #648]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4aa1      	ldr	r2, [pc, #644]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006518:	e01c      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651e:	3308      	adds	r3, #8
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fb72 	bl	8007c0c <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800652e:	e011      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006534:	3328      	adds	r3, #40	; 0x28
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f001 fc19 	bl	8007d70 <RCCEx_PLL3_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006544:	e006      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800654c:	e002      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800655c:	4b8e      	ldr	r3, [pc, #568]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006568:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800656c:	4a8a      	ldr	r2, [pc, #552]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800656e:	430b      	orrs	r3, r1
 8006570:	6593      	str	r3, [r2, #88]	; 0x58
 8006572:	e003      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006588:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800658c:	2300      	movs	r3, #0
 800658e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006592:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006596:	460b      	mov	r3, r1
 8006598:	4313      	orrs	r3, r2
 800659a:	d03a      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	2b30      	cmp	r3, #48	; 0x30
 80065a4:	d01f      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80065a6:	2b30      	cmp	r3, #48	; 0x30
 80065a8:	d819      	bhi.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d00c      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d815      	bhi.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d019      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d111      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ba:	4b77      	ldr	r3, [pc, #476]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4a76      	ldr	r2, [pc, #472]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065c6:	e011      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065cc:	3308      	adds	r3, #8
 80065ce:	2102      	movs	r1, #2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 fb1b 	bl	8007c0c <RCCEx_PLL2_Config>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065dc:	e006      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065e4:	e002      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065e6:	bf00      	nop
 80065e8:	e000      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065f4:	4b68      	ldr	r3, [pc, #416]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80065fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006602:	4a65      	ldr	r2, [pc, #404]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006604:	430b      	orrs	r3, r1
 8006606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006608:	e003      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800660e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800661e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006622:	2300      	movs	r3, #0
 8006624:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006628:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800662c:	460b      	mov	r3, r1
 800662e:	4313      	orrs	r3, r2
 8006630:	d051      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800663c:	d035      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800663e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006642:	d82e      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006644:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006648:	d031      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800664a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800664e:	d828      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006654:	d01a      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665a:	d822      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006664:	d007      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006666:	e01c      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006668:	4b4b      	ldr	r3, [pc, #300]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	4a4a      	ldr	r2, [pc, #296]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800666e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006674:	e01c      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667a:	3308      	adds	r3, #8
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fac4 	bl	8007c0c <RCCEx_PLL2_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800668a:	e011      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006690:	3328      	adds	r3, #40	; 0x28
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f001 fb6b 	bl	8007d70 <RCCEx_PLL3_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066a0:	e006      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066a8:	e002      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80066ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066b8:	4b37      	ldr	r3, [pc, #220]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c6:	4a34      	ldr	r2, [pc, #208]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066c8:	430b      	orrs	r3, r1
 80066ca:	6513      	str	r3, [r2, #80]	; 0x50
 80066cc:	e003      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80066e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066e6:	2300      	movs	r3, #0
 80066e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80066f0:	460b      	mov	r3, r1
 80066f2:	4313      	orrs	r3, r2
 80066f4:	d056      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006700:	d033      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006706:	d82c      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800670c:	d02f      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800670e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006712:	d826      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006714:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006718:	d02b      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800671a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800671e:	d820      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006724:	d012      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800672a:	d81a      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d022      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006734:	d115      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673a:	3308      	adds	r3, #8
 800673c:	2101      	movs	r1, #1
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fa64 	bl	8007c0c <RCCEx_PLL2_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800674a:	e015      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006750:	3328      	adds	r3, #40	; 0x28
 8006752:	2101      	movs	r1, #1
 8006754:	4618      	mov	r0, r3
 8006756:	f001 fb0b 	bl	8007d70 <RCCEx_PLL3_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006760:	e00a      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006768:	e006      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800676a:	bf00      	nop
 800676c:	e004      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800676e:	bf00      	nop
 8006770:	e002      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006772:	bf00      	nop
 8006774:	e000      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10d      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006784:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678e:	4a02      	ldr	r2, [pc, #8]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006790:	430b      	orrs	r3, r1
 8006792:	6513      	str	r3, [r2, #80]	; 0x50
 8006794:	e006      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006796:	bf00      	nop
 8006798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80067b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d055      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067d0:	d033      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80067d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067d6:	d82c      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067dc:	d02f      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80067de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e2:	d826      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067e8:	d02b      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80067ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067ee:	d820      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f4:	d012      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80067f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fa:	d81a      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d022      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006804:	d115      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680a:	3308      	adds	r3, #8
 800680c:	2101      	movs	r1, #1
 800680e:	4618      	mov	r0, r3
 8006810:	f001 f9fc 	bl	8007c0c <RCCEx_PLL2_Config>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800681a:	e015      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006820:	3328      	adds	r3, #40	; 0x28
 8006822:	2101      	movs	r1, #1
 8006824:	4618      	mov	r0, r3
 8006826:	f001 faa3 	bl	8007d70 <RCCEx_PLL3_Config>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006830:	e00a      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006838:	e006      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800683a:	bf00      	nop
 800683c:	e004      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800683e:	bf00      	nop
 8006840:	e002      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006850:	4ba3      	ldr	r3, [pc, #652]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006854:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800685c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006860:	4a9f      	ldr	r2, [pc, #636]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006862:	430b      	orrs	r3, r1
 8006864:	6593      	str	r3, [r2, #88]	; 0x58
 8006866:	e003      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800686c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800687c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006880:	2300      	movs	r3, #0
 8006882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800688a:	460b      	mov	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	d037      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800689a:	d00e      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800689c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a0:	d816      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d018      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80068a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068aa:	d111      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ac:	4b8c      	ldr	r3, [pc, #560]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a8b      	ldr	r2, [pc, #556]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068b8:	e00f      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068be:	3308      	adds	r3, #8
 80068c0:	2101      	movs	r1, #1
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 f9a2 	bl	8007c0c <RCCEx_PLL2_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068ce:	e004      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068d6:	e000      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80068d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068e2:	4b7f      	ldr	r3, [pc, #508]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	4a7b      	ldr	r2, [pc, #492]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f2:	430b      	orrs	r3, r1
 80068f4:	6513      	str	r3, [r2, #80]	; 0x50
 80068f6:	e003      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800690c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006910:	2300      	movs	r3, #0
 8006912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006916:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800691a:	460b      	mov	r3, r1
 800691c:	4313      	orrs	r3, r2
 800691e:	d039      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006926:	2b03      	cmp	r3, #3
 8006928:	d81c      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	0800696d 	.word	0x0800696d
 8006934:	08006941 	.word	0x08006941
 8006938:	0800694f 	.word	0x0800694f
 800693c:	0800696d 	.word	0x0800696d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006940:	4b67      	ldr	r3, [pc, #412]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	4a66      	ldr	r2, [pc, #408]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800694c:	e00f      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006952:	3308      	adds	r3, #8
 8006954:	2102      	movs	r1, #2
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f958 	bl	8007c0c <RCCEx_PLL2_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006962:	e004      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800696c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10a      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006976:	4b5a      	ldr	r3, [pc, #360]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697a:	f023 0103 	bic.w	r1, r3, #3
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006984:	4a56      	ldr	r2, [pc, #344]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006986:	430b      	orrs	r3, r1
 8006988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800698a:	e003      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80069a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80069ae:	460b      	mov	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	f000 809f 	beq.w	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069b6:	4b4b      	ldr	r3, [pc, #300]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a4a      	ldr	r2, [pc, #296]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069c2:	f7fb fe41 	bl	8002648 <HAL_GetTick>
 80069c6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ca:	e00b      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069cc:	f7fb fe3c 	bl	8002648 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b64      	cmp	r3, #100	; 0x64
 80069da:	d903      	bls.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069e2:	e005      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069e4:	4b3f      	ldr	r3, [pc, #252]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ed      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80069f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d179      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069f8:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a04:	4053      	eors	r3, r2
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d015      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a1a:	4b31      	ldr	r3, [pc, #196]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a30      	ldr	r2, [pc, #192]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a26:	4b2e      	ldr	r3, [pc, #184]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	4a2d      	ldr	r2, [pc, #180]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a32:	4a2b      	ldr	r2, [pc, #172]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a46:	d118      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fb fdfe 	bl	8002648 <HAL_GetTick>
 8006a4c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a50:	e00d      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a52:	f7fb fdf9 	bl	8002648 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a5c:	1ad2      	subs	r2, r2, r3
 8006a5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d903      	bls.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006a6c:	e005      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0eb      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d129      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a92:	d10e      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a94:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006aa4:	091a      	lsrs	r2, r3, #4
 8006aa6:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6113      	str	r3, [r2, #16]
 8006ab0:	e005      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	4a0a      	ldr	r2, [pc, #40]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006abc:	6113      	str	r3, [r2, #16]
 8006abe:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad4:	e00e      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006ade:	e009      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006ae0:	58024400 	.word	0x58024400
 8006ae4:	58024800 	.word	0x58024800
 8006ae8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006af0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f002 0301 	and.w	r3, r2, #1
 8006b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f000 8089 	beq.w	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b1c:	2b28      	cmp	r3, #40	; 0x28
 8006b1e:	d86b      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006c01 	.word	0x08006c01
 8006b2c:	08006bf9 	.word	0x08006bf9
 8006b30:	08006bf9 	.word	0x08006bf9
 8006b34:	08006bf9 	.word	0x08006bf9
 8006b38:	08006bf9 	.word	0x08006bf9
 8006b3c:	08006bf9 	.word	0x08006bf9
 8006b40:	08006bf9 	.word	0x08006bf9
 8006b44:	08006bf9 	.word	0x08006bf9
 8006b48:	08006bcd 	.word	0x08006bcd
 8006b4c:	08006bf9 	.word	0x08006bf9
 8006b50:	08006bf9 	.word	0x08006bf9
 8006b54:	08006bf9 	.word	0x08006bf9
 8006b58:	08006bf9 	.word	0x08006bf9
 8006b5c:	08006bf9 	.word	0x08006bf9
 8006b60:	08006bf9 	.word	0x08006bf9
 8006b64:	08006bf9 	.word	0x08006bf9
 8006b68:	08006be3 	.word	0x08006be3
 8006b6c:	08006bf9 	.word	0x08006bf9
 8006b70:	08006bf9 	.word	0x08006bf9
 8006b74:	08006bf9 	.word	0x08006bf9
 8006b78:	08006bf9 	.word	0x08006bf9
 8006b7c:	08006bf9 	.word	0x08006bf9
 8006b80:	08006bf9 	.word	0x08006bf9
 8006b84:	08006bf9 	.word	0x08006bf9
 8006b88:	08006c01 	.word	0x08006c01
 8006b8c:	08006bf9 	.word	0x08006bf9
 8006b90:	08006bf9 	.word	0x08006bf9
 8006b94:	08006bf9 	.word	0x08006bf9
 8006b98:	08006bf9 	.word	0x08006bf9
 8006b9c:	08006bf9 	.word	0x08006bf9
 8006ba0:	08006bf9 	.word	0x08006bf9
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006bf9 	.word	0x08006bf9
 8006bb0:	08006bf9 	.word	0x08006bf9
 8006bb4:	08006bf9 	.word	0x08006bf9
 8006bb8:	08006bf9 	.word	0x08006bf9
 8006bbc:	08006bf9 	.word	0x08006bf9
 8006bc0:	08006bf9 	.word	0x08006bf9
 8006bc4:	08006bf9 	.word	0x08006bf9
 8006bc8:	08006c01 	.word	0x08006c01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f819 	bl	8007c0c <RCCEx_PLL2_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006be0:	e00f      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be6:	3328      	adds	r3, #40	; 0x28
 8006be8:	2101      	movs	r1, #1
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 f8c0 	bl	8007d70 <RCCEx_PLL3_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bf6:	e004      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bfe:	e000      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c0a:	4bbf      	ldr	r3, [pc, #764]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c18:	4abb      	ldr	r2, [pc, #748]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	6553      	str	r3, [r2, #84]	; 0x54
 8006c1e:	e003      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f002 0302 	and.w	r3, r2, #2
 8006c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006c42:	460b      	mov	r3, r1
 8006c44:	4313      	orrs	r3, r2
 8006c46:	d041      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	d824      	bhi.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006ca5 	.word	0x08006ca5
 8006c5c:	08006c71 	.word	0x08006c71
 8006c60:	08006c87 	.word	0x08006c87
 8006c64:	08006ca5 	.word	0x08006ca5
 8006c68:	08006ca5 	.word	0x08006ca5
 8006c6c:	08006ca5 	.word	0x08006ca5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c74:	3308      	adds	r3, #8
 8006c76:	2101      	movs	r1, #1
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 ffc7 	bl	8007c0c <RCCEx_PLL2_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c84:	e00f      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8a:	3328      	adds	r3, #40	; 0x28
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 f86e 	bl	8007d70 <RCCEx_PLL3_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006cae:	4b96      	ldr	r3, [pc, #600]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb2:	f023 0107 	bic.w	r1, r3, #7
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cbc:	4a92      	ldr	r2, [pc, #584]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	6553      	str	r3, [r2, #84]	; 0x54
 8006cc2:	e003      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f002 0304 	and.w	r3, r2, #4
 8006cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ce2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	d044      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf4:	2b05      	cmp	r3, #5
 8006cf6:	d825      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d4d 	.word	0x08006d4d
 8006d04:	08006d19 	.word	0x08006d19
 8006d08:	08006d2f 	.word	0x08006d2f
 8006d0c:	08006d4d 	.word	0x08006d4d
 8006d10:	08006d4d 	.word	0x08006d4d
 8006d14:	08006d4d 	.word	0x08006d4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	2101      	movs	r1, #1
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 ff73 	bl	8007c0c <RCCEx_PLL2_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d2c:	e00f      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d32:	3328      	adds	r3, #40	; 0x28
 8006d34:	2101      	movs	r1, #1
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 f81a 	bl	8007d70 <RCCEx_PLL3_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d42:	e004      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d4a:	e000      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10b      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d56:	4b6c      	ldr	r3, [pc, #432]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5a:	f023 0107 	bic.w	r1, r3, #7
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d66:	4a68      	ldr	r2, [pc, #416]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d6c:	e003      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f002 0320 	and.w	r3, r2, #32
 8006d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d86:	2300      	movs	r3, #0
 8006d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d90:	460b      	mov	r3, r1
 8006d92:	4313      	orrs	r3, r2
 8006d94:	d055      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006da2:	d033      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006da8:	d82c      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dae:	d02f      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d826      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006db6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dba:	d02b      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006dbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dc0:	d820      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc6:	d012      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dcc:	d81a      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d022      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dd6:	d115      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ddc:	3308      	adds	r3, #8
 8006dde:	2100      	movs	r1, #0
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 ff13 	bl	8007c0c <RCCEx_PLL2_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006dec:	e015      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df2:	3328      	adds	r3, #40	; 0x28
 8006df4:	2102      	movs	r1, #2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 ffba 	bl	8007d70 <RCCEx_PLL3_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e02:	e00a      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e0a:	e006      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e0c:	bf00      	nop
 8006e0e:	e004      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e10:	bf00      	nop
 8006e12:	e002      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10b      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e22:	4b39      	ldr	r3, [pc, #228]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e32:	4a35      	ldr	r2, [pc, #212]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6553      	str	r3, [r2, #84]	; 0x54
 8006e38:	e003      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	d058      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e6e:	d033      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006e70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e74:	d82c      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7a:	d02f      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e80:	d826      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e86:	d02b      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006e88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e8c:	d820      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e92:	d012      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e98:	d81a      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d022      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea2:	d115      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fead 	bl	8007c0c <RCCEx_PLL2_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006eb8:	e015      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ebe:	3328      	adds	r3, #40	; 0x28
 8006ec0:	2102      	movs	r1, #2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 ff54 	bl	8007d70 <RCCEx_PLL3_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ece:	e00a      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ed6:	e006      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ed8:	bf00      	nop
 8006eda:	e004      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006edc:	bf00      	nop
 8006ede:	e002      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ee0:	bf00      	nop
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10e      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eee:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006efe:	4a02      	ldr	r2, [pc, #8]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6593      	str	r3, [r2, #88]	; 0x58
 8006f04:	e006      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006f06:	bf00      	nop
 8006f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f24:	2300      	movs	r3, #0
 8006f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4313      	orrs	r3, r2
 8006f32:	d055      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f40:	d033      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006f42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f46:	d82c      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4c:	d02f      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f52:	d826      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f58:	d02b      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006f5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f5e:	d820      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f64:	d012      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f6a:	d81a      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d022      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f74:	d115      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fe44 	bl	8007c0c <RCCEx_PLL2_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f8a:	e015      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f90:	3328      	adds	r3, #40	; 0x28
 8006f92:	2102      	movs	r1, #2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 feeb 	bl	8007d70 <RCCEx_PLL3_Config>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006fa0:	e00a      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fa8:	e006      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006faa:	bf00      	nop
 8006fac:	e004      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fae:	bf00      	nop
 8006fb0:	e002      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fb2:	bf00      	nop
 8006fb4:	e000      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10b      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006fc0:	4ba1      	ldr	r3, [pc, #644]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fd0:	4a9d      	ldr	r2, [pc, #628]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8006fd6:	e003      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f002 0308 	and.w	r3, r2, #8
 8006fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ff6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	d01e      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700c:	d10c      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007012:	3328      	adds	r3, #40	; 0x28
 8007014:	2102      	movs	r1, #2
 8007016:	4618      	mov	r0, r3
 8007018:	f000 feaa 	bl	8007d70 <RCCEx_PLL3_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007028:	4b87      	ldr	r3, [pc, #540]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800702a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007038:	4a83      	ldr	r2, [pc, #524]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800703a:	430b      	orrs	r3, r1
 800703c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f002 0310 	and.w	r3, r2, #16
 800704a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800704e:	2300      	movs	r3, #0
 8007050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007054:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007058:	460b      	mov	r3, r1
 800705a:	4313      	orrs	r3, r2
 800705c:	d01e      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706a:	d10c      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007070:	3328      	adds	r3, #40	; 0x28
 8007072:	2102      	movs	r1, #2
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fe7b 	bl	8007d70 <RCCEx_PLL3_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007086:	4b70      	ldr	r3, [pc, #448]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007096:	4a6c      	ldr	r2, [pc, #432]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007098:	430b      	orrs	r3, r1
 800709a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80070a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d03e      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80070bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070c8:	d022      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80070ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ce:	d81b      	bhi.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d00b      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80070da:	e015      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e0:	3308      	adds	r3, #8
 80070e2:	2100      	movs	r1, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fd91 	bl	8007c0c <RCCEx_PLL2_Config>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070f0:	e00f      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f6:	3328      	adds	r3, #40	; 0x28
 80070f8:	2102      	movs	r1, #2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fe38 	bl	8007d70 <RCCEx_PLL3_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007106:	e004      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10b      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800711a:	4b4b      	ldr	r3, [pc, #300]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800711c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007126:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800712a:	4a47      	ldr	r2, [pc, #284]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800712c:	430b      	orrs	r3, r1
 800712e:	6593      	str	r3, [r2, #88]	; 0x58
 8007130:	e003      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007146:	67bb      	str	r3, [r7, #120]	; 0x78
 8007148:	2300      	movs	r3, #0
 800714a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800714c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007150:	460b      	mov	r3, r1
 8007152:	4313      	orrs	r3, r2
 8007154:	d03b      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007162:	d01f      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007168:	d818      	bhi.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800716a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716e:	d003      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007174:	d007      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007176:	e011      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007178:	4b33      	ldr	r3, [pc, #204]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	4a32      	ldr	r2, [pc, #200]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800717e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007184:	e00f      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718a:	3328      	adds	r3, #40	; 0x28
 800718c:	2101      	movs	r1, #1
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fdee 	bl	8007d70 <RCCEx_PLL3_Config>
 8007194:	4603      	mov	r3, r0
 8007196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800719a:	e004      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071a2:	e000      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80071a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071ae:	4b26      	ldr	r3, [pc, #152]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071be:	4a22      	ldr	r2, [pc, #136]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071c0:	430b      	orrs	r3, r1
 80071c2:	6553      	str	r3, [r2, #84]	; 0x54
 80071c4:	e003      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80071da:	673b      	str	r3, [r7, #112]	; 0x70
 80071dc:	2300      	movs	r3, #0
 80071de:	677b      	str	r3, [r7, #116]	; 0x74
 80071e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80071e4:	460b      	mov	r3, r1
 80071e6:	4313      	orrs	r3, r2
 80071e8:	d034      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80071f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f8:	d007      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80071fa:	e011      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fc:	4b12      	ldr	r3, [pc, #72]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a11      	ldr	r2, [pc, #68]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007208:	e00e      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720e:	3308      	adds	r3, #8
 8007210:	2102      	movs	r1, #2
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fcfa 	bl	8007c0c <RCCEx_PLL2_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800721e:	e003      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723e:	4a02      	ldr	r2, [pc, #8]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007240:	430b      	orrs	r3, r1
 8007242:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007244:	e006      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007250:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007260:	66bb      	str	r3, [r7, #104]	; 0x68
 8007262:	2300      	movs	r3, #0
 8007264:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007266:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800726a:	460b      	mov	r3, r1
 800726c:	4313      	orrs	r3, r2
 800726e:	d00c      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007274:	3328      	adds	r3, #40	; 0x28
 8007276:	2102      	movs	r1, #2
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fd79 	bl	8007d70 <RCCEx_PLL3_Config>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007296:	663b      	str	r3, [r7, #96]	; 0x60
 8007298:	2300      	movs	r3, #0
 800729a:	667b      	str	r3, [r7, #100]	; 0x64
 800729c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80072a0:	460b      	mov	r3, r1
 80072a2:	4313      	orrs	r3, r2
 80072a4:	d038      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b2:	d018      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80072b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b8:	d811      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80072ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072be:	d014      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80072c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c4:	d80b      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d011      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80072ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ce:	d106      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d0:	4bc3      	ldr	r3, [pc, #780]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	4ac2      	ldr	r2, [pc, #776]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80072dc:	e008      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072e4:	e004      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072e6:	bf00      	nop
 80072e8:	e002      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10b      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072f8:	4bb9      	ldr	r3, [pc, #740]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007308:	4ab5      	ldr	r2, [pc, #724]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800730a:	430b      	orrs	r3, r1
 800730c:	6553      	str	r3, [r2, #84]	; 0x54
 800730e:	e003      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007324:	65bb      	str	r3, [r7, #88]	; 0x58
 8007326:	2300      	movs	r3, #0
 8007328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800732a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800732e:	460b      	mov	r3, r1
 8007330:	4313      	orrs	r3, r2
 8007332:	d009      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007334:	4baa      	ldr	r3, [pc, #680]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800733c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007342:	4aa7      	ldr	r2, [pc, #668]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007344:	430b      	orrs	r3, r1
 8007346:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007354:	653b      	str	r3, [r7, #80]	; 0x50
 8007356:	2300      	movs	r3, #0
 8007358:	657b      	str	r3, [r7, #84]	; 0x54
 800735a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d00a      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007364:	4b9e      	ldr	r3, [pc, #632]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007370:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007374:	4a9a      	ldr	r2, [pc, #616]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007376:	430b      	orrs	r3, r1
 8007378:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007386:	64bb      	str	r3, [r7, #72]	; 0x48
 8007388:	2300      	movs	r3, #0
 800738a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800738c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007390:	460b      	mov	r3, r1
 8007392:	4313      	orrs	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007396:	4b92      	ldr	r3, [pc, #584]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a4:	4a8e      	ldr	r2, [pc, #568]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073a6:	430b      	orrs	r3, r1
 80073a8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80073b6:	643b      	str	r3, [r7, #64]	; 0x40
 80073b8:	2300      	movs	r3, #0
 80073ba:	647b      	str	r3, [r7, #68]	; 0x44
 80073bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80073c0:	460b      	mov	r3, r1
 80073c2:	4313      	orrs	r3, r2
 80073c4:	d00e      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073c6:	4b86      	ldr	r3, [pc, #536]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	4a85      	ldr	r2, [pc, #532]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073d0:	6113      	str	r3, [r2, #16]
 80073d2:	4b83      	ldr	r3, [pc, #524]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073d4:	6919      	ldr	r1, [r3, #16]
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80073de:	4a80      	ldr	r2, [pc, #512]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80073f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80073f2:	2300      	movs	r3, #0
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80073fa:	460b      	mov	r3, r1
 80073fc:	4313      	orrs	r3, r2
 80073fe:	d009      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007400:	4b77      	ldr	r3, [pc, #476]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007404:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	4a74      	ldr	r2, [pc, #464]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007410:	430b      	orrs	r3, r1
 8007412:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007420:	633b      	str	r3, [r7, #48]	; 0x30
 8007422:	2300      	movs	r3, #0
 8007424:	637b      	str	r3, [r7, #52]	; 0x34
 8007426:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800742a:	460b      	mov	r3, r1
 800742c:	4313      	orrs	r3, r2
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007430:	4b6b      	ldr	r3, [pc, #428]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007434:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007440:	4a67      	ldr	r2, [pc, #412]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007442:	430b      	orrs	r3, r1
 8007444:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	2100      	movs	r1, #0
 8007450:	62b9      	str	r1, [r7, #40]	; 0x28
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007458:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800745c:	460b      	mov	r3, r1
 800745e:	4313      	orrs	r3, r2
 8007460:	d011      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007466:	3308      	adds	r3, #8
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fbce 	bl	8007c0c <RCCEx_PLL2_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007482:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	2100      	movs	r1, #0
 8007490:	6239      	str	r1, [r7, #32]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
 8007498:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800749c:	460b      	mov	r3, r1
 800749e:	4313      	orrs	r3, r2
 80074a0:	d011      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a6:	3308      	adds	r3, #8
 80074a8:	2101      	movs	r1, #1
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fbae 	bl	8007c0c <RCCEx_PLL2_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80074b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	2100      	movs	r1, #0
 80074d0:	61b9      	str	r1, [r7, #24]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80074dc:	460b      	mov	r3, r1
 80074de:	4313      	orrs	r3, r2
 80074e0:	d011      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e6:	3308      	adds	r3, #8
 80074e8:	2102      	movs	r1, #2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fb8e 	bl	8007c0c <RCCEx_PLL2_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80074f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	2100      	movs	r1, #0
 8007510:	6139      	str	r1, [r7, #16]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800751c:	460b      	mov	r3, r1
 800751e:	4313      	orrs	r3, r2
 8007520:	d011      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007526:	3328      	adds	r3, #40	; 0x28
 8007528:	2100      	movs	r1, #0
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fc20 	bl	8007d70 <RCCEx_PLL3_Config>
 8007530:	4603      	mov	r3, r0
 8007532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	2100      	movs	r1, #0
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800755c:	460b      	mov	r3, r1
 800755e:	4313      	orrs	r3, r2
 8007560:	d011      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007566:	3328      	adds	r3, #40	; 0x28
 8007568:	2101      	movs	r1, #1
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fc00 	bl	8007d70 <RCCEx_PLL3_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	2100      	movs	r1, #0
 8007590:	6039      	str	r1, [r7, #0]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	e9d7 1200 	ldrd	r1, r2, [r7]
 800759c:	460b      	mov	r3, r1
 800759e:	4313      	orrs	r3, r2
 80075a0:	d011      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a6:	3328      	adds	r3, #40	; 0x28
 80075a8:	2102      	movs	r1, #2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fbe0 	bl	8007d70 <RCCEx_PLL3_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80075b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80075c6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e000      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80075da:	46bd      	mov	sp, r7
 80075dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e0:	58024400 	.word	0x58024400

080075e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075e8:	f7fe fd7a 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 80075ec:	4602      	mov	r2, r0
 80075ee:	4b06      	ldr	r3, [pc, #24]	; (8007608 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	091b      	lsrs	r3, r3, #4
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	4904      	ldr	r1, [pc, #16]	; (800760c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075fa:	5ccb      	ldrb	r3, [r1, r3]
 80075fc:	f003 031f 	and.w	r3, r3, #31
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007604:	4618      	mov	r0, r3
 8007606:	bd80      	pop	{r7, pc}
 8007608:	58024400 	.word	0x58024400
 800760c:	0800c5d4 	.word	0x0800c5d4

08007610 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007618:	4ba1      	ldr	r3, [pc, #644]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	f003 0303 	and.w	r3, r3, #3
 8007620:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007622:	4b9f      	ldr	r3, [pc, #636]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	0b1b      	lsrs	r3, r3, #12
 8007628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800762c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800762e:	4b9c      	ldr	r3, [pc, #624]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	091b      	lsrs	r3, r3, #4
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800763a:	4b99      	ldr	r3, [pc, #612]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763e:	08db      	lsrs	r3, r3, #3
 8007640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 8111 	beq.w	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b02      	cmp	r3, #2
 8007662:	f000 8083 	beq.w	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	f200 80a1 	bhi.w	80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d056      	beq.n	8007728 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800767a:	e099      	b.n	80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800767c:	4b88      	ldr	r3, [pc, #544]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02d      	beq.n	80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007688:	4b85      	ldr	r3, [pc, #532]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	08db      	lsrs	r3, r3, #3
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	4a84      	ldr	r2, [pc, #528]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
 8007698:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b7b      	ldr	r3, [pc, #492]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076e2:	e087      	b.n	80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f6:	4b6a      	ldr	r3, [pc, #424]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	ed97 6a03 	vldr	s12, [r7, #12]
 800770a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007726:	e065      	b.n	80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773a:	4b59      	ldr	r3, [pc, #356]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774a:	ed97 6a03 	vldr	s12, [r7, #12]
 800774e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776a:	e043      	b.n	80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007776:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800777a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777e:	4b48      	ldr	r3, [pc, #288]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007792:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ae:	e021      	b.n	80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c2:	4b37      	ldr	r3, [pc, #220]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80077f4:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	0a5b      	lsrs	r3, r3, #9
 80077fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800780a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781a:	ee17 2a90 	vmov	r2, s15
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007822:	4b1f      	ldr	r3, [pc, #124]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800783c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007848:	ee17 2a90 	vmov	r2, s15
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007850:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	0e1b      	lsrs	r3, r3, #24
 8007856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800786a:	edd7 6a07 	vldr	s13, [r7, #28]
 800786e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007876:	ee17 2a90 	vmov	r2, s15
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800787e:	e008      	b.n	8007892 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]
}
 8007892:	bf00      	nop
 8007894:	3724      	adds	r7, #36	; 0x24
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	58024400 	.word	0x58024400
 80078a4:	03d09000 	.word	0x03d09000
 80078a8:	46000000 	.word	0x46000000
 80078ac:	4c742400 	.word	0x4c742400
 80078b0:	4a742400 	.word	0x4a742400
 80078b4:	4afe502a 	.word	0x4afe502a

080078b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b089      	sub	sp, #36	; 0x24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c0:	4ba1      	ldr	r3, [pc, #644]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80078ca:	4b9f      	ldr	r3, [pc, #636]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ce:	0d1b      	lsrs	r3, r3, #20
 80078d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078d6:	4b9c      	ldr	r3, [pc, #624]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80078e2:	4b99      	ldr	r3, [pc, #612]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	08db      	lsrs	r3, r3, #3
 80078e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8111 	beq.w	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b02      	cmp	r3, #2
 800790a:	f000 8083 	beq.w	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b02      	cmp	r3, #2
 8007912:	f200 80a1 	bhi.w	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d056      	beq.n	80079d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007922:	e099      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007924:	4b88      	ldr	r3, [pc, #544]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02d      	beq.n	800798c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007930:	4b85      	ldr	r3, [pc, #532]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	08db      	lsrs	r3, r3, #3
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	4a84      	ldr	r2, [pc, #528]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800793c:	fa22 f303 	lsr.w	r3, r2, r3
 8007940:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795a:	4b7b      	ldr	r3, [pc, #492]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796a:	ed97 6a03 	vldr	s12, [r7, #12]
 800796e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800798a:	e087      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800799a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799e:	4b6a      	ldr	r3, [pc, #424]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ce:	e065      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e2:	4b59      	ldr	r3, [pc, #356]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a12:	e043      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a26:	4b48      	ldr	r3, [pc, #288]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a56:	e021      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6a:	4b37      	ldr	r3, [pc, #220]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a9c:	4b2a      	ldr	r3, [pc, #168]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa0:	0a5b      	lsrs	r3, r3, #9
 8007aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac2:	ee17 2a90 	vmov	r2, s15
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007aca:	4b1f      	ldr	r3, [pc, #124]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	0c1b      	lsrs	r3, r3, #16
 8007ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad4:	ee07 3a90 	vmov	s15, r3
 8007ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af0:	ee17 2a90 	vmov	r2, s15
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007af8:	4b13      	ldr	r3, [pc, #76]	; (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	0e1b      	lsrs	r3, r3, #24
 8007afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b1e:	ee17 2a90 	vmov	r2, s15
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b26:	e008      	b.n	8007b3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	609a      	str	r2, [r3, #8]
}
 8007b3a:	bf00      	nop
 8007b3c:	3724      	adds	r7, #36	; 0x24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	03d09000 	.word	0x03d09000
 8007b50:	46000000 	.word	0x46000000
 8007b54:	4c742400 	.word	0x4c742400
 8007b58:	4a742400 	.word	0x4a742400
 8007b5c:	4afe502a 	.word	0x4afe502a

08007b60 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007b68:	4b26      	ldr	r3, [pc, #152]	; (8007c04 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b6e:	4a25      	ldr	r2, [pc, #148]	; (8007c04 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b70:	f043 0302 	orr.w	r3, r3, #2
 8007b74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007b78:	4b22      	ldr	r3, [pc, #136]	; (8007c04 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b7e:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b80:	f023 0302 	bic.w	r3, r3, #2
 8007b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007b88:	f7fa fdae 	bl	80026e8 <HAL_GetREVID>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d80b      	bhi.n	8007bae <HAL_RCCEx_CRSConfig+0x4e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b9e:	d106      	bne.n	8007bae <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e008      	b.n	8007bc0 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	041b      	lsls	r3, r3, #16
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007bd6:	4a0c      	ldr	r2, [pc, #48]	; (8007c08 <HAL_RCCEx_CRSConfig+0xa8>)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <HAL_RCCEx_CRSConfig+0xa8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	4907      	ldr	r1, [pc, #28]	; (8007c08 <HAL_RCCEx_CRSConfig+0xa8>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <HAL_RCCEx_CRSConfig+0xa8>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a04      	ldr	r2, [pc, #16]	; (8007c08 <HAL_RCCEx_CRSConfig+0xa8>)
 8007bf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bfa:	6013      	str	r3, [r2, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	58024400 	.word	0x58024400
 8007c08:	40008400 	.word	0x40008400

08007c0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c1a:	4b53      	ldr	r3, [pc, #332]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d101      	bne.n	8007c2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e099      	b.n	8007d5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c2a:	4b4f      	ldr	r3, [pc, #316]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a4e      	ldr	r2, [pc, #312]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c36:	f7fa fd07 	bl	8002648 <HAL_GetTick>
 8007c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c3c:	e008      	b.n	8007c50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c3e:	f7fa fd03 	bl	8002648 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e086      	b.n	8007d5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c50:	4b45      	ldr	r3, [pc, #276]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f0      	bne.n	8007c3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c5c:	4b42      	ldr	r3, [pc, #264]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	031b      	lsls	r3, r3, #12
 8007c6a:	493f      	ldr	r1, [pc, #252]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	628b      	str	r3, [r1, #40]	; 0x28
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	025b      	lsls	r3, r3, #9
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	431a      	orrs	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	041b      	lsls	r3, r3, #16
 8007c8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	061b      	lsls	r3, r3, #24
 8007c9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ca0:	4931      	ldr	r1, [pc, #196]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ca6:	4b30      	ldr	r3, [pc, #192]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	492d      	ldr	r1, [pc, #180]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cb8:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	f023 0220 	bic.w	r2, r3, #32
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	4928      	ldr	r1, [pc, #160]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cca:	4b27      	ldr	r3, [pc, #156]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	4a26      	ldr	r2, [pc, #152]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	f023 0310 	bic.w	r3, r3, #16
 8007cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cd6:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cda:	4b24      	ldr	r3, [pc, #144]	; (8007d6c <RCCEx_PLL2_Config+0x160>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	69d2      	ldr	r2, [r2, #28]
 8007ce2:	00d2      	lsls	r2, r2, #3
 8007ce4:	4920      	ldr	r1, [pc, #128]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cea:	4b1f      	ldr	r3, [pc, #124]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	4a1e      	ldr	r2, [pc, #120]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cf0:	f043 0310 	orr.w	r3, r3, #16
 8007cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d106      	bne.n	8007d0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	4a19      	ldr	r2, [pc, #100]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d08:	e00f      	b.n	8007d2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d106      	bne.n	8007d1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d10:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	4a14      	ldr	r2, [pc, #80]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d1c:	e005      	b.n	8007d2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d2a:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a0e      	ldr	r2, [pc, #56]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d36:	f7fa fc87 	bl	8002648 <HAL_GetTick>
 8007d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d3c:	e008      	b.n	8007d50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d3e:	f7fa fc83 	bl	8002648 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d901      	bls.n	8007d50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e006      	b.n	8007d5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0f0      	beq.n	8007d3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	ffff0007 	.word	0xffff0007

08007d70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d7e:	4b53      	ldr	r3, [pc, #332]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d101      	bne.n	8007d8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e099      	b.n	8007ec2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d8e:	4b4f      	ldr	r3, [pc, #316]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a4e      	ldr	r2, [pc, #312]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9a:	f7fa fc55 	bl	8002648 <HAL_GetTick>
 8007d9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007da0:	e008      	b.n	8007db4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007da2:	f7fa fc51 	bl	8002648 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d901      	bls.n	8007db4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e086      	b.n	8007ec2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007db4:	4b45      	ldr	r3, [pc, #276]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1f0      	bne.n	8007da2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007dc0:	4b42      	ldr	r3, [pc, #264]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	051b      	lsls	r3, r3, #20
 8007dce:	493f      	ldr	r1, [pc, #252]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	628b      	str	r3, [r1, #40]	; 0x28
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	025b      	lsls	r3, r3, #9
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	061b      	lsls	r3, r3, #24
 8007e00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e04:	4931      	ldr	r1, [pc, #196]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e0a:	4b30      	ldr	r3, [pc, #192]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	492d      	ldr	r1, [pc, #180]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e1c:	4b2b      	ldr	r3, [pc, #172]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	4928      	ldr	r1, [pc, #160]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e2e:	4b27      	ldr	r3, [pc, #156]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	4a26      	ldr	r2, [pc, #152]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3e:	4b24      	ldr	r3, [pc, #144]	; (8007ed0 <RCCEx_PLL3_Config+0x160>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	69d2      	ldr	r2, [r2, #28]
 8007e46:	00d2      	lsls	r2, r2, #3
 8007e48:	4920      	ldr	r1, [pc, #128]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e4e:	4b1f      	ldr	r3, [pc, #124]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e60:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e6c:	e00f      	b.n	8007e8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d106      	bne.n	8007e82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	4a14      	ldr	r2, [pc, #80]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e80:	e005      	b.n	8007e8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e82:	4b12      	ldr	r3, [pc, #72]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a0e      	ldr	r2, [pc, #56]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e9a:	f7fa fbd5 	bl	8002648 <HAL_GetTick>
 8007e9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ea0:	e008      	b.n	8007eb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ea2:	f7fa fbd1 	bl	8002648 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d901      	bls.n	8007eb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e006      	b.n	8007ec2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0f0      	beq.n	8007ea2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	ffff0007 	.word	0xffff0007

08007ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e049      	b.n	8007f7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fa f8a6 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f000 f92e 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e0dc      	b.n	800815a <HAL_TIM_ConfigClockSource+0x1d6>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	4b6a      	ldr	r3, [pc, #424]	; (8008164 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a64      	ldr	r2, [pc, #400]	; (8008168 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	f000 80a9 	beq.w	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 8007fdc:	4a62      	ldr	r2, [pc, #392]	; (8008168 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	f200 80ae 	bhi.w	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fe4:	4a61      	ldr	r2, [pc, #388]	; (800816c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	f000 80a1 	beq.w	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 8007fec:	4a5f      	ldr	r2, [pc, #380]	; (800816c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	f200 80a6 	bhi.w	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ff4:	4a5e      	ldr	r2, [pc, #376]	; (8008170 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	f000 8099 	beq.w	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 8007ffc:	4a5c      	ldr	r2, [pc, #368]	; (8008170 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	f200 809e 	bhi.w	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008004:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008008:	f000 8091 	beq.w	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 800800c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008010:	f200 8096 	bhi.w	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008018:	f000 8089 	beq.w	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 800801c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008020:	f200 808e 	bhi.w	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008028:	d03e      	beq.n	80080a8 <HAL_TIM_ConfigClockSource+0x124>
 800802a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800802e:	f200 8087 	bhi.w	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008036:	f000 8086 	beq.w	8008146 <HAL_TIM_ConfigClockSource+0x1c2>
 800803a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800803e:	d87f      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008040:	2b70      	cmp	r3, #112	; 0x70
 8008042:	d01a      	beq.n	800807a <HAL_TIM_ConfigClockSource+0xf6>
 8008044:	2b70      	cmp	r3, #112	; 0x70
 8008046:	d87b      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008048:	2b60      	cmp	r3, #96	; 0x60
 800804a:	d050      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0x16a>
 800804c:	2b60      	cmp	r3, #96	; 0x60
 800804e:	d877      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008050:	2b50      	cmp	r3, #80	; 0x50
 8008052:	d03c      	beq.n	80080ce <HAL_TIM_ConfigClockSource+0x14a>
 8008054:	2b50      	cmp	r3, #80	; 0x50
 8008056:	d873      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d058      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x18a>
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	d86f      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008060:	2b30      	cmp	r3, #48	; 0x30
 8008062:	d064      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 8008064:	2b30      	cmp	r3, #48	; 0x30
 8008066:	d86b      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008068:	2b20      	cmp	r3, #32
 800806a:	d060      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 800806c:	2b20      	cmp	r3, #32
 800806e:	d867      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d05c      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 8008074:	2b10      	cmp	r3, #16
 8008076:	d05a      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x1aa>
 8008078:	e062      	b.n	8008140 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6899      	ldr	r1, [r3, #8]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f000 f98b 	bl	80083a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800809c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	609a      	str	r2, [r3, #8]
      break;
 80080a6:	e04f      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	6899      	ldr	r1, [r3, #8]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f000 f974 	bl	80083a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080ca:	609a      	str	r2, [r3, #8]
      break;
 80080cc:	e03c      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	6859      	ldr	r1, [r3, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	461a      	mov	r2, r3
 80080dc:	f000 f8e4 	bl	80082a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2150      	movs	r1, #80	; 0x50
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 f93e 	bl	8008368 <TIM_ITRx_SetConfig>
      break;
 80080ec:	e02c      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6859      	ldr	r1, [r3, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f000 f903 	bl	8008306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2160      	movs	r1, #96	; 0x60
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f92e 	bl	8008368 <TIM_ITRx_SetConfig>
      break;
 800810c:	e01c      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6818      	ldr	r0, [r3, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6859      	ldr	r1, [r3, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	f000 f8c4 	bl	80082a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2140      	movs	r1, #64	; 0x40
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f91e 	bl	8008368 <TIM_ITRx_SetConfig>
      break;
 800812c:	e00c      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f000 f915 	bl	8008368 <TIM_ITRx_SetConfig>
      break;
 800813e:	e003      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	73fb      	strb	r3, [r7, #15]
      break;
 8008144:	e000      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	ffceff88 	.word	0xffceff88
 8008168:	00100040 	.word	0x00100040
 800816c:	00100030 	.word	0x00100030
 8008170:	00100020 	.word	0x00100020

08008174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a40      	ldr	r2, [pc, #256]	; (8008288 <TIM_Base_SetConfig+0x114>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d00f      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a3d      	ldr	r2, [pc, #244]	; (800828c <TIM_Base_SetConfig+0x118>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00b      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a3c      	ldr	r2, [pc, #240]	; (8008290 <TIM_Base_SetConfig+0x11c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d007      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a3b      	ldr	r2, [pc, #236]	; (8008294 <TIM_Base_SetConfig+0x120>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d003      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a3a      	ldr	r2, [pc, #232]	; (8008298 <TIM_Base_SetConfig+0x124>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d108      	bne.n	80081c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2f      	ldr	r2, [pc, #188]	; (8008288 <TIM_Base_SetConfig+0x114>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d01f      	beq.n	800820e <TIM_Base_SetConfig+0x9a>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d4:	d01b      	beq.n	800820e <TIM_Base_SetConfig+0x9a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a2c      	ldr	r2, [pc, #176]	; (800828c <TIM_Base_SetConfig+0x118>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d017      	beq.n	800820e <TIM_Base_SetConfig+0x9a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a2b      	ldr	r2, [pc, #172]	; (8008290 <TIM_Base_SetConfig+0x11c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <TIM_Base_SetConfig+0x9a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a2a      	ldr	r2, [pc, #168]	; (8008294 <TIM_Base_SetConfig+0x120>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00f      	beq.n	800820e <TIM_Base_SetConfig+0x9a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a29      	ldr	r2, [pc, #164]	; (8008298 <TIM_Base_SetConfig+0x124>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00b      	beq.n	800820e <TIM_Base_SetConfig+0x9a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a28      	ldr	r2, [pc, #160]	; (800829c <TIM_Base_SetConfig+0x128>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d007      	beq.n	800820e <TIM_Base_SetConfig+0x9a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a27      	ldr	r2, [pc, #156]	; (80082a0 <TIM_Base_SetConfig+0x12c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_Base_SetConfig+0x9a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a26      	ldr	r2, [pc, #152]	; (80082a4 <TIM_Base_SetConfig+0x130>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d108      	bne.n	8008220 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a10      	ldr	r2, [pc, #64]	; (8008288 <TIM_Base_SetConfig+0x114>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00f      	beq.n	800826c <TIM_Base_SetConfig+0xf8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a12      	ldr	r2, [pc, #72]	; (8008298 <TIM_Base_SetConfig+0x124>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00b      	beq.n	800826c <TIM_Base_SetConfig+0xf8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a11      	ldr	r2, [pc, #68]	; (800829c <TIM_Base_SetConfig+0x128>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d007      	beq.n	800826c <TIM_Base_SetConfig+0xf8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a10      	ldr	r2, [pc, #64]	; (80082a0 <TIM_Base_SetConfig+0x12c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d003      	beq.n	800826c <TIM_Base_SetConfig+0xf8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a0f      	ldr	r2, [pc, #60]	; (80082a4 <TIM_Base_SetConfig+0x130>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d103      	bne.n	8008274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	615a      	str	r2, [r3, #20]
}
 800827a:	bf00      	nop
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40010000 	.word	0x40010000
 800828c:	40000400 	.word	0x40000400
 8008290:	40000800 	.word	0x40000800
 8008294:	40000c00 	.word	0x40000c00
 8008298:	40010400 	.word	0x40010400
 800829c:	40014000 	.word	0x40014000
 80082a0:	40014400 	.word	0x40014400
 80082a4:	40014800 	.word	0x40014800

080082a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	f023 0201 	bic.w	r2, r3, #1
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 030a 	bic.w	r3, r3, #10
 80082e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	621a      	str	r2, [r3, #32]
}
 80082fa:	bf00      	nop
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008306:	b480      	push	{r7}
 8008308:	b087      	sub	sp, #28
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	f023 0210 	bic.w	r2, r3, #16
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	031b      	lsls	r3, r3, #12
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4313      	orrs	r3, r2
 800833a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
	...

08008368 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <TIM_ITRx_SetConfig+0x38>)
 800837c:	4013      	ands	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4313      	orrs	r3, r2
 8008386:	f043 0307 	orr.w	r3, r3, #7
 800838a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	609a      	str	r2, [r3, #8]
}
 8008392:	bf00      	nop
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	ffcfff8f 	.word	0xffcfff8f

080083a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	021a      	lsls	r2, r3, #8
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	431a      	orrs	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	609a      	str	r2, [r3, #8]
}
 80083d8:	bf00      	nop
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083f8:	2302      	movs	r3, #2
 80083fa:	e06d      	b.n	80084d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a30      	ldr	r2, [pc, #192]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a2f      	ldr	r2, [pc, #188]	; (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d108      	bne.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008436:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008448:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a20      	ldr	r2, [pc, #128]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d022      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846e:	d01d      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a1d      	ldr	r2, [pc, #116]	; (80084ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d018      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a1c      	ldr	r2, [pc, #112]	; (80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d013      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a1a      	ldr	r2, [pc, #104]	; (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00e      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d009      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a16      	ldr	r2, [pc, #88]	; (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d004      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a15      	ldr	r2, [pc, #84]	; (80084fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d10c      	bne.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40010400 	.word	0x40010400
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800
 80084f4:	40000c00 	.word	0x40000c00
 80084f8:	40001800 	.word	0x40001800
 80084fc:	40014000 	.word	0x40014000

08008500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e042      	b.n	8008598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008518:	2b00      	cmp	r3, #0
 800851a:	d106      	bne.n	800852a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7f9 fdcb 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2224      	movs	r2, #36	; 0x24
 800852e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0201 	bic.w	r2, r2, #1
 8008540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f8ba 	bl	80086bc <UART_SetConfig>
 8008548:	4603      	mov	r3, r0
 800854a:	2b01      	cmp	r3, #1
 800854c:	d101      	bne.n	8008552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e022      	b.n	8008598 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fe16 	bl	800918c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800856e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800857e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0201 	orr.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fe9d 	bl	80092d0 <UART_CheckIdleState>
 8008596:	4603      	mov	r3, r0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08a      	sub	sp, #40	; 0x28
 80085a4:	af02      	add	r7, sp, #8
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	4613      	mov	r3, r2
 80085ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d17b      	bne.n	80086b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <HAL_UART_Transmit+0x26>
 80085c0:	88fb      	ldrh	r3, [r7, #6]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e074      	b.n	80086b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2221      	movs	r2, #33	; 0x21
 80085d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085da:	f7fa f835 	bl	8002648 <HAL_GetTick>
 80085de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	88fa      	ldrh	r2, [r7, #6]
 80085e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	88fa      	ldrh	r2, [r7, #6]
 80085ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f8:	d108      	bne.n	800860c <HAL_UART_Transmit+0x6c>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008602:	2300      	movs	r3, #0
 8008604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	61bb      	str	r3, [r7, #24]
 800860a:	e003      	b.n	8008614 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008614:	e030      	b.n	8008678 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2200      	movs	r2, #0
 800861e:	2180      	movs	r1, #128	; 0x80
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 feff 	bl	8009424 <UART_WaitOnFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e03d      	b.n	80086b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800864c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	3302      	adds	r3, #2
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	e007      	b.n	8008666 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	781a      	ldrb	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	3301      	adds	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1c8      	bne.n	8008616 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2200      	movs	r2, #0
 800868c:	2140      	movs	r1, #64	; 0x40
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 fec8 	bl	8009424 <UART_WaitOnFlagUntilTimeout>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d005      	beq.n	80086a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e006      	b.n	80086b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e000      	b.n	80086b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80086b2:	2302      	movs	r3, #2
  }
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3720      	adds	r7, #32
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086c0:	b092      	sub	sp, #72	; 0x48
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	431a      	orrs	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	431a      	orrs	r2, r3
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4bbe      	ldr	r3, [pc, #760]	; (80089e4 <UART_SetConfig+0x328>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4ab3      	ldr	r2, [pc, #716]	; (80089e8 <UART_SetConfig+0x32c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d004      	beq.n	8008728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008724:	4313      	orrs	r3, r2
 8008726:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	4baf      	ldr	r3, [pc, #700]	; (80089ec <UART_SetConfig+0x330>)
 8008730:	4013      	ands	r3, r2
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008738:	430b      	orrs	r3, r1
 800873a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	f023 010f 	bic.w	r1, r3, #15
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4aa6      	ldr	r2, [pc, #664]	; (80089f0 <UART_SetConfig+0x334>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d177      	bne.n	800884c <UART_SetConfig+0x190>
 800875c:	4ba5      	ldr	r3, [pc, #660]	; (80089f4 <UART_SetConfig+0x338>)
 800875e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008760:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008764:	2b28      	cmp	r3, #40	; 0x28
 8008766:	d86d      	bhi.n	8008844 <UART_SetConfig+0x188>
 8008768:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0xb4>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	08008815 	.word	0x08008815
 8008774:	08008845 	.word	0x08008845
 8008778:	08008845 	.word	0x08008845
 800877c:	08008845 	.word	0x08008845
 8008780:	08008845 	.word	0x08008845
 8008784:	08008845 	.word	0x08008845
 8008788:	08008845 	.word	0x08008845
 800878c:	08008845 	.word	0x08008845
 8008790:	0800881d 	.word	0x0800881d
 8008794:	08008845 	.word	0x08008845
 8008798:	08008845 	.word	0x08008845
 800879c:	08008845 	.word	0x08008845
 80087a0:	08008845 	.word	0x08008845
 80087a4:	08008845 	.word	0x08008845
 80087a8:	08008845 	.word	0x08008845
 80087ac:	08008845 	.word	0x08008845
 80087b0:	08008825 	.word	0x08008825
 80087b4:	08008845 	.word	0x08008845
 80087b8:	08008845 	.word	0x08008845
 80087bc:	08008845 	.word	0x08008845
 80087c0:	08008845 	.word	0x08008845
 80087c4:	08008845 	.word	0x08008845
 80087c8:	08008845 	.word	0x08008845
 80087cc:	08008845 	.word	0x08008845
 80087d0:	0800882d 	.word	0x0800882d
 80087d4:	08008845 	.word	0x08008845
 80087d8:	08008845 	.word	0x08008845
 80087dc:	08008845 	.word	0x08008845
 80087e0:	08008845 	.word	0x08008845
 80087e4:	08008845 	.word	0x08008845
 80087e8:	08008845 	.word	0x08008845
 80087ec:	08008845 	.word	0x08008845
 80087f0:	08008835 	.word	0x08008835
 80087f4:	08008845 	.word	0x08008845
 80087f8:	08008845 	.word	0x08008845
 80087fc:	08008845 	.word	0x08008845
 8008800:	08008845 	.word	0x08008845
 8008804:	08008845 	.word	0x08008845
 8008808:	08008845 	.word	0x08008845
 800880c:	08008845 	.word	0x08008845
 8008810:	0800883d 	.word	0x0800883d
 8008814:	2301      	movs	r3, #1
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881a:	e222      	b.n	8008c62 <UART_SetConfig+0x5a6>
 800881c:	2304      	movs	r3, #4
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e21e      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008824:	2308      	movs	r3, #8
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e21a      	b.n	8008c62 <UART_SetConfig+0x5a6>
 800882c:	2310      	movs	r3, #16
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008832:	e216      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008834:	2320      	movs	r3, #32
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883a:	e212      	b.n	8008c62 <UART_SetConfig+0x5a6>
 800883c:	2340      	movs	r3, #64	; 0x40
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e20e      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008844:	2380      	movs	r3, #128	; 0x80
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e20a      	b.n	8008c62 <UART_SetConfig+0x5a6>
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a69      	ldr	r2, [pc, #420]	; (80089f8 <UART_SetConfig+0x33c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d130      	bne.n	80088b8 <UART_SetConfig+0x1fc>
 8008856:	4b67      	ldr	r3, [pc, #412]	; (80089f4 <UART_SetConfig+0x338>)
 8008858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	2b05      	cmp	r3, #5
 8008860:	d826      	bhi.n	80088b0 <UART_SetConfig+0x1f4>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <UART_SetConfig+0x1ac>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	08008881 	.word	0x08008881
 800886c:	08008889 	.word	0x08008889
 8008870:	08008891 	.word	0x08008891
 8008874:	08008899 	.word	0x08008899
 8008878:	080088a1 	.word	0x080088a1
 800887c:	080088a9 	.word	0x080088a9
 8008880:	2300      	movs	r3, #0
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008886:	e1ec      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008888:	2304      	movs	r3, #4
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888e:	e1e8      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008890:	2308      	movs	r3, #8
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008896:	e1e4      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008898:	2310      	movs	r3, #16
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889e:	e1e0      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80088a0:	2320      	movs	r3, #32
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a6:	e1dc      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80088a8:	2340      	movs	r3, #64	; 0x40
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e1d8      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80088b0:	2380      	movs	r3, #128	; 0x80
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e1d4      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a4f      	ldr	r2, [pc, #316]	; (80089fc <UART_SetConfig+0x340>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d130      	bne.n	8008924 <UART_SetConfig+0x268>
 80088c2:	4b4c      	ldr	r3, [pc, #304]	; (80089f4 <UART_SetConfig+0x338>)
 80088c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	2b05      	cmp	r3, #5
 80088cc:	d826      	bhi.n	800891c <UART_SetConfig+0x260>
 80088ce:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <UART_SetConfig+0x218>)
 80088d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d4:	080088ed 	.word	0x080088ed
 80088d8:	080088f5 	.word	0x080088f5
 80088dc:	080088fd 	.word	0x080088fd
 80088e0:	08008905 	.word	0x08008905
 80088e4:	0800890d 	.word	0x0800890d
 80088e8:	08008915 	.word	0x08008915
 80088ec:	2300      	movs	r3, #0
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f2:	e1b6      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80088f4:	2304      	movs	r3, #4
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e1b2      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80088fc:	2308      	movs	r3, #8
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e1ae      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008904:	2310      	movs	r3, #16
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e1aa      	b.n	8008c62 <UART_SetConfig+0x5a6>
 800890c:	2320      	movs	r3, #32
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e1a6      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008914:	2340      	movs	r3, #64	; 0x40
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e1a2      	b.n	8008c62 <UART_SetConfig+0x5a6>
 800891c:	2380      	movs	r3, #128	; 0x80
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e19e      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a35      	ldr	r2, [pc, #212]	; (8008a00 <UART_SetConfig+0x344>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d130      	bne.n	8008990 <UART_SetConfig+0x2d4>
 800892e:	4b31      	ldr	r3, [pc, #196]	; (80089f4 <UART_SetConfig+0x338>)
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	2b05      	cmp	r3, #5
 8008938:	d826      	bhi.n	8008988 <UART_SetConfig+0x2cc>
 800893a:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <UART_SetConfig+0x284>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	08008959 	.word	0x08008959
 8008944:	08008961 	.word	0x08008961
 8008948:	08008969 	.word	0x08008969
 800894c:	08008971 	.word	0x08008971
 8008950:	08008979 	.word	0x08008979
 8008954:	08008981 	.word	0x08008981
 8008958:	2300      	movs	r3, #0
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895e:	e180      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008960:	2304      	movs	r3, #4
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008966:	e17c      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008968:	2308      	movs	r3, #8
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e178      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008970:	2310      	movs	r3, #16
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e174      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008978:	2320      	movs	r3, #32
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e170      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008980:	2340      	movs	r3, #64	; 0x40
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e16c      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008988:	2380      	movs	r3, #128	; 0x80
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e168      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a1b      	ldr	r2, [pc, #108]	; (8008a04 <UART_SetConfig+0x348>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d142      	bne.n	8008a20 <UART_SetConfig+0x364>
 800899a:	4b16      	ldr	r3, [pc, #88]	; (80089f4 <UART_SetConfig+0x338>)
 800899c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	d838      	bhi.n	8008a18 <UART_SetConfig+0x35c>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <UART_SetConfig+0x2f0>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089c5 	.word	0x080089c5
 80089b0:	080089cd 	.word	0x080089cd
 80089b4:	080089d5 	.word	0x080089d5
 80089b8:	080089dd 	.word	0x080089dd
 80089bc:	08008a09 	.word	0x08008a09
 80089c0:	08008a11 	.word	0x08008a11
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ca:	e14a      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80089cc:	2304      	movs	r3, #4
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d2:	e146      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80089d4:	2308      	movs	r3, #8
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e142      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80089dc:	2310      	movs	r3, #16
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e13e      	b.n	8008c62 <UART_SetConfig+0x5a6>
 80089e4:	cfff69f3 	.word	0xcfff69f3
 80089e8:	58000c00 	.word	0x58000c00
 80089ec:	11fff4ff 	.word	0x11fff4ff
 80089f0:	40011000 	.word	0x40011000
 80089f4:	58024400 	.word	0x58024400
 80089f8:	40004400 	.word	0x40004400
 80089fc:	40004800 	.word	0x40004800
 8008a00:	40004c00 	.word	0x40004c00
 8008a04:	40005000 	.word	0x40005000
 8008a08:	2320      	movs	r3, #32
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0e:	e128      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008a10:	2340      	movs	r3, #64	; 0x40
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a16:	e124      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008a18:	2380      	movs	r3, #128	; 0x80
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1e:	e120      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4acb      	ldr	r2, [pc, #812]	; (8008d54 <UART_SetConfig+0x698>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d176      	bne.n	8008b18 <UART_SetConfig+0x45c>
 8008a2a:	4bcb      	ldr	r3, [pc, #812]	; (8008d58 <UART_SetConfig+0x69c>)
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a32:	2b28      	cmp	r3, #40	; 0x28
 8008a34:	d86c      	bhi.n	8008b10 <UART_SetConfig+0x454>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <UART_SetConfig+0x380>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008ae1 	.word	0x08008ae1
 8008a40:	08008b11 	.word	0x08008b11
 8008a44:	08008b11 	.word	0x08008b11
 8008a48:	08008b11 	.word	0x08008b11
 8008a4c:	08008b11 	.word	0x08008b11
 8008a50:	08008b11 	.word	0x08008b11
 8008a54:	08008b11 	.word	0x08008b11
 8008a58:	08008b11 	.word	0x08008b11
 8008a5c:	08008ae9 	.word	0x08008ae9
 8008a60:	08008b11 	.word	0x08008b11
 8008a64:	08008b11 	.word	0x08008b11
 8008a68:	08008b11 	.word	0x08008b11
 8008a6c:	08008b11 	.word	0x08008b11
 8008a70:	08008b11 	.word	0x08008b11
 8008a74:	08008b11 	.word	0x08008b11
 8008a78:	08008b11 	.word	0x08008b11
 8008a7c:	08008af1 	.word	0x08008af1
 8008a80:	08008b11 	.word	0x08008b11
 8008a84:	08008b11 	.word	0x08008b11
 8008a88:	08008b11 	.word	0x08008b11
 8008a8c:	08008b11 	.word	0x08008b11
 8008a90:	08008b11 	.word	0x08008b11
 8008a94:	08008b11 	.word	0x08008b11
 8008a98:	08008b11 	.word	0x08008b11
 8008a9c:	08008af9 	.word	0x08008af9
 8008aa0:	08008b11 	.word	0x08008b11
 8008aa4:	08008b11 	.word	0x08008b11
 8008aa8:	08008b11 	.word	0x08008b11
 8008aac:	08008b11 	.word	0x08008b11
 8008ab0:	08008b11 	.word	0x08008b11
 8008ab4:	08008b11 	.word	0x08008b11
 8008ab8:	08008b11 	.word	0x08008b11
 8008abc:	08008b01 	.word	0x08008b01
 8008ac0:	08008b11 	.word	0x08008b11
 8008ac4:	08008b11 	.word	0x08008b11
 8008ac8:	08008b11 	.word	0x08008b11
 8008acc:	08008b11 	.word	0x08008b11
 8008ad0:	08008b11 	.word	0x08008b11
 8008ad4:	08008b11 	.word	0x08008b11
 8008ad8:	08008b11 	.word	0x08008b11
 8008adc:	08008b09 	.word	0x08008b09
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae6:	e0bc      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008ae8:	2304      	movs	r3, #4
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e0b8      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008af0:	2308      	movs	r3, #8
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af6:	e0b4      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008af8:	2310      	movs	r3, #16
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afe:	e0b0      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b00:	2320      	movs	r3, #32
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b06:	e0ac      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b08:	2340      	movs	r3, #64	; 0x40
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0e:	e0a8      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b10:	2380      	movs	r3, #128	; 0x80
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b16:	e0a4      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a8f      	ldr	r2, [pc, #572]	; (8008d5c <UART_SetConfig+0x6a0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d130      	bne.n	8008b84 <UART_SetConfig+0x4c8>
 8008b22:	4b8d      	ldr	r3, [pc, #564]	; (8008d58 <UART_SetConfig+0x69c>)
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	2b05      	cmp	r3, #5
 8008b2c:	d826      	bhi.n	8008b7c <UART_SetConfig+0x4c0>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <UART_SetConfig+0x478>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b4d 	.word	0x08008b4d
 8008b38:	08008b55 	.word	0x08008b55
 8008b3c:	08008b5d 	.word	0x08008b5d
 8008b40:	08008b65 	.word	0x08008b65
 8008b44:	08008b6d 	.word	0x08008b6d
 8008b48:	08008b75 	.word	0x08008b75
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b52:	e086      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b54:	2304      	movs	r3, #4
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5a:	e082      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b5c:	2308      	movs	r3, #8
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b62:	e07e      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b64:	2310      	movs	r3, #16
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6a:	e07a      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b6c:	2320      	movs	r3, #32
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	e076      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b74:	2340      	movs	r3, #64	; 0x40
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7a:	e072      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b7c:	2380      	movs	r3, #128	; 0x80
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b82:	e06e      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a75      	ldr	r2, [pc, #468]	; (8008d60 <UART_SetConfig+0x6a4>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d130      	bne.n	8008bf0 <UART_SetConfig+0x534>
 8008b8e:	4b72      	ldr	r3, [pc, #456]	; (8008d58 <UART_SetConfig+0x69c>)
 8008b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	d826      	bhi.n	8008be8 <UART_SetConfig+0x52c>
 8008b9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ba0 <UART_SetConfig+0x4e4>)
 8008b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba0:	08008bb9 	.word	0x08008bb9
 8008ba4:	08008bc1 	.word	0x08008bc1
 8008ba8:	08008bc9 	.word	0x08008bc9
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008bd9 	.word	0x08008bd9
 8008bb4:	08008be1 	.word	0x08008be1
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bbe:	e050      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc6:	e04c      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008bc8:	2308      	movs	r3, #8
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bce:	e048      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd6:	e044      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008bd8:	2320      	movs	r3, #32
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e040      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008be0:	2340      	movs	r3, #64	; 0x40
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be6:	e03c      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bee:	e038      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a5b      	ldr	r2, [pc, #364]	; (8008d64 <UART_SetConfig+0x6a8>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d130      	bne.n	8008c5c <UART_SetConfig+0x5a0>
 8008bfa:	4b57      	ldr	r3, [pc, #348]	; (8008d58 <UART_SetConfig+0x69c>)
 8008bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	2b05      	cmp	r3, #5
 8008c04:	d826      	bhi.n	8008c54 <UART_SetConfig+0x598>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <UART_SetConfig+0x550>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c25 	.word	0x08008c25
 8008c10:	08008c2d 	.word	0x08008c2d
 8008c14:	08008c35 	.word	0x08008c35
 8008c18:	08008c3d 	.word	0x08008c3d
 8008c1c:	08008c45 	.word	0x08008c45
 8008c20:	08008c4d 	.word	0x08008c4d
 8008c24:	2302      	movs	r3, #2
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2a:	e01a      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008c2c:	2304      	movs	r3, #4
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c32:	e016      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008c34:	2308      	movs	r3, #8
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3a:	e012      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008c3c:	2310      	movs	r3, #16
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c42:	e00e      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008c44:	2320      	movs	r3, #32
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4a:	e00a      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008c4c:	2340      	movs	r3, #64	; 0x40
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c52:	e006      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008c54:	2380      	movs	r3, #128	; 0x80
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5a:	e002      	b.n	8008c62 <UART_SetConfig+0x5a6>
 8008c5c:	2380      	movs	r3, #128	; 0x80
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a3f      	ldr	r2, [pc, #252]	; (8008d64 <UART_SetConfig+0x6a8>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	f040 80f8 	bne.w	8008e5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	dc46      	bgt.n	8008d04 <UART_SetConfig+0x648>
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	f2c0 8082 	blt.w	8008d80 <UART_SetConfig+0x6c4>
 8008c7c:	3b02      	subs	r3, #2
 8008c7e:	2b1e      	cmp	r3, #30
 8008c80:	d87e      	bhi.n	8008d80 <UART_SetConfig+0x6c4>
 8008c82:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <UART_SetConfig+0x5cc>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008d0b 	.word	0x08008d0b
 8008c8c:	08008d81 	.word	0x08008d81
 8008c90:	08008d13 	.word	0x08008d13
 8008c94:	08008d81 	.word	0x08008d81
 8008c98:	08008d81 	.word	0x08008d81
 8008c9c:	08008d81 	.word	0x08008d81
 8008ca0:	08008d23 	.word	0x08008d23
 8008ca4:	08008d81 	.word	0x08008d81
 8008ca8:	08008d81 	.word	0x08008d81
 8008cac:	08008d81 	.word	0x08008d81
 8008cb0:	08008d81 	.word	0x08008d81
 8008cb4:	08008d81 	.word	0x08008d81
 8008cb8:	08008d81 	.word	0x08008d81
 8008cbc:	08008d81 	.word	0x08008d81
 8008cc0:	08008d33 	.word	0x08008d33
 8008cc4:	08008d81 	.word	0x08008d81
 8008cc8:	08008d81 	.word	0x08008d81
 8008ccc:	08008d81 	.word	0x08008d81
 8008cd0:	08008d81 	.word	0x08008d81
 8008cd4:	08008d81 	.word	0x08008d81
 8008cd8:	08008d81 	.word	0x08008d81
 8008cdc:	08008d81 	.word	0x08008d81
 8008ce0:	08008d81 	.word	0x08008d81
 8008ce4:	08008d81 	.word	0x08008d81
 8008ce8:	08008d81 	.word	0x08008d81
 8008cec:	08008d81 	.word	0x08008d81
 8008cf0:	08008d81 	.word	0x08008d81
 8008cf4:	08008d81 	.word	0x08008d81
 8008cf8:	08008d81 	.word	0x08008d81
 8008cfc:	08008d81 	.word	0x08008d81
 8008d00:	08008d73 	.word	0x08008d73
 8008d04:	2b40      	cmp	r3, #64	; 0x40
 8008d06:	d037      	beq.n	8008d78 <UART_SetConfig+0x6bc>
 8008d08:	e03a      	b.n	8008d80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d0a:	f7fe fc6b 	bl	80075e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d10:	e03c      	b.n	8008d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fc7a 	bl	8007610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d20:	e034      	b.n	8008d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d22:	f107 0318 	add.w	r3, r7, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fdc6 	bl	80078b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d30:	e02c      	b.n	8008d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <UART_SetConfig+0x69c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d016      	beq.n	8008d6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d3e:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <UART_SetConfig+0x69c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	08db      	lsrs	r3, r3, #3
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	4a07      	ldr	r2, [pc, #28]	; (8008d68 <UART_SetConfig+0x6ac>)
 8008d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d50:	e01c      	b.n	8008d8c <UART_SetConfig+0x6d0>
 8008d52:	bf00      	nop
 8008d54:	40011400 	.word	0x40011400
 8008d58:	58024400 	.word	0x58024400
 8008d5c:	40007800 	.word	0x40007800
 8008d60:	40007c00 	.word	0x40007c00
 8008d64:	58000c00 	.word	0x58000c00
 8008d68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008d6c:	4b9d      	ldr	r3, [pc, #628]	; (8008fe4 <UART_SetConfig+0x928>)
 8008d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d70:	e00c      	b.n	8008d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d72:	4b9d      	ldr	r3, [pc, #628]	; (8008fe8 <UART_SetConfig+0x92c>)
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d76:	e009      	b.n	8008d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d7e:	e005      	b.n	8008d8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 81de 	beq.w	8009150 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	4a94      	ldr	r2, [pc, #592]	; (8008fec <UART_SetConfig+0x930>)
 8008d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008da6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	4613      	mov	r3, r2
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	4413      	add	r3, r2
 8008db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d305      	bcc.n	8008dc4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d903      	bls.n	8008dcc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008dca:	e1c1      	b.n	8009150 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dce:	2200      	movs	r2, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	60fa      	str	r2, [r7, #12]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	4a84      	ldr	r2, [pc, #528]	; (8008fec <UART_SetConfig+0x930>)
 8008dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	2200      	movs	r2, #0
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	607a      	str	r2, [r7, #4]
 8008de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dee:	f7f7 ff17 	bl	8000c20 <__aeabi_uldivmod>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4610      	mov	r0, r2
 8008df8:	4619      	mov	r1, r3
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	f04f 0300 	mov.w	r3, #0
 8008e02:	020b      	lsls	r3, r1, #8
 8008e04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e08:	0202      	lsls	r2, r0, #8
 8008e0a:	6979      	ldr	r1, [r7, #20]
 8008e0c:	6849      	ldr	r1, [r1, #4]
 8008e0e:	0849      	lsrs	r1, r1, #1
 8008e10:	2000      	movs	r0, #0
 8008e12:	460c      	mov	r4, r1
 8008e14:	4605      	mov	r5, r0
 8008e16:	eb12 0804 	adds.w	r8, r2, r4
 8008e1a:	eb43 0905 	adc.w	r9, r3, r5
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	469a      	mov	sl, r3
 8008e26:	4693      	mov	fp, r2
 8008e28:	4652      	mov	r2, sl
 8008e2a:	465b      	mov	r3, fp
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	4649      	mov	r1, r9
 8008e30:	f7f7 fef6 	bl	8000c20 <__aeabi_uldivmod>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4613      	mov	r3, r2
 8008e3a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e42:	d308      	bcc.n	8008e56 <UART_SetConfig+0x79a>
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e4a:	d204      	bcs.n	8008e56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e52:	60da      	str	r2, [r3, #12]
 8008e54:	e17c      	b.n	8009150 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e5c:	e178      	b.n	8009150 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e66:	f040 80c5 	bne.w	8008ff4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008e6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	dc48      	bgt.n	8008f04 <UART_SetConfig+0x848>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	db7b      	blt.n	8008f6e <UART_SetConfig+0x8b2>
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	d879      	bhi.n	8008f6e <UART_SetConfig+0x8b2>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <UART_SetConfig+0x7c4>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008f0b 	.word	0x08008f0b
 8008e84:	08008f13 	.word	0x08008f13
 8008e88:	08008f6f 	.word	0x08008f6f
 8008e8c:	08008f6f 	.word	0x08008f6f
 8008e90:	08008f1b 	.word	0x08008f1b
 8008e94:	08008f6f 	.word	0x08008f6f
 8008e98:	08008f6f 	.word	0x08008f6f
 8008e9c:	08008f6f 	.word	0x08008f6f
 8008ea0:	08008f2b 	.word	0x08008f2b
 8008ea4:	08008f6f 	.word	0x08008f6f
 8008ea8:	08008f6f 	.word	0x08008f6f
 8008eac:	08008f6f 	.word	0x08008f6f
 8008eb0:	08008f6f 	.word	0x08008f6f
 8008eb4:	08008f6f 	.word	0x08008f6f
 8008eb8:	08008f6f 	.word	0x08008f6f
 8008ebc:	08008f6f 	.word	0x08008f6f
 8008ec0:	08008f3b 	.word	0x08008f3b
 8008ec4:	08008f6f 	.word	0x08008f6f
 8008ec8:	08008f6f 	.word	0x08008f6f
 8008ecc:	08008f6f 	.word	0x08008f6f
 8008ed0:	08008f6f 	.word	0x08008f6f
 8008ed4:	08008f6f 	.word	0x08008f6f
 8008ed8:	08008f6f 	.word	0x08008f6f
 8008edc:	08008f6f 	.word	0x08008f6f
 8008ee0:	08008f6f 	.word	0x08008f6f
 8008ee4:	08008f6f 	.word	0x08008f6f
 8008ee8:	08008f6f 	.word	0x08008f6f
 8008eec:	08008f6f 	.word	0x08008f6f
 8008ef0:	08008f6f 	.word	0x08008f6f
 8008ef4:	08008f6f 	.word	0x08008f6f
 8008ef8:	08008f6f 	.word	0x08008f6f
 8008efc:	08008f6f 	.word	0x08008f6f
 8008f00:	08008f61 	.word	0x08008f61
 8008f04:	2b40      	cmp	r3, #64	; 0x40
 8008f06:	d02e      	beq.n	8008f66 <UART_SetConfig+0x8aa>
 8008f08:	e031      	b.n	8008f6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f0a:	f7fd f919 	bl	8006140 <HAL_RCC_GetPCLK1Freq>
 8008f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f10:	e033      	b.n	8008f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f12:	f7fd f92b 	bl	800616c <HAL_RCC_GetPCLK2Freq>
 8008f16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f18:	e02f      	b.n	8008f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fb76 	bl	8007610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f28:	e027      	b.n	8008f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2a:	f107 0318 	add.w	r3, r7, #24
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fcc2 	bl	80078b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f38:	e01f      	b.n	8008f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f3a:	4b2d      	ldr	r3, [pc, #180]	; (8008ff0 <UART_SetConfig+0x934>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f46:	4b2a      	ldr	r3, [pc, #168]	; (8008ff0 <UART_SetConfig+0x934>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	08db      	lsrs	r3, r3, #3
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	4a24      	ldr	r2, [pc, #144]	; (8008fe4 <UART_SetConfig+0x928>)
 8008f52:	fa22 f303 	lsr.w	r3, r2, r3
 8008f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f58:	e00f      	b.n	8008f7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f5a:	4b22      	ldr	r3, [pc, #136]	; (8008fe4 <UART_SetConfig+0x928>)
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f5e:	e00c      	b.n	8008f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f60:	4b21      	ldr	r3, [pc, #132]	; (8008fe8 <UART_SetConfig+0x92c>)
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f64:	e009      	b.n	8008f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f6c:	e005      	b.n	8008f7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 80e7 	beq.w	8009150 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	4a19      	ldr	r2, [pc, #100]	; (8008fec <UART_SetConfig+0x930>)
 8008f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f94:	005a      	lsls	r2, r3, #1
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	085b      	lsrs	r3, r3, #1
 8008f9c:	441a      	add	r2, r3
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	2b0f      	cmp	r3, #15
 8008fac:	d916      	bls.n	8008fdc <UART_SetConfig+0x920>
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb4:	d212      	bcs.n	8008fdc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	f023 030f 	bic.w	r3, r3, #15
 8008fbe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	085b      	lsrs	r3, r3, #1
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008fd8:	60da      	str	r2, [r3, #12]
 8008fda:	e0b9      	b.n	8009150 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008fe2:	e0b5      	b.n	8009150 <UART_SetConfig+0xa94>
 8008fe4:	03d09000 	.word	0x03d09000
 8008fe8:	003d0900 	.word	0x003d0900
 8008fec:	0800c5e4 	.word	0x0800c5e4
 8008ff0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ff4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	dc49      	bgt.n	8009090 <UART_SetConfig+0x9d4>
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	db7c      	blt.n	80090fa <UART_SetConfig+0xa3e>
 8009000:	2b20      	cmp	r3, #32
 8009002:	d87a      	bhi.n	80090fa <UART_SetConfig+0xa3e>
 8009004:	a201      	add	r2, pc, #4	; (adr r2, 800900c <UART_SetConfig+0x950>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	08009097 	.word	0x08009097
 8009010:	0800909f 	.word	0x0800909f
 8009014:	080090fb 	.word	0x080090fb
 8009018:	080090fb 	.word	0x080090fb
 800901c:	080090a7 	.word	0x080090a7
 8009020:	080090fb 	.word	0x080090fb
 8009024:	080090fb 	.word	0x080090fb
 8009028:	080090fb 	.word	0x080090fb
 800902c:	080090b7 	.word	0x080090b7
 8009030:	080090fb 	.word	0x080090fb
 8009034:	080090fb 	.word	0x080090fb
 8009038:	080090fb 	.word	0x080090fb
 800903c:	080090fb 	.word	0x080090fb
 8009040:	080090fb 	.word	0x080090fb
 8009044:	080090fb 	.word	0x080090fb
 8009048:	080090fb 	.word	0x080090fb
 800904c:	080090c7 	.word	0x080090c7
 8009050:	080090fb 	.word	0x080090fb
 8009054:	080090fb 	.word	0x080090fb
 8009058:	080090fb 	.word	0x080090fb
 800905c:	080090fb 	.word	0x080090fb
 8009060:	080090fb 	.word	0x080090fb
 8009064:	080090fb 	.word	0x080090fb
 8009068:	080090fb 	.word	0x080090fb
 800906c:	080090fb 	.word	0x080090fb
 8009070:	080090fb 	.word	0x080090fb
 8009074:	080090fb 	.word	0x080090fb
 8009078:	080090fb 	.word	0x080090fb
 800907c:	080090fb 	.word	0x080090fb
 8009080:	080090fb 	.word	0x080090fb
 8009084:	080090fb 	.word	0x080090fb
 8009088:	080090fb 	.word	0x080090fb
 800908c:	080090ed 	.word	0x080090ed
 8009090:	2b40      	cmp	r3, #64	; 0x40
 8009092:	d02e      	beq.n	80090f2 <UART_SetConfig+0xa36>
 8009094:	e031      	b.n	80090fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009096:	f7fd f853 	bl	8006140 <HAL_RCC_GetPCLK1Freq>
 800909a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800909c:	e033      	b.n	8009106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800909e:	f7fd f865 	bl	800616c <HAL_RCC_GetPCLK2Freq>
 80090a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090a4:	e02f      	b.n	8009106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fab0 	bl	8007610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b4:	e027      	b.n	8009106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090b6:	f107 0318 	add.w	r3, r7, #24
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fbfc 	bl	80078b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c4:	e01f      	b.n	8009106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090c6:	4b2d      	ldr	r3, [pc, #180]	; (800917c <UART_SetConfig+0xac0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090d2:	4b2a      	ldr	r3, [pc, #168]	; (800917c <UART_SetConfig+0xac0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	08db      	lsrs	r3, r3, #3
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	4a28      	ldr	r2, [pc, #160]	; (8009180 <UART_SetConfig+0xac4>)
 80090de:	fa22 f303 	lsr.w	r3, r2, r3
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090e4:	e00f      	b.n	8009106 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80090e6:	4b26      	ldr	r3, [pc, #152]	; (8009180 <UART_SetConfig+0xac4>)
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ea:	e00c      	b.n	8009106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090ec:	4b25      	ldr	r3, [pc, #148]	; (8009184 <UART_SetConfig+0xac8>)
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f0:	e009      	b.n	8009106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f8:	e005      	b.n	8009106 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009104:	bf00      	nop
    }

    if (pclk != 0U)
 8009106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d021      	beq.n	8009150 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	4a1d      	ldr	r2, [pc, #116]	; (8009188 <UART_SetConfig+0xacc>)
 8009112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009116:	461a      	mov	r2, r3
 8009118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911a:	fbb3 f2f2 	udiv	r2, r3, r2
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	085b      	lsrs	r3, r3, #1
 8009124:	441a      	add	r2, r3
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	fbb2 f3f3 	udiv	r3, r2, r3
 800912e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	2b0f      	cmp	r3, #15
 8009134:	d909      	bls.n	800914a <UART_SetConfig+0xa8e>
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913c:	d205      	bcs.n	800914a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800913e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009140:	b29a      	uxth	r2, r3
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60da      	str	r2, [r3, #12]
 8009148:	e002      	b.n	8009150 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2201      	movs	r2, #1
 8009154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2201      	movs	r2, #1
 800915c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2200      	movs	r2, #0
 8009164:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2200      	movs	r2, #0
 800916a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800916c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009170:	4618      	mov	r0, r3
 8009172:	3748      	adds	r7, #72	; 0x48
 8009174:	46bd      	mov	sp, r7
 8009176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800917a:	bf00      	nop
 800917c:	58024400 	.word	0x58024400
 8009180:	03d09000 	.word	0x03d09000
 8009184:	003d0900 	.word	0x003d0900
 8009188:	0800c5e4 	.word	0x0800c5e4

0800918c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	f003 0304 	and.w	r3, r3, #4
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fe:	f003 0308 	and.w	r3, r3, #8
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01a      	beq.n	80092a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800928a:	d10a      	bne.n	80092a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	605a      	str	r2, [r3, #4]
  }
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b098      	sub	sp, #96	; 0x60
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092e0:	f7f9 f9b2 	bl	8002648 <HAL_GetTick>
 80092e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0308 	and.w	r3, r3, #8
 80092f0:	2b08      	cmp	r3, #8
 80092f2:	d12f      	bne.n	8009354 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fc:	2200      	movs	r2, #0
 80092fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f88e 	bl	8009424 <UART_WaitOnFlagUntilTimeout>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d022      	beq.n	8009354 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	e853 3f00 	ldrex	r3, [r3]
 800931a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009322:	653b      	str	r3, [r7, #80]	; 0x50
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800932c:	647b      	str	r3, [r7, #68]	; 0x44
 800932e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009330:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009334:	e841 2300 	strex	r3, r2, [r1]
 8009338:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800933a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e6      	bne.n	800930e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e063      	b.n	800941c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	2b04      	cmp	r3, #4
 8009360:	d149      	bne.n	80093f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009362:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800936a:	2200      	movs	r2, #0
 800936c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f857 	bl	8009424 <UART_WaitOnFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d03c      	beq.n	80093f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	623b      	str	r3, [r7, #32]
   return(result);
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939a:	633b      	str	r3, [r7, #48]	; 0x30
 800939c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093a2:	e841 2300 	strex	r3, r2, [r1]
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1e6      	bne.n	800937c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f023 0301 	bic.w	r3, r3, #1
 80093c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3308      	adds	r3, #8
 80093cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ce:	61fa      	str	r2, [r7, #28]
 80093d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	69b9      	ldr	r1, [r7, #24]
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	617b      	str	r3, [r7, #20]
   return(result);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e5      	bne.n	80093ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e012      	b.n	800941c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2220      	movs	r2, #32
 8009402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3758      	adds	r7, #88	; 0x58
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	4613      	mov	r3, r2
 8009432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009434:	e049      	b.n	80094ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943c:	d045      	beq.n	80094ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800943e:	f7f9 f903 	bl	8002648 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	429a      	cmp	r2, r3
 800944c:	d302      	bcc.n	8009454 <UART_WaitOnFlagUntilTimeout+0x30>
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e048      	b.n	80094ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b00      	cmp	r3, #0
 8009464:	d031      	beq.n	80094ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	2b08      	cmp	r3, #8
 8009472:	d110      	bne.n	8009496 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2208      	movs	r2, #8
 800947a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f839 	bl	80094f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2208      	movs	r2, #8
 8009486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e029      	b.n	80094ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a4:	d111      	bne.n	80094ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 f81f 	bl	80094f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e00f      	b.n	80094ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69da      	ldr	r2, [r3, #28]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4013      	ands	r3, r2
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	bf0c      	ite	eq
 80094da:	2301      	moveq	r3, #1
 80094dc:	2300      	movne	r3, #0
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	461a      	mov	r2, r3
 80094e2:	79fb      	ldrb	r3, [r7, #7]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d0a6      	beq.n	8009436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b095      	sub	sp, #84	; 0x54
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800951a:	643b      	str	r3, [r7, #64]	; 0x40
 800951c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e6      	bne.n	80094fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3308      	adds	r3, #8
 8009534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	e853 3f00 	ldrex	r3, [r3]
 800953c:	61fb      	str	r3, [r7, #28]
   return(result);
 800953e:	69fa      	ldr	r2, [r7, #28]
 8009540:	4b1e      	ldr	r3, [pc, #120]	; (80095bc <UART_EndRxTransfer+0xc8>)
 8009542:	4013      	ands	r3, r2
 8009544:	64bb      	str	r3, [r7, #72]	; 0x48
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800954e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e5      	bne.n	800952e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009566:	2b01      	cmp	r3, #1
 8009568:	d118      	bne.n	800959c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	60bb      	str	r3, [r7, #8]
   return(result);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f023 0310 	bic.w	r3, r3, #16
 800957e:	647b      	str	r3, [r7, #68]	; 0x44
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009588:	61bb      	str	r3, [r7, #24]
 800958a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6979      	ldr	r1, [r7, #20]
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	613b      	str	r3, [r7, #16]
   return(result);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e6      	bne.n	800956a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 80095b0:	bf00      	nop
 80095b2:	3754      	adds	r7, #84	; 0x54
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	effffffe 	.word	0xeffffffe

080095c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e027      	b.n	8009626 <HAL_UARTEx_DisableFifoMode+0x66>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2224      	movs	r2, #36	; 0x24
 80095e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0201 	bic.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009604:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2220      	movs	r2, #32
 8009618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009646:	2302      	movs	r3, #2
 8009648:	e02d      	b.n	80096a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2224      	movs	r2, #36	; 0x24
 8009656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0201 	bic.w	r2, r2, #1
 8009670:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f850 	bl	800972c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2220      	movs	r2, #32
 8009698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d101      	bne.n	80096c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096c2:	2302      	movs	r3, #2
 80096c4:	e02d      	b.n	8009722 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2224      	movs	r2, #36	; 0x24
 80096d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0201 	bic.w	r2, r2, #1
 80096ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	430a      	orrs	r2, r1
 8009700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f812 	bl	800972c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2220      	movs	r2, #32
 8009714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800974c:	e031      	b.n	80097b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800974e:	2310      	movs	r3, #16
 8009750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009752:	2310      	movs	r3, #16
 8009754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	0e5b      	lsrs	r3, r3, #25
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	0f5b      	lsrs	r3, r3, #29
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	7b3a      	ldrb	r2, [r7, #12]
 800977a:	4911      	ldr	r1, [pc, #68]	; (80097c0 <UARTEx_SetNbDataToProcess+0x94>)
 800977c:	5c8a      	ldrb	r2, [r1, r2]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009782:	7b3a      	ldrb	r2, [r7, #12]
 8009784:	490f      	ldr	r1, [pc, #60]	; (80097c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009788:	fb93 f3f2 	sdiv	r3, r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009794:	7bfb      	ldrb	r3, [r7, #15]
 8009796:	7b7a      	ldrb	r2, [r7, #13]
 8009798:	4909      	ldr	r1, [pc, #36]	; (80097c0 <UARTEx_SetNbDataToProcess+0x94>)
 800979a:	5c8a      	ldrb	r2, [r1, r2]
 800979c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097a0:	7b7a      	ldrb	r2, [r7, #13]
 80097a2:	4908      	ldr	r1, [pc, #32]	; (80097c4 <UARTEx_SetNbDataToProcess+0x98>)
 80097a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097b2:	bf00      	nop
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	0800c5fc 	.word	0x0800c5fc
 80097c4:	0800c604 	.word	0x0800c604

080097c8 <__errno>:
 80097c8:	4b01      	ldr	r3, [pc, #4]	; (80097d0 <__errno+0x8>)
 80097ca:	6818      	ldr	r0, [r3, #0]
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	2000003c 	.word	0x2000003c

080097d4 <__libc_init_array>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4d0d      	ldr	r5, [pc, #52]	; (800980c <__libc_init_array+0x38>)
 80097d8:	4c0d      	ldr	r4, [pc, #52]	; (8009810 <__libc_init_array+0x3c>)
 80097da:	1b64      	subs	r4, r4, r5
 80097dc:	10a4      	asrs	r4, r4, #2
 80097de:	2600      	movs	r6, #0
 80097e0:	42a6      	cmp	r6, r4
 80097e2:	d109      	bne.n	80097f8 <__libc_init_array+0x24>
 80097e4:	4d0b      	ldr	r5, [pc, #44]	; (8009814 <__libc_init_array+0x40>)
 80097e6:	4c0c      	ldr	r4, [pc, #48]	; (8009818 <__libc_init_array+0x44>)
 80097e8:	f002 fd1a 	bl	800c220 <_init>
 80097ec:	1b64      	subs	r4, r4, r5
 80097ee:	10a4      	asrs	r4, r4, #2
 80097f0:	2600      	movs	r6, #0
 80097f2:	42a6      	cmp	r6, r4
 80097f4:	d105      	bne.n	8009802 <__libc_init_array+0x2e>
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097fc:	4798      	blx	r3
 80097fe:	3601      	adds	r6, #1
 8009800:	e7ee      	b.n	80097e0 <__libc_init_array+0xc>
 8009802:	f855 3b04 	ldr.w	r3, [r5], #4
 8009806:	4798      	blx	r3
 8009808:	3601      	adds	r6, #1
 800980a:	e7f2      	b.n	80097f2 <__libc_init_array+0x1e>
 800980c:	0800c9ec 	.word	0x0800c9ec
 8009810:	0800c9ec 	.word	0x0800c9ec
 8009814:	0800c9ec 	.word	0x0800c9ec
 8009818:	0800c9f0 	.word	0x0800c9f0

0800981c <memcpy>:
 800981c:	440a      	add	r2, r1
 800981e:	4291      	cmp	r1, r2
 8009820:	f100 33ff 	add.w	r3, r0, #4294967295
 8009824:	d100      	bne.n	8009828 <memcpy+0xc>
 8009826:	4770      	bx	lr
 8009828:	b510      	push	{r4, lr}
 800982a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009832:	4291      	cmp	r1, r2
 8009834:	d1f9      	bne.n	800982a <memcpy+0xe>
 8009836:	bd10      	pop	{r4, pc}

08009838 <memset>:
 8009838:	4402      	add	r2, r0
 800983a:	4603      	mov	r3, r0
 800983c:	4293      	cmp	r3, r2
 800983e:	d100      	bne.n	8009842 <memset+0xa>
 8009840:	4770      	bx	lr
 8009842:	f803 1b01 	strb.w	r1, [r3], #1
 8009846:	e7f9      	b.n	800983c <memset+0x4>

08009848 <__cvt>:
 8009848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800984a:	ed2d 8b02 	vpush	{d8}
 800984e:	eeb0 8b40 	vmov.f64	d8, d0
 8009852:	b085      	sub	sp, #20
 8009854:	4617      	mov	r7, r2
 8009856:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009858:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800985a:	ee18 2a90 	vmov	r2, s17
 800985e:	f025 0520 	bic.w	r5, r5, #32
 8009862:	2a00      	cmp	r2, #0
 8009864:	bfb6      	itet	lt
 8009866:	222d      	movlt	r2, #45	; 0x2d
 8009868:	2200      	movge	r2, #0
 800986a:	eeb1 8b40 	vneglt.f64	d8, d0
 800986e:	2d46      	cmp	r5, #70	; 0x46
 8009870:	460c      	mov	r4, r1
 8009872:	701a      	strb	r2, [r3, #0]
 8009874:	d004      	beq.n	8009880 <__cvt+0x38>
 8009876:	2d45      	cmp	r5, #69	; 0x45
 8009878:	d100      	bne.n	800987c <__cvt+0x34>
 800987a:	3401      	adds	r4, #1
 800987c:	2102      	movs	r1, #2
 800987e:	e000      	b.n	8009882 <__cvt+0x3a>
 8009880:	2103      	movs	r1, #3
 8009882:	ab03      	add	r3, sp, #12
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	ab02      	add	r3, sp, #8
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	4622      	mov	r2, r4
 800988c:	4633      	mov	r3, r6
 800988e:	eeb0 0b48 	vmov.f64	d0, d8
 8009892:	f000 fdf5 	bl	800a480 <_dtoa_r>
 8009896:	2d47      	cmp	r5, #71	; 0x47
 8009898:	d101      	bne.n	800989e <__cvt+0x56>
 800989a:	07fb      	lsls	r3, r7, #31
 800989c:	d51a      	bpl.n	80098d4 <__cvt+0x8c>
 800989e:	2d46      	cmp	r5, #70	; 0x46
 80098a0:	eb00 0204 	add.w	r2, r0, r4
 80098a4:	d10c      	bne.n	80098c0 <__cvt+0x78>
 80098a6:	7803      	ldrb	r3, [r0, #0]
 80098a8:	2b30      	cmp	r3, #48	; 0x30
 80098aa:	d107      	bne.n	80098bc <__cvt+0x74>
 80098ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80098b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b4:	bf1c      	itt	ne
 80098b6:	f1c4 0401 	rsbne	r4, r4, #1
 80098ba:	6034      	strne	r4, [r6, #0]
 80098bc:	6833      	ldr	r3, [r6, #0]
 80098be:	441a      	add	r2, r3
 80098c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80098c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c8:	bf08      	it	eq
 80098ca:	9203      	streq	r2, [sp, #12]
 80098cc:	2130      	movs	r1, #48	; 0x30
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d307      	bcc.n	80098e4 <__cvt+0x9c>
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098d8:	1a1b      	subs	r3, r3, r0
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	b005      	add	sp, #20
 80098de:	ecbd 8b02 	vpop	{d8}
 80098e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e4:	1c5c      	adds	r4, r3, #1
 80098e6:	9403      	str	r4, [sp, #12]
 80098e8:	7019      	strb	r1, [r3, #0]
 80098ea:	e7f0      	b.n	80098ce <__cvt+0x86>

080098ec <__exponent>:
 80098ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ee:	4603      	mov	r3, r0
 80098f0:	2900      	cmp	r1, #0
 80098f2:	bfb8      	it	lt
 80098f4:	4249      	neglt	r1, r1
 80098f6:	f803 2b02 	strb.w	r2, [r3], #2
 80098fa:	bfb4      	ite	lt
 80098fc:	222d      	movlt	r2, #45	; 0x2d
 80098fe:	222b      	movge	r2, #43	; 0x2b
 8009900:	2909      	cmp	r1, #9
 8009902:	7042      	strb	r2, [r0, #1]
 8009904:	dd2a      	ble.n	800995c <__exponent+0x70>
 8009906:	f10d 0407 	add.w	r4, sp, #7
 800990a:	46a4      	mov	ip, r4
 800990c:	270a      	movs	r7, #10
 800990e:	46a6      	mov	lr, r4
 8009910:	460a      	mov	r2, r1
 8009912:	fb91 f6f7 	sdiv	r6, r1, r7
 8009916:	fb07 1516 	mls	r5, r7, r6, r1
 800991a:	3530      	adds	r5, #48	; 0x30
 800991c:	2a63      	cmp	r2, #99	; 0x63
 800991e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009922:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009926:	4631      	mov	r1, r6
 8009928:	dcf1      	bgt.n	800990e <__exponent+0x22>
 800992a:	3130      	adds	r1, #48	; 0x30
 800992c:	f1ae 0502 	sub.w	r5, lr, #2
 8009930:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009934:	1c44      	adds	r4, r0, #1
 8009936:	4629      	mov	r1, r5
 8009938:	4561      	cmp	r1, ip
 800993a:	d30a      	bcc.n	8009952 <__exponent+0x66>
 800993c:	f10d 0209 	add.w	r2, sp, #9
 8009940:	eba2 020e 	sub.w	r2, r2, lr
 8009944:	4565      	cmp	r5, ip
 8009946:	bf88      	it	hi
 8009948:	2200      	movhi	r2, #0
 800994a:	4413      	add	r3, r2
 800994c:	1a18      	subs	r0, r3, r0
 800994e:	b003      	add	sp, #12
 8009950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009956:	f804 2f01 	strb.w	r2, [r4, #1]!
 800995a:	e7ed      	b.n	8009938 <__exponent+0x4c>
 800995c:	2330      	movs	r3, #48	; 0x30
 800995e:	3130      	adds	r1, #48	; 0x30
 8009960:	7083      	strb	r3, [r0, #2]
 8009962:	70c1      	strb	r1, [r0, #3]
 8009964:	1d03      	adds	r3, r0, #4
 8009966:	e7f1      	b.n	800994c <__exponent+0x60>

08009968 <_printf_float>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	b08b      	sub	sp, #44	; 0x2c
 800996e:	460c      	mov	r4, r1
 8009970:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009974:	4616      	mov	r6, r2
 8009976:	461f      	mov	r7, r3
 8009978:	4605      	mov	r5, r0
 800997a:	f001 fca7 	bl	800b2cc <_localeconv_r>
 800997e:	f8d0 b000 	ldr.w	fp, [r0]
 8009982:	4658      	mov	r0, fp
 8009984:	f7f7 f8f4 	bl	8000b70 <strlen>
 8009988:	2300      	movs	r3, #0
 800998a:	9308      	str	r3, [sp, #32]
 800998c:	f8d8 3000 	ldr.w	r3, [r8]
 8009990:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009994:	6822      	ldr	r2, [r4, #0]
 8009996:	3307      	adds	r3, #7
 8009998:	f023 0307 	bic.w	r3, r3, #7
 800999c:	f103 0108 	add.w	r1, r3, #8
 80099a0:	f8c8 1000 	str.w	r1, [r8]
 80099a4:	4682      	mov	sl, r0
 80099a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80099ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009c10 <_printf_float+0x2a8>
 80099b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80099b6:	eeb0 6bc0 	vabs.f64	d6, d0
 80099ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80099be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c2:	dd24      	ble.n	8009a0e <_printf_float+0xa6>
 80099c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80099c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099cc:	d502      	bpl.n	80099d4 <_printf_float+0x6c>
 80099ce:	232d      	movs	r3, #45	; 0x2d
 80099d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d4:	4b90      	ldr	r3, [pc, #576]	; (8009c18 <_printf_float+0x2b0>)
 80099d6:	4891      	ldr	r0, [pc, #580]	; (8009c1c <_printf_float+0x2b4>)
 80099d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80099dc:	bf94      	ite	ls
 80099de:	4698      	movls	r8, r3
 80099e0:	4680      	movhi	r8, r0
 80099e2:	2303      	movs	r3, #3
 80099e4:	6123      	str	r3, [r4, #16]
 80099e6:	f022 0204 	bic.w	r2, r2, #4
 80099ea:	2300      	movs	r3, #0
 80099ec:	6022      	str	r2, [r4, #0]
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	9700      	str	r7, [sp, #0]
 80099f2:	4633      	mov	r3, r6
 80099f4:	aa09      	add	r2, sp, #36	; 0x24
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f000 f9d3 	bl	8009da4 <_printf_common>
 80099fe:	3001      	adds	r0, #1
 8009a00:	f040 808a 	bne.w	8009b18 <_printf_float+0x1b0>
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295
 8009a08:	b00b      	add	sp, #44	; 0x2c
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a16:	d709      	bvc.n	8009a2c <_printf_float+0xc4>
 8009a18:	ee10 3a90 	vmov	r3, s1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfbc      	itt	lt
 8009a20:	232d      	movlt	r3, #45	; 0x2d
 8009a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a26:	487e      	ldr	r0, [pc, #504]	; (8009c20 <_printf_float+0x2b8>)
 8009a28:	4b7e      	ldr	r3, [pc, #504]	; (8009c24 <_printf_float+0x2bc>)
 8009a2a:	e7d5      	b.n	80099d8 <_printf_float+0x70>
 8009a2c:	6863      	ldr	r3, [r4, #4]
 8009a2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009a32:	9104      	str	r1, [sp, #16]
 8009a34:	1c59      	adds	r1, r3, #1
 8009a36:	d13c      	bne.n	8009ab2 <_printf_float+0x14a>
 8009a38:	2306      	movs	r3, #6
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9303      	str	r3, [sp, #12]
 8009a40:	ab08      	add	r3, sp, #32
 8009a42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a4a:	ab07      	add	r3, sp, #28
 8009a4c:	6861      	ldr	r1, [r4, #4]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	6022      	str	r2, [r4, #0]
 8009a52:	f10d 031b 	add.w	r3, sp, #27
 8009a56:	4628      	mov	r0, r5
 8009a58:	f7ff fef6 	bl	8009848 <__cvt>
 8009a5c:	9b04      	ldr	r3, [sp, #16]
 8009a5e:	9907      	ldr	r1, [sp, #28]
 8009a60:	2b47      	cmp	r3, #71	; 0x47
 8009a62:	4680      	mov	r8, r0
 8009a64:	d108      	bne.n	8009a78 <_printf_float+0x110>
 8009a66:	1cc8      	adds	r0, r1, #3
 8009a68:	db02      	blt.n	8009a70 <_printf_float+0x108>
 8009a6a:	6863      	ldr	r3, [r4, #4]
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	dd41      	ble.n	8009af4 <_printf_float+0x18c>
 8009a70:	f1a9 0902 	sub.w	r9, r9, #2
 8009a74:	fa5f f989 	uxtb.w	r9, r9
 8009a78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a7c:	d820      	bhi.n	8009ac0 <_printf_float+0x158>
 8009a7e:	3901      	subs	r1, #1
 8009a80:	464a      	mov	r2, r9
 8009a82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a86:	9107      	str	r1, [sp, #28]
 8009a88:	f7ff ff30 	bl	80098ec <__exponent>
 8009a8c:	9a08      	ldr	r2, [sp, #32]
 8009a8e:	9004      	str	r0, [sp, #16]
 8009a90:	1813      	adds	r3, r2, r0
 8009a92:	2a01      	cmp	r2, #1
 8009a94:	6123      	str	r3, [r4, #16]
 8009a96:	dc02      	bgt.n	8009a9e <_printf_float+0x136>
 8009a98:	6822      	ldr	r2, [r4, #0]
 8009a9a:	07d2      	lsls	r2, r2, #31
 8009a9c:	d501      	bpl.n	8009aa2 <_printf_float+0x13a>
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	6123      	str	r3, [r4, #16]
 8009aa2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0a2      	beq.n	80099f0 <_printf_float+0x88>
 8009aaa:	232d      	movs	r3, #45	; 0x2d
 8009aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab0:	e79e      	b.n	80099f0 <_printf_float+0x88>
 8009ab2:	9904      	ldr	r1, [sp, #16]
 8009ab4:	2947      	cmp	r1, #71	; 0x47
 8009ab6:	d1c1      	bne.n	8009a3c <_printf_float+0xd4>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1bf      	bne.n	8009a3c <_printf_float+0xd4>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e7bc      	b.n	8009a3a <_printf_float+0xd2>
 8009ac0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009ac4:	d118      	bne.n	8009af8 <_printf_float+0x190>
 8009ac6:	2900      	cmp	r1, #0
 8009ac8:	6863      	ldr	r3, [r4, #4]
 8009aca:	dd0b      	ble.n	8009ae4 <_printf_float+0x17c>
 8009acc:	6121      	str	r1, [r4, #16]
 8009ace:	b913      	cbnz	r3, 8009ad6 <_printf_float+0x16e>
 8009ad0:	6822      	ldr	r2, [r4, #0]
 8009ad2:	07d0      	lsls	r0, r2, #31
 8009ad4:	d502      	bpl.n	8009adc <_printf_float+0x174>
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	440b      	add	r3, r1
 8009ada:	6123      	str	r3, [r4, #16]
 8009adc:	2300      	movs	r3, #0
 8009ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ae0:	9304      	str	r3, [sp, #16]
 8009ae2:	e7de      	b.n	8009aa2 <_printf_float+0x13a>
 8009ae4:	b913      	cbnz	r3, 8009aec <_printf_float+0x184>
 8009ae6:	6822      	ldr	r2, [r4, #0]
 8009ae8:	07d2      	lsls	r2, r2, #31
 8009aea:	d501      	bpl.n	8009af0 <_printf_float+0x188>
 8009aec:	3302      	adds	r3, #2
 8009aee:	e7f4      	b.n	8009ada <_printf_float+0x172>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e7f2      	b.n	8009ada <_printf_float+0x172>
 8009af4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009af8:	9b08      	ldr	r3, [sp, #32]
 8009afa:	4299      	cmp	r1, r3
 8009afc:	db05      	blt.n	8009b0a <_printf_float+0x1a2>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	6121      	str	r1, [r4, #16]
 8009b02:	07d8      	lsls	r0, r3, #31
 8009b04:	d5ea      	bpl.n	8009adc <_printf_float+0x174>
 8009b06:	1c4b      	adds	r3, r1, #1
 8009b08:	e7e7      	b.n	8009ada <_printf_float+0x172>
 8009b0a:	2900      	cmp	r1, #0
 8009b0c:	bfd4      	ite	le
 8009b0e:	f1c1 0202 	rsble	r2, r1, #2
 8009b12:	2201      	movgt	r2, #1
 8009b14:	4413      	add	r3, r2
 8009b16:	e7e0      	b.n	8009ada <_printf_float+0x172>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	055a      	lsls	r2, r3, #21
 8009b1c:	d407      	bmi.n	8009b2e <_printf_float+0x1c6>
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	4642      	mov	r2, r8
 8009b22:	4631      	mov	r1, r6
 8009b24:	4628      	mov	r0, r5
 8009b26:	47b8      	blx	r7
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d12a      	bne.n	8009b82 <_printf_float+0x21a>
 8009b2c:	e76a      	b.n	8009a04 <_printf_float+0x9c>
 8009b2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009b32:	f240 80e2 	bls.w	8009cfa <_printf_float+0x392>
 8009b36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009b3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b42:	d133      	bne.n	8009bac <_printf_float+0x244>
 8009b44:	4a38      	ldr	r2, [pc, #224]	; (8009c28 <_printf_float+0x2c0>)
 8009b46:	2301      	movs	r3, #1
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f af58 	beq.w	8009a04 <_printf_float+0x9c>
 8009b54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	db02      	blt.n	8009b62 <_printf_float+0x1fa>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	07d8      	lsls	r0, r3, #31
 8009b60:	d50f      	bpl.n	8009b82 <_printf_float+0x21a>
 8009b62:	4653      	mov	r3, sl
 8009b64:	465a      	mov	r2, fp
 8009b66:	4631      	mov	r1, r6
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b8      	blx	r7
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f43f af49 	beq.w	8009a04 <_printf_float+0x9c>
 8009b72:	f04f 0800 	mov.w	r8, #0
 8009b76:	f104 091a 	add.w	r9, r4, #26
 8009b7a:	9b08      	ldr	r3, [sp, #32]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4543      	cmp	r3, r8
 8009b80:	dc09      	bgt.n	8009b96 <_printf_float+0x22e>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	079b      	lsls	r3, r3, #30
 8009b86:	f100 8108 	bmi.w	8009d9a <_printf_float+0x432>
 8009b8a:	68e0      	ldr	r0, [r4, #12]
 8009b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8e:	4298      	cmp	r0, r3
 8009b90:	bfb8      	it	lt
 8009b92:	4618      	movlt	r0, r3
 8009b94:	e738      	b.n	8009a08 <_printf_float+0xa0>
 8009b96:	2301      	movs	r3, #1
 8009b98:	464a      	mov	r2, r9
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f43f af2f 	beq.w	8009a04 <_printf_float+0x9c>
 8009ba6:	f108 0801 	add.w	r8, r8, #1
 8009baa:	e7e6      	b.n	8009b7a <_printf_float+0x212>
 8009bac:	9b07      	ldr	r3, [sp, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	dc3c      	bgt.n	8009c2c <_printf_float+0x2c4>
 8009bb2:	4a1d      	ldr	r2, [pc, #116]	; (8009c28 <_printf_float+0x2c0>)
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f43f af21 	beq.w	8009a04 <_printf_float+0x9c>
 8009bc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	d102      	bne.n	8009bd0 <_printf_float+0x268>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	07d9      	lsls	r1, r3, #31
 8009bce:	d5d8      	bpl.n	8009b82 <_printf_float+0x21a>
 8009bd0:	4653      	mov	r3, sl
 8009bd2:	465a      	mov	r2, fp
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b8      	blx	r7
 8009bda:	3001      	adds	r0, #1
 8009bdc:	f43f af12 	beq.w	8009a04 <_printf_float+0x9c>
 8009be0:	f04f 0900 	mov.w	r9, #0
 8009be4:	f104 0a1a 	add.w	sl, r4, #26
 8009be8:	9b07      	ldr	r3, [sp, #28]
 8009bea:	425b      	negs	r3, r3
 8009bec:	454b      	cmp	r3, r9
 8009bee:	dc01      	bgt.n	8009bf4 <_printf_float+0x28c>
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	e795      	b.n	8009b20 <_printf_float+0x1b8>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	4652      	mov	r2, sl
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	47b8      	blx	r7
 8009bfe:	3001      	adds	r0, #1
 8009c00:	f43f af00 	beq.w	8009a04 <_printf_float+0x9c>
 8009c04:	f109 0901 	add.w	r9, r9, #1
 8009c08:	e7ee      	b.n	8009be8 <_printf_float+0x280>
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w
 8009c10:	ffffffff 	.word	0xffffffff
 8009c14:	7fefffff 	.word	0x7fefffff
 8009c18:	0800c610 	.word	0x0800c610
 8009c1c:	0800c614 	.word	0x0800c614
 8009c20:	0800c61c 	.word	0x0800c61c
 8009c24:	0800c618 	.word	0x0800c618
 8009c28:	0800c620 	.word	0x0800c620
 8009c2c:	9a08      	ldr	r2, [sp, #32]
 8009c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c30:	429a      	cmp	r2, r3
 8009c32:	bfa8      	it	ge
 8009c34:	461a      	movge	r2, r3
 8009c36:	2a00      	cmp	r2, #0
 8009c38:	4691      	mov	r9, r2
 8009c3a:	dc38      	bgt.n	8009cae <_printf_float+0x346>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9305      	str	r3, [sp, #20]
 8009c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c44:	f104 021a 	add.w	r2, r4, #26
 8009c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c4a:	9905      	ldr	r1, [sp, #20]
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	eba3 0309 	sub.w	r3, r3, r9
 8009c52:	428b      	cmp	r3, r1
 8009c54:	dc33      	bgt.n	8009cbe <_printf_float+0x356>
 8009c56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	db3c      	blt.n	8009cd8 <_printf_float+0x370>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	07da      	lsls	r2, r3, #31
 8009c62:	d439      	bmi.n	8009cd8 <_printf_float+0x370>
 8009c64:	9b08      	ldr	r3, [sp, #32]
 8009c66:	9a04      	ldr	r2, [sp, #16]
 8009c68:	9907      	ldr	r1, [sp, #28]
 8009c6a:	1a9a      	subs	r2, r3, r2
 8009c6c:	eba3 0901 	sub.w	r9, r3, r1
 8009c70:	4591      	cmp	r9, r2
 8009c72:	bfa8      	it	ge
 8009c74:	4691      	movge	r9, r2
 8009c76:	f1b9 0f00 	cmp.w	r9, #0
 8009c7a:	dc35      	bgt.n	8009ce8 <_printf_float+0x380>
 8009c7c:	f04f 0800 	mov.w	r8, #0
 8009c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c84:	f104 0a1a 	add.w	sl, r4, #26
 8009c88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	eba3 0309 	sub.w	r3, r3, r9
 8009c92:	4543      	cmp	r3, r8
 8009c94:	f77f af75 	ble.w	8009b82 <_printf_float+0x21a>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	4652      	mov	r2, sl
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	f43f aeae 	beq.w	8009a04 <_printf_float+0x9c>
 8009ca8:	f108 0801 	add.w	r8, r8, #1
 8009cac:	e7ec      	b.n	8009c88 <_printf_float+0x320>
 8009cae:	4613      	mov	r3, r2
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	47b8      	blx	r7
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d1bf      	bne.n	8009c3c <_printf_float+0x2d4>
 8009cbc:	e6a2      	b.n	8009a04 <_printf_float+0x9c>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	9204      	str	r2, [sp, #16]
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f43f ae9b 	beq.w	8009a04 <_printf_float+0x9c>
 8009cce:	9b05      	ldr	r3, [sp, #20]
 8009cd0:	9a04      	ldr	r2, [sp, #16]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	9305      	str	r3, [sp, #20]
 8009cd6:	e7b7      	b.n	8009c48 <_printf_float+0x2e0>
 8009cd8:	4653      	mov	r3, sl
 8009cda:	465a      	mov	r2, fp
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d1be      	bne.n	8009c64 <_printf_float+0x2fc>
 8009ce6:	e68d      	b.n	8009a04 <_printf_float+0x9c>
 8009ce8:	9a04      	ldr	r2, [sp, #16]
 8009cea:	464b      	mov	r3, r9
 8009cec:	4442      	add	r2, r8
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d1c1      	bne.n	8009c7c <_printf_float+0x314>
 8009cf8:	e684      	b.n	8009a04 <_printf_float+0x9c>
 8009cfa:	9a08      	ldr	r2, [sp, #32]
 8009cfc:	2a01      	cmp	r2, #1
 8009cfe:	dc01      	bgt.n	8009d04 <_printf_float+0x39c>
 8009d00:	07db      	lsls	r3, r3, #31
 8009d02:	d537      	bpl.n	8009d74 <_printf_float+0x40c>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4642      	mov	r2, r8
 8009d08:	4631      	mov	r1, r6
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	47b8      	blx	r7
 8009d0e:	3001      	adds	r0, #1
 8009d10:	f43f ae78 	beq.w	8009a04 <_printf_float+0x9c>
 8009d14:	4653      	mov	r3, sl
 8009d16:	465a      	mov	r2, fp
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	47b8      	blx	r7
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f43f ae70 	beq.w	8009a04 <_printf_float+0x9c>
 8009d24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009d28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d30:	d01b      	beq.n	8009d6a <_printf_float+0x402>
 8009d32:	9b08      	ldr	r3, [sp, #32]
 8009d34:	f108 0201 	add.w	r2, r8, #1
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	d10e      	bne.n	8009d62 <_printf_float+0x3fa>
 8009d44:	e65e      	b.n	8009a04 <_printf_float+0x9c>
 8009d46:	2301      	movs	r3, #1
 8009d48:	464a      	mov	r2, r9
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f ae57 	beq.w	8009a04 <_printf_float+0x9c>
 8009d56:	f108 0801 	add.w	r8, r8, #1
 8009d5a:	9b08      	ldr	r3, [sp, #32]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	4543      	cmp	r3, r8
 8009d60:	dcf1      	bgt.n	8009d46 <_printf_float+0x3de>
 8009d62:	9b04      	ldr	r3, [sp, #16]
 8009d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d68:	e6db      	b.n	8009b22 <_printf_float+0x1ba>
 8009d6a:	f04f 0800 	mov.w	r8, #0
 8009d6e:	f104 091a 	add.w	r9, r4, #26
 8009d72:	e7f2      	b.n	8009d5a <_printf_float+0x3f2>
 8009d74:	2301      	movs	r3, #1
 8009d76:	4642      	mov	r2, r8
 8009d78:	e7df      	b.n	8009d3a <_printf_float+0x3d2>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	464a      	mov	r2, r9
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f ae3d 	beq.w	8009a04 <_printf_float+0x9c>
 8009d8a:	f108 0801 	add.w	r8, r8, #1
 8009d8e:	68e3      	ldr	r3, [r4, #12]
 8009d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d92:	1a5b      	subs	r3, r3, r1
 8009d94:	4543      	cmp	r3, r8
 8009d96:	dcf0      	bgt.n	8009d7a <_printf_float+0x412>
 8009d98:	e6f7      	b.n	8009b8a <_printf_float+0x222>
 8009d9a:	f04f 0800 	mov.w	r8, #0
 8009d9e:	f104 0919 	add.w	r9, r4, #25
 8009da2:	e7f4      	b.n	8009d8e <_printf_float+0x426>

08009da4 <_printf_common>:
 8009da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da8:	4616      	mov	r6, r2
 8009daa:	4699      	mov	r9, r3
 8009dac:	688a      	ldr	r2, [r1, #8]
 8009dae:	690b      	ldr	r3, [r1, #16]
 8009db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	bfb8      	it	lt
 8009db8:	4613      	movlt	r3, r2
 8009dba:	6033      	str	r3, [r6, #0]
 8009dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	b10a      	cbz	r2, 8009dca <_printf_common+0x26>
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	6033      	str	r3, [r6, #0]
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	0699      	lsls	r1, r3, #26
 8009dce:	bf42      	ittt	mi
 8009dd0:	6833      	ldrmi	r3, [r6, #0]
 8009dd2:	3302      	addmi	r3, #2
 8009dd4:	6033      	strmi	r3, [r6, #0]
 8009dd6:	6825      	ldr	r5, [r4, #0]
 8009dd8:	f015 0506 	ands.w	r5, r5, #6
 8009ddc:	d106      	bne.n	8009dec <_printf_common+0x48>
 8009dde:	f104 0a19 	add.w	sl, r4, #25
 8009de2:	68e3      	ldr	r3, [r4, #12]
 8009de4:	6832      	ldr	r2, [r6, #0]
 8009de6:	1a9b      	subs	r3, r3, r2
 8009de8:	42ab      	cmp	r3, r5
 8009dea:	dc26      	bgt.n	8009e3a <_printf_common+0x96>
 8009dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009df0:	1e13      	subs	r3, r2, #0
 8009df2:	6822      	ldr	r2, [r4, #0]
 8009df4:	bf18      	it	ne
 8009df6:	2301      	movne	r3, #1
 8009df8:	0692      	lsls	r2, r2, #26
 8009dfa:	d42b      	bmi.n	8009e54 <_printf_common+0xb0>
 8009dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e00:	4649      	mov	r1, r9
 8009e02:	4638      	mov	r0, r7
 8009e04:	47c0      	blx	r8
 8009e06:	3001      	adds	r0, #1
 8009e08:	d01e      	beq.n	8009e48 <_printf_common+0xa4>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	68e5      	ldr	r5, [r4, #12]
 8009e0e:	6832      	ldr	r2, [r6, #0]
 8009e10:	f003 0306 	and.w	r3, r3, #6
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	bf08      	it	eq
 8009e18:	1aad      	subeq	r5, r5, r2
 8009e1a:	68a3      	ldr	r3, [r4, #8]
 8009e1c:	6922      	ldr	r2, [r4, #16]
 8009e1e:	bf0c      	ite	eq
 8009e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e24:	2500      	movne	r5, #0
 8009e26:	4293      	cmp	r3, r2
 8009e28:	bfc4      	itt	gt
 8009e2a:	1a9b      	subgt	r3, r3, r2
 8009e2c:	18ed      	addgt	r5, r5, r3
 8009e2e:	2600      	movs	r6, #0
 8009e30:	341a      	adds	r4, #26
 8009e32:	42b5      	cmp	r5, r6
 8009e34:	d11a      	bne.n	8009e6c <_printf_common+0xc8>
 8009e36:	2000      	movs	r0, #0
 8009e38:	e008      	b.n	8009e4c <_printf_common+0xa8>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4652      	mov	r2, sl
 8009e3e:	4649      	mov	r1, r9
 8009e40:	4638      	mov	r0, r7
 8009e42:	47c0      	blx	r8
 8009e44:	3001      	adds	r0, #1
 8009e46:	d103      	bne.n	8009e50 <_printf_common+0xac>
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e50:	3501      	adds	r5, #1
 8009e52:	e7c6      	b.n	8009de2 <_printf_common+0x3e>
 8009e54:	18e1      	adds	r1, r4, r3
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	2030      	movs	r0, #48	; 0x30
 8009e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e5e:	4422      	add	r2, r4
 8009e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e68:	3302      	adds	r3, #2
 8009e6a:	e7c7      	b.n	8009dfc <_printf_common+0x58>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	4622      	mov	r2, r4
 8009e70:	4649      	mov	r1, r9
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c0      	blx	r8
 8009e76:	3001      	adds	r0, #1
 8009e78:	d0e6      	beq.n	8009e48 <_printf_common+0xa4>
 8009e7a:	3601      	adds	r6, #1
 8009e7c:	e7d9      	b.n	8009e32 <_printf_common+0x8e>
	...

08009e80 <_printf_i>:
 8009e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e84:	7e0f      	ldrb	r7, [r1, #24]
 8009e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e88:	2f78      	cmp	r7, #120	; 0x78
 8009e8a:	4691      	mov	r9, r2
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	469a      	mov	sl, r3
 8009e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e96:	d807      	bhi.n	8009ea8 <_printf_i+0x28>
 8009e98:	2f62      	cmp	r7, #98	; 0x62
 8009e9a:	d80a      	bhi.n	8009eb2 <_printf_i+0x32>
 8009e9c:	2f00      	cmp	r7, #0
 8009e9e:	f000 80d8 	beq.w	800a052 <_printf_i+0x1d2>
 8009ea2:	2f58      	cmp	r7, #88	; 0x58
 8009ea4:	f000 80a3 	beq.w	8009fee <_printf_i+0x16e>
 8009ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009eb0:	e03a      	b.n	8009f28 <_printf_i+0xa8>
 8009eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eb6:	2b15      	cmp	r3, #21
 8009eb8:	d8f6      	bhi.n	8009ea8 <_printf_i+0x28>
 8009eba:	a101      	add	r1, pc, #4	; (adr r1, 8009ec0 <_printf_i+0x40>)
 8009ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ec0:	08009f19 	.word	0x08009f19
 8009ec4:	08009f2d 	.word	0x08009f2d
 8009ec8:	08009ea9 	.word	0x08009ea9
 8009ecc:	08009ea9 	.word	0x08009ea9
 8009ed0:	08009ea9 	.word	0x08009ea9
 8009ed4:	08009ea9 	.word	0x08009ea9
 8009ed8:	08009f2d 	.word	0x08009f2d
 8009edc:	08009ea9 	.word	0x08009ea9
 8009ee0:	08009ea9 	.word	0x08009ea9
 8009ee4:	08009ea9 	.word	0x08009ea9
 8009ee8:	08009ea9 	.word	0x08009ea9
 8009eec:	0800a039 	.word	0x0800a039
 8009ef0:	08009f5d 	.word	0x08009f5d
 8009ef4:	0800a01b 	.word	0x0800a01b
 8009ef8:	08009ea9 	.word	0x08009ea9
 8009efc:	08009ea9 	.word	0x08009ea9
 8009f00:	0800a05b 	.word	0x0800a05b
 8009f04:	08009ea9 	.word	0x08009ea9
 8009f08:	08009f5d 	.word	0x08009f5d
 8009f0c:	08009ea9 	.word	0x08009ea9
 8009f10:	08009ea9 	.word	0x08009ea9
 8009f14:	0800a023 	.word	0x0800a023
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	1d1a      	adds	r2, r3, #4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	602a      	str	r2, [r5, #0]
 8009f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e0a3      	b.n	800a074 <_printf_i+0x1f4>
 8009f2c:	6820      	ldr	r0, [r4, #0]
 8009f2e:	6829      	ldr	r1, [r5, #0]
 8009f30:	0606      	lsls	r6, r0, #24
 8009f32:	f101 0304 	add.w	r3, r1, #4
 8009f36:	d50a      	bpl.n	8009f4e <_printf_i+0xce>
 8009f38:	680e      	ldr	r6, [r1, #0]
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	2e00      	cmp	r6, #0
 8009f3e:	da03      	bge.n	8009f48 <_printf_i+0xc8>
 8009f40:	232d      	movs	r3, #45	; 0x2d
 8009f42:	4276      	negs	r6, r6
 8009f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f48:	485e      	ldr	r0, [pc, #376]	; (800a0c4 <_printf_i+0x244>)
 8009f4a:	230a      	movs	r3, #10
 8009f4c:	e019      	b.n	8009f82 <_printf_i+0x102>
 8009f4e:	680e      	ldr	r6, [r1, #0]
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f56:	bf18      	it	ne
 8009f58:	b236      	sxthne	r6, r6
 8009f5a:	e7ef      	b.n	8009f3c <_printf_i+0xbc>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	6820      	ldr	r0, [r4, #0]
 8009f60:	1d19      	adds	r1, r3, #4
 8009f62:	6029      	str	r1, [r5, #0]
 8009f64:	0601      	lsls	r1, r0, #24
 8009f66:	d501      	bpl.n	8009f6c <_printf_i+0xec>
 8009f68:	681e      	ldr	r6, [r3, #0]
 8009f6a:	e002      	b.n	8009f72 <_printf_i+0xf2>
 8009f6c:	0646      	lsls	r6, r0, #25
 8009f6e:	d5fb      	bpl.n	8009f68 <_printf_i+0xe8>
 8009f70:	881e      	ldrh	r6, [r3, #0]
 8009f72:	4854      	ldr	r0, [pc, #336]	; (800a0c4 <_printf_i+0x244>)
 8009f74:	2f6f      	cmp	r7, #111	; 0x6f
 8009f76:	bf0c      	ite	eq
 8009f78:	2308      	moveq	r3, #8
 8009f7a:	230a      	movne	r3, #10
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f82:	6865      	ldr	r5, [r4, #4]
 8009f84:	60a5      	str	r5, [r4, #8]
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	bfa2      	ittt	ge
 8009f8a:	6821      	ldrge	r1, [r4, #0]
 8009f8c:	f021 0104 	bicge.w	r1, r1, #4
 8009f90:	6021      	strge	r1, [r4, #0]
 8009f92:	b90e      	cbnz	r6, 8009f98 <_printf_i+0x118>
 8009f94:	2d00      	cmp	r5, #0
 8009f96:	d04d      	beq.n	800a034 <_printf_i+0x1b4>
 8009f98:	4615      	mov	r5, r2
 8009f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8009fa2:	5dc7      	ldrb	r7, [r0, r7]
 8009fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fa8:	4637      	mov	r7, r6
 8009faa:	42bb      	cmp	r3, r7
 8009fac:	460e      	mov	r6, r1
 8009fae:	d9f4      	bls.n	8009f9a <_printf_i+0x11a>
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d10b      	bne.n	8009fcc <_printf_i+0x14c>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	07de      	lsls	r6, r3, #31
 8009fb8:	d508      	bpl.n	8009fcc <_printf_i+0x14c>
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	6861      	ldr	r1, [r4, #4]
 8009fbe:	4299      	cmp	r1, r3
 8009fc0:	bfde      	ittt	le
 8009fc2:	2330      	movle	r3, #48	; 0x30
 8009fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fcc:	1b52      	subs	r2, r2, r5
 8009fce:	6122      	str	r2, [r4, #16]
 8009fd0:	f8cd a000 	str.w	sl, [sp]
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	aa03      	add	r2, sp, #12
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4640      	mov	r0, r8
 8009fdc:	f7ff fee2 	bl	8009da4 <_printf_common>
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d14c      	bne.n	800a07e <_printf_i+0x1fe>
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	b004      	add	sp, #16
 8009fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fee:	4835      	ldr	r0, [pc, #212]	; (800a0c4 <_printf_i+0x244>)
 8009ff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ff4:	6829      	ldr	r1, [r5, #0]
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ffc:	6029      	str	r1, [r5, #0]
 8009ffe:	061d      	lsls	r5, r3, #24
 800a000:	d514      	bpl.n	800a02c <_printf_i+0x1ac>
 800a002:	07df      	lsls	r7, r3, #31
 800a004:	bf44      	itt	mi
 800a006:	f043 0320 	orrmi.w	r3, r3, #32
 800a00a:	6023      	strmi	r3, [r4, #0]
 800a00c:	b91e      	cbnz	r6, 800a016 <_printf_i+0x196>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	f023 0320 	bic.w	r3, r3, #32
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	2310      	movs	r3, #16
 800a018:	e7b0      	b.n	8009f7c <_printf_i+0xfc>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	f043 0320 	orr.w	r3, r3, #32
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	2378      	movs	r3, #120	; 0x78
 800a024:	4828      	ldr	r0, [pc, #160]	; (800a0c8 <_printf_i+0x248>)
 800a026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a02a:	e7e3      	b.n	8009ff4 <_printf_i+0x174>
 800a02c:	0659      	lsls	r1, r3, #25
 800a02e:	bf48      	it	mi
 800a030:	b2b6      	uxthmi	r6, r6
 800a032:	e7e6      	b.n	800a002 <_printf_i+0x182>
 800a034:	4615      	mov	r5, r2
 800a036:	e7bb      	b.n	8009fb0 <_printf_i+0x130>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	6826      	ldr	r6, [r4, #0]
 800a03c:	6961      	ldr	r1, [r4, #20]
 800a03e:	1d18      	adds	r0, r3, #4
 800a040:	6028      	str	r0, [r5, #0]
 800a042:	0635      	lsls	r5, r6, #24
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	d501      	bpl.n	800a04c <_printf_i+0x1cc>
 800a048:	6019      	str	r1, [r3, #0]
 800a04a:	e002      	b.n	800a052 <_printf_i+0x1d2>
 800a04c:	0670      	lsls	r0, r6, #25
 800a04e:	d5fb      	bpl.n	800a048 <_printf_i+0x1c8>
 800a050:	8019      	strh	r1, [r3, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	4615      	mov	r5, r2
 800a058:	e7ba      	b.n	8009fd0 <_printf_i+0x150>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	1d1a      	adds	r2, r3, #4
 800a05e:	602a      	str	r2, [r5, #0]
 800a060:	681d      	ldr	r5, [r3, #0]
 800a062:	6862      	ldr	r2, [r4, #4]
 800a064:	2100      	movs	r1, #0
 800a066:	4628      	mov	r0, r5
 800a068:	f7f6 fd8a 	bl	8000b80 <memchr>
 800a06c:	b108      	cbz	r0, 800a072 <_printf_i+0x1f2>
 800a06e:	1b40      	subs	r0, r0, r5
 800a070:	6060      	str	r0, [r4, #4]
 800a072:	6863      	ldr	r3, [r4, #4]
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	2300      	movs	r3, #0
 800a078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a07c:	e7a8      	b.n	8009fd0 <_printf_i+0x150>
 800a07e:	6923      	ldr	r3, [r4, #16]
 800a080:	462a      	mov	r2, r5
 800a082:	4649      	mov	r1, r9
 800a084:	4640      	mov	r0, r8
 800a086:	47d0      	blx	sl
 800a088:	3001      	adds	r0, #1
 800a08a:	d0ab      	beq.n	8009fe4 <_printf_i+0x164>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	079b      	lsls	r3, r3, #30
 800a090:	d413      	bmi.n	800a0ba <_printf_i+0x23a>
 800a092:	68e0      	ldr	r0, [r4, #12]
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	4298      	cmp	r0, r3
 800a098:	bfb8      	it	lt
 800a09a:	4618      	movlt	r0, r3
 800a09c:	e7a4      	b.n	8009fe8 <_printf_i+0x168>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	4640      	mov	r0, r8
 800a0a6:	47d0      	blx	sl
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d09b      	beq.n	8009fe4 <_printf_i+0x164>
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	68e3      	ldr	r3, [r4, #12]
 800a0b0:	9903      	ldr	r1, [sp, #12]
 800a0b2:	1a5b      	subs	r3, r3, r1
 800a0b4:	42ab      	cmp	r3, r5
 800a0b6:	dcf2      	bgt.n	800a09e <_printf_i+0x21e>
 800a0b8:	e7eb      	b.n	800a092 <_printf_i+0x212>
 800a0ba:	2500      	movs	r5, #0
 800a0bc:	f104 0619 	add.w	r6, r4, #25
 800a0c0:	e7f5      	b.n	800a0ae <_printf_i+0x22e>
 800a0c2:	bf00      	nop
 800a0c4:	0800c622 	.word	0x0800c622
 800a0c8:	0800c633 	.word	0x0800c633

0800a0cc <iprintf>:
 800a0cc:	b40f      	push	{r0, r1, r2, r3}
 800a0ce:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <iprintf+0x2c>)
 800a0d0:	b513      	push	{r0, r1, r4, lr}
 800a0d2:	681c      	ldr	r4, [r3, #0]
 800a0d4:	b124      	cbz	r4, 800a0e0 <iprintf+0x14>
 800a0d6:	69a3      	ldr	r3, [r4, #24]
 800a0d8:	b913      	cbnz	r3, 800a0e0 <iprintf+0x14>
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f001 f858 	bl	800b190 <__sinit>
 800a0e0:	ab05      	add	r3, sp, #20
 800a0e2:	9a04      	ldr	r2, [sp, #16]
 800a0e4:	68a1      	ldr	r1, [r4, #8]
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f001 fe07 	bl	800bcfc <_vfiprintf_r>
 800a0ee:	b002      	add	sp, #8
 800a0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f4:	b004      	add	sp, #16
 800a0f6:	4770      	bx	lr
 800a0f8:	2000003c 	.word	0x2000003c

0800a0fc <_puts_r>:
 800a0fc:	b570      	push	{r4, r5, r6, lr}
 800a0fe:	460e      	mov	r6, r1
 800a100:	4605      	mov	r5, r0
 800a102:	b118      	cbz	r0, 800a10c <_puts_r+0x10>
 800a104:	6983      	ldr	r3, [r0, #24]
 800a106:	b90b      	cbnz	r3, 800a10c <_puts_r+0x10>
 800a108:	f001 f842 	bl	800b190 <__sinit>
 800a10c:	69ab      	ldr	r3, [r5, #24]
 800a10e:	68ac      	ldr	r4, [r5, #8]
 800a110:	b913      	cbnz	r3, 800a118 <_puts_r+0x1c>
 800a112:	4628      	mov	r0, r5
 800a114:	f001 f83c 	bl	800b190 <__sinit>
 800a118:	4b2c      	ldr	r3, [pc, #176]	; (800a1cc <_puts_r+0xd0>)
 800a11a:	429c      	cmp	r4, r3
 800a11c:	d120      	bne.n	800a160 <_puts_r+0x64>
 800a11e:	686c      	ldr	r4, [r5, #4]
 800a120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a122:	07db      	lsls	r3, r3, #31
 800a124:	d405      	bmi.n	800a132 <_puts_r+0x36>
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	0598      	lsls	r0, r3, #22
 800a12a:	d402      	bmi.n	800a132 <_puts_r+0x36>
 800a12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a12e:	f001 f8d2 	bl	800b2d6 <__retarget_lock_acquire_recursive>
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	0719      	lsls	r1, r3, #28
 800a136:	d51d      	bpl.n	800a174 <_puts_r+0x78>
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	b1db      	cbz	r3, 800a174 <_puts_r+0x78>
 800a13c:	3e01      	subs	r6, #1
 800a13e:	68a3      	ldr	r3, [r4, #8]
 800a140:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a144:	3b01      	subs	r3, #1
 800a146:	60a3      	str	r3, [r4, #8]
 800a148:	bb39      	cbnz	r1, 800a19a <_puts_r+0x9e>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	da38      	bge.n	800a1c0 <_puts_r+0xc4>
 800a14e:	4622      	mov	r2, r4
 800a150:	210a      	movs	r1, #10
 800a152:	4628      	mov	r0, r5
 800a154:	f000 f848 	bl	800a1e8 <__swbuf_r>
 800a158:	3001      	adds	r0, #1
 800a15a:	d011      	beq.n	800a180 <_puts_r+0x84>
 800a15c:	250a      	movs	r5, #10
 800a15e:	e011      	b.n	800a184 <_puts_r+0x88>
 800a160:	4b1b      	ldr	r3, [pc, #108]	; (800a1d0 <_puts_r+0xd4>)
 800a162:	429c      	cmp	r4, r3
 800a164:	d101      	bne.n	800a16a <_puts_r+0x6e>
 800a166:	68ac      	ldr	r4, [r5, #8]
 800a168:	e7da      	b.n	800a120 <_puts_r+0x24>
 800a16a:	4b1a      	ldr	r3, [pc, #104]	; (800a1d4 <_puts_r+0xd8>)
 800a16c:	429c      	cmp	r4, r3
 800a16e:	bf08      	it	eq
 800a170:	68ec      	ldreq	r4, [r5, #12]
 800a172:	e7d5      	b.n	800a120 <_puts_r+0x24>
 800a174:	4621      	mov	r1, r4
 800a176:	4628      	mov	r0, r5
 800a178:	f000 f888 	bl	800a28c <__swsetup_r>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d0dd      	beq.n	800a13c <_puts_r+0x40>
 800a180:	f04f 35ff 	mov.w	r5, #4294967295
 800a184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a186:	07da      	lsls	r2, r3, #31
 800a188:	d405      	bmi.n	800a196 <_puts_r+0x9a>
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	059b      	lsls	r3, r3, #22
 800a18e:	d402      	bmi.n	800a196 <_puts_r+0x9a>
 800a190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a192:	f001 f8a1 	bl	800b2d8 <__retarget_lock_release_recursive>
 800a196:	4628      	mov	r0, r5
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da04      	bge.n	800a1a8 <_puts_r+0xac>
 800a19e:	69a2      	ldr	r2, [r4, #24]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	dc06      	bgt.n	800a1b2 <_puts_r+0xb6>
 800a1a4:	290a      	cmp	r1, #10
 800a1a6:	d004      	beq.n	800a1b2 <_puts_r+0xb6>
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	1c5a      	adds	r2, r3, #1
 800a1ac:	6022      	str	r2, [r4, #0]
 800a1ae:	7019      	strb	r1, [r3, #0]
 800a1b0:	e7c5      	b.n	800a13e <_puts_r+0x42>
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 f817 	bl	800a1e8 <__swbuf_r>
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d1bf      	bne.n	800a13e <_puts_r+0x42>
 800a1be:	e7df      	b.n	800a180 <_puts_r+0x84>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	250a      	movs	r5, #10
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	6022      	str	r2, [r4, #0]
 800a1c8:	701d      	strb	r5, [r3, #0]
 800a1ca:	e7db      	b.n	800a184 <_puts_r+0x88>
 800a1cc:	0800c6f4 	.word	0x0800c6f4
 800a1d0:	0800c714 	.word	0x0800c714
 800a1d4:	0800c6d4 	.word	0x0800c6d4

0800a1d8 <puts>:
 800a1d8:	4b02      	ldr	r3, [pc, #8]	; (800a1e4 <puts+0xc>)
 800a1da:	4601      	mov	r1, r0
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	f7ff bf8d 	b.w	800a0fc <_puts_r>
 800a1e2:	bf00      	nop
 800a1e4:	2000003c 	.word	0x2000003c

0800a1e8 <__swbuf_r>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	460e      	mov	r6, r1
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	b118      	cbz	r0, 800a1fa <__swbuf_r+0x12>
 800a1f2:	6983      	ldr	r3, [r0, #24]
 800a1f4:	b90b      	cbnz	r3, 800a1fa <__swbuf_r+0x12>
 800a1f6:	f000 ffcb 	bl	800b190 <__sinit>
 800a1fa:	4b21      	ldr	r3, [pc, #132]	; (800a280 <__swbuf_r+0x98>)
 800a1fc:	429c      	cmp	r4, r3
 800a1fe:	d12b      	bne.n	800a258 <__swbuf_r+0x70>
 800a200:	686c      	ldr	r4, [r5, #4]
 800a202:	69a3      	ldr	r3, [r4, #24]
 800a204:	60a3      	str	r3, [r4, #8]
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	071a      	lsls	r2, r3, #28
 800a20a:	d52f      	bpl.n	800a26c <__swbuf_r+0x84>
 800a20c:	6923      	ldr	r3, [r4, #16]
 800a20e:	b36b      	cbz	r3, 800a26c <__swbuf_r+0x84>
 800a210:	6923      	ldr	r3, [r4, #16]
 800a212:	6820      	ldr	r0, [r4, #0]
 800a214:	1ac0      	subs	r0, r0, r3
 800a216:	6963      	ldr	r3, [r4, #20]
 800a218:	b2f6      	uxtb	r6, r6
 800a21a:	4283      	cmp	r3, r0
 800a21c:	4637      	mov	r7, r6
 800a21e:	dc04      	bgt.n	800a22a <__swbuf_r+0x42>
 800a220:	4621      	mov	r1, r4
 800a222:	4628      	mov	r0, r5
 800a224:	f000 ff20 	bl	800b068 <_fflush_r>
 800a228:	bb30      	cbnz	r0, 800a278 <__swbuf_r+0x90>
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	60a3      	str	r3, [r4, #8]
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	6022      	str	r2, [r4, #0]
 800a236:	701e      	strb	r6, [r3, #0]
 800a238:	6963      	ldr	r3, [r4, #20]
 800a23a:	3001      	adds	r0, #1
 800a23c:	4283      	cmp	r3, r0
 800a23e:	d004      	beq.n	800a24a <__swbuf_r+0x62>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	07db      	lsls	r3, r3, #31
 800a244:	d506      	bpl.n	800a254 <__swbuf_r+0x6c>
 800a246:	2e0a      	cmp	r6, #10
 800a248:	d104      	bne.n	800a254 <__swbuf_r+0x6c>
 800a24a:	4621      	mov	r1, r4
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 ff0b 	bl	800b068 <_fflush_r>
 800a252:	b988      	cbnz	r0, 800a278 <__swbuf_r+0x90>
 800a254:	4638      	mov	r0, r7
 800a256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a258:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <__swbuf_r+0x9c>)
 800a25a:	429c      	cmp	r4, r3
 800a25c:	d101      	bne.n	800a262 <__swbuf_r+0x7a>
 800a25e:	68ac      	ldr	r4, [r5, #8]
 800a260:	e7cf      	b.n	800a202 <__swbuf_r+0x1a>
 800a262:	4b09      	ldr	r3, [pc, #36]	; (800a288 <__swbuf_r+0xa0>)
 800a264:	429c      	cmp	r4, r3
 800a266:	bf08      	it	eq
 800a268:	68ec      	ldreq	r4, [r5, #12]
 800a26a:	e7ca      	b.n	800a202 <__swbuf_r+0x1a>
 800a26c:	4621      	mov	r1, r4
 800a26e:	4628      	mov	r0, r5
 800a270:	f000 f80c 	bl	800a28c <__swsetup_r>
 800a274:	2800      	cmp	r0, #0
 800a276:	d0cb      	beq.n	800a210 <__swbuf_r+0x28>
 800a278:	f04f 37ff 	mov.w	r7, #4294967295
 800a27c:	e7ea      	b.n	800a254 <__swbuf_r+0x6c>
 800a27e:	bf00      	nop
 800a280:	0800c6f4 	.word	0x0800c6f4
 800a284:	0800c714 	.word	0x0800c714
 800a288:	0800c6d4 	.word	0x0800c6d4

0800a28c <__swsetup_r>:
 800a28c:	4b32      	ldr	r3, [pc, #200]	; (800a358 <__swsetup_r+0xcc>)
 800a28e:	b570      	push	{r4, r5, r6, lr}
 800a290:	681d      	ldr	r5, [r3, #0]
 800a292:	4606      	mov	r6, r0
 800a294:	460c      	mov	r4, r1
 800a296:	b125      	cbz	r5, 800a2a2 <__swsetup_r+0x16>
 800a298:	69ab      	ldr	r3, [r5, #24]
 800a29a:	b913      	cbnz	r3, 800a2a2 <__swsetup_r+0x16>
 800a29c:	4628      	mov	r0, r5
 800a29e:	f000 ff77 	bl	800b190 <__sinit>
 800a2a2:	4b2e      	ldr	r3, [pc, #184]	; (800a35c <__swsetup_r+0xd0>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	d10f      	bne.n	800a2c8 <__swsetup_r+0x3c>
 800a2a8:	686c      	ldr	r4, [r5, #4]
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2b0:	0719      	lsls	r1, r3, #28
 800a2b2:	d42c      	bmi.n	800a30e <__swsetup_r+0x82>
 800a2b4:	06dd      	lsls	r5, r3, #27
 800a2b6:	d411      	bmi.n	800a2dc <__swsetup_r+0x50>
 800a2b8:	2309      	movs	r3, #9
 800a2ba:	6033      	str	r3, [r6, #0]
 800a2bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2c0:	81a3      	strh	r3, [r4, #12]
 800a2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c6:	e03e      	b.n	800a346 <__swsetup_r+0xba>
 800a2c8:	4b25      	ldr	r3, [pc, #148]	; (800a360 <__swsetup_r+0xd4>)
 800a2ca:	429c      	cmp	r4, r3
 800a2cc:	d101      	bne.n	800a2d2 <__swsetup_r+0x46>
 800a2ce:	68ac      	ldr	r4, [r5, #8]
 800a2d0:	e7eb      	b.n	800a2aa <__swsetup_r+0x1e>
 800a2d2:	4b24      	ldr	r3, [pc, #144]	; (800a364 <__swsetup_r+0xd8>)
 800a2d4:	429c      	cmp	r4, r3
 800a2d6:	bf08      	it	eq
 800a2d8:	68ec      	ldreq	r4, [r5, #12]
 800a2da:	e7e6      	b.n	800a2aa <__swsetup_r+0x1e>
 800a2dc:	0758      	lsls	r0, r3, #29
 800a2de:	d512      	bpl.n	800a306 <__swsetup_r+0x7a>
 800a2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2e2:	b141      	cbz	r1, 800a2f6 <__swsetup_r+0x6a>
 800a2e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2e8:	4299      	cmp	r1, r3
 800a2ea:	d002      	beq.n	800a2f2 <__swsetup_r+0x66>
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f001 fbfb 	bl	800bae8 <_free_r>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	2300      	movs	r3, #0
 800a300:	6063      	str	r3, [r4, #4]
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	f043 0308 	orr.w	r3, r3, #8
 800a30c:	81a3      	strh	r3, [r4, #12]
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	b94b      	cbnz	r3, 800a326 <__swsetup_r+0x9a>
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a31c:	d003      	beq.n	800a326 <__swsetup_r+0x9a>
 800a31e:	4621      	mov	r1, r4
 800a320:	4630      	mov	r0, r6
 800a322:	f000 ffff 	bl	800b324 <__smakebuf_r>
 800a326:	89a0      	ldrh	r0, [r4, #12]
 800a328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a32c:	f010 0301 	ands.w	r3, r0, #1
 800a330:	d00a      	beq.n	800a348 <__swsetup_r+0xbc>
 800a332:	2300      	movs	r3, #0
 800a334:	60a3      	str	r3, [r4, #8]
 800a336:	6963      	ldr	r3, [r4, #20]
 800a338:	425b      	negs	r3, r3
 800a33a:	61a3      	str	r3, [r4, #24]
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	b943      	cbnz	r3, 800a352 <__swsetup_r+0xc6>
 800a340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a344:	d1ba      	bne.n	800a2bc <__swsetup_r+0x30>
 800a346:	bd70      	pop	{r4, r5, r6, pc}
 800a348:	0781      	lsls	r1, r0, #30
 800a34a:	bf58      	it	pl
 800a34c:	6963      	ldrpl	r3, [r4, #20]
 800a34e:	60a3      	str	r3, [r4, #8]
 800a350:	e7f4      	b.n	800a33c <__swsetup_r+0xb0>
 800a352:	2000      	movs	r0, #0
 800a354:	e7f7      	b.n	800a346 <__swsetup_r+0xba>
 800a356:	bf00      	nop
 800a358:	2000003c 	.word	0x2000003c
 800a35c:	0800c6f4 	.word	0x0800c6f4
 800a360:	0800c714 	.word	0x0800c714
 800a364:	0800c6d4 	.word	0x0800c6d4

0800a368 <quorem>:
 800a368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	6903      	ldr	r3, [r0, #16]
 800a36e:	690c      	ldr	r4, [r1, #16]
 800a370:	42a3      	cmp	r3, r4
 800a372:	4607      	mov	r7, r0
 800a374:	f2c0 8081 	blt.w	800a47a <quorem+0x112>
 800a378:	3c01      	subs	r4, #1
 800a37a:	f101 0814 	add.w	r8, r1, #20
 800a37e:	f100 0514 	add.w	r5, r0, #20
 800a382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a38c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a390:	3301      	adds	r3, #1
 800a392:	429a      	cmp	r2, r3
 800a394:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a398:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a39c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3a0:	d331      	bcc.n	800a406 <quorem+0x9e>
 800a3a2:	f04f 0e00 	mov.w	lr, #0
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	46ac      	mov	ip, r5
 800a3aa:	46f2      	mov	sl, lr
 800a3ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3b0:	b293      	uxth	r3, r2
 800a3b2:	fb06 e303 	mla	r3, r6, r3, lr
 800a3b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a3c0:	f8dc a000 	ldr.w	sl, [ip]
 800a3c4:	0c12      	lsrs	r2, r2, #16
 800a3c6:	fa13 f38a 	uxtah	r3, r3, sl
 800a3ca:	fb06 e202 	mla	r2, r6, r2, lr
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	9b00      	ldr	r3, [sp, #0]
 800a3d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3d6:	b292      	uxth	r2, r2
 800a3d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a3dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a3e4:	4581      	cmp	r9, r0
 800a3e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ea:	f84c 3b04 	str.w	r3, [ip], #4
 800a3ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3f2:	d2db      	bcs.n	800a3ac <quorem+0x44>
 800a3f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3f8:	b92b      	cbnz	r3, 800a406 <quorem+0x9e>
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	3b04      	subs	r3, #4
 800a3fe:	429d      	cmp	r5, r3
 800a400:	461a      	mov	r2, r3
 800a402:	d32e      	bcc.n	800a462 <quorem+0xfa>
 800a404:	613c      	str	r4, [r7, #16]
 800a406:	4638      	mov	r0, r7
 800a408:	f001 fa56 	bl	800b8b8 <__mcmp>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	db24      	blt.n	800a45a <quorem+0xf2>
 800a410:	3601      	adds	r6, #1
 800a412:	4628      	mov	r0, r5
 800a414:	f04f 0c00 	mov.w	ip, #0
 800a418:	f858 2b04 	ldr.w	r2, [r8], #4
 800a41c:	f8d0 e000 	ldr.w	lr, [r0]
 800a420:	b293      	uxth	r3, r2
 800a422:	ebac 0303 	sub.w	r3, ip, r3
 800a426:	0c12      	lsrs	r2, r2, #16
 800a428:	fa13 f38e 	uxtah	r3, r3, lr
 800a42c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a434:	b29b      	uxth	r3, r3
 800a436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a43a:	45c1      	cmp	r9, r8
 800a43c:	f840 3b04 	str.w	r3, [r0], #4
 800a440:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a444:	d2e8      	bcs.n	800a418 <quorem+0xb0>
 800a446:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a44a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a44e:	b922      	cbnz	r2, 800a45a <quorem+0xf2>
 800a450:	3b04      	subs	r3, #4
 800a452:	429d      	cmp	r5, r3
 800a454:	461a      	mov	r2, r3
 800a456:	d30a      	bcc.n	800a46e <quorem+0x106>
 800a458:	613c      	str	r4, [r7, #16]
 800a45a:	4630      	mov	r0, r6
 800a45c:	b003      	add	sp, #12
 800a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	3b04      	subs	r3, #4
 800a466:	2a00      	cmp	r2, #0
 800a468:	d1cc      	bne.n	800a404 <quorem+0x9c>
 800a46a:	3c01      	subs	r4, #1
 800a46c:	e7c7      	b.n	800a3fe <quorem+0x96>
 800a46e:	6812      	ldr	r2, [r2, #0]
 800a470:	3b04      	subs	r3, #4
 800a472:	2a00      	cmp	r2, #0
 800a474:	d1f0      	bne.n	800a458 <quorem+0xf0>
 800a476:	3c01      	subs	r4, #1
 800a478:	e7eb      	b.n	800a452 <quorem+0xea>
 800a47a:	2000      	movs	r0, #0
 800a47c:	e7ee      	b.n	800a45c <quorem+0xf4>
	...

0800a480 <_dtoa_r>:
 800a480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a484:	ed2d 8b02 	vpush	{d8}
 800a488:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a48a:	b091      	sub	sp, #68	; 0x44
 800a48c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a490:	ec59 8b10 	vmov	r8, r9, d0
 800a494:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a496:	9106      	str	r1, [sp, #24]
 800a498:	4606      	mov	r6, r0
 800a49a:	9208      	str	r2, [sp, #32]
 800a49c:	930c      	str	r3, [sp, #48]	; 0x30
 800a49e:	b975      	cbnz	r5, 800a4be <_dtoa_r+0x3e>
 800a4a0:	2010      	movs	r0, #16
 800a4a2:	f000 ff7f 	bl	800b3a4 <malloc>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	6270      	str	r0, [r6, #36]	; 0x24
 800a4aa:	b920      	cbnz	r0, 800a4b6 <_dtoa_r+0x36>
 800a4ac:	4baa      	ldr	r3, [pc, #680]	; (800a758 <_dtoa_r+0x2d8>)
 800a4ae:	21ea      	movs	r1, #234	; 0xea
 800a4b0:	48aa      	ldr	r0, [pc, #680]	; (800a75c <_dtoa_r+0x2dc>)
 800a4b2:	f001 fdb9 	bl	800c028 <__assert_func>
 800a4b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4ba:	6005      	str	r5, [r0, #0]
 800a4bc:	60c5      	str	r5, [r0, #12]
 800a4be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4c0:	6819      	ldr	r1, [r3, #0]
 800a4c2:	b151      	cbz	r1, 800a4da <_dtoa_r+0x5a>
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	604a      	str	r2, [r1, #4]
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	4093      	lsls	r3, r2
 800a4cc:	608b      	str	r3, [r1, #8]
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f000 ffb0 	bl	800b434 <_Bfree>
 800a4d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	f1b9 0300 	subs.w	r3, r9, #0
 800a4de:	bfbb      	ittet	lt
 800a4e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4e4:	9303      	strlt	r3, [sp, #12]
 800a4e6:	2300      	movge	r3, #0
 800a4e8:	2201      	movlt	r2, #1
 800a4ea:	bfac      	ite	ge
 800a4ec:	6023      	strge	r3, [r4, #0]
 800a4ee:	6022      	strlt	r2, [r4, #0]
 800a4f0:	4b9b      	ldr	r3, [pc, #620]	; (800a760 <_dtoa_r+0x2e0>)
 800a4f2:	9c03      	ldr	r4, [sp, #12]
 800a4f4:	43a3      	bics	r3, r4
 800a4f6:	d11c      	bne.n	800a532 <_dtoa_r+0xb2>
 800a4f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a504:	ea53 0308 	orrs.w	r3, r3, r8
 800a508:	f000 84fd 	beq.w	800af06 <_dtoa_r+0xa86>
 800a50c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a50e:	b963      	cbnz	r3, 800a52a <_dtoa_r+0xaa>
 800a510:	4b94      	ldr	r3, [pc, #592]	; (800a764 <_dtoa_r+0x2e4>)
 800a512:	e01f      	b.n	800a554 <_dtoa_r+0xd4>
 800a514:	4b94      	ldr	r3, [pc, #592]	; (800a768 <_dtoa_r+0x2e8>)
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	3308      	adds	r3, #8
 800a51a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	9801      	ldr	r0, [sp, #4]
 800a520:	b011      	add	sp, #68	; 0x44
 800a522:	ecbd 8b02 	vpop	{d8}
 800a526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52a:	4b8e      	ldr	r3, [pc, #568]	; (800a764 <_dtoa_r+0x2e4>)
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	3303      	adds	r3, #3
 800a530:	e7f3      	b.n	800a51a <_dtoa_r+0x9a>
 800a532:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a536:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a53e:	d10b      	bne.n	800a558 <_dtoa_r+0xd8>
 800a540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a542:	2301      	movs	r3, #1
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 84d9 	beq.w	800af00 <_dtoa_r+0xa80>
 800a54e:	4887      	ldr	r0, [pc, #540]	; (800a76c <_dtoa_r+0x2ec>)
 800a550:	6018      	str	r0, [r3, #0]
 800a552:	1e43      	subs	r3, r0, #1
 800a554:	9301      	str	r3, [sp, #4]
 800a556:	e7e2      	b.n	800a51e <_dtoa_r+0x9e>
 800a558:	a90f      	add	r1, sp, #60	; 0x3c
 800a55a:	aa0e      	add	r2, sp, #56	; 0x38
 800a55c:	4630      	mov	r0, r6
 800a55e:	eeb0 0b48 	vmov.f64	d0, d8
 800a562:	f001 fa4f 	bl	800ba04 <__d2b>
 800a566:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a56a:	4605      	mov	r5, r0
 800a56c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a56e:	2900      	cmp	r1, #0
 800a570:	d046      	beq.n	800a600 <_dtoa_r+0x180>
 800a572:	ee18 4a90 	vmov	r4, s17
 800a576:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a57a:	ec53 2b18 	vmov	r2, r3, d8
 800a57e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a582:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a586:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a58a:	2400      	movs	r4, #0
 800a58c:	ec43 2b16 	vmov	d6, r2, r3
 800a590:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a594:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a740 <_dtoa_r+0x2c0>
 800a598:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a59c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a748 <_dtoa_r+0x2c8>
 800a5a0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a5a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a750 <_dtoa_r+0x2d0>
 800a5a8:	ee07 1a90 	vmov	s15, r1
 800a5ac:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a5b0:	eeb0 7b46 	vmov.f64	d7, d6
 800a5b4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a5b8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a5bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c4:	ee16 ba90 	vmov	fp, s13
 800a5c8:	940a      	str	r4, [sp, #40]	; 0x28
 800a5ca:	d508      	bpl.n	800a5de <_dtoa_r+0x15e>
 800a5cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a5d0:	eeb4 6b47 	vcmp.f64	d6, d7
 800a5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d8:	bf18      	it	ne
 800a5da:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a5de:	f1bb 0f16 	cmp.w	fp, #22
 800a5e2:	d82f      	bhi.n	800a644 <_dtoa_r+0x1c4>
 800a5e4:	4b62      	ldr	r3, [pc, #392]	; (800a770 <_dtoa_r+0x2f0>)
 800a5e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5ea:	ed93 7b00 	vldr	d7, [r3]
 800a5ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f6:	d501      	bpl.n	800a5fc <_dtoa_r+0x17c>
 800a5f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e022      	b.n	800a646 <_dtoa_r+0x1c6>
 800a600:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a602:	4401      	add	r1, r0
 800a604:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a608:	2b20      	cmp	r3, #32
 800a60a:	bfc1      	itttt	gt
 800a60c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a610:	fa04 f303 	lslgt.w	r3, r4, r3
 800a614:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a618:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a61c:	bfd6      	itet	le
 800a61e:	f1c3 0320 	rsble	r3, r3, #32
 800a622:	ea43 0808 	orrgt.w	r8, r3, r8
 800a626:	fa08 f803 	lslle.w	r8, r8, r3
 800a62a:	ee07 8a90 	vmov	s15, r8
 800a62e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a632:	3901      	subs	r1, #1
 800a634:	ee17 4a90 	vmov	r4, s15
 800a638:	ec53 2b17 	vmov	r2, r3, d7
 800a63c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a640:	2401      	movs	r4, #1
 800a642:	e7a3      	b.n	800a58c <_dtoa_r+0x10c>
 800a644:	2301      	movs	r3, #1
 800a646:	930b      	str	r3, [sp, #44]	; 0x2c
 800a648:	1a43      	subs	r3, r0, r1
 800a64a:	1e5a      	subs	r2, r3, #1
 800a64c:	bf45      	ittet	mi
 800a64e:	f1c3 0301 	rsbmi	r3, r3, #1
 800a652:	9304      	strmi	r3, [sp, #16]
 800a654:	2300      	movpl	r3, #0
 800a656:	2300      	movmi	r3, #0
 800a658:	9205      	str	r2, [sp, #20]
 800a65a:	bf54      	ite	pl
 800a65c:	9304      	strpl	r3, [sp, #16]
 800a65e:	9305      	strmi	r3, [sp, #20]
 800a660:	f1bb 0f00 	cmp.w	fp, #0
 800a664:	db18      	blt.n	800a698 <_dtoa_r+0x218>
 800a666:	9b05      	ldr	r3, [sp, #20]
 800a668:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a66c:	445b      	add	r3, fp
 800a66e:	9305      	str	r3, [sp, #20]
 800a670:	2300      	movs	r3, #0
 800a672:	9a06      	ldr	r2, [sp, #24]
 800a674:	2a09      	cmp	r2, #9
 800a676:	d849      	bhi.n	800a70c <_dtoa_r+0x28c>
 800a678:	2a05      	cmp	r2, #5
 800a67a:	bfc4      	itt	gt
 800a67c:	3a04      	subgt	r2, #4
 800a67e:	9206      	strgt	r2, [sp, #24]
 800a680:	9a06      	ldr	r2, [sp, #24]
 800a682:	f1a2 0202 	sub.w	r2, r2, #2
 800a686:	bfcc      	ite	gt
 800a688:	2400      	movgt	r4, #0
 800a68a:	2401      	movle	r4, #1
 800a68c:	2a03      	cmp	r2, #3
 800a68e:	d848      	bhi.n	800a722 <_dtoa_r+0x2a2>
 800a690:	e8df f002 	tbb	[pc, r2]
 800a694:	3a2c2e0b 	.word	0x3a2c2e0b
 800a698:	9b04      	ldr	r3, [sp, #16]
 800a69a:	2200      	movs	r2, #0
 800a69c:	eba3 030b 	sub.w	r3, r3, fp
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a4:	f1cb 0300 	rsb	r3, fp, #0
 800a6a8:	e7e3      	b.n	800a672 <_dtoa_r+0x1f2>
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	9207      	str	r2, [sp, #28]
 800a6ae:	9a08      	ldr	r2, [sp, #32]
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	dc39      	bgt.n	800a728 <_dtoa_r+0x2a8>
 800a6b4:	f04f 0a01 	mov.w	sl, #1
 800a6b8:	46d1      	mov	r9, sl
 800a6ba:	4652      	mov	r2, sl
 800a6bc:	f8cd a020 	str.w	sl, [sp, #32]
 800a6c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6079      	str	r1, [r7, #4]
 800a6c6:	2004      	movs	r0, #4
 800a6c8:	f100 0c14 	add.w	ip, r0, #20
 800a6cc:	4594      	cmp	ip, r2
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	d92f      	bls.n	800a732 <_dtoa_r+0x2b2>
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	930d      	str	r3, [sp, #52]	; 0x34
 800a6d6:	f000 fe6d 	bl	800b3b4 <_Balloc>
 800a6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6dc:	9001      	str	r0, [sp, #4]
 800a6de:	4602      	mov	r2, r0
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d149      	bne.n	800a778 <_dtoa_r+0x2f8>
 800a6e4:	4b23      	ldr	r3, [pc, #140]	; (800a774 <_dtoa_r+0x2f4>)
 800a6e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6ea:	e6e1      	b.n	800a4b0 <_dtoa_r+0x30>
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	e7dd      	b.n	800a6ac <_dtoa_r+0x22c>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	9207      	str	r2, [sp, #28]
 800a6f4:	9a08      	ldr	r2, [sp, #32]
 800a6f6:	eb0b 0a02 	add.w	sl, fp, r2
 800a6fa:	f10a 0901 	add.w	r9, sl, #1
 800a6fe:	464a      	mov	r2, r9
 800a700:	2a01      	cmp	r2, #1
 800a702:	bfb8      	it	lt
 800a704:	2201      	movlt	r2, #1
 800a706:	e7db      	b.n	800a6c0 <_dtoa_r+0x240>
 800a708:	2201      	movs	r2, #1
 800a70a:	e7f2      	b.n	800a6f2 <_dtoa_r+0x272>
 800a70c:	2401      	movs	r4, #1
 800a70e:	2200      	movs	r2, #0
 800a710:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a714:	f04f 3aff 	mov.w	sl, #4294967295
 800a718:	2100      	movs	r1, #0
 800a71a:	46d1      	mov	r9, sl
 800a71c:	2212      	movs	r2, #18
 800a71e:	9108      	str	r1, [sp, #32]
 800a720:	e7ce      	b.n	800a6c0 <_dtoa_r+0x240>
 800a722:	2201      	movs	r2, #1
 800a724:	9207      	str	r2, [sp, #28]
 800a726:	e7f5      	b.n	800a714 <_dtoa_r+0x294>
 800a728:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a72c:	46d1      	mov	r9, sl
 800a72e:	4652      	mov	r2, sl
 800a730:	e7c6      	b.n	800a6c0 <_dtoa_r+0x240>
 800a732:	3101      	adds	r1, #1
 800a734:	6079      	str	r1, [r7, #4]
 800a736:	0040      	lsls	r0, r0, #1
 800a738:	e7c6      	b.n	800a6c8 <_dtoa_r+0x248>
 800a73a:	bf00      	nop
 800a73c:	f3af 8000 	nop.w
 800a740:	636f4361 	.word	0x636f4361
 800a744:	3fd287a7 	.word	0x3fd287a7
 800a748:	8b60c8b3 	.word	0x8b60c8b3
 800a74c:	3fc68a28 	.word	0x3fc68a28
 800a750:	509f79fb 	.word	0x509f79fb
 800a754:	3fd34413 	.word	0x3fd34413
 800a758:	0800c651 	.word	0x0800c651
 800a75c:	0800c668 	.word	0x0800c668
 800a760:	7ff00000 	.word	0x7ff00000
 800a764:	0800c64d 	.word	0x0800c64d
 800a768:	0800c644 	.word	0x0800c644
 800a76c:	0800c621 	.word	0x0800c621
 800a770:	0800c7b8 	.word	0x0800c7b8
 800a774:	0800c6c3 	.word	0x0800c6c3
 800a778:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a77a:	9901      	ldr	r1, [sp, #4]
 800a77c:	6011      	str	r1, [r2, #0]
 800a77e:	f1b9 0f0e 	cmp.w	r9, #14
 800a782:	d86c      	bhi.n	800a85e <_dtoa_r+0x3de>
 800a784:	2c00      	cmp	r4, #0
 800a786:	d06a      	beq.n	800a85e <_dtoa_r+0x3de>
 800a788:	f1bb 0f00 	cmp.w	fp, #0
 800a78c:	f340 80a0 	ble.w	800a8d0 <_dtoa_r+0x450>
 800a790:	49c1      	ldr	r1, [pc, #772]	; (800aa98 <_dtoa_r+0x618>)
 800a792:	f00b 020f 	and.w	r2, fp, #15
 800a796:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a79a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a79e:	ed92 7b00 	vldr	d7, [r2]
 800a7a2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a7a6:	f000 8087 	beq.w	800a8b8 <_dtoa_r+0x438>
 800a7aa:	4abc      	ldr	r2, [pc, #752]	; (800aa9c <_dtoa_r+0x61c>)
 800a7ac:	ed92 6b08 	vldr	d6, [r2, #32]
 800a7b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a7b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a7b8:	f001 010f 	and.w	r1, r1, #15
 800a7bc:	2203      	movs	r2, #3
 800a7be:	48b7      	ldr	r0, [pc, #732]	; (800aa9c <_dtoa_r+0x61c>)
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	d17b      	bne.n	800a8bc <_dtoa_r+0x43c>
 800a7c4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a7c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a7cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a7d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	f000 80a2 	beq.w	800a91c <_dtoa_r+0x49c>
 800a7d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a7dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e8:	f140 8098 	bpl.w	800a91c <_dtoa_r+0x49c>
 800a7ec:	f1b9 0f00 	cmp.w	r9, #0
 800a7f0:	f000 8094 	beq.w	800a91c <_dtoa_r+0x49c>
 800a7f4:	f1ba 0f00 	cmp.w	sl, #0
 800a7f8:	dd2f      	ble.n	800a85a <_dtoa_r+0x3da>
 800a7fa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a7fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a802:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a806:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a80a:	3201      	adds	r2, #1
 800a80c:	4650      	mov	r0, sl
 800a80e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a812:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a816:	ee07 2a90 	vmov	s15, r2
 800a81a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a81e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a822:	ee15 4a90 	vmov	r4, s11
 800a826:	ec52 1b15 	vmov	r1, r2, d5
 800a82a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a82e:	2800      	cmp	r0, #0
 800a830:	d177      	bne.n	800a922 <_dtoa_r+0x4a2>
 800a832:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a836:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a83a:	ec42 1b17 	vmov	d7, r1, r2
 800a83e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a846:	f300 8263 	bgt.w	800ad10 <_dtoa_r+0x890>
 800a84a:	eeb1 7b47 	vneg.f64	d7, d7
 800a84e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a856:	f100 8258 	bmi.w	800ad0a <_dtoa_r+0x88a>
 800a85a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a85e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a860:	2a00      	cmp	r2, #0
 800a862:	f2c0 811d 	blt.w	800aaa0 <_dtoa_r+0x620>
 800a866:	f1bb 0f0e 	cmp.w	fp, #14
 800a86a:	f300 8119 	bgt.w	800aaa0 <_dtoa_r+0x620>
 800a86e:	4b8a      	ldr	r3, [pc, #552]	; (800aa98 <_dtoa_r+0x618>)
 800a870:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a874:	ed93 6b00 	vldr	d6, [r3]
 800a878:	9b08      	ldr	r3, [sp, #32]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f280 80b7 	bge.w	800a9ee <_dtoa_r+0x56e>
 800a880:	f1b9 0f00 	cmp.w	r9, #0
 800a884:	f300 80b3 	bgt.w	800a9ee <_dtoa_r+0x56e>
 800a888:	f040 823f 	bne.w	800ad0a <_dtoa_r+0x88a>
 800a88c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a890:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a894:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a898:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a0:	464c      	mov	r4, r9
 800a8a2:	464f      	mov	r7, r9
 800a8a4:	f280 8215 	bge.w	800acd2 <_dtoa_r+0x852>
 800a8a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8ac:	2331      	movs	r3, #49	; 0x31
 800a8ae:	f808 3b01 	strb.w	r3, [r8], #1
 800a8b2:	f10b 0b01 	add.w	fp, fp, #1
 800a8b6:	e211      	b.n	800acdc <_dtoa_r+0x85c>
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	e780      	b.n	800a7be <_dtoa_r+0x33e>
 800a8bc:	07cc      	lsls	r4, r1, #31
 800a8be:	d504      	bpl.n	800a8ca <_dtoa_r+0x44a>
 800a8c0:	ed90 6b00 	vldr	d6, [r0]
 800a8c4:	3201      	adds	r2, #1
 800a8c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8ca:	1049      	asrs	r1, r1, #1
 800a8cc:	3008      	adds	r0, #8
 800a8ce:	e777      	b.n	800a7c0 <_dtoa_r+0x340>
 800a8d0:	d022      	beq.n	800a918 <_dtoa_r+0x498>
 800a8d2:	f1cb 0100 	rsb	r1, fp, #0
 800a8d6:	4a70      	ldr	r2, [pc, #448]	; (800aa98 <_dtoa_r+0x618>)
 800a8d8:	f001 000f 	and.w	r0, r1, #15
 800a8dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a8e0:	ed92 7b00 	vldr	d7, [r2]
 800a8e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a8e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8ec:	486b      	ldr	r0, [pc, #428]	; (800aa9c <_dtoa_r+0x61c>)
 800a8ee:	1109      	asrs	r1, r1, #4
 800a8f0:	2400      	movs	r4, #0
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	b929      	cbnz	r1, 800a902 <_dtoa_r+0x482>
 800a8f6:	2c00      	cmp	r4, #0
 800a8f8:	f43f af6a 	beq.w	800a7d0 <_dtoa_r+0x350>
 800a8fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a900:	e766      	b.n	800a7d0 <_dtoa_r+0x350>
 800a902:	07cf      	lsls	r7, r1, #31
 800a904:	d505      	bpl.n	800a912 <_dtoa_r+0x492>
 800a906:	ed90 6b00 	vldr	d6, [r0]
 800a90a:	3201      	adds	r2, #1
 800a90c:	2401      	movs	r4, #1
 800a90e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a912:	1049      	asrs	r1, r1, #1
 800a914:	3008      	adds	r0, #8
 800a916:	e7ed      	b.n	800a8f4 <_dtoa_r+0x474>
 800a918:	2202      	movs	r2, #2
 800a91a:	e759      	b.n	800a7d0 <_dtoa_r+0x350>
 800a91c:	465f      	mov	r7, fp
 800a91e:	4648      	mov	r0, r9
 800a920:	e775      	b.n	800a80e <_dtoa_r+0x38e>
 800a922:	ec42 1b17 	vmov	d7, r1, r2
 800a926:	4a5c      	ldr	r2, [pc, #368]	; (800aa98 <_dtoa_r+0x618>)
 800a928:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a92c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a930:	9a01      	ldr	r2, [sp, #4]
 800a932:	1814      	adds	r4, r2, r0
 800a934:	9a07      	ldr	r2, [sp, #28]
 800a936:	b352      	cbz	r2, 800a98e <_dtoa_r+0x50e>
 800a938:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a93c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a940:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a944:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a948:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a94c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a950:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a954:	ee14 2a90 	vmov	r2, s9
 800a958:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a95c:	3230      	adds	r2, #48	; 0x30
 800a95e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a962:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a96a:	f808 2b01 	strb.w	r2, [r8], #1
 800a96e:	d439      	bmi.n	800a9e4 <_dtoa_r+0x564>
 800a970:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a974:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a97c:	d472      	bmi.n	800aa64 <_dtoa_r+0x5e4>
 800a97e:	45a0      	cmp	r8, r4
 800a980:	f43f af6b 	beq.w	800a85a <_dtoa_r+0x3da>
 800a984:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a988:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a98c:	e7e0      	b.n	800a950 <_dtoa_r+0x4d0>
 800a98e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a992:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a996:	4621      	mov	r1, r4
 800a998:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a99c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a9a0:	ee14 2a90 	vmov	r2, s9
 800a9a4:	3230      	adds	r2, #48	; 0x30
 800a9a6:	f808 2b01 	strb.w	r2, [r8], #1
 800a9aa:	45a0      	cmp	r8, r4
 800a9ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a9b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a9b4:	d118      	bne.n	800a9e8 <_dtoa_r+0x568>
 800a9b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a9ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a9be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c6:	dc4d      	bgt.n	800aa64 <_dtoa_r+0x5e4>
 800a9c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a9cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d4:	f57f af41 	bpl.w	800a85a <_dtoa_r+0x3da>
 800a9d8:	4688      	mov	r8, r1
 800a9da:	3901      	subs	r1, #1
 800a9dc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a9e0:	2b30      	cmp	r3, #48	; 0x30
 800a9e2:	d0f9      	beq.n	800a9d8 <_dtoa_r+0x558>
 800a9e4:	46bb      	mov	fp, r7
 800a9e6:	e02a      	b.n	800aa3e <_dtoa_r+0x5be>
 800a9e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a9ec:	e7d6      	b.n	800a99c <_dtoa_r+0x51c>
 800a9ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9f2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a9f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9fa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a9fe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aa02:	ee15 3a10 	vmov	r3, s10
 800aa06:	3330      	adds	r3, #48	; 0x30
 800aa08:	f808 3b01 	strb.w	r3, [r8], #1
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	eba8 0303 	sub.w	r3, r8, r3
 800aa12:	4599      	cmp	r9, r3
 800aa14:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aa18:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aa1c:	d133      	bne.n	800aa86 <_dtoa_r+0x606>
 800aa1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aa22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2a:	dc1a      	bgt.n	800aa62 <_dtoa_r+0x5e2>
 800aa2c:	eeb4 7b46 	vcmp.f64	d7, d6
 800aa30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa34:	d103      	bne.n	800aa3e <_dtoa_r+0x5be>
 800aa36:	ee15 3a10 	vmov	r3, s10
 800aa3a:	07d9      	lsls	r1, r3, #31
 800aa3c:	d411      	bmi.n	800aa62 <_dtoa_r+0x5e2>
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4630      	mov	r0, r6
 800aa42:	f000 fcf7 	bl	800b434 <_Bfree>
 800aa46:	2300      	movs	r3, #0
 800aa48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa4a:	f888 3000 	strb.w	r3, [r8]
 800aa4e:	f10b 0301 	add.w	r3, fp, #1
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f43f ad61 	beq.w	800a51e <_dtoa_r+0x9e>
 800aa5c:	f8c3 8000 	str.w	r8, [r3]
 800aa60:	e55d      	b.n	800a51e <_dtoa_r+0x9e>
 800aa62:	465f      	mov	r7, fp
 800aa64:	4643      	mov	r3, r8
 800aa66:	4698      	mov	r8, r3
 800aa68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa6c:	2a39      	cmp	r2, #57	; 0x39
 800aa6e:	d106      	bne.n	800aa7e <_dtoa_r+0x5fe>
 800aa70:	9a01      	ldr	r2, [sp, #4]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d1f7      	bne.n	800aa66 <_dtoa_r+0x5e6>
 800aa76:	9901      	ldr	r1, [sp, #4]
 800aa78:	2230      	movs	r2, #48	; 0x30
 800aa7a:	3701      	adds	r7, #1
 800aa7c:	700a      	strb	r2, [r1, #0]
 800aa7e:	781a      	ldrb	r2, [r3, #0]
 800aa80:	3201      	adds	r2, #1
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	e7ae      	b.n	800a9e4 <_dtoa_r+0x564>
 800aa86:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa92:	d1b2      	bne.n	800a9fa <_dtoa_r+0x57a>
 800aa94:	e7d3      	b.n	800aa3e <_dtoa_r+0x5be>
 800aa96:	bf00      	nop
 800aa98:	0800c7b8 	.word	0x0800c7b8
 800aa9c:	0800c790 	.word	0x0800c790
 800aaa0:	9907      	ldr	r1, [sp, #28]
 800aaa2:	2900      	cmp	r1, #0
 800aaa4:	f000 80d0 	beq.w	800ac48 <_dtoa_r+0x7c8>
 800aaa8:	9906      	ldr	r1, [sp, #24]
 800aaaa:	2901      	cmp	r1, #1
 800aaac:	f300 80b4 	bgt.w	800ac18 <_dtoa_r+0x798>
 800aab0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aab2:	2900      	cmp	r1, #0
 800aab4:	f000 80ac 	beq.w	800ac10 <_dtoa_r+0x790>
 800aab8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aabc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aac0:	461c      	mov	r4, r3
 800aac2:	930a      	str	r3, [sp, #40]	; 0x28
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	4413      	add	r3, r2
 800aac8:	9304      	str	r3, [sp, #16]
 800aaca:	9b05      	ldr	r3, [sp, #20]
 800aacc:	2101      	movs	r1, #1
 800aace:	4413      	add	r3, r2
 800aad0:	4630      	mov	r0, r6
 800aad2:	9305      	str	r3, [sp, #20]
 800aad4:	f000 fd66 	bl	800b5a4 <__i2b>
 800aad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aada:	4607      	mov	r7, r0
 800aadc:	f1b8 0f00 	cmp.w	r8, #0
 800aae0:	dd0d      	ble.n	800aafe <_dtoa_r+0x67e>
 800aae2:	9a05      	ldr	r2, [sp, #20]
 800aae4:	2a00      	cmp	r2, #0
 800aae6:	dd0a      	ble.n	800aafe <_dtoa_r+0x67e>
 800aae8:	4542      	cmp	r2, r8
 800aaea:	9904      	ldr	r1, [sp, #16]
 800aaec:	bfa8      	it	ge
 800aaee:	4642      	movge	r2, r8
 800aaf0:	1a89      	subs	r1, r1, r2
 800aaf2:	9104      	str	r1, [sp, #16]
 800aaf4:	9905      	ldr	r1, [sp, #20]
 800aaf6:	eba8 0802 	sub.w	r8, r8, r2
 800aafa:	1a8a      	subs	r2, r1, r2
 800aafc:	9205      	str	r2, [sp, #20]
 800aafe:	b303      	cbz	r3, 800ab42 <_dtoa_r+0x6c2>
 800ab00:	9a07      	ldr	r2, [sp, #28]
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	f000 80a5 	beq.w	800ac52 <_dtoa_r+0x7d2>
 800ab08:	2c00      	cmp	r4, #0
 800ab0a:	dd13      	ble.n	800ab34 <_dtoa_r+0x6b4>
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	4622      	mov	r2, r4
 800ab10:	4630      	mov	r0, r6
 800ab12:	930d      	str	r3, [sp, #52]	; 0x34
 800ab14:	f000 fe06 	bl	800b724 <__pow5mult>
 800ab18:	462a      	mov	r2, r5
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f000 fd56 	bl	800b5d0 <__multiply>
 800ab24:	4629      	mov	r1, r5
 800ab26:	900a      	str	r0, [sp, #40]	; 0x28
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f000 fc83 	bl	800b434 <_Bfree>
 800ab2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab32:	4615      	mov	r5, r2
 800ab34:	1b1a      	subs	r2, r3, r4
 800ab36:	d004      	beq.n	800ab42 <_dtoa_r+0x6c2>
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f000 fdf2 	bl	800b724 <__pow5mult>
 800ab40:	4605      	mov	r5, r0
 800ab42:	2101      	movs	r1, #1
 800ab44:	4630      	mov	r0, r6
 800ab46:	f000 fd2d 	bl	800b5a4 <__i2b>
 800ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	f340 8081 	ble.w	800ac56 <_dtoa_r+0x7d6>
 800ab54:	461a      	mov	r2, r3
 800ab56:	4601      	mov	r1, r0
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f000 fde3 	bl	800b724 <__pow5mult>
 800ab5e:	9b06      	ldr	r3, [sp, #24]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	4604      	mov	r4, r0
 800ab64:	dd7a      	ble.n	800ac5c <_dtoa_r+0x7dc>
 800ab66:	2300      	movs	r3, #0
 800ab68:	930a      	str	r3, [sp, #40]	; 0x28
 800ab6a:	6922      	ldr	r2, [r4, #16]
 800ab6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ab70:	6910      	ldr	r0, [r2, #16]
 800ab72:	f000 fcc7 	bl	800b504 <__hi0bits>
 800ab76:	f1c0 0020 	rsb	r0, r0, #32
 800ab7a:	9b05      	ldr	r3, [sp, #20]
 800ab7c:	4418      	add	r0, r3
 800ab7e:	f010 001f 	ands.w	r0, r0, #31
 800ab82:	f000 808c 	beq.w	800ac9e <_dtoa_r+0x81e>
 800ab86:	f1c0 0220 	rsb	r2, r0, #32
 800ab8a:	2a04      	cmp	r2, #4
 800ab8c:	f340 8085 	ble.w	800ac9a <_dtoa_r+0x81a>
 800ab90:	f1c0 001c 	rsb	r0, r0, #28
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	4403      	add	r3, r0
 800ab98:	9304      	str	r3, [sp, #16]
 800ab9a:	9b05      	ldr	r3, [sp, #20]
 800ab9c:	4403      	add	r3, r0
 800ab9e:	4480      	add	r8, r0
 800aba0:	9305      	str	r3, [sp, #20]
 800aba2:	9b04      	ldr	r3, [sp, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	dd05      	ble.n	800abb4 <_dtoa_r+0x734>
 800aba8:	4629      	mov	r1, r5
 800abaa:	461a      	mov	r2, r3
 800abac:	4630      	mov	r0, r6
 800abae:	f000 fe13 	bl	800b7d8 <__lshift>
 800abb2:	4605      	mov	r5, r0
 800abb4:	9b05      	ldr	r3, [sp, #20]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	dd05      	ble.n	800abc6 <_dtoa_r+0x746>
 800abba:	4621      	mov	r1, r4
 800abbc:	461a      	mov	r2, r3
 800abbe:	4630      	mov	r0, r6
 800abc0:	f000 fe0a 	bl	800b7d8 <__lshift>
 800abc4:	4604      	mov	r4, r0
 800abc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d06a      	beq.n	800aca2 <_dtoa_r+0x822>
 800abcc:	4621      	mov	r1, r4
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 fe72 	bl	800b8b8 <__mcmp>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	da64      	bge.n	800aca2 <_dtoa_r+0x822>
 800abd8:	2300      	movs	r3, #0
 800abda:	4629      	mov	r1, r5
 800abdc:	220a      	movs	r2, #10
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 fc4a 	bl	800b478 <__multadd>
 800abe4:	9b07      	ldr	r3, [sp, #28]
 800abe6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abea:	4605      	mov	r5, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 8191 	beq.w	800af14 <_dtoa_r+0xa94>
 800abf2:	4639      	mov	r1, r7
 800abf4:	2300      	movs	r3, #0
 800abf6:	220a      	movs	r2, #10
 800abf8:	4630      	mov	r0, r6
 800abfa:	f000 fc3d 	bl	800b478 <__multadd>
 800abfe:	f1ba 0f00 	cmp.w	sl, #0
 800ac02:	4607      	mov	r7, r0
 800ac04:	f300 808d 	bgt.w	800ad22 <_dtoa_r+0x8a2>
 800ac08:	9b06      	ldr	r3, [sp, #24]
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	dc50      	bgt.n	800acb0 <_dtoa_r+0x830>
 800ac0e:	e088      	b.n	800ad22 <_dtoa_r+0x8a2>
 800ac10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac16:	e751      	b.n	800aabc <_dtoa_r+0x63c>
 800ac18:	f109 34ff 	add.w	r4, r9, #4294967295
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	bfbf      	itttt	lt
 800ac20:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800ac22:	1ae3      	sublt	r3, r4, r3
 800ac24:	18d2      	addlt	r2, r2, r3
 800ac26:	9209      	strlt	r2, [sp, #36]	; 0x24
 800ac28:	bfb6      	itet	lt
 800ac2a:	4623      	movlt	r3, r4
 800ac2c:	1b1c      	subge	r4, r3, r4
 800ac2e:	2400      	movlt	r4, #0
 800ac30:	f1b9 0f00 	cmp.w	r9, #0
 800ac34:	bfb5      	itete	lt
 800ac36:	9a04      	ldrlt	r2, [sp, #16]
 800ac38:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ac3c:	eba2 0809 	sublt.w	r8, r2, r9
 800ac40:	464a      	movge	r2, r9
 800ac42:	bfb8      	it	lt
 800ac44:	2200      	movlt	r2, #0
 800ac46:	e73c      	b.n	800aac2 <_dtoa_r+0x642>
 800ac48:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ac4c:	9f07      	ldr	r7, [sp, #28]
 800ac4e:	461c      	mov	r4, r3
 800ac50:	e744      	b.n	800aadc <_dtoa_r+0x65c>
 800ac52:	461a      	mov	r2, r3
 800ac54:	e770      	b.n	800ab38 <_dtoa_r+0x6b8>
 800ac56:	9b06      	ldr	r3, [sp, #24]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	dc18      	bgt.n	800ac8e <_dtoa_r+0x80e>
 800ac5c:	9b02      	ldr	r3, [sp, #8]
 800ac5e:	b9b3      	cbnz	r3, 800ac8e <_dtoa_r+0x80e>
 800ac60:	9b03      	ldr	r3, [sp, #12]
 800ac62:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ac66:	b9a2      	cbnz	r2, 800ac92 <_dtoa_r+0x812>
 800ac68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac6c:	0d12      	lsrs	r2, r2, #20
 800ac6e:	0512      	lsls	r2, r2, #20
 800ac70:	b18a      	cbz	r2, 800ac96 <_dtoa_r+0x816>
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	3301      	adds	r3, #1
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	9b05      	ldr	r3, [sp, #20]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	9305      	str	r3, [sp, #20]
 800ac7e:	2301      	movs	r3, #1
 800ac80:	930a      	str	r3, [sp, #40]	; 0x28
 800ac82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f47f af70 	bne.w	800ab6a <_dtoa_r+0x6ea>
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	e775      	b.n	800ab7a <_dtoa_r+0x6fa>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e7f6      	b.n	800ac80 <_dtoa_r+0x800>
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	e7f4      	b.n	800ac80 <_dtoa_r+0x800>
 800ac96:	920a      	str	r2, [sp, #40]	; 0x28
 800ac98:	e7f3      	b.n	800ac82 <_dtoa_r+0x802>
 800ac9a:	d082      	beq.n	800aba2 <_dtoa_r+0x722>
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	301c      	adds	r0, #28
 800aca0:	e778      	b.n	800ab94 <_dtoa_r+0x714>
 800aca2:	f1b9 0f00 	cmp.w	r9, #0
 800aca6:	dc37      	bgt.n	800ad18 <_dtoa_r+0x898>
 800aca8:	9b06      	ldr	r3, [sp, #24]
 800acaa:	2b02      	cmp	r3, #2
 800acac:	dd34      	ble.n	800ad18 <_dtoa_r+0x898>
 800acae:	46ca      	mov	sl, r9
 800acb0:	f1ba 0f00 	cmp.w	sl, #0
 800acb4:	d10d      	bne.n	800acd2 <_dtoa_r+0x852>
 800acb6:	4621      	mov	r1, r4
 800acb8:	4653      	mov	r3, sl
 800acba:	2205      	movs	r2, #5
 800acbc:	4630      	mov	r0, r6
 800acbe:	f000 fbdb 	bl	800b478 <__multadd>
 800acc2:	4601      	mov	r1, r0
 800acc4:	4604      	mov	r4, r0
 800acc6:	4628      	mov	r0, r5
 800acc8:	f000 fdf6 	bl	800b8b8 <__mcmp>
 800accc:	2800      	cmp	r0, #0
 800acce:	f73f adeb 	bgt.w	800a8a8 <_dtoa_r+0x428>
 800acd2:	9b08      	ldr	r3, [sp, #32]
 800acd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800acd8:	ea6f 0b03 	mvn.w	fp, r3
 800acdc:	f04f 0900 	mov.w	r9, #0
 800ace0:	4621      	mov	r1, r4
 800ace2:	4630      	mov	r0, r6
 800ace4:	f000 fba6 	bl	800b434 <_Bfree>
 800ace8:	2f00      	cmp	r7, #0
 800acea:	f43f aea8 	beq.w	800aa3e <_dtoa_r+0x5be>
 800acee:	f1b9 0f00 	cmp.w	r9, #0
 800acf2:	d005      	beq.n	800ad00 <_dtoa_r+0x880>
 800acf4:	45b9      	cmp	r9, r7
 800acf6:	d003      	beq.n	800ad00 <_dtoa_r+0x880>
 800acf8:	4649      	mov	r1, r9
 800acfa:	4630      	mov	r0, r6
 800acfc:	f000 fb9a 	bl	800b434 <_Bfree>
 800ad00:	4639      	mov	r1, r7
 800ad02:	4630      	mov	r0, r6
 800ad04:	f000 fb96 	bl	800b434 <_Bfree>
 800ad08:	e699      	b.n	800aa3e <_dtoa_r+0x5be>
 800ad0a:	2400      	movs	r4, #0
 800ad0c:	4627      	mov	r7, r4
 800ad0e:	e7e0      	b.n	800acd2 <_dtoa_r+0x852>
 800ad10:	46bb      	mov	fp, r7
 800ad12:	4604      	mov	r4, r0
 800ad14:	4607      	mov	r7, r0
 800ad16:	e5c7      	b.n	800a8a8 <_dtoa_r+0x428>
 800ad18:	9b07      	ldr	r3, [sp, #28]
 800ad1a:	46ca      	mov	sl, r9
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 8100 	beq.w	800af22 <_dtoa_r+0xaa2>
 800ad22:	f1b8 0f00 	cmp.w	r8, #0
 800ad26:	dd05      	ble.n	800ad34 <_dtoa_r+0x8b4>
 800ad28:	4639      	mov	r1, r7
 800ad2a:	4642      	mov	r2, r8
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f000 fd53 	bl	800b7d8 <__lshift>
 800ad32:	4607      	mov	r7, r0
 800ad34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d05d      	beq.n	800adf6 <_dtoa_r+0x976>
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f000 fb39 	bl	800b3b4 <_Balloc>
 800ad42:	4680      	mov	r8, r0
 800ad44:	b928      	cbnz	r0, 800ad52 <_dtoa_r+0x8d2>
 800ad46:	4b82      	ldr	r3, [pc, #520]	; (800af50 <_dtoa_r+0xad0>)
 800ad48:	4602      	mov	r2, r0
 800ad4a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad4e:	f7ff bbaf 	b.w	800a4b0 <_dtoa_r+0x30>
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	3202      	adds	r2, #2
 800ad56:	0092      	lsls	r2, r2, #2
 800ad58:	f107 010c 	add.w	r1, r7, #12
 800ad5c:	300c      	adds	r0, #12
 800ad5e:	f7fe fd5d 	bl	800981c <memcpy>
 800ad62:	2201      	movs	r2, #1
 800ad64:	4641      	mov	r1, r8
 800ad66:	4630      	mov	r0, r6
 800ad68:	f000 fd36 	bl	800b7d8 <__lshift>
 800ad6c:	9b01      	ldr	r3, [sp, #4]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	9b01      	ldr	r3, [sp, #4]
 800ad74:	4453      	add	r3, sl
 800ad76:	9308      	str	r3, [sp, #32]
 800ad78:	9b02      	ldr	r3, [sp, #8]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	46b9      	mov	r9, r7
 800ad80:	9307      	str	r3, [sp, #28]
 800ad82:	4607      	mov	r7, r0
 800ad84:	9b04      	ldr	r3, [sp, #16]
 800ad86:	4621      	mov	r1, r4
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	9302      	str	r3, [sp, #8]
 800ad8e:	f7ff faeb 	bl	800a368 <quorem>
 800ad92:	4603      	mov	r3, r0
 800ad94:	3330      	adds	r3, #48	; 0x30
 800ad96:	9005      	str	r0, [sp, #20]
 800ad98:	4649      	mov	r1, r9
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9e:	f000 fd8b 	bl	800b8b8 <__mcmp>
 800ada2:	463a      	mov	r2, r7
 800ada4:	4682      	mov	sl, r0
 800ada6:	4621      	mov	r1, r4
 800ada8:	4630      	mov	r0, r6
 800adaa:	f000 fda1 	bl	800b8f0 <__mdiff>
 800adae:	68c2      	ldr	r2, [r0, #12]
 800adb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb2:	4680      	mov	r8, r0
 800adb4:	bb0a      	cbnz	r2, 800adfa <_dtoa_r+0x97a>
 800adb6:	4601      	mov	r1, r0
 800adb8:	4628      	mov	r0, r5
 800adba:	f000 fd7d 	bl	800b8b8 <__mcmp>
 800adbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc0:	4602      	mov	r2, r0
 800adc2:	4641      	mov	r1, r8
 800adc4:	4630      	mov	r0, r6
 800adc6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800adca:	f000 fb33 	bl	800b434 <_Bfree>
 800adce:	9b06      	ldr	r3, [sp, #24]
 800add0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800add2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800add6:	ea43 0102 	orr.w	r1, r3, r2
 800adda:	9b07      	ldr	r3, [sp, #28]
 800addc:	430b      	orrs	r3, r1
 800adde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade0:	d10d      	bne.n	800adfe <_dtoa_r+0x97e>
 800ade2:	2b39      	cmp	r3, #57	; 0x39
 800ade4:	d029      	beq.n	800ae3a <_dtoa_r+0x9ba>
 800ade6:	f1ba 0f00 	cmp.w	sl, #0
 800adea:	dd01      	ble.n	800adf0 <_dtoa_r+0x970>
 800adec:	9b05      	ldr	r3, [sp, #20]
 800adee:	3331      	adds	r3, #49	; 0x31
 800adf0:	9a02      	ldr	r2, [sp, #8]
 800adf2:	7013      	strb	r3, [r2, #0]
 800adf4:	e774      	b.n	800ace0 <_dtoa_r+0x860>
 800adf6:	4638      	mov	r0, r7
 800adf8:	e7b8      	b.n	800ad6c <_dtoa_r+0x8ec>
 800adfa:	2201      	movs	r2, #1
 800adfc:	e7e1      	b.n	800adc2 <_dtoa_r+0x942>
 800adfe:	f1ba 0f00 	cmp.w	sl, #0
 800ae02:	db06      	blt.n	800ae12 <_dtoa_r+0x992>
 800ae04:	9906      	ldr	r1, [sp, #24]
 800ae06:	ea41 0a0a 	orr.w	sl, r1, sl
 800ae0a:	9907      	ldr	r1, [sp, #28]
 800ae0c:	ea5a 0101 	orrs.w	r1, sl, r1
 800ae10:	d120      	bne.n	800ae54 <_dtoa_r+0x9d4>
 800ae12:	2a00      	cmp	r2, #0
 800ae14:	ddec      	ble.n	800adf0 <_dtoa_r+0x970>
 800ae16:	4629      	mov	r1, r5
 800ae18:	2201      	movs	r2, #1
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	9304      	str	r3, [sp, #16]
 800ae1e:	f000 fcdb 	bl	800b7d8 <__lshift>
 800ae22:	4621      	mov	r1, r4
 800ae24:	4605      	mov	r5, r0
 800ae26:	f000 fd47 	bl	800b8b8 <__mcmp>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	dc02      	bgt.n	800ae36 <_dtoa_r+0x9b6>
 800ae30:	d1de      	bne.n	800adf0 <_dtoa_r+0x970>
 800ae32:	07da      	lsls	r2, r3, #31
 800ae34:	d5dc      	bpl.n	800adf0 <_dtoa_r+0x970>
 800ae36:	2b39      	cmp	r3, #57	; 0x39
 800ae38:	d1d8      	bne.n	800adec <_dtoa_r+0x96c>
 800ae3a:	9a02      	ldr	r2, [sp, #8]
 800ae3c:	2339      	movs	r3, #57	; 0x39
 800ae3e:	7013      	strb	r3, [r2, #0]
 800ae40:	4643      	mov	r3, r8
 800ae42:	4698      	mov	r8, r3
 800ae44:	3b01      	subs	r3, #1
 800ae46:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ae4a:	2a39      	cmp	r2, #57	; 0x39
 800ae4c:	d051      	beq.n	800aef2 <_dtoa_r+0xa72>
 800ae4e:	3201      	adds	r2, #1
 800ae50:	701a      	strb	r2, [r3, #0]
 800ae52:	e745      	b.n	800ace0 <_dtoa_r+0x860>
 800ae54:	2a00      	cmp	r2, #0
 800ae56:	dd03      	ble.n	800ae60 <_dtoa_r+0x9e0>
 800ae58:	2b39      	cmp	r3, #57	; 0x39
 800ae5a:	d0ee      	beq.n	800ae3a <_dtoa_r+0x9ba>
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	e7c7      	b.n	800adf0 <_dtoa_r+0x970>
 800ae60:	9a04      	ldr	r2, [sp, #16]
 800ae62:	9908      	ldr	r1, [sp, #32]
 800ae64:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae68:	428a      	cmp	r2, r1
 800ae6a:	d02b      	beq.n	800aec4 <_dtoa_r+0xa44>
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	2300      	movs	r3, #0
 800ae70:	220a      	movs	r2, #10
 800ae72:	4630      	mov	r0, r6
 800ae74:	f000 fb00 	bl	800b478 <__multadd>
 800ae78:	45b9      	cmp	r9, r7
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	f04f 0300 	mov.w	r3, #0
 800ae80:	f04f 020a 	mov.w	r2, #10
 800ae84:	4649      	mov	r1, r9
 800ae86:	4630      	mov	r0, r6
 800ae88:	d107      	bne.n	800ae9a <_dtoa_r+0xa1a>
 800ae8a:	f000 faf5 	bl	800b478 <__multadd>
 800ae8e:	4681      	mov	r9, r0
 800ae90:	4607      	mov	r7, r0
 800ae92:	9b04      	ldr	r3, [sp, #16]
 800ae94:	3301      	adds	r3, #1
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	e774      	b.n	800ad84 <_dtoa_r+0x904>
 800ae9a:	f000 faed 	bl	800b478 <__multadd>
 800ae9e:	4639      	mov	r1, r7
 800aea0:	4681      	mov	r9, r0
 800aea2:	2300      	movs	r3, #0
 800aea4:	220a      	movs	r2, #10
 800aea6:	4630      	mov	r0, r6
 800aea8:	f000 fae6 	bl	800b478 <__multadd>
 800aeac:	4607      	mov	r7, r0
 800aeae:	e7f0      	b.n	800ae92 <_dtoa_r+0xa12>
 800aeb0:	f1ba 0f00 	cmp.w	sl, #0
 800aeb4:	9a01      	ldr	r2, [sp, #4]
 800aeb6:	bfcc      	ite	gt
 800aeb8:	46d0      	movgt	r8, sl
 800aeba:	f04f 0801 	movle.w	r8, #1
 800aebe:	4490      	add	r8, r2
 800aec0:	f04f 0900 	mov.w	r9, #0
 800aec4:	4629      	mov	r1, r5
 800aec6:	2201      	movs	r2, #1
 800aec8:	4630      	mov	r0, r6
 800aeca:	9302      	str	r3, [sp, #8]
 800aecc:	f000 fc84 	bl	800b7d8 <__lshift>
 800aed0:	4621      	mov	r1, r4
 800aed2:	4605      	mov	r5, r0
 800aed4:	f000 fcf0 	bl	800b8b8 <__mcmp>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	dcb1      	bgt.n	800ae40 <_dtoa_r+0x9c0>
 800aedc:	d102      	bne.n	800aee4 <_dtoa_r+0xa64>
 800aede:	9b02      	ldr	r3, [sp, #8]
 800aee0:	07db      	lsls	r3, r3, #31
 800aee2:	d4ad      	bmi.n	800ae40 <_dtoa_r+0x9c0>
 800aee4:	4643      	mov	r3, r8
 800aee6:	4698      	mov	r8, r3
 800aee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeec:	2a30      	cmp	r2, #48	; 0x30
 800aeee:	d0fa      	beq.n	800aee6 <_dtoa_r+0xa66>
 800aef0:	e6f6      	b.n	800ace0 <_dtoa_r+0x860>
 800aef2:	9a01      	ldr	r2, [sp, #4]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d1a4      	bne.n	800ae42 <_dtoa_r+0x9c2>
 800aef8:	f10b 0b01 	add.w	fp, fp, #1
 800aefc:	2331      	movs	r3, #49	; 0x31
 800aefe:	e778      	b.n	800adf2 <_dtoa_r+0x972>
 800af00:	4b14      	ldr	r3, [pc, #80]	; (800af54 <_dtoa_r+0xad4>)
 800af02:	f7ff bb27 	b.w	800a554 <_dtoa_r+0xd4>
 800af06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f47f ab03 	bne.w	800a514 <_dtoa_r+0x94>
 800af0e:	4b12      	ldr	r3, [pc, #72]	; (800af58 <_dtoa_r+0xad8>)
 800af10:	f7ff bb20 	b.w	800a554 <_dtoa_r+0xd4>
 800af14:	f1ba 0f00 	cmp.w	sl, #0
 800af18:	dc03      	bgt.n	800af22 <_dtoa_r+0xaa2>
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	f73f aec7 	bgt.w	800acb0 <_dtoa_r+0x830>
 800af22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800af26:	4621      	mov	r1, r4
 800af28:	4628      	mov	r0, r5
 800af2a:	f7ff fa1d 	bl	800a368 <quorem>
 800af2e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af32:	f808 3b01 	strb.w	r3, [r8], #1
 800af36:	9a01      	ldr	r2, [sp, #4]
 800af38:	eba8 0202 	sub.w	r2, r8, r2
 800af3c:	4592      	cmp	sl, r2
 800af3e:	ddb7      	ble.n	800aeb0 <_dtoa_r+0xa30>
 800af40:	4629      	mov	r1, r5
 800af42:	2300      	movs	r3, #0
 800af44:	220a      	movs	r2, #10
 800af46:	4630      	mov	r0, r6
 800af48:	f000 fa96 	bl	800b478 <__multadd>
 800af4c:	4605      	mov	r5, r0
 800af4e:	e7ea      	b.n	800af26 <_dtoa_r+0xaa6>
 800af50:	0800c6c3 	.word	0x0800c6c3
 800af54:	0800c620 	.word	0x0800c620
 800af58:	0800c644 	.word	0x0800c644

0800af5c <__sflush_r>:
 800af5c:	898a      	ldrh	r2, [r1, #12]
 800af5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af62:	4605      	mov	r5, r0
 800af64:	0710      	lsls	r0, r2, #28
 800af66:	460c      	mov	r4, r1
 800af68:	d458      	bmi.n	800b01c <__sflush_r+0xc0>
 800af6a:	684b      	ldr	r3, [r1, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	dc05      	bgt.n	800af7c <__sflush_r+0x20>
 800af70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	dc02      	bgt.n	800af7c <__sflush_r+0x20>
 800af76:	2000      	movs	r0, #0
 800af78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af7e:	2e00      	cmp	r6, #0
 800af80:	d0f9      	beq.n	800af76 <__sflush_r+0x1a>
 800af82:	2300      	movs	r3, #0
 800af84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af88:	682f      	ldr	r7, [r5, #0]
 800af8a:	602b      	str	r3, [r5, #0]
 800af8c:	d032      	beq.n	800aff4 <__sflush_r+0x98>
 800af8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	075a      	lsls	r2, r3, #29
 800af94:	d505      	bpl.n	800afa2 <__sflush_r+0x46>
 800af96:	6863      	ldr	r3, [r4, #4]
 800af98:	1ac0      	subs	r0, r0, r3
 800af9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af9c:	b10b      	cbz	r3, 800afa2 <__sflush_r+0x46>
 800af9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afa0:	1ac0      	subs	r0, r0, r3
 800afa2:	2300      	movs	r3, #0
 800afa4:	4602      	mov	r2, r0
 800afa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afa8:	6a21      	ldr	r1, [r4, #32]
 800afaa:	4628      	mov	r0, r5
 800afac:	47b0      	blx	r6
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	d106      	bne.n	800afc2 <__sflush_r+0x66>
 800afb4:	6829      	ldr	r1, [r5, #0]
 800afb6:	291d      	cmp	r1, #29
 800afb8:	d82c      	bhi.n	800b014 <__sflush_r+0xb8>
 800afba:	4a2a      	ldr	r2, [pc, #168]	; (800b064 <__sflush_r+0x108>)
 800afbc:	40ca      	lsrs	r2, r1
 800afbe:	07d6      	lsls	r6, r2, #31
 800afc0:	d528      	bpl.n	800b014 <__sflush_r+0xb8>
 800afc2:	2200      	movs	r2, #0
 800afc4:	6062      	str	r2, [r4, #4]
 800afc6:	04d9      	lsls	r1, r3, #19
 800afc8:	6922      	ldr	r2, [r4, #16]
 800afca:	6022      	str	r2, [r4, #0]
 800afcc:	d504      	bpl.n	800afd8 <__sflush_r+0x7c>
 800afce:	1c42      	adds	r2, r0, #1
 800afd0:	d101      	bne.n	800afd6 <__sflush_r+0x7a>
 800afd2:	682b      	ldr	r3, [r5, #0]
 800afd4:	b903      	cbnz	r3, 800afd8 <__sflush_r+0x7c>
 800afd6:	6560      	str	r0, [r4, #84]	; 0x54
 800afd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afda:	602f      	str	r7, [r5, #0]
 800afdc:	2900      	cmp	r1, #0
 800afde:	d0ca      	beq.n	800af76 <__sflush_r+0x1a>
 800afe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afe4:	4299      	cmp	r1, r3
 800afe6:	d002      	beq.n	800afee <__sflush_r+0x92>
 800afe8:	4628      	mov	r0, r5
 800afea:	f000 fd7d 	bl	800bae8 <_free_r>
 800afee:	2000      	movs	r0, #0
 800aff0:	6360      	str	r0, [r4, #52]	; 0x34
 800aff2:	e7c1      	b.n	800af78 <__sflush_r+0x1c>
 800aff4:	6a21      	ldr	r1, [r4, #32]
 800aff6:	2301      	movs	r3, #1
 800aff8:	4628      	mov	r0, r5
 800affa:	47b0      	blx	r6
 800affc:	1c41      	adds	r1, r0, #1
 800affe:	d1c7      	bne.n	800af90 <__sflush_r+0x34>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d0c4      	beq.n	800af90 <__sflush_r+0x34>
 800b006:	2b1d      	cmp	r3, #29
 800b008:	d001      	beq.n	800b00e <__sflush_r+0xb2>
 800b00a:	2b16      	cmp	r3, #22
 800b00c:	d101      	bne.n	800b012 <__sflush_r+0xb6>
 800b00e:	602f      	str	r7, [r5, #0]
 800b010:	e7b1      	b.n	800af76 <__sflush_r+0x1a>
 800b012:	89a3      	ldrh	r3, [r4, #12]
 800b014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	e7ad      	b.n	800af78 <__sflush_r+0x1c>
 800b01c:	690f      	ldr	r7, [r1, #16]
 800b01e:	2f00      	cmp	r7, #0
 800b020:	d0a9      	beq.n	800af76 <__sflush_r+0x1a>
 800b022:	0793      	lsls	r3, r2, #30
 800b024:	680e      	ldr	r6, [r1, #0]
 800b026:	bf08      	it	eq
 800b028:	694b      	ldreq	r3, [r1, #20]
 800b02a:	600f      	str	r7, [r1, #0]
 800b02c:	bf18      	it	ne
 800b02e:	2300      	movne	r3, #0
 800b030:	eba6 0807 	sub.w	r8, r6, r7
 800b034:	608b      	str	r3, [r1, #8]
 800b036:	f1b8 0f00 	cmp.w	r8, #0
 800b03a:	dd9c      	ble.n	800af76 <__sflush_r+0x1a>
 800b03c:	6a21      	ldr	r1, [r4, #32]
 800b03e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b040:	4643      	mov	r3, r8
 800b042:	463a      	mov	r2, r7
 800b044:	4628      	mov	r0, r5
 800b046:	47b0      	blx	r6
 800b048:	2800      	cmp	r0, #0
 800b04a:	dc06      	bgt.n	800b05a <__sflush_r+0xfe>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b052:	81a3      	strh	r3, [r4, #12]
 800b054:	f04f 30ff 	mov.w	r0, #4294967295
 800b058:	e78e      	b.n	800af78 <__sflush_r+0x1c>
 800b05a:	4407      	add	r7, r0
 800b05c:	eba8 0800 	sub.w	r8, r8, r0
 800b060:	e7e9      	b.n	800b036 <__sflush_r+0xda>
 800b062:	bf00      	nop
 800b064:	20400001 	.word	0x20400001

0800b068 <_fflush_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	690b      	ldr	r3, [r1, #16]
 800b06c:	4605      	mov	r5, r0
 800b06e:	460c      	mov	r4, r1
 800b070:	b913      	cbnz	r3, 800b078 <_fflush_r+0x10>
 800b072:	2500      	movs	r5, #0
 800b074:	4628      	mov	r0, r5
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	b118      	cbz	r0, 800b082 <_fflush_r+0x1a>
 800b07a:	6983      	ldr	r3, [r0, #24]
 800b07c:	b90b      	cbnz	r3, 800b082 <_fflush_r+0x1a>
 800b07e:	f000 f887 	bl	800b190 <__sinit>
 800b082:	4b14      	ldr	r3, [pc, #80]	; (800b0d4 <_fflush_r+0x6c>)
 800b084:	429c      	cmp	r4, r3
 800b086:	d11b      	bne.n	800b0c0 <_fflush_r+0x58>
 800b088:	686c      	ldr	r4, [r5, #4]
 800b08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0ef      	beq.n	800b072 <_fflush_r+0xa>
 800b092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b094:	07d0      	lsls	r0, r2, #31
 800b096:	d404      	bmi.n	800b0a2 <_fflush_r+0x3a>
 800b098:	0599      	lsls	r1, r3, #22
 800b09a:	d402      	bmi.n	800b0a2 <_fflush_r+0x3a>
 800b09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09e:	f000 f91a 	bl	800b2d6 <__retarget_lock_acquire_recursive>
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	f7ff ff59 	bl	800af5c <__sflush_r>
 800b0aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0ac:	07da      	lsls	r2, r3, #31
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	d4e0      	bmi.n	800b074 <_fflush_r+0xc>
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	059b      	lsls	r3, r3, #22
 800b0b6:	d4dd      	bmi.n	800b074 <_fflush_r+0xc>
 800b0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ba:	f000 f90d 	bl	800b2d8 <__retarget_lock_release_recursive>
 800b0be:	e7d9      	b.n	800b074 <_fflush_r+0xc>
 800b0c0:	4b05      	ldr	r3, [pc, #20]	; (800b0d8 <_fflush_r+0x70>)
 800b0c2:	429c      	cmp	r4, r3
 800b0c4:	d101      	bne.n	800b0ca <_fflush_r+0x62>
 800b0c6:	68ac      	ldr	r4, [r5, #8]
 800b0c8:	e7df      	b.n	800b08a <_fflush_r+0x22>
 800b0ca:	4b04      	ldr	r3, [pc, #16]	; (800b0dc <_fflush_r+0x74>)
 800b0cc:	429c      	cmp	r4, r3
 800b0ce:	bf08      	it	eq
 800b0d0:	68ec      	ldreq	r4, [r5, #12]
 800b0d2:	e7da      	b.n	800b08a <_fflush_r+0x22>
 800b0d4:	0800c6f4 	.word	0x0800c6f4
 800b0d8:	0800c714 	.word	0x0800c714
 800b0dc:	0800c6d4 	.word	0x0800c6d4

0800b0e0 <std>:
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	b510      	push	{r4, lr}
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0ee:	6083      	str	r3, [r0, #8]
 800b0f0:	8181      	strh	r1, [r0, #12]
 800b0f2:	6643      	str	r3, [r0, #100]	; 0x64
 800b0f4:	81c2      	strh	r2, [r0, #14]
 800b0f6:	6183      	str	r3, [r0, #24]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	2208      	movs	r2, #8
 800b0fc:	305c      	adds	r0, #92	; 0x5c
 800b0fe:	f7fe fb9b 	bl	8009838 <memset>
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <std+0x38>)
 800b104:	6263      	str	r3, [r4, #36]	; 0x24
 800b106:	4b05      	ldr	r3, [pc, #20]	; (800b11c <std+0x3c>)
 800b108:	62a3      	str	r3, [r4, #40]	; 0x28
 800b10a:	4b05      	ldr	r3, [pc, #20]	; (800b120 <std+0x40>)
 800b10c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b10e:	4b05      	ldr	r3, [pc, #20]	; (800b124 <std+0x44>)
 800b110:	6224      	str	r4, [r4, #32]
 800b112:	6323      	str	r3, [r4, #48]	; 0x30
 800b114:	bd10      	pop	{r4, pc}
 800b116:	bf00      	nop
 800b118:	0800bf7d 	.word	0x0800bf7d
 800b11c:	0800bf9f 	.word	0x0800bf9f
 800b120:	0800bfd7 	.word	0x0800bfd7
 800b124:	0800bffb 	.word	0x0800bffb

0800b128 <_cleanup_r>:
 800b128:	4901      	ldr	r1, [pc, #4]	; (800b130 <_cleanup_r+0x8>)
 800b12a:	f000 b8af 	b.w	800b28c <_fwalk_reent>
 800b12e:	bf00      	nop
 800b130:	0800b069 	.word	0x0800b069

0800b134 <__sfmoreglue>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	2268      	movs	r2, #104	; 0x68
 800b138:	1e4d      	subs	r5, r1, #1
 800b13a:	4355      	muls	r5, r2
 800b13c:	460e      	mov	r6, r1
 800b13e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b142:	f000 fd3d 	bl	800bbc0 <_malloc_r>
 800b146:	4604      	mov	r4, r0
 800b148:	b140      	cbz	r0, 800b15c <__sfmoreglue+0x28>
 800b14a:	2100      	movs	r1, #0
 800b14c:	e9c0 1600 	strd	r1, r6, [r0]
 800b150:	300c      	adds	r0, #12
 800b152:	60a0      	str	r0, [r4, #8]
 800b154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b158:	f7fe fb6e 	bl	8009838 <memset>
 800b15c:	4620      	mov	r0, r4
 800b15e:	bd70      	pop	{r4, r5, r6, pc}

0800b160 <__sfp_lock_acquire>:
 800b160:	4801      	ldr	r0, [pc, #4]	; (800b168 <__sfp_lock_acquire+0x8>)
 800b162:	f000 b8b8 	b.w	800b2d6 <__retarget_lock_acquire_recursive>
 800b166:	bf00      	nop
 800b168:	20000495 	.word	0x20000495

0800b16c <__sfp_lock_release>:
 800b16c:	4801      	ldr	r0, [pc, #4]	; (800b174 <__sfp_lock_release+0x8>)
 800b16e:	f000 b8b3 	b.w	800b2d8 <__retarget_lock_release_recursive>
 800b172:	bf00      	nop
 800b174:	20000495 	.word	0x20000495

0800b178 <__sinit_lock_acquire>:
 800b178:	4801      	ldr	r0, [pc, #4]	; (800b180 <__sinit_lock_acquire+0x8>)
 800b17a:	f000 b8ac 	b.w	800b2d6 <__retarget_lock_acquire_recursive>
 800b17e:	bf00      	nop
 800b180:	20000496 	.word	0x20000496

0800b184 <__sinit_lock_release>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__sinit_lock_release+0x8>)
 800b186:	f000 b8a7 	b.w	800b2d8 <__retarget_lock_release_recursive>
 800b18a:	bf00      	nop
 800b18c:	20000496 	.word	0x20000496

0800b190 <__sinit>:
 800b190:	b510      	push	{r4, lr}
 800b192:	4604      	mov	r4, r0
 800b194:	f7ff fff0 	bl	800b178 <__sinit_lock_acquire>
 800b198:	69a3      	ldr	r3, [r4, #24]
 800b19a:	b11b      	cbz	r3, 800b1a4 <__sinit+0x14>
 800b19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a0:	f7ff bff0 	b.w	800b184 <__sinit_lock_release>
 800b1a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1a8:	6523      	str	r3, [r4, #80]	; 0x50
 800b1aa:	4b13      	ldr	r3, [pc, #76]	; (800b1f8 <__sinit+0x68>)
 800b1ac:	4a13      	ldr	r2, [pc, #76]	; (800b1fc <__sinit+0x6c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1b2:	42a3      	cmp	r3, r4
 800b1b4:	bf04      	itt	eq
 800b1b6:	2301      	moveq	r3, #1
 800b1b8:	61a3      	streq	r3, [r4, #24]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 f820 	bl	800b200 <__sfp>
 800b1c0:	6060      	str	r0, [r4, #4]
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 f81c 	bl	800b200 <__sfp>
 800b1c8:	60a0      	str	r0, [r4, #8]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 f818 	bl	800b200 <__sfp>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	60e0      	str	r0, [r4, #12]
 800b1d4:	2104      	movs	r1, #4
 800b1d6:	6860      	ldr	r0, [r4, #4]
 800b1d8:	f7ff ff82 	bl	800b0e0 <std>
 800b1dc:	68a0      	ldr	r0, [r4, #8]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	2109      	movs	r1, #9
 800b1e2:	f7ff ff7d 	bl	800b0e0 <std>
 800b1e6:	68e0      	ldr	r0, [r4, #12]
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	2112      	movs	r1, #18
 800b1ec:	f7ff ff78 	bl	800b0e0 <std>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	61a3      	str	r3, [r4, #24]
 800b1f4:	e7d2      	b.n	800b19c <__sinit+0xc>
 800b1f6:	bf00      	nop
 800b1f8:	0800c60c 	.word	0x0800c60c
 800b1fc:	0800b129 	.word	0x0800b129

0800b200 <__sfp>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	4607      	mov	r7, r0
 800b204:	f7ff ffac 	bl	800b160 <__sfp_lock_acquire>
 800b208:	4b1e      	ldr	r3, [pc, #120]	; (800b284 <__sfp+0x84>)
 800b20a:	681e      	ldr	r6, [r3, #0]
 800b20c:	69b3      	ldr	r3, [r6, #24]
 800b20e:	b913      	cbnz	r3, 800b216 <__sfp+0x16>
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff ffbd 	bl	800b190 <__sinit>
 800b216:	3648      	adds	r6, #72	; 0x48
 800b218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	d503      	bpl.n	800b228 <__sfp+0x28>
 800b220:	6833      	ldr	r3, [r6, #0]
 800b222:	b30b      	cbz	r3, 800b268 <__sfp+0x68>
 800b224:	6836      	ldr	r6, [r6, #0]
 800b226:	e7f7      	b.n	800b218 <__sfp+0x18>
 800b228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b22c:	b9d5      	cbnz	r5, 800b264 <__sfp+0x64>
 800b22e:	4b16      	ldr	r3, [pc, #88]	; (800b288 <__sfp+0x88>)
 800b230:	60e3      	str	r3, [r4, #12]
 800b232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b236:	6665      	str	r5, [r4, #100]	; 0x64
 800b238:	f000 f84c 	bl	800b2d4 <__retarget_lock_init_recursive>
 800b23c:	f7ff ff96 	bl	800b16c <__sfp_lock_release>
 800b240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b248:	6025      	str	r5, [r4, #0]
 800b24a:	61a5      	str	r5, [r4, #24]
 800b24c:	2208      	movs	r2, #8
 800b24e:	4629      	mov	r1, r5
 800b250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b254:	f7fe faf0 	bl	8009838 <memset>
 800b258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b25c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b260:	4620      	mov	r0, r4
 800b262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b264:	3468      	adds	r4, #104	; 0x68
 800b266:	e7d9      	b.n	800b21c <__sfp+0x1c>
 800b268:	2104      	movs	r1, #4
 800b26a:	4638      	mov	r0, r7
 800b26c:	f7ff ff62 	bl	800b134 <__sfmoreglue>
 800b270:	4604      	mov	r4, r0
 800b272:	6030      	str	r0, [r6, #0]
 800b274:	2800      	cmp	r0, #0
 800b276:	d1d5      	bne.n	800b224 <__sfp+0x24>
 800b278:	f7ff ff78 	bl	800b16c <__sfp_lock_release>
 800b27c:	230c      	movs	r3, #12
 800b27e:	603b      	str	r3, [r7, #0]
 800b280:	e7ee      	b.n	800b260 <__sfp+0x60>
 800b282:	bf00      	nop
 800b284:	0800c60c 	.word	0x0800c60c
 800b288:	ffff0001 	.word	0xffff0001

0800b28c <_fwalk_reent>:
 800b28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b290:	4606      	mov	r6, r0
 800b292:	4688      	mov	r8, r1
 800b294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b298:	2700      	movs	r7, #0
 800b29a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b29e:	f1b9 0901 	subs.w	r9, r9, #1
 800b2a2:	d505      	bpl.n	800b2b0 <_fwalk_reent+0x24>
 800b2a4:	6824      	ldr	r4, [r4, #0]
 800b2a6:	2c00      	cmp	r4, #0
 800b2a8:	d1f7      	bne.n	800b29a <_fwalk_reent+0xe>
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b0:	89ab      	ldrh	r3, [r5, #12]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d907      	bls.n	800b2c6 <_fwalk_reent+0x3a>
 800b2b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	d003      	beq.n	800b2c6 <_fwalk_reent+0x3a>
 800b2be:	4629      	mov	r1, r5
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	47c0      	blx	r8
 800b2c4:	4307      	orrs	r7, r0
 800b2c6:	3568      	adds	r5, #104	; 0x68
 800b2c8:	e7e9      	b.n	800b29e <_fwalk_reent+0x12>
	...

0800b2cc <_localeconv_r>:
 800b2cc:	4800      	ldr	r0, [pc, #0]	; (800b2d0 <_localeconv_r+0x4>)
 800b2ce:	4770      	bx	lr
 800b2d0:	20000190 	.word	0x20000190

0800b2d4 <__retarget_lock_init_recursive>:
 800b2d4:	4770      	bx	lr

0800b2d6 <__retarget_lock_acquire_recursive>:
 800b2d6:	4770      	bx	lr

0800b2d8 <__retarget_lock_release_recursive>:
 800b2d8:	4770      	bx	lr

0800b2da <__swhatbuf_r>:
 800b2da:	b570      	push	{r4, r5, r6, lr}
 800b2dc:	460e      	mov	r6, r1
 800b2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e2:	2900      	cmp	r1, #0
 800b2e4:	b096      	sub	sp, #88	; 0x58
 800b2e6:	4614      	mov	r4, r2
 800b2e8:	461d      	mov	r5, r3
 800b2ea:	da08      	bge.n	800b2fe <__swhatbuf_r+0x24>
 800b2ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	602a      	str	r2, [r5, #0]
 800b2f4:	061a      	lsls	r2, r3, #24
 800b2f6:	d410      	bmi.n	800b31a <__swhatbuf_r+0x40>
 800b2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2fc:	e00e      	b.n	800b31c <__swhatbuf_r+0x42>
 800b2fe:	466a      	mov	r2, sp
 800b300:	f000 fed2 	bl	800c0a8 <_fstat_r>
 800b304:	2800      	cmp	r0, #0
 800b306:	dbf1      	blt.n	800b2ec <__swhatbuf_r+0x12>
 800b308:	9a01      	ldr	r2, [sp, #4]
 800b30a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b30e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b312:	425a      	negs	r2, r3
 800b314:	415a      	adcs	r2, r3
 800b316:	602a      	str	r2, [r5, #0]
 800b318:	e7ee      	b.n	800b2f8 <__swhatbuf_r+0x1e>
 800b31a:	2340      	movs	r3, #64	; 0x40
 800b31c:	2000      	movs	r0, #0
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	b016      	add	sp, #88	; 0x58
 800b322:	bd70      	pop	{r4, r5, r6, pc}

0800b324 <__smakebuf_r>:
 800b324:	898b      	ldrh	r3, [r1, #12]
 800b326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b328:	079d      	lsls	r5, r3, #30
 800b32a:	4606      	mov	r6, r0
 800b32c:	460c      	mov	r4, r1
 800b32e:	d507      	bpl.n	800b340 <__smakebuf_r+0x1c>
 800b330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	6123      	str	r3, [r4, #16]
 800b338:	2301      	movs	r3, #1
 800b33a:	6163      	str	r3, [r4, #20]
 800b33c:	b002      	add	sp, #8
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	ab01      	add	r3, sp, #4
 800b342:	466a      	mov	r2, sp
 800b344:	f7ff ffc9 	bl	800b2da <__swhatbuf_r>
 800b348:	9900      	ldr	r1, [sp, #0]
 800b34a:	4605      	mov	r5, r0
 800b34c:	4630      	mov	r0, r6
 800b34e:	f000 fc37 	bl	800bbc0 <_malloc_r>
 800b352:	b948      	cbnz	r0, 800b368 <__smakebuf_r+0x44>
 800b354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b358:	059a      	lsls	r2, r3, #22
 800b35a:	d4ef      	bmi.n	800b33c <__smakebuf_r+0x18>
 800b35c:	f023 0303 	bic.w	r3, r3, #3
 800b360:	f043 0302 	orr.w	r3, r3, #2
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	e7e3      	b.n	800b330 <__smakebuf_r+0xc>
 800b368:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <__smakebuf_r+0x7c>)
 800b36a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	6020      	str	r0, [r4, #0]
 800b370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	9b00      	ldr	r3, [sp, #0]
 800b378:	6163      	str	r3, [r4, #20]
 800b37a:	9b01      	ldr	r3, [sp, #4]
 800b37c:	6120      	str	r0, [r4, #16]
 800b37e:	b15b      	cbz	r3, 800b398 <__smakebuf_r+0x74>
 800b380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b384:	4630      	mov	r0, r6
 800b386:	f000 fea1 	bl	800c0cc <_isatty_r>
 800b38a:	b128      	cbz	r0, 800b398 <__smakebuf_r+0x74>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	f023 0303 	bic.w	r3, r3, #3
 800b392:	f043 0301 	orr.w	r3, r3, #1
 800b396:	81a3      	strh	r3, [r4, #12]
 800b398:	89a0      	ldrh	r0, [r4, #12]
 800b39a:	4305      	orrs	r5, r0
 800b39c:	81a5      	strh	r5, [r4, #12]
 800b39e:	e7cd      	b.n	800b33c <__smakebuf_r+0x18>
 800b3a0:	0800b129 	.word	0x0800b129

0800b3a4 <malloc>:
 800b3a4:	4b02      	ldr	r3, [pc, #8]	; (800b3b0 <malloc+0xc>)
 800b3a6:	4601      	mov	r1, r0
 800b3a8:	6818      	ldr	r0, [r3, #0]
 800b3aa:	f000 bc09 	b.w	800bbc0 <_malloc_r>
 800b3ae:	bf00      	nop
 800b3b0:	2000003c 	.word	0x2000003c

0800b3b4 <_Balloc>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	b976      	cbnz	r6, 800b3dc <_Balloc+0x28>
 800b3be:	2010      	movs	r0, #16
 800b3c0:	f7ff fff0 	bl	800b3a4 <malloc>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	6260      	str	r0, [r4, #36]	; 0x24
 800b3c8:	b920      	cbnz	r0, 800b3d4 <_Balloc+0x20>
 800b3ca:	4b18      	ldr	r3, [pc, #96]	; (800b42c <_Balloc+0x78>)
 800b3cc:	4818      	ldr	r0, [pc, #96]	; (800b430 <_Balloc+0x7c>)
 800b3ce:	2166      	movs	r1, #102	; 0x66
 800b3d0:	f000 fe2a 	bl	800c028 <__assert_func>
 800b3d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d8:	6006      	str	r6, [r0, #0]
 800b3da:	60c6      	str	r6, [r0, #12]
 800b3dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b3de:	68f3      	ldr	r3, [r6, #12]
 800b3e0:	b183      	cbz	r3, 800b404 <_Balloc+0x50>
 800b3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3ea:	b9b8      	cbnz	r0, 800b41c <_Balloc+0x68>
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	fa01 f605 	lsl.w	r6, r1, r5
 800b3f2:	1d72      	adds	r2, r6, #5
 800b3f4:	0092      	lsls	r2, r2, #2
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f000 fb60 	bl	800babc <_calloc_r>
 800b3fc:	b160      	cbz	r0, 800b418 <_Balloc+0x64>
 800b3fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b402:	e00e      	b.n	800b422 <_Balloc+0x6e>
 800b404:	2221      	movs	r2, #33	; 0x21
 800b406:	2104      	movs	r1, #4
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fb57 	bl	800babc <_calloc_r>
 800b40e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b410:	60f0      	str	r0, [r6, #12]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e4      	bne.n	800b3e2 <_Balloc+0x2e>
 800b418:	2000      	movs	r0, #0
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	6802      	ldr	r2, [r0, #0]
 800b41e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b422:	2300      	movs	r3, #0
 800b424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b428:	e7f7      	b.n	800b41a <_Balloc+0x66>
 800b42a:	bf00      	nop
 800b42c:	0800c651 	.word	0x0800c651
 800b430:	0800c734 	.word	0x0800c734

0800b434 <_Bfree>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	b976      	cbnz	r6, 800b45c <_Bfree+0x28>
 800b43e:	2010      	movs	r0, #16
 800b440:	f7ff ffb0 	bl	800b3a4 <malloc>
 800b444:	4602      	mov	r2, r0
 800b446:	6268      	str	r0, [r5, #36]	; 0x24
 800b448:	b920      	cbnz	r0, 800b454 <_Bfree+0x20>
 800b44a:	4b09      	ldr	r3, [pc, #36]	; (800b470 <_Bfree+0x3c>)
 800b44c:	4809      	ldr	r0, [pc, #36]	; (800b474 <_Bfree+0x40>)
 800b44e:	218a      	movs	r1, #138	; 0x8a
 800b450:	f000 fdea 	bl	800c028 <__assert_func>
 800b454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b458:	6006      	str	r6, [r0, #0]
 800b45a:	60c6      	str	r6, [r0, #12]
 800b45c:	b13c      	cbz	r4, 800b46e <_Bfree+0x3a>
 800b45e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b460:	6862      	ldr	r2, [r4, #4]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b468:	6021      	str	r1, [r4, #0]
 800b46a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b46e:	bd70      	pop	{r4, r5, r6, pc}
 800b470:	0800c651 	.word	0x0800c651
 800b474:	0800c734 	.word	0x0800c734

0800b478 <__multadd>:
 800b478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	690d      	ldr	r5, [r1, #16]
 800b47e:	4607      	mov	r7, r0
 800b480:	460c      	mov	r4, r1
 800b482:	461e      	mov	r6, r3
 800b484:	f101 0c14 	add.w	ip, r1, #20
 800b488:	2000      	movs	r0, #0
 800b48a:	f8dc 3000 	ldr.w	r3, [ip]
 800b48e:	b299      	uxth	r1, r3
 800b490:	fb02 6101 	mla	r1, r2, r1, r6
 800b494:	0c1e      	lsrs	r6, r3, #16
 800b496:	0c0b      	lsrs	r3, r1, #16
 800b498:	fb02 3306 	mla	r3, r2, r6, r3
 800b49c:	b289      	uxth	r1, r1
 800b49e:	3001      	adds	r0, #1
 800b4a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4a4:	4285      	cmp	r5, r0
 800b4a6:	f84c 1b04 	str.w	r1, [ip], #4
 800b4aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4ae:	dcec      	bgt.n	800b48a <__multadd+0x12>
 800b4b0:	b30e      	cbz	r6, 800b4f6 <__multadd+0x7e>
 800b4b2:	68a3      	ldr	r3, [r4, #8]
 800b4b4:	42ab      	cmp	r3, r5
 800b4b6:	dc19      	bgt.n	800b4ec <__multadd+0x74>
 800b4b8:	6861      	ldr	r1, [r4, #4]
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	3101      	adds	r1, #1
 800b4be:	f7ff ff79 	bl	800b3b4 <_Balloc>
 800b4c2:	4680      	mov	r8, r0
 800b4c4:	b928      	cbnz	r0, 800b4d2 <__multadd+0x5a>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <__multadd+0x84>)
 800b4ca:	480d      	ldr	r0, [pc, #52]	; (800b500 <__multadd+0x88>)
 800b4cc:	21b5      	movs	r1, #181	; 0xb5
 800b4ce:	f000 fdab 	bl	800c028 <__assert_func>
 800b4d2:	6922      	ldr	r2, [r4, #16]
 800b4d4:	3202      	adds	r2, #2
 800b4d6:	f104 010c 	add.w	r1, r4, #12
 800b4da:	0092      	lsls	r2, r2, #2
 800b4dc:	300c      	adds	r0, #12
 800b4de:	f7fe f99d 	bl	800981c <memcpy>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	f7ff ffa5 	bl	800b434 <_Bfree>
 800b4ea:	4644      	mov	r4, r8
 800b4ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	615e      	str	r6, [r3, #20]
 800b4f4:	6125      	str	r5, [r4, #16]
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4fc:	0800c6c3 	.word	0x0800c6c3
 800b500:	0800c734 	.word	0x0800c734

0800b504 <__hi0bits>:
 800b504:	0c03      	lsrs	r3, r0, #16
 800b506:	041b      	lsls	r3, r3, #16
 800b508:	b9d3      	cbnz	r3, 800b540 <__hi0bits+0x3c>
 800b50a:	0400      	lsls	r0, r0, #16
 800b50c:	2310      	movs	r3, #16
 800b50e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b512:	bf04      	itt	eq
 800b514:	0200      	lsleq	r0, r0, #8
 800b516:	3308      	addeq	r3, #8
 800b518:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b51c:	bf04      	itt	eq
 800b51e:	0100      	lsleq	r0, r0, #4
 800b520:	3304      	addeq	r3, #4
 800b522:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b526:	bf04      	itt	eq
 800b528:	0080      	lsleq	r0, r0, #2
 800b52a:	3302      	addeq	r3, #2
 800b52c:	2800      	cmp	r0, #0
 800b52e:	db05      	blt.n	800b53c <__hi0bits+0x38>
 800b530:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b534:	f103 0301 	add.w	r3, r3, #1
 800b538:	bf08      	it	eq
 800b53a:	2320      	moveq	r3, #32
 800b53c:	4618      	mov	r0, r3
 800b53e:	4770      	bx	lr
 800b540:	2300      	movs	r3, #0
 800b542:	e7e4      	b.n	800b50e <__hi0bits+0xa>

0800b544 <__lo0bits>:
 800b544:	6803      	ldr	r3, [r0, #0]
 800b546:	f013 0207 	ands.w	r2, r3, #7
 800b54a:	4601      	mov	r1, r0
 800b54c:	d00b      	beq.n	800b566 <__lo0bits+0x22>
 800b54e:	07da      	lsls	r2, r3, #31
 800b550:	d423      	bmi.n	800b59a <__lo0bits+0x56>
 800b552:	0798      	lsls	r0, r3, #30
 800b554:	bf49      	itett	mi
 800b556:	085b      	lsrmi	r3, r3, #1
 800b558:	089b      	lsrpl	r3, r3, #2
 800b55a:	2001      	movmi	r0, #1
 800b55c:	600b      	strmi	r3, [r1, #0]
 800b55e:	bf5c      	itt	pl
 800b560:	600b      	strpl	r3, [r1, #0]
 800b562:	2002      	movpl	r0, #2
 800b564:	4770      	bx	lr
 800b566:	b298      	uxth	r0, r3
 800b568:	b9a8      	cbnz	r0, 800b596 <__lo0bits+0x52>
 800b56a:	0c1b      	lsrs	r3, r3, #16
 800b56c:	2010      	movs	r0, #16
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	b90a      	cbnz	r2, 800b576 <__lo0bits+0x32>
 800b572:	3008      	adds	r0, #8
 800b574:	0a1b      	lsrs	r3, r3, #8
 800b576:	071a      	lsls	r2, r3, #28
 800b578:	bf04      	itt	eq
 800b57a:	091b      	lsreq	r3, r3, #4
 800b57c:	3004      	addeq	r0, #4
 800b57e:	079a      	lsls	r2, r3, #30
 800b580:	bf04      	itt	eq
 800b582:	089b      	lsreq	r3, r3, #2
 800b584:	3002      	addeq	r0, #2
 800b586:	07da      	lsls	r2, r3, #31
 800b588:	d403      	bmi.n	800b592 <__lo0bits+0x4e>
 800b58a:	085b      	lsrs	r3, r3, #1
 800b58c:	f100 0001 	add.w	r0, r0, #1
 800b590:	d005      	beq.n	800b59e <__lo0bits+0x5a>
 800b592:	600b      	str	r3, [r1, #0]
 800b594:	4770      	bx	lr
 800b596:	4610      	mov	r0, r2
 800b598:	e7e9      	b.n	800b56e <__lo0bits+0x2a>
 800b59a:	2000      	movs	r0, #0
 800b59c:	4770      	bx	lr
 800b59e:	2020      	movs	r0, #32
 800b5a0:	4770      	bx	lr
	...

0800b5a4 <__i2b>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	f7ff ff03 	bl	800b3b4 <_Balloc>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	b928      	cbnz	r0, 800b5be <__i2b+0x1a>
 800b5b2:	4b05      	ldr	r3, [pc, #20]	; (800b5c8 <__i2b+0x24>)
 800b5b4:	4805      	ldr	r0, [pc, #20]	; (800b5cc <__i2b+0x28>)
 800b5b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b5ba:	f000 fd35 	bl	800c028 <__assert_func>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	6144      	str	r4, [r0, #20]
 800b5c2:	6103      	str	r3, [r0, #16]
 800b5c4:	bd10      	pop	{r4, pc}
 800b5c6:	bf00      	nop
 800b5c8:	0800c6c3 	.word	0x0800c6c3
 800b5cc:	0800c734 	.word	0x0800c734

0800b5d0 <__multiply>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4691      	mov	r9, r2
 800b5d6:	690a      	ldr	r2, [r1, #16]
 800b5d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	bfb8      	it	lt
 800b5e0:	460b      	movlt	r3, r1
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	bfbc      	itt	lt
 800b5e6:	464c      	movlt	r4, r9
 800b5e8:	4699      	movlt	r9, r3
 800b5ea:	6927      	ldr	r7, [r4, #16]
 800b5ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5f0:	68a3      	ldr	r3, [r4, #8]
 800b5f2:	6861      	ldr	r1, [r4, #4]
 800b5f4:	eb07 060a 	add.w	r6, r7, sl
 800b5f8:	42b3      	cmp	r3, r6
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	bfb8      	it	lt
 800b5fe:	3101      	addlt	r1, #1
 800b600:	f7ff fed8 	bl	800b3b4 <_Balloc>
 800b604:	b930      	cbnz	r0, 800b614 <__multiply+0x44>
 800b606:	4602      	mov	r2, r0
 800b608:	4b44      	ldr	r3, [pc, #272]	; (800b71c <__multiply+0x14c>)
 800b60a:	4845      	ldr	r0, [pc, #276]	; (800b720 <__multiply+0x150>)
 800b60c:	f240 115d 	movw	r1, #349	; 0x15d
 800b610:	f000 fd0a 	bl	800c028 <__assert_func>
 800b614:	f100 0514 	add.w	r5, r0, #20
 800b618:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b61c:	462b      	mov	r3, r5
 800b61e:	2200      	movs	r2, #0
 800b620:	4543      	cmp	r3, r8
 800b622:	d321      	bcc.n	800b668 <__multiply+0x98>
 800b624:	f104 0314 	add.w	r3, r4, #20
 800b628:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b62c:	f109 0314 	add.w	r3, r9, #20
 800b630:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b634:	9202      	str	r2, [sp, #8]
 800b636:	1b3a      	subs	r2, r7, r4
 800b638:	3a15      	subs	r2, #21
 800b63a:	f022 0203 	bic.w	r2, r2, #3
 800b63e:	3204      	adds	r2, #4
 800b640:	f104 0115 	add.w	r1, r4, #21
 800b644:	428f      	cmp	r7, r1
 800b646:	bf38      	it	cc
 800b648:	2204      	movcc	r2, #4
 800b64a:	9201      	str	r2, [sp, #4]
 800b64c:	9a02      	ldr	r2, [sp, #8]
 800b64e:	9303      	str	r3, [sp, #12]
 800b650:	429a      	cmp	r2, r3
 800b652:	d80c      	bhi.n	800b66e <__multiply+0x9e>
 800b654:	2e00      	cmp	r6, #0
 800b656:	dd03      	ble.n	800b660 <__multiply+0x90>
 800b658:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d05a      	beq.n	800b716 <__multiply+0x146>
 800b660:	6106      	str	r6, [r0, #16]
 800b662:	b005      	add	sp, #20
 800b664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b668:	f843 2b04 	str.w	r2, [r3], #4
 800b66c:	e7d8      	b.n	800b620 <__multiply+0x50>
 800b66e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b672:	f1ba 0f00 	cmp.w	sl, #0
 800b676:	d024      	beq.n	800b6c2 <__multiply+0xf2>
 800b678:	f104 0e14 	add.w	lr, r4, #20
 800b67c:	46a9      	mov	r9, r5
 800b67e:	f04f 0c00 	mov.w	ip, #0
 800b682:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b686:	f8d9 1000 	ldr.w	r1, [r9]
 800b68a:	fa1f fb82 	uxth.w	fp, r2
 800b68e:	b289      	uxth	r1, r1
 800b690:	fb0a 110b 	mla	r1, sl, fp, r1
 800b694:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b698:	f8d9 2000 	ldr.w	r2, [r9]
 800b69c:	4461      	add	r1, ip
 800b69e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b6a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b6aa:	b289      	uxth	r1, r1
 800b6ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6b0:	4577      	cmp	r7, lr
 800b6b2:	f849 1b04 	str.w	r1, [r9], #4
 800b6b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6ba:	d8e2      	bhi.n	800b682 <__multiply+0xb2>
 800b6bc:	9a01      	ldr	r2, [sp, #4]
 800b6be:	f845 c002 	str.w	ip, [r5, r2]
 800b6c2:	9a03      	ldr	r2, [sp, #12]
 800b6c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	f1b9 0f00 	cmp.w	r9, #0
 800b6ce:	d020      	beq.n	800b712 <__multiply+0x142>
 800b6d0:	6829      	ldr	r1, [r5, #0]
 800b6d2:	f104 0c14 	add.w	ip, r4, #20
 800b6d6:	46ae      	mov	lr, r5
 800b6d8:	f04f 0a00 	mov.w	sl, #0
 800b6dc:	f8bc b000 	ldrh.w	fp, [ip]
 800b6e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6e4:	fb09 220b 	mla	r2, r9, fp, r2
 800b6e8:	4492      	add	sl, r2
 800b6ea:	b289      	uxth	r1, r1
 800b6ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b6f0:	f84e 1b04 	str.w	r1, [lr], #4
 800b6f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6f8:	f8be 1000 	ldrh.w	r1, [lr]
 800b6fc:	0c12      	lsrs	r2, r2, #16
 800b6fe:	fb09 1102 	mla	r1, r9, r2, r1
 800b702:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b706:	4567      	cmp	r7, ip
 800b708:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b70c:	d8e6      	bhi.n	800b6dc <__multiply+0x10c>
 800b70e:	9a01      	ldr	r2, [sp, #4]
 800b710:	50a9      	str	r1, [r5, r2]
 800b712:	3504      	adds	r5, #4
 800b714:	e79a      	b.n	800b64c <__multiply+0x7c>
 800b716:	3e01      	subs	r6, #1
 800b718:	e79c      	b.n	800b654 <__multiply+0x84>
 800b71a:	bf00      	nop
 800b71c:	0800c6c3 	.word	0x0800c6c3
 800b720:	0800c734 	.word	0x0800c734

0800b724 <__pow5mult>:
 800b724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b728:	4615      	mov	r5, r2
 800b72a:	f012 0203 	ands.w	r2, r2, #3
 800b72e:	4606      	mov	r6, r0
 800b730:	460f      	mov	r7, r1
 800b732:	d007      	beq.n	800b744 <__pow5mult+0x20>
 800b734:	4c25      	ldr	r4, [pc, #148]	; (800b7cc <__pow5mult+0xa8>)
 800b736:	3a01      	subs	r2, #1
 800b738:	2300      	movs	r3, #0
 800b73a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b73e:	f7ff fe9b 	bl	800b478 <__multadd>
 800b742:	4607      	mov	r7, r0
 800b744:	10ad      	asrs	r5, r5, #2
 800b746:	d03d      	beq.n	800b7c4 <__pow5mult+0xa0>
 800b748:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b74a:	b97c      	cbnz	r4, 800b76c <__pow5mult+0x48>
 800b74c:	2010      	movs	r0, #16
 800b74e:	f7ff fe29 	bl	800b3a4 <malloc>
 800b752:	4602      	mov	r2, r0
 800b754:	6270      	str	r0, [r6, #36]	; 0x24
 800b756:	b928      	cbnz	r0, 800b764 <__pow5mult+0x40>
 800b758:	4b1d      	ldr	r3, [pc, #116]	; (800b7d0 <__pow5mult+0xac>)
 800b75a:	481e      	ldr	r0, [pc, #120]	; (800b7d4 <__pow5mult+0xb0>)
 800b75c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b760:	f000 fc62 	bl	800c028 <__assert_func>
 800b764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b768:	6004      	str	r4, [r0, #0]
 800b76a:	60c4      	str	r4, [r0, #12]
 800b76c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b774:	b94c      	cbnz	r4, 800b78a <__pow5mult+0x66>
 800b776:	f240 2171 	movw	r1, #625	; 0x271
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7ff ff12 	bl	800b5a4 <__i2b>
 800b780:	2300      	movs	r3, #0
 800b782:	f8c8 0008 	str.w	r0, [r8, #8]
 800b786:	4604      	mov	r4, r0
 800b788:	6003      	str	r3, [r0, #0]
 800b78a:	f04f 0900 	mov.w	r9, #0
 800b78e:	07eb      	lsls	r3, r5, #31
 800b790:	d50a      	bpl.n	800b7a8 <__pow5mult+0x84>
 800b792:	4639      	mov	r1, r7
 800b794:	4622      	mov	r2, r4
 800b796:	4630      	mov	r0, r6
 800b798:	f7ff ff1a 	bl	800b5d0 <__multiply>
 800b79c:	4639      	mov	r1, r7
 800b79e:	4680      	mov	r8, r0
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7ff fe47 	bl	800b434 <_Bfree>
 800b7a6:	4647      	mov	r7, r8
 800b7a8:	106d      	asrs	r5, r5, #1
 800b7aa:	d00b      	beq.n	800b7c4 <__pow5mult+0xa0>
 800b7ac:	6820      	ldr	r0, [r4, #0]
 800b7ae:	b938      	cbnz	r0, 800b7c0 <__pow5mult+0x9c>
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7ff ff0b 	bl	800b5d0 <__multiply>
 800b7ba:	6020      	str	r0, [r4, #0]
 800b7bc:	f8c0 9000 	str.w	r9, [r0]
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	e7e4      	b.n	800b78e <__pow5mult+0x6a>
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ca:	bf00      	nop
 800b7cc:	0800c880 	.word	0x0800c880
 800b7d0:	0800c651 	.word	0x0800c651
 800b7d4:	0800c734 	.word	0x0800c734

0800b7d8 <__lshift>:
 800b7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7dc:	460c      	mov	r4, r1
 800b7de:	6849      	ldr	r1, [r1, #4]
 800b7e0:	6923      	ldr	r3, [r4, #16]
 800b7e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7e6:	68a3      	ldr	r3, [r4, #8]
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	4691      	mov	r9, r2
 800b7ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7f0:	f108 0601 	add.w	r6, r8, #1
 800b7f4:	42b3      	cmp	r3, r6
 800b7f6:	db0b      	blt.n	800b810 <__lshift+0x38>
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f7ff fddb 	bl	800b3b4 <_Balloc>
 800b7fe:	4605      	mov	r5, r0
 800b800:	b948      	cbnz	r0, 800b816 <__lshift+0x3e>
 800b802:	4602      	mov	r2, r0
 800b804:	4b2a      	ldr	r3, [pc, #168]	; (800b8b0 <__lshift+0xd8>)
 800b806:	482b      	ldr	r0, [pc, #172]	; (800b8b4 <__lshift+0xdc>)
 800b808:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b80c:	f000 fc0c 	bl	800c028 <__assert_func>
 800b810:	3101      	adds	r1, #1
 800b812:	005b      	lsls	r3, r3, #1
 800b814:	e7ee      	b.n	800b7f4 <__lshift+0x1c>
 800b816:	2300      	movs	r3, #0
 800b818:	f100 0114 	add.w	r1, r0, #20
 800b81c:	f100 0210 	add.w	r2, r0, #16
 800b820:	4618      	mov	r0, r3
 800b822:	4553      	cmp	r3, sl
 800b824:	db37      	blt.n	800b896 <__lshift+0xbe>
 800b826:	6920      	ldr	r0, [r4, #16]
 800b828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b82c:	f104 0314 	add.w	r3, r4, #20
 800b830:	f019 091f 	ands.w	r9, r9, #31
 800b834:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b838:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b83c:	d02f      	beq.n	800b89e <__lshift+0xc6>
 800b83e:	f1c9 0e20 	rsb	lr, r9, #32
 800b842:	468a      	mov	sl, r1
 800b844:	f04f 0c00 	mov.w	ip, #0
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	fa02 f209 	lsl.w	r2, r2, r9
 800b84e:	ea42 020c 	orr.w	r2, r2, ip
 800b852:	f84a 2b04 	str.w	r2, [sl], #4
 800b856:	f853 2b04 	ldr.w	r2, [r3], #4
 800b85a:	4298      	cmp	r0, r3
 800b85c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b860:	d8f2      	bhi.n	800b848 <__lshift+0x70>
 800b862:	1b03      	subs	r3, r0, r4
 800b864:	3b15      	subs	r3, #21
 800b866:	f023 0303 	bic.w	r3, r3, #3
 800b86a:	3304      	adds	r3, #4
 800b86c:	f104 0215 	add.w	r2, r4, #21
 800b870:	4290      	cmp	r0, r2
 800b872:	bf38      	it	cc
 800b874:	2304      	movcc	r3, #4
 800b876:	f841 c003 	str.w	ip, [r1, r3]
 800b87a:	f1bc 0f00 	cmp.w	ip, #0
 800b87e:	d001      	beq.n	800b884 <__lshift+0xac>
 800b880:	f108 0602 	add.w	r6, r8, #2
 800b884:	3e01      	subs	r6, #1
 800b886:	4638      	mov	r0, r7
 800b888:	612e      	str	r6, [r5, #16]
 800b88a:	4621      	mov	r1, r4
 800b88c:	f7ff fdd2 	bl	800b434 <_Bfree>
 800b890:	4628      	mov	r0, r5
 800b892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b896:	f842 0f04 	str.w	r0, [r2, #4]!
 800b89a:	3301      	adds	r3, #1
 800b89c:	e7c1      	b.n	800b822 <__lshift+0x4a>
 800b89e:	3904      	subs	r1, #4
 800b8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8a8:	4298      	cmp	r0, r3
 800b8aa:	d8f9      	bhi.n	800b8a0 <__lshift+0xc8>
 800b8ac:	e7ea      	b.n	800b884 <__lshift+0xac>
 800b8ae:	bf00      	nop
 800b8b0:	0800c6c3 	.word	0x0800c6c3
 800b8b4:	0800c734 	.word	0x0800c734

0800b8b8 <__mcmp>:
 800b8b8:	b530      	push	{r4, r5, lr}
 800b8ba:	6902      	ldr	r2, [r0, #16]
 800b8bc:	690c      	ldr	r4, [r1, #16]
 800b8be:	1b12      	subs	r2, r2, r4
 800b8c0:	d10e      	bne.n	800b8e0 <__mcmp+0x28>
 800b8c2:	f100 0314 	add.w	r3, r0, #20
 800b8c6:	3114      	adds	r1, #20
 800b8c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8d8:	42a5      	cmp	r5, r4
 800b8da:	d003      	beq.n	800b8e4 <__mcmp+0x2c>
 800b8dc:	d305      	bcc.n	800b8ea <__mcmp+0x32>
 800b8de:	2201      	movs	r2, #1
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	bd30      	pop	{r4, r5, pc}
 800b8e4:	4283      	cmp	r3, r0
 800b8e6:	d3f3      	bcc.n	800b8d0 <__mcmp+0x18>
 800b8e8:	e7fa      	b.n	800b8e0 <__mcmp+0x28>
 800b8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ee:	e7f7      	b.n	800b8e0 <__mcmp+0x28>

0800b8f0 <__mdiff>:
 800b8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	4690      	mov	r8, r2
 800b8fe:	f7ff ffdb 	bl	800b8b8 <__mcmp>
 800b902:	1e05      	subs	r5, r0, #0
 800b904:	d110      	bne.n	800b928 <__mdiff+0x38>
 800b906:	4629      	mov	r1, r5
 800b908:	4630      	mov	r0, r6
 800b90a:	f7ff fd53 	bl	800b3b4 <_Balloc>
 800b90e:	b930      	cbnz	r0, 800b91e <__mdiff+0x2e>
 800b910:	4b3a      	ldr	r3, [pc, #232]	; (800b9fc <__mdiff+0x10c>)
 800b912:	4602      	mov	r2, r0
 800b914:	f240 2132 	movw	r1, #562	; 0x232
 800b918:	4839      	ldr	r0, [pc, #228]	; (800ba00 <__mdiff+0x110>)
 800b91a:	f000 fb85 	bl	800c028 <__assert_func>
 800b91e:	2301      	movs	r3, #1
 800b920:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b928:	bfa4      	itt	ge
 800b92a:	4643      	movge	r3, r8
 800b92c:	46a0      	movge	r8, r4
 800b92e:	4630      	mov	r0, r6
 800b930:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b934:	bfa6      	itte	ge
 800b936:	461c      	movge	r4, r3
 800b938:	2500      	movge	r5, #0
 800b93a:	2501      	movlt	r5, #1
 800b93c:	f7ff fd3a 	bl	800b3b4 <_Balloc>
 800b940:	b920      	cbnz	r0, 800b94c <__mdiff+0x5c>
 800b942:	4b2e      	ldr	r3, [pc, #184]	; (800b9fc <__mdiff+0x10c>)
 800b944:	4602      	mov	r2, r0
 800b946:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b94a:	e7e5      	b.n	800b918 <__mdiff+0x28>
 800b94c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b950:	6926      	ldr	r6, [r4, #16]
 800b952:	60c5      	str	r5, [r0, #12]
 800b954:	f104 0914 	add.w	r9, r4, #20
 800b958:	f108 0514 	add.w	r5, r8, #20
 800b95c:	f100 0e14 	add.w	lr, r0, #20
 800b960:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b964:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b968:	f108 0210 	add.w	r2, r8, #16
 800b96c:	46f2      	mov	sl, lr
 800b96e:	2100      	movs	r1, #0
 800b970:	f859 3b04 	ldr.w	r3, [r9], #4
 800b974:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b978:	fa1f f883 	uxth.w	r8, r3
 800b97c:	fa11 f18b 	uxtah	r1, r1, fp
 800b980:	0c1b      	lsrs	r3, r3, #16
 800b982:	eba1 0808 	sub.w	r8, r1, r8
 800b986:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b98a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b98e:	fa1f f888 	uxth.w	r8, r8
 800b992:	1419      	asrs	r1, r3, #16
 800b994:	454e      	cmp	r6, r9
 800b996:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b99a:	f84a 3b04 	str.w	r3, [sl], #4
 800b99e:	d8e7      	bhi.n	800b970 <__mdiff+0x80>
 800b9a0:	1b33      	subs	r3, r6, r4
 800b9a2:	3b15      	subs	r3, #21
 800b9a4:	f023 0303 	bic.w	r3, r3, #3
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	3415      	adds	r4, #21
 800b9ac:	42a6      	cmp	r6, r4
 800b9ae:	bf38      	it	cc
 800b9b0:	2304      	movcc	r3, #4
 800b9b2:	441d      	add	r5, r3
 800b9b4:	4473      	add	r3, lr
 800b9b6:	469e      	mov	lr, r3
 800b9b8:	462e      	mov	r6, r5
 800b9ba:	4566      	cmp	r6, ip
 800b9bc:	d30e      	bcc.n	800b9dc <__mdiff+0xec>
 800b9be:	f10c 0203 	add.w	r2, ip, #3
 800b9c2:	1b52      	subs	r2, r2, r5
 800b9c4:	f022 0203 	bic.w	r2, r2, #3
 800b9c8:	3d03      	subs	r5, #3
 800b9ca:	45ac      	cmp	ip, r5
 800b9cc:	bf38      	it	cc
 800b9ce:	2200      	movcc	r2, #0
 800b9d0:	441a      	add	r2, r3
 800b9d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b9d6:	b17b      	cbz	r3, 800b9f8 <__mdiff+0x108>
 800b9d8:	6107      	str	r7, [r0, #16]
 800b9da:	e7a3      	b.n	800b924 <__mdiff+0x34>
 800b9dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b9e0:	fa11 f288 	uxtah	r2, r1, r8
 800b9e4:	1414      	asrs	r4, r2, #16
 800b9e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9ea:	b292      	uxth	r2, r2
 800b9ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9f0:	f84e 2b04 	str.w	r2, [lr], #4
 800b9f4:	1421      	asrs	r1, r4, #16
 800b9f6:	e7e0      	b.n	800b9ba <__mdiff+0xca>
 800b9f8:	3f01      	subs	r7, #1
 800b9fa:	e7ea      	b.n	800b9d2 <__mdiff+0xe2>
 800b9fc:	0800c6c3 	.word	0x0800c6c3
 800ba00:	0800c734 	.word	0x0800c734

0800ba04 <__d2b>:
 800ba04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba08:	4689      	mov	r9, r1
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	ec57 6b10 	vmov	r6, r7, d0
 800ba10:	4690      	mov	r8, r2
 800ba12:	f7ff fccf 	bl	800b3b4 <_Balloc>
 800ba16:	4604      	mov	r4, r0
 800ba18:	b930      	cbnz	r0, 800ba28 <__d2b+0x24>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	4b25      	ldr	r3, [pc, #148]	; (800bab4 <__d2b+0xb0>)
 800ba1e:	4826      	ldr	r0, [pc, #152]	; (800bab8 <__d2b+0xb4>)
 800ba20:	f240 310a 	movw	r1, #778	; 0x30a
 800ba24:	f000 fb00 	bl	800c028 <__assert_func>
 800ba28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba30:	bb35      	cbnz	r5, 800ba80 <__d2b+0x7c>
 800ba32:	2e00      	cmp	r6, #0
 800ba34:	9301      	str	r3, [sp, #4]
 800ba36:	d028      	beq.n	800ba8a <__d2b+0x86>
 800ba38:	4668      	mov	r0, sp
 800ba3a:	9600      	str	r6, [sp, #0]
 800ba3c:	f7ff fd82 	bl	800b544 <__lo0bits>
 800ba40:	9900      	ldr	r1, [sp, #0]
 800ba42:	b300      	cbz	r0, 800ba86 <__d2b+0x82>
 800ba44:	9a01      	ldr	r2, [sp, #4]
 800ba46:	f1c0 0320 	rsb	r3, r0, #32
 800ba4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4e:	430b      	orrs	r3, r1
 800ba50:	40c2      	lsrs	r2, r0
 800ba52:	6163      	str	r3, [r4, #20]
 800ba54:	9201      	str	r2, [sp, #4]
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	61a3      	str	r3, [r4, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	bf14      	ite	ne
 800ba5e:	2202      	movne	r2, #2
 800ba60:	2201      	moveq	r2, #1
 800ba62:	6122      	str	r2, [r4, #16]
 800ba64:	b1d5      	cbz	r5, 800ba9c <__d2b+0x98>
 800ba66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba6a:	4405      	add	r5, r0
 800ba6c:	f8c9 5000 	str.w	r5, [r9]
 800ba70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba74:	f8c8 0000 	str.w	r0, [r8]
 800ba78:	4620      	mov	r0, r4
 800ba7a:	b003      	add	sp, #12
 800ba7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba84:	e7d5      	b.n	800ba32 <__d2b+0x2e>
 800ba86:	6161      	str	r1, [r4, #20]
 800ba88:	e7e5      	b.n	800ba56 <__d2b+0x52>
 800ba8a:	a801      	add	r0, sp, #4
 800ba8c:	f7ff fd5a 	bl	800b544 <__lo0bits>
 800ba90:	9b01      	ldr	r3, [sp, #4]
 800ba92:	6163      	str	r3, [r4, #20]
 800ba94:	2201      	movs	r2, #1
 800ba96:	6122      	str	r2, [r4, #16]
 800ba98:	3020      	adds	r0, #32
 800ba9a:	e7e3      	b.n	800ba64 <__d2b+0x60>
 800ba9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800baa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800baa4:	f8c9 0000 	str.w	r0, [r9]
 800baa8:	6918      	ldr	r0, [r3, #16]
 800baaa:	f7ff fd2b 	bl	800b504 <__hi0bits>
 800baae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bab2:	e7df      	b.n	800ba74 <__d2b+0x70>
 800bab4:	0800c6c3 	.word	0x0800c6c3
 800bab8:	0800c734 	.word	0x0800c734

0800babc <_calloc_r>:
 800babc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800babe:	fba1 2402 	umull	r2, r4, r1, r2
 800bac2:	b94c      	cbnz	r4, 800bad8 <_calloc_r+0x1c>
 800bac4:	4611      	mov	r1, r2
 800bac6:	9201      	str	r2, [sp, #4]
 800bac8:	f000 f87a 	bl	800bbc0 <_malloc_r>
 800bacc:	9a01      	ldr	r2, [sp, #4]
 800bace:	4605      	mov	r5, r0
 800bad0:	b930      	cbnz	r0, 800bae0 <_calloc_r+0x24>
 800bad2:	4628      	mov	r0, r5
 800bad4:	b003      	add	sp, #12
 800bad6:	bd30      	pop	{r4, r5, pc}
 800bad8:	220c      	movs	r2, #12
 800bada:	6002      	str	r2, [r0, #0]
 800badc:	2500      	movs	r5, #0
 800bade:	e7f8      	b.n	800bad2 <_calloc_r+0x16>
 800bae0:	4621      	mov	r1, r4
 800bae2:	f7fd fea9 	bl	8009838 <memset>
 800bae6:	e7f4      	b.n	800bad2 <_calloc_r+0x16>

0800bae8 <_free_r>:
 800bae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baea:	2900      	cmp	r1, #0
 800baec:	d044      	beq.n	800bb78 <_free_r+0x90>
 800baee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baf2:	9001      	str	r0, [sp, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f1a1 0404 	sub.w	r4, r1, #4
 800bafa:	bfb8      	it	lt
 800bafc:	18e4      	addlt	r4, r4, r3
 800bafe:	f000 fb19 	bl	800c134 <__malloc_lock>
 800bb02:	4a1e      	ldr	r2, [pc, #120]	; (800bb7c <_free_r+0x94>)
 800bb04:	9801      	ldr	r0, [sp, #4]
 800bb06:	6813      	ldr	r3, [r2, #0]
 800bb08:	b933      	cbnz	r3, 800bb18 <_free_r+0x30>
 800bb0a:	6063      	str	r3, [r4, #4]
 800bb0c:	6014      	str	r4, [r2, #0]
 800bb0e:	b003      	add	sp, #12
 800bb10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb14:	f000 bb14 	b.w	800c140 <__malloc_unlock>
 800bb18:	42a3      	cmp	r3, r4
 800bb1a:	d908      	bls.n	800bb2e <_free_r+0x46>
 800bb1c:	6825      	ldr	r5, [r4, #0]
 800bb1e:	1961      	adds	r1, r4, r5
 800bb20:	428b      	cmp	r3, r1
 800bb22:	bf01      	itttt	eq
 800bb24:	6819      	ldreq	r1, [r3, #0]
 800bb26:	685b      	ldreq	r3, [r3, #4]
 800bb28:	1949      	addeq	r1, r1, r5
 800bb2a:	6021      	streq	r1, [r4, #0]
 800bb2c:	e7ed      	b.n	800bb0a <_free_r+0x22>
 800bb2e:	461a      	mov	r2, r3
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	b10b      	cbz	r3, 800bb38 <_free_r+0x50>
 800bb34:	42a3      	cmp	r3, r4
 800bb36:	d9fa      	bls.n	800bb2e <_free_r+0x46>
 800bb38:	6811      	ldr	r1, [r2, #0]
 800bb3a:	1855      	adds	r5, r2, r1
 800bb3c:	42a5      	cmp	r5, r4
 800bb3e:	d10b      	bne.n	800bb58 <_free_r+0x70>
 800bb40:	6824      	ldr	r4, [r4, #0]
 800bb42:	4421      	add	r1, r4
 800bb44:	1854      	adds	r4, r2, r1
 800bb46:	42a3      	cmp	r3, r4
 800bb48:	6011      	str	r1, [r2, #0]
 800bb4a:	d1e0      	bne.n	800bb0e <_free_r+0x26>
 800bb4c:	681c      	ldr	r4, [r3, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	6053      	str	r3, [r2, #4]
 800bb52:	4421      	add	r1, r4
 800bb54:	6011      	str	r1, [r2, #0]
 800bb56:	e7da      	b.n	800bb0e <_free_r+0x26>
 800bb58:	d902      	bls.n	800bb60 <_free_r+0x78>
 800bb5a:	230c      	movs	r3, #12
 800bb5c:	6003      	str	r3, [r0, #0]
 800bb5e:	e7d6      	b.n	800bb0e <_free_r+0x26>
 800bb60:	6825      	ldr	r5, [r4, #0]
 800bb62:	1961      	adds	r1, r4, r5
 800bb64:	428b      	cmp	r3, r1
 800bb66:	bf04      	itt	eq
 800bb68:	6819      	ldreq	r1, [r3, #0]
 800bb6a:	685b      	ldreq	r3, [r3, #4]
 800bb6c:	6063      	str	r3, [r4, #4]
 800bb6e:	bf04      	itt	eq
 800bb70:	1949      	addeq	r1, r1, r5
 800bb72:	6021      	streq	r1, [r4, #0]
 800bb74:	6054      	str	r4, [r2, #4]
 800bb76:	e7ca      	b.n	800bb0e <_free_r+0x26>
 800bb78:	b003      	add	sp, #12
 800bb7a:	bd30      	pop	{r4, r5, pc}
 800bb7c:	20000498 	.word	0x20000498

0800bb80 <sbrk_aligned>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	4e0e      	ldr	r6, [pc, #56]	; (800bbbc <sbrk_aligned+0x3c>)
 800bb84:	460c      	mov	r4, r1
 800bb86:	6831      	ldr	r1, [r6, #0]
 800bb88:	4605      	mov	r5, r0
 800bb8a:	b911      	cbnz	r1, 800bb92 <sbrk_aligned+0x12>
 800bb8c:	f000 f9e6 	bl	800bf5c <_sbrk_r>
 800bb90:	6030      	str	r0, [r6, #0]
 800bb92:	4621      	mov	r1, r4
 800bb94:	4628      	mov	r0, r5
 800bb96:	f000 f9e1 	bl	800bf5c <_sbrk_r>
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	d00a      	beq.n	800bbb4 <sbrk_aligned+0x34>
 800bb9e:	1cc4      	adds	r4, r0, #3
 800bba0:	f024 0403 	bic.w	r4, r4, #3
 800bba4:	42a0      	cmp	r0, r4
 800bba6:	d007      	beq.n	800bbb8 <sbrk_aligned+0x38>
 800bba8:	1a21      	subs	r1, r4, r0
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f000 f9d6 	bl	800bf5c <_sbrk_r>
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d101      	bne.n	800bbb8 <sbrk_aligned+0x38>
 800bbb4:	f04f 34ff 	mov.w	r4, #4294967295
 800bbb8:	4620      	mov	r0, r4
 800bbba:	bd70      	pop	{r4, r5, r6, pc}
 800bbbc:	2000049c 	.word	0x2000049c

0800bbc0 <_malloc_r>:
 800bbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc4:	1ccd      	adds	r5, r1, #3
 800bbc6:	f025 0503 	bic.w	r5, r5, #3
 800bbca:	3508      	adds	r5, #8
 800bbcc:	2d0c      	cmp	r5, #12
 800bbce:	bf38      	it	cc
 800bbd0:	250c      	movcc	r5, #12
 800bbd2:	2d00      	cmp	r5, #0
 800bbd4:	4607      	mov	r7, r0
 800bbd6:	db01      	blt.n	800bbdc <_malloc_r+0x1c>
 800bbd8:	42a9      	cmp	r1, r5
 800bbda:	d905      	bls.n	800bbe8 <_malloc_r+0x28>
 800bbdc:	230c      	movs	r3, #12
 800bbde:	603b      	str	r3, [r7, #0]
 800bbe0:	2600      	movs	r6, #0
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe8:	4e2e      	ldr	r6, [pc, #184]	; (800bca4 <_malloc_r+0xe4>)
 800bbea:	f000 faa3 	bl	800c134 <__malloc_lock>
 800bbee:	6833      	ldr	r3, [r6, #0]
 800bbf0:	461c      	mov	r4, r3
 800bbf2:	bb34      	cbnz	r4, 800bc42 <_malloc_r+0x82>
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	f7ff ffc2 	bl	800bb80 <sbrk_aligned>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	4604      	mov	r4, r0
 800bc00:	d14d      	bne.n	800bc9e <_malloc_r+0xde>
 800bc02:	6834      	ldr	r4, [r6, #0]
 800bc04:	4626      	mov	r6, r4
 800bc06:	2e00      	cmp	r6, #0
 800bc08:	d140      	bne.n	800bc8c <_malloc_r+0xcc>
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4638      	mov	r0, r7
 800bc10:	eb04 0803 	add.w	r8, r4, r3
 800bc14:	f000 f9a2 	bl	800bf5c <_sbrk_r>
 800bc18:	4580      	cmp	r8, r0
 800bc1a:	d13a      	bne.n	800bc92 <_malloc_r+0xd2>
 800bc1c:	6821      	ldr	r1, [r4, #0]
 800bc1e:	3503      	adds	r5, #3
 800bc20:	1a6d      	subs	r5, r5, r1
 800bc22:	f025 0503 	bic.w	r5, r5, #3
 800bc26:	3508      	adds	r5, #8
 800bc28:	2d0c      	cmp	r5, #12
 800bc2a:	bf38      	it	cc
 800bc2c:	250c      	movcc	r5, #12
 800bc2e:	4629      	mov	r1, r5
 800bc30:	4638      	mov	r0, r7
 800bc32:	f7ff ffa5 	bl	800bb80 <sbrk_aligned>
 800bc36:	3001      	adds	r0, #1
 800bc38:	d02b      	beq.n	800bc92 <_malloc_r+0xd2>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	442b      	add	r3, r5
 800bc3e:	6023      	str	r3, [r4, #0]
 800bc40:	e00e      	b.n	800bc60 <_malloc_r+0xa0>
 800bc42:	6822      	ldr	r2, [r4, #0]
 800bc44:	1b52      	subs	r2, r2, r5
 800bc46:	d41e      	bmi.n	800bc86 <_malloc_r+0xc6>
 800bc48:	2a0b      	cmp	r2, #11
 800bc4a:	d916      	bls.n	800bc7a <_malloc_r+0xba>
 800bc4c:	1961      	adds	r1, r4, r5
 800bc4e:	42a3      	cmp	r3, r4
 800bc50:	6025      	str	r5, [r4, #0]
 800bc52:	bf18      	it	ne
 800bc54:	6059      	strne	r1, [r3, #4]
 800bc56:	6863      	ldr	r3, [r4, #4]
 800bc58:	bf08      	it	eq
 800bc5a:	6031      	streq	r1, [r6, #0]
 800bc5c:	5162      	str	r2, [r4, r5]
 800bc5e:	604b      	str	r3, [r1, #4]
 800bc60:	4638      	mov	r0, r7
 800bc62:	f104 060b 	add.w	r6, r4, #11
 800bc66:	f000 fa6b 	bl	800c140 <__malloc_unlock>
 800bc6a:	f026 0607 	bic.w	r6, r6, #7
 800bc6e:	1d23      	adds	r3, r4, #4
 800bc70:	1af2      	subs	r2, r6, r3
 800bc72:	d0b6      	beq.n	800bbe2 <_malloc_r+0x22>
 800bc74:	1b9b      	subs	r3, r3, r6
 800bc76:	50a3      	str	r3, [r4, r2]
 800bc78:	e7b3      	b.n	800bbe2 <_malloc_r+0x22>
 800bc7a:	6862      	ldr	r2, [r4, #4]
 800bc7c:	42a3      	cmp	r3, r4
 800bc7e:	bf0c      	ite	eq
 800bc80:	6032      	streq	r2, [r6, #0]
 800bc82:	605a      	strne	r2, [r3, #4]
 800bc84:	e7ec      	b.n	800bc60 <_malloc_r+0xa0>
 800bc86:	4623      	mov	r3, r4
 800bc88:	6864      	ldr	r4, [r4, #4]
 800bc8a:	e7b2      	b.n	800bbf2 <_malloc_r+0x32>
 800bc8c:	4634      	mov	r4, r6
 800bc8e:	6876      	ldr	r6, [r6, #4]
 800bc90:	e7b9      	b.n	800bc06 <_malloc_r+0x46>
 800bc92:	230c      	movs	r3, #12
 800bc94:	603b      	str	r3, [r7, #0]
 800bc96:	4638      	mov	r0, r7
 800bc98:	f000 fa52 	bl	800c140 <__malloc_unlock>
 800bc9c:	e7a1      	b.n	800bbe2 <_malloc_r+0x22>
 800bc9e:	6025      	str	r5, [r4, #0]
 800bca0:	e7de      	b.n	800bc60 <_malloc_r+0xa0>
 800bca2:	bf00      	nop
 800bca4:	20000498 	.word	0x20000498

0800bca8 <__sfputc_r>:
 800bca8:	6893      	ldr	r3, [r2, #8]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	b410      	push	{r4}
 800bcb0:	6093      	str	r3, [r2, #8]
 800bcb2:	da08      	bge.n	800bcc6 <__sfputc_r+0x1e>
 800bcb4:	6994      	ldr	r4, [r2, #24]
 800bcb6:	42a3      	cmp	r3, r4
 800bcb8:	db01      	blt.n	800bcbe <__sfputc_r+0x16>
 800bcba:	290a      	cmp	r1, #10
 800bcbc:	d103      	bne.n	800bcc6 <__sfputc_r+0x1e>
 800bcbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcc2:	f7fe ba91 	b.w	800a1e8 <__swbuf_r>
 800bcc6:	6813      	ldr	r3, [r2, #0]
 800bcc8:	1c58      	adds	r0, r3, #1
 800bcca:	6010      	str	r0, [r2, #0]
 800bccc:	7019      	strb	r1, [r3, #0]
 800bcce:	4608      	mov	r0, r1
 800bcd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <__sfputs_r>:
 800bcd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd8:	4606      	mov	r6, r0
 800bcda:	460f      	mov	r7, r1
 800bcdc:	4614      	mov	r4, r2
 800bcde:	18d5      	adds	r5, r2, r3
 800bce0:	42ac      	cmp	r4, r5
 800bce2:	d101      	bne.n	800bce8 <__sfputs_r+0x12>
 800bce4:	2000      	movs	r0, #0
 800bce6:	e007      	b.n	800bcf8 <__sfputs_r+0x22>
 800bce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcec:	463a      	mov	r2, r7
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f7ff ffda 	bl	800bca8 <__sfputc_r>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d1f3      	bne.n	800bce0 <__sfputs_r+0xa>
 800bcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcfc <_vfiprintf_r>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	460d      	mov	r5, r1
 800bd02:	b09d      	sub	sp, #116	; 0x74
 800bd04:	4614      	mov	r4, r2
 800bd06:	4698      	mov	r8, r3
 800bd08:	4606      	mov	r6, r0
 800bd0a:	b118      	cbz	r0, 800bd14 <_vfiprintf_r+0x18>
 800bd0c:	6983      	ldr	r3, [r0, #24]
 800bd0e:	b90b      	cbnz	r3, 800bd14 <_vfiprintf_r+0x18>
 800bd10:	f7ff fa3e 	bl	800b190 <__sinit>
 800bd14:	4b89      	ldr	r3, [pc, #548]	; (800bf3c <_vfiprintf_r+0x240>)
 800bd16:	429d      	cmp	r5, r3
 800bd18:	d11b      	bne.n	800bd52 <_vfiprintf_r+0x56>
 800bd1a:	6875      	ldr	r5, [r6, #4]
 800bd1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd1e:	07d9      	lsls	r1, r3, #31
 800bd20:	d405      	bmi.n	800bd2e <_vfiprintf_r+0x32>
 800bd22:	89ab      	ldrh	r3, [r5, #12]
 800bd24:	059a      	lsls	r2, r3, #22
 800bd26:	d402      	bmi.n	800bd2e <_vfiprintf_r+0x32>
 800bd28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd2a:	f7ff fad4 	bl	800b2d6 <__retarget_lock_acquire_recursive>
 800bd2e:	89ab      	ldrh	r3, [r5, #12]
 800bd30:	071b      	lsls	r3, r3, #28
 800bd32:	d501      	bpl.n	800bd38 <_vfiprintf_r+0x3c>
 800bd34:	692b      	ldr	r3, [r5, #16]
 800bd36:	b9eb      	cbnz	r3, 800bd74 <_vfiprintf_r+0x78>
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f7fe faa6 	bl	800a28c <__swsetup_r>
 800bd40:	b1c0      	cbz	r0, 800bd74 <_vfiprintf_r+0x78>
 800bd42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd44:	07dc      	lsls	r4, r3, #31
 800bd46:	d50e      	bpl.n	800bd66 <_vfiprintf_r+0x6a>
 800bd48:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4c:	b01d      	add	sp, #116	; 0x74
 800bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd52:	4b7b      	ldr	r3, [pc, #492]	; (800bf40 <_vfiprintf_r+0x244>)
 800bd54:	429d      	cmp	r5, r3
 800bd56:	d101      	bne.n	800bd5c <_vfiprintf_r+0x60>
 800bd58:	68b5      	ldr	r5, [r6, #8]
 800bd5a:	e7df      	b.n	800bd1c <_vfiprintf_r+0x20>
 800bd5c:	4b79      	ldr	r3, [pc, #484]	; (800bf44 <_vfiprintf_r+0x248>)
 800bd5e:	429d      	cmp	r5, r3
 800bd60:	bf08      	it	eq
 800bd62:	68f5      	ldreq	r5, [r6, #12]
 800bd64:	e7da      	b.n	800bd1c <_vfiprintf_r+0x20>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	0598      	lsls	r0, r3, #22
 800bd6a:	d4ed      	bmi.n	800bd48 <_vfiprintf_r+0x4c>
 800bd6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd6e:	f7ff fab3 	bl	800b2d8 <__retarget_lock_release_recursive>
 800bd72:	e7e9      	b.n	800bd48 <_vfiprintf_r+0x4c>
 800bd74:	2300      	movs	r3, #0
 800bd76:	9309      	str	r3, [sp, #36]	; 0x24
 800bd78:	2320      	movs	r3, #32
 800bd7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd82:	2330      	movs	r3, #48	; 0x30
 800bd84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf48 <_vfiprintf_r+0x24c>
 800bd88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd8c:	f04f 0901 	mov.w	r9, #1
 800bd90:	4623      	mov	r3, r4
 800bd92:	469a      	mov	sl, r3
 800bd94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd98:	b10a      	cbz	r2, 800bd9e <_vfiprintf_r+0xa2>
 800bd9a:	2a25      	cmp	r2, #37	; 0x25
 800bd9c:	d1f9      	bne.n	800bd92 <_vfiprintf_r+0x96>
 800bd9e:	ebba 0b04 	subs.w	fp, sl, r4
 800bda2:	d00b      	beq.n	800bdbc <_vfiprintf_r+0xc0>
 800bda4:	465b      	mov	r3, fp
 800bda6:	4622      	mov	r2, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff ff93 	bl	800bcd6 <__sfputs_r>
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	f000 80aa 	beq.w	800bf0a <_vfiprintf_r+0x20e>
 800bdb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb8:	445a      	add	r2, fp
 800bdba:	9209      	str	r2, [sp, #36]	; 0x24
 800bdbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 80a2 	beq.w	800bf0a <_vfiprintf_r+0x20e>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdd0:	f10a 0a01 	add.w	sl, sl, #1
 800bdd4:	9304      	str	r3, [sp, #16]
 800bdd6:	9307      	str	r3, [sp, #28]
 800bdd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bddc:	931a      	str	r3, [sp, #104]	; 0x68
 800bdde:	4654      	mov	r4, sl
 800bde0:	2205      	movs	r2, #5
 800bde2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde6:	4858      	ldr	r0, [pc, #352]	; (800bf48 <_vfiprintf_r+0x24c>)
 800bde8:	f7f4 feca 	bl	8000b80 <memchr>
 800bdec:	9a04      	ldr	r2, [sp, #16]
 800bdee:	b9d8      	cbnz	r0, 800be28 <_vfiprintf_r+0x12c>
 800bdf0:	06d1      	lsls	r1, r2, #27
 800bdf2:	bf44      	itt	mi
 800bdf4:	2320      	movmi	r3, #32
 800bdf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdfa:	0713      	lsls	r3, r2, #28
 800bdfc:	bf44      	itt	mi
 800bdfe:	232b      	movmi	r3, #43	; 0x2b
 800be00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be04:	f89a 3000 	ldrb.w	r3, [sl]
 800be08:	2b2a      	cmp	r3, #42	; 0x2a
 800be0a:	d015      	beq.n	800be38 <_vfiprintf_r+0x13c>
 800be0c:	9a07      	ldr	r2, [sp, #28]
 800be0e:	4654      	mov	r4, sl
 800be10:	2000      	movs	r0, #0
 800be12:	f04f 0c0a 	mov.w	ip, #10
 800be16:	4621      	mov	r1, r4
 800be18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be1c:	3b30      	subs	r3, #48	; 0x30
 800be1e:	2b09      	cmp	r3, #9
 800be20:	d94e      	bls.n	800bec0 <_vfiprintf_r+0x1c4>
 800be22:	b1b0      	cbz	r0, 800be52 <_vfiprintf_r+0x156>
 800be24:	9207      	str	r2, [sp, #28]
 800be26:	e014      	b.n	800be52 <_vfiprintf_r+0x156>
 800be28:	eba0 0308 	sub.w	r3, r0, r8
 800be2c:	fa09 f303 	lsl.w	r3, r9, r3
 800be30:	4313      	orrs	r3, r2
 800be32:	9304      	str	r3, [sp, #16]
 800be34:	46a2      	mov	sl, r4
 800be36:	e7d2      	b.n	800bdde <_vfiprintf_r+0xe2>
 800be38:	9b03      	ldr	r3, [sp, #12]
 800be3a:	1d19      	adds	r1, r3, #4
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	9103      	str	r1, [sp, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	bfbb      	ittet	lt
 800be44:	425b      	neglt	r3, r3
 800be46:	f042 0202 	orrlt.w	r2, r2, #2
 800be4a:	9307      	strge	r3, [sp, #28]
 800be4c:	9307      	strlt	r3, [sp, #28]
 800be4e:	bfb8      	it	lt
 800be50:	9204      	strlt	r2, [sp, #16]
 800be52:	7823      	ldrb	r3, [r4, #0]
 800be54:	2b2e      	cmp	r3, #46	; 0x2e
 800be56:	d10c      	bne.n	800be72 <_vfiprintf_r+0x176>
 800be58:	7863      	ldrb	r3, [r4, #1]
 800be5a:	2b2a      	cmp	r3, #42	; 0x2a
 800be5c:	d135      	bne.n	800beca <_vfiprintf_r+0x1ce>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	1d1a      	adds	r2, r3, #4
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	9203      	str	r2, [sp, #12]
 800be66:	2b00      	cmp	r3, #0
 800be68:	bfb8      	it	lt
 800be6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be6e:	3402      	adds	r4, #2
 800be70:	9305      	str	r3, [sp, #20]
 800be72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf58 <_vfiprintf_r+0x25c>
 800be76:	7821      	ldrb	r1, [r4, #0]
 800be78:	2203      	movs	r2, #3
 800be7a:	4650      	mov	r0, sl
 800be7c:	f7f4 fe80 	bl	8000b80 <memchr>
 800be80:	b140      	cbz	r0, 800be94 <_vfiprintf_r+0x198>
 800be82:	2340      	movs	r3, #64	; 0x40
 800be84:	eba0 000a 	sub.w	r0, r0, sl
 800be88:	fa03 f000 	lsl.w	r0, r3, r0
 800be8c:	9b04      	ldr	r3, [sp, #16]
 800be8e:	4303      	orrs	r3, r0
 800be90:	3401      	adds	r4, #1
 800be92:	9304      	str	r3, [sp, #16]
 800be94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be98:	482c      	ldr	r0, [pc, #176]	; (800bf4c <_vfiprintf_r+0x250>)
 800be9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be9e:	2206      	movs	r2, #6
 800bea0:	f7f4 fe6e 	bl	8000b80 <memchr>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d03f      	beq.n	800bf28 <_vfiprintf_r+0x22c>
 800bea8:	4b29      	ldr	r3, [pc, #164]	; (800bf50 <_vfiprintf_r+0x254>)
 800beaa:	bb1b      	cbnz	r3, 800bef4 <_vfiprintf_r+0x1f8>
 800beac:	9b03      	ldr	r3, [sp, #12]
 800beae:	3307      	adds	r3, #7
 800beb0:	f023 0307 	bic.w	r3, r3, #7
 800beb4:	3308      	adds	r3, #8
 800beb6:	9303      	str	r3, [sp, #12]
 800beb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beba:	443b      	add	r3, r7
 800bebc:	9309      	str	r3, [sp, #36]	; 0x24
 800bebe:	e767      	b.n	800bd90 <_vfiprintf_r+0x94>
 800bec0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bec4:	460c      	mov	r4, r1
 800bec6:	2001      	movs	r0, #1
 800bec8:	e7a5      	b.n	800be16 <_vfiprintf_r+0x11a>
 800beca:	2300      	movs	r3, #0
 800becc:	3401      	adds	r4, #1
 800bece:	9305      	str	r3, [sp, #20]
 800bed0:	4619      	mov	r1, r3
 800bed2:	f04f 0c0a 	mov.w	ip, #10
 800bed6:	4620      	mov	r0, r4
 800bed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bedc:	3a30      	subs	r2, #48	; 0x30
 800bede:	2a09      	cmp	r2, #9
 800bee0:	d903      	bls.n	800beea <_vfiprintf_r+0x1ee>
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0c5      	beq.n	800be72 <_vfiprintf_r+0x176>
 800bee6:	9105      	str	r1, [sp, #20]
 800bee8:	e7c3      	b.n	800be72 <_vfiprintf_r+0x176>
 800beea:	fb0c 2101 	mla	r1, ip, r1, r2
 800beee:	4604      	mov	r4, r0
 800bef0:	2301      	movs	r3, #1
 800bef2:	e7f0      	b.n	800bed6 <_vfiprintf_r+0x1da>
 800bef4:	ab03      	add	r3, sp, #12
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	462a      	mov	r2, r5
 800befa:	4b16      	ldr	r3, [pc, #88]	; (800bf54 <_vfiprintf_r+0x258>)
 800befc:	a904      	add	r1, sp, #16
 800befe:	4630      	mov	r0, r6
 800bf00:	f7fd fd32 	bl	8009968 <_printf_float>
 800bf04:	4607      	mov	r7, r0
 800bf06:	1c78      	adds	r0, r7, #1
 800bf08:	d1d6      	bne.n	800beb8 <_vfiprintf_r+0x1bc>
 800bf0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf0c:	07d9      	lsls	r1, r3, #31
 800bf0e:	d405      	bmi.n	800bf1c <_vfiprintf_r+0x220>
 800bf10:	89ab      	ldrh	r3, [r5, #12]
 800bf12:	059a      	lsls	r2, r3, #22
 800bf14:	d402      	bmi.n	800bf1c <_vfiprintf_r+0x220>
 800bf16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf18:	f7ff f9de 	bl	800b2d8 <__retarget_lock_release_recursive>
 800bf1c:	89ab      	ldrh	r3, [r5, #12]
 800bf1e:	065b      	lsls	r3, r3, #25
 800bf20:	f53f af12 	bmi.w	800bd48 <_vfiprintf_r+0x4c>
 800bf24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf26:	e711      	b.n	800bd4c <_vfiprintf_r+0x50>
 800bf28:	ab03      	add	r3, sp, #12
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <_vfiprintf_r+0x258>)
 800bf30:	a904      	add	r1, sp, #16
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7fd ffa4 	bl	8009e80 <_printf_i>
 800bf38:	e7e4      	b.n	800bf04 <_vfiprintf_r+0x208>
 800bf3a:	bf00      	nop
 800bf3c:	0800c6f4 	.word	0x0800c6f4
 800bf40:	0800c714 	.word	0x0800c714
 800bf44:	0800c6d4 	.word	0x0800c6d4
 800bf48:	0800c88c 	.word	0x0800c88c
 800bf4c:	0800c896 	.word	0x0800c896
 800bf50:	08009969 	.word	0x08009969
 800bf54:	0800bcd7 	.word	0x0800bcd7
 800bf58:	0800c892 	.word	0x0800c892

0800bf5c <_sbrk_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4d06      	ldr	r5, [pc, #24]	; (800bf78 <_sbrk_r+0x1c>)
 800bf60:	2300      	movs	r3, #0
 800bf62:	4604      	mov	r4, r0
 800bf64:	4608      	mov	r0, r1
 800bf66:	602b      	str	r3, [r5, #0]
 800bf68:	f7f6 fa00 	bl	800236c <_sbrk>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d102      	bne.n	800bf76 <_sbrk_r+0x1a>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	b103      	cbz	r3, 800bf76 <_sbrk_r+0x1a>
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	200004a0 	.word	0x200004a0

0800bf7c <__sread>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	460c      	mov	r4, r1
 800bf80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf84:	f000 f8e2 	bl	800c14c <_read_r>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	bfab      	itete	ge
 800bf8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf8e:	89a3      	ldrhlt	r3, [r4, #12]
 800bf90:	181b      	addge	r3, r3, r0
 800bf92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf96:	bfac      	ite	ge
 800bf98:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf9a:	81a3      	strhlt	r3, [r4, #12]
 800bf9c:	bd10      	pop	{r4, pc}

0800bf9e <__swrite>:
 800bf9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa2:	461f      	mov	r7, r3
 800bfa4:	898b      	ldrh	r3, [r1, #12]
 800bfa6:	05db      	lsls	r3, r3, #23
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	460c      	mov	r4, r1
 800bfac:	4616      	mov	r6, r2
 800bfae:	d505      	bpl.n	800bfbc <__swrite+0x1e>
 800bfb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f000 f898 	bl	800c0ec <_lseek_r>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfc6:	81a3      	strh	r3, [r4, #12]
 800bfc8:	4632      	mov	r2, r6
 800bfca:	463b      	mov	r3, r7
 800bfcc:	4628      	mov	r0, r5
 800bfce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd2:	f000 b817 	b.w	800c004 <_write_r>

0800bfd6 <__sseek>:
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	460c      	mov	r4, r1
 800bfda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfde:	f000 f885 	bl	800c0ec <_lseek_r>
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	bf15      	itete	ne
 800bfe8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bff2:	81a3      	strheq	r3, [r4, #12]
 800bff4:	bf18      	it	ne
 800bff6:	81a3      	strhne	r3, [r4, #12]
 800bff8:	bd10      	pop	{r4, pc}

0800bffa <__sclose>:
 800bffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffe:	f000 b831 	b.w	800c064 <_close_r>
	...

0800c004 <_write_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4d07      	ldr	r5, [pc, #28]	; (800c024 <_write_r+0x20>)
 800c008:	4604      	mov	r4, r0
 800c00a:	4608      	mov	r0, r1
 800c00c:	4611      	mov	r1, r2
 800c00e:	2200      	movs	r2, #0
 800c010:	602a      	str	r2, [r5, #0]
 800c012:	461a      	mov	r2, r3
 800c014:	f7f6 f959 	bl	80022ca <_write>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d102      	bne.n	800c022 <_write_r+0x1e>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	b103      	cbz	r3, 800c022 <_write_r+0x1e>
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	200004a0 	.word	0x200004a0

0800c028 <__assert_func>:
 800c028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c02a:	4614      	mov	r4, r2
 800c02c:	461a      	mov	r2, r3
 800c02e:	4b09      	ldr	r3, [pc, #36]	; (800c054 <__assert_func+0x2c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4605      	mov	r5, r0
 800c034:	68d8      	ldr	r0, [r3, #12]
 800c036:	b14c      	cbz	r4, 800c04c <__assert_func+0x24>
 800c038:	4b07      	ldr	r3, [pc, #28]	; (800c058 <__assert_func+0x30>)
 800c03a:	9100      	str	r1, [sp, #0]
 800c03c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c040:	4906      	ldr	r1, [pc, #24]	; (800c05c <__assert_func+0x34>)
 800c042:	462b      	mov	r3, r5
 800c044:	f000 f81e 	bl	800c084 <fiprintf>
 800c048:	f000 f89f 	bl	800c18a <abort>
 800c04c:	4b04      	ldr	r3, [pc, #16]	; (800c060 <__assert_func+0x38>)
 800c04e:	461c      	mov	r4, r3
 800c050:	e7f3      	b.n	800c03a <__assert_func+0x12>
 800c052:	bf00      	nop
 800c054:	2000003c 	.word	0x2000003c
 800c058:	0800c89d 	.word	0x0800c89d
 800c05c:	0800c8aa 	.word	0x0800c8aa
 800c060:	0800c8d8 	.word	0x0800c8d8

0800c064 <_close_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d06      	ldr	r5, [pc, #24]	; (800c080 <_close_r+0x1c>)
 800c068:	2300      	movs	r3, #0
 800c06a:	4604      	mov	r4, r0
 800c06c:	4608      	mov	r0, r1
 800c06e:	602b      	str	r3, [r5, #0]
 800c070:	f7f6 f947 	bl	8002302 <_close>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_close_r+0x1a>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_close_r+0x1a>
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	200004a0 	.word	0x200004a0

0800c084 <fiprintf>:
 800c084:	b40e      	push	{r1, r2, r3}
 800c086:	b503      	push	{r0, r1, lr}
 800c088:	4601      	mov	r1, r0
 800c08a:	ab03      	add	r3, sp, #12
 800c08c:	4805      	ldr	r0, [pc, #20]	; (800c0a4 <fiprintf+0x20>)
 800c08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c092:	6800      	ldr	r0, [r0, #0]
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	f7ff fe31 	bl	800bcfc <_vfiprintf_r>
 800c09a:	b002      	add	sp, #8
 800c09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0a0:	b003      	add	sp, #12
 800c0a2:	4770      	bx	lr
 800c0a4:	2000003c 	.word	0x2000003c

0800c0a8 <_fstat_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	; (800c0c8 <_fstat_r+0x20>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	f7f6 f930 	bl	800231a <_fstat>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d102      	bne.n	800c0c4 <_fstat_r+0x1c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b103      	cbz	r3, 800c0c4 <_fstat_r+0x1c>
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	200004a0 	.word	0x200004a0

0800c0cc <_isatty_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d06      	ldr	r5, [pc, #24]	; (800c0e8 <_isatty_r+0x1c>)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	602b      	str	r3, [r5, #0]
 800c0d8:	f7f6 f92f 	bl	800233a <_isatty>
 800c0dc:	1c43      	adds	r3, r0, #1
 800c0de:	d102      	bne.n	800c0e6 <_isatty_r+0x1a>
 800c0e0:	682b      	ldr	r3, [r5, #0]
 800c0e2:	b103      	cbz	r3, 800c0e6 <_isatty_r+0x1a>
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
 800c0e8:	200004a0 	.word	0x200004a0

0800c0ec <_lseek_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d07      	ldr	r5, [pc, #28]	; (800c10c <_lseek_r+0x20>)
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	4608      	mov	r0, r1
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	602a      	str	r2, [r5, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	f7f6 f928 	bl	8002350 <_lseek>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <_lseek_r+0x1e>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	b103      	cbz	r3, 800c10a <_lseek_r+0x1e>
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	bd38      	pop	{r3, r4, r5, pc}
 800c10c:	200004a0 	.word	0x200004a0

0800c110 <__ascii_mbtowc>:
 800c110:	b082      	sub	sp, #8
 800c112:	b901      	cbnz	r1, 800c116 <__ascii_mbtowc+0x6>
 800c114:	a901      	add	r1, sp, #4
 800c116:	b142      	cbz	r2, 800c12a <__ascii_mbtowc+0x1a>
 800c118:	b14b      	cbz	r3, 800c12e <__ascii_mbtowc+0x1e>
 800c11a:	7813      	ldrb	r3, [r2, #0]
 800c11c:	600b      	str	r3, [r1, #0]
 800c11e:	7812      	ldrb	r2, [r2, #0]
 800c120:	1e10      	subs	r0, r2, #0
 800c122:	bf18      	it	ne
 800c124:	2001      	movne	r0, #1
 800c126:	b002      	add	sp, #8
 800c128:	4770      	bx	lr
 800c12a:	4610      	mov	r0, r2
 800c12c:	e7fb      	b.n	800c126 <__ascii_mbtowc+0x16>
 800c12e:	f06f 0001 	mvn.w	r0, #1
 800c132:	e7f8      	b.n	800c126 <__ascii_mbtowc+0x16>

0800c134 <__malloc_lock>:
 800c134:	4801      	ldr	r0, [pc, #4]	; (800c13c <__malloc_lock+0x8>)
 800c136:	f7ff b8ce 	b.w	800b2d6 <__retarget_lock_acquire_recursive>
 800c13a:	bf00      	nop
 800c13c:	20000494 	.word	0x20000494

0800c140 <__malloc_unlock>:
 800c140:	4801      	ldr	r0, [pc, #4]	; (800c148 <__malloc_unlock+0x8>)
 800c142:	f7ff b8c9 	b.w	800b2d8 <__retarget_lock_release_recursive>
 800c146:	bf00      	nop
 800c148:	20000494 	.word	0x20000494

0800c14c <_read_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d07      	ldr	r5, [pc, #28]	; (800c16c <_read_r+0x20>)
 800c150:	4604      	mov	r4, r0
 800c152:	4608      	mov	r0, r1
 800c154:	4611      	mov	r1, r2
 800c156:	2200      	movs	r2, #0
 800c158:	602a      	str	r2, [r5, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	f7f6 f898 	bl	8002290 <_read>
 800c160:	1c43      	adds	r3, r0, #1
 800c162:	d102      	bne.n	800c16a <_read_r+0x1e>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	b103      	cbz	r3, 800c16a <_read_r+0x1e>
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	bd38      	pop	{r3, r4, r5, pc}
 800c16c:	200004a0 	.word	0x200004a0

0800c170 <__ascii_wctomb>:
 800c170:	b149      	cbz	r1, 800c186 <__ascii_wctomb+0x16>
 800c172:	2aff      	cmp	r2, #255	; 0xff
 800c174:	bf85      	ittet	hi
 800c176:	238a      	movhi	r3, #138	; 0x8a
 800c178:	6003      	strhi	r3, [r0, #0]
 800c17a:	700a      	strbls	r2, [r1, #0]
 800c17c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c180:	bf98      	it	ls
 800c182:	2001      	movls	r0, #1
 800c184:	4770      	bx	lr
 800c186:	4608      	mov	r0, r1
 800c188:	4770      	bx	lr

0800c18a <abort>:
 800c18a:	b508      	push	{r3, lr}
 800c18c:	2006      	movs	r0, #6
 800c18e:	f000 f82b 	bl	800c1e8 <raise>
 800c192:	2001      	movs	r0, #1
 800c194:	f7f6 f872 	bl	800227c <_exit>

0800c198 <_raise_r>:
 800c198:	291f      	cmp	r1, #31
 800c19a:	b538      	push	{r3, r4, r5, lr}
 800c19c:	4604      	mov	r4, r0
 800c19e:	460d      	mov	r5, r1
 800c1a0:	d904      	bls.n	800c1ac <_raise_r+0x14>
 800c1a2:	2316      	movs	r3, #22
 800c1a4:	6003      	str	r3, [r0, #0]
 800c1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1ae:	b112      	cbz	r2, 800c1b6 <_raise_r+0x1e>
 800c1b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b4:	b94b      	cbnz	r3, 800c1ca <_raise_r+0x32>
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f000 f830 	bl	800c21c <_getpid_r>
 800c1bc:	462a      	mov	r2, r5
 800c1be:	4601      	mov	r1, r0
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c6:	f000 b817 	b.w	800c1f8 <_kill_r>
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d00a      	beq.n	800c1e4 <_raise_r+0x4c>
 800c1ce:	1c59      	adds	r1, r3, #1
 800c1d0:	d103      	bne.n	800c1da <_raise_r+0x42>
 800c1d2:	2316      	movs	r3, #22
 800c1d4:	6003      	str	r3, [r0, #0]
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	e7e7      	b.n	800c1aa <_raise_r+0x12>
 800c1da:	2400      	movs	r4, #0
 800c1dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	4798      	blx	r3
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e7e0      	b.n	800c1aa <_raise_r+0x12>

0800c1e8 <raise>:
 800c1e8:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <raise+0xc>)
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	f7ff bfd3 	b.w	800c198 <_raise_r>
 800c1f2:	bf00      	nop
 800c1f4:	2000003c 	.word	0x2000003c

0800c1f8 <_kill_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d07      	ldr	r5, [pc, #28]	; (800c218 <_kill_r+0x20>)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	4608      	mov	r0, r1
 800c202:	4611      	mov	r1, r2
 800c204:	602b      	str	r3, [r5, #0]
 800c206:	f7f6 f829 	bl	800225c <_kill>
 800c20a:	1c43      	adds	r3, r0, #1
 800c20c:	d102      	bne.n	800c214 <_kill_r+0x1c>
 800c20e:	682b      	ldr	r3, [r5, #0]
 800c210:	b103      	cbz	r3, 800c214 <_kill_r+0x1c>
 800c212:	6023      	str	r3, [r4, #0]
 800c214:	bd38      	pop	{r3, r4, r5, pc}
 800c216:	bf00      	nop
 800c218:	200004a0 	.word	0x200004a0

0800c21c <_getpid_r>:
 800c21c:	f7f6 b816 	b.w	800224c <_getpid>

0800c220 <_init>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr

0800c22c <_fini>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr

0800c238 <__timer_delay_veneer>:
 800c238:	f85f f000 	ldr.w	pc, [pc]	; 800c23c <__timer_delay_veneer+0x4>
 800c23c:	00000061 	.word	0x00000061

0800c240 <__start_pop_veneer>:
 800c240:	f85f f000 	ldr.w	pc, [pc]	; 800c244 <__start_pop_veneer+0x4>
 800c244:	0000015d 	.word	0x0000015d

0800c248 <__set_aom_atten_veneer>:
 800c248:	f85f f000 	ldr.w	pc, [pc]	; 800c24c <__set_aom_atten_veneer+0x4>
 800c24c:	000000bd 	.word	0x000000bd

0800c250 <__stop_pop_veneer>:
 800c250:	f85f f000 	ldr.w	pc, [pc]	; 800c254 <__stop_pop_veneer+0x4>
 800c254:	0000020d 	.word	0x0000020d

0800c258 <__run_sweep_veneer>:
 800c258:	f85f f000 	ldr.w	pc, [pc]	; 800c25c <__run_sweep_veneer+0x4>
 800c25c:	00000799 	.word	0x00000799

0800c260 <__init_synthesiser_veneer>:
 800c260:	f85f f000 	ldr.w	pc, [pc]	; 800c264 <__init_synthesiser_veneer+0x4>
 800c264:	000003a3 	.word	0x000003a3

0800c268 <__set_frequency_hz_veneer>:
 800c268:	f85f f000 	ldr.w	pc, [pc]	; 800c26c <__set_frequency_hz_veneer+0x4>
 800c26c:	0000060d 	.word	0x0000060d
