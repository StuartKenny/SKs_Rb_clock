
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         000008f0  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009c80  08000b90  08000b90  00020b90  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000300a0  2**0
                  CONTENTS
  4 .rodata       00000270  0800a810  0800a810  0002a810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800aa80  0800aa80  0002aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0800aa88  0800aa88  0002aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa8c  0800aa8c  0002aa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800aa90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200000a0  0800ab30  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800ab30  00030338  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2c6  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eed  00000000  00000000  0004f394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  00052288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00053a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a30b  00000000  00000000  00055170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c162  00000000  00000000  0008f47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c85a  00000000  00000000  000ab5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00227e37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007080  00000000  00000000  00227e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
PUTCHAR_PROTOTYPE {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
   0:	b580      	push	{r7, lr}
   2:	b08a      	sub	sp, #40	; 0x28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
   a:	607a      	str	r2, [r7, #4]
   c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
   e:	2300      	movs	r3, #0
  10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
  12:	68fb      	ldr	r3, [r7, #12]
  14:	021a      	lsls	r2, r3, #8
  16:	68bb      	ldr	r3, [r7, #8]
  18:	00db      	lsls	r3, r3, #3
  1a:	4313      	orrs	r3, r2
  1c:	687a      	ldr	r2, [r7, #4]
  1e:	4313      	orrs	r3, r2
  20:	61fb      	str	r3, [r7, #28]

	//printf("SPI BYTES WRITTEN: 0x%08x \n", write_data);

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  22:	2200      	movs	r2, #0
  24:	f44f 7180 	mov.w	r1, #256	; 0x100
  28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
  2a:	f000 fc51 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
  2e:	2200      	movs	r2, #0
  30:	f44f 6100 	mov.w	r1, #2048	; 0x800
  34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
  36:	f000 fc4b 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  3a:	2300      	movs	r3, #0
  3c:	623b      	str	r3, [r7, #32]
  3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
  40:	2220      	movs	r2, #32
  42:	6a3b      	ldr	r3, [r7, #32]
  44:	1ad3      	subs	r3, r2, r3
  46:	3b01      	subs	r3, #1
  48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
  4a:	2201      	movs	r2, #1
  4c:	697b      	ldr	r3, [r7, #20]
  4e:	fa02 f303 	lsl.w	r3, r2, r3
  52:	461a      	mov	r2, r3
  54:	69fb      	ldr	r3, [r7, #28]
  56:	4013      	ands	r3, r2
  58:	2b00      	cmp	r3, #0
  5a:	bf14      	ite	ne
  5c:	2301      	movne	r3, #1
  5e:	2300      	moveq	r3, #0
  60:	b2db      	uxtb	r3, r3
  62:	461a      	mov	r2, r3
  64:	f44f 7100 	mov.w	r1, #512	; 0x200
  68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
  6a:	f000 fc31 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
  6e:	2201      	movs	r2, #1
  70:	f44f 7180 	mov.w	r1, #256	; 0x100
  74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
  76:	f000 fc2b 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  7a:	2200      	movs	r2, #0
  7c:	f44f 7180 	mov.w	r1, #256	; 0x100
  80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
  82:	f000 fc25 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
  86:	f44f 6180 	mov.w	r1, #1024	; 0x400
  8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
  8c:	f000 fc10 	bl	8b0 <__HAL_GPIO_ReadPin_veneer>
  90:	4603      	mov	r3, r0
  92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
  94:	2220      	movs	r2, #32
  96:	6a3b      	ldr	r3, [r7, #32]
  98:	1ad3      	subs	r3, r2, r3
  9a:	3b01      	subs	r3, #1
  9c:	fa01 f303 	lsl.w	r3, r1, r3
  a0:	461a      	mov	r2, r3
		read_data = read_data
  a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  a4:	4313      	orrs	r3, r2
  a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  a8:	6a3b      	ldr	r3, [r7, #32]
  aa:	3301      	adds	r3, #1
  ac:	623b      	str	r3, [r7, #32]
  ae:	2220      	movs	r2, #32
  b0:	6a3b      	ldr	r3, [r7, #32]
  b2:	4293      	cmp	r3, r2
  b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
  b6:	2201      	movs	r2, #1
  b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
  be:	f000 fc07 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
  c2:	78fb      	ldrb	r3, [r7, #3]
  c4:	2b00      	cmp	r3, #0
  c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
  c8:	68b8      	ldr	r0, [r7, #8]
  ca:	f000 f813 	bl	f4 <synth_readreg>
  ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
  d0:	69ba      	ldr	r2, [r7, #24]
  d2:	68fb      	ldr	r3, [r7, #12]
  d4:	429a      	cmp	r2, r3
  d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
  d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
  da:	f000 fbdd 	bl	898 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
  de:	f000 fc03 	bl	8e8 <__Error_Handler_veneer>
		}
	}

	return read_data;
  e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  e4:	4618      	mov	r0, r3
  e6:	3728      	adds	r7, #40	; 0x28
  e8:	46bd      	mov	sp, r7
  ea:	bd80      	pop	{r7, pc}
  ec:	58020800 	.word	0x58020800
  f0:	0800a810 	.word	0x0800a810

000000f4 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
  f4:	b580      	push	{r7, lr}
  f6:	b084      	sub	sp, #16
  f8:	af00      	add	r7, sp, #0
  fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, false); // First cycle to send the read address
  fc:	2300      	movs	r3, #0
  fe:	2200      	movs	r2, #0
 100:	2100      	movs	r1, #0
 102:	6878      	ldr	r0, [r7, #4]
 104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, false);  // Data returned on the second cycle
 108:	2300      	movs	r3, #0
 10a:	2200      	movs	r2, #0
 10c:	2100      	movs	r1, #0
 10e:	6878      	ldr	r0, [r7, #4]
 110:	f7ff ff76 	bl	0 <synth_writereg>
 114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 116:	68fb      	ldr	r3, [r7, #12]
 118:	0a1b      	lsrs	r3, r3, #8

}
 11a:	4618      	mov	r0, r3
 11c:	3710      	adds	r7, #16
 11e:	46bd      	mov	sp, r7
 120:	bd80      	pop	{r7, pc}

00000122 <init_synthesiser>:

static uint32_t init_synthesiser() {
 122:	b580      	push	{r7, lr}
 124:	b082      	sub	sp, #8
 126:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the lock LED
 128:	2200      	movs	r2, #0
 12a:	2102      	movs	r1, #2
 12c:	4835      	ldr	r0, [pc, #212]	; (204 <_Min_Heap_Size+0x4>)
 12e:	f000 fbcf 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 132:	2200      	movs	r2, #0
 134:	f44f 7180 	mov.w	r1, #256	; 0x100
 138:	4833      	ldr	r0, [pc, #204]	; (208 <_Min_Heap_Size+0x8>)
 13a:	f000 fbc9 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 13e:	2201      	movs	r2, #1
 140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 144:	4830      	ldr	r0, [pc, #192]	; (208 <_Min_Heap_Size+0x8>)
 146:	f000 fbc3 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 14a:	2201      	movs	r2, #1
 14c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 150:	482d      	ldr	r0, [pc, #180]	; (208 <_Min_Heap_Size+0x8>)
 152:	f000 fbbd 	bl	8d0 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 156:	2064      	movs	r0, #100	; 0x64
 158:	f000 fbae 	bl	8b8 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, 0x0, 0x0, false); // Soft reset.
 15c:	2300      	movs	r3, #0
 15e:	2200      	movs	r2, #0
 160:	2100      	movs	r1, #0
 162:	2020      	movs	r0, #32
 164:	f7ff ff4c 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, 0x08, 0x0, true); // Set the SDO output level to 3.3 Volts
 168:	2301      	movs	r3, #1
 16a:	2200      	movs	r2, #0
 16c:	2108      	movs	r1, #8
 16e:	4827      	ldr	r0, [pc, #156]	; (20c <_Min_Heap_Size+0xc>)
 170:	f7ff ff46 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(0x00); // Read the ID register to check the chip is communicating
 174:	2000      	movs	r0, #0
 176:	f7ff ffbd 	bl	f4 <synth_readreg>
 17a:	6078      	str	r0, [r7, #4]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 17c:	4a24      	ldr	r2, [pc, #144]	; (210 <_Min_Heap_Size+0x10>)
 17e:	687b      	ldr	r3, [r7, #4]
 180:	4293      	cmp	r3, r2
 182:	d00a      	beq.n	19a <init_synthesiser+0x78>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 184:	2200      	movs	r2, #0
 186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 18a:	481f      	ldr	r0, [pc, #124]	; (208 <_Min_Heap_Size+0x8>)
 18c:	f000 fba0 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 190:	4820      	ldr	r0, [pc, #128]	; (214 <_Min_Heap_Size+0x14>)
 192:	f000 fb81 	bl	898 <__puts_veneer>
		return ERROR;
 196:	2301      	movs	r3, #1
 198:	e030      	b.n	1fc <init_synthesiser+0xda>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 19a:	481f      	ldr	r0, [pc, #124]	; (218 <_Min_Heap_Size+0x18>)
 19c:	f000 fb7c 	bl	898 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(0x17); // Get the current value of the modes register
 1a0:	2017      	movs	r0, #23
 1a2:	f7ff ffa7 	bl	f4 <synth_readreg>
 1a6:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 1a8:	687b      	ldr	r3, [r7, #4]
 1aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 1ae:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, 0x17, 0x0, true); // Send
 1b0:	2301      	movs	r3, #1
 1b2:	2200      	movs	r2, #0
 1b4:	2117      	movs	r1, #23
 1b6:	6878      	ldr	r0, [r7, #4]
 1b8:	f7ff ff22 	bl	0 <synth_writereg>
	//read_data = synth_readreg(0x7); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, 0x07, 0x0, true); // Update the VCO divide register.

	synth_writereg(1, 0x02, 0x0, true); // Reference divider setting.
 1bc:	2301      	movs	r3, #1
 1be:	2200      	movs	r2, #0
 1c0:	2102      	movs	r1, #2
 1c2:	2001      	movs	r0, #1
 1c4:	f7ff ff1c 	bl	0 <synth_writereg>

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(0x16); // Get the current value
 1c8:	2016      	movs	r0, #22
 1ca:	f7ff ff93 	bl	f4 <synth_readreg>
 1ce:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 1d0:	687b      	ldr	r3, [r7, #4]
 1d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 1d6:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 1d8:	687b      	ldr	r3, [r7, #4]
 1da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 1de:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 1e0:	687b      	ldr	r3, [r7, #4]
 1e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1e6:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, 0x07, 0x0, true); // Send
 1e8:	2301      	movs	r3, #1
 1ea:	2200      	movs	r2, #0
 1ec:	2107      	movs	r1, #7
 1ee:	6878      	ldr	r0, [r7, #4]
 1f0:	f7ff ff06 	bl	0 <synth_writereg>
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 1f4:	200a      	movs	r0, #10
 1f6:	f000 fb5f 	bl	8b8 <__HAL_Delay_veneer>

	return SUCCESS;
 1fa:	2300      	movs	r3, #0

}
 1fc:	4618      	mov	r0, r3
 1fe:	3708      	adds	r7, #8
 200:	46bd      	mov	sp, r7
 202:	bd80      	pop	{r7, pc}
 204:	58021000 	.word	0x58021000
 208:	58020800 	.word	0x58020800
 20c:	0041bfff 	.word	0x0041bfff
 210:	00c7701a 	.word	0x00c7701a
 214:	0800a828 	.word	0x0800a828
 218:	0800a844 	.word	0x0800a844

0000021c <check_lock>:

static const bool check_lock(uint32_t timeout) {
 21c:	b580      	push	{r7, lr}
 21e:	b084      	sub	sp, #16
 220:	af00      	add	r7, sp, #0
 222:	6078      	str	r0, [r7, #4]

	bool locked = false;
 224:	2300      	movs	r3, #0
 226:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 228:	4b16      	ldr	r3, [pc, #88]	; (284 <check_lock+0x68>)
 22a:	681b      	ldr	r3, [r3, #0]
 22c:	4618      	mov	r0, r3
 22e:	f000 fa0f 	bl	650 <start_timer>
 232:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 234:	e014      	b.n	260 <check_lock+0x44>
		locked = synth_readreg(0x12) & (1UL << 1);
 236:	2012      	movs	r0, #18
 238:	f7ff ff5c 	bl	f4 <synth_readreg>
 23c:	4603      	mov	r3, r0
 23e:	f003 0302 	and.w	r3, r3, #2
 242:	2b00      	cmp	r3, #0
 244:	bf14      	ite	ne
 246:	2301      	movne	r3, #1
 248:	2300      	moveq	r3, #0
 24a:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 24c:	7bfb      	ldrb	r3, [r7, #15]
 24e:	2b00      	cmp	r3, #0
 250:	d006      	beq.n	260 <check_lock+0x44>
			stop_timer(FAST_TIMER);
 252:	4b0c      	ldr	r3, [pc, #48]	; (284 <check_lock+0x68>)
 254:	681b      	ldr	r3, [r3, #0]
 256:	4618      	mov	r0, r3
 258:	f000 fa18 	bl	68c <stop_timer>
			return true;
 25c:	2301      	movs	r3, #1
 25e:	e00d      	b.n	27c <check_lock+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 260:	4b08      	ldr	r3, [pc, #32]	; (284 <check_lock+0x68>)
 262:	681b      	ldr	r3, [r3, #0]
 264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 266:	68bb      	ldr	r3, [r7, #8]
 268:	1ad3      	subs	r3, r2, r3
 26a:	687a      	ldr	r2, [r7, #4]
 26c:	429a      	cmp	r2, r3
 26e:	d8e2      	bhi.n	236 <check_lock+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 270:	4b04      	ldr	r3, [pc, #16]	; (284 <check_lock+0x68>)
 272:	681b      	ldr	r3, [r3, #0]
 274:	4618      	mov	r0, r3
 276:	f000 fa09 	bl	68c <stop_timer>
	return false;
 27a:	2300      	movs	r3, #0
}
 27c:	4618      	mov	r0, r3
 27e:	3710      	adds	r7, #16
 280:	46bd      	mov	sp, r7
 282:	bd80      	pop	{r7, pc}
 284:	20000004 	.word	0x20000004

00000288 <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 288:	b580      	push	{r7, lr}
 28a:	b086      	sub	sp, #24
 28c:	af00      	add	r7, sp, #0
 28e:	60f8      	str	r0, [r7, #12]
 290:	60b9      	str	r1, [r7, #8]
 292:	607a      	str	r2, [r7, #4]
 294:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 296:	2300      	movs	r3, #0
 298:	617b      	str	r3, [r7, #20]

	if (mute) {
 29a:	78fb      	ldrb	r3, [r7, #3]
 29c:	2b00      	cmp	r3, #0
 29e:	d00d      	beq.n	2bc <set_frequency+0x34>
		/* Mute the outputs */
		read_data = synth_readreg(0x16); // Get the current value.
 2a0:	2016      	movs	r0, #22
 2a2:	f7ff ff27 	bl	f4 <synth_readreg>
 2a6:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 2a8:	697b      	ldr	r3, [r7, #20]
 2aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 2ae:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
 2b0:	2301      	movs	r3, #1
 2b2:	2200      	movs	r2, #0
 2b4:	2116      	movs	r1, #22
 2b6:	6978      	ldr	r0, [r7, #20]
 2b8:	f7ff fea2 	bl	0 <synth_writereg>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <set_frequency+0xf0>)
 2be:	681b      	ldr	r3, [r3, #0]
 2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 2c4:	d004      	beq.n	2d0 <set_frequency+0x48>
 2c6:	4b2c      	ldr	r3, [pc, #176]	; (378 <set_frequency+0xf0>)
 2c8:	681b      	ldr	r3, [r3, #0]
 2ca:	68fa      	ldr	r2, [r7, #12]
 2cc:	429a      	cmp	r2, r3
 2ce:	d008      	beq.n	2e2 <set_frequency+0x5a>
		synth_writereg(integer, 0x03, 0x0, true);   // Integer register.
 2d0:	2301      	movs	r3, #1
 2d2:	2200      	movs	r2, #0
 2d4:	2103      	movs	r1, #3
 2d6:	68f8      	ldr	r0, [r7, #12]
 2d8:	f7ff fe92 	bl	0 <synth_writereg>
		last_integer = integer;
 2dc:	4a26      	ldr	r2, [pc, #152]	; (378 <set_frequency+0xf0>)
 2de:	68fb      	ldr	r3, [r7, #12]
 2e0:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 2e2:	4b26      	ldr	r3, [pc, #152]	; (37c <set_frequency+0xf4>)
 2e4:	681b      	ldr	r3, [r3, #0]
 2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 2ea:	d004      	beq.n	2f6 <set_frequency+0x6e>
 2ec:	4b23      	ldr	r3, [pc, #140]	; (37c <set_frequency+0xf4>)
 2ee:	681b      	ldr	r3, [r3, #0]
 2f0:	68ba      	ldr	r2, [r7, #8]
 2f2:	429a      	cmp	r2, r3
 2f4:	d008      	beq.n	308 <set_frequency+0x80>
		synth_writereg(fraction, 0x04, 0x0, true);  // Fractional register.
 2f6:	2301      	movs	r3, #1
 2f8:	2200      	movs	r2, #0
 2fa:	2104      	movs	r1, #4
 2fc:	68b8      	ldr	r0, [r7, #8]
 2fe:	f7ff fe7f 	bl	0 <synth_writereg>
		last_fraction = fraction;
 302:	4a1e      	ldr	r2, [pc, #120]	; (37c <set_frequency+0xf4>)
 304:	68bb      	ldr	r3, [r7, #8]
 306:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
 308:	4b1d      	ldr	r3, [pc, #116]	; (380 <set_frequency+0xf8>)
 30a:	681b      	ldr	r3, [r3, #0]
 30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 310:	d004      	beq.n	31c <set_frequency+0x94>
 312:	4b1b      	ldr	r3, [pc, #108]	; (380 <set_frequency+0xf8>)
 314:	681b      	ldr	r3, [r3, #0]
 316:	687a      	ldr	r2, [r7, #4]
 318:	429a      	cmp	r2, r3
 31a:	d014      	beq.n	346 <set_frequency+0xbe>
		read_data = synth_readreg(0x16); // Get the current value.
 31c:	2016      	movs	r0, #22
 31e:	f7ff fee9 	bl	f4 <synth_readreg>
 322:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 324:	697b      	ldr	r3, [r7, #20]
 326:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 32a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will un-mute the outputs */
 32c:	697a      	ldr	r2, [r7, #20]
 32e:	687b      	ldr	r3, [r7, #4]
 330:	4313      	orrs	r3, r2
 332:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
 334:	2301      	movs	r3, #1
 336:	2200      	movs	r2, #0
 338:	2116      	movs	r1, #22
 33a:	6978      	ldr	r0, [r7, #20]
 33c:	f7ff fe60 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
 340:	4a0f      	ldr	r2, [pc, #60]	; (380 <set_frequency+0xf8>)
 342:	687b      	ldr	r3, [r7, #4]
 344:	6013      	str	r3, [r2, #0]
	}

	if (!check_lock(LOCK_WAIT_US)) {
 346:	230a      	movs	r3, #10
 348:	4618      	mov	r0, r3
 34a:	f7ff ff67 	bl	21c <check_lock>
 34e:	4603      	mov	r3, r0
 350:	f083 0301 	eor.w	r3, r3, #1
 354:	b2db      	uxtb	r3, r3
 356:	2b00      	cmp	r3, #0
 358:	d009      	beq.n	36e <set_frequency+0xe6>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 35a:	2200      	movs	r2, #0
 35c:	2102      	movs	r1, #2
 35e:	4809      	ldr	r0, [pc, #36]	; (384 <set_frequency+0xfc>)
 360:	f000 fab6 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
		printf("Lock failed!\r\n");
 364:	4808      	ldr	r0, [pc, #32]	; (388 <set_frequency+0x100>)
 366:	f000 fa97 	bl	898 <__puts_veneer>
		Error_Handler();
 36a:	f000 fabd 	bl	8e8 <__Error_Handler_veneer>
	}

}
 36e:	bf00      	nop
 370:	3718      	adds	r7, #24
 372:	46bd      	mov	sp, r7
 374:	bd80      	pop	{r7, pc}
 376:	bf00      	nop
 378:	20000008 	.word	0x20000008
 37c:	2000000c 	.word	0x2000000c
 380:	20000010 	.word	0x20000010
 384:	58021000 	.word	0x58021000
 388:	0800a858 	.word	0x0800a858

0000038c <set_frequency_hz>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}

static void set_frequency_hz(const double fo) {
 38c:	b580      	push	{r7, lr}
 38e:	b08a      	sub	sp, #40	; 0x28
 390:	af00      	add	r7, sp, #0
 392:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 396:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 488 <_Min_Stack_Size+0x88>
 39a:	ed97 6b00 	vldr	d6, [r7]
 39e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 3a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 3a6:	ee17 3a90 	vmov	r3, s15
 3aa:	627b      	str	r3, [r7, #36]	; 0x24

	if (k != 1) {
 3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3ae:	2b01      	cmp	r3, #1
 3b0:	d00b      	beq.n	3ca <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 3b2:	e002      	b.n	3ba <set_frequency_hz+0x2e>
			k = k - 1;
 3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3b6:	3b01      	subs	r3, #1
 3b8:	627b      	str	r3, [r7, #36]	; 0x24
		while (k > 62 || k % 2) {
 3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3bc:	2b3e      	cmp	r3, #62	; 0x3e
 3be:	d8f9      	bhi.n	3b4 <set_frequency_hz+0x28>
 3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3c2:	f003 0301 	and.w	r3, r3, #1
 3c6:	2b00      	cmp	r3, #0
 3c8:	d1f4      	bne.n	3b4 <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3cc:	ee07 3a90 	vmov	s15, r3
 3d0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 3d4:	ed97 7b00 	vldr	d7, [r7]
 3d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 3dc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 490 <_Min_Stack_Size+0x90>
 3e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 3e4:	ed87 7b06 	vstr	d7, [r7, #24]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 3e8:	ed97 7b06 	vldr	d7, [r7, #24]
 3ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 3f0:	ee17 3a90 	vmov	r3, s15
 3f4:	617b      	str	r3, [r7, #20]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 3f6:	697b      	ldr	r3, [r7, #20]
 3f8:	ee07 3a90 	vmov	s15, r3
 3fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 400:	ed97 6b06 	vldr	d6, [r7, #24]
 404:	ee36 7b47 	vsub.f64	d7, d6, d7
 408:	ed9f 6b23 	vldr	d6, [pc, #140]	; 498 <_Min_Stack_Size+0x98>
 40c:	ee27 7b06 	vmul.f64	d7, d7, d6
 410:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 414:	ee37 7b06 	vadd.f64	d7, d7, d6
 418:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 41c:	ee17 3a90 	vmov	r3, s15
 420:	613b      	str	r3, [r7, #16]

	const double fo_check = (REF_FREQ * (NINT + (NFRAC / (double) (1 << 24)))) / k;
 422:	697b      	ldr	r3, [r7, #20]
 424:	ee07 3a90 	vmov	s15, r3
 428:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 42c:	693b      	ldr	r3, [r7, #16]
 42e:	ee07 3a90 	vmov	s15, r3
 432:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 436:	ed9f 4b18 	vldr	d4, [pc, #96]	; 498 <_Min_Stack_Size+0x98>
 43a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 43e:	ee36 7b07 	vadd.f64	d7, d6, d7
 442:	ed9f 6b13 	vldr	d6, [pc, #76]	; 490 <_Min_Stack_Size+0x90>
 446:	ee27 5b06 	vmul.f64	d5, d7, d6
 44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 44c:	ee07 3a90 	vmov	s15, r3
 450:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 454:	ee85 7b06 	vdiv.f64	d7, d5, d6
 458:	ed87 7b02 	vstr	d7, [r7, #8]
	if (fo != fo_check) {
 45c:	ed97 6b00 	vldr	d6, [r7]
 460:	ed97 7b02 	vldr	d7, [r7, #8]
 464:	eeb4 6b47 	vcmp.f64	d6, d7
 468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 46c:	d001      	beq.n	472 <_Min_Stack_Size+0x72>
		Error_Handler();
 46e:	f000 fa3b 	bl	8e8 <__Error_Handler_veneer>
	}

	set_frequency(NINT, NFRAC, k, false);
 472:	2300      	movs	r3, #0
 474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 476:	6939      	ldr	r1, [r7, #16]
 478:	6978      	ldr	r0, [r7, #20]
 47a:	f7ff ff05 	bl	288 <set_frequency>

}
 47e:	bf00      	nop
 480:	3728      	adds	r7, #40	; 0x28
 482:	46bd      	mov	sp, r7
 484:	bd80      	pop	{r7, pc}
 486:	bf00      	nop
 488:	20000000 	.word	0x20000000
 48c:	41ee8c21 	.word	0x41ee8c21
 490:	00000000 	.word	0x00000000
 494:	4187d784 	.word	0x4187d784
 498:	00000000 	.word	0x00000000
 49c:	41700000 	.word	0x41700000

000004a0 <run_sweep>:
static void run_sweep() {
 4a0:	b580      	push	{r7, lr}
 4a2:	b08e      	sub	sp, #56	; 0x38
 4a4:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 4a6:	2201      	movs	r2, #1
 4a8:	2102      	movs	r1, #2
 4aa:	4863      	ldr	r0, [pc, #396]	; (638 <run_sweep+0x198>)
 4ac:	f000 fa10 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 4b0:	b672      	cpsid	i
}
 4b2:	bf00      	nop
	for (uint32_t i = 0; i < num_points; i++) {
 4b4:	2300      	movs	r3, #0
 4b6:	627b      	str	r3, [r7, #36]	; 0x24
 4b8:	e09b      	b.n	5f2 <run_sweep+0x152>
		double fo = start_freq + (i * sweep_settings.step_size);
 4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 4bc:	ee07 3a90 	vmov	s15, r3
 4c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 4c4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 618 <run_sweep+0x178>
 4c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 4cc:	4b5b      	ldr	r3, [pc, #364]	; (63c <run_sweep+0x19c>)
 4ce:	ed93 7b00 	vldr	d7, [r3]
 4d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 4d6:	ed87 7b06 	vstr	d7, [r7, #24]
		uint32_t k = VCO_MAX_FREQ / fo;
 4da:	ed9f 5b51 	vldr	d5, [pc, #324]	; 620 <run_sweep+0x180>
 4de:	ed97 6b06 	vldr	d6, [r7, #24]
 4e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 4e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 4ea:	ee17 3a90 	vmov	r3, s15
 4ee:	623b      	str	r3, [r7, #32]
		if (k != 1) {
 4f0:	6a3b      	ldr	r3, [r7, #32]
 4f2:	2b01      	cmp	r3, #1
 4f4:	d00b      	beq.n	50e <run_sweep+0x6e>
			while (k > 62 || k % 2) {
 4f6:	e002      	b.n	4fe <run_sweep+0x5e>
				k = k - 1;
 4f8:	6a3b      	ldr	r3, [r7, #32]
 4fa:	3b01      	subs	r3, #1
 4fc:	623b      	str	r3, [r7, #32]
			while (k > 62 || k % 2) {
 4fe:	6a3b      	ldr	r3, [r7, #32]
 500:	2b3e      	cmp	r3, #62	; 0x3e
 502:	d8f9      	bhi.n	4f8 <run_sweep+0x58>
 504:	6a3b      	ldr	r3, [r7, #32]
 506:	f003 0301 	and.w	r3, r3, #1
 50a:	2b00      	cmp	r3, #0
 50c:	d1f4      	bne.n	4f8 <run_sweep+0x58>
		const double N = ((fo * k) / REF_FREQ);
 50e:	6a3b      	ldr	r3, [r7, #32]
 510:	ee07 3a90 	vmov	s15, r3
 514:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 518:	ed97 7b06 	vldr	d7, [r7, #24]
 51c:	ee26 6b07 	vmul.f64	d6, d6, d7
 520:	ed9f 5b41 	vldr	d5, [pc, #260]	; 628 <run_sweep+0x188>
 524:	ee86 7b05 	vdiv.f64	d7, d6, d5
 528:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t NINT = N;
 52c:	ed97 7b04 	vldr	d7, [r7, #16]
 530:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 534:	ee17 3a90 	vmov	r3, s15
 538:	60fb      	str	r3, [r7, #12]
		const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 53a:	68fb      	ldr	r3, [r7, #12]
 53c:	ee07 3a90 	vmov	s15, r3
 540:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 544:	ed97 6b04 	vldr	d6, [r7, #16]
 548:	ee36 7b47 	vsub.f64	d7, d6, d7
 54c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 630 <run_sweep+0x190>
 550:	ee27 7b06 	vmul.f64	d7, d7, d6
 554:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 558:	ee37 7b06 	vadd.f64	d7, d7, d6
 55c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 560:	ee17 3a90 	vmov	r3, s15
 564:	60bb      	str	r3, [r7, #8]
		const double fo_check = (REF_FREQ * (NINT + (NFRAC / (double) (1 << 24)))) / k;
 566:	68fb      	ldr	r3, [r7, #12]
 568:	ee07 3a90 	vmov	s15, r3
 56c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 570:	68bb      	ldr	r3, [r7, #8]
 572:	ee07 3a90 	vmov	s15, r3
 576:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 57a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 630 <run_sweep+0x190>
 57e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 582:	ee36 7b07 	vadd.f64	d7, d6, d7
 586:	ed9f 6b28 	vldr	d6, [pc, #160]	; 628 <run_sweep+0x188>
 58a:	ee27 5b06 	vmul.f64	d5, d7, d6
 58e:	6a3b      	ldr	r3, [r7, #32]
 590:	ee07 3a90 	vmov	s15, r3
 594:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 598:	ee85 7b06 	vdiv.f64	d7, d5, d6
 59c:	ed87 7b00 	vstr	d7, [r7]
		if (fo != fo_check) {
 5a0:	ed97 6b06 	vldr	d6, [r7, #24]
 5a4:	ed97 7b00 	vldr	d7, [r7]
 5a8:	eeb4 6b47 	vcmp.f64	d6, d7
 5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 5b0:	d001      	beq.n	5b6 <run_sweep+0x116>
			Error_Handler();
 5b2:	f000 f999 	bl	8e8 <__Error_Handler_veneer>
		printf("Setting frequency: k=%ld; N=%.17g; NINT=%ld; NFRAC=%ld; f=%.17g Hz\r\n", k,N, NINT, NFRAC, fo);
 5b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 5ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 5be:	68bb      	ldr	r3, [r7, #8]
 5c0:	9301      	str	r3, [sp, #4]
 5c2:	68fb      	ldr	r3, [r7, #12]
 5c4:	9300      	str	r3, [sp, #0]
 5c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 5ca:	6a39      	ldr	r1, [r7, #32]
 5cc:	481c      	ldr	r0, [pc, #112]	; (640 <run_sweep+0x1a0>)
 5ce:	f000 f967 	bl	8a0 <__printf_veneer>
		set_frequency(NINT, NFRAC, k, false);
 5d2:	2300      	movs	r3, #0
 5d4:	6a3a      	ldr	r2, [r7, #32]
 5d6:	68b9      	ldr	r1, [r7, #8]
 5d8:	68f8      	ldr	r0, [r7, #12]
 5da:	f7ff fe55 	bl	288 <set_frequency>
		timer_delay(FAST_TIMER, DWELL_TIME_US);
 5de:	4b19      	ldr	r3, [pc, #100]	; (644 <run_sweep+0x1a4>)
 5e0:	681b      	ldr	r3, [r3, #0]
 5e2:	2264      	movs	r2, #100	; 0x64
 5e4:	4611      	mov	r1, r2
 5e6:	4618      	mov	r0, r3
 5e8:	f000 f862 	bl	6b0 <timer_delay>
	for (uint32_t i = 0; i < num_points; i++) {
 5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 5ee:	3301      	adds	r3, #1
 5f0:	627b      	str	r3, [r7, #36]	; 0x24
 5f2:	4b15      	ldr	r3, [pc, #84]	; (648 <run_sweep+0x1a8>)
 5f4:	681b      	ldr	r3, [r3, #0]
 5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 5f8:	429a      	cmp	r2, r3
 5fa:	f4ff af5e 	bcc.w	4ba <run_sweep+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 5fe:	b662      	cpsie	i
}
 600:	bf00      	nop
	printf("Total Points: %lu; s\r\n", num_points);
 602:	4b11      	ldr	r3, [pc, #68]	; (648 <run_sweep+0x1a8>)
 604:	681b      	ldr	r3, [r3, #0]
 606:	4619      	mov	r1, r3
 608:	4810      	ldr	r0, [pc, #64]	; (64c <run_sweep+0x1ac>)
 60a:	f000 f949 	bl	8a0 <__printf_veneer>
}
 60e:	bf00      	nop
 610:	3728      	adds	r7, #40	; 0x28
 612:	46bd      	mov	sp, r7
 614:	bd80      	pop	{r7, pc}
 616:	bf00      	nop
 618:	00000000 	.word	0x00000000
 61c:	4007d784 	.word	0x4007d784
 620:	20000000 	.word	0x20000000
 624:	41ee8c21 	.word	0x41ee8c21
 628:	00000000 	.word	0x00000000
 62c:	4187d784 	.word	0x4187d784
 630:	00000000 	.word	0x00000000
 634:	41700000 	.word	0x41700000
 638:	58021000 	.word	0x58021000
 63c:	0800a998 	.word	0x0800a998
 640:	0800a868 	.word	0x0800a868
 644:	20000004 	.word	0x20000004
 648:	0800a9a0 	.word	0x0800a9a0
 64c:	0800a8b0 	.word	0x0800a8b0

00000650 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);

}

static uint32_t start_timer(TIM_TypeDef * timer) {
 650:	b480      	push	{r7}
 652:	b083      	sub	sp, #12
 654:	af00      	add	r7, sp, #0
 656:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 658:	687b      	ldr	r3, [r7, #4]
 65a:	681b      	ldr	r3, [r3, #0]
 65c:	f023 0201 	bic.w	r2, r3, #1
 660:	687b      	ldr	r3, [r7, #4]
 662:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 664:	687b      	ldr	r3, [r7, #4]
 666:	695b      	ldr	r3, [r3, #20]
 668:	f043 0201 	orr.w	r2, r3, #1
 66c:	687b      	ldr	r3, [r7, #4]
 66e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
 670:	687b      	ldr	r3, [r7, #4]
 672:	681b      	ldr	r3, [r3, #0]
 674:	f043 0201 	orr.w	r2, r3, #1
 678:	687b      	ldr	r3, [r7, #4]
 67a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 67c:	687b      	ldr	r3, [r7, #4]
 67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 680:	4618      	mov	r0, r3
 682:	370c      	adds	r7, #12
 684:	46bd      	mov	sp, r7
 686:	f85d 7b04 	ldr.w	r7, [sp], #4
 68a:	4770      	bx	lr

0000068c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
 68c:	b480      	push	{r7}
 68e:	b083      	sub	sp, #12
 690:	af00      	add	r7, sp, #0
 692:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 694:	687b      	ldr	r3, [r7, #4]
 696:	681b      	ldr	r3, [r3, #0]
 698:	f023 0201 	bic.w	r2, r3, #1
 69c:	687b      	ldr	r3, [r7, #4]
 69e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 6a0:	687b      	ldr	r3, [r7, #4]
 6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 6a4:	4618      	mov	r0, r3
 6a6:	370c      	adds	r7, #12
 6a8:	46bd      	mov	sp, r7
 6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 6ae:	4770      	bx	lr

000006b0 <timer_delay>:

static void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
 6b0:	b480      	push	{r7}
 6b2:	b085      	sub	sp, #20
 6b4:	af00      	add	r7, sp, #0
 6b6:	6078      	str	r0, [r7, #4]
 6b8:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
 6ba:	687b      	ldr	r3, [r7, #4]
 6bc:	681b      	ldr	r3, [r3, #0]
 6be:	f023 0201 	bic.w	r2, r3, #1
 6c2:	687b      	ldr	r3, [r7, #4]
 6c4:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 6c6:	687b      	ldr	r3, [r7, #4]
 6c8:	695b      	ldr	r3, [r3, #20]
 6ca:	f043 0201 	orr.w	r2, r3, #1
 6ce:	687b      	ldr	r3, [r7, #4]
 6d0:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
 6d2:	687b      	ldr	r3, [r7, #4]
 6d4:	681b      	ldr	r3, [r3, #0]
 6d6:	f043 0201 	orr.w	r2, r3, #1
 6da:	687b      	ldr	r3, [r7, #4]
 6dc:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
 6de:	687b      	ldr	r3, [r7, #4]
 6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 6e2:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
 6e4:	bf00      	nop
 6e6:	687b      	ldr	r3, [r7, #4]
 6e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 6ea:	68fb      	ldr	r3, [r7, #12]
 6ec:	1ad3      	subs	r3, r2, r3
 6ee:	683a      	ldr	r2, [r7, #0]
 6f0:	429a      	cmp	r2, r3
 6f2:	d8f8      	bhi.n	6e6 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
 6f4:	687b      	ldr	r3, [r7, #4]
 6f6:	681b      	ldr	r3, [r3, #0]
 6f8:	f023 0201 	bic.w	r2, r3, #1
 6fc:	687b      	ldr	r3, [r7, #4]
 6fe:	601a      	str	r2, [r3, #0]

}
 700:	bf00      	nop
 702:	3714      	adds	r7, #20
 704:	46bd      	mov	sp, r7
 706:	f85d 7b04 	ldr.w	r7, [sp], #4
 70a:	4770      	bx	lr

0000070c <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 70c:	b580      	push	{r7, lr}
 70e:	b082      	sub	sp, #8
 710:	af00      	add	r7, sp, #0
 712:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 714:	2201      	movs	r2, #1
 716:	2180      	movs	r1, #128	; 0x80
 718:	4822      	ldr	r0, [pc, #136]	; (7a4 <set_aom_atten+0x98>)
 71a:	f000 f8d9 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 71e:	793b      	ldrb	r3, [r7, #4]
 720:	f3c3 0300 	ubfx	r3, r3, #0, #1
 724:	b2db      	uxtb	r3, r3
 726:	461a      	mov	r2, r3
 728:	2140      	movs	r1, #64	; 0x40
 72a:	481e      	ldr	r0, [pc, #120]	; (7a4 <set_aom_atten+0x98>)
 72c:	f000 f8d0 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 730:	793b      	ldrb	r3, [r7, #4]
 732:	f3c3 0340 	ubfx	r3, r3, #1, #1
 736:	b2db      	uxtb	r3, r3
 738:	461a      	mov	r2, r3
 73a:	2120      	movs	r1, #32
 73c:	4819      	ldr	r0, [pc, #100]	; (7a4 <set_aom_atten+0x98>)
 73e:	f000 f8c7 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 742:	793b      	ldrb	r3, [r7, #4]
 744:	f3c3 0380 	ubfx	r3, r3, #2, #1
 748:	b2db      	uxtb	r3, r3
 74a:	461a      	mov	r2, r3
 74c:	2110      	movs	r1, #16
 74e:	4815      	ldr	r0, [pc, #84]	; (7a4 <set_aom_atten+0x98>)
 750:	f000 f8be 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 754:	793b      	ldrb	r3, [r7, #4]
 756:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 75a:	b2db      	uxtb	r3, r3
 75c:	461a      	mov	r2, r3
 75e:	2108      	movs	r1, #8
 760:	4810      	ldr	r0, [pc, #64]	; (7a4 <set_aom_atten+0x98>)
 762:	f000 f8b5 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 766:	793b      	ldrb	r3, [r7, #4]
 768:	f3c3 1300 	ubfx	r3, r3, #4, #1
 76c:	b2db      	uxtb	r3, r3
 76e:	461a      	mov	r2, r3
 770:	2104      	movs	r1, #4
 772:	480d      	ldr	r0, [pc, #52]	; (7a8 <set_aom_atten+0x9c>)
 774:	f000 f8ac 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 778:	793b      	ldrb	r3, [r7, #4]
 77a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 77e:	b2db      	uxtb	r3, r3
 780:	461a      	mov	r2, r3
 782:	2110      	movs	r1, #16
 784:	4808      	ldr	r0, [pc, #32]	; (7a8 <set_aom_atten+0x9c>)
 786:	f000 f8a3 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 78a:	793b      	ldrb	r3, [r7, #4]
 78c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 790:	b2db      	uxtb	r3, r3
 792:	461a      	mov	r2, r3
 794:	2120      	movs	r1, #32
 796:	4804      	ldr	r0, [pc, #16]	; (7a8 <set_aom_atten+0x9c>)
 798:	f000 f89a 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
}
 79c:	bf00      	nop
 79e:	3708      	adds	r7, #8
 7a0:	46bd      	mov	sp, r7
 7a2:	bd80      	pop	{r7, pc}
 7a4:	58020c00 	.word	0x58020c00
 7a8:	58021000 	.word	0x58021000

000007ac <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
 7ac:	b580      	push	{r7, lr}
 7ae:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 7b0:	f240 1103 	movw	r1, #259	; 0x103
 7b4:	481b      	ldr	r0, [pc, #108]	; (824 <start_pop+0x78>)
 7b6:	f000 f877 	bl	8a8 <__HAL_HRTIM_WaveformOutputStart_veneer>
 7ba:	4603      	mov	r3, r0
 7bc:	2b00      	cmp	r3, #0
 7be:	d001      	beq.n	7c4 <start_pop+0x18>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		Error_Handler();
 7c0:	f000 f892 	bl	8e8 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 7c4:	2302      	movs	r3, #2
 7c6:	2202      	movs	r2, #2
 7c8:	2100      	movs	r1, #0
 7ca:	4816      	ldr	r0, [pc, #88]	; (824 <start_pop+0x78>)
 7cc:	f000 f87c 	bl	8c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 7d0:	4603      	mov	r3, r0
 7d2:	2b00      	cmp	r3, #0
 7d4:	d001      	beq.n	7da <start_pop+0x2e>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		Error_Handler();
 7d6:	f000 f887 	bl	8e8 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000);
 7da:	4b13      	ldr	r3, [pc, #76]	; (828 <start_pop+0x7c>)
 7dc:	681b      	ldr	r3, [r3, #0]
 7de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 7e2:	4618      	mov	r0, r3
 7e4:	f7ff ff64 	bl	6b0 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 7e8:	2301      	movs	r3, #1
 7ea:	2202      	movs	r2, #2
 7ec:	2100      	movs	r1, #0
 7ee:	480d      	ldr	r0, [pc, #52]	; (824 <start_pop+0x78>)
 7f0:	f000 f86a 	bl	8c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 7f4:	4603      	mov	r3, r0
 7f6:	2b00      	cmp	r3, #0
 7f8:	d001      	beq.n	7fe <start_pop+0x52>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		Error_Handler();
 7fa:	f000 f875 	bl	8e8 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 7fe:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 802:	4808      	ldr	r0, [pc, #32]	; (824 <start_pop+0x78>)
 804:	f000 f868 	bl	8d8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 808:	4603      	mov	r3, r0
 80a:	2b00      	cmp	r3, #0
 80c:	d001      	beq.n	812 <start_pop+0x66>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		Error_Handler();
 80e:	f000 f86b 	bl	8e8 <__Error_Handler_veneer>
	}

	pop_running = true;
 812:	4b06      	ldr	r3, [pc, #24]	; (82c <start_pop+0x80>)
 814:	2201      	movs	r2, #1
 816:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 818:	4805      	ldr	r0, [pc, #20]	; (830 <start_pop+0x84>)
 81a:	f000 f83d 	bl	898 <__puts_veneer>

}
 81e:	bf00      	nop
 820:	bd80      	pop	{r7, pc}
 822:	bf00      	nop
 824:	200000d0 	.word	0x200000d0
 828:	20000000 	.word	0x20000000
 82c:	20000310 	.word	0x20000310
 830:	0800a8c8 	.word	0x0800a8c8

00000834 <stop_pop>:
static void stop_pop() {
 834:	b580      	push	{r7, lr}
 836:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 838:	f240 1103 	movw	r1, #259	; 0x103
 83c:	4810      	ldr	r0, [pc, #64]	; (880 <stop_pop+0x4c>)
 83e:	f000 f83f 	bl	8c0 <__HAL_HRTIM_WaveformOutputStop_veneer>
 842:	4603      	mov	r3, r0
 844:	2b00      	cmp	r3, #0
 846:	d001      	beq.n	84c <stop_pop+0x18>
		Error_Handler();
 848:	f000 f84e 	bl	8e8 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 84c:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 850:	480b      	ldr	r0, [pc, #44]	; (880 <stop_pop+0x4c>)
 852:	f000 f845 	bl	8e0 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 856:	4603      	mov	r3, r0
 858:	2b00      	cmp	r3, #0
 85a:	d001      	beq.n	860 <stop_pop+0x2c>
		Error_Handler();
 85c:	f000 f844 	bl	8e8 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 860:	4b08      	ldr	r3, [pc, #32]	; (884 <stop_pop+0x50>)
 862:	2200      	movs	r2, #0
 864:	601a      	str	r2, [r3, #0]
	pop_running = false;
 866:	4b08      	ldr	r3, [pc, #32]	; (888 <stop_pop+0x54>)
 868:	2200      	movs	r2, #0
 86a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 86c:	2200      	movs	r2, #0
 86e:	2102      	movs	r1, #2
 870:	4806      	ldr	r0, [pc, #24]	; (88c <stop_pop+0x58>)
 872:	f000 f82d 	bl	8d0 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 876:	4806      	ldr	r0, [pc, #24]	; (890 <stop_pop+0x5c>)
 878:	f000 f80e 	bl	898 <__puts_veneer>
}
 87c:	bf00      	nop
 87e:	bd80      	pop	{r7, pc}
 880:	200000d0 	.word	0x200000d0
 884:	20000314 	.word	0x20000314
 888:	20000310 	.word	0x20000310
 88c:	58021000 	.word	0x58021000
 890:	0800a8dc 	.word	0x0800a8dc
 894:	00000000 	.word	0x00000000

00000898 <__puts_veneer>:
 898:	f85f f000 	ldr.w	pc, [pc]	; 89c <__puts_veneer+0x4>
 89c:	080098c1 	.word	0x080098c1

000008a0 <__printf_veneer>:
 8a0:	f85f f000 	ldr.w	pc, [pc]	; 8a4 <__printf_veneer+0x4>
 8a4:	080097b5 	.word	0x080097b5

000008a8 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 8a8:	f85f f000 	ldr.w	pc, [pc]	; 8ac <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 8ac:	08003779 	.word	0x08003779

000008b0 <__HAL_GPIO_ReadPin_veneer>:
 8b0:	f85f f000 	ldr.w	pc, [pc]	; 8b4 <__HAL_GPIO_ReadPin_veneer+0x4>
 8b4:	08002ead 	.word	0x08002ead

000008b8 <__HAL_Delay_veneer>:
 8b8:	f85f f000 	ldr.w	pc, [pc]	; 8bc <__HAL_Delay_veneer+0x4>
 8bc:	080025cd 	.word	0x080025cd

000008c0 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 8c0:	f85f f000 	ldr.w	pc, [pc]	; 8c4 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 8c4:	080037d3 	.word	0x080037d3

000008c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 8c8:	f85f f000 	ldr.w	pc, [pc]	; 8cc <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 8cc:	0800358d 	.word	0x0800358d

000008d0 <__HAL_GPIO_WritePin_veneer>:
 8d0:	f85f f000 	ldr.w	pc, [pc]	; 8d4 <__HAL_GPIO_WritePin_veneer+0x4>
 8d4:	08002edd 	.word	0x08002edd

000008d8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 8d8:	f85f f000 	ldr.w	pc, [pc]	; 8dc <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 8dc:	0800382d 	.word	0x0800382d

000008e0 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 8e0:	f85f f000 	ldr.w	pc, [pc]	; 8e4 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 8e4:	0800390d 	.word	0x0800390d

000008e8 <__Error_Handler_veneer>:
 8e8:	f85f f000 	ldr.w	pc, [pc]	; 8ec <__Error_Handler_veneer+0x4>
 8ec:	08001cf5 	.word	0x08001cf5

Disassembly of section .text:

08000b90 <__do_global_dtors_aux>:
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4c05      	ldr	r4, [pc, #20]	; (8000ba8 <__do_global_dtors_aux+0x18>)
 8000b94:	7823      	ldrb	r3, [r4, #0]
 8000b96:	b933      	cbnz	r3, 8000ba6 <__do_global_dtors_aux+0x16>
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__do_global_dtors_aux+0x1c>)
 8000b9a:	b113      	cbz	r3, 8000ba2 <__do_global_dtors_aux+0x12>
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <__do_global_dtors_aux+0x20>)
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	7023      	strb	r3, [r4, #0]
 8000ba6:	bd10      	pop	{r4, pc}
 8000ba8:	200000a0 	.word	0x200000a0
 8000bac:	00000000 	.word	0x00000000
 8000bb0:	0800a7bc 	.word	0x0800a7bc

08000bb4 <frame_dummy>:
 8000bb4:	b508      	push	{r3, lr}
 8000bb6:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <frame_dummy+0x10>)
 8000bb8:	b11b      	cbz	r3, 8000bc2 <frame_dummy+0xe>
 8000bba:	4903      	ldr	r1, [pc, #12]	; (8000bc8 <frame_dummy+0x14>)
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <frame_dummy+0x18>)
 8000bbe:	f3af 8000 	nop.w
 8000bc2:	bd08      	pop	{r3, pc}
 8000bc4:	00000000 	.word	0x00000000
 8000bc8:	200000a4 	.word	0x200000a4
 8000bcc:	0800a7bc 	.word	0x0800a7bc

08000bd0 <memchr>:
 8000bd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000bd4:	2a10      	cmp	r2, #16
 8000bd6:	db2b      	blt.n	8000c30 <memchr+0x60>
 8000bd8:	f010 0f07 	tst.w	r0, #7
 8000bdc:	d008      	beq.n	8000bf0 <memchr+0x20>
 8000bde:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000be2:	3a01      	subs	r2, #1
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d02d      	beq.n	8000c44 <memchr+0x74>
 8000be8:	f010 0f07 	tst.w	r0, #7
 8000bec:	b342      	cbz	r2, 8000c40 <memchr+0x70>
 8000bee:	d1f6      	bne.n	8000bde <memchr+0xe>
 8000bf0:	b4f0      	push	{r4, r5, r6, r7}
 8000bf2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000bf6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000bfa:	f022 0407 	bic.w	r4, r2, #7
 8000bfe:	f07f 0700 	mvns.w	r7, #0
 8000c02:	2300      	movs	r3, #0
 8000c04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000c08:	3c08      	subs	r4, #8
 8000c0a:	ea85 0501 	eor.w	r5, r5, r1
 8000c0e:	ea86 0601 	eor.w	r6, r6, r1
 8000c12:	fa85 f547 	uadd8	r5, r5, r7
 8000c16:	faa3 f587 	sel	r5, r3, r7
 8000c1a:	fa86 f647 	uadd8	r6, r6, r7
 8000c1e:	faa5 f687 	sel	r6, r5, r7
 8000c22:	b98e      	cbnz	r6, 8000c48 <memchr+0x78>
 8000c24:	d1ee      	bne.n	8000c04 <memchr+0x34>
 8000c26:	bcf0      	pop	{r4, r5, r6, r7}
 8000c28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c2c:	f002 0207 	and.w	r2, r2, #7
 8000c30:	b132      	cbz	r2, 8000c40 <memchr+0x70>
 8000c32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c36:	3a01      	subs	r2, #1
 8000c38:	ea83 0301 	eor.w	r3, r3, r1
 8000c3c:	b113      	cbz	r3, 8000c44 <memchr+0x74>
 8000c3e:	d1f8      	bne.n	8000c32 <memchr+0x62>
 8000c40:	2000      	movs	r0, #0
 8000c42:	4770      	bx	lr
 8000c44:	3801      	subs	r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	bf06      	itte	eq
 8000c4c:	4635      	moveq	r5, r6
 8000c4e:	3803      	subeq	r0, #3
 8000c50:	3807      	subne	r0, #7
 8000c52:	f015 0f01 	tst.w	r5, #1
 8000c56:	d107      	bne.n	8000c68 <memchr+0x98>
 8000c58:	3001      	adds	r0, #1
 8000c5a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000c5e:	bf02      	ittt	eq
 8000c60:	3001      	addeq	r0, #1
 8000c62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000c66:	3001      	addeq	r0, #1
 8000c68:	bcf0      	pop	{r4, r5, r6, r7}
 8000c6a:	3801      	subs	r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b974 	b.w	8000f70 <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9d08      	ldr	r5, [sp, #32]
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	468e      	mov	lr, r1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14d      	bne.n	8000d4a <__udivmoddi4+0xaa>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	d969      	bls.n	8000d88 <__udivmoddi4+0xe8>
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	b152      	cbz	r2, 8000cd0 <__udivmoddi4+0x30>
 8000cba:	fa01 f302 	lsl.w	r3, r1, r2
 8000cbe:	f1c2 0120 	rsb	r1, r2, #32
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cca:	ea41 0e03 	orr.w	lr, r1, r3
 8000cce:	4094      	lsls	r4, r2
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	0c21      	lsrs	r1, r4, #16
 8000cd6:	fbbe f6f8 	udiv	r6, lr, r8
 8000cda:	fa1f f78c 	uxth.w	r7, ip
 8000cde:	fb08 e316 	mls	r3, r8, r6, lr
 8000ce2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ce6:	fb06 f107 	mul.w	r1, r6, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d90a      	bls.n	8000d04 <__udivmoddi4+0x64>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf6:	f080 811f 	bcs.w	8000f38 <__udivmoddi4+0x298>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 811c 	bls.w	8000f38 <__udivmoddi4+0x298>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 f707 	mul.w	r7, r0, r7
 8000d18:	42a7      	cmp	r7, r4
 8000d1a:	d90a      	bls.n	8000d32 <__udivmoddi4+0x92>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d24:	f080 810a 	bcs.w	8000f3c <__udivmoddi4+0x29c>
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	f240 8107 	bls.w	8000f3c <__udivmoddi4+0x29c>
 8000d2e:	4464      	add	r4, ip
 8000d30:	3802      	subs	r0, #2
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	1be4      	subs	r4, r4, r7
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa4>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d909      	bls.n	8000d62 <__udivmoddi4+0xc2>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	f000 80ef 	beq.w	8000f32 <__udivmoddi4+0x292>
 8000d54:	2600      	movs	r6, #0
 8000d56:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	fab3 f683 	clz	r6, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d14a      	bne.n	8000e00 <__udivmoddi4+0x160>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xd4>
 8000d6e:	4282      	cmp	r2, r0
 8000d70:	f200 80f9 	bhi.w	8000f66 <__udivmoddi4+0x2c6>
 8000d74:	1a84      	subs	r4, r0, r2
 8000d76:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d0e0      	beq.n	8000d44 <__udivmoddi4+0xa4>
 8000d82:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d86:	e7dd      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000d88:	b902      	cbnz	r2, 8000d8c <__udivmoddi4+0xec>
 8000d8a:	deff      	udf	#255	; 0xff
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	f040 8092 	bne.w	8000eba <__udivmoddi4+0x21a>
 8000d96:	eba1 010c 	sub.w	r1, r1, ip
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2601      	movs	r6, #1
 8000da4:	0c20      	lsrs	r0, r4, #16
 8000da6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000daa:	fb07 1113 	mls	r1, r7, r3, r1
 8000dae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db2:	fb0e f003 	mul.w	r0, lr, r3
 8000db6:	4288      	cmp	r0, r1
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x12c>
 8000dba:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x12a>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2c0>
 8000dca:	4643      	mov	r3, r8
 8000dcc:	1a09      	subs	r1, r1, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x156>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x154>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2ca>
 8000df4:	4608      	mov	r0, r1
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfe:	e79c      	b.n	8000d3a <__udivmoddi4+0x9a>
 8000e00:	f1c6 0720 	rsb	r7, r6, #32
 8000e04:	40b3      	lsls	r3, r6
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e12:	fa01 f306 	lsl.w	r3, r1, r6
 8000e16:	431c      	orrs	r4, r3
 8000e18:	40f9      	lsrs	r1, r7
 8000e1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e22:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e26:	0c20      	lsrs	r0, r4, #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e34:	fb08 f00e 	mul.w	r0, r8, lr
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b8>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2bc>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2bc>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	1a09      	subs	r1, r1, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e60:	fb09 1110 	mls	r1, r9, r0, r1
 8000e64:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e6c:	458e      	cmp	lr, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1e2>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7a:	458e      	cmp	lr, r1
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e86:	fba0 9402 	umull	r9, r4, r0, r2
 8000e8a:	eba1 010e 	sub.w	r1, r1, lr
 8000e8e:	42a1      	cmp	r1, r4
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46a6      	mov	lr, r4
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x2a4>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x2a0>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x212>
 8000e9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e9e:	eb61 010e 	sbc.w	r1, r1, lr
 8000ea2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ea6:	fa22 f306 	lsr.w	r3, r2, r6
 8000eaa:	40f1      	lsrs	r1, r6
 8000eac:	431f      	orrs	r7, r3
 8000eae:	e9c5 7100 	strd	r7, r1, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	f1c2 0320 	rsb	r3, r2, #32
 8000ebe:	40d8      	lsrs	r0, r3
 8000ec0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed8:	fb07 3610 	mls	r6, r7, r0, r3
 8000edc:	0c0b      	lsrs	r3, r1, #16
 8000ede:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ee2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x260>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b8>
 8000ef8:	429e      	cmp	r6, r3
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b8>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	1b9b      	subs	r3, r3, r6
 8000f02:	b289      	uxth	r1, r1
 8000f04:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f08:	fb07 3316 	mls	r3, r7, r6, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb06 f30e 	mul.w	r3, r6, lr
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x28a>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000f26:	3e02      	subs	r6, #2
 8000f28:	4461      	add	r1, ip
 8000f2a:	1ac9      	subs	r1, r1, r3
 8000f2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0x104>
 8000f32:	462e      	mov	r6, r5
 8000f34:	4628      	mov	r0, r5
 8000f36:	e705      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	e6e3      	b.n	8000d04 <__udivmoddi4+0x64>
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	e6f8      	b.n	8000d32 <__udivmoddi4+0x92>
 8000f40:	454b      	cmp	r3, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f8>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f4c:	3801      	subs	r0, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f8>
 8000f50:	4646      	mov	r6, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x28a>
 8000f54:	4620      	mov	r0, r4
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1e2>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x260>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b8>
 8000f60:	3b02      	subs	r3, #2
 8000f62:	4461      	add	r1, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x12c>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e709      	b.n	8000d7e <__udivmoddi4+0xde>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x156>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000f7c:	1d39      	adds	r1, r7, #4
 8000f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f82:	2201      	movs	r2, #1
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <__io_putchar+0x20>)
 8000f86:	f007 fac1 	bl	800850c <HAL_UART_Transmit>
	return ch;
 8000f8a:	687b      	ldr	r3, [r7, #4]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000027c 	.word	0x2000027c

08000f98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]

#ifdef RAMP_DAC
	static bool dac_enabled = false;
#endif

	SystemClock_Config(); // We were in STOP mode so the HSI is selected.
 8000fa2:	f000 f9db 	bl	800135c <SystemClock_Config>
	HAL_ResumeTick();
 8000fa6:	f001 fb45 	bl	8002634 <HAL_ResumeTick>
		dac_enabled = true;
	}
#endif

#ifdef SYNTH_ENABLE
	if (!synth_init) {
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00c      	beq.n	8000fd2 <HAL_GPIO_EXTI_Callback+0x3a>
		if (init_synthesiser() != SUCCESS) {
 8000fb8:	f009 fc0e 	bl	800a7d8 <__init_synthesiser_veneer>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <HAL_GPIO_EXTI_Callback+0x34>
			printf("Synthesiser initialisation failed!\r\n");
 8000fc2:	4834      	ldr	r0, [pc, #208]	; (8001094 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000fc4:	f008 fc7c 	bl	80098c0 <puts>
			Error_Handler();
 8000fc8:	f000 fe94 	bl	8001cf4 <Error_Handler>
		}
		synth_init = true;
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
	}
#endif

	if (GPIO_Pin == GPIO_PIN_13) { // Blue button
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fd8:	d157      	bne.n	800108a <HAL_GPIO_EXTI_Callback+0xf2>

		/* If the button is held down for more than one second then run the POP cycle */
		HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f001 faf5 	bl	80025cc <HAL_Delay>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe6:	482c      	ldr	r0, [pc, #176]	; (8001098 <HAL_GPIO_EXTI_Callback+0x100>)
 8000fe8:	f001 ff60 	bl	8002eac <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_EXTI_Callback+0x6a>

			if (pop_running) {
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_GPIO_EXTI_Callback+0x104>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d145      	bne.n	8001088 <HAL_GPIO_EXTI_Callback+0xf0>
				return;
			}

			start_pop();
 8000ffc:	f009 fc04 	bl	800a808 <__start_pop_veneer>
 8001000:	e043      	b.n	800108a <HAL_GPIO_EXTI_Callback+0xf2>

		} else {
			/* We want to run CW so stop the POP cycle if it's running */
			if (pop_running) {
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <HAL_GPIO_EXTI_Callback+0x104>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <HAL_GPIO_EXTI_Callback+0x7a>
				stop_pop();
 800100c:	f009 fbf8 	bl	800a800 <__stop_pop_veneer>
 8001010:	e03b      	b.n	800108a <HAL_GPIO_EXTI_Callback+0xf2>
				return;
			}

			/* Set the attenuator for minimum attenuation */
			const struct AttenuatorSettings attenuator_settings = {0,0,0,0,0,0,0}; // 0 dB
 8001012:	2300      	movs	r3, #0
 8001014:	733b      	strb	r3, [r7, #12]
			set_aom_atten(attenuator_settings);
 8001016:	7b38      	ldrb	r0, [r7, #12]
 8001018:	f009 fbe6 	bl	800a7e8 <__set_aom_atten_veneer>

			/* Enable the AOM drive power */
			if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 800101c:	f240 1103 	movw	r1, #259	; 0x103
 8001020:	481f      	ldr	r0, [pc, #124]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001022:	f002 fba9 	bl	8003778 <HAL_HRTIM_WaveformOutputStart>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_GPIO_EXTI_Callback+0x98>
			HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
				Error_Handler();
 800102c:	f000 fe62 	bl	8001cf4 <Error_Handler>
			}

			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8001030:	2302      	movs	r3, #2
 8001032:	2201      	movs	r2, #1
 8001034:	2100      	movs	r1, #0
 8001036:	481a      	ldr	r0, [pc, #104]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001038:	f002 faa8 	bl	800358c <HAL_HRTIM_WaveformSetOutputLevel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_GPIO_EXTI_Callback+0xae>
					HRTIM_TIMERINDEX_TIMER_A,
					HRTIM_OUTPUT_TA1, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
				Error_Handler();
 8001042:	f000 fe57 	bl	8001cf4 <Error_Handler>
			}

			/* Enable the Microwaves */
			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8001046:	2301      	movs	r3, #1
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	2104      	movs	r1, #4
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001050:	f002 fa9c 	bl	800358c <HAL_HRTIM_WaveformSetOutputLevel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_GPIO_EXTI_Callback+0xc6>
					HRTIM_TIMERINDEX_TIMER_E,
					HRTIM_OUTPUT_TE1, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
				Error_Handler();
 800105a:	f000 fe4b 	bl	8001cf4 <Error_Handler>
			};

			/* Run the frequency sweep */
			while (1) {
				printf("Sweep running.\r\n");
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001060:	f008 fc2e 	bl	80098c0 <puts>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	480f      	ldr	r0, [pc, #60]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x110>)
 800106c:	f001 ff36 	bl	8002edc <HAL_GPIO_WritePin>
				run_sweep();
 8001070:	f009 fbb6 	bl	800a7e0 <__run_sweep_veneer>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x110>)
 800107c:	f001 ff2e 	bl	8002edc <HAL_GPIO_WritePin>
				printf("Sweep complete.\r\n");
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <HAL_GPIO_EXTI_Callback+0x114>)
 8001082:	f008 fc1d 	bl	80098c0 <puts>
				printf("Sweep running.\r\n");
 8001086:	e7ea      	b.n	800105e <HAL_GPIO_EXTI_Callback+0xc6>
				return;
 8001088:	bf00      	nop
			}
		}

	}
}
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000318 	.word	0x20000318
 8001094:	0800a8f0 	.word	0x0800a8f0
 8001098:	58020800 	.word	0x58020800
 800109c:	20000310 	.word	0x20000310
 80010a0:	200000d0 	.word	0x200000d0
 80010a4:	0800a914 	.word	0x0800a914
 80010a8:	58020400 	.word	0x58020400
 80010ac:	0800a924 	.word	0x0800a924

080010b0 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 80010bc:	f001 ff27 	bl	8002f0e <HAL_GPIO_TogglePin>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58020400 	.word	0x58020400

080010cc <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d11e      	bne.n	800111a <HAL_HRTIM_Compare2EventCallback+0x4e>
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	f36f 0300 	bfc	r3, #0, #1
 80010e2:	733b      	strb	r3, [r7, #12]
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	f36f 0341 	bfc	r3, #1, #1
 80010ea:	733b      	strb	r3, [r7, #12]
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	f36f 0382 	bfc	r3, #2, #1
 80010f2:	733b      	strb	r3, [r7, #12]
 80010f4:	7b3b      	ldrb	r3, [r7, #12]
 80010f6:	f36f 03c3 	bfc	r3, #3, #1
 80010fa:	733b      	strb	r3, [r7, #12]
 80010fc:	7b3b      	ldrb	r3, [r7, #12]
 80010fe:	f36f 1304 	bfc	r3, #4, #1
 8001102:	733b      	strb	r3, [r7, #12]
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	f043 0320 	orr.w	r3, r3, #32
 800110a:	733b      	strb	r3, [r7, #12]
 800110c:	7b3b      	ldrb	r3, [r7, #12]
 800110e:	f36f 1386 	bfc	r3, #6, #1
 8001112:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8001114:	7b38      	ldrb	r0, [r7, #12]
 8001116:	f009 fb67 	bl	800a7e8 <__set_aom_atten_veneer>
	}

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	0000      	movs	r0, r0
 8001124:	0000      	movs	r0, r0
	...

08001128 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d138      	bne.n	80011aa <HAL_HRTIM_Compare3EventCallback+0x82>

		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 8001138:	2300      	movs	r3, #0
 800113a:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 800113c:	7b38      	ldrb	r0, [r7, #12]
 800113e:	f009 fb53 	bl	800a7e8 <__set_aom_atten_veneer>
		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x9c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d106      	bne.n	800115c <HAL_HRTIM_Compare3EventCallback+0x34>
			stop_pop();
 800114e:	f009 fb57 	bl	800a800 <__stop_pop_veneer>
			i = 0;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
			start_pop();
 8001158:	f009 fb56 	bl	800a808 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001168:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80011b8 <HAL_HRTIM_Compare3EventCallback+0x90>
 800116c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_HRTIM_Compare3EventCallback+0xa0>)
 8001172:	ed93 7b00 	vldr	d7, [r3]
 8001176:	ee36 7b07 	vadd.f64	d7, d6, d7
 800117a:	eeb0 0b47 	vmov.f64	d0, d7
 800117e:	f009 fb37 	bl	800a7f0 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_HRTIM_Compare3EventCallback+0x98>)
 800118a:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0xa4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0xa4>)
 8001194:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001196:	2102      	movs	r1, #2
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <HAL_HRTIM_Compare3EventCallback+0xa8>)
 800119a:	f001 feb8 	bl	8002f0e <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0xa4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <HAL_HRTIM_Compare3EventCallback+0xac>)
 80011a6:	f008 fb05 	bl	80097b4 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	00000000 	.word	0x00000000
 80011bc:	4007d784 	.word	0x4007d784
 80011c0:	2000031c 	.word	0x2000031c
 80011c4:	0800a9a4 	.word	0x0800a9a4
 80011c8:	0800a9a8 	.word	0x0800a9a8
 80011cc:	20000314 	.word	0x20000314
 80011d0:	58021000 	.word	0x58021000
 80011d4:	0800a938 	.word	0x0800a938

080011d8 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80011f6:	4a51      	ldr	r2, [pc, #324]	; (800133c <main+0x14c>)
 80011f8:	4b51      	ldr	r3, [pc, #324]	; (8001340 <main+0x150>)
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4951      	ldr	r1, [pc, #324]	; (8001344 <main+0x154>)
 8001200:	484f      	ldr	r0, [pc, #316]	; (8001340 <main+0x150>)
 8001202:	f008 fac1 	bl	8009788 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001206:	4b50      	ldr	r3, [pc, #320]	; (8001348 <main+0x158>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11b      	bne.n	800124a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001212:	f3bf 8f4f 	dsb	sy
}
 8001216:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001218:	f3bf 8f6f 	isb	sy
}
 800121c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800121e:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <main+0x158>)
 8001220:	2200      	movs	r2, #0
 8001222:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001226:	f3bf 8f4f 	dsb	sy
}
 800122a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800122c:	f3bf 8f6f 	isb	sy
}
 8001230:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <main+0x158>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a44      	ldr	r2, [pc, #272]	; (8001348 <main+0x158>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800123e:	f3bf 8f4f 	dsb	sy
}
 8001242:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001244:	f3bf 8f6f 	isb	sy
}
 8001248:	e000      	b.n	800124c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800124a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <main+0x158>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d138      	bne.n	80012ca <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <main+0x158>)
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <main+0x158>)
 8001268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0b5b      	lsrs	r3, r3, #13
 8001272:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001276:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001280:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800128a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001290:	492d      	ldr	r1, [pc, #180]	; (8001348 <main+0x158>)
 8001292:	4313      	orrs	r3, r2
 8001294:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ef      	bne.n	8001282 <main+0x92>
    } while(sets-- != 0U);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e5      	bne.n	8001278 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ac:	f3bf 8f4f 	dsb	sy
}
 80012b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <main+0x158>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a24      	ldr	r2, [pc, #144]	; (8001348 <main+0x158>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012be:	f3bf 8f4f 	dsb	sy
}
 80012c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c4:	f3bf 8f6f 	isb	sy
}
 80012c8:	e000      	b.n	80012cc <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f001 f8ec 	bl	80024a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f844 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 fba2 	bl	8001a1c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80012d8:	f000 fa82 	bl	80017e0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80012dc:	f000 f8fc 	bl	80014d8 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80012e0:	f000 fb4e 	bl	8001980 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012e4:	f000 fafe 	bl	80018e4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012e8:	f000 faa8 	bl	800183c <MX_TIM1_Init>
  MX_HRTIM_Init();
 80012ec:	f000 f926 	bl	800153c <MX_HRTIM_Init>
  /* USER CODE BEGIN 2 */

	printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80012f0:	4916      	ldr	r1, [pc, #88]	; (800134c <main+0x15c>)
 80012f2:	4817      	ldr	r0, [pc, #92]	; (8001350 <main+0x160>)
 80012f4:	f008 fa5e 	bl	80097b4 <iprintf>

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80012f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fc:	4815      	ldr	r0, [pc, #84]	; (8001354 <main+0x164>)
 80012fe:	f003 fb0b 	bl	8004918 <HAL_LPTIM_Counter_Start_IT>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <main+0x11c>
		Error_Handler();
 8001308:	f000 fcf4 	bl	8001cf4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (!pop_running) {
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <main+0x168>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <main+0x13e>
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of STOP mode.
 800131c:	f001 f97a 	bl	8002614 <HAL_SuspendTick>
			HAL_PWREx_EnableFlashPowerDown();
 8001320:	f003 feea 	bl	80050f8 <HAL_PWREx_EnableFlashPowerDown>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs
 8001324:	2101      	movs	r1, #1
 8001326:	2001      	movs	r0, #1
 8001328:	f003 fe70 	bl	800500c <HAL_PWR_EnterSTOPMode>
 800132c:	e7ee      	b.n	800130c <main+0x11c>
		} else {
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of SLEEP mode.
 800132e:	f001 f971 	bl	8002614 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs.
 8001332:	2101      	movs	r1, #1
 8001334:	2000      	movs	r0, #0
 8001336:	f003 fe4f 	bl	8004fd8 <HAL_PWR_EnterSLEEPMode>
		if (!pop_running) {
 800133a:	e7e7      	b.n	800130c <main+0x11c>
 800133c:	000008f0 	.word	0x000008f0
 8001340:	00000000 	.word	0x00000000
 8001344:	08000298 	.word	0x08000298
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	0800a950 	.word	0x0800a950
 8001350:	0800a96c 	.word	0x0800a96c
 8001354:	200001ac 	.word	0x200001ac
 8001358:	20000310 	.word	0x20000310

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0a4      	sub	sp, #144	; 0x90
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001366:	224c      	movs	r2, #76	; 0x4c
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f008 fa1a 	bl	80097a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f008 fa13 	bl	80097a4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001390:	2002      	movs	r0, #2
 8001392:	f003 fe77 	bl	8005084 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <SystemClock_Config+0x170>)
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <SystemClock_Config+0x170>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013a6:	4b49      	ldr	r3, [pc, #292]	; (80014cc <SystemClock_Config+0x170>)
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <SystemClock_Config+0x174>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <SystemClock_Config+0x174>)
 80013b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <SystemClock_Config+0x174>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013c8:	bf00      	nop
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <SystemClock_Config+0x174>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013d6:	d1f8      	bne.n	80013ca <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013d8:	f003 fdee 	bl	8004fb8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013dc:	f001 f93a 	bl	8002654 <HAL_GetREVID>
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <SystemClock_Config+0x178>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <SystemClock_Config+0x178>)
 80013e6:	f023 0318 	bic.w	r3, r3, #24
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80013ec:	2325      	movs	r3, #37	; 0x25
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013f6:	2301      	movs	r3, #1
 80013f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013fa:	2301      	movs	r3, #1
 80013fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	2302      	movs	r3, #2
 8001404:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 96;
 800140a:	2360      	movs	r3, #96	; 0x60
 800140c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800140e:	2302      	movs	r3, #2
 8001410:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001412:	2304      	movs	r3, #4
 8001414:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800141c:	230c      	movs	r3, #12
 800141e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fe70 	bl	8005118 <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800143e:	f000 fc59 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	233f      	movs	r3, #63	; 0x3f
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001446:	2303      	movs	r3, #3
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800144e:	2309      	movs	r3, #9
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800145a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	2101      	movs	r1, #1
 800146a:	4618      	mov	r0, r3
 800146c:	f004 faae 	bl	80059cc <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001476:	f000 fc3d 	bl	8001cf4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800147a:	f004 fc5d 	bl	8005d38 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <SystemClock_Config+0x178>)
 8001480:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <SystemClock_Config+0x178>)
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <SystemClock_Config+0x178>)
 8001490:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80014a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014a4:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80014aa:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80014ae:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80014b0:	2322      	movs	r3, #34	; 0x22
 80014b2:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80014b4:	2320      	movs	r3, #32
 80014b6:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4618      	mov	r0, r3
 80014be:	f006 fb05 	bl	8007acc <HAL_RCCEx_CRSConfig>
}
 80014c2:	bf00      	nop
 80014c4:	3790      	adds	r7, #144	; 0x90
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	58000400 	.word	0x58000400
 80014d0:	58024800 	.word	0x58024800
 80014d4:	58024400 	.word	0x58024400

080014d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2224      	movs	r2, #36	; 0x24
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f008 f95d 	bl	80097a4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_DAC1_Init+0x5c>)
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_DAC1_Init+0x60>)
 80014ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <MX_DAC1_Init+0x5c>)
 80014f2:	f001 f9ca 	bl	800288a <HAL_DAC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014fc:	f000 fbfa 	bl	8001cf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800150c:	2301      	movs	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_DAC1_Init+0x5c>)
 800151c:	f001 f9d8 	bl	80028d0 <HAL_DAC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001526:	f000 fbe5 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200000bc 	.word	0x200000bc
 8001538:	40007400 	.word	0x40007400

0800153c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0a4      	sub	sp, #144	; 0x90
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001542:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	2254      	movs	r2, #84	; 0x54
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f008 f923 	bl	80097a4 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800156a:	463b      	mov	r3, r7
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f008 f917 	bl	80097a4 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001576:	4b98      	ldr	r3, [pc, #608]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001578:	4a98      	ldr	r2, [pc, #608]	; (80017dc <MX_HRTIM_Init+0x2a0>)
 800157a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800157c:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001582:	4b95      	ldr	r3, [pc, #596]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001588:	4893      	ldr	r0, [pc, #588]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800158a:	f001 fcf5 	bl	8002f78 <HAL_HRTIM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001594:	f000 fbae 	bl	8001cf4 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001598:	f24c 2318 	movw	r3, #49688	; 0xc218
 800159c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80015a6:	2307      	movs	r3, #7
 80015a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80015ac:	2308      	movs	r3, #8
 80015ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80015b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015b6:	461a      	mov	r2, r3
 80015b8:	2100      	movs	r1, #0
 80015ba:	4887      	ldr	r0, [pc, #540]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80015bc:	f001 fdac 	bl	8003118 <HAL_HRTIM_TimeBaseConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80015c6:	f000 fb95 	bl	8001cf4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80015ca:	2314      	movs	r3, #20
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80015da:	2301      	movs	r3, #1
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80015de:	2300      	movs	r3, #0
 80015e0:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80015e2:	2300      	movs	r3, #0
 80015e4:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80015e6:	2300      	movs	r3, #0
 80015e8:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80015ee:	2300      	movs	r3, #0
 80015f0:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80015fa:	2300      	movs	r3, #0
 80015fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80015fe:	2300      	movs	r3, #0
 8001600:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001602:	2300      	movs	r3, #0
 8001604:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001606:	2300      	movs	r3, #0
 8001608:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800160a:	2300      	movs	r3, #0
 800160c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800160e:	2300      	movs	r3, #0
 8001610:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800161a:	2300      	movs	r3, #0
 800161c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800161e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	486c      	ldr	r0, [pc, #432]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001628:	f001 fd9e 	bl	8003168 <HAL_HRTIM_WaveformTimerConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001632:	f000 fb5f 	bl	8001cf4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001636:	2306      	movs	r3, #6
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800163a:	2300      	movs	r3, #0
 800163c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800163e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001642:	461a      	mov	r2, r3
 8001644:	2104      	movs	r1, #4
 8001646:	4864      	ldr	r0, [pc, #400]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001648:	f001 fd8e 	bl	8003168 <HAL_HRTIM_WaveformTimerConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001652:	f000 fb4f 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001656:	f240 631b 	movw	r3, #1563	; 0x61b
 800165a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	2201      	movs	r2, #1
 8001662:	2100      	movs	r1, #0
 8001664:	485c      	ldr	r0, [pc, #368]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001666:	f001 fdf1 	bl	800324c <HAL_HRTIM_WaveformCompareConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001670:	f000 fb40 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001674:	f244 5395 	movw	r3, #17813	; 0x4595
 8001678:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2202      	movs	r2, #2
 8001688:	2100      	movs	r1, #0
 800168a:	4853      	ldr	r0, [pc, #332]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800168c:	f001 fdde 	bl	800324c <HAL_HRTIM_WaveformCompareConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8001696:	f000 fb2d 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 800169a:	f640 536e 	movw	r3, #3438	; 0xd6e
 800169e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	2202      	movs	r2, #2
 80016a6:	2104      	movs	r1, #4
 80016a8:	484b      	ldr	r0, [pc, #300]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80016aa:	f001 fdcf 	bl	800324c <HAL_HRTIM_WaveformCompareConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80016b4:	f000 fb1e 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80016b8:	f644 0306 	movw	r3, #18438	; 0x4806
 80016bc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	2204      	movs	r2, #4
 80016c4:	2100      	movs	r1, #0
 80016c6:	4844      	ldr	r0, [pc, #272]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80016c8:	f001 fdc0 	bl	800324c <HAL_HRTIM_WaveformCompareConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80016d2:	f000 fb0f 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80016d6:	f244 435d 	movw	r3, #17501	; 0x445d
 80016da:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	2208      	movs	r2, #8
 80016e2:	2104      	movs	r1, #4
 80016e4:	483c      	ldr	r0, [pc, #240]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80016e6:	f001 fdb1 	bl	800324c <HAL_HRTIM_WaveformCompareConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 80016f0:	f000 fb00 	bl	8001cf4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80016f4:	2302      	movs	r3, #2
 80016f6:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 80016f8:	2328      	movs	r3, #40	; 0x28
 80016fa:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 80016fc:	2314      	movs	r3, #20
 80016fe:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001704:	2308      	movs	r3, #8
 8001706:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	2201      	movs	r2, #1
 8001718:	2100      	movs	r1, #0
 800171a:	482f      	ldr	r0, [pc, #188]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800171c:	f001 ff04 	bl	8003528 <HAL_HRTIM_WaveformOutputConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001726:	f000 fae5 	bl	8001cf4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 800172e:	2350      	movs	r3, #80	; 0x50
 8001730:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173c:	2104      	movs	r1, #4
 800173e:	4826      	ldr	r0, [pc, #152]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001740:	f001 fef2 	bl	8003528 <HAL_HRTIM_WaveformOutputConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 800174a:	f000 fad3 	bl	8001cf4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8001752:	2320      	movs	r3, #32
 8001754:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001756:	2310      	movs	r3, #16
 8001758:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800175a:	2308      	movs	r3, #8
 800175c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	2202      	movs	r2, #2
 8001762:	2100      	movs	r1, #0
 8001764:	481c      	ldr	r0, [pc, #112]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 8001766:	f001 fedf 	bl	8003528 <HAL_HRTIM_WaveformOutputConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8001770:	f000 fac0 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001774:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001778:	461a      	mov	r2, r3
 800177a:	2104      	movs	r1, #4
 800177c:	4816      	ldr	r0, [pc, #88]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800177e:	f001 fccb 	bl	8003118 <HAL_HRTIM_TimeBaseConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8001788:	f000 fab4 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 800178c:	f240 7353 	movw	r3, #1875	; 0x753
 8001790:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2201      	movs	r2, #1
 8001798:	2104      	movs	r1, #4
 800179a:	480f      	ldr	r0, [pc, #60]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 800179c:	f001 fd56 	bl	800324c <HAL_HRTIM_WaveformCompareConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 80017a6:	f000 faa5 	bl	8001cf4 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80017aa:	f643 6342 	movw	r3, #15938	; 0x3e42
 80017ae:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	2204      	movs	r2, #4
 80017b6:	2104      	movs	r1, #4
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80017ba:	f001 fd47 	bl	800324c <HAL_HRTIM_WaveformCompareConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 80017c4:	f000 fa96 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_HRTIM_Init+0x29c>)
 80017ca:	f000 fb67 	bl	8001e9c <HAL_HRTIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3790      	adds	r7, #144	; 0x90
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000d0 	.word	0x200000d0
 80017dc:	40017400 	.word	0x40017400

080017e0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_LPTIM1_Init+0x54>)
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <MX_LPTIM1_Init+0x58>)
 80017e8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_LPTIM1_Init+0x54>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_LPTIM1_Init+0x54>)
 80017f2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80017f6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_LPTIM1_Init+0x54>)
 80017fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017fe:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_LPTIM1_Init+0x54>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_LPTIM1_Init+0x54>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_LPTIM1_Init+0x54>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_LPTIM1_Init+0x54>)
 8001814:	2200      	movs	r2, #0
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_LPTIM1_Init+0x54>)
 800181a:	2200      	movs	r2, #0
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_LPTIM1_Init+0x54>)
 8001820:	f002 ffca 	bl	80047b8 <HAL_LPTIM_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800182a:	f000 fa63 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200001ac 	.word	0x200001ac
 8001838:	40002400 	.word	0x40002400

0800183c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <MX_TIM1_Init+0xa0>)
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <MX_TIM1_Init+0xa4>)
 800185e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_TIM1_Init+0xa0>)
 8001862:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM1_Init+0xa0>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_TIM1_Init+0xa0>)
 8001870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_TIM1_Init+0xa0>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_TIM1_Init+0xa0>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_TIM1_Init+0xa0>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001888:	4814      	ldr	r0, [pc, #80]	; (80018dc <MX_TIM1_Init+0xa0>)
 800188a:	f006 fad9 	bl	8007e40 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001894:	f000 fa2e 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_TIM1_Init+0xa0>)
 80018a6:	f006 fb23 	bl	8007ef0 <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018b0:	f000 fa20 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM1_Init+0xa0>)
 80018c6:	f006 fd43 	bl	8008350 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018d0:	f000 fa10 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200001e4 	.word	0x200001e4
 80018e0:	40010000 	.word	0x40010000

080018e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_TIM3_Init+0x94>)
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <MX_TIM3_Init+0x98>)
 8001906:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <MX_TIM3_Init+0x94>)
 800190a:	227c      	movs	r2, #124	; 0x7c
 800190c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_TIM3_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_TIM3_Init+0x94>)
 8001916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_TIM3_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_TIM3_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <MX_TIM3_Init+0x94>)
 800192a:	f006 fa89 	bl	8007e40 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001934:	f000 f9de 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM3_Init+0x94>)
 8001946:	f006 fad3 	bl	8007ef0 <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001950:	f000 f9d0 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM3_Init+0x94>)
 8001962:	f006 fcf5 	bl	8008350 <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800196c:	f000 f9c2 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000230 	.word	0x20000230
 800197c:	40000400 	.word	0x40000400

08001980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 8001986:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <MX_USART3_UART_Init+0x94>)
 8001988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <MX_USART3_UART_Init+0x98>)
 800198e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019a4:	220c      	movs	r2, #12
 80019a6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019c6:	4812      	ldr	r0, [pc, #72]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019c8:	f006 fd50 	bl	800846c <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80019d2:	f000 f98f 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d6:	2100      	movs	r1, #0
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019da:	f007 fde0 	bl	800959e <HAL_UARTEx_SetTxFifoThreshold>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80019e4:	f000 f986 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e8:	2100      	movs	r1, #0
 80019ea:	4809      	ldr	r0, [pc, #36]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019ec:	f007 fe15 	bl	800961a <HAL_UARTEx_SetRxFifoThreshold>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80019f6:	f000 f97d 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_USART3_UART_Init+0x90>)
 80019fc:	f007 fd96 	bl	800952c <HAL_UARTEx_DisableFifoMode>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001a06:	f000 f975 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000027c 	.word	0x2000027c
 8001a14:	40004800 	.word	0x40004800
 8001a18:	000f4240 	.word	0x000f4240

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	; 0x30
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a32:	4ba9      	ldr	r3, [pc, #676]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4aa7      	ldr	r2, [pc, #668]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4ba5      	ldr	r3, [pc, #660]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a50:	4ba1      	ldr	r3, [pc, #644]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	4aa0      	ldr	r2, [pc, #640]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a60:	4b9d      	ldr	r3, [pc, #628]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	4b9a      	ldr	r3, [pc, #616]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	4a98      	ldr	r2, [pc, #608]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7e:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a91      	ldr	r2, [pc, #580]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b8e      	ldr	r3, [pc, #568]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b8b      	ldr	r3, [pc, #556]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab0:	4a89      	ldr	r2, [pc, #548]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aba:	4b87      	ldr	r3, [pc, #540]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac8:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ace:	4a82      	ldr	r2, [pc, #520]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aec:	4a7a      	ldr	r2, [pc, #488]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <MX_GPIO_Init+0x2bc>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2134      	movs	r1, #52	; 0x34
 8001b08:	4874      	ldr	r0, [pc, #464]	; (8001cdc <MX_GPIO_Init+0x2c0>)
 8001b0a:	f001 f9e7 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f244 0101 	movw	r1, #16385	; 0x4001
 8001b14:	4872      	ldr	r0, [pc, #456]	; (8001ce0 <MX_GPIO_Init+0x2c4>)
 8001b16:	f001 f9e1 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b20:	4870      	ldr	r0, [pc, #448]	; (8001ce4 <MX_GPIO_Init+0x2c8>)
 8001b22:	f001 f9db 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001b2c:	486e      	ldr	r0, [pc, #440]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001b2e:	f001 f9d5 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b38:	486b      	ldr	r0, [pc, #428]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001b3a:	f001 f9cf 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001b3e:	2201      	movs	r2, #1
 8001b40:	21f8      	movs	r1, #248	; 0xf8
 8001b42:	4868      	ldr	r0, [pc, #416]	; (8001ce4 <MX_GPIO_Init+0x2c8>)
 8001b44:	f001 f9ca 	bl	8002edc <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4863      	ldr	r0, [pc, #396]	; (8001cdc <MX_GPIO_Init+0x2c0>)
 8001b4e:	f001 f9c5 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001b52:	2336      	movs	r3, #54	; 0x36
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	485c      	ldr	r0, [pc, #368]	; (8001cdc <MX_GPIO_Init+0x2c0>)
 8001b6a:	f000 ffef 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4858      	ldr	r0, [pc, #352]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001b86:	f000 ffe1 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b8a:	2332      	movs	r3, #50	; 0x32
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4850      	ldr	r0, [pc, #320]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001ba6:	f000 ffd1 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001baa:	2386      	movs	r3, #134	; 0x86
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bba:	230b      	movs	r3, #11
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4849      	ldr	r0, [pc, #292]	; (8001cec <MX_GPIO_Init+0x2d0>)
 8001bc6:	f000 ffc1 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001bca:	f244 0301 	movw	r3, #16385	; 0x4001
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	483f      	ldr	r0, [pc, #252]	; (8001ce0 <MX_GPIO_Init+0x2c4>)
 8001be4:	f000 ffb2 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bfa:	230b      	movs	r3, #11
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4836      	ldr	r0, [pc, #216]	; (8001ce0 <MX_GPIO_Init+0x2c4>)
 8001c06:	f000 ffa1 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001c0a:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001c0e:	61fb      	str	r3, [r7, #28]
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4830      	ldr	r0, [pc, #192]	; (8001ce4 <MX_GPIO_Init+0x2c8>)
 8001c24:	f000 ff92 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	482c      	ldr	r0, [pc, #176]	; (8001cf0 <MX_GPIO_Init+0x2d4>)
 8001c3e:	f000 ff85 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001c42:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001c5c:	f000 ff76 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c60:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c72:	230a      	movs	r3, #10
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	481b      	ldr	r0, [pc, #108]	; (8001cec <MX_GPIO_Init+0x2d0>)
 8001c7e:	f000 ff65 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <MX_GPIO_Init+0x2cc>)
 8001c98:	f000 ff58 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001c9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cae:	230b      	movs	r3, #11
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <MX_GPIO_Init+0x2d4>)
 8001cba:	f000 ff47 	bl	8002b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	2028      	movs	r0, #40	; 0x28
 8001cc4:	f000 fdad 	bl	8002822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cc8:	2028      	movs	r0, #40	; 0x28
 8001cca:	f000 fdc4 	bl	8002856 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cce:	bf00      	nop
 8001cd0:	3730      	adds	r7, #48	; 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58021000 	.word	0x58021000
 8001ce0:	58020400 	.word	0x58020400
 8001ce4:	58020c00 	.word	0x58020c00
 8001ce8:	58020800 	.word	0x58020800
 8001cec:	58020000 	.word	0x58020000
 8001cf0:	58021800 	.word	0x58021800

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001cfc:	f240 1103 	movw	r1, #259	; 0x103
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <Error_Handler+0x44>)
 8001d02:	f001 fd66 	bl	80037d2 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001d06:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <Error_Handler+0x44>)
 8001d0c:	f001 fdfe 	bl	800390c <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d16:	4809      	ldr	r0, [pc, #36]	; (8001d3c <Error_Handler+0x48>)
 8001d18:	f001 f8e0 	bl	8002edc <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <Error_Handler+0x4c>)
 8001d22:	f001 f8f4 	bl	8002f0e <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <Error_Handler+0x50>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f008 fd61 	bl	800a7f8 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d36:	e7f1      	b.n	8001d1c <Error_Handler+0x28>
 8001d38:	200000d0 	.word	0x200000d0
 8001d3c:	58020800 	.word	0x58020800
 8001d40:	58020400 	.word	0x58020400
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_MspInit+0x30>)
 8001d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x30>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x30>)
 8001d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	58024400 	.word	0x58024400

08001d7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_DAC_MspInit+0x80>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d129      	bne.n	8001df2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da4:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001daa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_DAC_MspInit+0x84>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dde:	2303      	movs	r3, #3
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <HAL_DAC_MspInit+0x88>)
 8001dee:	f000 fead 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	; 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40007400 	.word	0x40007400
 8001e00:	58024400 	.word	0x58024400
 8001e04:	58020000 	.word	0x58020000

08001e08 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0b4      	sub	sp, #208	; 0xd0
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	22c0      	movs	r2, #192	; 0xc0
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f007 fcc3 	bl	80097a4 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_HRTIM_MspInit+0x8c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d131      	bne.n	8001e8c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 f97c 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001e4a:	f7ff ff53 	bl	8001cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_HRTIM_MspInit+0x90>)
 8001e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e54:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <HAL_HRTIM_MspInit+0x90>)
 8001e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_HRTIM_MspInit+0x90>)
 8001e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2068      	movs	r0, #104	; 0x68
 8001e72:	f000 fcd6 	bl	8002822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8001e76:	2068      	movs	r0, #104	; 0x68
 8001e78:	f000 fced 	bl	8002856 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	206c      	movs	r0, #108	; 0x6c
 8001e82:	f000 fcce 	bl	8002822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8001e86:	206c      	movs	r0, #108	; 0x6c
 8001e88:	f000 fce5 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	37d0      	adds	r7, #208	; 0xd0
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40017400 	.word	0x40017400
 8001e98:	58024400 	.word	0x58024400

08001e9c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <HAL_HRTIM_MspPostInit+0xc8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d14d      	bne.n	8001f5a <HAL_HRTIM_MspPostInit+0xbe>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_HRTIM_MspPostInit+0xcc>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec4:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <HAL_HRTIM_MspPostInit+0xcc>)
 8001ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_HRTIM_MspPostInit+0xcc>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_HRTIM_MspPostInit+0xcc>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee2:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <HAL_HRTIM_MspPostInit+0xcc>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_HRTIM_MspPostInit+0xcc>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001efa:	2340      	movs	r3, #64	; 0x40
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4815      	ldr	r0, [pc, #84]	; (8001f6c <HAL_HRTIM_MspPostInit+0xd0>)
 8001f16:	f000 fe19 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f1a:	2340      	movs	r3, #64	; 0x40
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	480e      	ldr	r0, [pc, #56]	; (8001f70 <HAL_HRTIM_MspPostInit+0xd4>)
 8001f36:	f000 fe09 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4806      	ldr	r0, [pc, #24]	; (8001f70 <HAL_HRTIM_MspPostInit+0xd4>)
 8001f56:	f000 fdf9 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40017400 	.word	0x40017400
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	58021800 	.word	0x58021800
 8001f70:	58020800 	.word	0x58020800

08001f74 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0b4      	sub	sp, #208	; 0xd0
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	22c0      	movs	r2, #192	; 0xc0
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f007 fc0d 	bl	80097a4 <memset>
  if(hlptim->Instance==LPTIM1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_LPTIM_MspInit+0x80>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d12a      	bne.n	8001fea <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001f94:	f04f 0220 	mov.w	r2, #32
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001fa0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 f8c5 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8001fb8:	f7ff fe9c 	bl	8001cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_LPTIM_MspInit+0x84>)
 8001fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_LPTIM_MspInit+0x84>)
 8001fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_LPTIM_MspInit+0x84>)
 8001fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	205d      	movs	r0, #93	; 0x5d
 8001fe0:	f000 fc1f 	bl	8002822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001fe4:	205d      	movs	r0, #93	; 0x5d
 8001fe6:	f000 fc36 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	37d0      	adds	r7, #208	; 0xd0
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40002400 	.word	0x40002400
 8001ff8:	58024400 	.word	0x58024400

08001ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_TIM_Base_MspInit+0x68>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10f      	bne.n	800202e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800202c:	e013      	b.n	8002056 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_TIM_Base_MspInit+0x70>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d10e      	bne.n	8002056 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 800203a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 800204a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	58024400 	.word	0x58024400
 800206c:	40000400 	.word	0x40000400

08002070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0ba      	sub	sp, #232	; 0xe8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	22c0      	movs	r2, #192	; 0xc0
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f007 fb87 	bl	80097a4 <memset>
  if(huart->Instance==USART3)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a27      	ldr	r2, [pc, #156]	; (8002138 <HAL_UART_MspInit+0xc8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d146      	bne.n	800212e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020a0:	f04f 0202 	mov.w	r2, #2
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f840 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80020c2:	f7ff fe17 	bl	8001cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020cc:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ea:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211c:	2307      	movs	r3, #7
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002122:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <HAL_UART_MspInit+0xd0>)
 800212a:	f000 fd0f 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800212e:	bf00      	nop
 8002130:	37e8      	adds	r7, #232	; 0xe8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004800 	.word	0x40004800
 800213c:	58024400 	.word	0x58024400
 8002140:	58020c00 	.word	0x58020c00

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002148:	f003 ffdc 	bl	8006104 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 800214c:	f7ff fdd2 	bl	8001cf4 <Error_Handler>
 8002150:	e7fc      	b.n	800214c <NMI_Handler+0x8>

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002156:	f7ff fdcd 	bl	8001cf4 <Error_Handler>
 800215a:	e7fc      	b.n	8002156 <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8002160:	f7ff fdc8 	bl	8001cf4 <Error_Handler>
 8002164:	e7fc      	b.n	8002160 <MemManage_Handler+0x4>

08002166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 800216a:	f7ff fdc3 	bl	8001cf4 <Error_Handler>
 800216e:	e7fc      	b.n	800216a <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002174:	f7ff fdbe 	bl	8001cf4 <Error_Handler>
 8002178:	e7fc      	b.n	8002174 <UsageFault_Handler+0x4>

0800217a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a8:	f000 f9f0 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021b8:	f000 fec3 	bl	8002f42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <LPTIM1_IRQHandler+0x10>)
 80021c6:	f002 fc0e 	bl	80049e6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200001ac 	.word	0x200001ac

080021d4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80021d8:	2100      	movs	r1, #0
 80021da:	4802      	ldr	r0, [pc, #8]	; (80021e4 <HRTIM1_TIMA_IRQHandler+0x10>)
 80021dc:	f001 fc14 	bl	8003a08 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200000d0 	.word	0x200000d0

080021e8 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80021ec:	2104      	movs	r1, #4
 80021ee:	4802      	ldr	r0, [pc, #8]	; (80021f8 <HRTIM1_TIME_IRQHandler+0x10>)
 80021f0:	f001 fc0a 	bl	8003a08 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200000d0 	.word	0x200000d0

080021fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e00a      	b.n	8002224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800220e:	f3af 8000 	nop.w
 8002212:	4601      	mov	r1, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	60ba      	str	r2, [r7, #8]
 800221a:	b2ca      	uxtb	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbf0      	blt.n	800220e <_read+0x12>
	}

return len;
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e009      	b.n	800225c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fe8f 	bl	8000f74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	dbf1      	blt.n	8002248 <_write+0x12>
	}
	return len;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_close>:

int _close(int file)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	return -1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002296:	605a      	str	r2, [r3, #4]
	return 0;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_isatty>:

int _isatty(int file)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	return 1;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
	return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <_sbrk+0x5c>)
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <_sbrk+0x60>)
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <_sbrk+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <_sbrk+0x64>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <_sbrk+0x68>)
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	429a      	cmp	r2, r3
 8002306:	d207      	bcs.n	8002318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002308:	f007 fa14 	bl	8009734 <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	220c      	movs	r2, #12
 8002310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	e009      	b.n	800232c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <_sbrk+0x64>)
 8002328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20020000 	.word	0x20020000
 8002338:	00000400 	.word	0x00000400
 800233c:	20000320 	.word	0x20000320
 8002340:	20000338 	.word	0x20000338

08002344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <SystemInit+0xe4>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a36      	ldr	r2, [pc, #216]	; (8002428 <SystemInit+0xe4>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002358:	4b34      	ldr	r3, [pc, #208]	; (800242c <SystemInit+0xe8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	2b06      	cmp	r3, #6
 8002362:	d807      	bhi.n	8002374 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <SystemInit+0xe8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 030f 	bic.w	r3, r3, #15
 800236c:	4a2f      	ldr	r2, [pc, #188]	; (800242c <SystemInit+0xe8>)
 800236e:	f043 0307 	orr.w	r3, r3, #7
 8002372:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <SystemInit+0xec>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <SystemInit+0xec>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <SystemInit+0xec>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <SystemInit+0xec>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4929      	ldr	r1, [pc, #164]	; (8002430 <SystemInit+0xec>)
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <SystemInit+0xf0>)
 800238e:	4013      	ands	r3, r2
 8002390:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <SystemInit+0xe8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800239e:	4b23      	ldr	r3, [pc, #140]	; (800242c <SystemInit+0xe8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 030f 	bic.w	r3, r3, #15
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <SystemInit+0xe8>)
 80023a8:	f043 0307 	orr.w	r3, r3, #7
 80023ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <SystemInit+0xec>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <SystemInit+0xec>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <SystemInit+0xec>)
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <SystemInit+0xec>)
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <SystemInit+0xf4>)
 80023c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <SystemInit+0xec>)
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <SystemInit+0xf8>)
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <SystemInit+0xec>)
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <SystemInit+0xfc>)
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <SystemInit+0xec>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <SystemInit+0xec>)
 80023da:	4a19      	ldr	r2, [pc, #100]	; (8002440 <SystemInit+0xfc>)
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <SystemInit+0xec>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <SystemInit+0xec>)
 80023e6:	4a16      	ldr	r2, [pc, #88]	; (8002440 <SystemInit+0xfc>)
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <SystemInit+0xec>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <SystemInit+0xec>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <SystemInit+0xec>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <SystemInit+0xec>)
 80023fe:	2200      	movs	r2, #0
 8002400:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <SystemInit+0x100>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <SystemInit+0x104>)
 8002408:	4013      	ands	r3, r2
 800240a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800240e:	d202      	bcs.n	8002416 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <SystemInit+0x108>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <SystemInit+0x10c>)
 8002418:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800241c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00
 800242c:	52002000 	.word	0x52002000
 8002430:	58024400 	.word	0x58024400
 8002434:	eaf6ed7f 	.word	0xeaf6ed7f
 8002438:	02020200 	.word	0x02020200
 800243c:	01ff0000 	.word	0x01ff0000
 8002440:	01010280 	.word	0x01010280
 8002444:	5c001000 	.word	0x5c001000
 8002448:	ffff0000 	.word	0xffff0000
 800244c:	51008108 	.word	0x51008108
 8002450:	52004000 	.word	0x52004000

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800248c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002458:	f7ff ff74 	bl	8002344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800245e:	490d      	ldr	r1, [pc, #52]	; (8002494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002474:	4c0a      	ldr	r4, [pc, #40]	; (80024a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002482:	f007 f95d 	bl	8009740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7fe feb3 	bl	80011f0 <main>
  bx  lr
 800248a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800248c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002494:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002498:	0800aa90 	.word	0x0800aa90
  ldr r2, =_sbss
 800249c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80024a0:	20000338 	.word	0x20000338

080024a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC3_IRQHandler>
	...

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ae:	2003      	movs	r0, #3
 80024b0:	f000 f9ac 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024b4:	f003 fc50 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_Init+0x68>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	4913      	ldr	r1, [pc, #76]	; (8002514 <HAL_Init+0x6c>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_Init+0x68>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_Init+0x6c>)
 80024dc:	5cd3      	ldrb	r3, [r2, r3]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <HAL_Init+0x70>)
 80024ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024ec:	4a0b      	ldr	r2, [pc, #44]	; (800251c <HAL_Init+0x74>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 f814 	bl	8002520 <HAL_InitTick>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e002      	b.n	8002508 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002502:	f7ff fc21 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	58024400 	.word	0x58024400
 8002514:	0800a9b0 	.word	0x0800a9b0
 8002518:	20000018 	.word	0x20000018
 800251c:	20000014 	.word	0x20000014

08002520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_InitTick+0x60>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e021      	b.n	8002578 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_InitTick+0x64>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_InitTick+0x60>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002542:	fbb3 f3f1 	udiv	r3, r3, r1
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f991 	bl	8002872 <HAL_SYSTICK_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00e      	b.n	8002578 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d80a      	bhi.n	8002576 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f000 f95b 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <HAL_InitTick+0x68>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000020 	.word	0x20000020
 8002584:	20000014 	.word	0x20000014
 8002588:	2000001c 	.word	0x2000001c

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000020 	.word	0x20000020
 80025b0:	20000324 	.word	0x20000324

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000324 	.word	0x20000324

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff ffee 	bl	80025b4 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffde 	bl	80025b4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000020 	.word	0x20000020

08002614 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_SuspendTick+0x1c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_SuspendTick+0x1c>)
 800261e:	f023 0302 	bic.w	r3, r3, #2
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_ResumeTick+0x1c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <HAL_ResumeTick+0x1c>)
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e010 	.word	0xe000e010

08002654 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_GetREVID+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0c1b      	lsrs	r3, r3, #16
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	5c001000 	.word	0x5c001000

0800266c <__NVIC_SetPriorityGrouping>:
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <__NVIC_SetPriorityGrouping+0x40>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002696:	4313      	orrs	r3, r2
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x40>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	05fa0000 	.word	0x05fa0000

080026b4 <__NVIC_GetPriorityGrouping>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4907      	ldr	r1, [pc, #28]	; (8002708 <__NVIC_EnableIRQ+0x38>)
 80026ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100

0800270c <__NVIC_SetPriority>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff29 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff40 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff90 	bl	8002760 <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5f 	bl	800270c <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff33 	bl	80026d0 <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa4 	bl	80027c8 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e014      	b.n	80028c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	791b      	ldrb	r3, [r3, #4]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fa65 	bl	8001d7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	795b      	ldrb	r3, [r3, #5]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_DAC_ConfigChannel+0x18>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e12a      	b.n	8002b3e <HAL_DAC_ConfigChannel+0x26e>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2202      	movs	r2, #2
 80028f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	f040 8081 	bne.w	8002a00 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80028fe:	f7ff fe59 	bl	80025b4 <HAL_GetTick>
 8002902:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d140      	bne.n	800298c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800290a:	e018      	b.n	800293e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800290c:	f7ff fe52 	bl	80025b4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d911      	bls.n	800293e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002920:	4b89      	ldr	r3, [pc, #548]	; (8002b48 <HAL_DAC_ConfigChannel+0x278>)
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f043 0208 	orr.w	r2, r3, #8
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2203      	movs	r2, #3
 8002938:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0ff      	b.n	8002b3e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002944:	4b80      	ldr	r3, [pc, #512]	; (8002b48 <HAL_DAC_ConfigChannel+0x278>)
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1df      	bne.n	800290c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800294c:	2001      	movs	r0, #1
 800294e:	f7ff fe3d 	bl	80025cc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	6992      	ldr	r2, [r2, #24]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
 800295c:	e023      	b.n	80029a6 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800295e:	f7ff fe29 	bl	80025b4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d90f      	bls.n	800298c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2b00      	cmp	r3, #0
 8002974:	da0a      	bge.n	800298c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f043 0208 	orr.w	r2, r3, #8
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2203      	movs	r2, #3
 8002986:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0d8      	b.n	8002b3e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	2b00      	cmp	r3, #0
 8002994:	dbe3      	blt.n	800295e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff fe18 	bl	80025cc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	6992      	ldr	r2, [r2, #24]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	ea02 0103 	and.w	r1, r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	21ff      	movs	r1, #255	; 0xff
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	ea02 0103 	and.w	r1, r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	6a1a      	ldr	r2, [r3, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d11d      	bne.n	8002a44 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2207      	movs	r2, #7
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d102      	bne.n	8002a6e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	e00f      	b.n	8002a8e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d102      	bne.n	8002a7c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e008      	b.n	8002a8e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	e001      	b.n	8002a8e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	22c0      	movs	r2, #192	; 0xc0
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20008000 	.word	0x20008000

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b5a:	4b89      	ldr	r3, [pc, #548]	; (8002d80 <HAL_GPIO_Init+0x234>)
 8002b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b5e:	e194      	b.n	8002e8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8186 	beq.w	8002e84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d005      	beq.n	8002b90 <HAL_GPIO_Init+0x44>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d130      	bne.n	8002bf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0201 	and.w	r2, r3, #1
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d017      	beq.n	8002c2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d123      	bne.n	8002c82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	69b9      	ldr	r1, [r7, #24]
 8002c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0203 	and.w	r2, r3, #3
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80e0 	beq.w	8002e84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_GPIO_Init+0x238>)
 8002cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cca:	4a2e      	ldr	r2, [pc, #184]	; (8002d84 <HAL_GPIO_Init+0x238>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_GPIO_Init+0x238>)
 8002cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce2:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <HAL_GPIO_Init+0x23c>)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_GPIO_Init+0x240>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d052      	beq.n	8002db4 <HAL_GPIO_Init+0x268>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_GPIO_Init+0x244>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d031      	beq.n	8002d7a <HAL_GPIO_Init+0x22e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_GPIO_Init+0x248>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <HAL_GPIO_Init+0x22a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <HAL_GPIO_Init+0x24c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_GPIO_Init+0x250>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_GPIO_Init+0x254>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_GPIO_Init+0x258>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_GPIO_Init+0x25c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x216>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_GPIO_Init+0x260>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x212>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_GPIO_Init+0x264>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x20e>
 8002d56:	2309      	movs	r3, #9
 8002d58:	e02d      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	e02b      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	e029      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e027      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d66:	2306      	movs	r3, #6
 8002d68:	e025      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	e023      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e021      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e01f      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e01d      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e01b      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d7e:	bf00      	nop
 8002d80:	58000080 	.word	0x58000080
 8002d84:	58024400 	.word	0x58024400
 8002d88:	58000400 	.word	0x58000400
 8002d8c:	58020000 	.word	0x58020000
 8002d90:	58020400 	.word	0x58020400
 8002d94:	58020800 	.word	0x58020800
 8002d98:	58020c00 	.word	0x58020c00
 8002d9c:	58021000 	.word	0x58021000
 8002da0:	58021400 	.word	0x58021400
 8002da4:	58021800 	.word	0x58021800
 8002da8:	58021c00 	.word	0x58021c00
 8002dac:	58022000 	.word	0x58022000
 8002db0:	58022400 	.word	0x58022400
 8002db4:	2300      	movs	r3, #0
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f002 0203 	and.w	r2, r2, #3
 8002dbc:	0092      	lsls	r2, r2, #2
 8002dbe:	4093      	lsls	r3, r2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc6:	4938      	ldr	r1, [pc, #224]	; (8002ea8 <HAL_GPIO_Init+0x35c>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f ae63 	bne.w	8002b60 <HAL_GPIO_Init+0x14>
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	3724      	adds	r7, #36	; 0x24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	58000400 	.word	0x58000400

08002eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e001      	b.n	8002ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eec:	787b      	ldrb	r3, [r7, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ef8:	e003      	b.n	8002f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	041a      	lsls	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f20:	887a      	ldrh	r2, [r7, #2]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	041a      	lsls	r2, r3, #16
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	400b      	ands	r3, r1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe f815 	bl	8000f98 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0bd      	b.n	8003106 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d031      	beq.n	8003032 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a4f      	ldr	r2, [pc, #316]	; (8003110 <HAL_HRTIM_Init+0x198>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002fd8:	4b4e      	ldr	r3, [pc, #312]	; (8003114 <HAL_HRTIM_Init+0x19c>)
 8002fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fde:	4a4d      	ldr	r2, [pc, #308]	; (8003114 <HAL_HRTIM_Init+0x19c>)
 8002fe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fe4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fe8:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_HRTIM_Init+0x19c>)
 8002fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003004:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800301a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe fee8 	bl	8001e08 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d012      	beq.n	800306a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003052:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
 800307e:	e03e      	b.n	80030fe <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003080:	7dfa      	ldrb	r2, [r7, #23]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3318      	adds	r3, #24
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003094:	7dfa      	ldrb	r2, [r7, #23]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	331c      	adds	r3, #28
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80030a8:	7dfa      	ldrb	r2, [r7, #23]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	3320      	adds	r3, #32
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80030bc:	7dfa      	ldrb	r2, [r7, #23]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3324      	adds	r3, #36	; 0x24
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80030d0:	7dfa      	ldrb	r2, [r7, #23]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3328      	adds	r3, #40	; 0x28
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80030e4:	7dfa      	ldrb	r2, [r7, #23]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3330      	adds	r3, #48	; 0x30
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	3301      	adds	r3, #1
 80030fc:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d9bd      	bls.n	8003080 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40017400 	.word	0x40017400
 8003114:	58024400 	.word	0x58024400

08003118 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d101      	bne.n	8003134 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
 8003132:	e015      	b.n	8003160 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b05      	cmp	r3, #5
 8003140:	d104      	bne.n	800314c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fd43 	bl	8003bd0 <HRTIM_MasterBase_Config>
 800314a:	e004      	b.n	8003156 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fd6c 	bl	8003c2e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d101      	bne.n	8003184 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
 8003182:	e05f      	b.n	8003244 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800318e:	2302      	movs	r3, #2
 8003190:	e058      	b.n	8003244 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d104      	bne.n	80031b2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fd7f 	bl	8003cae <HRTIM_MasterWaveform_Config>
 80031b0:	e004      	b.n	80031bc <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fde0 	bl	8003d7c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4403      	add	r3, r0
 80031ce:	3320      	adds	r3, #32
 80031d0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4403      	add	r3, r0
 80031e4:	3324      	adds	r3, #36	; 0x24
 80031e6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6899      	ldr	r1, [r3, #8]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4403      	add	r3, r0
 80031fa:	3328      	adds	r3, #40	; 0x28
 80031fc:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68d9      	ldr	r1, [r3, #12]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4403      	add	r3, r0
 8003210:	332c      	adds	r3, #44	; 0x2c
 8003212:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6919      	ldr	r1, [r3, #16]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4403      	add	r3, r0
 8003226:	3330      	adds	r3, #48	; 0x30
 8003228:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 ffe3 	bl	80041f8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d101      	bne.n	800326a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
 8003268:	e157      	b.n	800351a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003274:	2302      	movs	r3, #2
 8003276:	e150      	b.n	800351a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d140      	bne.n	8003310 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3b01      	subs	r3, #1
 8003292:	2b07      	cmp	r3, #7
 8003294:	d82a      	bhi.n	80032ec <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032bd 	.word	0x080032bd
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032ed 	.word	0x080032ed
 80032a8:	080032d5 	.word	0x080032d5
 80032ac:	080032ed 	.word	0x080032ed
 80032b0:	080032ed 	.word	0x080032ed
 80032b4:	080032ed 	.word	0x080032ed
 80032b8:	080032e1 	.word	0x080032e1
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	61da      	str	r2, [r3, #28]
        break;
 80032c6:	e01a      	b.n	80032fe <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80032d2:	e014      	b.n	80032fe <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80032de:	e00e      	b.n	80032fe <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80032ea:	e008      	b.n	80032fe <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2207      	movs	r2, #7
 80032f0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 80032fc:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b07      	cmp	r3, #7
 8003308:	f040 80fe 	bne.w	8003508 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e104      	b.n	800351a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	2b07      	cmp	r3, #7
 8003316:	f200 80e3 	bhi.w	80034e0 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003341 	.word	0x08003341
 8003324:	08003355 	.word	0x08003355
 8003328:	080034e1 	.word	0x080034e1
 800332c:	08003411 	.word	0x08003411
 8003330:	080034e1 	.word	0x080034e1
 8003334:	080034e1 	.word	0x080034e1
 8003338:	080034e1 	.word	0x080034e1
 800333c:	08003425 	.word	0x08003425
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	01db      	lsls	r3, r3, #7
 800334c:	440b      	add	r3, r1
 800334e:	339c      	adds	r3, #156	; 0x9c
 8003350:	601a      	str	r2, [r3, #0]
        break;
 8003352:	e0d1      	b.n	80034f8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	01db      	lsls	r3, r3, #7
 8003360:	440b      	add	r3, r1
 8003362:	33a4      	adds	r3, #164	; 0xa4
 8003364:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d03f      	beq.n	80033ee <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3301      	adds	r3, #1
 8003376:	01db      	lsls	r3, r3, #7
 8003378:	4413      	add	r3, r2
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	6811      	ldr	r1, [r2, #0]
 8003380:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	3301      	adds	r3, #1
 8003388:	01db      	lsls	r3, r3, #7
 800338a:	440b      	add	r3, r1
 800338c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	3301      	adds	r3, #1
 8003396:	01db      	lsls	r3, r3, #7
 8003398:	4413      	add	r3, r2
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	68f9      	ldr	r1, [r7, #12]
 80033a2:	6809      	ldr	r1, [r1, #0]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3301      	adds	r3, #1
 80033aa:	01db      	lsls	r3, r3, #7
 80033ac:	440b      	add	r3, r1
 80033ae:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b8:	d109      	bne.n	80033ce <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	01db      	lsls	r3, r3, #7
 80033c6:	440b      	add	r3, r1
 80033c8:	339c      	adds	r3, #156	; 0x9c
 80033ca:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80033cc:	e091      	b.n	80034f2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033d6:	f040 808c 	bne.w	80034f2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	01db      	lsls	r3, r3, #7
 80033e6:	440b      	add	r3, r1
 80033e8:	33a8      	adds	r3, #168	; 0xa8
 80033ea:	601a      	str	r2, [r3, #0]
         break;
 80033ec:	e081      	b.n	80034f2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	01db      	lsls	r3, r3, #7
 80033f8:	4413      	add	r3, r2
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	6811      	ldr	r1, [r2, #0]
 8003400:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3301      	adds	r3, #1
 8003408:	01db      	lsls	r3, r3, #7
 800340a:	440b      	add	r3, r1
 800340c:	601a      	str	r2, [r3, #0]
         break;
 800340e:	e070      	b.n	80034f2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	01db      	lsls	r3, r3, #7
 800341c:	440b      	add	r3, r1
 800341e:	33a8      	adds	r3, #168	; 0xa8
 8003420:	601a      	str	r2, [r3, #0]
        break;
 8003422:	e069      	b.n	80034f8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	01db      	lsls	r3, r3, #7
 8003430:	440b      	add	r3, r1
 8003432:	33ac      	adds	r3, #172	; 0xac
 8003434:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d03f      	beq.n	80034be <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	4413      	add	r3, r2
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	6811      	ldr	r1, [r2, #0]
 8003450:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3301      	adds	r3, #1
 8003458:	01db      	lsls	r3, r3, #7
 800345a:	440b      	add	r3, r1
 800345c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	01db      	lsls	r3, r3, #7
 8003468:	4413      	add	r3, r2
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	6809      	ldr	r1, [r1, #0]
 8003476:	431a      	orrs	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	3301      	adds	r3, #1
 800347c:	01db      	lsls	r3, r3, #7
 800347e:	440b      	add	r3, r1
 8003480:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	d109      	bne.n	80034a0 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	01db      	lsls	r3, r3, #7
 8003498:	440b      	add	r3, r1
 800349a:	339c      	adds	r3, #156	; 0x9c
 800349c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800349e:	e02a      	b.n	80034f6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034a8:	d125      	bne.n	80034f6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	01db      	lsls	r3, r3, #7
 80034b6:	440b      	add	r3, r1
 80034b8:	33a8      	adds	r3, #168	; 0xa8
 80034ba:	601a      	str	r2, [r3, #0]
         break;
 80034bc:	e01b      	b.n	80034f6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3301      	adds	r3, #1
 80034c6:	01db      	lsls	r3, r3, #7
 80034c8:	4413      	add	r3, r2
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	6811      	ldr	r1, [r2, #0]
 80034d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3301      	adds	r3, #1
 80034d8:	01db      	lsls	r3, r3, #7
 80034da:	440b      	add	r3, r1
 80034dc:	601a      	str	r2, [r3, #0]
         break;
 80034de:	e00a      	b.n	80034f6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2207      	movs	r2, #7
 80034e4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80034f0:	e002      	b.n	80034f8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80034f2:	bf00      	nop
 80034f4:	e000      	b.n	80034f8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80034f6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b07      	cmp	r3, #7
 8003502:	d101      	bne.n	8003508 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e008      	b.n	800351a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d101      	bne.n	8003546 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	e01d      	b.n	8003582 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8003550:	2302      	movs	r3, #2
 8003552:	e016      	b.n	8003582 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fd46 	bl	8003ffc <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d101      	bne.n	80035aa <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
 80035a8:	e0df      	b.n	800376a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0d8      	b.n	800376a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ce:	f000 808d 	beq.w	80036ec <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	f200 80ad 	bhi.w	8003736 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e2:	d05e      	beq.n	80036a2 <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ea:	f200 80a4 	bhi.w	8003736 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d07b      	beq.n	80036ec <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	f200 809d 	bhi.w	8003736 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d84c      	bhi.n	800369c <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8096 	beq.w	8003736 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3b01      	subs	r3, #1
 800360e:	2b1f      	cmp	r3, #31
 8003610:	f200 8091 	bhi.w	8003736 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	080036a3 	.word	0x080036a3
 8003620:	080036ed 	.word	0x080036ed
 8003624:	08003737 	.word	0x08003737
 8003628:	080036a3 	.word	0x080036a3
 800362c:	08003737 	.word	0x08003737
 8003630:	08003737 	.word	0x08003737
 8003634:	08003737 	.word	0x08003737
 8003638:	080036ed 	.word	0x080036ed
 800363c:	08003737 	.word	0x08003737
 8003640:	08003737 	.word	0x08003737
 8003644:	08003737 	.word	0x08003737
 8003648:	08003737 	.word	0x08003737
 800364c:	08003737 	.word	0x08003737
 8003650:	08003737 	.word	0x08003737
 8003654:	08003737 	.word	0x08003737
 8003658:	080036a3 	.word	0x080036a3
 800365c:	08003737 	.word	0x08003737
 8003660:	08003737 	.word	0x08003737
 8003664:	08003737 	.word	0x08003737
 8003668:	08003737 	.word	0x08003737
 800366c:	08003737 	.word	0x08003737
 8003670:	08003737 	.word	0x08003737
 8003674:	08003737 	.word	0x08003737
 8003678:	08003737 	.word	0x08003737
 800367c:	08003737 	.word	0x08003737
 8003680:	08003737 	.word	0x08003737
 8003684:	08003737 	.word	0x08003737
 8003688:	08003737 	.word	0x08003737
 800368c:	08003737 	.word	0x08003737
 8003690:	08003737 	.word	0x08003737
 8003694:	08003737 	.word	0x08003737
 8003698:	080036ed 	.word	0x080036ed
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d149      	bne.n	8003736 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d110      	bne.n	80036ca <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	01db      	lsls	r3, r3, #7
 80036b0:	4413      	add	r3, r2
 80036b2:	33bc      	adds	r3, #188	; 0xbc
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6811      	ldr	r1, [r2, #0]
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	01db      	lsls	r3, r3, #7
 80036c2:	440b      	add	r3, r1
 80036c4:	33bc      	adds	r3, #188	; 0xbc
 80036c6:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 80036c8:	e03e      	b.n	8003748 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	01db      	lsls	r3, r3, #7
 80036d2:	4413      	add	r3, r2
 80036d4:	33c0      	adds	r3, #192	; 0xc0
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	6811      	ldr	r1, [r2, #0]
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	01db      	lsls	r3, r3, #7
 80036e4:	440b      	add	r3, r1
 80036e6:	33c0      	adds	r3, #192	; 0xc0
 80036e8:	601a      	str	r2, [r3, #0]
      break;
 80036ea:	e02d      	b.n	8003748 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d110      	bne.n	8003714 <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	01db      	lsls	r3, r3, #7
 80036fa:	4413      	add	r3, r2
 80036fc:	33c4      	adds	r3, #196	; 0xc4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6811      	ldr	r1, [r2, #0]
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	01db      	lsls	r3, r3, #7
 800370c:	440b      	add	r3, r1
 800370e:	33c4      	adds	r3, #196	; 0xc4
 8003710:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 8003712:	e019      	b.n	8003748 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	01db      	lsls	r3, r3, #7
 800371c:	4413      	add	r3, r2
 800371e:	33c8      	adds	r3, #200	; 0xc8
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6811      	ldr	r1, [r2, #0]
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	01db      	lsls	r3, r3, #7
 800372e:	440b      	add	r3, r1
 8003730:	33c8      	adds	r3, #200	; 0xc8
 8003732:	601a      	str	r2, [r3, #0]
      break;
 8003734:	e008      	b.n	8003748 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2207      	movs	r2, #7
 800373a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003746:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b07      	cmp	r3, #7
 8003752:	d101      	bne.n	8003758 <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e008      	b.n	800376a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop

08003778 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_HRTIM_WaveformOutputStart+0x18>
 800378c:	2302      	movs	r3, #2
 800378e:	e01a      	b.n	80037c6 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_HRTIM_WaveformOutputStop+0x18>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e01a      	b.n	8003820 <HAL_HRTIM_WaveformOutputStop+0x4e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8003840:	2302      	movs	r3, #2
 8003842:	e05b      	b.n	80038fc <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003888:	2300      	movs	r3, #0
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	e022      	b.n	80038d4 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8003892:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d017      	beq.n	80038ce <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	01db      	lsls	r3, r3, #7
 80038a6:	4413      	add	r3, r2
 80038a8:	338c      	adds	r3, #140	; 0x8c
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3320      	adds	r3, #32
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	4302      	orrs	r2, r0
 80038c6:	01db      	lsls	r3, r3, #7
 80038c8:	440b      	add	r3, r1
 80038ca:	338c      	adds	r3, #140	; 0x8c
 80038cc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	3301      	adds	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d9d9      	bls.n	800388e <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6819      	ldr	r1, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80038fa:	2300      	movs	r3, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	20000024 	.word	0x20000024

0800390c <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8003916:	f240 137f 	movw	r3, #383	; 0x17f
 800391a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8003926:	2302      	movs	r3, #2
 8003928:	e065      	b.n	80039f6 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	43da      	mvns	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	400a      	ands	r2, r1
 800394e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003968:	43da      	mvns	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	400a      	ands	r2, r1
 8003970:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	e023      	b.n	80039c0 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 800397c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d018      	beq.n	80039ba <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	01db      	lsls	r3, r3, #7
 8003990:	4413      	add	r3, r2
 8003992:	338c      	adds	r3, #140	; 0x8c
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3320      	adds	r3, #32
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	43da      	mvns	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	4002      	ands	r2, r0
 80039b2:	01db      	lsls	r3, r3, #7
 80039b4:	440b      	add	r3, r1
 80039b6:	338c      	adds	r3, #140	; 0x8c
 80039b8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	3301      	adds	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d9d8      	bls.n	8003978 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f9      	bne.n	80039c6 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6819      	ldr	r1, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	43da      	mvns	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	400a      	ands	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000024 	.word	0x20000024

08003a08 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2bff      	cmp	r3, #255	; 0xff
 8003a16:	d103      	bne.n	8003a20 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fc4f 	bl	80042bc <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8003a1e:	e00a      	b.n	8003a36 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d103      	bne.n	8003a2e <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fcc6 	bl	80043b8 <HRTIM_Master_ISR>
}
 8003a2c:	e003      	b.n	8003a36 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8003a2e:	6839      	ldr	r1, [r7, #0]
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fd6b 	bl	800450c <HRTIM_Timer_ISR>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f023 0307 	bic.w	r3, r3, #7
 8003be8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0318 	bic.w	r3, r3, #24
 8003bfa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	6852      	ldr	r2, [r2, #4]
 8003c20:	619a      	str	r2, [r3, #24]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	3301      	adds	r3, #1
 8003c42:	01db      	lsls	r3, r3, #7
 8003c44:	4413      	add	r3, r2
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 0307 	bic.w	r3, r3, #7
 8003c50:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0318 	bic.w	r3, r3, #24
 8003c62:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3301      	adds	r3, #1
 8003c76:	01db      	lsls	r3, r3, #7
 8003c78:	4413      	add	r3, r2
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	01db      	lsls	r3, r3, #7
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3394      	adds	r3, #148	; 0x94
 8003c8e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	01db      	lsls	r3, r3, #7
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3398      	adds	r3, #152	; 0x98
 8003ca0:	601a      	str	r2, [r3, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003cc8:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f023 0320 	bic.w	r3, r3, #32
 8003cd0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cf4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d06:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003d18:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d2a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d3e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d50:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b08b      	sub	sp, #44	; 0x2c
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	01db      	lsls	r3, r3, #7
 8003d92:	4413      	add	r3, r2
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3301      	adds	r3, #1
 8003da2:	01db      	lsls	r3, r3, #7
 8003da4:	440b      	add	r3, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	3301      	adds	r3, #1
 8003db0:	01db      	lsls	r3, r3, #7
 8003db2:	4413      	add	r3, r2
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	01db      	lsls	r3, r3, #7
 8003dc0:	4413      	add	r3, r2
 8003dc2:	33e8      	adds	r3, #232	; 0xe8
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	01db      	lsls	r3, r3, #7
 8003dd0:	4413      	add	r3, r2
 8003dd2:	33e4      	adds	r3, #228	; 0xe4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003de0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	f023 0320 	bic.w	r3, r3, #32
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df0:	4313      	orrs	r3, r2
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e02:	4313      	orrs	r3, r2
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	4313      	orrs	r3, r2
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e26:	4313      	orrs	r3, r2
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5e:	d103      	bne.n	8003e68 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	4313      	orrs	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	f023 031f 	bic.w	r3, r3, #31
 8003ea4:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eba:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d108      	bne.n	8003ee0 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	6a3a      	ldr	r2, [r7, #32]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003ee8:	d004      	beq.n	8003ef4 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003ef2:	d103      	bne.n	8003efc <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d108      	bne.n	8003f0e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003f02:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d843      	bhi.n	8003fa2 <HRTIM_TimingUnitWaveform_Config+0x226>
 8003f1a:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f35 	.word	0x08003f35
 8003f24:	08003f4b 	.word	0x08003f4b
 8003f28:	08003f61 	.word	0x08003f61
 8003f2c:	08003f77 	.word	0x08003f77
 8003f30:	08003f8d 	.word	0x08003f8d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f3a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]
      break;
 8003f48:	e02c      	b.n	8003fa4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f50:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61fb      	str	r3, [r7, #28]
      break;
 8003f5e:	e021      	b.n	8003fa4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003f66:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61fb      	str	r3, [r7, #28]
      break;
 8003f74:	e016      	b.n	8003fa4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f7c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61fb      	str	r3, [r7, #28]
      break;
 8003f8a:	e00b      	b.n	8003fa4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f92:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	015b      	lsls	r3, r3, #5
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
      break;
 8003fa0:	e000      	b.n	8003fa4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003fa2:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	3301      	adds	r3, #1
 8003fac:	01db      	lsls	r3, r3, #7
 8003fae:	4413      	add	r3, r2
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	01db      	lsls	r3, r3, #7
 8003fbc:	4413      	add	r3, r2
 8003fbe:	33e8      	adds	r3, #232	; 0xe8
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	01db      	lsls	r3, r3, #7
 8003fcc:	4413      	add	r3, r2
 8003fce:	33e4      	adds	r3, #228	; 0xe4
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	01db      	lsls	r3, r3, #7
 8003fdc:	4413      	add	r3, r2
 8003fde:	33d4      	adds	r3, #212	; 0xd4
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003fee:	bf00      	nop
 8003ff0:	372c      	adds	r7, #44	; 0x2c
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	; 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	01db      	lsls	r3, r3, #7
 8004016:	4413      	add	r3, r2
 8004018:	33e4      	adds	r3, #228	; 0xe4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	01db      	lsls	r3, r3, #7
 8004026:	4413      	add	r3, r2
 8004028:	33b8      	adds	r3, #184	; 0xb8
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d076      	beq.n	8004124 <HRTIM_OutputConfig+0x128>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403c:	f200 8087 	bhi.w	800414e <HRTIM_OutputConfig+0x152>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	d05a      	beq.n	80040fe <HRTIM_OutputConfig+0x102>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404e:	d87e      	bhi.n	800414e <HRTIM_OutputConfig+0x152>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d066      	beq.n	8004124 <HRTIM_OutputConfig+0x128>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d878      	bhi.n	800414e <HRTIM_OutputConfig+0x152>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b20      	cmp	r3, #32
 8004060:	d84a      	bhi.n	80040f8 <HRTIM_OutputConfig+0xfc>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d072      	beq.n	800414e <HRTIM_OutputConfig+0x152>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3b01      	subs	r3, #1
 800406c:	2b1f      	cmp	r3, #31
 800406e:	d86e      	bhi.n	800414e <HRTIM_OutputConfig+0x152>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <HRTIM_OutputConfig+0x7c>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	080040ff 	.word	0x080040ff
 800407c:	08004125 	.word	0x08004125
 8004080:	0800414f 	.word	0x0800414f
 8004084:	080040ff 	.word	0x080040ff
 8004088:	0800414f 	.word	0x0800414f
 800408c:	0800414f 	.word	0x0800414f
 8004090:	0800414f 	.word	0x0800414f
 8004094:	08004125 	.word	0x08004125
 8004098:	0800414f 	.word	0x0800414f
 800409c:	0800414f 	.word	0x0800414f
 80040a0:	0800414f 	.word	0x0800414f
 80040a4:	0800414f 	.word	0x0800414f
 80040a8:	0800414f 	.word	0x0800414f
 80040ac:	0800414f 	.word	0x0800414f
 80040b0:	0800414f 	.word	0x0800414f
 80040b4:	080040ff 	.word	0x080040ff
 80040b8:	0800414f 	.word	0x0800414f
 80040bc:	0800414f 	.word	0x0800414f
 80040c0:	0800414f 	.word	0x0800414f
 80040c4:	0800414f 	.word	0x0800414f
 80040c8:	0800414f 	.word	0x0800414f
 80040cc:	0800414f 	.word	0x0800414f
 80040d0:	0800414f 	.word	0x0800414f
 80040d4:	0800414f 	.word	0x0800414f
 80040d8:	0800414f 	.word	0x0800414f
 80040dc:	0800414f 	.word	0x0800414f
 80040e0:	0800414f 	.word	0x0800414f
 80040e4:	0800414f 	.word	0x0800414f
 80040e8:	0800414f 	.word	0x0800414f
 80040ec:	0800414f 	.word	0x0800414f
 80040f0:	0800414f 	.word	0x0800414f
 80040f4:	08004125 	.word	0x08004125
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d127      	bne.n	800414e <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	01db      	lsls	r3, r3, #7
 800410a:	440b      	add	r3, r1
 800410c:	33bc      	adds	r3, #188	; 0xbc
 800410e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	01db      	lsls	r3, r3, #7
 800411c:	440b      	add	r3, r1
 800411e:	33c0      	adds	r3, #192	; 0xc0
 8004120:	601a      	str	r2, [r3, #0]
      break;
 8004122:	e015      	b.n	8004150 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	01db      	lsls	r3, r3, #7
 8004130:	440b      	add	r3, r1
 8004132:	33c4      	adds	r3, #196	; 0xc4
 8004134:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6819      	ldr	r1, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	01db      	lsls	r3, r3, #7
 8004142:	440b      	add	r3, r1
 8004144:	33c8      	adds	r3, #200	; 0xc8
 8004146:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004148:	2310      	movs	r3, #16
 800414a:	61bb      	str	r3, [r7, #24]
      break;
 800414c:	e000      	b.n	8004150 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 800414e:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8004150:	22fe      	movs	r2, #254	; 0xfe
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004158:	43db      	mvns	r3, r3
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	4013      	ands	r3, r2
 800415e:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	4313      	orrs	r3, r2
 800416e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	4313      	orrs	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	4313      	orrs	r3, r2
 800419e:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	699a      	ldr	r2, [r3, #24]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d111      	bne.n	80041dc <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	01db      	lsls	r3, r3, #7
 80041e4:	4413      	add	r3, r2
 80041e6:	33e4      	adds	r3, #228	; 0xe4
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3724      	adds	r7, #36	; 0x24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d851      	bhi.n	80042ac <HRTIM_ForceRegistersUpdate+0xb4>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <HRTIM_ForceRegistersUpdate+0x18>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	0800423f 	.word	0x0800423f
 8004214:	08004255 	.word	0x08004255
 8004218:	0800426b 	.word	0x0800426b
 800421c:	08004281 	.word	0x08004281
 8004220:	08004297 	.word	0x08004297
 8004224:	08004229 	.word	0x08004229
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800423c:	e037      	b.n	80042ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0202 	orr.w	r2, r2, #2
 800424e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004252:	e02c      	b.n	80042ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0204 	orr.w	r2, r2, #4
 8004264:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004268:	e021      	b.n	80042ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0208 	orr.w	r2, r2, #8
 800427a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800427e:	e016      	b.n	80042ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0210 	orr.w	r2, r2, #16
 8004290:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004294:	e00b      	b.n	80042ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0220 	orr.w	r2, r2, #32
 80042a6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042aa:	e000      	b.n	80042ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80042ac:	bf00      	nop
  }
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop

080042bc <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80042cc:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80042d6:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fba1 	bl	8003a3e <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00c      	beq.n	8004320 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2202      	movs	r2, #2
 8004316:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fb99 	bl	8003a52 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2204      	movs	r2, #4
 800433a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fb91 	bl	8003a66 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00c      	beq.n	8004368 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2208      	movs	r2, #8
 800435e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fb89 	bl	8003a7a <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2210      	movs	r2, #16
 8004382:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fb81 	bl	8003a8e <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fb79 	bl	8003aa2 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80043c8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80043d2:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004400:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fb56 	bl	8003ab6 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00c      	beq.n	800442e <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d007      	beq.n	800442e <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004426:	2105      	movs	r1, #5
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fb63 	bl	8003af4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00c      	beq.n	8004452 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2202      	movs	r2, #2
 8004448:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800444a:	2105      	movs	r1, #5
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fc fe3d 	bl	80010cc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00c      	beq.n	8004476 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2204      	movs	r2, #4
 800446c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800446e:	2105      	movs	r1, #5
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7fc fe59 	bl	8001128 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2208      	movs	r2, #8
 8004490:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004492:	2105      	movs	r1, #5
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fb38 	bl	8003b0a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00c      	beq.n	80044be <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2210      	movs	r2, #16
 80044b4:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044b6:	2105      	movs	r1, #5
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fc fe8d 	bl	80011d8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2220      	movs	r2, #32
 80044d8:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff faf5 	bl	8003aca <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00c      	beq.n	8004504 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2240      	movs	r2, #64	; 0x40
 80044fa:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044fc:	2105      	movs	r1, #5
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff faed 	bl	8003ade <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004504:	bf00      	nop
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	01db      	lsls	r3, r3, #7
 8004520:	4413      	add	r3, r2
 8004522:	3304      	adds	r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	01db      	lsls	r3, r3, #7
 8004530:	4413      	add	r3, r2
 8004532:	338c      	adds	r3, #140	; 0x8c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00b      	beq.n	8004564 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	01db      	lsls	r3, r3, #7
 8004554:	4413      	add	r3, r2
 8004556:	3388      	adds	r3, #136	; 0x88
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fac8 	bl	8003af4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	01db      	lsls	r3, r3, #7
 8004580:	4413      	add	r3, r2
 8004582:	3388      	adds	r3, #136	; 0x88
 8004584:	2202      	movs	r2, #2
 8004586:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc fd9e 	bl	80010cc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	01db      	lsls	r3, r3, #7
 80045ac:	4413      	add	r3, r2
 80045ae:	3388      	adds	r3, #136	; 0x88
 80045b0:	2204      	movs	r2, #4
 80045b2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fdb6 	bl	8001128 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d010      	beq.n	80045e8 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	01db      	lsls	r3, r3, #7
 80045d8:	4413      	add	r3, r2
 80045da:	3388      	adds	r3, #136	; 0x88
 80045dc:	2208      	movs	r2, #8
 80045de:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fa91 	bl	8003b0a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	01db      	lsls	r3, r3, #7
 8004604:	4413      	add	r3, r2
 8004606:	3388      	adds	r3, #136	; 0x88
 8004608:	2210      	movs	r2, #16
 800460a:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800460c:	6839      	ldr	r1, [r7, #0]
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fde2 	bl	80011d8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d010      	beq.n	8004640 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	01db      	lsls	r3, r3, #7
 8004630:	4413      	add	r3, r2
 8004632:	3388      	adds	r3, #136	; 0x88
 8004634:	2240      	movs	r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fa4f 	bl	8003ade <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	01db      	lsls	r3, r3, #7
 800465c:	4413      	add	r3, r2
 800465e:	3388      	adds	r3, #136	; 0x88
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fa5a 	bl	8003b20 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d011      	beq.n	800469a <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	01db      	lsls	r3, r3, #7
 8004688:	4413      	add	r3, r2
 800468a:	3388      	adds	r3, #136	; 0x88
 800468c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004690:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fa4e 	bl	8003b36 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d011      	beq.n	80046c8 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	01db      	lsls	r3, r3, #7
 80046b6:	4413      	add	r3, r2
 80046b8:	3388      	adds	r3, #136	; 0x88
 80046ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046be:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80046c0:	6839      	ldr	r1, [r7, #0]
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fa58 	bl	8003b78 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d011      	beq.n	80046f6 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00c      	beq.n	80046f6 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	4413      	add	r3, r2
 80046e6:	3388      	adds	r3, #136	; 0x88
 80046e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ec:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fa4c 	bl	8003b8e <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d011      	beq.n	8004724 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	01db      	lsls	r3, r3, #7
 8004712:	4413      	add	r3, r2
 8004714:	3388      	adds	r3, #136	; 0x88
 8004716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800471a:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fa40 	bl	8003ba4 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00c      	beq.n	8004752 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	01db      	lsls	r3, r3, #7
 8004740:	4413      	add	r3, r2
 8004742:	3388      	adds	r3, #136	; 0x88
 8004744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004748:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff fa34 	bl	8003bba <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d011      	beq.n	8004780 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	01db      	lsls	r3, r3, #7
 800476e:	4413      	add	r3, r2
 8004770:	3388      	adds	r3, #136	; 0x88
 8004772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004776:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8004778:	6839      	ldr	r1, [r7, #0]
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff f9f1 	bl	8003b62 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d011      	beq.n	80047ae <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00c      	beq.n	80047ae <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	01db      	lsls	r3, r3, #7
 800479c:	4413      	add	r3, r2
 800479e:	3388      	adds	r3, #136	; 0x88
 80047a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047a4:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff f9cf 	bl	8003b4c <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e097      	b.n	80048fa <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fd fbc5 	bl	8001f74 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d004      	beq.n	800480c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800480a:	d103      	bne.n	8004814 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 031e 	bic.w	r3, r3, #30
 8004812:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4b38      	ldr	r3, [pc, #224]	; (8004904 <HAL_LPTIM_Init+0x14c>)
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_LPTIM_Init+0x150>)
 800482c:	4013      	ands	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004838:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800483e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004844:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800484a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004862:	4313      	orrs	r3, r2
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d004      	beq.n	800487c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800487a:	d107      	bne.n	800488c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004884:	4313      	orrs	r3, r2
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004894:	4293      	cmp	r3, r2
 8004896:	d00a      	beq.n	80048ae <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80048a0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80048a6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a14      	ldr	r2, [pc, #80]	; (800490c <HAL_LPTIM_Init+0x154>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_LPTIM_Init+0x112>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a12      	ldr	r2, [pc, #72]	; (8004910 <HAL_LPTIM_Init+0x158>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d108      	bne.n	80048dc <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24
 80048da:	e009      	b.n	80048f0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <HAL_LPTIM_Init+0x15c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d104      	bne.n	80048f0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	ffff1f3f 	.word	0xffff1f3f
 8004908:	ff19f1fe 	.word	0xff19f1fe
 800490c:	40002400 	.word	0x40002400
 8004910:	58002400 	.word	0x58002400
 8004914:	58002800 	.word	0x58002800

08004918 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d00c      	beq.n	800494c <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800493a:	d107      	bne.n	800494c <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800494a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2210      	movs	r2, #16
 8004962:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800496c:	2110      	movs	r1, #16
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f91e 	bl	8004bb0 <LPTIM_WaitForFlag>
 8004974:	4603      	mov	r3, r0
 8004976:	2b03      	cmp	r3, #3
 8004978:	d101      	bne.n	800497e <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e02f      	b.n	80049de <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f946 	bl	8004c10 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f905 	bl	8004b94 <HAL_LPTIM_GetState>
 800498a:	4603      	mov	r3, r0
 800498c:	2b03      	cmp	r3, #3
 800498e:	d101      	bne.n	8004994 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e024      	b.n	80049de <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0210 	orr.w	r2, r2, #16
 80049a2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0202 	orr.w	r2, r2, #2
 80049b2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0204 	orr.w	r2, r2, #4
 80049d2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d10d      	bne.n	8004a18 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d106      	bne.n	8004a18 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f882 	bl	8004b1c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d10d      	bne.n	8004a42 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d106      	bne.n	8004a42 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc fb37 	bl	80010b0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d10d      	bne.n	8004a6c <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d106      	bne.n	8004a6c <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2204      	movs	r2, #4
 8004a64:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f862 	bl	8004b30 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d10d      	bne.n	8004a96 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d106      	bne.n	8004a96 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f857 	bl	8004b44 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d10d      	bne.n	8004ac0 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0310 	and.w	r3, r3, #16
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d106      	bne.n	8004ac0 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f84c 	bl	8004b58 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d10d      	bne.n	8004aea <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d106      	bne.n	8004aea <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f841 	bl	8004b6c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d10d      	bne.n	8004b14 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d106      	bne.n	8004b14 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2240      	movs	r2, #64	; 0x40
 8004b0c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f836 	bl	8004b80 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004ba2:	b2db      	uxtb	r3, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <LPTIM_WaitForFlag+0x58>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <LPTIM_WaitForFlag+0x5c>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	0b9b      	lsrs	r3, r3, #14
 8004bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	4013      	ands	r3, r2
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d002      	beq.n	8004bfa <LPTIM_WaitForFlag+0x4a>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1ec      	bne.n	8004bd4 <LPTIM_WaitForFlag+0x24>

  return result;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	20000014 	.word	0x20000014
 8004c0c:	d1b71759 	.word	0xd1b71759

08004c10 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c20:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c22:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c26:	2301      	movs	r3, #1
 8004c28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a81      	ldr	r2, [pc, #516]	; (8004e3c <LPTIM_Disable+0x22c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d02d      	beq.n	8004c98 <LPTIM_Disable+0x88>
 8004c3c:	4a7f      	ldr	r2, [pc, #508]	; (8004e3c <LPTIM_Disable+0x22c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d830      	bhi.n	8004ca4 <LPTIM_Disable+0x94>
 8004c42:	4a7f      	ldr	r2, [pc, #508]	; (8004e40 <LPTIM_Disable+0x230>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d021      	beq.n	8004c8c <LPTIM_Disable+0x7c>
 8004c48:	4a7d      	ldr	r2, [pc, #500]	; (8004e40 <LPTIM_Disable+0x230>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d82a      	bhi.n	8004ca4 <LPTIM_Disable+0x94>
 8004c4e:	4a7d      	ldr	r2, [pc, #500]	; (8004e44 <LPTIM_Disable+0x234>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d015      	beq.n	8004c80 <LPTIM_Disable+0x70>
 8004c54:	4a7b      	ldr	r2, [pc, #492]	; (8004e44 <LPTIM_Disable+0x234>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d824      	bhi.n	8004ca4 <LPTIM_Disable+0x94>
 8004c5a:	4a7b      	ldr	r2, [pc, #492]	; (8004e48 <LPTIM_Disable+0x238>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <LPTIM_Disable+0x58>
 8004c60:	4a7a      	ldr	r2, [pc, #488]	; (8004e4c <LPTIM_Disable+0x23c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d006      	beq.n	8004c74 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004c66:	e01d      	b.n	8004ca4 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c68:	4b79      	ldr	r3, [pc, #484]	; (8004e50 <LPTIM_Disable+0x240>)
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c72:	e018      	b.n	8004ca6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c74:	4b76      	ldr	r3, [pc, #472]	; (8004e50 <LPTIM_Disable+0x240>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c7e:	e012      	b.n	8004ca6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004c80:	4b73      	ldr	r3, [pc, #460]	; (8004e50 <LPTIM_Disable+0x240>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c8a:	e00c      	b.n	8004ca6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004c8c:	4b70      	ldr	r3, [pc, #448]	; (8004e50 <LPTIM_Disable+0x240>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004c96:	e006      	b.n	8004ca6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004c98:	4b6d      	ldr	r3, [pc, #436]	; (8004e50 <LPTIM_Disable+0x240>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004ca2:	e000      	b.n	8004ca6 <LPTIM_Disable+0x96>
      break;
 8004ca4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a5a      	ldr	r2, [pc, #360]	; (8004e3c <LPTIM_Disable+0x22c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d059      	beq.n	8004d8c <LPTIM_Disable+0x17c>
 8004cd8:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <LPTIM_Disable+0x22c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d867      	bhi.n	8004dae <LPTIM_Disable+0x19e>
 8004cde:	4a58      	ldr	r2, [pc, #352]	; (8004e40 <LPTIM_Disable+0x230>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d042      	beq.n	8004d6a <LPTIM_Disable+0x15a>
 8004ce4:	4a56      	ldr	r2, [pc, #344]	; (8004e40 <LPTIM_Disable+0x230>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d861      	bhi.n	8004dae <LPTIM_Disable+0x19e>
 8004cea:	4a56      	ldr	r2, [pc, #344]	; (8004e44 <LPTIM_Disable+0x234>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d02b      	beq.n	8004d48 <LPTIM_Disable+0x138>
 8004cf0:	4a54      	ldr	r2, [pc, #336]	; (8004e44 <LPTIM_Disable+0x234>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d85b      	bhi.n	8004dae <LPTIM_Disable+0x19e>
 8004cf6:	4a54      	ldr	r2, [pc, #336]	; (8004e48 <LPTIM_Disable+0x238>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <LPTIM_Disable+0xf4>
 8004cfc:	4a53      	ldr	r2, [pc, #332]	; (8004e4c <LPTIM_Disable+0x23c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d011      	beq.n	8004d26 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004d02:	e054      	b.n	8004dae <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004d04:	4b52      	ldr	r3, [pc, #328]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	4a51      	ldr	r2, [pc, #324]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004d14:	4b4e      	ldr	r3, [pc, #312]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	4a4d      	ldr	r2, [pc, #308]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8004d24:	e044      	b.n	8004db0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004d26:	4b4a      	ldr	r3, [pc, #296]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d2c:	4a48      	ldr	r2, [pc, #288]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004d36:	4b46      	ldr	r3, [pc, #280]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d3c:	4a44      	ldr	r2, [pc, #272]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d46:	e033      	b.n	8004db0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004d48:	4b41      	ldr	r3, [pc, #260]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d4e:	4a40      	ldr	r2, [pc, #256]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004d58:	4b3d      	ldr	r3, [pc, #244]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d5e:	4a3c      	ldr	r2, [pc, #240]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d68:	e022      	b.n	8004db0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8004d6a:	4b39      	ldr	r3, [pc, #228]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d70:	4a37      	ldr	r2, [pc, #220]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8004d7a:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d80:	4a33      	ldr	r2, [pc, #204]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d8a:	e011      	b.n	8004db0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8004d8c:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d92:	4a2f      	ldr	r2, [pc, #188]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8004d9c:	4b2c      	ldr	r3, [pc, #176]	; (8004e50 <LPTIM_Disable+0x240>)
 8004d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da2:	4a2b      	ldr	r2, [pc, #172]	; (8004e50 <LPTIM_Disable+0x240>)
 8004da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004dac:	e000      	b.n	8004db0 <LPTIM_Disable+0x1a0>
      break;
 8004dae:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <LPTIM_Disable+0x1ae>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80d0 	beq.w	8004f5e <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <LPTIM_Disable+0x22c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d031      	beq.n	8004e2c <LPTIM_Disable+0x21c>
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <LPTIM_Disable+0x22c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d842      	bhi.n	8004e54 <LPTIM_Disable+0x244>
 8004dce:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <LPTIM_Disable+0x230>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d024      	beq.n	8004e1e <LPTIM_Disable+0x20e>
 8004dd4:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <LPTIM_Disable+0x230>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d83c      	bhi.n	8004e54 <LPTIM_Disable+0x244>
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <LPTIM_Disable+0x234>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d017      	beq.n	8004e10 <LPTIM_Disable+0x200>
 8004de0:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <LPTIM_Disable+0x234>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d836      	bhi.n	8004e54 <LPTIM_Disable+0x244>
 8004de6:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <LPTIM_Disable+0x238>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <LPTIM_Disable+0x1e4>
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <LPTIM_Disable+0x23c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004df2:	e02f      	b.n	8004e54 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8004df4:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <LPTIM_Disable+0x240>)
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <LPTIM_Disable+0x240>)
 8004dfa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004dfe:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8004e00:	e029      	b.n	8004e56 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <LPTIM_Disable+0x240>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <LPTIM_Disable+0x240>)
 8004e08:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004e0c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e0e:	e022      	b.n	8004e56 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <LPTIM_Disable+0x240>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <LPTIM_Disable+0x240>)
 8004e16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e1a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e1c:	e01b      	b.n	8004e56 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <LPTIM_Disable+0x240>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	4a0b      	ldr	r2, [pc, #44]	; (8004e50 <LPTIM_Disable+0x240>)
 8004e24:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e28:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e2a:	e014      	b.n	8004e56 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8004e2c:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <LPTIM_Disable+0x240>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	4a07      	ldr	r2, [pc, #28]	; (8004e50 <LPTIM_Disable+0x240>)
 8004e32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e36:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e38:	e00d      	b.n	8004e56 <LPTIM_Disable+0x246>
 8004e3a:	bf00      	nop
 8004e3c:	58003000 	.word	0x58003000
 8004e40:	58002c00 	.word	0x58002c00
 8004e44:	58002800 	.word	0x58002800
 8004e48:	40002400 	.word	0x40002400
 8004e4c:	58002400 	.word	0x58002400
 8004e50:	58024400 	.word	0x58024400
        break;
 8004e54:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004e74:	2108      	movs	r1, #8
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff fe9a 	bl	8004bb0 <LPTIM_WaitForFlag>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d103      	bne.n	8004e8a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2203      	movs	r2, #3
 8004e86:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2208      	movs	r2, #8
 8004e90:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01a      	beq.n	8004ece <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004eb0:	2110      	movs	r1, #16
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fe7c 	bl	8004bb0 <LPTIM_WaitForFlag>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d103      	bne.n	8004ec6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2210      	movs	r2, #16
 8004ecc:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a33      	ldr	r2, [pc, #204]	; (8004fa0 <LPTIM_Disable+0x390>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d039      	beq.n	8004f4c <LPTIM_Disable+0x33c>
 8004ed8:	4a31      	ldr	r2, [pc, #196]	; (8004fa0 <LPTIM_Disable+0x390>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d841      	bhi.n	8004f62 <LPTIM_Disable+0x352>
 8004ede:	4a31      	ldr	r2, [pc, #196]	; (8004fa4 <LPTIM_Disable+0x394>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d02a      	beq.n	8004f3a <LPTIM_Disable+0x32a>
 8004ee4:	4a2f      	ldr	r2, [pc, #188]	; (8004fa4 <LPTIM_Disable+0x394>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d83b      	bhi.n	8004f62 <LPTIM_Disable+0x352>
 8004eea:	4a2f      	ldr	r2, [pc, #188]	; (8004fa8 <LPTIM_Disable+0x398>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d01b      	beq.n	8004f28 <LPTIM_Disable+0x318>
 8004ef0:	4a2d      	ldr	r2, [pc, #180]	; (8004fa8 <LPTIM_Disable+0x398>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d835      	bhi.n	8004f62 <LPTIM_Disable+0x352>
 8004ef6:	4a2d      	ldr	r2, [pc, #180]	; (8004fac <LPTIM_Disable+0x39c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <LPTIM_Disable+0x2f4>
 8004efc:	4a2c      	ldr	r2, [pc, #176]	; (8004fb0 <LPTIM_Disable+0x3a0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004f02:	e02e      	b.n	8004f62 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004f04:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f08:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f0c:	4929      	ldr	r1, [pc, #164]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	4313      	orrs	r3, r2
 8004f12:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8004f14:	e026      	b.n	8004f64 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004f16:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f1e:	4925      	ldr	r1, [pc, #148]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	4313      	orrs	r3, r2
 8004f24:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f26:	e01d      	b.n	8004f64 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004f28:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f30:	4920      	ldr	r1, [pc, #128]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	4313      	orrs	r3, r2
 8004f36:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f38:	e014      	b.n	8004f64 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f42:	491c      	ldr	r1, [pc, #112]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f46:	4313      	orrs	r3, r2
 8004f48:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f4a:	e00b      	b.n	8004f64 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f54:	4917      	ldr	r1, [pc, #92]	; (8004fb4 <LPTIM_Disable+0x3a4>)
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f5c:	e002      	b.n	8004f64 <LPTIM_Disable+0x354>
    }
  }
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <LPTIM_Disable+0x354>
        break;
 8004f62:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f383 8810 	msr	PRIMASK, r3
}
 8004f96:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004f98:	bf00      	nop
 8004f9a:	3730      	adds	r7, #48	; 0x30
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	58003000 	.word	0x58003000
 8004fa4:	58002c00 	.word	0x58002c00
 8004fa8:	58002800 	.word	0x58002800
 8004fac:	40002400 	.word	0x40002400
 8004fb0:	58002400 	.word	0x58002400
 8004fb4:	58024400 	.word	0x58024400

08004fb8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc6:	6013      	str	r3, [r2, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	58024800 	.word	0x58024800

08004fd8 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004fe4:	4b08      	ldr	r3, [pc, #32]	; (8005008 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	4a07      	ldr	r2, [pc, #28]	; (8005008 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004fea:	f023 0304 	bic.w	r3, r3, #4
 8004fee:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004ff6:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8004ff8:	e000      	b.n	8004ffc <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8004ffa:	bf20      	wfe
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005018:	4b18      	ldr	r3, [pc, #96]	; (800507c <HAL_PWR_EnterSTOPMode+0x70>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f023 0201 	bic.w	r2, r3, #1
 8005020:	4916      	ldr	r1, [pc, #88]	; (800507c <HAL_PWR_EnterSTOPMode+0x70>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4313      	orrs	r3, r2
 8005026:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <HAL_PWR_EnterSTOPMode+0x70>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <HAL_PWR_EnterSTOPMode+0x70>)
 800502e:	f023 0305 	bic.w	r3, r3, #5
 8005032:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_PWR_EnterSTOPMode+0x70>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	4a10      	ldr	r2, [pc, #64]	; (800507c <HAL_PWR_EnterSTOPMode+0x70>)
 800503a:	f023 0302 	bic.w	r3, r3, #2
 800503e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005040:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <HAL_PWR_EnterSTOPMode+0x74>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4a0e      	ldr	r2, [pc, #56]	; (8005080 <HAL_PWR_EnterSTOPMode+0x74>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800504c:	f3bf 8f4f 	dsb	sy
}
 8005050:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005052:	f3bf 8f6f 	isb	sy
}
 8005056:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800505e:	bf30      	wfi
 8005060:	e000      	b.n	8005064 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8005062:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_PWR_EnterSTOPMode+0x74>)
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	4a05      	ldr	r2, [pc, #20]	; (8005080 <HAL_PWR_EnterSTOPMode+0x74>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	6113      	str	r3, [r2, #16]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	58024800 	.word	0x58024800
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800508c:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d00a      	beq.n	80050ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005098:	4b16      	ldr	r3, [pc, #88]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d001      	beq.n	80050aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e01f      	b.n	80050ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e01d      	b.n	80050ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f023 0207 	bic.w	r2, r3, #7
 80050b6:	490f      	ldr	r1, [pc, #60]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80050be:	f7fd fa79 	bl	80025b4 <HAL_GetTick>
 80050c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050c4:	e009      	b.n	80050da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80050c6:	f7fd fa75 	bl	80025b4 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d4:	d901      	bls.n	80050da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e007      	b.n	80050ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e6:	d1ee      	bne.n	80050c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	58024800 	.word	0x58024800

080050f8 <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a04      	ldr	r2, [pc, #16]	; (8005114 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 8005102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	58024800 	.word	0x58024800

08005118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08c      	sub	sp, #48	; 0x30
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f000 bc48 	b.w	80059bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8088 	beq.w	800524a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513a:	4b99      	ldr	r3, [pc, #612]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005144:	4b96      	ldr	r3, [pc, #600]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	2b10      	cmp	r3, #16
 800514e:	d007      	beq.n	8005160 <HAL_RCC_OscConfig+0x48>
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	2b18      	cmp	r3, #24
 8005154:	d111      	bne.n	800517a <HAL_RCC_OscConfig+0x62>
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d10c      	bne.n	800517a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005160:	4b8f      	ldr	r3, [pc, #572]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d06d      	beq.n	8005248 <HAL_RCC_OscConfig+0x130>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d169      	bne.n	8005248 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f000 bc21 	b.w	80059bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005182:	d106      	bne.n	8005192 <HAL_RCC_OscConfig+0x7a>
 8005184:	4b86      	ldr	r3, [pc, #536]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a85      	ldr	r2, [pc, #532]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800518a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	e02e      	b.n	80051f0 <HAL_RCC_OscConfig+0xd8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x9c>
 800519a:	4b81      	ldr	r3, [pc, #516]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a80      	ldr	r2, [pc, #512]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	4b7e      	ldr	r3, [pc, #504]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a7d      	ldr	r2, [pc, #500]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e01d      	b.n	80051f0 <HAL_RCC_OscConfig+0xd8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0xc0>
 80051be:	4b78      	ldr	r3, [pc, #480]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a77      	ldr	r2, [pc, #476]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	4b75      	ldr	r3, [pc, #468]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a74      	ldr	r2, [pc, #464]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e00b      	b.n	80051f0 <HAL_RCC_OscConfig+0xd8>
 80051d8:	4b71      	ldr	r3, [pc, #452]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a70      	ldr	r2, [pc, #448]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	4b6e      	ldr	r3, [pc, #440]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a6d      	ldr	r2, [pc, #436]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d013      	beq.n	8005220 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fd f9dc 	bl	80025b4 <HAL_GetTick>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005200:	f7fd f9d8 	bl	80025b4 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b64      	cmp	r3, #100	; 0x64
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e3d4      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005212:	4b63      	ldr	r3, [pc, #396]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0xe8>
 800521e:	e014      	b.n	800524a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd f9c8 	bl	80025b4 <HAL_GetTick>
 8005224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005228:	f7fd f9c4 	bl	80025b4 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b64      	cmp	r3, #100	; 0x64
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e3c0      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800523a:	4b59      	ldr	r3, [pc, #356]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x110>
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80ca 	beq.w	80053ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005258:	4b51      	ldr	r3, [pc, #324]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005260:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005262:	4b4f      	ldr	r3, [pc, #316]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <HAL_RCC_OscConfig+0x166>
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2b18      	cmp	r3, #24
 8005272:	d156      	bne.n	8005322 <HAL_RCC_OscConfig+0x20a>
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d151      	bne.n	8005322 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527e:	4b48      	ldr	r3, [pc, #288]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_RCC_OscConfig+0x17e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e392      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005296:	4b42      	ldr	r3, [pc, #264]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 0219 	bic.w	r2, r3, #25
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	493f      	ldr	r1, [pc, #252]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fd f984 	bl	80025b4 <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b0:	f7fd f980 	bl	80025b4 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e37c      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c2:	4b37      	ldr	r3, [pc, #220]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ce:	f7fd f9c1 	bl	8002654 <HAL_GetREVID>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052d8:	4293      	cmp	r3, r2
 80052da:	d817      	bhi.n	800530c <HAL_RCC_OscConfig+0x1f4>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d108      	bne.n	80052f6 <HAL_RCC_OscConfig+0x1de>
 80052e4:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052ec:	4a2c      	ldr	r2, [pc, #176]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f4:	e07a      	b.n	80053ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f6:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	031b      	lsls	r3, r3, #12
 8005304:	4926      	ldr	r1, [pc, #152]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800530a:	e06f      	b.n	80053ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	4921      	ldr	r1, [pc, #132]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005320:	e064      	b.n	80053ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d047      	beq.n	80053ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800532a:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 0219 	bic.w	r2, r3, #25
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	491a      	ldr	r1, [pc, #104]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fd f93a 	bl	80025b4 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005344:	f7fd f936 	bl	80025b4 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e332      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005362:	f7fd f977 	bl	8002654 <HAL_GetREVID>
 8005366:	4603      	mov	r3, r0
 8005368:	f241 0203 	movw	r2, #4099	; 0x1003
 800536c:	4293      	cmp	r3, r2
 800536e:	d819      	bhi.n	80053a4 <HAL_RCC_OscConfig+0x28c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d108      	bne.n	800538a <HAL_RCC_OscConfig+0x272>
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005380:	4a07      	ldr	r2, [pc, #28]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	6053      	str	r3, [r2, #4]
 8005388:	e030      	b.n	80053ec <HAL_RCC_OscConfig+0x2d4>
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	031b      	lsls	r3, r3, #12
 8005398:	4901      	ldr	r1, [pc, #4]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]
 800539e:	e025      	b.n	80053ec <HAL_RCC_OscConfig+0x2d4>
 80053a0:	58024400 	.word	0x58024400
 80053a4:	4b9a      	ldr	r3, [pc, #616]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	4997      	ldr	r1, [pc, #604]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]
 80053b8:	e018      	b.n	80053ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ba:	4b95      	ldr	r3, [pc, #596]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a94      	ldr	r2, [pc, #592]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fd f8f5 	bl	80025b4 <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ce:	f7fd f8f1 	bl	80025b4 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e2ed      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053e0:	4b8b      	ldr	r3, [pc, #556]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f0      	bne.n	80053ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80a9 	beq.w	800554c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fa:	4b85      	ldr	r3, [pc, #532]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005402:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005404:	4b82      	ldr	r3, [pc, #520]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d007      	beq.n	8005420 <HAL_RCC_OscConfig+0x308>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b18      	cmp	r3, #24
 8005414:	d13a      	bne.n	800548c <HAL_RCC_OscConfig+0x374>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	2b01      	cmp	r3, #1
 800541e:	d135      	bne.n	800548c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005420:	4b7b      	ldr	r3, [pc, #492]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_OscConfig+0x320>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e2c1      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005438:	f7fd f90c 	bl	8002654 <HAL_GetREVID>
 800543c:	4603      	mov	r3, r0
 800543e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005442:	4293      	cmp	r3, r2
 8005444:	d817      	bhi.n	8005476 <HAL_RCC_OscConfig+0x35e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	2b20      	cmp	r3, #32
 800544c:	d108      	bne.n	8005460 <HAL_RCC_OscConfig+0x348>
 800544e:	4b70      	ldr	r3, [pc, #448]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005456:	4a6e      	ldr	r2, [pc, #440]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800545c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800545e:	e075      	b.n	800554c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005460:	4b6b      	ldr	r3, [pc, #428]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	069b      	lsls	r3, r3, #26
 800546e:	4968      	ldr	r1, [pc, #416]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005470:	4313      	orrs	r3, r2
 8005472:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005474:	e06a      	b.n	800554c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005476:	4b66      	ldr	r3, [pc, #408]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	061b      	lsls	r3, r3, #24
 8005484:	4962      	ldr	r1, [pc, #392]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005486:	4313      	orrs	r3, r2
 8005488:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800548a:	e05f      	b.n	800554c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d042      	beq.n	800551a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005494:	4b5e      	ldr	r3, [pc, #376]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a5d      	ldr	r2, [pc, #372]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 800549a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fd f888 	bl	80025b4 <HAL_GetTick>
 80054a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054a8:	f7fd f884 	bl	80025b4 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e280      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054ba:	4b55      	ldr	r3, [pc, #340]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054c6:	f7fd f8c5 	bl	8002654 <HAL_GetREVID>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d817      	bhi.n	8005504 <HAL_RCC_OscConfig+0x3ec>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d108      	bne.n	80054ee <HAL_RCC_OscConfig+0x3d6>
 80054dc:	4b4c      	ldr	r3, [pc, #304]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054e4:	4a4a      	ldr	r2, [pc, #296]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80054e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ea:	6053      	str	r3, [r2, #4]
 80054ec:	e02e      	b.n	800554c <HAL_RCC_OscConfig+0x434>
 80054ee:	4b48      	ldr	r3, [pc, #288]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	069b      	lsls	r3, r3, #26
 80054fc:	4944      	ldr	r1, [pc, #272]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]
 8005502:	e023      	b.n	800554c <HAL_RCC_OscConfig+0x434>
 8005504:	4b42      	ldr	r3, [pc, #264]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	493f      	ldr	r1, [pc, #252]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005514:	4313      	orrs	r3, r2
 8005516:	60cb      	str	r3, [r1, #12]
 8005518:	e018      	b.n	800554c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800551a:	4b3d      	ldr	r3, [pc, #244]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a3c      	ldr	r2, [pc, #240]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fd f845 	bl	80025b4 <HAL_GetTick>
 800552a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800552e:	f7fd f841 	bl	80025b4 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e23d      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d036      	beq.n	80055c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d019      	beq.n	8005594 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005560:	4b2b      	ldr	r3, [pc, #172]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005564:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fd f822 	bl	80025b4 <HAL_GetTick>
 8005570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005574:	f7fd f81e 	bl	80025b4 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e21a      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x45c>
 8005592:	e018      	b.n	80055c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005594:	4b1e      	ldr	r3, [pc, #120]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005598:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fd f808 	bl	80025b4 <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a8:	f7fd f804 	bl	80025b4 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e200      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80055bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d039      	beq.n	8005646 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01c      	beq.n	8005614 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a0c      	ldr	r2, [pc, #48]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 80055e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055e6:	f7fc ffe5 	bl	80025b4 <HAL_GetTick>
 80055ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ee:	f7fc ffe1 	bl	80025b4 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e1dd      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <HAL_RCC_OscConfig+0x4f8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x4d6>
 800560c:	e01b      	b.n	8005646 <HAL_RCC_OscConfig+0x52e>
 800560e:	bf00      	nop
 8005610:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005614:	4b9b      	ldr	r3, [pc, #620]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a9a      	ldr	r2, [pc, #616]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800561a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800561e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005620:	f7fc ffc8 	bl	80025b4 <HAL_GetTick>
 8005624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005628:	f7fc ffc4 	bl	80025b4 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e1c0      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800563a:	4b92      	ldr	r3, [pc, #584]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8081 	beq.w	8005756 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005654:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <HAL_RCC_OscConfig+0x770>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a8b      	ldr	r2, [pc, #556]	; (8005888 <HAL_RCC_OscConfig+0x770>)
 800565a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005660:	f7fc ffa8 	bl	80025b4 <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005668:	f7fc ffa4 	bl	80025b4 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e1a0      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800567a:	4b83      	ldr	r3, [pc, #524]	; (8005888 <HAL_RCC_OscConfig+0x770>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d106      	bne.n	800569c <HAL_RCC_OscConfig+0x584>
 800568e:	4b7d      	ldr	r3, [pc, #500]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	4a7c      	ldr	r2, [pc, #496]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6713      	str	r3, [r2, #112]	; 0x70
 800569a:	e02d      	b.n	80056f8 <HAL_RCC_OscConfig+0x5e0>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10c      	bne.n	80056be <HAL_RCC_OscConfig+0x5a6>
 80056a4:	4b77      	ldr	r3, [pc, #476]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	4a76      	ldr	r2, [pc, #472]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6713      	str	r3, [r2, #112]	; 0x70
 80056b0:	4b74      	ldr	r3, [pc, #464]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	4a73      	ldr	r2, [pc, #460]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056b6:	f023 0304 	bic.w	r3, r3, #4
 80056ba:	6713      	str	r3, [r2, #112]	; 0x70
 80056bc:	e01c      	b.n	80056f8 <HAL_RCC_OscConfig+0x5e0>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCC_OscConfig+0x5c8>
 80056c6:	4b6f      	ldr	r3, [pc, #444]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a6e      	ldr	r2, [pc, #440]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056cc:	f043 0304 	orr.w	r3, r3, #4
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70
 80056d2:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	4a6b      	ldr	r2, [pc, #428]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	6713      	str	r3, [r2, #112]	; 0x70
 80056de:	e00b      	b.n	80056f8 <HAL_RCC_OscConfig+0x5e0>
 80056e0:	4b68      	ldr	r3, [pc, #416]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a67      	ldr	r2, [pc, #412]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	4b65      	ldr	r3, [pc, #404]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	4a64      	ldr	r2, [pc, #400]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80056f2:	f023 0304 	bic.w	r3, r3, #4
 80056f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fc ff58 	bl	80025b4 <HAL_GetTick>
 8005704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005706:	e00a      	b.n	800571e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fc ff54 	bl	80025b4 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	; 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e14e      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800571e:	4b59      	ldr	r3, [pc, #356]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0ee      	beq.n	8005708 <HAL_RCC_OscConfig+0x5f0>
 800572a:	e014      	b.n	8005756 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fc ff42 	bl	80025b4 <HAL_GetTick>
 8005730:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005732:	e00a      	b.n	800574a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fc ff3e 	bl	80025b4 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e138      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800574a:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1ee      	bne.n	8005734 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 812d 	beq.w	80059ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005760:	4b48      	ldr	r3, [pc, #288]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005768:	2b18      	cmp	r3, #24
 800576a:	f000 80bd 	beq.w	80058e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b02      	cmp	r3, #2
 8005774:	f040 809e 	bne.w	80058b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005778:	4b42      	ldr	r3, [pc, #264]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a41      	ldr	r2, [pc, #260]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800577e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fc ff16 	bl	80025b4 <HAL_GetTick>
 8005788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800578c:	f7fc ff12 	bl	80025b4 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e10e      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800579e:	4b39      	ldr	r3, [pc, #228]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057aa:	4b36      	ldr	r3, [pc, #216]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80057ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ae:	4b37      	ldr	r3, [pc, #220]	; (800588c <HAL_RCC_OscConfig+0x774>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057ba:	0112      	lsls	r2, r2, #4
 80057bc:	430a      	orrs	r2, r1
 80057be:	4931      	ldr	r1, [pc, #196]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	628b      	str	r3, [r1, #40]	; 0x28
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	3b01      	subs	r3, #1
 80057ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	3b01      	subs	r3, #1
 80057d4:	025b      	lsls	r3, r3, #9
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	3b01      	subs	r3, #1
 80057e0:	041b      	lsls	r3, r3, #16
 80057e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ec:	3b01      	subs	r3, #1
 80057ee:	061b      	lsls	r3, r3, #24
 80057f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057f4:	4923      	ldr	r1, [pc, #140]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057fa:	4b22      	ldr	r3, [pc, #136]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	4a21      	ldr	r2, [pc, #132]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005806:	4b1f      	ldr	r3, [pc, #124]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580a:	4b21      	ldr	r3, [pc, #132]	; (8005890 <HAL_RCC_OscConfig+0x778>)
 800580c:	4013      	ands	r3, r2
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005812:	00d2      	lsls	r2, r2, #3
 8005814:	491b      	ldr	r1, [pc, #108]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800581a:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	f023 020c 	bic.w	r2, r3, #12
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	4917      	ldr	r1, [pc, #92]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005828:	4313      	orrs	r3, r2
 800582a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800582c:	4b15      	ldr	r3, [pc, #84]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	f023 0202 	bic.w	r2, r3, #2
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	4912      	ldr	r1, [pc, #72]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800583a:	4313      	orrs	r3, r2
 800583c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800584a:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	4a0d      	ldr	r2, [pc, #52]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 800585c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005860:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005862:	4b08      	ldr	r3, [pc, #32]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	4a07      	ldr	r2, [pc, #28]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a04      	ldr	r2, [pc, #16]	; (8005884 <HAL_RCC_OscConfig+0x76c>)
 8005874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587a:	f7fc fe9b 	bl	80025b4 <HAL_GetTick>
 800587e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005880:	e011      	b.n	80058a6 <HAL_RCC_OscConfig+0x78e>
 8005882:	bf00      	nop
 8005884:	58024400 	.word	0x58024400
 8005888:	58024800 	.word	0x58024800
 800588c:	fffffc0c 	.word	0xfffffc0c
 8005890:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fc fe8e 	bl	80025b4 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e08a      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058a6:	4b47      	ldr	r3, [pc, #284]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x77c>
 80058b2:	e082      	b.n	80059ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b4:	4b43      	ldr	r3, [pc, #268]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a42      	ldr	r2, [pc, #264]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80058ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fc fe78 	bl	80025b4 <HAL_GetTick>
 80058c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c8:	f7fc fe74 	bl	80025b4 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e070      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058da:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x7b0>
 80058e6:	e068      	b.n	80059ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058e8:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058ee:	4b35      	ldr	r3, [pc, #212]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d031      	beq.n	8005960 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f003 0203 	and.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005906:	429a      	cmp	r2, r3
 8005908:	d12a      	bne.n	8005960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d122      	bne.n	8005960 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d11a      	bne.n	8005960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	0a5b      	lsrs	r3, r3, #9
 800592e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005938:	429a      	cmp	r2, r3
 800593a:	d111      	bne.n	8005960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	0c1b      	lsrs	r3, r3, #16
 8005940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d108      	bne.n	8005960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	0e1b      	lsrs	r3, r3, #24
 8005952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e02b      	b.n	80059bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005964:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800596e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	429a      	cmp	r2, r3
 8005978:	d01f      	beq.n	80059ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005986:	f7fc fe15 	bl	80025b4 <HAL_GetTick>
 800598a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800598c:	bf00      	nop
 800598e:	f7fc fe11 	bl	80025b4 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	4293      	cmp	r3, r2
 8005998:	d0f9      	beq.n	800598e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 800599c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <HAL_RCC_OscConfig+0x8b0>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059a6:	00d2      	lsls	r2, r2, #3
 80059a8:	4906      	ldr	r1, [pc, #24]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <HAL_RCC_OscConfig+0x8ac>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3730      	adds	r7, #48	; 0x30
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58024400 	.word	0x58024400
 80059c8:	ffff0007 	.word	0xffff0007

080059cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e19c      	b.n	8005d1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059e0:	4b8a      	ldr	r3, [pc, #552]	; (8005c0c <HAL_RCC_ClockConfig+0x240>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d910      	bls.n	8005a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ee:	4b87      	ldr	r3, [pc, #540]	; (8005c0c <HAL_RCC_ClockConfig+0x240>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 020f 	bic.w	r2, r3, #15
 80059f6:	4985      	ldr	r1, [pc, #532]	; (8005c0c <HAL_RCC_ClockConfig+0x240>)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fe:	4b83      	ldr	r3, [pc, #524]	; (8005c0c <HAL_RCC_ClockConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e184      	b.n	8005d1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d010      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	4b7b      	ldr	r3, [pc, #492]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d908      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a2c:	4b78      	ldr	r3, [pc, #480]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	4975      	ldr	r1, [pc, #468]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	4b70      	ldr	r3, [pc, #448]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d908      	bls.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a5a:	4b6d      	ldr	r3, [pc, #436]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	496a      	ldr	r1, [pc, #424]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	4b64      	ldr	r3, [pc, #400]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d908      	bls.n	8005a9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a88:	4b61      	ldr	r3, [pc, #388]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	495e      	ldr	r1, [pc, #376]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d010      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69da      	ldr	r2, [r3, #28]
 8005aaa:	4b59      	ldr	r3, [pc, #356]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d908      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ab6:	4b56      	ldr	r3, [pc, #344]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	4953      	ldr	r1, [pc, #332]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d010      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	4b4d      	ldr	r3, [pc, #308]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d908      	bls.n	8005af6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae4:	4b4a      	ldr	r3, [pc, #296]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f023 020f 	bic.w	r2, r3, #15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4947      	ldr	r1, [pc, #284]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d055      	beq.n	8005bae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b02:	4b43      	ldr	r3, [pc, #268]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	4940      	ldr	r1, [pc, #256]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b1c:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d121      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0f6      	b.n	8005d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d107      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b34:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d115      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0ea      	b.n	8005d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b4c:	4b30      	ldr	r3, [pc, #192]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0de      	b.n	8005d1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b5c:	4b2c      	ldr	r3, [pc, #176]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0d6      	b.n	8005d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b6c:	4b28      	ldr	r3, [pc, #160]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f023 0207 	bic.w	r2, r3, #7
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4925      	ldr	r1, [pc, #148]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7e:	f7fc fd19 	bl	80025b4 <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b86:	f7fc fd15 	bl	80025b4 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0be      	b.n	8005d1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9c:	4b1c      	ldr	r3, [pc, #112]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d1eb      	bne.n	8005b86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d010      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	4b14      	ldr	r3, [pc, #80]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d208      	bcs.n	8005bdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bca:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f023 020f 	bic.w	r2, r3, #15
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	490e      	ldr	r1, [pc, #56]	; (8005c10 <HAL_RCC_ClockConfig+0x244>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <HAL_RCC_ClockConfig+0x240>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d214      	bcs.n	8005c14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <HAL_RCC_ClockConfig+0x240>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 020f 	bic.w	r2, r3, #15
 8005bf2:	4906      	ldr	r1, [pc, #24]	; (8005c0c <HAL_RCC_ClockConfig+0x240>)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <HAL_RCC_ClockConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e086      	b.n	8005d1a <HAL_RCC_ClockConfig+0x34e>
 8005c0c:	52002000 	.word	0x52002000
 8005c10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d010      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	4b3f      	ldr	r3, [pc, #252]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d208      	bcs.n	8005c42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c30:	4b3c      	ldr	r3, [pc, #240]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	4939      	ldr	r1, [pc, #228]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d010      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	4b34      	ldr	r3, [pc, #208]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d208      	bcs.n	8005c70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c5e:	4b31      	ldr	r3, [pc, #196]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	492e      	ldr	r1, [pc, #184]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d010      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	4b28      	ldr	r3, [pc, #160]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d208      	bcs.n	8005c9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c8c:	4b25      	ldr	r3, [pc, #148]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	4922      	ldr	r1, [pc, #136]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d010      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69da      	ldr	r2, [r3, #28]
 8005cae:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d208      	bcs.n	8005ccc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005cba:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	4917      	ldr	r1, [pc, #92]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ccc:	f000 f844 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	4912      	ldr	r1, [pc, #72]	; (8005d28 <HAL_RCC_ClockConfig+0x35c>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cea:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <HAL_RCC_ClockConfig+0x358>)
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	4a0d      	ldr	r2, [pc, #52]	; (8005d28 <HAL_RCC_ClockConfig+0x35c>)
 8005cf4:	5cd3      	ldrb	r3, [r2, r3]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <HAL_RCC_ClockConfig+0x360>)
 8005d02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d04:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <HAL_RCC_ClockConfig+0x364>)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <HAL_RCC_ClockConfig+0x368>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fc fc06 	bl	8002520 <HAL_InitTick>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
 8005d28:	0800a9b0 	.word	0x0800a9b0
 8005d2c:	20000018 	.word	0x20000018
 8005d30:	20000014 	.word	0x20000014
 8005d34:	2000001c 	.word	0x2000001c

08005d38 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <HAL_RCC_EnableCSS+0x1c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <HAL_RCC_EnableCSS+0x1c>)
 8005d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d46:	6013      	str	r3, [r2, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	58024400 	.word	0x58024400

08005d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b089      	sub	sp, #36	; 0x24
 8005d5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d5e:	4bb3      	ldr	r3, [pc, #716]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	f200 8155 	bhi.w	8006016 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d6c:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08006017 	.word	0x08006017
 8005d7c:	08006017 	.word	0x08006017
 8005d80:	08006017 	.word	0x08006017
 8005d84:	08006017 	.word	0x08006017
 8005d88:	08006017 	.word	0x08006017
 8005d8c:	08006017 	.word	0x08006017
 8005d90:	08006017 	.word	0x08006017
 8005d94:	08005dff 	.word	0x08005dff
 8005d98:	08006017 	.word	0x08006017
 8005d9c:	08006017 	.word	0x08006017
 8005da0:	08006017 	.word	0x08006017
 8005da4:	08006017 	.word	0x08006017
 8005da8:	08006017 	.word	0x08006017
 8005dac:	08006017 	.word	0x08006017
 8005db0:	08006017 	.word	0x08006017
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08006017 	.word	0x08006017
 8005dbc:	08006017 	.word	0x08006017
 8005dc0:	08006017 	.word	0x08006017
 8005dc4:	08006017 	.word	0x08006017
 8005dc8:	08006017 	.word	0x08006017
 8005dcc:	08006017 	.word	0x08006017
 8005dd0:	08006017 	.word	0x08006017
 8005dd4:	08005e0b 	.word	0x08005e0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd8:	4b94      	ldr	r3, [pc, #592]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de4:	4b91      	ldr	r3, [pc, #580]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	4a90      	ldr	r2, [pc, #576]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005df6:	e111      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005df8:	4b8d      	ldr	r3, [pc, #564]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dfa:	61bb      	str	r3, [r7, #24]
      break;
 8005dfc:	e10e      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005dfe:	4b8d      	ldr	r3, [pc, #564]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e00:	61bb      	str	r3, [r7, #24]
      break;
 8005e02:	e10b      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e04:	4b8c      	ldr	r3, [pc, #560]	; (8006038 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e06:	61bb      	str	r3, [r7, #24]
      break;
 8005e08:	e108      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e0a:	4b88      	ldr	r3, [pc, #544]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e14:	4b85      	ldr	r3, [pc, #532]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e20:	4b82      	ldr	r3, [pc, #520]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e2a:	4b80      	ldr	r3, [pc, #512]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80e1 	beq.w	8006010 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	f000 8083 	beq.w	8005f5c <HAL_RCC_GetSysClockFreq+0x204>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f200 80a1 	bhi.w	8005fa0 <HAL_RCC_GetSysClockFreq+0x248>
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x114>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d056      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e6a:	e099      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6c:	4b6f      	ldr	r3, [pc, #444]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d02d      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e78:	4b6c      	ldr	r3, [pc, #432]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	4a6b      	ldr	r2, [pc, #428]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
 8005e88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea2:	4b62      	ldr	r3, [pc, #392]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005ed2:	e087      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006040 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b51      	ldr	r3, [pc, #324]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f16:	e065      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b40      	ldr	r3, [pc, #256]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f5a:	e043      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006048 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b2f      	ldr	r3, [pc, #188]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f9e:	e021      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b1e      	ldr	r3, [pc, #120]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fe2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005fe4:	4b11      	ldr	r3, [pc, #68]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	0a5b      	lsrs	r3, r3, #9
 8005fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fee:	3301      	adds	r3, #1
 8005ff0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006008:	ee17 3a90 	vmov	r3, s15
 800600c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800600e:	e005      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]
      break;
 8006014:	e002      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006018:	61bb      	str	r3, [r7, #24]
      break;
 800601a:	bf00      	nop
  }

  return sysclockfreq;
 800601c:	69bb      	ldr	r3, [r7, #24]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3724      	adds	r7, #36	; 0x24
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
 8006030:	03d09000 	.word	0x03d09000
 8006034:	003d0900 	.word	0x003d0900
 8006038:	007f2815 	.word	0x007f2815
 800603c:	46000000 	.word	0x46000000
 8006040:	4c742400 	.word	0x4c742400
 8006044:	4a742400 	.word	0x4a742400
 8006048:	4afe502a 	.word	0x4afe502a

0800604c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006052:	f7ff fe81 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8006056:	4602      	mov	r2, r0
 8006058:	4b10      	ldr	r3, [pc, #64]	; (800609c <HAL_RCC_GetHCLKFreq+0x50>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	490f      	ldr	r1, [pc, #60]	; (80060a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006064:	5ccb      	ldrb	r3, [r1, r3]
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_RCC_GetHCLKFreq+0x50>)
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800607a:	5cd3      	ldrb	r3, [r2, r3]
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	fa22 f303 	lsr.w	r3, r2, r3
 8006086:	4a07      	ldr	r2, [pc, #28]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006088:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800608a:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006090:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006092:	681b      	ldr	r3, [r3, #0]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	58024400 	.word	0x58024400
 80060a0:	0800a9b0 	.word	0x0800a9b0
 80060a4:	20000018 	.word	0x20000018
 80060a8:	20000014 	.word	0x20000014

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060b0:	f7ff ffcc 	bl	800604c <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4904      	ldr	r1, [pc, #16]	; (80060d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	58024400 	.word	0x58024400
 80060d4:	0800a9b0 	.word	0x0800a9b0

080060d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060dc:	f7ff ffb6 	bl	800604c <HAL_RCC_GetHCLKFreq>
 80060e0:	4602      	mov	r2, r0
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	4904      	ldr	r1, [pc, #16]	; (8006100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060ee:	5ccb      	ldrb	r3, [r1, r3]
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	58024400 	.word	0x58024400
 8006100:	0800a9b0 	.word	0x0800a9b0

08006104 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006108:	4b07      	ldr	r3, [pc, #28]	; (8006128 <HAL_RCC_NMI_IRQHandler+0x24>)
 800610a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800610c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006114:	d105      	bne.n	8006122 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006116:	f000 f809 	bl	800612c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800611a:	4b03      	ldr	r3, [pc, #12]	; (8006128 <HAL_RCC_NMI_IRQHandler+0x24>)
 800611c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006120:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8006122:	bf00      	nop
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	58024400 	.word	0x58024400

0800612c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800613c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006140:	b0ca      	sub	sp, #296	; 0x128
 8006142:	af00      	add	r7, sp, #0
 8006144:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006148:	2300      	movs	r3, #0
 800614a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800614e:	2300      	movs	r3, #0
 8006150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006160:	2500      	movs	r5, #0
 8006162:	ea54 0305 	orrs.w	r3, r4, r5
 8006166:	d049      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006172:	d02f      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006174:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006178:	d828      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800617a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800617e:	d01a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006180:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006184:	d822      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800618a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800618e:	d007      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006190:	e01c      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006192:	4bb8      	ldr	r3, [pc, #736]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	4ab7      	ldr	r2, [pc, #732]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800619c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800619e:	e01a      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a4:	3308      	adds	r3, #8
 80061a6:	2102      	movs	r1, #2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 fce5 	bl	8007b78 <RCCEx_PLL2_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061b4:	e00f      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ba:	3328      	adds	r3, #40	; 0x28
 80061bc:	2102      	movs	r1, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 fd8c 	bl	8007cdc <RCCEx_PLL3_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061ca:	e004      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80061d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061de:	4ba5      	ldr	r3, [pc, #660]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ec:	4aa1      	ldr	r2, [pc, #644]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061ee:	430b      	orrs	r3, r1
 80061f0:	6513      	str	r3, [r2, #80]	; 0x50
 80061f2:	e003      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006208:	f04f 0900 	mov.w	r9, #0
 800620c:	ea58 0309 	orrs.w	r3, r8, r9
 8006210:	d047      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	2b04      	cmp	r3, #4
 800621a:	d82a      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006239 	.word	0x08006239
 8006228:	08006247 	.word	0x08006247
 800622c:	0800625d 	.word	0x0800625d
 8006230:	0800627b 	.word	0x0800627b
 8006234:	0800627b 	.word	0x0800627b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006238:	4b8e      	ldr	r3, [pc, #568]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a8d      	ldr	r2, [pc, #564]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800623e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006244:	e01a      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624a:	3308      	adds	r3, #8
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fc92 	bl	8007b78 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800625a:	e00f      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006260:	3328      	adds	r3, #40	; 0x28
 8006262:	2100      	movs	r1, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f001 fd39 	bl	8007cdc <RCCEx_PLL3_Config>
 800626a:	4603      	mov	r3, r0
 800626c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006270:	e004      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006278:	e000      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800627a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006284:	4b7b      	ldr	r3, [pc, #492]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	f023 0107 	bic.w	r1, r3, #7
 800628c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006292:	4a78      	ldr	r2, [pc, #480]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006294:	430b      	orrs	r3, r1
 8006296:	6513      	str	r3, [r2, #80]	; 0x50
 8006298:	e003      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80062ae:	f04f 0b00 	mov.w	fp, #0
 80062b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80062b6:	d04c      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d030      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80062c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c8:	d829      	bhi.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062ca:	2bc0      	cmp	r3, #192	; 0xc0
 80062cc:	d02d      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80062ce:	2bc0      	cmp	r3, #192	; 0xc0
 80062d0:	d825      	bhi.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062d2:	2b80      	cmp	r3, #128	; 0x80
 80062d4:	d018      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80062d6:	2b80      	cmp	r3, #128	; 0x80
 80062d8:	d821      	bhi.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d007      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80062e2:	e01c      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e4:	4b63      	ldr	r3, [pc, #396]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	4a62      	ldr	r2, [pc, #392]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80062f0:	e01c      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f6:	3308      	adds	r3, #8
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fc3c 	bl	8007b78 <RCCEx_PLL2_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006306:	e011      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630c:	3328      	adds	r3, #40	; 0x28
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fce3 	bl	8007cdc <RCCEx_PLL3_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800631c:	e006      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006324:	e002      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006326:	bf00      	nop
 8006328:	e000      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800632a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006334:	4b4f      	ldr	r3, [pc, #316]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006342:	4a4c      	ldr	r2, [pc, #304]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006344:	430b      	orrs	r3, r1
 8006346:	6513      	str	r3, [r2, #80]	; 0x50
 8006348:	e003      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800635e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006362:	2300      	movs	r3, #0
 8006364:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006368:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800636c:	460b      	mov	r3, r1
 800636e:	4313      	orrs	r3, r2
 8006370:	d053      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006376:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800637a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800637e:	d035      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006380:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006384:	d82e      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006386:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800638a:	d031      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800638c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006390:	d828      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006396:	d01a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800639c:	d822      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80063a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a6:	d007      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80063a8:	e01c      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063aa:	4b32      	ldr	r3, [pc, #200]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a31      	ldr	r2, [pc, #196]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063b6:	e01c      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063bc:	3308      	adds	r3, #8
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 fbd9 	bl	8007b78 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063cc:	e011      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d2:	3328      	adds	r3, #40	; 0x28
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fc80 	bl	8007cdc <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063e2:	e006      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063ea:	e002      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80063f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10b      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063fa:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006406:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800640c:	430b      	orrs	r3, r1
 800640e:	6593      	str	r3, [r2, #88]	; 0x58
 8006410:	e003      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006426:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800642a:	2300      	movs	r3, #0
 800642c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006430:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006434:	460b      	mov	r3, r1
 8006436:	4313      	orrs	r3, r2
 8006438:	d056      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006446:	d038      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800644c:	d831      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800644e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006452:	d034      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006454:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006458:	d82b      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800645a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800645e:	d01d      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006464:	d825      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d006      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800646a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800646e:	d00a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006470:	e01f      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006472:	bf00      	nop
 8006474:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006478:	4ba2      	ldr	r3, [pc, #648]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	4aa1      	ldr	r2, [pc, #644]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800647e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006484:	e01c      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648a:	3308      	adds	r3, #8
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fb72 	bl	8007b78 <RCCEx_PLL2_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800649a:	e011      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a0:	3328      	adds	r3, #40	; 0x28
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fc19 	bl	8007cdc <RCCEx_PLL3_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064b0:	e006      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064b8:	e002      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80064be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064c8:	4b8e      	ldr	r3, [pc, #568]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064d8:	4a8a      	ldr	r2, [pc, #552]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064da:	430b      	orrs	r3, r1
 80064dc:	6593      	str	r3, [r2, #88]	; 0x58
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80064f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006502:	460b      	mov	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	d03a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	2b30      	cmp	r3, #48	; 0x30
 8006510:	d01f      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006512:	2b30      	cmp	r3, #48	; 0x30
 8006514:	d819      	bhi.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006516:	2b20      	cmp	r3, #32
 8006518:	d00c      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d815      	bhi.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d019      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006522:	2b10      	cmp	r3, #16
 8006524:	d111      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006526:	4b77      	ldr	r3, [pc, #476]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	4a76      	ldr	r2, [pc, #472]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800652c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006530:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006532:	e011      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006538:	3308      	adds	r3, #8
 800653a:	2102      	movs	r1, #2
 800653c:	4618      	mov	r0, r3
 800653e:	f001 fb1b 	bl	8007b78 <RCCEx_PLL2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006548:	e006      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006550:	e002      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006552:	bf00      	nop
 8006554:	e000      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006560:	4b68      	ldr	r3, [pc, #416]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006564:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	4a65      	ldr	r2, [pc, #404]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006570:	430b      	orrs	r3, r1
 8006572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006574:	e003      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800657a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800658a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800658e:	2300      	movs	r3, #0
 8006590:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006594:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d051      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a8:	d035      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80065aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ae:	d82e      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065b4:	d031      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80065b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065ba:	d828      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c0:	d01a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80065c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c6:	d822      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80065cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d0:	d007      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80065d2:	e01c      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d4:	4b4b      	ldr	r3, [pc, #300]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a4a      	ldr	r2, [pc, #296]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065e0:	e01c      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e6:	3308      	adds	r3, #8
 80065e8:	2100      	movs	r1, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 fac4 	bl	8007b78 <RCCEx_PLL2_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065f6:	e011      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fc:	3328      	adds	r3, #40	; 0x28
 80065fe:	2100      	movs	r1, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f001 fb6b 	bl	8007cdc <RCCEx_PLL3_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800660c:	e006      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006614:	e002      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800661a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006624:	4b37      	ldr	r3, [pc, #220]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006628:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006632:	4a34      	ldr	r2, [pc, #208]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006634:	430b      	orrs	r3, r1
 8006636:	6513      	str	r3, [r2, #80]	; 0x50
 8006638:	e003      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800663e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800664e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006652:	2300      	movs	r3, #0
 8006654:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006658:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800665c:	460b      	mov	r3, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	d056      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800666c:	d033      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800666e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006672:	d82c      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006674:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006678:	d02f      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800667a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800667e:	d826      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006680:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006684:	d02b      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006686:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800668a:	d820      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800668c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006690:	d012      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006696:	d81a      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d022      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a0:	d115      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a6:	3308      	adds	r3, #8
 80066a8:	2101      	movs	r1, #1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fa64 	bl	8007b78 <RCCEx_PLL2_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066b6:	e015      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066bc:	3328      	adds	r3, #40	; 0x28
 80066be:	2101      	movs	r1, #1
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fb0b 	bl	8007cdc <RCCEx_PLL3_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066cc:	e00a      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066d4:	e006      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066d6:	bf00      	nop
 80066d8:	e004      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066da:	bf00      	nop
 80066dc:	e002      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066de:	bf00      	nop
 80066e0:	e000      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10d      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066ec:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066fa:	4a02      	ldr	r2, [pc, #8]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6513      	str	r3, [r2, #80]	; 0x50
 8006700:	e006      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006702:	bf00      	nop
 8006704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006708:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800670c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800671c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006720:	2300      	movs	r3, #0
 8006722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006726:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800672a:	460b      	mov	r3, r1
 800672c:	4313      	orrs	r3, r2
 800672e:	d055      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006734:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800673c:	d033      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800673e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006742:	d82c      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d02f      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800674a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674e:	d826      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006750:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006754:	d02b      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006756:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800675a:	d820      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800675c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006760:	d012      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006766:	d81a      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d022      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800676c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006770:	d115      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006776:	3308      	adds	r3, #8
 8006778:	2101      	movs	r1, #1
 800677a:	4618      	mov	r0, r3
 800677c:	f001 f9fc 	bl	8007b78 <RCCEx_PLL2_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006786:	e015      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678c:	3328      	adds	r3, #40	; 0x28
 800678e:	2101      	movs	r1, #1
 8006790:	4618      	mov	r0, r3
 8006792:	f001 faa3 	bl	8007cdc <RCCEx_PLL3_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800679c:	e00a      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067a4:	e006      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067a6:	bf00      	nop
 80067a8:	e004      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10b      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067bc:	4ba3      	ldr	r3, [pc, #652]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067cc:	4a9f      	ldr	r2, [pc, #636]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ce:	430b      	orrs	r3, r1
 80067d0:	6593      	str	r3, [r2, #88]	; 0x58
 80067d2:	e003      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80067e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ec:	2300      	movs	r3, #0
 80067ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d037      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80067fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006806:	d00e      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800680c:	d816      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d018      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006816:	d111      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006818:	4b8c      	ldr	r3, [pc, #560]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	4a8b      	ldr	r2, [pc, #556]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800681e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006824:	e00f      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682a:	3308      	adds	r3, #8
 800682c:	2101      	movs	r1, #1
 800682e:	4618      	mov	r0, r3
 8006830:	f001 f9a2 	bl	8007b78 <RCCEx_PLL2_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800683a:	e004      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006842:	e000      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800684e:	4b7f      	ldr	r3, [pc, #508]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006852:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800685a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685c:	4a7b      	ldr	r2, [pc, #492]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800685e:	430b      	orrs	r3, r1
 8006860:	6513      	str	r3, [r2, #80]	; 0x50
 8006862:	e003      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006868:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800687c:	2300      	movs	r3, #0
 800687e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006882:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d039      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	2b03      	cmp	r3, #3
 8006894:	d81c      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006896:	a201      	add	r2, pc, #4	; (adr r2, 800689c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068d9 	.word	0x080068d9
 80068a0:	080068ad 	.word	0x080068ad
 80068a4:	080068bb 	.word	0x080068bb
 80068a8:	080068d9 	.word	0x080068d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ac:	4b67      	ldr	r3, [pc, #412]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a66      	ldr	r2, [pc, #408]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068b8:	e00f      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068be:	3308      	adds	r3, #8
 80068c0:	2102      	movs	r1, #2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 f958 	bl	8007b78 <RCCEx_PLL2_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068ce:	e004      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068d6:	e000      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80068d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068e2:	4b5a      	ldr	r3, [pc, #360]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e6:	f023 0103 	bic.w	r1, r3, #3
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f0:	4a56      	ldr	r2, [pc, #344]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f2:	430b      	orrs	r3, r1
 80068f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068f6:	e003      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800690c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006910:	2300      	movs	r3, #0
 8006912:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006916:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800691a:	460b      	mov	r3, r1
 800691c:	4313      	orrs	r3, r2
 800691e:	f000 809f 	beq.w	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006922:	4b4b      	ldr	r3, [pc, #300]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a4a      	ldr	r2, [pc, #296]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800692e:	f7fb fe41 	bl	80025b4 <HAL_GetTick>
 8006932:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006936:	e00b      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006938:	f7fb fe3c 	bl	80025b4 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b64      	cmp	r3, #100	; 0x64
 8006946:	d903      	bls.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800694e:	e005      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006950:	4b3f      	ldr	r3, [pc, #252]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0ed      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800695c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006960:	2b00      	cmp	r3, #0
 8006962:	d179      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006964:	4b39      	ldr	r3, [pc, #228]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006966:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006970:	4053      	eors	r3, r2
 8006972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006976:	2b00      	cmp	r3, #0
 8006978:	d015      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800697a:	4b34      	ldr	r3, [pc, #208]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006982:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006986:	4b31      	ldr	r3, [pc, #196]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	4a30      	ldr	r2, [pc, #192]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800698c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006990:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006992:	4b2e      	ldr	r3, [pc, #184]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	4a2d      	ldr	r2, [pc, #180]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800699c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800699e:	4a2b      	ldr	r2, [pc, #172]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b2:	d118      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b4:	f7fb fdfe 	bl	80025b4 <HAL_GetTick>
 80069b8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069bc:	e00d      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069be:	f7fb fdf9 	bl	80025b4 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80069c8:	1ad2      	subs	r2, r2, r3
 80069ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d903      	bls.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80069d8:	e005      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069da:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0eb      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80069e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d129      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069fe:	d10e      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a00:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a10:	091a      	lsrs	r2, r3, #4
 8006a12:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	4a0d      	ldr	r2, [pc, #52]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6113      	str	r3, [r2, #16]
 8006a1c:	e005      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a28:	6113      	str	r3, [r2, #16]
 8006a2a:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3a:	4a04      	ldr	r2, [pc, #16]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a40:	e00e      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006a4a:	e009      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006a4c:	58024400 	.word	0x58024400
 8006a50:	58024800 	.word	0x58024800
 8006a54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f002 0301 	and.w	r3, r2, #1
 8006a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a70:	2300      	movs	r3, #0
 8006a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f000 8089 	beq.w	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a88:	2b28      	cmp	r3, #40	; 0x28
 8006a8a:	d86b      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006b6d 	.word	0x08006b6d
 8006a98:	08006b65 	.word	0x08006b65
 8006a9c:	08006b65 	.word	0x08006b65
 8006aa0:	08006b65 	.word	0x08006b65
 8006aa4:	08006b65 	.word	0x08006b65
 8006aa8:	08006b65 	.word	0x08006b65
 8006aac:	08006b65 	.word	0x08006b65
 8006ab0:	08006b65 	.word	0x08006b65
 8006ab4:	08006b39 	.word	0x08006b39
 8006ab8:	08006b65 	.word	0x08006b65
 8006abc:	08006b65 	.word	0x08006b65
 8006ac0:	08006b65 	.word	0x08006b65
 8006ac4:	08006b65 	.word	0x08006b65
 8006ac8:	08006b65 	.word	0x08006b65
 8006acc:	08006b65 	.word	0x08006b65
 8006ad0:	08006b65 	.word	0x08006b65
 8006ad4:	08006b4f 	.word	0x08006b4f
 8006ad8:	08006b65 	.word	0x08006b65
 8006adc:	08006b65 	.word	0x08006b65
 8006ae0:	08006b65 	.word	0x08006b65
 8006ae4:	08006b65 	.word	0x08006b65
 8006ae8:	08006b65 	.word	0x08006b65
 8006aec:	08006b65 	.word	0x08006b65
 8006af0:	08006b65 	.word	0x08006b65
 8006af4:	08006b6d 	.word	0x08006b6d
 8006af8:	08006b65 	.word	0x08006b65
 8006afc:	08006b65 	.word	0x08006b65
 8006b00:	08006b65 	.word	0x08006b65
 8006b04:	08006b65 	.word	0x08006b65
 8006b08:	08006b65 	.word	0x08006b65
 8006b0c:	08006b65 	.word	0x08006b65
 8006b10:	08006b65 	.word	0x08006b65
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b65 	.word	0x08006b65
 8006b1c:	08006b65 	.word	0x08006b65
 8006b20:	08006b65 	.word	0x08006b65
 8006b24:	08006b65 	.word	0x08006b65
 8006b28:	08006b65 	.word	0x08006b65
 8006b2c:	08006b65 	.word	0x08006b65
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006b6d 	.word	0x08006b6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	2101      	movs	r1, #1
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 f819 	bl	8007b78 <RCCEx_PLL2_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b4c:	e00f      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b52:	3328      	adds	r3, #40	; 0x28
 8006b54:	2101      	movs	r1, #1
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 f8c0 	bl	8007cdc <RCCEx_PLL3_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b62:	e004      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b6a:	e000      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b76:	4bbf      	ldr	r3, [pc, #764]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b84:	4abb      	ldr	r2, [pc, #748]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b86:	430b      	orrs	r3, r1
 8006b88:	6553      	str	r3, [r2, #84]	; 0x54
 8006b8a:	e003      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f002 0302 	and.w	r3, r2, #2
 8006ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006baa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	d041      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d824      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006c11 	.word	0x08006c11
 8006bc8:	08006bdd 	.word	0x08006bdd
 8006bcc:	08006bf3 	.word	0x08006bf3
 8006bd0:	08006c11 	.word	0x08006c11
 8006bd4:	08006c11 	.word	0x08006c11
 8006bd8:	08006c11 	.word	0x08006c11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be0:	3308      	adds	r3, #8
 8006be2:	2101      	movs	r1, #1
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 ffc7 	bl	8007b78 <RCCEx_PLL2_Config>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bf0:	e00f      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf6:	3328      	adds	r3, #40	; 0x28
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f86e 	bl	8007cdc <RCCEx_PLL3_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c06:	e004      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c0e:	e000      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c1a:	4b96      	ldr	r3, [pc, #600]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1e:	f023 0107 	bic.w	r1, r3, #7
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c28:	4a92      	ldr	r2, [pc, #584]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	6553      	str	r3, [r2, #84]	; 0x54
 8006c2e:	e003      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f002 0304 	and.w	r3, r2, #4
 8006c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c4e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4313      	orrs	r3, r2
 8006c56:	d044      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c60:	2b05      	cmp	r3, #5
 8006c62:	d825      	bhi.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006c64:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006cb9 	.word	0x08006cb9
 8006c70:	08006c85 	.word	0x08006c85
 8006c74:	08006c9b 	.word	0x08006c9b
 8006c78:	08006cb9 	.word	0x08006cb9
 8006c7c:	08006cb9 	.word	0x08006cb9
 8006c80:	08006cb9 	.word	0x08006cb9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c88:	3308      	adds	r3, #8
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 ff73 	bl	8007b78 <RCCEx_PLL2_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c98:	e00f      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9e:	3328      	adds	r3, #40	; 0x28
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f001 f81a 	bl	8007cdc <RCCEx_PLL3_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cae:	e004      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cb6:	e000      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10b      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cc2:	4b6c      	ldr	r3, [pc, #432]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc6:	f023 0107 	bic.w	r1, r3, #7
 8006cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd2:	4a68      	ldr	r2, [pc, #416]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8006cd8:	e003      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f002 0320 	and.w	r3, r2, #32
 8006cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	d055      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d0e:	d033      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d14:	d82c      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d02f      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d20:	d826      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d26:	d02b      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006d28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d2c:	d820      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d32:	d012      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d38:	d81a      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d022      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d42:	d115      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d48:	3308      	adds	r3, #8
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 ff13 	bl	8007b78 <RCCEx_PLL2_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d58:	e015      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d5e:	3328      	adds	r3, #40	; 0x28
 8006d60:	2102      	movs	r1, #2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 ffba 	bl	8007cdc <RCCEx_PLL3_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d6e:	e00a      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d76:	e006      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d78:	bf00      	nop
 8006d7a:	e004      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d7c:	bf00      	nop
 8006d7e:	e002      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d80:	bf00      	nop
 8006d82:	e000      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10b      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d8e:	4b39      	ldr	r3, [pc, #228]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	4a35      	ldr	r2, [pc, #212]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006da0:	430b      	orrs	r3, r1
 8006da2:	6553      	str	r3, [r2, #84]	; 0x54
 8006da4:	e003      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006daa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006dc4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	d058      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dda:	d033      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006ddc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006de0:	d82c      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de6:	d02f      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dec:	d826      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006df2:	d02b      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006df8:	d820      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dfe:	d012      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e04:	d81a      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d022      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0e:	d115      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e14:	3308      	adds	r3, #8
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fead 	bl	8007b78 <RCCEx_PLL2_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e24:	e015      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2a:	3328      	adds	r3, #40	; 0x28
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ff54 	bl	8007cdc <RCCEx_PLL3_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e42:	e006      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e44:	bf00      	nop
 8006e46:	e004      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e48:	bf00      	nop
 8006e4a:	e002      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10e      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e5a:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e6a:	4a02      	ldr	r2, [pc, #8]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e70:	e006      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e90:	2300      	movs	r3, #0
 8006e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e96:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	d055      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ea8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006eac:	d033      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006eae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006eb2:	d82c      	bhi.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	d02f      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ebe:	d826      	bhi.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ec0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ec4:	d02b      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006ec6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006eca:	d820      	bhi.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ed0:	d012      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ed6:	d81a      	bhi.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d022      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee0:	d115      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fe44 	bl	8007b78 <RCCEx_PLL2_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ef6:	e015      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efc:	3328      	adds	r3, #40	; 0x28
 8006efe:	2102      	movs	r1, #2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 feeb 	bl	8007cdc <RCCEx_PLL3_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f0c:	e00a      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f14:	e006      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f16:	bf00      	nop
 8006f18:	e004      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f1a:	bf00      	nop
 8006f1c:	e002      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f1e:	bf00      	nop
 8006f20:	e000      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f2c:	4ba1      	ldr	r3, [pc, #644]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f30:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f3c:	4a9d      	ldr	r2, [pc, #628]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	6593      	str	r3, [r2, #88]	; 0x58
 8006f42:	e003      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f002 0308 	and.w	r3, r2, #8
 8006f58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006f66:	460b      	mov	r3, r1
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	d01e      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f78:	d10c      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7e:	3328      	adds	r3, #40	; 0x28
 8006f80:	2102      	movs	r1, #2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 feaa 	bl	8007cdc <RCCEx_PLL3_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f94:	4b87      	ldr	r3, [pc, #540]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa4:	4a83      	ldr	r2, [pc, #524]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f002 0310 	and.w	r3, r2, #16
 8006fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006fc0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	d01e      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd6:	d10c      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fdc:	3328      	adds	r3, #40	; 0x28
 8006fde:	2102      	movs	r1, #2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fe7b 	bl	8007cdc <RCCEx_PLL3_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ff2:	4b70      	ldr	r3, [pc, #448]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007002:	4a6c      	ldr	r2, [pc, #432]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007004:	430b      	orrs	r3, r1
 8007006:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007018:	2300      	movs	r3, #0
 800701a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800701e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007022:	460b      	mov	r3, r1
 8007024:	4313      	orrs	r3, r2
 8007026:	d03e      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007034:	d022      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800703a:	d81b      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007044:	d00b      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007046:	e015      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704c:	3308      	adds	r3, #8
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fd91 	bl	8007b78 <RCCEx_PLL2_Config>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800705c:	e00f      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007062:	3328      	adds	r3, #40	; 0x28
 8007064:	2102      	movs	r1, #2
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fe38 	bl	8007cdc <RCCEx_PLL3_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007072:	e004      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800707a:	e000      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800707c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800707e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10b      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007086:	4b4b      	ldr	r3, [pc, #300]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007092:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007096:	4a47      	ldr	r2, [pc, #284]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007098:	430b      	orrs	r3, r1
 800709a:	6593      	str	r3, [r2, #88]	; 0x58
 800709c:	e003      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80070b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80070b4:	2300      	movs	r3, #0
 80070b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80070bc:	460b      	mov	r3, r1
 80070be:	4313      	orrs	r3, r2
 80070c0:	d03b      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070ce:	d01f      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80070d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070d4:	d818      	bhi.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80070d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070da:	d003      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80070dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070e0:	d007      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80070e2:	e011      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e4:	4b33      	ldr	r3, [pc, #204]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	4a32      	ldr	r2, [pc, #200]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070f0:	e00f      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f6:	3328      	adds	r3, #40	; 0x28
 80070f8:	2101      	movs	r1, #1
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fdee 	bl	8007cdc <RCCEx_PLL3_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007106:	e004      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10b      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800711a:	4b26      	ldr	r3, [pc, #152]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712a:	4a22      	ldr	r2, [pc, #136]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800712c:	430b      	orrs	r3, r1
 800712e:	6553      	str	r3, [r2, #84]	; 0x54
 8007130:	e003      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007146:	673b      	str	r3, [r7, #112]	; 0x70
 8007148:	2300      	movs	r3, #0
 800714a:	677b      	str	r3, [r7, #116]	; 0x74
 800714c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007150:	460b      	mov	r3, r1
 8007152:	4313      	orrs	r3, r2
 8007154:	d034      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007164:	d007      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007166:	e011      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007168:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	4a11      	ldr	r2, [pc, #68]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800716e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007174:	e00e      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717a:	3308      	adds	r3, #8
 800717c:	2102      	movs	r1, #2
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fcfa 	bl	8007b78 <RCCEx_PLL2_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800718a:	e003      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10d      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800719e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071aa:	4a02      	ldr	r2, [pc, #8]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ac:	430b      	orrs	r3, r1
 80071ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071b0:	e006      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80071b2:	bf00      	nop
 80071b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80071cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ce:	2300      	movs	r3, #0
 80071d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80071d6:	460b      	mov	r3, r1
 80071d8:	4313      	orrs	r3, r2
 80071da:	d00c      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e0:	3328      	adds	r3, #40	; 0x28
 80071e2:	2102      	movs	r1, #2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fd79 	bl	8007cdc <RCCEx_PLL3_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007202:	663b      	str	r3, [r7, #96]	; 0x60
 8007204:	2300      	movs	r3, #0
 8007206:	667b      	str	r3, [r7, #100]	; 0x64
 8007208:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800720c:	460b      	mov	r3, r1
 800720e:	4313      	orrs	r3, r2
 8007210:	d038      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800721a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800721e:	d018      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007224:	d811      	bhi.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800722a:	d014      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800722c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007230:	d80b      	bhi.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d011      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800723a:	d106      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800723c:	4bc3      	ldr	r3, [pc, #780]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	4ac2      	ldr	r2, [pc, #776]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007248:	e008      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007250:	e004      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007252:	bf00      	nop
 8007254:	e002      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800725a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007264:	4bb9      	ldr	r3, [pc, #740]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007268:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007274:	4ab5      	ldr	r2, [pc, #724]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007276:	430b      	orrs	r3, r1
 8007278:	6553      	str	r3, [r2, #84]	; 0x54
 800727a:	e003      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007280:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007290:	65bb      	str	r3, [r7, #88]	; 0x58
 8007292:	2300      	movs	r3, #0
 8007294:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007296:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072a0:	4baa      	ldr	r3, [pc, #680]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ae:	4aa7      	ldr	r2, [pc, #668]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80072c0:	653b      	str	r3, [r7, #80]	; 0x50
 80072c2:	2300      	movs	r3, #0
 80072c4:	657b      	str	r3, [r7, #84]	; 0x54
 80072c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80072ca:	460b      	mov	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	d00a      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80072d0:	4b9e      	ldr	r3, [pc, #632]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80072e0:	4a9a      	ldr	r2, [pc, #616]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e2:	430b      	orrs	r3, r1
 80072e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80072f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f4:	2300      	movs	r3, #0
 80072f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80072fc:	460b      	mov	r3, r1
 80072fe:	4313      	orrs	r3, r2
 8007300:	d009      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007302:	4b92      	ldr	r3, [pc, #584]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007306:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800730e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007310:	4a8e      	ldr	r2, [pc, #568]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007312:	430b      	orrs	r3, r1
 8007314:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007322:	643b      	str	r3, [r7, #64]	; 0x40
 8007324:	2300      	movs	r3, #0
 8007326:	647b      	str	r3, [r7, #68]	; 0x44
 8007328:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800732c:	460b      	mov	r3, r1
 800732e:	4313      	orrs	r3, r2
 8007330:	d00e      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007332:	4b86      	ldr	r3, [pc, #536]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	4a85      	ldr	r2, [pc, #532]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800733c:	6113      	str	r3, [r2, #16]
 800733e:	4b83      	ldr	r3, [pc, #524]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007340:	6919      	ldr	r1, [r3, #16]
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007346:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800734a:	4a80      	ldr	r2, [pc, #512]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800734c:	430b      	orrs	r3, r1
 800734e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800735c:	63bb      	str	r3, [r7, #56]	; 0x38
 800735e:	2300      	movs	r3, #0
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007362:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007366:	460b      	mov	r3, r1
 8007368:	4313      	orrs	r3, r2
 800736a:	d009      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800736c:	4b77      	ldr	r3, [pc, #476]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800736e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007370:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737a:	4a74      	ldr	r2, [pc, #464]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800737c:	430b      	orrs	r3, r1
 800737e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800738c:	633b      	str	r3, [r7, #48]	; 0x30
 800738e:	2300      	movs	r3, #0
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
 8007392:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007396:	460b      	mov	r3, r1
 8007398:	4313      	orrs	r3, r2
 800739a:	d00a      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800739c:	4b6b      	ldr	r3, [pc, #428]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800739e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ac:	4a67      	ldr	r2, [pc, #412]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073ae:	430b      	orrs	r3, r1
 80073b0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	2100      	movs	r1, #0
 80073bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80073c8:	460b      	mov	r3, r1
 80073ca:	4313      	orrs	r3, r2
 80073cc:	d011      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d2:	3308      	adds	r3, #8
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fbce 	bl	8007b78 <RCCEx_PLL2_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80073e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	2100      	movs	r1, #0
 80073fc:	6239      	str	r1, [r7, #32]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
 8007404:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007408:	460b      	mov	r3, r1
 800740a:	4313      	orrs	r3, r2
 800740c:	d011      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800740e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007412:	3308      	adds	r3, #8
 8007414:	2101      	movs	r1, #1
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fbae 	bl	8007b78 <RCCEx_PLL2_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800742e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	2100      	movs	r1, #0
 800743c:	61b9      	str	r1, [r7, #24]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007448:	460b      	mov	r3, r1
 800744a:	4313      	orrs	r3, r2
 800744c:	d011      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007452:	3308      	adds	r3, #8
 8007454:	2102      	movs	r1, #2
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fb8e 	bl	8007b78 <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800746e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	2100      	movs	r1, #0
 800747c:	6139      	str	r1, [r7, #16]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007488:	460b      	mov	r3, r1
 800748a:	4313      	orrs	r3, r2
 800748c:	d011      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007492:	3328      	adds	r3, #40	; 0x28
 8007494:	2100      	movs	r1, #0
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fc20 	bl	8007cdc <RCCEx_PLL3_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80074a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	2100      	movs	r1, #0
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80074c8:	460b      	mov	r3, r1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	d011      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d2:	3328      	adds	r3, #40	; 0x28
 80074d4:	2101      	movs	r1, #1
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fc00 	bl	8007cdc <RCCEx_PLL3_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	2100      	movs	r1, #0
 80074fc:	6039      	str	r1, [r7, #0]
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	607b      	str	r3, [r7, #4]
 8007504:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007508:	460b      	mov	r3, r1
 800750a:	4313      	orrs	r3, r2
 800750c:	d011      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007512:	3328      	adds	r3, #40	; 0x28
 8007514:	2102      	movs	r1, #2
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fbe0 	bl	8007cdc <RCCEx_PLL3_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800752e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007532:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	e000      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
}
 8007540:	4618      	mov	r0, r3
 8007542:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007546:	46bd      	mov	sp, r7
 8007548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800754c:	58024400 	.word	0x58024400

08007550 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007554:	f7fe fd7a 	bl	800604c <HAL_RCC_GetHCLKFreq>
 8007558:	4602      	mov	r2, r0
 800755a:	4b06      	ldr	r3, [pc, #24]	; (8007574 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	091b      	lsrs	r3, r3, #4
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	4904      	ldr	r1, [pc, #16]	; (8007578 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007566:	5ccb      	ldrb	r3, [r1, r3]
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007570:	4618      	mov	r0, r3
 8007572:	bd80      	pop	{r7, pc}
 8007574:	58024400 	.word	0x58024400
 8007578:	0800a9b0 	.word	0x0800a9b0

0800757c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800757c:	b480      	push	{r7}
 800757e:	b089      	sub	sp, #36	; 0x24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007584:	4ba1      	ldr	r3, [pc, #644]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800758e:	4b9f      	ldr	r3, [pc, #636]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	0b1b      	lsrs	r3, r3, #12
 8007594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007598:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800759a:	4b9c      	ldr	r3, [pc, #624]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	091b      	lsrs	r3, r3, #4
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075a6:	4b99      	ldr	r3, [pc, #612]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075aa:	08db      	lsrs	r3, r3, #3
 80075ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	fb02 f303 	mul.w	r3, r2, r3
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8111 	beq.w	80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	f000 8083 	beq.w	80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	f200 80a1 	bhi.w	800771c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d056      	beq.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075e6:	e099      	b.n	800771c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e8:	4b88      	ldr	r3, [pc, #544]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02d      	beq.n	8007650 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075f4:	4b85      	ldr	r3, [pc, #532]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	08db      	lsrs	r3, r3, #3
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	4a84      	ldr	r2, [pc, #528]	; (8007810 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
 8007604:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761e:	4b7b      	ldr	r3, [pc, #492]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007632:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800764e:	e087      	b.n	8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800765e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007662:	4b6a      	ldr	r3, [pc, #424]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007672:	ed97 6a03 	vldr	s12, [r7, #12]
 8007676:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800767a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007692:	e065      	b.n	8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800781c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a6:	4b59      	ldr	r3, [pc, #356]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d6:	e043      	b.n	8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ea:	4b48      	ldr	r3, [pc, #288]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800770e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771a:	e021      	b.n	8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800781c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b37      	ldr	r3, [pc, #220]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007742:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800775e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007760:	4b2a      	ldr	r3, [pc, #168]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	0a5b      	lsrs	r3, r3, #9
 8007766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800777a:	edd7 6a07 	vldr	s13, [r7, #28]
 800777e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007786:	ee17 2a90 	vmov	r2, s15
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800778e:	4b1f      	ldr	r3, [pc, #124]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	0c1b      	lsrs	r3, r3, #16
 8007794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b4:	ee17 2a90 	vmov	r2, s15
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80077bc:	4b13      	ldr	r3, [pc, #76]	; (800780c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c0:	0e1b      	lsrs	r3, r3, #24
 80077c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e2:	ee17 2a90 	vmov	r2, s15
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077ea:	e008      	b.n	80077fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	609a      	str	r2, [r3, #8]
}
 80077fe:	bf00      	nop
 8007800:	3724      	adds	r7, #36	; 0x24
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	58024400 	.word	0x58024400
 8007810:	03d09000 	.word	0x03d09000
 8007814:	46000000 	.word	0x46000000
 8007818:	4c742400 	.word	0x4c742400
 800781c:	4a742400 	.word	0x4a742400
 8007820:	4afe502a 	.word	0x4afe502a

08007824 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007824:	b480      	push	{r7}
 8007826:	b089      	sub	sp, #36	; 0x24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800782c:	4ba1      	ldr	r3, [pc, #644]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007836:	4b9f      	ldr	r3, [pc, #636]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	0d1b      	lsrs	r3, r3, #20
 800783c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007840:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007842:	4b9c      	ldr	r3, [pc, #624]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	0a1b      	lsrs	r3, r3, #8
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800784e:	4b99      	ldr	r3, [pc, #612]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007852:	08db      	lsrs	r3, r3, #3
 8007854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8111 	beq.w	8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b02      	cmp	r3, #2
 8007876:	f000 8083 	beq.w	8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b02      	cmp	r3, #2
 800787e:	f200 80a1 	bhi.w	80079c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d056      	beq.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800788e:	e099      	b.n	80079c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007890:	4b88      	ldr	r3, [pc, #544]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b00      	cmp	r3, #0
 800789a:	d02d      	beq.n	80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800789c:	4b85      	ldr	r3, [pc, #532]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	08db      	lsrs	r3, r3, #3
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	4a84      	ldr	r2, [pc, #528]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078a8:	fa22 f303 	lsr.w	r3, r2, r3
 80078ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c6:	4b7b      	ldr	r3, [pc, #492]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078da:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078f6:	e087      	b.n	8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007902:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790a:	4b6a      	ldr	r3, [pc, #424]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	ed97 6a03 	vldr	s12, [r7, #12]
 800791e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800793a:	e065      	b.n	8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007946:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800794a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794e:	4b59      	ldr	r3, [pc, #356]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007962:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800797e:	e043      	b.n	8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800798e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007992:	4b48      	ldr	r3, [pc, #288]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c2:	e021      	b.n	8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d6:	4b37      	ldr	r3, [pc, #220]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a08:	4b2a      	ldr	r3, [pc, #168]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	0a5b      	lsrs	r3, r3, #9
 8007a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a2e:	ee17 2a90 	vmov	r2, s15
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a36:	4b1f      	ldr	r3, [pc, #124]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	0c1b      	lsrs	r3, r3, #16
 8007a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a5c:	ee17 2a90 	vmov	r2, s15
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a64:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	0e1b      	lsrs	r3, r3, #24
 8007a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a8a:	ee17 2a90 	vmov	r2, s15
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a92:	e008      	b.n	8007aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	609a      	str	r2, [r3, #8]
}
 8007aa6:	bf00      	nop
 8007aa8:	3724      	adds	r7, #36	; 0x24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	58024400 	.word	0x58024400
 8007ab8:	03d09000 	.word	0x03d09000
 8007abc:	46000000 	.word	0x46000000
 8007ac0:	4c742400 	.word	0x4c742400
 8007ac4:	4a742400 	.word	0x4a742400
 8007ac8:	4afe502a 	.word	0x4afe502a

08007acc <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007ad4:	4b26      	ldr	r3, [pc, #152]	; (8007b70 <HAL_RCCEx_CRSConfig+0xa4>)
 8007ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ada:	4a25      	ldr	r2, [pc, #148]	; (8007b70 <HAL_RCCEx_CRSConfig+0xa4>)
 8007adc:	f043 0302 	orr.w	r3, r3, #2
 8007ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007ae4:	4b22      	ldr	r3, [pc, #136]	; (8007b70 <HAL_RCCEx_CRSConfig+0xa4>)
 8007ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aea:	4a21      	ldr	r2, [pc, #132]	; (8007b70 <HAL_RCCEx_CRSConfig+0xa4>)
 8007aec:	f023 0302 	bic.w	r3, r3, #2
 8007af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007af4:	f7fa fdae 	bl	8002654 <HAL_GetREVID>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f241 0203 	movw	r2, #4099	; 0x1003
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d80b      	bhi.n	8007b1a <HAL_RCCEx_CRSConfig+0x4e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b0a:	d106      	bne.n	8007b1a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	e008      	b.n	8007b2c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	041b      	lsls	r3, r3, #16
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007b42:	4a0c      	ldr	r2, [pc, #48]	; (8007b74 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	021b      	lsls	r3, r3, #8
 8007b56:	4907      	ldr	r1, [pc, #28]	; (8007b74 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007b5c:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a04      	ldr	r2, [pc, #16]	; (8007b74 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b66:	6013      	str	r3, [r2, #0]
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	58024400 	.word	0x58024400
 8007b74:	40008400 	.word	0x40008400

08007b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b86:	4b53      	ldr	r3, [pc, #332]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d101      	bne.n	8007b96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e099      	b.n	8007cca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b96:	4b4f      	ldr	r3, [pc, #316]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a4e      	ldr	r2, [pc, #312]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007b9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba2:	f7fa fd07 	bl	80025b4 <HAL_GetTick>
 8007ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ba8:	e008      	b.n	8007bbc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007baa:	f7fa fd03 	bl	80025b4 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d901      	bls.n	8007bbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e086      	b.n	8007cca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bbc:	4b45      	ldr	r3, [pc, #276]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1f0      	bne.n	8007baa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007bc8:	4b42      	ldr	r3, [pc, #264]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	031b      	lsls	r3, r3, #12
 8007bd6:	493f      	ldr	r1, [pc, #252]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	628b      	str	r3, [r1, #40]	; 0x28
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	025b      	lsls	r3, r3, #9
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	041b      	lsls	r3, r3, #16
 8007bfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	061b      	lsls	r3, r3, #24
 8007c08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c0c:	4931      	ldr	r1, [pc, #196]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c12:	4b30      	ldr	r3, [pc, #192]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	492d      	ldr	r1, [pc, #180]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c24:	4b2b      	ldr	r3, [pc, #172]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	f023 0220 	bic.w	r2, r3, #32
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	4928      	ldr	r1, [pc, #160]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c36:	4b27      	ldr	r3, [pc, #156]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c3c:	f023 0310 	bic.w	r3, r3, #16
 8007c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c42:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c46:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <RCCEx_PLL2_Config+0x160>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	69d2      	ldr	r2, [r2, #28]
 8007c4e:	00d2      	lsls	r2, r2, #3
 8007c50:	4920      	ldr	r1, [pc, #128]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c56:	4b1f      	ldr	r3, [pc, #124]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	4a1e      	ldr	r2, [pc, #120]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c5c:	f043 0310 	orr.w	r3, r3, #16
 8007c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c68:	4b1a      	ldr	r3, [pc, #104]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	4a19      	ldr	r2, [pc, #100]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c74:	e00f      	b.n	8007c96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d106      	bne.n	8007c8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c7c:	4b15      	ldr	r3, [pc, #84]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	4a14      	ldr	r2, [pc, #80]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c88:	e005      	b.n	8007c96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8e:	4a11      	ldr	r2, [pc, #68]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c96:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a0e      	ldr	r2, [pc, #56]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca2:	f7fa fc87 	bl	80025b4 <HAL_GetTick>
 8007ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ca8:	e008      	b.n	8007cbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007caa:	f7fa fc83 	bl	80025b4 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e006      	b.n	8007cca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <RCCEx_PLL2_Config+0x15c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f0      	beq.n	8007caa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	58024400 	.word	0x58024400
 8007cd8:	ffff0007 	.word	0xffff0007

08007cdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cea:	4b53      	ldr	r3, [pc, #332]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d101      	bne.n	8007cfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e099      	b.n	8007e2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007cfa:	4b4f      	ldr	r3, [pc, #316]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a4e      	ldr	r2, [pc, #312]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d06:	f7fa fc55 	bl	80025b4 <HAL_GetTick>
 8007d0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d0c:	e008      	b.n	8007d20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d0e:	f7fa fc51 	bl	80025b4 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d901      	bls.n	8007d20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e086      	b.n	8007e2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d20:	4b45      	ldr	r3, [pc, #276]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f0      	bne.n	8007d0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d2c:	4b42      	ldr	r3, [pc, #264]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	051b      	lsls	r3, r3, #20
 8007d3a:	493f      	ldr	r1, [pc, #252]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	025b      	lsls	r3, r3, #9
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	041b      	lsls	r3, r3, #16
 8007d5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	061b      	lsls	r3, r3, #24
 8007d6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d70:	4931      	ldr	r1, [pc, #196]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d76:	4b30      	ldr	r3, [pc, #192]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	492d      	ldr	r1, [pc, #180]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d88:	4b2b      	ldr	r3, [pc, #172]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	4928      	ldr	r1, [pc, #160]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d9a:	4b27      	ldr	r3, [pc, #156]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	4a26      	ldr	r2, [pc, #152]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007da6:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007daa:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <RCCEx_PLL3_Config+0x160>)
 8007dac:	4013      	ands	r3, r2
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	69d2      	ldr	r2, [r2, #28]
 8007db2:	00d2      	lsls	r2, r2, #3
 8007db4:	4920      	ldr	r1, [pc, #128]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007dba:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	4a1e      	ldr	r2, [pc, #120]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d106      	bne.n	8007dda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007dcc:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	4a19      	ldr	r2, [pc, #100]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dd8:	e00f      	b.n	8007dfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d106      	bne.n	8007dee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007de0:	4b15      	ldr	r3, [pc, #84]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	4a14      	ldr	r2, [pc, #80]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dec:	e005      	b.n	8007dfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dee:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	4a11      	ldr	r2, [pc, #68]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007df8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007dfa:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a0e      	ldr	r2, [pc, #56]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e06:	f7fa fbd5 	bl	80025b4 <HAL_GetTick>
 8007e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e0c:	e008      	b.n	8007e20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e0e:	f7fa fbd1 	bl	80025b4 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d901      	bls.n	8007e20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e006      	b.n	8007e2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <RCCEx_PLL3_Config+0x15c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0f0      	beq.n	8007e0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	ffff0007 	.word	0xffff0007

08007e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e049      	b.n	8007ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fa f8c8 	bl	8001ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f000 f92e 	bl	80080e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e0dc      	b.n	80080c6 <HAL_TIM_ConfigClockSource+0x1d6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4b6a      	ldr	r3, [pc, #424]	; (80080d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a64      	ldr	r2, [pc, #400]	; (80080d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	f000 80a9 	beq.w	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f48:	4a62      	ldr	r2, [pc, #392]	; (80080d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	f200 80ae 	bhi.w	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007f50:	4a61      	ldr	r2, [pc, #388]	; (80080d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	f000 80a1 	beq.w	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f58:	4a5f      	ldr	r2, [pc, #380]	; (80080d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	f200 80a6 	bhi.w	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007f60:	4a5e      	ldr	r2, [pc, #376]	; (80080dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	f000 8099 	beq.w	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f68:	4a5c      	ldr	r2, [pc, #368]	; (80080dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	f200 809e 	bhi.w	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007f70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007f74:	f000 8091 	beq.w	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007f7c:	f200 8096 	bhi.w	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f84:	f000 8089 	beq.w	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f8c:	f200 808e 	bhi.w	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f94:	d03e      	beq.n	8008014 <HAL_TIM_ConfigClockSource+0x124>
 8007f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f9a:	f200 8087 	bhi.w	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa2:	f000 8086 	beq.w	80080b2 <HAL_TIM_ConfigClockSource+0x1c2>
 8007fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007faa:	d87f      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007fac:	2b70      	cmp	r3, #112	; 0x70
 8007fae:	d01a      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0xf6>
 8007fb0:	2b70      	cmp	r3, #112	; 0x70
 8007fb2:	d87b      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007fb4:	2b60      	cmp	r3, #96	; 0x60
 8007fb6:	d050      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x16a>
 8007fb8:	2b60      	cmp	r3, #96	; 0x60
 8007fba:	d877      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007fbc:	2b50      	cmp	r3, #80	; 0x50
 8007fbe:	d03c      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x14a>
 8007fc0:	2b50      	cmp	r3, #80	; 0x50
 8007fc2:	d873      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d058      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x18a>
 8007fc8:	2b40      	cmp	r3, #64	; 0x40
 8007fca:	d86f      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007fcc:	2b30      	cmp	r3, #48	; 0x30
 8007fce:	d064      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fd0:	2b30      	cmp	r3, #48	; 0x30
 8007fd2:	d86b      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d060      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d867      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d05c      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fe0:	2b10      	cmp	r3, #16
 8007fe2:	d05a      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fe4:	e062      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	6899      	ldr	r1, [r3, #8]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	f000 f98b 	bl	8008310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	609a      	str	r2, [r3, #8]
      break;
 8008012:	e04f      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6899      	ldr	r1, [r3, #8]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f000 f974 	bl	8008310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008036:	609a      	str	r2, [r3, #8]
      break;
 8008038:	e03c      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6859      	ldr	r1, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	461a      	mov	r2, r3
 8008048:	f000 f8e4 	bl	8008214 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2150      	movs	r1, #80	; 0x50
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f93e 	bl	80082d4 <TIM_ITRx_SetConfig>
      break;
 8008058:	e02c      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6859      	ldr	r1, [r3, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	461a      	mov	r2, r3
 8008068:	f000 f903 	bl	8008272 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2160      	movs	r1, #96	; 0x60
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f92e 	bl	80082d4 <TIM_ITRx_SetConfig>
      break;
 8008078:	e01c      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6859      	ldr	r1, [r3, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	461a      	mov	r2, r3
 8008088:	f000 f8c4 	bl	8008214 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2140      	movs	r1, #64	; 0x40
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f91e 	bl	80082d4 <TIM_ITRx_SetConfig>
      break;
 8008098:	e00c      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f000 f915 	bl	80082d4 <TIM_ITRx_SetConfig>
      break;
 80080aa:	e003      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
      break;
 80080b0:	e000      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80080b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	ffceff88 	.word	0xffceff88
 80080d4:	00100040 	.word	0x00100040
 80080d8:	00100030 	.word	0x00100030
 80080dc:	00100020 	.word	0x00100020

080080e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a40      	ldr	r2, [pc, #256]	; (80081f4 <TIM_Base_SetConfig+0x114>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d013      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fe:	d00f      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a3d      	ldr	r2, [pc, #244]	; (80081f8 <TIM_Base_SetConfig+0x118>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00b      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a3c      	ldr	r2, [pc, #240]	; (80081fc <TIM_Base_SetConfig+0x11c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d007      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a3b      	ldr	r2, [pc, #236]	; (8008200 <TIM_Base_SetConfig+0x120>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d003      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a3a      	ldr	r2, [pc, #232]	; (8008204 <TIM_Base_SetConfig+0x124>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d108      	bne.n	8008132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2f      	ldr	r2, [pc, #188]	; (80081f4 <TIM_Base_SetConfig+0x114>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d01f      	beq.n	800817a <TIM_Base_SetConfig+0x9a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008140:	d01b      	beq.n	800817a <TIM_Base_SetConfig+0x9a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a2c      	ldr	r2, [pc, #176]	; (80081f8 <TIM_Base_SetConfig+0x118>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d017      	beq.n	800817a <TIM_Base_SetConfig+0x9a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a2b      	ldr	r2, [pc, #172]	; (80081fc <TIM_Base_SetConfig+0x11c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <TIM_Base_SetConfig+0x9a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2a      	ldr	r2, [pc, #168]	; (8008200 <TIM_Base_SetConfig+0x120>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00f      	beq.n	800817a <TIM_Base_SetConfig+0x9a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a29      	ldr	r2, [pc, #164]	; (8008204 <TIM_Base_SetConfig+0x124>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <TIM_Base_SetConfig+0x9a>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a28      	ldr	r2, [pc, #160]	; (8008208 <TIM_Base_SetConfig+0x128>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_Base_SetConfig+0x9a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a27      	ldr	r2, [pc, #156]	; (800820c <TIM_Base_SetConfig+0x12c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_Base_SetConfig+0x9a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a26      	ldr	r2, [pc, #152]	; (8008210 <TIM_Base_SetConfig+0x130>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d108      	bne.n	800818c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a10      	ldr	r2, [pc, #64]	; (80081f4 <TIM_Base_SetConfig+0x114>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00f      	beq.n	80081d8 <TIM_Base_SetConfig+0xf8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a12      	ldr	r2, [pc, #72]	; (8008204 <TIM_Base_SetConfig+0x124>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d00b      	beq.n	80081d8 <TIM_Base_SetConfig+0xf8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a11      	ldr	r2, [pc, #68]	; (8008208 <TIM_Base_SetConfig+0x128>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d007      	beq.n	80081d8 <TIM_Base_SetConfig+0xf8>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a10      	ldr	r2, [pc, #64]	; (800820c <TIM_Base_SetConfig+0x12c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d003      	beq.n	80081d8 <TIM_Base_SetConfig+0xf8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a0f      	ldr	r2, [pc, #60]	; (8008210 <TIM_Base_SetConfig+0x130>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d103      	bne.n	80081e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	615a      	str	r2, [r3, #20]
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	40010000 	.word	0x40010000
 80081f8:	40000400 	.word	0x40000400
 80081fc:	40000800 	.word	0x40000800
 8008200:	40000c00 	.word	0x40000c00
 8008204:	40010400 	.word	0x40010400
 8008208:	40014000 	.word	0x40014000
 800820c:	40014400 	.word	0x40014400
 8008210:	40014800 	.word	0x40014800

08008214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f023 0201 	bic.w	r2, r3, #1
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800823e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f023 030a 	bic.w	r3, r3, #10
 8008250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4313      	orrs	r3, r2
 8008258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	621a      	str	r2, [r3, #32]
}
 8008266:	bf00      	nop
 8008268:	371c      	adds	r7, #28
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008272:	b480      	push	{r7}
 8008274:	b087      	sub	sp, #28
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f023 0210 	bic.w	r2, r3, #16
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800829c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	031b      	lsls	r3, r3, #12
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4b09      	ldr	r3, [pc, #36]	; (800830c <TIM_ITRx_SetConfig+0x38>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	f043 0307 	orr.w	r3, r3, #7
 80082f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	609a      	str	r2, [r3, #8]
}
 80082fe:	bf00      	nop
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	ffcfff8f 	.word	0xffcfff8f

08008310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800832a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	021a      	lsls	r2, r3, #8
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	431a      	orrs	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	4313      	orrs	r3, r2
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	609a      	str	r2, [r3, #8]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008364:	2302      	movs	r3, #2
 8008366:	e06d      	b.n	8008444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a30      	ldr	r2, [pc, #192]	; (8008450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d004      	beq.n	800839c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a2f      	ldr	r2, [pc, #188]	; (8008454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d108      	bne.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a20      	ldr	r2, [pc, #128]	; (8008450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d022      	beq.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083da:	d01d      	beq.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d018      	beq.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a1c      	ldr	r2, [pc, #112]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d013      	beq.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1a      	ldr	r2, [pc, #104]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00e      	beq.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a15      	ldr	r2, [pc, #84]	; (8008454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d009      	beq.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a16      	ldr	r2, [pc, #88]	; (8008464 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d004      	beq.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a15      	ldr	r2, [pc, #84]	; (8008468 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d10c      	bne.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800841e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	4313      	orrs	r3, r2
 8008428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	40010000 	.word	0x40010000
 8008454:	40010400 	.word	0x40010400
 8008458:	40000400 	.word	0x40000400
 800845c:	40000800 	.word	0x40000800
 8008460:	40000c00 	.word	0x40000c00
 8008464:	40001800 	.word	0x40001800
 8008468:	40014000 	.word	0x40014000

0800846c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e042      	b.n	8008504 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7f9 fded 	bl	8002070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2224      	movs	r2, #36	; 0x24
 800849a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f8ba 	bl	8008628 <UART_SetConfig>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d101      	bne.n	80084be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e022      	b.n	8008504 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fe16 	bl	80090f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0201 	orr.w	r2, r2, #1
 80084fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fe9d 	bl	800923c <UART_CheckIdleState>
 8008502:	4603      	mov	r3, r0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08a      	sub	sp, #40	; 0x28
 8008510:	af02      	add	r7, sp, #8
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	4613      	mov	r3, r2
 800851a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008522:	2b20      	cmp	r3, #32
 8008524:	d17b      	bne.n	800861e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <HAL_UART_Transmit+0x26>
 800852c:	88fb      	ldrh	r3, [r7, #6]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e074      	b.n	8008620 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2221      	movs	r2, #33	; 0x21
 8008542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008546:	f7fa f835 	bl	80025b4 <HAL_GetTick>
 800854a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008564:	d108      	bne.n	8008578 <HAL_UART_Transmit+0x6c>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	e003      	b.n	8008580 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008580:	e030      	b.n	80085e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2200      	movs	r2, #0
 800858a:	2180      	movs	r1, #128	; 0x80
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 feff 	bl	8009390 <UART_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2220      	movs	r2, #32
 800859c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e03d      	b.n	8008620 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	3302      	adds	r3, #2
 80085be:	61bb      	str	r3, [r7, #24]
 80085c0:	e007      	b.n	80085d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	781a      	ldrb	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	3301      	adds	r3, #1
 80085d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085d8:	b29b      	uxth	r3, r3
 80085da:	3b01      	subs	r3, #1
 80085dc:	b29a      	uxth	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1c8      	bne.n	8008582 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2200      	movs	r2, #0
 80085f8:	2140      	movs	r1, #64	; 0x40
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 fec8 	bl	8009390 <UART_WaitOnFlagUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2220      	movs	r2, #32
 800860a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e006      	b.n	8008620 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	e000      	b.n	8008620 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800861e:	2302      	movs	r3, #2
  }
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800862c:	b092      	sub	sp, #72	; 0x48
 800862e:	af00      	add	r7, sp, #0
 8008630:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	431a      	orrs	r2, r3
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	431a      	orrs	r2, r3
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	4313      	orrs	r3, r2
 800864e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	4bbe      	ldr	r3, [pc, #760]	; (8008950 <UART_SetConfig+0x328>)
 8008658:	4013      	ands	r3, r2
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008660:	430b      	orrs	r3, r1
 8008662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4ab3      	ldr	r2, [pc, #716]	; (8008954 <UART_SetConfig+0x32c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008690:	4313      	orrs	r3, r2
 8008692:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	4baf      	ldr	r3, [pc, #700]	; (8008958 <UART_SetConfig+0x330>)
 800869c:	4013      	ands	r3, r2
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086a4:	430b      	orrs	r3, r1
 80086a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ae:	f023 010f 	bic.w	r1, r3, #15
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4aa6      	ldr	r2, [pc, #664]	; (800895c <UART_SetConfig+0x334>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d177      	bne.n	80087b8 <UART_SetConfig+0x190>
 80086c8:	4ba5      	ldr	r3, [pc, #660]	; (8008960 <UART_SetConfig+0x338>)
 80086ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086d0:	2b28      	cmp	r3, #40	; 0x28
 80086d2:	d86d      	bhi.n	80087b0 <UART_SetConfig+0x188>
 80086d4:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <UART_SetConfig+0xb4>)
 80086d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086da:	bf00      	nop
 80086dc:	08008781 	.word	0x08008781
 80086e0:	080087b1 	.word	0x080087b1
 80086e4:	080087b1 	.word	0x080087b1
 80086e8:	080087b1 	.word	0x080087b1
 80086ec:	080087b1 	.word	0x080087b1
 80086f0:	080087b1 	.word	0x080087b1
 80086f4:	080087b1 	.word	0x080087b1
 80086f8:	080087b1 	.word	0x080087b1
 80086fc:	08008789 	.word	0x08008789
 8008700:	080087b1 	.word	0x080087b1
 8008704:	080087b1 	.word	0x080087b1
 8008708:	080087b1 	.word	0x080087b1
 800870c:	080087b1 	.word	0x080087b1
 8008710:	080087b1 	.word	0x080087b1
 8008714:	080087b1 	.word	0x080087b1
 8008718:	080087b1 	.word	0x080087b1
 800871c:	08008791 	.word	0x08008791
 8008720:	080087b1 	.word	0x080087b1
 8008724:	080087b1 	.word	0x080087b1
 8008728:	080087b1 	.word	0x080087b1
 800872c:	080087b1 	.word	0x080087b1
 8008730:	080087b1 	.word	0x080087b1
 8008734:	080087b1 	.word	0x080087b1
 8008738:	080087b1 	.word	0x080087b1
 800873c:	08008799 	.word	0x08008799
 8008740:	080087b1 	.word	0x080087b1
 8008744:	080087b1 	.word	0x080087b1
 8008748:	080087b1 	.word	0x080087b1
 800874c:	080087b1 	.word	0x080087b1
 8008750:	080087b1 	.word	0x080087b1
 8008754:	080087b1 	.word	0x080087b1
 8008758:	080087b1 	.word	0x080087b1
 800875c:	080087a1 	.word	0x080087a1
 8008760:	080087b1 	.word	0x080087b1
 8008764:	080087b1 	.word	0x080087b1
 8008768:	080087b1 	.word	0x080087b1
 800876c:	080087b1 	.word	0x080087b1
 8008770:	080087b1 	.word	0x080087b1
 8008774:	080087b1 	.word	0x080087b1
 8008778:	080087b1 	.word	0x080087b1
 800877c:	080087a9 	.word	0x080087a9
 8008780:	2301      	movs	r3, #1
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008786:	e222      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008788:	2304      	movs	r3, #4
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e21e      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008790:	2308      	movs	r3, #8
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e21a      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008798:	2310      	movs	r3, #16
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e216      	b.n	8008bce <UART_SetConfig+0x5a6>
 80087a0:	2320      	movs	r3, #32
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e212      	b.n	8008bce <UART_SetConfig+0x5a6>
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ae:	e20e      	b.n	8008bce <UART_SetConfig+0x5a6>
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b6:	e20a      	b.n	8008bce <UART_SetConfig+0x5a6>
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a69      	ldr	r2, [pc, #420]	; (8008964 <UART_SetConfig+0x33c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d130      	bne.n	8008824 <UART_SetConfig+0x1fc>
 80087c2:	4b67      	ldr	r3, [pc, #412]	; (8008960 <UART_SetConfig+0x338>)
 80087c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d826      	bhi.n	800881c <UART_SetConfig+0x1f4>
 80087ce:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <UART_SetConfig+0x1ac>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	080087ed 	.word	0x080087ed
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	080087fd 	.word	0x080087fd
 80087e0:	08008805 	.word	0x08008805
 80087e4:	0800880d 	.word	0x0800880d
 80087e8:	08008815 	.word	0x08008815
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e1ec      	b.n	8008bce <UART_SetConfig+0x5a6>
 80087f4:	2304      	movs	r3, #4
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e1e8      	b.n	8008bce <UART_SetConfig+0x5a6>
 80087fc:	2308      	movs	r3, #8
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e1e4      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008804:	2310      	movs	r3, #16
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e1e0      	b.n	8008bce <UART_SetConfig+0x5a6>
 800880c:	2320      	movs	r3, #32
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e1dc      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008814:	2340      	movs	r3, #64	; 0x40
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881a:	e1d8      	b.n	8008bce <UART_SetConfig+0x5a6>
 800881c:	2380      	movs	r3, #128	; 0x80
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e1d4      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a4f      	ldr	r2, [pc, #316]	; (8008968 <UART_SetConfig+0x340>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d130      	bne.n	8008890 <UART_SetConfig+0x268>
 800882e:	4b4c      	ldr	r3, [pc, #304]	; (8008960 <UART_SetConfig+0x338>)
 8008830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	2b05      	cmp	r3, #5
 8008838:	d826      	bhi.n	8008888 <UART_SetConfig+0x260>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x218>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008859 	.word	0x08008859
 8008844:	08008861 	.word	0x08008861
 8008848:	08008869 	.word	0x08008869
 800884c:	08008871 	.word	0x08008871
 8008850:	08008879 	.word	0x08008879
 8008854:	08008881 	.word	0x08008881
 8008858:	2300      	movs	r3, #0
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885e:	e1b6      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008860:	2304      	movs	r3, #4
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008866:	e1b2      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008868:	2308      	movs	r3, #8
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886e:	e1ae      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008870:	2310      	movs	r3, #16
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008876:	e1aa      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008878:	2320      	movs	r3, #32
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887e:	e1a6      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008880:	2340      	movs	r3, #64	; 0x40
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008886:	e1a2      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008888:	2380      	movs	r3, #128	; 0x80
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888e:	e19e      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a35      	ldr	r2, [pc, #212]	; (800896c <UART_SetConfig+0x344>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d130      	bne.n	80088fc <UART_SetConfig+0x2d4>
 800889a:	4b31      	ldr	r3, [pc, #196]	; (8008960 <UART_SetConfig+0x338>)
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d826      	bhi.n	80088f4 <UART_SetConfig+0x2cc>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <UART_SetConfig+0x284>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088c5 	.word	0x080088c5
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088d5 	.word	0x080088d5
 80088b8:	080088dd 	.word	0x080088dd
 80088bc:	080088e5 	.word	0x080088e5
 80088c0:	080088ed 	.word	0x080088ed
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ca:	e180      	b.n	8008bce <UART_SetConfig+0x5a6>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d2:	e17c      	b.n	8008bce <UART_SetConfig+0x5a6>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088da:	e178      	b.n	8008bce <UART_SetConfig+0x5a6>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e2:	e174      	b.n	8008bce <UART_SetConfig+0x5a6>
 80088e4:	2320      	movs	r3, #32
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ea:	e170      	b.n	8008bce <UART_SetConfig+0x5a6>
 80088ec:	2340      	movs	r3, #64	; 0x40
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f2:	e16c      	b.n	8008bce <UART_SetConfig+0x5a6>
 80088f4:	2380      	movs	r3, #128	; 0x80
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e168      	b.n	8008bce <UART_SetConfig+0x5a6>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1b      	ldr	r2, [pc, #108]	; (8008970 <UART_SetConfig+0x348>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d142      	bne.n	800898c <UART_SetConfig+0x364>
 8008906:	4b16      	ldr	r3, [pc, #88]	; (8008960 <UART_SetConfig+0x338>)
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	2b05      	cmp	r3, #5
 8008910:	d838      	bhi.n	8008984 <UART_SetConfig+0x35c>
 8008912:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <UART_SetConfig+0x2f0>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	08008931 	.word	0x08008931
 800891c:	08008939 	.word	0x08008939
 8008920:	08008941 	.word	0x08008941
 8008924:	08008949 	.word	0x08008949
 8008928:	08008975 	.word	0x08008975
 800892c:	0800897d 	.word	0x0800897d
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008936:	e14a      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893e:	e146      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008946:	e142      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894e:	e13e      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008950:	cfff69f3 	.word	0xcfff69f3
 8008954:	58000c00 	.word	0x58000c00
 8008958:	11fff4ff 	.word	0x11fff4ff
 800895c:	40011000 	.word	0x40011000
 8008960:	58024400 	.word	0x58024400
 8008964:	40004400 	.word	0x40004400
 8008968:	40004800 	.word	0x40004800
 800896c:	40004c00 	.word	0x40004c00
 8008970:	40005000 	.word	0x40005000
 8008974:	2320      	movs	r3, #32
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e128      	b.n	8008bce <UART_SetConfig+0x5a6>
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e124      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008984:	2380      	movs	r3, #128	; 0x80
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898a:	e120      	b.n	8008bce <UART_SetConfig+0x5a6>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4acb      	ldr	r2, [pc, #812]	; (8008cc0 <UART_SetConfig+0x698>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d176      	bne.n	8008a84 <UART_SetConfig+0x45c>
 8008996:	4bcb      	ldr	r3, [pc, #812]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800899e:	2b28      	cmp	r3, #40	; 0x28
 80089a0:	d86c      	bhi.n	8008a7c <UART_SetConfig+0x454>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <UART_SetConfig+0x380>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	08008a4d 	.word	0x08008a4d
 80089ac:	08008a7d 	.word	0x08008a7d
 80089b0:	08008a7d 	.word	0x08008a7d
 80089b4:	08008a7d 	.word	0x08008a7d
 80089b8:	08008a7d 	.word	0x08008a7d
 80089bc:	08008a7d 	.word	0x08008a7d
 80089c0:	08008a7d 	.word	0x08008a7d
 80089c4:	08008a7d 	.word	0x08008a7d
 80089c8:	08008a55 	.word	0x08008a55
 80089cc:	08008a7d 	.word	0x08008a7d
 80089d0:	08008a7d 	.word	0x08008a7d
 80089d4:	08008a7d 	.word	0x08008a7d
 80089d8:	08008a7d 	.word	0x08008a7d
 80089dc:	08008a7d 	.word	0x08008a7d
 80089e0:	08008a7d 	.word	0x08008a7d
 80089e4:	08008a7d 	.word	0x08008a7d
 80089e8:	08008a5d 	.word	0x08008a5d
 80089ec:	08008a7d 	.word	0x08008a7d
 80089f0:	08008a7d 	.word	0x08008a7d
 80089f4:	08008a7d 	.word	0x08008a7d
 80089f8:	08008a7d 	.word	0x08008a7d
 80089fc:	08008a7d 	.word	0x08008a7d
 8008a00:	08008a7d 	.word	0x08008a7d
 8008a04:	08008a7d 	.word	0x08008a7d
 8008a08:	08008a65 	.word	0x08008a65
 8008a0c:	08008a7d 	.word	0x08008a7d
 8008a10:	08008a7d 	.word	0x08008a7d
 8008a14:	08008a7d 	.word	0x08008a7d
 8008a18:	08008a7d 	.word	0x08008a7d
 8008a1c:	08008a7d 	.word	0x08008a7d
 8008a20:	08008a7d 	.word	0x08008a7d
 8008a24:	08008a7d 	.word	0x08008a7d
 8008a28:	08008a6d 	.word	0x08008a6d
 8008a2c:	08008a7d 	.word	0x08008a7d
 8008a30:	08008a7d 	.word	0x08008a7d
 8008a34:	08008a7d 	.word	0x08008a7d
 8008a38:	08008a7d 	.word	0x08008a7d
 8008a3c:	08008a7d 	.word	0x08008a7d
 8008a40:	08008a7d 	.word	0x08008a7d
 8008a44:	08008a7d 	.word	0x08008a7d
 8008a48:	08008a75 	.word	0x08008a75
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a52:	e0bc      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008a54:	2304      	movs	r3, #4
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e0b8      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008a5c:	2308      	movs	r3, #8
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e0b4      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008a64:	2310      	movs	r3, #16
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6a:	e0b0      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008a6c:	2320      	movs	r3, #32
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a72:	e0ac      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008a74:	2340      	movs	r3, #64	; 0x40
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7a:	e0a8      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008a7c:	2380      	movs	r3, #128	; 0x80
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a82:	e0a4      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a8f      	ldr	r2, [pc, #572]	; (8008cc8 <UART_SetConfig+0x6a0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d130      	bne.n	8008af0 <UART_SetConfig+0x4c8>
 8008a8e:	4b8d      	ldr	r3, [pc, #564]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	2b05      	cmp	r3, #5
 8008a98:	d826      	bhi.n	8008ae8 <UART_SetConfig+0x4c0>
 8008a9a:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <UART_SetConfig+0x478>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008ab9 	.word	0x08008ab9
 8008aa4:	08008ac1 	.word	0x08008ac1
 8008aa8:	08008ac9 	.word	0x08008ac9
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ad9 	.word	0x08008ad9
 8008ab4:	08008ae1 	.word	0x08008ae1
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e086      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008ac0:	2304      	movs	r3, #4
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e082      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008ac8:	2308      	movs	r3, #8
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e07e      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e07a      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008ad8:	2320      	movs	r3, #32
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e076      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008ae0:	2340      	movs	r3, #64	; 0x40
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae6:	e072      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008ae8:	2380      	movs	r3, #128	; 0x80
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e06e      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a75      	ldr	r2, [pc, #468]	; (8008ccc <UART_SetConfig+0x6a4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d130      	bne.n	8008b5c <UART_SetConfig+0x534>
 8008afa:	4b72      	ldr	r3, [pc, #456]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	2b05      	cmp	r3, #5
 8008b04:	d826      	bhi.n	8008b54 <UART_SetConfig+0x52c>
 8008b06:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <UART_SetConfig+0x4e4>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b25 	.word	0x08008b25
 8008b10:	08008b2d 	.word	0x08008b2d
 8008b14:	08008b35 	.word	0x08008b35
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b45 	.word	0x08008b45
 8008b20:	08008b4d 	.word	0x08008b4d
 8008b24:	2300      	movs	r3, #0
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e050      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008b2c:	2304      	movs	r3, #4
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e04c      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008b34:	2308      	movs	r3, #8
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e048      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008b3c:	2310      	movs	r3, #16
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e044      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008b44:	2320      	movs	r3, #32
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e040      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008b4c:	2340      	movs	r3, #64	; 0x40
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b52:	e03c      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008b54:	2380      	movs	r3, #128	; 0x80
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5a:	e038      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a5b      	ldr	r2, [pc, #364]	; (8008cd0 <UART_SetConfig+0x6a8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d130      	bne.n	8008bc8 <UART_SetConfig+0x5a0>
 8008b66:	4b57      	ldr	r3, [pc, #348]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	2b05      	cmp	r3, #5
 8008b70:	d826      	bhi.n	8008bc0 <UART_SetConfig+0x598>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <UART_SetConfig+0x550>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b91 	.word	0x08008b91
 8008b7c:	08008b99 	.word	0x08008b99
 8008b80:	08008ba1 	.word	0x08008ba1
 8008b84:	08008ba9 	.word	0x08008ba9
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008bb9 	.word	0x08008bb9
 8008b90:	2302      	movs	r3, #2
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e01a      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e016      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e012      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008ba8:	2310      	movs	r3, #16
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e00e      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008bb0:	2320      	movs	r3, #32
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e00a      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008bb8:	2340      	movs	r3, #64	; 0x40
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bbe:	e006      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008bc0:	2380      	movs	r3, #128	; 0x80
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc6:	e002      	b.n	8008bce <UART_SetConfig+0x5a6>
 8008bc8:	2380      	movs	r3, #128	; 0x80
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a3f      	ldr	r2, [pc, #252]	; (8008cd0 <UART_SetConfig+0x6a8>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	f040 80f8 	bne.w	8008dca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	dc46      	bgt.n	8008c70 <UART_SetConfig+0x648>
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	f2c0 8082 	blt.w	8008cec <UART_SetConfig+0x6c4>
 8008be8:	3b02      	subs	r3, #2
 8008bea:	2b1e      	cmp	r3, #30
 8008bec:	d87e      	bhi.n	8008cec <UART_SetConfig+0x6c4>
 8008bee:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <UART_SetConfig+0x5cc>)
 8008bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf4:	08008c77 	.word	0x08008c77
 8008bf8:	08008ced 	.word	0x08008ced
 8008bfc:	08008c7f 	.word	0x08008c7f
 8008c00:	08008ced 	.word	0x08008ced
 8008c04:	08008ced 	.word	0x08008ced
 8008c08:	08008ced 	.word	0x08008ced
 8008c0c:	08008c8f 	.word	0x08008c8f
 8008c10:	08008ced 	.word	0x08008ced
 8008c14:	08008ced 	.word	0x08008ced
 8008c18:	08008ced 	.word	0x08008ced
 8008c1c:	08008ced 	.word	0x08008ced
 8008c20:	08008ced 	.word	0x08008ced
 8008c24:	08008ced 	.word	0x08008ced
 8008c28:	08008ced 	.word	0x08008ced
 8008c2c:	08008c9f 	.word	0x08008c9f
 8008c30:	08008ced 	.word	0x08008ced
 8008c34:	08008ced 	.word	0x08008ced
 8008c38:	08008ced 	.word	0x08008ced
 8008c3c:	08008ced 	.word	0x08008ced
 8008c40:	08008ced 	.word	0x08008ced
 8008c44:	08008ced 	.word	0x08008ced
 8008c48:	08008ced 	.word	0x08008ced
 8008c4c:	08008ced 	.word	0x08008ced
 8008c50:	08008ced 	.word	0x08008ced
 8008c54:	08008ced 	.word	0x08008ced
 8008c58:	08008ced 	.word	0x08008ced
 8008c5c:	08008ced 	.word	0x08008ced
 8008c60:	08008ced 	.word	0x08008ced
 8008c64:	08008ced 	.word	0x08008ced
 8008c68:	08008ced 	.word	0x08008ced
 8008c6c:	08008cdf 	.word	0x08008cdf
 8008c70:	2b40      	cmp	r3, #64	; 0x40
 8008c72:	d037      	beq.n	8008ce4 <UART_SetConfig+0x6bc>
 8008c74:	e03a      	b.n	8008cec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c76:	f7fe fc6b 	bl	8007550 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c7c:	e03c      	b.n	8008cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fc7a 	bl	800757c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c8c:	e034      	b.n	8008cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c8e:	f107 0318 	add.w	r3, r7, #24
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fdc6 	bl	8007824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c9c:	e02c      	b.n	8008cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c9e:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0320 	and.w	r3, r3, #32
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d016      	beq.n	8008cd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008caa:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <UART_SetConfig+0x69c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	08db      	lsrs	r3, r3, #3
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	4a07      	ldr	r2, [pc, #28]	; (8008cd4 <UART_SetConfig+0x6ac>)
 8008cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cbc:	e01c      	b.n	8008cf8 <UART_SetConfig+0x6d0>
 8008cbe:	bf00      	nop
 8008cc0:	40011400 	.word	0x40011400
 8008cc4:	58024400 	.word	0x58024400
 8008cc8:	40007800 	.word	0x40007800
 8008ccc:	40007c00 	.word	0x40007c00
 8008cd0:	58000c00 	.word	0x58000c00
 8008cd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008cd8:	4b9d      	ldr	r3, [pc, #628]	; (8008f50 <UART_SetConfig+0x928>)
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cdc:	e00c      	b.n	8008cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cde:	4b9d      	ldr	r3, [pc, #628]	; (8008f54 <UART_SetConfig+0x92c>)
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce2:	e009      	b.n	8008cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cea:	e005      	b.n	8008cf8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 81de 	beq.w	80090bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	4a94      	ldr	r2, [pc, #592]	; (8008f58 <UART_SetConfig+0x930>)
 8008d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d12:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	4413      	add	r3, r2
 8008d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d305      	bcc.n	8008d30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d903      	bls.n	8008d38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d36:	e1c1      	b.n	80090bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	60bb      	str	r3, [r7, #8]
 8008d3e:	60fa      	str	r2, [r7, #12]
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	4a84      	ldr	r2, [pc, #528]	; (8008f58 <UART_SetConfig+0x930>)
 8008d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d5a:	f7f7 ff89 	bl	8000c70 <__aeabi_uldivmod>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4610      	mov	r0, r2
 8008d64:	4619      	mov	r1, r3
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	020b      	lsls	r3, r1, #8
 8008d70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d74:	0202      	lsls	r2, r0, #8
 8008d76:	6979      	ldr	r1, [r7, #20]
 8008d78:	6849      	ldr	r1, [r1, #4]
 8008d7a:	0849      	lsrs	r1, r1, #1
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	4605      	mov	r5, r0
 8008d82:	eb12 0804 	adds.w	r8, r2, r4
 8008d86:	eb43 0905 	adc.w	r9, r3, r5
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	469a      	mov	sl, r3
 8008d92:	4693      	mov	fp, r2
 8008d94:	4652      	mov	r2, sl
 8008d96:	465b      	mov	r3, fp
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	f7f7 ff68 	bl	8000c70 <__aeabi_uldivmod>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4613      	mov	r3, r2
 8008da6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dae:	d308      	bcc.n	8008dc2 <UART_SetConfig+0x79a>
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db6:	d204      	bcs.n	8008dc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dbe:	60da      	str	r2, [r3, #12]
 8008dc0:	e17c      	b.n	80090bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008dc8:	e178      	b.n	80090bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd2:	f040 80c5 	bne.w	8008f60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008dd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	dc48      	bgt.n	8008e70 <UART_SetConfig+0x848>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	db7b      	blt.n	8008eda <UART_SetConfig+0x8b2>
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d879      	bhi.n	8008eda <UART_SetConfig+0x8b2>
 8008de6:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <UART_SetConfig+0x7c4>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e77 	.word	0x08008e77
 8008df0:	08008e7f 	.word	0x08008e7f
 8008df4:	08008edb 	.word	0x08008edb
 8008df8:	08008edb 	.word	0x08008edb
 8008dfc:	08008e87 	.word	0x08008e87
 8008e00:	08008edb 	.word	0x08008edb
 8008e04:	08008edb 	.word	0x08008edb
 8008e08:	08008edb 	.word	0x08008edb
 8008e0c:	08008e97 	.word	0x08008e97
 8008e10:	08008edb 	.word	0x08008edb
 8008e14:	08008edb 	.word	0x08008edb
 8008e18:	08008edb 	.word	0x08008edb
 8008e1c:	08008edb 	.word	0x08008edb
 8008e20:	08008edb 	.word	0x08008edb
 8008e24:	08008edb 	.word	0x08008edb
 8008e28:	08008edb 	.word	0x08008edb
 8008e2c:	08008ea7 	.word	0x08008ea7
 8008e30:	08008edb 	.word	0x08008edb
 8008e34:	08008edb 	.word	0x08008edb
 8008e38:	08008edb 	.word	0x08008edb
 8008e3c:	08008edb 	.word	0x08008edb
 8008e40:	08008edb 	.word	0x08008edb
 8008e44:	08008edb 	.word	0x08008edb
 8008e48:	08008edb 	.word	0x08008edb
 8008e4c:	08008edb 	.word	0x08008edb
 8008e50:	08008edb 	.word	0x08008edb
 8008e54:	08008edb 	.word	0x08008edb
 8008e58:	08008edb 	.word	0x08008edb
 8008e5c:	08008edb 	.word	0x08008edb
 8008e60:	08008edb 	.word	0x08008edb
 8008e64:	08008edb 	.word	0x08008edb
 8008e68:	08008edb 	.word	0x08008edb
 8008e6c:	08008ecd 	.word	0x08008ecd
 8008e70:	2b40      	cmp	r3, #64	; 0x40
 8008e72:	d02e      	beq.n	8008ed2 <UART_SetConfig+0x8aa>
 8008e74:	e031      	b.n	8008eda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e76:	f7fd f919 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8008e7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e7c:	e033      	b.n	8008ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e7e:	f7fd f92b 	bl	80060d8 <HAL_RCC_GetPCLK2Freq>
 8008e82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e84:	e02f      	b.n	8008ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fb76 	bl	800757c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e94:	e027      	b.n	8008ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e96:	f107 0318 	add.w	r3, r7, #24
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe fcc2 	bl	8007824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea4:	e01f      	b.n	8008ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea6:	4b2d      	ldr	r3, [pc, #180]	; (8008f5c <UART_SetConfig+0x934>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008eb2:	4b2a      	ldr	r3, [pc, #168]	; (8008f5c <UART_SetConfig+0x934>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	08db      	lsrs	r3, r3, #3
 8008eb8:	f003 0303 	and.w	r3, r3, #3
 8008ebc:	4a24      	ldr	r2, [pc, #144]	; (8008f50 <UART_SetConfig+0x928>)
 8008ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ec4:	e00f      	b.n	8008ee6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ec6:	4b22      	ldr	r3, [pc, #136]	; (8008f50 <UART_SetConfig+0x928>)
 8008ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eca:	e00c      	b.n	8008ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ecc:	4b21      	ldr	r3, [pc, #132]	; (8008f54 <UART_SetConfig+0x92c>)
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed0:	e009      	b.n	8008ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed8:	e005      	b.n	8008ee6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 80e7 	beq.w	80090bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	4a19      	ldr	r2, [pc, #100]	; (8008f58 <UART_SetConfig+0x930>)
 8008ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f00:	005a      	lsls	r2, r3, #1
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	085b      	lsrs	r3, r3, #1
 8008f08:	441a      	add	r2, r3
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	2b0f      	cmp	r3, #15
 8008f18:	d916      	bls.n	8008f48 <UART_SetConfig+0x920>
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f20:	d212      	bcs.n	8008f48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f023 030f 	bic.w	r3, r3, #15
 8008f2a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f44:	60da      	str	r2, [r3, #12]
 8008f46:	e0b9      	b.n	80090bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f4e:	e0b5      	b.n	80090bc <UART_SetConfig+0xa94>
 8008f50:	03d09000 	.word	0x03d09000
 8008f54:	003d0900 	.word	0x003d0900
 8008f58:	0800a9c0 	.word	0x0800a9c0
 8008f5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f64:	2b20      	cmp	r3, #32
 8008f66:	dc49      	bgt.n	8008ffc <UART_SetConfig+0x9d4>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	db7c      	blt.n	8009066 <UART_SetConfig+0xa3e>
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d87a      	bhi.n	8009066 <UART_SetConfig+0xa3e>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <UART_SetConfig+0x950>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08009003 	.word	0x08009003
 8008f7c:	0800900b 	.word	0x0800900b
 8008f80:	08009067 	.word	0x08009067
 8008f84:	08009067 	.word	0x08009067
 8008f88:	08009013 	.word	0x08009013
 8008f8c:	08009067 	.word	0x08009067
 8008f90:	08009067 	.word	0x08009067
 8008f94:	08009067 	.word	0x08009067
 8008f98:	08009023 	.word	0x08009023
 8008f9c:	08009067 	.word	0x08009067
 8008fa0:	08009067 	.word	0x08009067
 8008fa4:	08009067 	.word	0x08009067
 8008fa8:	08009067 	.word	0x08009067
 8008fac:	08009067 	.word	0x08009067
 8008fb0:	08009067 	.word	0x08009067
 8008fb4:	08009067 	.word	0x08009067
 8008fb8:	08009033 	.word	0x08009033
 8008fbc:	08009067 	.word	0x08009067
 8008fc0:	08009067 	.word	0x08009067
 8008fc4:	08009067 	.word	0x08009067
 8008fc8:	08009067 	.word	0x08009067
 8008fcc:	08009067 	.word	0x08009067
 8008fd0:	08009067 	.word	0x08009067
 8008fd4:	08009067 	.word	0x08009067
 8008fd8:	08009067 	.word	0x08009067
 8008fdc:	08009067 	.word	0x08009067
 8008fe0:	08009067 	.word	0x08009067
 8008fe4:	08009067 	.word	0x08009067
 8008fe8:	08009067 	.word	0x08009067
 8008fec:	08009067 	.word	0x08009067
 8008ff0:	08009067 	.word	0x08009067
 8008ff4:	08009067 	.word	0x08009067
 8008ff8:	08009059 	.word	0x08009059
 8008ffc:	2b40      	cmp	r3, #64	; 0x40
 8008ffe:	d02e      	beq.n	800905e <UART_SetConfig+0xa36>
 8009000:	e031      	b.n	8009066 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009002:	f7fd f853 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8009006:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009008:	e033      	b.n	8009072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800900a:	f7fd f865 	bl	80060d8 <HAL_RCC_GetPCLK2Freq>
 800900e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009010:	e02f      	b.n	8009072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe fab0 	bl	800757c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009020:	e027      	b.n	8009072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009022:	f107 0318 	add.w	r3, r7, #24
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fbfc 	bl	8007824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009030:	e01f      	b.n	8009072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009032:	4b2d      	ldr	r3, [pc, #180]	; (80090e8 <UART_SetConfig+0xac0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d009      	beq.n	8009052 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800903e:	4b2a      	ldr	r3, [pc, #168]	; (80090e8 <UART_SetConfig+0xac0>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	08db      	lsrs	r3, r3, #3
 8009044:	f003 0303 	and.w	r3, r3, #3
 8009048:	4a28      	ldr	r2, [pc, #160]	; (80090ec <UART_SetConfig+0xac4>)
 800904a:	fa22 f303 	lsr.w	r3, r2, r3
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009050:	e00f      	b.n	8009072 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009052:	4b26      	ldr	r3, [pc, #152]	; (80090ec <UART_SetConfig+0xac4>)
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009056:	e00c      	b.n	8009072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <UART_SetConfig+0xac8>)
 800905a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800905c:	e009      	b.n	8009072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800905e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009064:	e005      	b.n	8009072 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009070:	bf00      	nop
    }

    if (pclk != 0U)
 8009072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d021      	beq.n	80090bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	4a1d      	ldr	r2, [pc, #116]	; (80090f4 <UART_SetConfig+0xacc>)
 800907e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009082:	461a      	mov	r2, r3
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	fbb3 f2f2 	udiv	r2, r3, r2
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	085b      	lsrs	r3, r3, #1
 8009090:	441a      	add	r2, r3
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	fbb2 f3f3 	udiv	r3, r2, r3
 800909a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	2b0f      	cmp	r3, #15
 80090a0:	d909      	bls.n	80090b6 <UART_SetConfig+0xa8e>
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a8:	d205      	bcs.n	80090b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60da      	str	r2, [r3, #12]
 80090b4:	e002      	b.n	80090bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2201      	movs	r2, #1
 80090c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2200      	movs	r2, #0
 80090d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2200      	movs	r2, #0
 80090d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80090d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3748      	adds	r7, #72	; 0x48
 80090e0:	46bd      	mov	sp, r7
 80090e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090e6:	bf00      	nop
 80090e8:	58024400 	.word	0x58024400
 80090ec:	03d09000 	.word	0x03d09000
 80090f0:	003d0900 	.word	0x003d0900
 80090f4:	0800a9c0 	.word	0x0800a9c0

080090f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00a      	beq.n	8009122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00a      	beq.n	8009166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	f003 0308 	and.w	r3, r3, #8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00a      	beq.n	8009188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00a      	beq.n	80091aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01a      	beq.n	800920e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091f6:	d10a      	bne.n	800920e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	605a      	str	r2, [r3, #4]
  }
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b098      	sub	sp, #96	; 0x60
 8009240:	af02      	add	r7, sp, #8
 8009242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800924c:	f7f9 f9b2 	bl	80025b4 <HAL_GetTick>
 8009250:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0308 	and.w	r3, r3, #8
 800925c:	2b08      	cmp	r3, #8
 800925e:	d12f      	bne.n	80092c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009268:	2200      	movs	r2, #0
 800926a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f88e 	bl	8009390 <UART_WaitOnFlagUntilTimeout>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d022      	beq.n	80092c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	e853 3f00 	ldrex	r3, [r3]
 8009286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800928e:	653b      	str	r3, [r7, #80]	; 0x50
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	461a      	mov	r2, r3
 8009296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009298:	647b      	str	r3, [r7, #68]	; 0x44
 800929a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800929e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e6      	bne.n	800927a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e063      	b.n	8009388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0304 	and.w	r3, r3, #4
 80092ca:	2b04      	cmp	r3, #4
 80092cc:	d149      	bne.n	8009362 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092d6:	2200      	movs	r2, #0
 80092d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f857 	bl	8009390 <UART_WaitOnFlagUntilTimeout>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d03c      	beq.n	8009362 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	623b      	str	r3, [r7, #32]
   return(result);
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009306:	633b      	str	r3, [r7, #48]	; 0x30
 8009308:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800930c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	60fb      	str	r3, [r7, #12]
   return(result);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f023 0301 	bic.w	r3, r3, #1
 8009330:	64bb      	str	r3, [r7, #72]	; 0x48
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3308      	adds	r3, #8
 8009338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800933a:	61fa      	str	r2, [r7, #28]
 800933c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	69b9      	ldr	r1, [r7, #24]
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	617b      	str	r3, [r7, #20]
   return(result);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e5      	bne.n	800931a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e012      	b.n	8009388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3758      	adds	r7, #88	; 0x58
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	4613      	mov	r3, r2
 800939e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093a0:	e049      	b.n	8009436 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a8:	d045      	beq.n	8009436 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093aa:	f7f9 f903 	bl	80025b4 <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d302      	bcc.n	80093c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e048      	b.n	8009456 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d031      	beq.n	8009436 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d110      	bne.n	8009402 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2208      	movs	r2, #8
 80093e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f839 	bl	8009460 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2208      	movs	r2, #8
 80093f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e029      	b.n	8009456 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800940c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009410:	d111      	bne.n	8009436 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800941a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f81f 	bl	8009460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2220      	movs	r2, #32
 8009426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e00f      	b.n	8009456 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69da      	ldr	r2, [r3, #28]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	4013      	ands	r3, r2
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	429a      	cmp	r2, r3
 8009444:	bf0c      	ite	eq
 8009446:	2301      	moveq	r3, #1
 8009448:	2300      	movne	r3, #0
 800944a:	b2db      	uxtb	r3, r3
 800944c:	461a      	mov	r2, r3
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	429a      	cmp	r2, r3
 8009452:	d0a6      	beq.n	80093a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
	...

08009460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009460:	b480      	push	{r7}
 8009462:	b095      	sub	sp, #84	; 0x54
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800947c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009486:	643b      	str	r3, [r7, #64]	; 0x40
 8009488:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800948c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e6      	bne.n	8009468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80094aa:	69fa      	ldr	r2, [r7, #28]
 80094ac:	4b1e      	ldr	r3, [pc, #120]	; (8009528 <UART_EndRxTransfer+0xc8>)
 80094ae:	4013      	ands	r3, r2
 80094b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3308      	adds	r3, #8
 80094b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e5      	bne.n	800949a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d118      	bne.n	8009508 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f023 0310 	bic.w	r3, r3, #16
 80094ea:	647b      	str	r3, [r7, #68]	; 0x44
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f4:	61bb      	str	r3, [r7, #24]
 80094f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	6979      	ldr	r1, [r7, #20]
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	613b      	str	r3, [r7, #16]
   return(result);
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e6      	bne.n	80094d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800951c:	bf00      	nop
 800951e:	3754      	adds	r7, #84	; 0x54
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	effffffe 	.word	0xeffffffe

0800952c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_UARTEx_DisableFifoMode+0x16>
 800953e:	2302      	movs	r3, #2
 8009540:	e027      	b.n	8009592 <HAL_UARTEx_DisableFifoMode+0x66>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2224      	movs	r2, #36	; 0x24
 800954e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 0201 	bic.w	r2, r2, #1
 8009568:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009570:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2220      	movs	r2, #32
 8009584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e02d      	b.n	8009612 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2224      	movs	r2, #36	; 0x24
 80095c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0201 	bic.w	r2, r2, #1
 80095dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f850 	bl	8009698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2220      	movs	r2, #32
 8009604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800962a:	2b01      	cmp	r3, #1
 800962c:	d101      	bne.n	8009632 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800962e:	2302      	movs	r3, #2
 8009630:	e02d      	b.n	800968e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2224      	movs	r2, #36	; 0x24
 800963e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0201 	bic.w	r2, r2, #1
 8009658:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f812 	bl	8009698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2220      	movs	r2, #32
 8009680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d108      	bne.n	80096ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096b8:	e031      	b.n	800971e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096ba:	2310      	movs	r3, #16
 80096bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096be:	2310      	movs	r3, #16
 80096c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	0e5b      	lsrs	r3, r3, #25
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	f003 0307 	and.w	r3, r3, #7
 80096d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	0f5b      	lsrs	r3, r3, #29
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	f003 0307 	and.w	r3, r3, #7
 80096e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	7b3a      	ldrb	r2, [r7, #12]
 80096e6:	4911      	ldr	r1, [pc, #68]	; (800972c <UARTEx_SetNbDataToProcess+0x94>)
 80096e8:	5c8a      	ldrb	r2, [r1, r2]
 80096ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096ee:	7b3a      	ldrb	r2, [r7, #12]
 80096f0:	490f      	ldr	r1, [pc, #60]	; (8009730 <UARTEx_SetNbDataToProcess+0x98>)
 80096f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	7b7a      	ldrb	r2, [r7, #13]
 8009704:	4909      	ldr	r1, [pc, #36]	; (800972c <UARTEx_SetNbDataToProcess+0x94>)
 8009706:	5c8a      	ldrb	r2, [r1, r2]
 8009708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800970c:	7b7a      	ldrb	r2, [r7, #13]
 800970e:	4908      	ldr	r1, [pc, #32]	; (8009730 <UARTEx_SetNbDataToProcess+0x98>)
 8009710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009712:	fb93 f3f2 	sdiv	r3, r3, r2
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800971e:	bf00      	nop
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	0800a9d8 	.word	0x0800a9d8
 8009730:	0800a9e0 	.word	0x0800a9e0

08009734 <__errno>:
 8009734:	4b01      	ldr	r3, [pc, #4]	; (800973c <__errno+0x8>)
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	2000003c 	.word	0x2000003c

08009740 <__libc_init_array>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	4d0d      	ldr	r5, [pc, #52]	; (8009778 <__libc_init_array+0x38>)
 8009744:	4c0d      	ldr	r4, [pc, #52]	; (800977c <__libc_init_array+0x3c>)
 8009746:	1b64      	subs	r4, r4, r5
 8009748:	10a4      	asrs	r4, r4, #2
 800974a:	2600      	movs	r6, #0
 800974c:	42a6      	cmp	r6, r4
 800974e:	d109      	bne.n	8009764 <__libc_init_array+0x24>
 8009750:	4d0b      	ldr	r5, [pc, #44]	; (8009780 <__libc_init_array+0x40>)
 8009752:	4c0c      	ldr	r4, [pc, #48]	; (8009784 <__libc_init_array+0x44>)
 8009754:	f001 f832 	bl	800a7bc <_init>
 8009758:	1b64      	subs	r4, r4, r5
 800975a:	10a4      	asrs	r4, r4, #2
 800975c:	2600      	movs	r6, #0
 800975e:	42a6      	cmp	r6, r4
 8009760:	d105      	bne.n	800976e <__libc_init_array+0x2e>
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	f855 3b04 	ldr.w	r3, [r5], #4
 8009768:	4798      	blx	r3
 800976a:	3601      	adds	r6, #1
 800976c:	e7ee      	b.n	800974c <__libc_init_array+0xc>
 800976e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009772:	4798      	blx	r3
 8009774:	3601      	adds	r6, #1
 8009776:	e7f2      	b.n	800975e <__libc_init_array+0x1e>
 8009778:	0800aa88 	.word	0x0800aa88
 800977c:	0800aa88 	.word	0x0800aa88
 8009780:	0800aa88 	.word	0x0800aa88
 8009784:	0800aa8c 	.word	0x0800aa8c

08009788 <memcpy>:
 8009788:	440a      	add	r2, r1
 800978a:	4291      	cmp	r1, r2
 800978c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009790:	d100      	bne.n	8009794 <memcpy+0xc>
 8009792:	4770      	bx	lr
 8009794:	b510      	push	{r4, lr}
 8009796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800979a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800979e:	4291      	cmp	r1, r2
 80097a0:	d1f9      	bne.n	8009796 <memcpy+0xe>
 80097a2:	bd10      	pop	{r4, pc}

080097a4 <memset>:
 80097a4:	4402      	add	r2, r0
 80097a6:	4603      	mov	r3, r0
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d100      	bne.n	80097ae <memset+0xa>
 80097ac:	4770      	bx	lr
 80097ae:	f803 1b01 	strb.w	r1, [r3], #1
 80097b2:	e7f9      	b.n	80097a8 <memset+0x4>

080097b4 <iprintf>:
 80097b4:	b40f      	push	{r0, r1, r2, r3}
 80097b6:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <iprintf+0x2c>)
 80097b8:	b513      	push	{r0, r1, r4, lr}
 80097ba:	681c      	ldr	r4, [r3, #0]
 80097bc:	b124      	cbz	r4, 80097c8 <iprintf+0x14>
 80097be:	69a3      	ldr	r3, [r4, #24]
 80097c0:	b913      	cbnz	r3, 80097c8 <iprintf+0x14>
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fa5e 	bl	8009c84 <__sinit>
 80097c8:	ab05      	add	r3, sp, #20
 80097ca:	9a04      	ldr	r2, [sp, #16]
 80097cc:	68a1      	ldr	r1, [r4, #8]
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	4620      	mov	r0, r4
 80097d2:	f000 fc67 	bl	800a0a4 <_vfiprintf_r>
 80097d6:	b002      	add	sp, #8
 80097d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097dc:	b004      	add	sp, #16
 80097de:	4770      	bx	lr
 80097e0:	2000003c 	.word	0x2000003c

080097e4 <_puts_r>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	460e      	mov	r6, r1
 80097e8:	4605      	mov	r5, r0
 80097ea:	b118      	cbz	r0, 80097f4 <_puts_r+0x10>
 80097ec:	6983      	ldr	r3, [r0, #24]
 80097ee:	b90b      	cbnz	r3, 80097f4 <_puts_r+0x10>
 80097f0:	f000 fa48 	bl	8009c84 <__sinit>
 80097f4:	69ab      	ldr	r3, [r5, #24]
 80097f6:	68ac      	ldr	r4, [r5, #8]
 80097f8:	b913      	cbnz	r3, 8009800 <_puts_r+0x1c>
 80097fa:	4628      	mov	r0, r5
 80097fc:	f000 fa42 	bl	8009c84 <__sinit>
 8009800:	4b2c      	ldr	r3, [pc, #176]	; (80098b4 <_puts_r+0xd0>)
 8009802:	429c      	cmp	r4, r3
 8009804:	d120      	bne.n	8009848 <_puts_r+0x64>
 8009806:	686c      	ldr	r4, [r5, #4]
 8009808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800980a:	07db      	lsls	r3, r3, #31
 800980c:	d405      	bmi.n	800981a <_puts_r+0x36>
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	0598      	lsls	r0, r3, #22
 8009812:	d402      	bmi.n	800981a <_puts_r+0x36>
 8009814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009816:	f000 fad3 	bl	8009dc0 <__retarget_lock_acquire_recursive>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	0719      	lsls	r1, r3, #28
 800981e:	d51d      	bpl.n	800985c <_puts_r+0x78>
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	b1db      	cbz	r3, 800985c <_puts_r+0x78>
 8009824:	3e01      	subs	r6, #1
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800982c:	3b01      	subs	r3, #1
 800982e:	60a3      	str	r3, [r4, #8]
 8009830:	bb39      	cbnz	r1, 8009882 <_puts_r+0x9e>
 8009832:	2b00      	cmp	r3, #0
 8009834:	da38      	bge.n	80098a8 <_puts_r+0xc4>
 8009836:	4622      	mov	r2, r4
 8009838:	210a      	movs	r1, #10
 800983a:	4628      	mov	r0, r5
 800983c:	f000 f848 	bl	80098d0 <__swbuf_r>
 8009840:	3001      	adds	r0, #1
 8009842:	d011      	beq.n	8009868 <_puts_r+0x84>
 8009844:	250a      	movs	r5, #10
 8009846:	e011      	b.n	800986c <_puts_r+0x88>
 8009848:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <_puts_r+0xd4>)
 800984a:	429c      	cmp	r4, r3
 800984c:	d101      	bne.n	8009852 <_puts_r+0x6e>
 800984e:	68ac      	ldr	r4, [r5, #8]
 8009850:	e7da      	b.n	8009808 <_puts_r+0x24>
 8009852:	4b1a      	ldr	r3, [pc, #104]	; (80098bc <_puts_r+0xd8>)
 8009854:	429c      	cmp	r4, r3
 8009856:	bf08      	it	eq
 8009858:	68ec      	ldreq	r4, [r5, #12]
 800985a:	e7d5      	b.n	8009808 <_puts_r+0x24>
 800985c:	4621      	mov	r1, r4
 800985e:	4628      	mov	r0, r5
 8009860:	f000 f888 	bl	8009974 <__swsetup_r>
 8009864:	2800      	cmp	r0, #0
 8009866:	d0dd      	beq.n	8009824 <_puts_r+0x40>
 8009868:	f04f 35ff 	mov.w	r5, #4294967295
 800986c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800986e:	07da      	lsls	r2, r3, #31
 8009870:	d405      	bmi.n	800987e <_puts_r+0x9a>
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	059b      	lsls	r3, r3, #22
 8009876:	d402      	bmi.n	800987e <_puts_r+0x9a>
 8009878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800987a:	f000 faa2 	bl	8009dc2 <__retarget_lock_release_recursive>
 800987e:	4628      	mov	r0, r5
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	2b00      	cmp	r3, #0
 8009884:	da04      	bge.n	8009890 <_puts_r+0xac>
 8009886:	69a2      	ldr	r2, [r4, #24]
 8009888:	429a      	cmp	r2, r3
 800988a:	dc06      	bgt.n	800989a <_puts_r+0xb6>
 800988c:	290a      	cmp	r1, #10
 800988e:	d004      	beq.n	800989a <_puts_r+0xb6>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	7019      	strb	r1, [r3, #0]
 8009898:	e7c5      	b.n	8009826 <_puts_r+0x42>
 800989a:	4622      	mov	r2, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f000 f817 	bl	80098d0 <__swbuf_r>
 80098a2:	3001      	adds	r0, #1
 80098a4:	d1bf      	bne.n	8009826 <_puts_r+0x42>
 80098a6:	e7df      	b.n	8009868 <_puts_r+0x84>
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	250a      	movs	r5, #10
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	701d      	strb	r5, [r3, #0]
 80098b2:	e7db      	b.n	800986c <_puts_r+0x88>
 80098b4:	0800aa0c 	.word	0x0800aa0c
 80098b8:	0800aa2c 	.word	0x0800aa2c
 80098bc:	0800a9ec 	.word	0x0800a9ec

080098c0 <puts>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <puts+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f7ff bf8d 	b.w	80097e4 <_puts_r>
 80098ca:	bf00      	nop
 80098cc:	2000003c 	.word	0x2000003c

080098d0 <__swbuf_r>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	460e      	mov	r6, r1
 80098d4:	4614      	mov	r4, r2
 80098d6:	4605      	mov	r5, r0
 80098d8:	b118      	cbz	r0, 80098e2 <__swbuf_r+0x12>
 80098da:	6983      	ldr	r3, [r0, #24]
 80098dc:	b90b      	cbnz	r3, 80098e2 <__swbuf_r+0x12>
 80098de:	f000 f9d1 	bl	8009c84 <__sinit>
 80098e2:	4b21      	ldr	r3, [pc, #132]	; (8009968 <__swbuf_r+0x98>)
 80098e4:	429c      	cmp	r4, r3
 80098e6:	d12b      	bne.n	8009940 <__swbuf_r+0x70>
 80098e8:	686c      	ldr	r4, [r5, #4]
 80098ea:	69a3      	ldr	r3, [r4, #24]
 80098ec:	60a3      	str	r3, [r4, #8]
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	071a      	lsls	r2, r3, #28
 80098f2:	d52f      	bpl.n	8009954 <__swbuf_r+0x84>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	b36b      	cbz	r3, 8009954 <__swbuf_r+0x84>
 80098f8:	6923      	ldr	r3, [r4, #16]
 80098fa:	6820      	ldr	r0, [r4, #0]
 80098fc:	1ac0      	subs	r0, r0, r3
 80098fe:	6963      	ldr	r3, [r4, #20]
 8009900:	b2f6      	uxtb	r6, r6
 8009902:	4283      	cmp	r3, r0
 8009904:	4637      	mov	r7, r6
 8009906:	dc04      	bgt.n	8009912 <__swbuf_r+0x42>
 8009908:	4621      	mov	r1, r4
 800990a:	4628      	mov	r0, r5
 800990c:	f000 f926 	bl	8009b5c <_fflush_r>
 8009910:	bb30      	cbnz	r0, 8009960 <__swbuf_r+0x90>
 8009912:	68a3      	ldr	r3, [r4, #8]
 8009914:	3b01      	subs	r3, #1
 8009916:	60a3      	str	r3, [r4, #8]
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	6022      	str	r2, [r4, #0]
 800991e:	701e      	strb	r6, [r3, #0]
 8009920:	6963      	ldr	r3, [r4, #20]
 8009922:	3001      	adds	r0, #1
 8009924:	4283      	cmp	r3, r0
 8009926:	d004      	beq.n	8009932 <__swbuf_r+0x62>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	07db      	lsls	r3, r3, #31
 800992c:	d506      	bpl.n	800993c <__swbuf_r+0x6c>
 800992e:	2e0a      	cmp	r6, #10
 8009930:	d104      	bne.n	800993c <__swbuf_r+0x6c>
 8009932:	4621      	mov	r1, r4
 8009934:	4628      	mov	r0, r5
 8009936:	f000 f911 	bl	8009b5c <_fflush_r>
 800993a:	b988      	cbnz	r0, 8009960 <__swbuf_r+0x90>
 800993c:	4638      	mov	r0, r7
 800993e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <__swbuf_r+0x9c>)
 8009942:	429c      	cmp	r4, r3
 8009944:	d101      	bne.n	800994a <__swbuf_r+0x7a>
 8009946:	68ac      	ldr	r4, [r5, #8]
 8009948:	e7cf      	b.n	80098ea <__swbuf_r+0x1a>
 800994a:	4b09      	ldr	r3, [pc, #36]	; (8009970 <__swbuf_r+0xa0>)
 800994c:	429c      	cmp	r4, r3
 800994e:	bf08      	it	eq
 8009950:	68ec      	ldreq	r4, [r5, #12]
 8009952:	e7ca      	b.n	80098ea <__swbuf_r+0x1a>
 8009954:	4621      	mov	r1, r4
 8009956:	4628      	mov	r0, r5
 8009958:	f000 f80c 	bl	8009974 <__swsetup_r>
 800995c:	2800      	cmp	r0, #0
 800995e:	d0cb      	beq.n	80098f8 <__swbuf_r+0x28>
 8009960:	f04f 37ff 	mov.w	r7, #4294967295
 8009964:	e7ea      	b.n	800993c <__swbuf_r+0x6c>
 8009966:	bf00      	nop
 8009968:	0800aa0c 	.word	0x0800aa0c
 800996c:	0800aa2c 	.word	0x0800aa2c
 8009970:	0800a9ec 	.word	0x0800a9ec

08009974 <__swsetup_r>:
 8009974:	4b32      	ldr	r3, [pc, #200]	; (8009a40 <__swsetup_r+0xcc>)
 8009976:	b570      	push	{r4, r5, r6, lr}
 8009978:	681d      	ldr	r5, [r3, #0]
 800997a:	4606      	mov	r6, r0
 800997c:	460c      	mov	r4, r1
 800997e:	b125      	cbz	r5, 800998a <__swsetup_r+0x16>
 8009980:	69ab      	ldr	r3, [r5, #24]
 8009982:	b913      	cbnz	r3, 800998a <__swsetup_r+0x16>
 8009984:	4628      	mov	r0, r5
 8009986:	f000 f97d 	bl	8009c84 <__sinit>
 800998a:	4b2e      	ldr	r3, [pc, #184]	; (8009a44 <__swsetup_r+0xd0>)
 800998c:	429c      	cmp	r4, r3
 800998e:	d10f      	bne.n	80099b0 <__swsetup_r+0x3c>
 8009990:	686c      	ldr	r4, [r5, #4]
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009998:	0719      	lsls	r1, r3, #28
 800999a:	d42c      	bmi.n	80099f6 <__swsetup_r+0x82>
 800999c:	06dd      	lsls	r5, r3, #27
 800999e:	d411      	bmi.n	80099c4 <__swsetup_r+0x50>
 80099a0:	2309      	movs	r3, #9
 80099a2:	6033      	str	r3, [r6, #0]
 80099a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	f04f 30ff 	mov.w	r0, #4294967295
 80099ae:	e03e      	b.n	8009a2e <__swsetup_r+0xba>
 80099b0:	4b25      	ldr	r3, [pc, #148]	; (8009a48 <__swsetup_r+0xd4>)
 80099b2:	429c      	cmp	r4, r3
 80099b4:	d101      	bne.n	80099ba <__swsetup_r+0x46>
 80099b6:	68ac      	ldr	r4, [r5, #8]
 80099b8:	e7eb      	b.n	8009992 <__swsetup_r+0x1e>
 80099ba:	4b24      	ldr	r3, [pc, #144]	; (8009a4c <__swsetup_r+0xd8>)
 80099bc:	429c      	cmp	r4, r3
 80099be:	bf08      	it	eq
 80099c0:	68ec      	ldreq	r4, [r5, #12]
 80099c2:	e7e6      	b.n	8009992 <__swsetup_r+0x1e>
 80099c4:	0758      	lsls	r0, r3, #29
 80099c6:	d512      	bpl.n	80099ee <__swsetup_r+0x7a>
 80099c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ca:	b141      	cbz	r1, 80099de <__swsetup_r+0x6a>
 80099cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099d0:	4299      	cmp	r1, r3
 80099d2:	d002      	beq.n	80099da <__swsetup_r+0x66>
 80099d4:	4630      	mov	r0, r6
 80099d6:	f000 fa5b 	bl	8009e90 <_free_r>
 80099da:	2300      	movs	r3, #0
 80099dc:	6363      	str	r3, [r4, #52]	; 0x34
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	2300      	movs	r3, #0
 80099e8:	6063      	str	r3, [r4, #4]
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	f043 0308 	orr.w	r3, r3, #8
 80099f4:	81a3      	strh	r3, [r4, #12]
 80099f6:	6923      	ldr	r3, [r4, #16]
 80099f8:	b94b      	cbnz	r3, 8009a0e <__swsetup_r+0x9a>
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a04:	d003      	beq.n	8009a0e <__swsetup_r+0x9a>
 8009a06:	4621      	mov	r1, r4
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f000 fa01 	bl	8009e10 <__smakebuf_r>
 8009a0e:	89a0      	ldrh	r0, [r4, #12]
 8009a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a14:	f010 0301 	ands.w	r3, r0, #1
 8009a18:	d00a      	beq.n	8009a30 <__swsetup_r+0xbc>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60a3      	str	r3, [r4, #8]
 8009a1e:	6963      	ldr	r3, [r4, #20]
 8009a20:	425b      	negs	r3, r3
 8009a22:	61a3      	str	r3, [r4, #24]
 8009a24:	6923      	ldr	r3, [r4, #16]
 8009a26:	b943      	cbnz	r3, 8009a3a <__swsetup_r+0xc6>
 8009a28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a2c:	d1ba      	bne.n	80099a4 <__swsetup_r+0x30>
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
 8009a30:	0781      	lsls	r1, r0, #30
 8009a32:	bf58      	it	pl
 8009a34:	6963      	ldrpl	r3, [r4, #20]
 8009a36:	60a3      	str	r3, [r4, #8]
 8009a38:	e7f4      	b.n	8009a24 <__swsetup_r+0xb0>
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	e7f7      	b.n	8009a2e <__swsetup_r+0xba>
 8009a3e:	bf00      	nop
 8009a40:	2000003c 	.word	0x2000003c
 8009a44:	0800aa0c 	.word	0x0800aa0c
 8009a48:	0800aa2c 	.word	0x0800aa2c
 8009a4c:	0800a9ec 	.word	0x0800a9ec

08009a50 <__sflush_r>:
 8009a50:	898a      	ldrh	r2, [r1, #12]
 8009a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a56:	4605      	mov	r5, r0
 8009a58:	0710      	lsls	r0, r2, #28
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	d458      	bmi.n	8009b10 <__sflush_r+0xc0>
 8009a5e:	684b      	ldr	r3, [r1, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	dc05      	bgt.n	8009a70 <__sflush_r+0x20>
 8009a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	dc02      	bgt.n	8009a70 <__sflush_r+0x20>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	d0f9      	beq.n	8009a6a <__sflush_r+0x1a>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a7c:	682f      	ldr	r7, [r5, #0]
 8009a7e:	602b      	str	r3, [r5, #0]
 8009a80:	d032      	beq.n	8009ae8 <__sflush_r+0x98>
 8009a82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	075a      	lsls	r2, r3, #29
 8009a88:	d505      	bpl.n	8009a96 <__sflush_r+0x46>
 8009a8a:	6863      	ldr	r3, [r4, #4]
 8009a8c:	1ac0      	subs	r0, r0, r3
 8009a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a90:	b10b      	cbz	r3, 8009a96 <__sflush_r+0x46>
 8009a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a94:	1ac0      	subs	r0, r0, r3
 8009a96:	2300      	movs	r3, #0
 8009a98:	4602      	mov	r2, r0
 8009a9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a9c:	6a21      	ldr	r1, [r4, #32]
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b0      	blx	r6
 8009aa2:	1c43      	adds	r3, r0, #1
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	d106      	bne.n	8009ab6 <__sflush_r+0x66>
 8009aa8:	6829      	ldr	r1, [r5, #0]
 8009aaa:	291d      	cmp	r1, #29
 8009aac:	d82c      	bhi.n	8009b08 <__sflush_r+0xb8>
 8009aae:	4a2a      	ldr	r2, [pc, #168]	; (8009b58 <__sflush_r+0x108>)
 8009ab0:	40ca      	lsrs	r2, r1
 8009ab2:	07d6      	lsls	r6, r2, #31
 8009ab4:	d528      	bpl.n	8009b08 <__sflush_r+0xb8>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	6062      	str	r2, [r4, #4]
 8009aba:	04d9      	lsls	r1, r3, #19
 8009abc:	6922      	ldr	r2, [r4, #16]
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	d504      	bpl.n	8009acc <__sflush_r+0x7c>
 8009ac2:	1c42      	adds	r2, r0, #1
 8009ac4:	d101      	bne.n	8009aca <__sflush_r+0x7a>
 8009ac6:	682b      	ldr	r3, [r5, #0]
 8009ac8:	b903      	cbnz	r3, 8009acc <__sflush_r+0x7c>
 8009aca:	6560      	str	r0, [r4, #84]	; 0x54
 8009acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ace:	602f      	str	r7, [r5, #0]
 8009ad0:	2900      	cmp	r1, #0
 8009ad2:	d0ca      	beq.n	8009a6a <__sflush_r+0x1a>
 8009ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	d002      	beq.n	8009ae2 <__sflush_r+0x92>
 8009adc:	4628      	mov	r0, r5
 8009ade:	f000 f9d7 	bl	8009e90 <_free_r>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ae6:	e7c1      	b.n	8009a6c <__sflush_r+0x1c>
 8009ae8:	6a21      	ldr	r1, [r4, #32]
 8009aea:	2301      	movs	r3, #1
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b0      	blx	r6
 8009af0:	1c41      	adds	r1, r0, #1
 8009af2:	d1c7      	bne.n	8009a84 <__sflush_r+0x34>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0c4      	beq.n	8009a84 <__sflush_r+0x34>
 8009afa:	2b1d      	cmp	r3, #29
 8009afc:	d001      	beq.n	8009b02 <__sflush_r+0xb2>
 8009afe:	2b16      	cmp	r3, #22
 8009b00:	d101      	bne.n	8009b06 <__sflush_r+0xb6>
 8009b02:	602f      	str	r7, [r5, #0]
 8009b04:	e7b1      	b.n	8009a6a <__sflush_r+0x1a>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b0c:	81a3      	strh	r3, [r4, #12]
 8009b0e:	e7ad      	b.n	8009a6c <__sflush_r+0x1c>
 8009b10:	690f      	ldr	r7, [r1, #16]
 8009b12:	2f00      	cmp	r7, #0
 8009b14:	d0a9      	beq.n	8009a6a <__sflush_r+0x1a>
 8009b16:	0793      	lsls	r3, r2, #30
 8009b18:	680e      	ldr	r6, [r1, #0]
 8009b1a:	bf08      	it	eq
 8009b1c:	694b      	ldreq	r3, [r1, #20]
 8009b1e:	600f      	str	r7, [r1, #0]
 8009b20:	bf18      	it	ne
 8009b22:	2300      	movne	r3, #0
 8009b24:	eba6 0807 	sub.w	r8, r6, r7
 8009b28:	608b      	str	r3, [r1, #8]
 8009b2a:	f1b8 0f00 	cmp.w	r8, #0
 8009b2e:	dd9c      	ble.n	8009a6a <__sflush_r+0x1a>
 8009b30:	6a21      	ldr	r1, [r4, #32]
 8009b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b34:	4643      	mov	r3, r8
 8009b36:	463a      	mov	r2, r7
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b0      	blx	r6
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	dc06      	bgt.n	8009b4e <__sflush_r+0xfe>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4c:	e78e      	b.n	8009a6c <__sflush_r+0x1c>
 8009b4e:	4407      	add	r7, r0
 8009b50:	eba8 0800 	sub.w	r8, r8, r0
 8009b54:	e7e9      	b.n	8009b2a <__sflush_r+0xda>
 8009b56:	bf00      	nop
 8009b58:	20400001 	.word	0x20400001

08009b5c <_fflush_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	690b      	ldr	r3, [r1, #16]
 8009b60:	4605      	mov	r5, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	b913      	cbnz	r3, 8009b6c <_fflush_r+0x10>
 8009b66:	2500      	movs	r5, #0
 8009b68:	4628      	mov	r0, r5
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	b118      	cbz	r0, 8009b76 <_fflush_r+0x1a>
 8009b6e:	6983      	ldr	r3, [r0, #24]
 8009b70:	b90b      	cbnz	r3, 8009b76 <_fflush_r+0x1a>
 8009b72:	f000 f887 	bl	8009c84 <__sinit>
 8009b76:	4b14      	ldr	r3, [pc, #80]	; (8009bc8 <_fflush_r+0x6c>)
 8009b78:	429c      	cmp	r4, r3
 8009b7a:	d11b      	bne.n	8009bb4 <_fflush_r+0x58>
 8009b7c:	686c      	ldr	r4, [r5, #4]
 8009b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0ef      	beq.n	8009b66 <_fflush_r+0xa>
 8009b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b88:	07d0      	lsls	r0, r2, #31
 8009b8a:	d404      	bmi.n	8009b96 <_fflush_r+0x3a>
 8009b8c:	0599      	lsls	r1, r3, #22
 8009b8e:	d402      	bmi.n	8009b96 <_fflush_r+0x3a>
 8009b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b92:	f000 f915 	bl	8009dc0 <__retarget_lock_acquire_recursive>
 8009b96:	4628      	mov	r0, r5
 8009b98:	4621      	mov	r1, r4
 8009b9a:	f7ff ff59 	bl	8009a50 <__sflush_r>
 8009b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ba0:	07da      	lsls	r2, r3, #31
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	d4e0      	bmi.n	8009b68 <_fflush_r+0xc>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	059b      	lsls	r3, r3, #22
 8009baa:	d4dd      	bmi.n	8009b68 <_fflush_r+0xc>
 8009bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bae:	f000 f908 	bl	8009dc2 <__retarget_lock_release_recursive>
 8009bb2:	e7d9      	b.n	8009b68 <_fflush_r+0xc>
 8009bb4:	4b05      	ldr	r3, [pc, #20]	; (8009bcc <_fflush_r+0x70>)
 8009bb6:	429c      	cmp	r4, r3
 8009bb8:	d101      	bne.n	8009bbe <_fflush_r+0x62>
 8009bba:	68ac      	ldr	r4, [r5, #8]
 8009bbc:	e7df      	b.n	8009b7e <_fflush_r+0x22>
 8009bbe:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <_fflush_r+0x74>)
 8009bc0:	429c      	cmp	r4, r3
 8009bc2:	bf08      	it	eq
 8009bc4:	68ec      	ldreq	r4, [r5, #12]
 8009bc6:	e7da      	b.n	8009b7e <_fflush_r+0x22>
 8009bc8:	0800aa0c 	.word	0x0800aa0c
 8009bcc:	0800aa2c 	.word	0x0800aa2c
 8009bd0:	0800a9ec 	.word	0x0800a9ec

08009bd4 <std>:
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	4604      	mov	r4, r0
 8009bda:	e9c0 3300 	strd	r3, r3, [r0]
 8009bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009be2:	6083      	str	r3, [r0, #8]
 8009be4:	8181      	strh	r1, [r0, #12]
 8009be6:	6643      	str	r3, [r0, #100]	; 0x64
 8009be8:	81c2      	strh	r2, [r0, #14]
 8009bea:	6183      	str	r3, [r0, #24]
 8009bec:	4619      	mov	r1, r3
 8009bee:	2208      	movs	r2, #8
 8009bf0:	305c      	adds	r0, #92	; 0x5c
 8009bf2:	f7ff fdd7 	bl	80097a4 <memset>
 8009bf6:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <std+0x38>)
 8009bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8009bfa:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <std+0x3c>)
 8009bfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bfe:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <std+0x40>)
 8009c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c02:	4b05      	ldr	r3, [pc, #20]	; (8009c18 <std+0x44>)
 8009c04:	6224      	str	r4, [r4, #32]
 8009c06:	6323      	str	r3, [r4, #48]	; 0x30
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	bf00      	nop
 8009c0c:	0800a64d 	.word	0x0800a64d
 8009c10:	0800a66f 	.word	0x0800a66f
 8009c14:	0800a6a7 	.word	0x0800a6a7
 8009c18:	0800a6cb 	.word	0x0800a6cb

08009c1c <_cleanup_r>:
 8009c1c:	4901      	ldr	r1, [pc, #4]	; (8009c24 <_cleanup_r+0x8>)
 8009c1e:	f000 b8af 	b.w	8009d80 <_fwalk_reent>
 8009c22:	bf00      	nop
 8009c24:	08009b5d 	.word	0x08009b5d

08009c28 <__sfmoreglue>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	2268      	movs	r2, #104	; 0x68
 8009c2c:	1e4d      	subs	r5, r1, #1
 8009c2e:	4355      	muls	r5, r2
 8009c30:	460e      	mov	r6, r1
 8009c32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c36:	f000 f997 	bl	8009f68 <_malloc_r>
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	b140      	cbz	r0, 8009c50 <__sfmoreglue+0x28>
 8009c3e:	2100      	movs	r1, #0
 8009c40:	e9c0 1600 	strd	r1, r6, [r0]
 8009c44:	300c      	adds	r0, #12
 8009c46:	60a0      	str	r0, [r4, #8]
 8009c48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c4c:	f7ff fdaa 	bl	80097a4 <memset>
 8009c50:	4620      	mov	r0, r4
 8009c52:	bd70      	pop	{r4, r5, r6, pc}

08009c54 <__sfp_lock_acquire>:
 8009c54:	4801      	ldr	r0, [pc, #4]	; (8009c5c <__sfp_lock_acquire+0x8>)
 8009c56:	f000 b8b3 	b.w	8009dc0 <__retarget_lock_acquire_recursive>
 8009c5a:	bf00      	nop
 8009c5c:	20000329 	.word	0x20000329

08009c60 <__sfp_lock_release>:
 8009c60:	4801      	ldr	r0, [pc, #4]	; (8009c68 <__sfp_lock_release+0x8>)
 8009c62:	f000 b8ae 	b.w	8009dc2 <__retarget_lock_release_recursive>
 8009c66:	bf00      	nop
 8009c68:	20000329 	.word	0x20000329

08009c6c <__sinit_lock_acquire>:
 8009c6c:	4801      	ldr	r0, [pc, #4]	; (8009c74 <__sinit_lock_acquire+0x8>)
 8009c6e:	f000 b8a7 	b.w	8009dc0 <__retarget_lock_acquire_recursive>
 8009c72:	bf00      	nop
 8009c74:	2000032a 	.word	0x2000032a

08009c78 <__sinit_lock_release>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__sinit_lock_release+0x8>)
 8009c7a:	f000 b8a2 	b.w	8009dc2 <__retarget_lock_release_recursive>
 8009c7e:	bf00      	nop
 8009c80:	2000032a 	.word	0x2000032a

08009c84 <__sinit>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	4604      	mov	r4, r0
 8009c88:	f7ff fff0 	bl	8009c6c <__sinit_lock_acquire>
 8009c8c:	69a3      	ldr	r3, [r4, #24]
 8009c8e:	b11b      	cbz	r3, 8009c98 <__sinit+0x14>
 8009c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c94:	f7ff bff0 	b.w	8009c78 <__sinit_lock_release>
 8009c98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c9c:	6523      	str	r3, [r4, #80]	; 0x50
 8009c9e:	4b13      	ldr	r3, [pc, #76]	; (8009cec <__sinit+0x68>)
 8009ca0:	4a13      	ldr	r2, [pc, #76]	; (8009cf0 <__sinit+0x6c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ca6:	42a3      	cmp	r3, r4
 8009ca8:	bf04      	itt	eq
 8009caa:	2301      	moveq	r3, #1
 8009cac:	61a3      	streq	r3, [r4, #24]
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 f820 	bl	8009cf4 <__sfp>
 8009cb4:	6060      	str	r0, [r4, #4]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 f81c 	bl	8009cf4 <__sfp>
 8009cbc:	60a0      	str	r0, [r4, #8]
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 f818 	bl	8009cf4 <__sfp>
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	60e0      	str	r0, [r4, #12]
 8009cc8:	2104      	movs	r1, #4
 8009cca:	6860      	ldr	r0, [r4, #4]
 8009ccc:	f7ff ff82 	bl	8009bd4 <std>
 8009cd0:	68a0      	ldr	r0, [r4, #8]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	2109      	movs	r1, #9
 8009cd6:	f7ff ff7d 	bl	8009bd4 <std>
 8009cda:	68e0      	ldr	r0, [r4, #12]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	2112      	movs	r1, #18
 8009ce0:	f7ff ff78 	bl	8009bd4 <std>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	61a3      	str	r3, [r4, #24]
 8009ce8:	e7d2      	b.n	8009c90 <__sinit+0xc>
 8009cea:	bf00      	nop
 8009cec:	0800a9e8 	.word	0x0800a9e8
 8009cf0:	08009c1d 	.word	0x08009c1d

08009cf4 <__sfp>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	f7ff ffac 	bl	8009c54 <__sfp_lock_acquire>
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <__sfp+0x84>)
 8009cfe:	681e      	ldr	r6, [r3, #0]
 8009d00:	69b3      	ldr	r3, [r6, #24]
 8009d02:	b913      	cbnz	r3, 8009d0a <__sfp+0x16>
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff ffbd 	bl	8009c84 <__sinit>
 8009d0a:	3648      	adds	r6, #72	; 0x48
 8009d0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	d503      	bpl.n	8009d1c <__sfp+0x28>
 8009d14:	6833      	ldr	r3, [r6, #0]
 8009d16:	b30b      	cbz	r3, 8009d5c <__sfp+0x68>
 8009d18:	6836      	ldr	r6, [r6, #0]
 8009d1a:	e7f7      	b.n	8009d0c <__sfp+0x18>
 8009d1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d20:	b9d5      	cbnz	r5, 8009d58 <__sfp+0x64>
 8009d22:	4b16      	ldr	r3, [pc, #88]	; (8009d7c <__sfp+0x88>)
 8009d24:	60e3      	str	r3, [r4, #12]
 8009d26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d2a:	6665      	str	r5, [r4, #100]	; 0x64
 8009d2c:	f000 f847 	bl	8009dbe <__retarget_lock_init_recursive>
 8009d30:	f7ff ff96 	bl	8009c60 <__sfp_lock_release>
 8009d34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d3c:	6025      	str	r5, [r4, #0]
 8009d3e:	61a5      	str	r5, [r4, #24]
 8009d40:	2208      	movs	r2, #8
 8009d42:	4629      	mov	r1, r5
 8009d44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d48:	f7ff fd2c 	bl	80097a4 <memset>
 8009d4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d54:	4620      	mov	r0, r4
 8009d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d58:	3468      	adds	r4, #104	; 0x68
 8009d5a:	e7d9      	b.n	8009d10 <__sfp+0x1c>
 8009d5c:	2104      	movs	r1, #4
 8009d5e:	4638      	mov	r0, r7
 8009d60:	f7ff ff62 	bl	8009c28 <__sfmoreglue>
 8009d64:	4604      	mov	r4, r0
 8009d66:	6030      	str	r0, [r6, #0]
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d1d5      	bne.n	8009d18 <__sfp+0x24>
 8009d6c:	f7ff ff78 	bl	8009c60 <__sfp_lock_release>
 8009d70:	230c      	movs	r3, #12
 8009d72:	603b      	str	r3, [r7, #0]
 8009d74:	e7ee      	b.n	8009d54 <__sfp+0x60>
 8009d76:	bf00      	nop
 8009d78:	0800a9e8 	.word	0x0800a9e8
 8009d7c:	ffff0001 	.word	0xffff0001

08009d80 <_fwalk_reent>:
 8009d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d84:	4606      	mov	r6, r0
 8009d86:	4688      	mov	r8, r1
 8009d88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d8c:	2700      	movs	r7, #0
 8009d8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d92:	f1b9 0901 	subs.w	r9, r9, #1
 8009d96:	d505      	bpl.n	8009da4 <_fwalk_reent+0x24>
 8009d98:	6824      	ldr	r4, [r4, #0]
 8009d9a:	2c00      	cmp	r4, #0
 8009d9c:	d1f7      	bne.n	8009d8e <_fwalk_reent+0xe>
 8009d9e:	4638      	mov	r0, r7
 8009da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da4:	89ab      	ldrh	r3, [r5, #12]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d907      	bls.n	8009dba <_fwalk_reent+0x3a>
 8009daa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dae:	3301      	adds	r3, #1
 8009db0:	d003      	beq.n	8009dba <_fwalk_reent+0x3a>
 8009db2:	4629      	mov	r1, r5
 8009db4:	4630      	mov	r0, r6
 8009db6:	47c0      	blx	r8
 8009db8:	4307      	orrs	r7, r0
 8009dba:	3568      	adds	r5, #104	; 0x68
 8009dbc:	e7e9      	b.n	8009d92 <_fwalk_reent+0x12>

08009dbe <__retarget_lock_init_recursive>:
 8009dbe:	4770      	bx	lr

08009dc0 <__retarget_lock_acquire_recursive>:
 8009dc0:	4770      	bx	lr

08009dc2 <__retarget_lock_release_recursive>:
 8009dc2:	4770      	bx	lr

08009dc4 <__swhatbuf_r>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	460e      	mov	r6, r1
 8009dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dcc:	2900      	cmp	r1, #0
 8009dce:	b096      	sub	sp, #88	; 0x58
 8009dd0:	4614      	mov	r4, r2
 8009dd2:	461d      	mov	r5, r3
 8009dd4:	da08      	bge.n	8009de8 <__swhatbuf_r+0x24>
 8009dd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	061a      	lsls	r2, r3, #24
 8009de0:	d410      	bmi.n	8009e04 <__swhatbuf_r+0x40>
 8009de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009de6:	e00e      	b.n	8009e06 <__swhatbuf_r+0x42>
 8009de8:	466a      	mov	r2, sp
 8009dea:	f000 fc95 	bl	800a718 <_fstat_r>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	dbf1      	blt.n	8009dd6 <__swhatbuf_r+0x12>
 8009df2:	9a01      	ldr	r2, [sp, #4]
 8009df4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009df8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dfc:	425a      	negs	r2, r3
 8009dfe:	415a      	adcs	r2, r3
 8009e00:	602a      	str	r2, [r5, #0]
 8009e02:	e7ee      	b.n	8009de2 <__swhatbuf_r+0x1e>
 8009e04:	2340      	movs	r3, #64	; 0x40
 8009e06:	2000      	movs	r0, #0
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	b016      	add	sp, #88	; 0x58
 8009e0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e10 <__smakebuf_r>:
 8009e10:	898b      	ldrh	r3, [r1, #12]
 8009e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e14:	079d      	lsls	r5, r3, #30
 8009e16:	4606      	mov	r6, r0
 8009e18:	460c      	mov	r4, r1
 8009e1a:	d507      	bpl.n	8009e2c <__smakebuf_r+0x1c>
 8009e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	6123      	str	r3, [r4, #16]
 8009e24:	2301      	movs	r3, #1
 8009e26:	6163      	str	r3, [r4, #20]
 8009e28:	b002      	add	sp, #8
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	ab01      	add	r3, sp, #4
 8009e2e:	466a      	mov	r2, sp
 8009e30:	f7ff ffc8 	bl	8009dc4 <__swhatbuf_r>
 8009e34:	9900      	ldr	r1, [sp, #0]
 8009e36:	4605      	mov	r5, r0
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f000 f895 	bl	8009f68 <_malloc_r>
 8009e3e:	b948      	cbnz	r0, 8009e54 <__smakebuf_r+0x44>
 8009e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e44:	059a      	lsls	r2, r3, #22
 8009e46:	d4ef      	bmi.n	8009e28 <__smakebuf_r+0x18>
 8009e48:	f023 0303 	bic.w	r3, r3, #3
 8009e4c:	f043 0302 	orr.w	r3, r3, #2
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	e7e3      	b.n	8009e1c <__smakebuf_r+0xc>
 8009e54:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <__smakebuf_r+0x7c>)
 8009e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	6020      	str	r0, [r4, #0]
 8009e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e60:	81a3      	strh	r3, [r4, #12]
 8009e62:	9b00      	ldr	r3, [sp, #0]
 8009e64:	6163      	str	r3, [r4, #20]
 8009e66:	9b01      	ldr	r3, [sp, #4]
 8009e68:	6120      	str	r0, [r4, #16]
 8009e6a:	b15b      	cbz	r3, 8009e84 <__smakebuf_r+0x74>
 8009e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e70:	4630      	mov	r0, r6
 8009e72:	f000 fc63 	bl	800a73c <_isatty_r>
 8009e76:	b128      	cbz	r0, 8009e84 <__smakebuf_r+0x74>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f023 0303 	bic.w	r3, r3, #3
 8009e7e:	f043 0301 	orr.w	r3, r3, #1
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	89a0      	ldrh	r0, [r4, #12]
 8009e86:	4305      	orrs	r5, r0
 8009e88:	81a5      	strh	r5, [r4, #12]
 8009e8a:	e7cd      	b.n	8009e28 <__smakebuf_r+0x18>
 8009e8c:	08009c1d 	.word	0x08009c1d

08009e90 <_free_r>:
 8009e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e92:	2900      	cmp	r1, #0
 8009e94:	d044      	beq.n	8009f20 <_free_r+0x90>
 8009e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e9a:	9001      	str	r0, [sp, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009ea2:	bfb8      	it	lt
 8009ea4:	18e4      	addlt	r4, r4, r3
 8009ea6:	f000 fc6b 	bl	800a780 <__malloc_lock>
 8009eaa:	4a1e      	ldr	r2, [pc, #120]	; (8009f24 <_free_r+0x94>)
 8009eac:	9801      	ldr	r0, [sp, #4]
 8009eae:	6813      	ldr	r3, [r2, #0]
 8009eb0:	b933      	cbnz	r3, 8009ec0 <_free_r+0x30>
 8009eb2:	6063      	str	r3, [r4, #4]
 8009eb4:	6014      	str	r4, [r2, #0]
 8009eb6:	b003      	add	sp, #12
 8009eb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ebc:	f000 bc66 	b.w	800a78c <__malloc_unlock>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d908      	bls.n	8009ed6 <_free_r+0x46>
 8009ec4:	6825      	ldr	r5, [r4, #0]
 8009ec6:	1961      	adds	r1, r4, r5
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	bf01      	itttt	eq
 8009ecc:	6819      	ldreq	r1, [r3, #0]
 8009ece:	685b      	ldreq	r3, [r3, #4]
 8009ed0:	1949      	addeq	r1, r1, r5
 8009ed2:	6021      	streq	r1, [r4, #0]
 8009ed4:	e7ed      	b.n	8009eb2 <_free_r+0x22>
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	b10b      	cbz	r3, 8009ee0 <_free_r+0x50>
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	d9fa      	bls.n	8009ed6 <_free_r+0x46>
 8009ee0:	6811      	ldr	r1, [r2, #0]
 8009ee2:	1855      	adds	r5, r2, r1
 8009ee4:	42a5      	cmp	r5, r4
 8009ee6:	d10b      	bne.n	8009f00 <_free_r+0x70>
 8009ee8:	6824      	ldr	r4, [r4, #0]
 8009eea:	4421      	add	r1, r4
 8009eec:	1854      	adds	r4, r2, r1
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	d1e0      	bne.n	8009eb6 <_free_r+0x26>
 8009ef4:	681c      	ldr	r4, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	6053      	str	r3, [r2, #4]
 8009efa:	4421      	add	r1, r4
 8009efc:	6011      	str	r1, [r2, #0]
 8009efe:	e7da      	b.n	8009eb6 <_free_r+0x26>
 8009f00:	d902      	bls.n	8009f08 <_free_r+0x78>
 8009f02:	230c      	movs	r3, #12
 8009f04:	6003      	str	r3, [r0, #0]
 8009f06:	e7d6      	b.n	8009eb6 <_free_r+0x26>
 8009f08:	6825      	ldr	r5, [r4, #0]
 8009f0a:	1961      	adds	r1, r4, r5
 8009f0c:	428b      	cmp	r3, r1
 8009f0e:	bf04      	itt	eq
 8009f10:	6819      	ldreq	r1, [r3, #0]
 8009f12:	685b      	ldreq	r3, [r3, #4]
 8009f14:	6063      	str	r3, [r4, #4]
 8009f16:	bf04      	itt	eq
 8009f18:	1949      	addeq	r1, r1, r5
 8009f1a:	6021      	streq	r1, [r4, #0]
 8009f1c:	6054      	str	r4, [r2, #4]
 8009f1e:	e7ca      	b.n	8009eb6 <_free_r+0x26>
 8009f20:	b003      	add	sp, #12
 8009f22:	bd30      	pop	{r4, r5, pc}
 8009f24:	2000032c 	.word	0x2000032c

08009f28 <sbrk_aligned>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	4e0e      	ldr	r6, [pc, #56]	; (8009f64 <sbrk_aligned+0x3c>)
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	6831      	ldr	r1, [r6, #0]
 8009f30:	4605      	mov	r5, r0
 8009f32:	b911      	cbnz	r1, 8009f3a <sbrk_aligned+0x12>
 8009f34:	f000 fb7a 	bl	800a62c <_sbrk_r>
 8009f38:	6030      	str	r0, [r6, #0]
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f000 fb75 	bl	800a62c <_sbrk_r>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	d00a      	beq.n	8009f5c <sbrk_aligned+0x34>
 8009f46:	1cc4      	adds	r4, r0, #3
 8009f48:	f024 0403 	bic.w	r4, r4, #3
 8009f4c:	42a0      	cmp	r0, r4
 8009f4e:	d007      	beq.n	8009f60 <sbrk_aligned+0x38>
 8009f50:	1a21      	subs	r1, r4, r0
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 fb6a 	bl	800a62c <_sbrk_r>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d101      	bne.n	8009f60 <sbrk_aligned+0x38>
 8009f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f60:	4620      	mov	r0, r4
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	20000330 	.word	0x20000330

08009f68 <_malloc_r>:
 8009f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6c:	1ccd      	adds	r5, r1, #3
 8009f6e:	f025 0503 	bic.w	r5, r5, #3
 8009f72:	3508      	adds	r5, #8
 8009f74:	2d0c      	cmp	r5, #12
 8009f76:	bf38      	it	cc
 8009f78:	250c      	movcc	r5, #12
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	db01      	blt.n	8009f84 <_malloc_r+0x1c>
 8009f80:	42a9      	cmp	r1, r5
 8009f82:	d905      	bls.n	8009f90 <_malloc_r+0x28>
 8009f84:	230c      	movs	r3, #12
 8009f86:	603b      	str	r3, [r7, #0]
 8009f88:	2600      	movs	r6, #0
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f90:	4e2e      	ldr	r6, [pc, #184]	; (800a04c <_malloc_r+0xe4>)
 8009f92:	f000 fbf5 	bl	800a780 <__malloc_lock>
 8009f96:	6833      	ldr	r3, [r6, #0]
 8009f98:	461c      	mov	r4, r3
 8009f9a:	bb34      	cbnz	r4, 8009fea <_malloc_r+0x82>
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	f7ff ffc2 	bl	8009f28 <sbrk_aligned>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	d14d      	bne.n	800a046 <_malloc_r+0xde>
 8009faa:	6834      	ldr	r4, [r6, #0]
 8009fac:	4626      	mov	r6, r4
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d140      	bne.n	800a034 <_malloc_r+0xcc>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	eb04 0803 	add.w	r8, r4, r3
 8009fbc:	f000 fb36 	bl	800a62c <_sbrk_r>
 8009fc0:	4580      	cmp	r8, r0
 8009fc2:	d13a      	bne.n	800a03a <_malloc_r+0xd2>
 8009fc4:	6821      	ldr	r1, [r4, #0]
 8009fc6:	3503      	adds	r5, #3
 8009fc8:	1a6d      	subs	r5, r5, r1
 8009fca:	f025 0503 	bic.w	r5, r5, #3
 8009fce:	3508      	adds	r5, #8
 8009fd0:	2d0c      	cmp	r5, #12
 8009fd2:	bf38      	it	cc
 8009fd4:	250c      	movcc	r5, #12
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7ff ffa5 	bl	8009f28 <sbrk_aligned>
 8009fde:	3001      	adds	r0, #1
 8009fe0:	d02b      	beq.n	800a03a <_malloc_r+0xd2>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	442b      	add	r3, r5
 8009fe6:	6023      	str	r3, [r4, #0]
 8009fe8:	e00e      	b.n	800a008 <_malloc_r+0xa0>
 8009fea:	6822      	ldr	r2, [r4, #0]
 8009fec:	1b52      	subs	r2, r2, r5
 8009fee:	d41e      	bmi.n	800a02e <_malloc_r+0xc6>
 8009ff0:	2a0b      	cmp	r2, #11
 8009ff2:	d916      	bls.n	800a022 <_malloc_r+0xba>
 8009ff4:	1961      	adds	r1, r4, r5
 8009ff6:	42a3      	cmp	r3, r4
 8009ff8:	6025      	str	r5, [r4, #0]
 8009ffa:	bf18      	it	ne
 8009ffc:	6059      	strne	r1, [r3, #4]
 8009ffe:	6863      	ldr	r3, [r4, #4]
 800a000:	bf08      	it	eq
 800a002:	6031      	streq	r1, [r6, #0]
 800a004:	5162      	str	r2, [r4, r5]
 800a006:	604b      	str	r3, [r1, #4]
 800a008:	4638      	mov	r0, r7
 800a00a:	f104 060b 	add.w	r6, r4, #11
 800a00e:	f000 fbbd 	bl	800a78c <__malloc_unlock>
 800a012:	f026 0607 	bic.w	r6, r6, #7
 800a016:	1d23      	adds	r3, r4, #4
 800a018:	1af2      	subs	r2, r6, r3
 800a01a:	d0b6      	beq.n	8009f8a <_malloc_r+0x22>
 800a01c:	1b9b      	subs	r3, r3, r6
 800a01e:	50a3      	str	r3, [r4, r2]
 800a020:	e7b3      	b.n	8009f8a <_malloc_r+0x22>
 800a022:	6862      	ldr	r2, [r4, #4]
 800a024:	42a3      	cmp	r3, r4
 800a026:	bf0c      	ite	eq
 800a028:	6032      	streq	r2, [r6, #0]
 800a02a:	605a      	strne	r2, [r3, #4]
 800a02c:	e7ec      	b.n	800a008 <_malloc_r+0xa0>
 800a02e:	4623      	mov	r3, r4
 800a030:	6864      	ldr	r4, [r4, #4]
 800a032:	e7b2      	b.n	8009f9a <_malloc_r+0x32>
 800a034:	4634      	mov	r4, r6
 800a036:	6876      	ldr	r6, [r6, #4]
 800a038:	e7b9      	b.n	8009fae <_malloc_r+0x46>
 800a03a:	230c      	movs	r3, #12
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	4638      	mov	r0, r7
 800a040:	f000 fba4 	bl	800a78c <__malloc_unlock>
 800a044:	e7a1      	b.n	8009f8a <_malloc_r+0x22>
 800a046:	6025      	str	r5, [r4, #0]
 800a048:	e7de      	b.n	800a008 <_malloc_r+0xa0>
 800a04a:	bf00      	nop
 800a04c:	2000032c 	.word	0x2000032c

0800a050 <__sfputc_r>:
 800a050:	6893      	ldr	r3, [r2, #8]
 800a052:	3b01      	subs	r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	b410      	push	{r4}
 800a058:	6093      	str	r3, [r2, #8]
 800a05a:	da08      	bge.n	800a06e <__sfputc_r+0x1e>
 800a05c:	6994      	ldr	r4, [r2, #24]
 800a05e:	42a3      	cmp	r3, r4
 800a060:	db01      	blt.n	800a066 <__sfputc_r+0x16>
 800a062:	290a      	cmp	r1, #10
 800a064:	d103      	bne.n	800a06e <__sfputc_r+0x1e>
 800a066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a06a:	f7ff bc31 	b.w	80098d0 <__swbuf_r>
 800a06e:	6813      	ldr	r3, [r2, #0]
 800a070:	1c58      	adds	r0, r3, #1
 800a072:	6010      	str	r0, [r2, #0]
 800a074:	7019      	strb	r1, [r3, #0]
 800a076:	4608      	mov	r0, r1
 800a078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <__sfputs_r>:
 800a07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a080:	4606      	mov	r6, r0
 800a082:	460f      	mov	r7, r1
 800a084:	4614      	mov	r4, r2
 800a086:	18d5      	adds	r5, r2, r3
 800a088:	42ac      	cmp	r4, r5
 800a08a:	d101      	bne.n	800a090 <__sfputs_r+0x12>
 800a08c:	2000      	movs	r0, #0
 800a08e:	e007      	b.n	800a0a0 <__sfputs_r+0x22>
 800a090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a094:	463a      	mov	r2, r7
 800a096:	4630      	mov	r0, r6
 800a098:	f7ff ffda 	bl	800a050 <__sfputc_r>
 800a09c:	1c43      	adds	r3, r0, #1
 800a09e:	d1f3      	bne.n	800a088 <__sfputs_r+0xa>
 800a0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0a4 <_vfiprintf_r>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	b09d      	sub	sp, #116	; 0x74
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	4698      	mov	r8, r3
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	b118      	cbz	r0, 800a0bc <_vfiprintf_r+0x18>
 800a0b4:	6983      	ldr	r3, [r0, #24]
 800a0b6:	b90b      	cbnz	r3, 800a0bc <_vfiprintf_r+0x18>
 800a0b8:	f7ff fde4 	bl	8009c84 <__sinit>
 800a0bc:	4b89      	ldr	r3, [pc, #548]	; (800a2e4 <_vfiprintf_r+0x240>)
 800a0be:	429d      	cmp	r5, r3
 800a0c0:	d11b      	bne.n	800a0fa <_vfiprintf_r+0x56>
 800a0c2:	6875      	ldr	r5, [r6, #4]
 800a0c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c6:	07d9      	lsls	r1, r3, #31
 800a0c8:	d405      	bmi.n	800a0d6 <_vfiprintf_r+0x32>
 800a0ca:	89ab      	ldrh	r3, [r5, #12]
 800a0cc:	059a      	lsls	r2, r3, #22
 800a0ce:	d402      	bmi.n	800a0d6 <_vfiprintf_r+0x32>
 800a0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d2:	f7ff fe75 	bl	8009dc0 <__retarget_lock_acquire_recursive>
 800a0d6:	89ab      	ldrh	r3, [r5, #12]
 800a0d8:	071b      	lsls	r3, r3, #28
 800a0da:	d501      	bpl.n	800a0e0 <_vfiprintf_r+0x3c>
 800a0dc:	692b      	ldr	r3, [r5, #16]
 800a0de:	b9eb      	cbnz	r3, 800a11c <_vfiprintf_r+0x78>
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7ff fc46 	bl	8009974 <__swsetup_r>
 800a0e8:	b1c0      	cbz	r0, 800a11c <_vfiprintf_r+0x78>
 800a0ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ec:	07dc      	lsls	r4, r3, #31
 800a0ee:	d50e      	bpl.n	800a10e <_vfiprintf_r+0x6a>
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f4:	b01d      	add	sp, #116	; 0x74
 800a0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fa:	4b7b      	ldr	r3, [pc, #492]	; (800a2e8 <_vfiprintf_r+0x244>)
 800a0fc:	429d      	cmp	r5, r3
 800a0fe:	d101      	bne.n	800a104 <_vfiprintf_r+0x60>
 800a100:	68b5      	ldr	r5, [r6, #8]
 800a102:	e7df      	b.n	800a0c4 <_vfiprintf_r+0x20>
 800a104:	4b79      	ldr	r3, [pc, #484]	; (800a2ec <_vfiprintf_r+0x248>)
 800a106:	429d      	cmp	r5, r3
 800a108:	bf08      	it	eq
 800a10a:	68f5      	ldreq	r5, [r6, #12]
 800a10c:	e7da      	b.n	800a0c4 <_vfiprintf_r+0x20>
 800a10e:	89ab      	ldrh	r3, [r5, #12]
 800a110:	0598      	lsls	r0, r3, #22
 800a112:	d4ed      	bmi.n	800a0f0 <_vfiprintf_r+0x4c>
 800a114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a116:	f7ff fe54 	bl	8009dc2 <__retarget_lock_release_recursive>
 800a11a:	e7e9      	b.n	800a0f0 <_vfiprintf_r+0x4c>
 800a11c:	2300      	movs	r3, #0
 800a11e:	9309      	str	r3, [sp, #36]	; 0x24
 800a120:	2320      	movs	r3, #32
 800a122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a126:	f8cd 800c 	str.w	r8, [sp, #12]
 800a12a:	2330      	movs	r3, #48	; 0x30
 800a12c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2f0 <_vfiprintf_r+0x24c>
 800a130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a134:	f04f 0901 	mov.w	r9, #1
 800a138:	4623      	mov	r3, r4
 800a13a:	469a      	mov	sl, r3
 800a13c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a140:	b10a      	cbz	r2, 800a146 <_vfiprintf_r+0xa2>
 800a142:	2a25      	cmp	r2, #37	; 0x25
 800a144:	d1f9      	bne.n	800a13a <_vfiprintf_r+0x96>
 800a146:	ebba 0b04 	subs.w	fp, sl, r4
 800a14a:	d00b      	beq.n	800a164 <_vfiprintf_r+0xc0>
 800a14c:	465b      	mov	r3, fp
 800a14e:	4622      	mov	r2, r4
 800a150:	4629      	mov	r1, r5
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ff93 	bl	800a07e <__sfputs_r>
 800a158:	3001      	adds	r0, #1
 800a15a:	f000 80aa 	beq.w	800a2b2 <_vfiprintf_r+0x20e>
 800a15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a160:	445a      	add	r2, fp
 800a162:	9209      	str	r2, [sp, #36]	; 0x24
 800a164:	f89a 3000 	ldrb.w	r3, [sl]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80a2 	beq.w	800a2b2 <_vfiprintf_r+0x20e>
 800a16e:	2300      	movs	r3, #0
 800a170:	f04f 32ff 	mov.w	r2, #4294967295
 800a174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a178:	f10a 0a01 	add.w	sl, sl, #1
 800a17c:	9304      	str	r3, [sp, #16]
 800a17e:	9307      	str	r3, [sp, #28]
 800a180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a184:	931a      	str	r3, [sp, #104]	; 0x68
 800a186:	4654      	mov	r4, sl
 800a188:	2205      	movs	r2, #5
 800a18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18e:	4858      	ldr	r0, [pc, #352]	; (800a2f0 <_vfiprintf_r+0x24c>)
 800a190:	f7f6 fd1e 	bl	8000bd0 <memchr>
 800a194:	9a04      	ldr	r2, [sp, #16]
 800a196:	b9d8      	cbnz	r0, 800a1d0 <_vfiprintf_r+0x12c>
 800a198:	06d1      	lsls	r1, r2, #27
 800a19a:	bf44      	itt	mi
 800a19c:	2320      	movmi	r3, #32
 800a19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a2:	0713      	lsls	r3, r2, #28
 800a1a4:	bf44      	itt	mi
 800a1a6:	232b      	movmi	r3, #43	; 0x2b
 800a1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b2:	d015      	beq.n	800a1e0 <_vfiprintf_r+0x13c>
 800a1b4:	9a07      	ldr	r2, [sp, #28]
 800a1b6:	4654      	mov	r4, sl
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	f04f 0c0a 	mov.w	ip, #10
 800a1be:	4621      	mov	r1, r4
 800a1c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c4:	3b30      	subs	r3, #48	; 0x30
 800a1c6:	2b09      	cmp	r3, #9
 800a1c8:	d94e      	bls.n	800a268 <_vfiprintf_r+0x1c4>
 800a1ca:	b1b0      	cbz	r0, 800a1fa <_vfiprintf_r+0x156>
 800a1cc:	9207      	str	r2, [sp, #28]
 800a1ce:	e014      	b.n	800a1fa <_vfiprintf_r+0x156>
 800a1d0:	eba0 0308 	sub.w	r3, r0, r8
 800a1d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	46a2      	mov	sl, r4
 800a1de:	e7d2      	b.n	800a186 <_vfiprintf_r+0xe2>
 800a1e0:	9b03      	ldr	r3, [sp, #12]
 800a1e2:	1d19      	adds	r1, r3, #4
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	9103      	str	r1, [sp, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	bfbb      	ittet	lt
 800a1ec:	425b      	neglt	r3, r3
 800a1ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a1f2:	9307      	strge	r3, [sp, #28]
 800a1f4:	9307      	strlt	r3, [sp, #28]
 800a1f6:	bfb8      	it	lt
 800a1f8:	9204      	strlt	r2, [sp, #16]
 800a1fa:	7823      	ldrb	r3, [r4, #0]
 800a1fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1fe:	d10c      	bne.n	800a21a <_vfiprintf_r+0x176>
 800a200:	7863      	ldrb	r3, [r4, #1]
 800a202:	2b2a      	cmp	r3, #42	; 0x2a
 800a204:	d135      	bne.n	800a272 <_vfiprintf_r+0x1ce>
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	1d1a      	adds	r2, r3, #4
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	9203      	str	r2, [sp, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	bfb8      	it	lt
 800a212:	f04f 33ff 	movlt.w	r3, #4294967295
 800a216:	3402      	adds	r4, #2
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a300 <_vfiprintf_r+0x25c>
 800a21e:	7821      	ldrb	r1, [r4, #0]
 800a220:	2203      	movs	r2, #3
 800a222:	4650      	mov	r0, sl
 800a224:	f7f6 fcd4 	bl	8000bd0 <memchr>
 800a228:	b140      	cbz	r0, 800a23c <_vfiprintf_r+0x198>
 800a22a:	2340      	movs	r3, #64	; 0x40
 800a22c:	eba0 000a 	sub.w	r0, r0, sl
 800a230:	fa03 f000 	lsl.w	r0, r3, r0
 800a234:	9b04      	ldr	r3, [sp, #16]
 800a236:	4303      	orrs	r3, r0
 800a238:	3401      	adds	r4, #1
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a240:	482c      	ldr	r0, [pc, #176]	; (800a2f4 <_vfiprintf_r+0x250>)
 800a242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a246:	2206      	movs	r2, #6
 800a248:	f7f6 fcc2 	bl	8000bd0 <memchr>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d03f      	beq.n	800a2d0 <_vfiprintf_r+0x22c>
 800a250:	4b29      	ldr	r3, [pc, #164]	; (800a2f8 <_vfiprintf_r+0x254>)
 800a252:	bb1b      	cbnz	r3, 800a29c <_vfiprintf_r+0x1f8>
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	3307      	adds	r3, #7
 800a258:	f023 0307 	bic.w	r3, r3, #7
 800a25c:	3308      	adds	r3, #8
 800a25e:	9303      	str	r3, [sp, #12]
 800a260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a262:	443b      	add	r3, r7
 800a264:	9309      	str	r3, [sp, #36]	; 0x24
 800a266:	e767      	b.n	800a138 <_vfiprintf_r+0x94>
 800a268:	fb0c 3202 	mla	r2, ip, r2, r3
 800a26c:	460c      	mov	r4, r1
 800a26e:	2001      	movs	r0, #1
 800a270:	e7a5      	b.n	800a1be <_vfiprintf_r+0x11a>
 800a272:	2300      	movs	r3, #0
 800a274:	3401      	adds	r4, #1
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	4619      	mov	r1, r3
 800a27a:	f04f 0c0a 	mov.w	ip, #10
 800a27e:	4620      	mov	r0, r4
 800a280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a284:	3a30      	subs	r2, #48	; 0x30
 800a286:	2a09      	cmp	r2, #9
 800a288:	d903      	bls.n	800a292 <_vfiprintf_r+0x1ee>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0c5      	beq.n	800a21a <_vfiprintf_r+0x176>
 800a28e:	9105      	str	r1, [sp, #20]
 800a290:	e7c3      	b.n	800a21a <_vfiprintf_r+0x176>
 800a292:	fb0c 2101 	mla	r1, ip, r1, r2
 800a296:	4604      	mov	r4, r0
 800a298:	2301      	movs	r3, #1
 800a29a:	e7f0      	b.n	800a27e <_vfiprintf_r+0x1da>
 800a29c:	ab03      	add	r3, sp, #12
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	462a      	mov	r2, r5
 800a2a2:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <_vfiprintf_r+0x258>)
 800a2a4:	a904      	add	r1, sp, #16
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f3af 8000 	nop.w
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	1c78      	adds	r0, r7, #1
 800a2b0:	d1d6      	bne.n	800a260 <_vfiprintf_r+0x1bc>
 800a2b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b4:	07d9      	lsls	r1, r3, #31
 800a2b6:	d405      	bmi.n	800a2c4 <_vfiprintf_r+0x220>
 800a2b8:	89ab      	ldrh	r3, [r5, #12]
 800a2ba:	059a      	lsls	r2, r3, #22
 800a2bc:	d402      	bmi.n	800a2c4 <_vfiprintf_r+0x220>
 800a2be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2c0:	f7ff fd7f 	bl	8009dc2 <__retarget_lock_release_recursive>
 800a2c4:	89ab      	ldrh	r3, [r5, #12]
 800a2c6:	065b      	lsls	r3, r3, #25
 800a2c8:	f53f af12 	bmi.w	800a0f0 <_vfiprintf_r+0x4c>
 800a2cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ce:	e711      	b.n	800a0f4 <_vfiprintf_r+0x50>
 800a2d0:	ab03      	add	r3, sp, #12
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <_vfiprintf_r+0x258>)
 800a2d8:	a904      	add	r1, sp, #16
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f000 f880 	bl	800a3e0 <_printf_i>
 800a2e0:	e7e4      	b.n	800a2ac <_vfiprintf_r+0x208>
 800a2e2:	bf00      	nop
 800a2e4:	0800aa0c 	.word	0x0800aa0c
 800a2e8:	0800aa2c 	.word	0x0800aa2c
 800a2ec:	0800a9ec 	.word	0x0800a9ec
 800a2f0:	0800aa4c 	.word	0x0800aa4c
 800a2f4:	0800aa56 	.word	0x0800aa56
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	0800a07f 	.word	0x0800a07f
 800a300:	0800aa52 	.word	0x0800aa52

0800a304 <_printf_common>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	4616      	mov	r6, r2
 800a30a:	4699      	mov	r9, r3
 800a30c:	688a      	ldr	r2, [r1, #8]
 800a30e:	690b      	ldr	r3, [r1, #16]
 800a310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a314:	4293      	cmp	r3, r2
 800a316:	bfb8      	it	lt
 800a318:	4613      	movlt	r3, r2
 800a31a:	6033      	str	r3, [r6, #0]
 800a31c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a320:	4607      	mov	r7, r0
 800a322:	460c      	mov	r4, r1
 800a324:	b10a      	cbz	r2, 800a32a <_printf_common+0x26>
 800a326:	3301      	adds	r3, #1
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	0699      	lsls	r1, r3, #26
 800a32e:	bf42      	ittt	mi
 800a330:	6833      	ldrmi	r3, [r6, #0]
 800a332:	3302      	addmi	r3, #2
 800a334:	6033      	strmi	r3, [r6, #0]
 800a336:	6825      	ldr	r5, [r4, #0]
 800a338:	f015 0506 	ands.w	r5, r5, #6
 800a33c:	d106      	bne.n	800a34c <_printf_common+0x48>
 800a33e:	f104 0a19 	add.w	sl, r4, #25
 800a342:	68e3      	ldr	r3, [r4, #12]
 800a344:	6832      	ldr	r2, [r6, #0]
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	42ab      	cmp	r3, r5
 800a34a:	dc26      	bgt.n	800a39a <_printf_common+0x96>
 800a34c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a350:	1e13      	subs	r3, r2, #0
 800a352:	6822      	ldr	r2, [r4, #0]
 800a354:	bf18      	it	ne
 800a356:	2301      	movne	r3, #1
 800a358:	0692      	lsls	r2, r2, #26
 800a35a:	d42b      	bmi.n	800a3b4 <_printf_common+0xb0>
 800a35c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a360:	4649      	mov	r1, r9
 800a362:	4638      	mov	r0, r7
 800a364:	47c0      	blx	r8
 800a366:	3001      	adds	r0, #1
 800a368:	d01e      	beq.n	800a3a8 <_printf_common+0xa4>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	68e5      	ldr	r5, [r4, #12]
 800a36e:	6832      	ldr	r2, [r6, #0]
 800a370:	f003 0306 	and.w	r3, r3, #6
 800a374:	2b04      	cmp	r3, #4
 800a376:	bf08      	it	eq
 800a378:	1aad      	subeq	r5, r5, r2
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	6922      	ldr	r2, [r4, #16]
 800a37e:	bf0c      	ite	eq
 800a380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a384:	2500      	movne	r5, #0
 800a386:	4293      	cmp	r3, r2
 800a388:	bfc4      	itt	gt
 800a38a:	1a9b      	subgt	r3, r3, r2
 800a38c:	18ed      	addgt	r5, r5, r3
 800a38e:	2600      	movs	r6, #0
 800a390:	341a      	adds	r4, #26
 800a392:	42b5      	cmp	r5, r6
 800a394:	d11a      	bne.n	800a3cc <_printf_common+0xc8>
 800a396:	2000      	movs	r0, #0
 800a398:	e008      	b.n	800a3ac <_printf_common+0xa8>
 800a39a:	2301      	movs	r3, #1
 800a39c:	4652      	mov	r2, sl
 800a39e:	4649      	mov	r1, r9
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	47c0      	blx	r8
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d103      	bne.n	800a3b0 <_printf_common+0xac>
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	e7c6      	b.n	800a342 <_printf_common+0x3e>
 800a3b4:	18e1      	adds	r1, r4, r3
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	2030      	movs	r0, #48	; 0x30
 800a3ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3be:	4422      	add	r2, r4
 800a3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3c8:	3302      	adds	r3, #2
 800a3ca:	e7c7      	b.n	800a35c <_printf_common+0x58>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	47c0      	blx	r8
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d0e6      	beq.n	800a3a8 <_printf_common+0xa4>
 800a3da:	3601      	adds	r6, #1
 800a3dc:	e7d9      	b.n	800a392 <_printf_common+0x8e>
	...

0800a3e0 <_printf_i>:
 800a3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	7e0f      	ldrb	r7, [r1, #24]
 800a3e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3e8:	2f78      	cmp	r7, #120	; 0x78
 800a3ea:	4691      	mov	r9, r2
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	469a      	mov	sl, r3
 800a3f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3f6:	d807      	bhi.n	800a408 <_printf_i+0x28>
 800a3f8:	2f62      	cmp	r7, #98	; 0x62
 800a3fa:	d80a      	bhi.n	800a412 <_printf_i+0x32>
 800a3fc:	2f00      	cmp	r7, #0
 800a3fe:	f000 80d8 	beq.w	800a5b2 <_printf_i+0x1d2>
 800a402:	2f58      	cmp	r7, #88	; 0x58
 800a404:	f000 80a3 	beq.w	800a54e <_printf_i+0x16e>
 800a408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a40c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a410:	e03a      	b.n	800a488 <_printf_i+0xa8>
 800a412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a416:	2b15      	cmp	r3, #21
 800a418:	d8f6      	bhi.n	800a408 <_printf_i+0x28>
 800a41a:	a101      	add	r1, pc, #4	; (adr r1, 800a420 <_printf_i+0x40>)
 800a41c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a420:	0800a479 	.word	0x0800a479
 800a424:	0800a48d 	.word	0x0800a48d
 800a428:	0800a409 	.word	0x0800a409
 800a42c:	0800a409 	.word	0x0800a409
 800a430:	0800a409 	.word	0x0800a409
 800a434:	0800a409 	.word	0x0800a409
 800a438:	0800a48d 	.word	0x0800a48d
 800a43c:	0800a409 	.word	0x0800a409
 800a440:	0800a409 	.word	0x0800a409
 800a444:	0800a409 	.word	0x0800a409
 800a448:	0800a409 	.word	0x0800a409
 800a44c:	0800a599 	.word	0x0800a599
 800a450:	0800a4bd 	.word	0x0800a4bd
 800a454:	0800a57b 	.word	0x0800a57b
 800a458:	0800a409 	.word	0x0800a409
 800a45c:	0800a409 	.word	0x0800a409
 800a460:	0800a5bb 	.word	0x0800a5bb
 800a464:	0800a409 	.word	0x0800a409
 800a468:	0800a4bd 	.word	0x0800a4bd
 800a46c:	0800a409 	.word	0x0800a409
 800a470:	0800a409 	.word	0x0800a409
 800a474:	0800a583 	.word	0x0800a583
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	602a      	str	r2, [r5, #0]
 800a480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a488:	2301      	movs	r3, #1
 800a48a:	e0a3      	b.n	800a5d4 <_printf_i+0x1f4>
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	6829      	ldr	r1, [r5, #0]
 800a490:	0606      	lsls	r6, r0, #24
 800a492:	f101 0304 	add.w	r3, r1, #4
 800a496:	d50a      	bpl.n	800a4ae <_printf_i+0xce>
 800a498:	680e      	ldr	r6, [r1, #0]
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	2e00      	cmp	r6, #0
 800a49e:	da03      	bge.n	800a4a8 <_printf_i+0xc8>
 800a4a0:	232d      	movs	r3, #45	; 0x2d
 800a4a2:	4276      	negs	r6, r6
 800a4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a8:	485e      	ldr	r0, [pc, #376]	; (800a624 <_printf_i+0x244>)
 800a4aa:	230a      	movs	r3, #10
 800a4ac:	e019      	b.n	800a4e2 <_printf_i+0x102>
 800a4ae:	680e      	ldr	r6, [r1, #0]
 800a4b0:	602b      	str	r3, [r5, #0]
 800a4b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4b6:	bf18      	it	ne
 800a4b8:	b236      	sxthne	r6, r6
 800a4ba:	e7ef      	b.n	800a49c <_printf_i+0xbc>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	6820      	ldr	r0, [r4, #0]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	6029      	str	r1, [r5, #0]
 800a4c4:	0601      	lsls	r1, r0, #24
 800a4c6:	d501      	bpl.n	800a4cc <_printf_i+0xec>
 800a4c8:	681e      	ldr	r6, [r3, #0]
 800a4ca:	e002      	b.n	800a4d2 <_printf_i+0xf2>
 800a4cc:	0646      	lsls	r6, r0, #25
 800a4ce:	d5fb      	bpl.n	800a4c8 <_printf_i+0xe8>
 800a4d0:	881e      	ldrh	r6, [r3, #0]
 800a4d2:	4854      	ldr	r0, [pc, #336]	; (800a624 <_printf_i+0x244>)
 800a4d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a4d6:	bf0c      	ite	eq
 800a4d8:	2308      	moveq	r3, #8
 800a4da:	230a      	movne	r3, #10
 800a4dc:	2100      	movs	r1, #0
 800a4de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4e2:	6865      	ldr	r5, [r4, #4]
 800a4e4:	60a5      	str	r5, [r4, #8]
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	bfa2      	ittt	ge
 800a4ea:	6821      	ldrge	r1, [r4, #0]
 800a4ec:	f021 0104 	bicge.w	r1, r1, #4
 800a4f0:	6021      	strge	r1, [r4, #0]
 800a4f2:	b90e      	cbnz	r6, 800a4f8 <_printf_i+0x118>
 800a4f4:	2d00      	cmp	r5, #0
 800a4f6:	d04d      	beq.n	800a594 <_printf_i+0x1b4>
 800a4f8:	4615      	mov	r5, r2
 800a4fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4fe:	fb03 6711 	mls	r7, r3, r1, r6
 800a502:	5dc7      	ldrb	r7, [r0, r7]
 800a504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a508:	4637      	mov	r7, r6
 800a50a:	42bb      	cmp	r3, r7
 800a50c:	460e      	mov	r6, r1
 800a50e:	d9f4      	bls.n	800a4fa <_printf_i+0x11a>
 800a510:	2b08      	cmp	r3, #8
 800a512:	d10b      	bne.n	800a52c <_printf_i+0x14c>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	07de      	lsls	r6, r3, #31
 800a518:	d508      	bpl.n	800a52c <_printf_i+0x14c>
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	6861      	ldr	r1, [r4, #4]
 800a51e:	4299      	cmp	r1, r3
 800a520:	bfde      	ittt	le
 800a522:	2330      	movle	r3, #48	; 0x30
 800a524:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a528:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a52c:	1b52      	subs	r2, r2, r5
 800a52e:	6122      	str	r2, [r4, #16]
 800a530:	f8cd a000 	str.w	sl, [sp]
 800a534:	464b      	mov	r3, r9
 800a536:	aa03      	add	r2, sp, #12
 800a538:	4621      	mov	r1, r4
 800a53a:	4640      	mov	r0, r8
 800a53c:	f7ff fee2 	bl	800a304 <_printf_common>
 800a540:	3001      	adds	r0, #1
 800a542:	d14c      	bne.n	800a5de <_printf_i+0x1fe>
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	b004      	add	sp, #16
 800a54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54e:	4835      	ldr	r0, [pc, #212]	; (800a624 <_printf_i+0x244>)
 800a550:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a554:	6829      	ldr	r1, [r5, #0]
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	f851 6b04 	ldr.w	r6, [r1], #4
 800a55c:	6029      	str	r1, [r5, #0]
 800a55e:	061d      	lsls	r5, r3, #24
 800a560:	d514      	bpl.n	800a58c <_printf_i+0x1ac>
 800a562:	07df      	lsls	r7, r3, #31
 800a564:	bf44      	itt	mi
 800a566:	f043 0320 	orrmi.w	r3, r3, #32
 800a56a:	6023      	strmi	r3, [r4, #0]
 800a56c:	b91e      	cbnz	r6, 800a576 <_printf_i+0x196>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	f023 0320 	bic.w	r3, r3, #32
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	2310      	movs	r3, #16
 800a578:	e7b0      	b.n	800a4dc <_printf_i+0xfc>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	f043 0320 	orr.w	r3, r3, #32
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	2378      	movs	r3, #120	; 0x78
 800a584:	4828      	ldr	r0, [pc, #160]	; (800a628 <_printf_i+0x248>)
 800a586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a58a:	e7e3      	b.n	800a554 <_printf_i+0x174>
 800a58c:	0659      	lsls	r1, r3, #25
 800a58e:	bf48      	it	mi
 800a590:	b2b6      	uxthmi	r6, r6
 800a592:	e7e6      	b.n	800a562 <_printf_i+0x182>
 800a594:	4615      	mov	r5, r2
 800a596:	e7bb      	b.n	800a510 <_printf_i+0x130>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	6826      	ldr	r6, [r4, #0]
 800a59c:	6961      	ldr	r1, [r4, #20]
 800a59e:	1d18      	adds	r0, r3, #4
 800a5a0:	6028      	str	r0, [r5, #0]
 800a5a2:	0635      	lsls	r5, r6, #24
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	d501      	bpl.n	800a5ac <_printf_i+0x1cc>
 800a5a8:	6019      	str	r1, [r3, #0]
 800a5aa:	e002      	b.n	800a5b2 <_printf_i+0x1d2>
 800a5ac:	0670      	lsls	r0, r6, #25
 800a5ae:	d5fb      	bpl.n	800a5a8 <_printf_i+0x1c8>
 800a5b0:	8019      	strh	r1, [r3, #0]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	4615      	mov	r5, r2
 800a5b8:	e7ba      	b.n	800a530 <_printf_i+0x150>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	602a      	str	r2, [r5, #0]
 800a5c0:	681d      	ldr	r5, [r3, #0]
 800a5c2:	6862      	ldr	r2, [r4, #4]
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f7f6 fb02 	bl	8000bd0 <memchr>
 800a5cc:	b108      	cbz	r0, 800a5d2 <_printf_i+0x1f2>
 800a5ce:	1b40      	subs	r0, r0, r5
 800a5d0:	6060      	str	r0, [r4, #4]
 800a5d2:	6863      	ldr	r3, [r4, #4]
 800a5d4:	6123      	str	r3, [r4, #16]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5dc:	e7a8      	b.n	800a530 <_printf_i+0x150>
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	47d0      	blx	sl
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d0ab      	beq.n	800a544 <_printf_i+0x164>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	079b      	lsls	r3, r3, #30
 800a5f0:	d413      	bmi.n	800a61a <_printf_i+0x23a>
 800a5f2:	68e0      	ldr	r0, [r4, #12]
 800a5f4:	9b03      	ldr	r3, [sp, #12]
 800a5f6:	4298      	cmp	r0, r3
 800a5f8:	bfb8      	it	lt
 800a5fa:	4618      	movlt	r0, r3
 800a5fc:	e7a4      	b.n	800a548 <_printf_i+0x168>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4632      	mov	r2, r6
 800a602:	4649      	mov	r1, r9
 800a604:	4640      	mov	r0, r8
 800a606:	47d0      	blx	sl
 800a608:	3001      	adds	r0, #1
 800a60a:	d09b      	beq.n	800a544 <_printf_i+0x164>
 800a60c:	3501      	adds	r5, #1
 800a60e:	68e3      	ldr	r3, [r4, #12]
 800a610:	9903      	ldr	r1, [sp, #12]
 800a612:	1a5b      	subs	r3, r3, r1
 800a614:	42ab      	cmp	r3, r5
 800a616:	dcf2      	bgt.n	800a5fe <_printf_i+0x21e>
 800a618:	e7eb      	b.n	800a5f2 <_printf_i+0x212>
 800a61a:	2500      	movs	r5, #0
 800a61c:	f104 0619 	add.w	r6, r4, #25
 800a620:	e7f5      	b.n	800a60e <_printf_i+0x22e>
 800a622:	bf00      	nop
 800a624:	0800aa5d 	.word	0x0800aa5d
 800a628:	0800aa6e 	.word	0x0800aa6e

0800a62c <_sbrk_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d06      	ldr	r5, [pc, #24]	; (800a648 <_sbrk_r+0x1c>)
 800a630:	2300      	movs	r3, #0
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	602b      	str	r3, [r5, #0]
 800a638:	f7f7 fe4e 	bl	80022d8 <_sbrk>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_sbrk_r+0x1a>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_sbrk_r+0x1a>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	20000334 	.word	0x20000334

0800a64c <__sread>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	460c      	mov	r4, r1
 800a650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a654:	f000 f8a0 	bl	800a798 <_read_r>
 800a658:	2800      	cmp	r0, #0
 800a65a:	bfab      	itete	ge
 800a65c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a65e:	89a3      	ldrhlt	r3, [r4, #12]
 800a660:	181b      	addge	r3, r3, r0
 800a662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a666:	bfac      	ite	ge
 800a668:	6563      	strge	r3, [r4, #84]	; 0x54
 800a66a:	81a3      	strhlt	r3, [r4, #12]
 800a66c:	bd10      	pop	{r4, pc}

0800a66e <__swrite>:
 800a66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a672:	461f      	mov	r7, r3
 800a674:	898b      	ldrh	r3, [r1, #12]
 800a676:	05db      	lsls	r3, r3, #23
 800a678:	4605      	mov	r5, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	4616      	mov	r6, r2
 800a67e:	d505      	bpl.n	800a68c <__swrite+0x1e>
 800a680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a684:	2302      	movs	r3, #2
 800a686:	2200      	movs	r2, #0
 800a688:	f000 f868 	bl	800a75c <_lseek_r>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	4632      	mov	r2, r6
 800a69a:	463b      	mov	r3, r7
 800a69c:	4628      	mov	r0, r5
 800a69e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a2:	f000 b817 	b.w	800a6d4 <_write_r>

0800a6a6 <__sseek>:
 800a6a6:	b510      	push	{r4, lr}
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ae:	f000 f855 	bl	800a75c <_lseek_r>
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	bf15      	itete	ne
 800a6b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6c2:	81a3      	strheq	r3, [r4, #12]
 800a6c4:	bf18      	it	ne
 800a6c6:	81a3      	strhne	r3, [r4, #12]
 800a6c8:	bd10      	pop	{r4, pc}

0800a6ca <__sclose>:
 800a6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ce:	f000 b813 	b.w	800a6f8 <_close_r>
	...

0800a6d4 <_write_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4d07      	ldr	r5, [pc, #28]	; (800a6f4 <_write_r+0x20>)
 800a6d8:	4604      	mov	r4, r0
 800a6da:	4608      	mov	r0, r1
 800a6dc:	4611      	mov	r1, r2
 800a6de:	2200      	movs	r2, #0
 800a6e0:	602a      	str	r2, [r5, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f7f7 fda7 	bl	8002236 <_write>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_write_r+0x1e>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_write_r+0x1e>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	20000334 	.word	0x20000334

0800a6f8 <_close_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d06      	ldr	r5, [pc, #24]	; (800a714 <_close_r+0x1c>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	602b      	str	r3, [r5, #0]
 800a704:	f7f7 fdb3 	bl	800226e <_close>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_close_r+0x1a>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_close_r+0x1a>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	20000334 	.word	0x20000334

0800a718 <_fstat_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d07      	ldr	r5, [pc, #28]	; (800a738 <_fstat_r+0x20>)
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	4608      	mov	r0, r1
 800a722:	4611      	mov	r1, r2
 800a724:	602b      	str	r3, [r5, #0]
 800a726:	f7f7 fdae 	bl	8002286 <_fstat>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	d102      	bne.n	800a734 <_fstat_r+0x1c>
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	b103      	cbz	r3, 800a734 <_fstat_r+0x1c>
 800a732:	6023      	str	r3, [r4, #0]
 800a734:	bd38      	pop	{r3, r4, r5, pc}
 800a736:	bf00      	nop
 800a738:	20000334 	.word	0x20000334

0800a73c <_isatty_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d06      	ldr	r5, [pc, #24]	; (800a758 <_isatty_r+0x1c>)
 800a740:	2300      	movs	r3, #0
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	602b      	str	r3, [r5, #0]
 800a748:	f7f7 fdad 	bl	80022a6 <_isatty>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	d102      	bne.n	800a756 <_isatty_r+0x1a>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	b103      	cbz	r3, 800a756 <_isatty_r+0x1a>
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	20000334 	.word	0x20000334

0800a75c <_lseek_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	4d07      	ldr	r5, [pc, #28]	; (800a77c <_lseek_r+0x20>)
 800a760:	4604      	mov	r4, r0
 800a762:	4608      	mov	r0, r1
 800a764:	4611      	mov	r1, r2
 800a766:	2200      	movs	r2, #0
 800a768:	602a      	str	r2, [r5, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	f7f7 fda6 	bl	80022bc <_lseek>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_lseek_r+0x1e>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	b103      	cbz	r3, 800a77a <_lseek_r+0x1e>
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	20000334 	.word	0x20000334

0800a780 <__malloc_lock>:
 800a780:	4801      	ldr	r0, [pc, #4]	; (800a788 <__malloc_lock+0x8>)
 800a782:	f7ff bb1d 	b.w	8009dc0 <__retarget_lock_acquire_recursive>
 800a786:	bf00      	nop
 800a788:	20000328 	.word	0x20000328

0800a78c <__malloc_unlock>:
 800a78c:	4801      	ldr	r0, [pc, #4]	; (800a794 <__malloc_unlock+0x8>)
 800a78e:	f7ff bb18 	b.w	8009dc2 <__retarget_lock_release_recursive>
 800a792:	bf00      	nop
 800a794:	20000328 	.word	0x20000328

0800a798 <_read_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	; (800a7b8 <_read_r+0x20>)
 800a79c:	4604      	mov	r4, r0
 800a79e:	4608      	mov	r0, r1
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f7f7 fd28 	bl	80021fc <_read>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_read_r+0x1e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_read_r+0x1e>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20000334 	.word	0x20000334

0800a7bc <_init>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr

0800a7c8 <_fini>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr
 800a7d4:	0000      	movs	r0, r0
	...

0800a7d8 <__init_synthesiser_veneer>:
 800a7d8:	f85f f000 	ldr.w	pc, [pc]	; 800a7dc <__init_synthesiser_veneer+0x4>
 800a7dc:	00000123 	.word	0x00000123

0800a7e0 <__run_sweep_veneer>:
 800a7e0:	f85f f000 	ldr.w	pc, [pc]	; 800a7e4 <__run_sweep_veneer+0x4>
 800a7e4:	000004a1 	.word	0x000004a1

0800a7e8 <__set_aom_atten_veneer>:
 800a7e8:	f85f f000 	ldr.w	pc, [pc]	; 800a7ec <__set_aom_atten_veneer+0x4>
 800a7ec:	0000070d 	.word	0x0000070d

0800a7f0 <__set_frequency_hz_veneer>:
 800a7f0:	f85f f000 	ldr.w	pc, [pc]	; 800a7f4 <__set_frequency_hz_veneer+0x4>
 800a7f4:	0000038d 	.word	0x0000038d

0800a7f8 <__timer_delay_veneer>:
 800a7f8:	f85f f000 	ldr.w	pc, [pc]	; 800a7fc <__timer_delay_veneer+0x4>
 800a7fc:	000006b1 	.word	0x000006b1

0800a800 <__stop_pop_veneer>:
 800a800:	f85f f000 	ldr.w	pc, [pc]	; 800a804 <__stop_pop_veneer+0x4>
 800a804:	00000835 	.word	0x00000835

0800a808 <__start_pop_veneer>:
 800a808:	f85f f000 	ldr.w	pc, [pc]	; 800a80c <__start_pop_veneer+0x4>
 800a80c:	000007ad 	.word	0x000007ad
